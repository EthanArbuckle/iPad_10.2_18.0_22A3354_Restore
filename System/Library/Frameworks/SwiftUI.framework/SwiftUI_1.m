unint64_t lazy protocol witness table accessor for type Divider.Child and conformance Divider.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Divider.Child and conformance Divider.Child;
  if (!lazy protocol witness table cache variable for type Divider.Child and conformance Divider.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Divider.Child, &unk_1E1B0B2B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Divider.Child and conformance Divider.Child);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedDivider> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedDivider> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedDivider> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedDivider>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider, (uint64_t)&type metadata for ResolvedDivider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedDivider> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

uint64_t protocol witness for static AnyStyleModifierType.makeView<A>(view:modifier:inputs:) in conformance StyleModifierType<A>@<X0>(int *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  return static StyleModifierType.makeView<A>(view:modifier:inputs:)(a1, a2, a3, a4, *(_QWORD *)(a6 + 16), a5, *(_QWORD *)(a6 + 24), a7);
}

uint64_t static StyleModifierType.makeView<A>(view:modifier:inputs:)@<X0>(int *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  int v27;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  _BYTE v47[4];
  int v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  int v60;

  v11 = *a1;
  v12 = *a4;
  v13 = *((_DWORD *)a4 + 2);
  v14 = a4[2];
  v15 = a4[5];
  v16 = a4[6];
  v17 = *((_DWORD *)a4 + 20);
  swift_getAssociatedTypeWitness();
  v32 = *(_OWORD *)(a4 + 3);
  v34 = *(_OWORD *)(a4 + 7);
  v18 = a4[9];
  static DynamicPropertyCache.fields(of:)();
  v19 = v52;
  v20 = v53;
  v21 = v54;
  v22 = HIDWORD(v54);
  v52 = v12;
  LODWORD(v53) = v13;
  v55 = v32;
  v54 = v14;
  v56 = v15;
  v57 = v16;
  v58 = v34;
  v59 = v18;
  v60 = v17;
  v27 = v22;
  v48 = v11;
  v35 = v19;
  v38 = v19;
  v39 = v20;
  v33 = v20;
  v31 = v21;
  LOBYTE(v40) = v21;
  HIDWORD(v40) = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static StyleModifierType.makeStyleBody<A>(view:modifier:inputs:fields:)((uint64_t)v47, (uint64_t)&v49, (uint64_t)&v48, a2, a3, (uint64_t)&v52, (uint64_t)&v38, a5, a6, a7);
  v23 = v50;
  v30 = v49;
  LOBYTE(v17) = v51;
  swift_getAssociatedTypeWitness();
  v38 = v52;
  LODWORD(v39) = v53;
  v40 = v54;
  v41 = v55;
  v42 = v56;
  v43 = v57;
  v44 = v58;
  v45 = v59;
  v46 = v60;
  swift_getAssociatedConformanceWitness();
  static View.makeDebuggableView(view:inputs:)();
  v24 = v49;
  v25 = v50;
  if ((v17 & 1) == 0)
  {
    v49 = v30;
    v50 = v23;
    v48 = v11;
    v38 = v35;
    v39 = v33;
    LOBYTE(v40) = v31;
    HIDWORD(v40) = v27;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a8 = v24;
  a8[1] = v25;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedDivider and conformance ResolvedDivider;
  if (!lazy protocol witness table cache variable for type ResolvedDivider and conformance ResolvedDivider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedDivider, &type metadata for ResolvedDivider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedDivider and conformance ResolvedDivider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedDivider and conformance ResolvedDivider;
  if (!lazy protocol witness table cache variable for type ResolvedDivider and conformance ResolvedDivider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedDivider, &type metadata for ResolvedDivider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedDivider and conformance ResolvedDivider);
  }
  return result;
}

uint64_t UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  void (*v45)(_BYTE *, char *, int *);
  uint64_t v46;
  char v47;
  void (*v48)(_BYTE *, int *);
  unsigned int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  void (*v62)(_BYTE *, uint64_t, uint64_t);
  uint64_t v63;
  _BYTE *v64;
  _QWORD *v65;
  char *v66;
  _BYTE *v67;
  void (*v68)(_BYTE *, char *, int *);
  void (*v69)(_BYTE *, int *);
  uint64_t v70;
  char v71;
  uint64_t v72;
  id v73;
  _QWORD *v74;
  id v75;
  _BYTE v77[12];
  unsigned int v78;
  uint64_t v79;
  void (*v80)(_BYTE *, int *);
  void (*v81)(_BYTE *, char *, int *);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  void (*v90)(_BYTE *, char *, uint64_t);
  id v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  _BYTE v100[24];

  v5 = v4;
  LODWORD(v90) = a4;
  v99 = a2;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = *MEMORY[0x1E0DEEDD8] & *v4;
  v10 = *(_QWORD *)(v9 + 96);
  v11 = type metadata accessor for Optional();
  v93 = *(_QWORD *)(v11 - 8);
  v94 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v92 = &v77[-v13];
  v84 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v83 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84, v14);
  v86 = &v77[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16, v17);
  v85 = &v77[-v18];
  v97 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v88 = &v77[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v22, v23);
  v87 = &v77[-v24];
  v82 = *(_QWORD *)(v9 + 112);
  v25 = *(_QWORD *)(v82 + 8);
  v27 = type metadata accessor for ShadowListDataSource(0, v10, v25, v26);
  v96 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v95 = &v77[-v29];
  v89 = v25;
  v31 = (int *)type metadata accessor for ListCoreBatchUpdates(0, v10, *(_QWORD *)(v25 + 8), v30);
  v32 = *((_QWORD *)v31 - 1);
  MEMORY[0x1E0C80A78](v31, v33);
  v35 = &v77[-v34];
  v38 = objc_msgSend(a1, sel_setAllowsMultipleSelection_, UICollectionViewListCoordinatorBase.hasMultipleSelection.getter(v36, v37) & 1);
  v40 = UICollectionViewListCoordinatorBase.hasMultipleSelection.getter((uint64_t)v38, v39);
  v91 = a1;
  objc_msgSend(a1, sel_setAllowsMultipleSelectionDuringEditing_, v40 & 1);
  v41 = (_QWORD *)(*v8 & *v5);
  v98 = *((unsigned __int8 *)v5 + v41[29]);
  if (v98 != 1)
  {
    v42 = (_QWORD *)((char *)v5 + v41[20]);
    swift_beginAccess();
    v43 = *v42;
    *v42 = a3;
    outlined consume of Transaction?(v43);
    v41 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v5);
    swift_retain();
  }
  v44 = (char *)v5 + v41[22];
  swift_beginAccess();
  v45 = *(void (**)(_BYTE *, char *, int *))(v32 + 16);
  v45(v35, v44, v31);
  v47 = ListCoreBatchUpdates.isEmpty.getter(v31, v46);
  v48 = *(void (**)(_BYTE *, int *))(v32 + 8);
  v48(v35, v31);
  if ((v47 & 1) == 0)
  {
    v50 = (char *)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x88);
    swift_beginAccess();
    v51 = (uint64_t)v95;
    (*(void (**)(_BYTE *, char *, uint64_t))(v96 + 16))(v95, v50, v27);
    swift_beginAccess();
    v52 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v27);
    ListCoreBatchUpdates.formUpdates<A>(from:to:)(v51, v99, (uint64_t)v31, v27, v52);
  }
  UICollectionViewListCoordinatorBase.resolvedEditMode.getter(v100);
  if (v100[0] == 1)
  {
    v49 = 0;
  }
  else
  {
    UICollectionViewListCoordinatorBase.resolvedEditMode.getter(v100);
    v53 = v100[0] != 0;
    v49 = v53 ^ objc_msgSend(v91, sel_isEditing);
  }
  v54 = *MEMORY[0x1E0DEEDD8] & *v5;
  v55 = *(_QWORD *)(v54 + 0xB8);
  if (*((_BYTE *)v5 + v55) == 1)
  {
    *((_BYTE *)v5 + v55) = 0;
    UICollectionViewListCoordinatorBase.resolvedEditMode.getter(v100);
    if (v100[0])
      objc_msgSend(v91, sel_setEditing_, 1);
  }
  else
  {
    v79 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0xB8);
    v81 = v45;
    v78 = v49;
    v80 = v48;
    if ((v90 & 1) != 0)
    {
      v56 = (char *)v5 + *(_QWORD *)(v54 + 136);
      swift_beginAccess();
      v57 = (uint64_t)v95;
      v90 = *(void (**)(_BYTE *, char *, uint64_t))(v96 + 16);
      v90(v95, v56, v27);
      swift_beginAccess();
      v58 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v27);
      ListCoreBatchUpdates.formUpdates<A>(from:to:)(v57, v99, (uint64_t)v31, v27, v58);
    }
    v81(v35, v44, v31);
    v60 = ListCoreBatchUpdates.isEmpty.getter(v31, v59);
    v48(v35, v31);
    v61 = v97;
    v62 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v97 + 16);
    if ((v60 & 1) != 0)
    {
      v63 = (uint64_t)v88;
      v62(v88, v99, v10);
      ShadowListDataSource.init(_:)(v63, v10);
    }
    v64 = v92;
    v62(v92, v99, v10);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v64, 0, 1, v10);
    v65 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v66 = (char *)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0xC8);
    swift_beginAccess();
    v67 = v64;
    v68 = v81;
    (*(void (**)(char *, _BYTE *, uint64_t))(v93 + 40))(v66, v67, v94);
    swift_endAccess();
    v69 = v80;
    v68(v35, v44, v31);
    LOBYTE(v66) = ListCoreBatchUpdates.isEmpty.getter(v31, v70);
    v69(v35, v31);
    if (((v66 & 1) == 0 || (*((_BYTE *)v5 + *(_QWORD *)((*v65 & *v5) + 0xD0)) & 1) == 0)
      && (*((_BYTE *)v5 + v79) & 1) == 0)
    {
      *((_BYTE *)v5 + *(_QWORD *)((*v65 & *v5) + 0xD0)) = 1;
      v71 = UICollectionViewListCoordinatorBase.isAnimated.getter();
      v72 = swift_allocObject();
      *(_BYTE *)(v72 + 16) = v71 & 1;
      v73 = v91;
      *(_QWORD *)(v72 + 24) = v5;
      *(_QWORD *)(v72 + 32) = v73;
      *(_BYTE *)(v72 + 40) = v78;
      v74 = v5;
      v75 = v73;
      static Update.enqueueAction(_:)();
      swift_release();
    }
  }
  return $defer #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(v98 != 1, v5);
}

_QWORD *UICollectionViewListCoordinatorBase.resolvedEditMode.getter@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v3 = *(_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x110) + 8);
  if (v3)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    result = MEMORY[0x18D75B9C8](&v5);
    LOBYTE(v3) = v5;
  }
  *a1 = v3;
  return result;
}

uint64_t outlined consume of Binding<NavigationSplitViewColumn>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized static StyleableView._makeViewList(view:inputs:)(int a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for ResolvedSectionStyle)
  {
    *(_QWORD *)&v21 = &type metadata for ResolvedSectionStyle;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedSectionStyle>, (uint64_t)&type metadata for ResolvedSectionStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle, (uint64_t)&type metadata for ResolvedSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedSectionStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StyleableView._makeViewList(view:inputs:)(v13, &v21);
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<SectionStyleConfiguration>, (uint64_t)&type metadata for SectionStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<SectionStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedSectionStyle, SectionStyleModifier<DefaultSectionStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedSectionStyle>, (uint64_t)&type metadata for ResolvedSectionStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle, (uint64_t)&type metadata for ResolvedSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedSectionStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedSectionStyle, SectionStyleModifier<DefaultSectionStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle();
  v11(&v13, v6, v7, &v21, &type metadata for ResolvedSectionStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;
  __int128 v27;
  char v28;
  _OWORD v29[2];
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v29[0] = *(_OWORD *)a2;
  v29[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v30 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v25[16] = v30;
  v26 = v4;
  v27 = *(_OWORD *)(a2 + 64);
  v28 = *(_BYTE *)(a2 + 80);
  v24 = v29[0];
  *(_OWORD *)v25 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v29);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  if (!v15)
  {
    outlined release of _GraphInputs((uint64_t)v29);
    goto LABEL_7;
  }
  v5 = type metadata accessor for ResolvedButtonStyle(0);
  outlined release of _GraphInputs((uint64_t)v29);
  if (v5 != v15)
  {
LABEL_7:
    type metadata accessor for ResolvedButtonStyle(0);
    PropertyList.subscript.setter();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedButtonStyle>, type metadata accessor for ResolvedButtonStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifi();
    type metadata accessor for MakeResolvedRepresentation<ResolvedButtonStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedButtonStyle> and conformance MakeResolvedRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeResolvedRepresentation<ResolvedButtonStyle>, (uint64_t)&protocol conformance descriptor for MakeResolvedRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = v26;
    v21 = v27;
    v22 = *((_QWORD *)&v27 + 1);
    v23 = v28;
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifie, type metadata accessor for ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ViewInputFlagModifier<TextSelectionForbidden>, MEMORY[0x1E0CE5518], MEMORY[0x1E0CE5508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentMod();
    static ModifiedContent<>._makeViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for StyleInput<PrimitiveButtonStyleConfiguration>, type metadata accessor for PrimitiveButtonStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<PrimitiveButtonStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v6 = *(unsigned int *)(v15 + 16);
  v7 = *(_QWORD *)(v15 + 24);
  v8 = *(_QWORD *)(v15 + 32);
  swift_retain();
  swift_release();
  v14 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
    type metadata accessor for ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>>();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedButtonStyle>, type metadata accessor for ResolvedButtonStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeDefaultRepresentation<ResolvedButtonStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedButtonStyle> and conformance MakeDefaultRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeDefaultRepresentation<ResolvedButtonStyle>, (uint64_t)&protocol conformance descriptor for MakeDefaultRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = v26;
    v21 = v27;
    v22 = *((_QWORD *)&v27 + 1);
    v23 = v28;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v9 = v6;
  result = swift_conformsToProtocol2();
  if (result)
  {
    v11 = result;
    LODWORD(v14) = a1;
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = v26;
    v21 = v27;
    v22 = *((_QWORD *)&v27 + 1);
    v23 = v28;
    v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 16);
    v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle, type metadata accessor for ResolvedButtonStyle, (uint64_t)&protocol conformance descriptor for ResolvedButtonStyle);
    v12(&v14, v9, v7, &v15, v5, v13, v7, v11);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for ResolvedNavigationStackStyle)
  {
    *(_QWORD *)&v21 = &type metadata for ResolvedNavigationStackStyle;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedNavigationStackStyle>, (uint64_t)&type metadata for ResolvedNavigationStackStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedNavigationStackStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle, (uint64_t)&type metadata for ResolvedNavigationStackStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedNavigationStackStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StyleableView._makeViewList(view:inputs:)(v13, &v21);
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<_NavigationStackStyleConfiguration>, (uint64_t)&type metadata for _NavigationStackStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<_NavigationStackStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedNavigationStackStyle, NavigationStackStyleModifier<_AutomaticNavigationStackStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedNavigationStackStyle>, (uint64_t)&type metadata for ResolvedNavigationStackStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedNavigationStackStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle, (uint64_t)&type metadata for ResolvedNavigationStackStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedNavigationStackStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedNavigationStackStyle, NavigationStackStyleModifier<_AutomaticNavigationStackStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle();
  v11(&v13, v6, v7, &v21, &type metadata for ResolvedNavigationStackStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  char v26;
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v28;
  v24 = v4;
  v25 = *(_OWORD *)(a2 + 64);
  v26 = *(_BYTE *)(a2 + 80);
  v22 = v27[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v27);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v27);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedNavigationSplitStyle)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedNavigationSplitStyle>, (uint64_t)&type metadata for ResolvedNavigationSplitStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent(0, (unint64_t *)&lazy cache variable for type metadata for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for NavigationSplitView);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedNavigationSplitStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle, (uint64_t)&type metadata for ResolvedNavigationSplitStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedNavigationSplitStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    lazy protocol witness table accessor for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for NavigationSplitView, (uint64_t)&protocol conformance descriptor for NavigationSplitView<A, B, C>);
    static View.makeViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<NavigationSplitViewStyleConfiguration>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<NavigationSplitViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedNavigationSplitStyle, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedNavigationSplitStyle>, (uint64_t)&type metadata for ResolvedNavigationSplitStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedNavigationSplitStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle, (uint64_t)&type metadata for ResolvedNavigationSplitStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedNavigationSplitStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedNavigationSplitStyle, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
    v11 = lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedNavigationSplitStyle, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  char v26;
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v28;
  v24 = v4;
  v25 = *(_OWORD *)(a2 + 64);
  v26 = *(_BYTE *)(a2 + 80);
  v22 = v27[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v27);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v27);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedDisclosureGroupStyle)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedDisclosureGroupStyle>, (uint64_t)&type metadata for ResolvedDisclosureGroupStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle, (uint64_t)&type metadata for ResolvedDisclosureGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedDisclosureGroupStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content> and conformance DisclosureGroup<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, (uint64_t)&protocol conformance descriptor for DisclosureGroup<A, B>);
    static View.makeViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_8:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<DisclosureGroupStyleConfiguration>, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<DisclosureGroupStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedDisclosureGroupStyle, DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedDisclosureGroupStyle>, (uint64_t)&type metadata for ResolvedDisclosureGroupStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle, (uint64_t)&type metadata for ResolvedDisclosureGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedDisclosureGroupStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedDisclosureGroupStyle, DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_8;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
    v11 = lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedDisclosureGroupStyle, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for ResolvedNavigationViewStyle)
  {
    *(_QWORD *)&v21 = &type metadata for ResolvedNavigationViewStyle;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ResolvedNavigationViewStyle>, (uint64_t)&type metadata for ResolvedNavigationViewStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedNavigationViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle, (uint64_t)&type metadata for ResolvedNavigationViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedNavigationViewStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StyleableView._makeViewList(view:inputs:)(v13, &v21);
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<_NavigationViewStyleConfiguration>, (uint64_t)&type metadata for _NavigationViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<_NavigationViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedNavigationViewStyle, NavigationViewStyleModifier<DefaultNavigationViewStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ResolvedNavigationViewStyle>, (uint64_t)&type metadata for ResolvedNavigationViewStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedNavigationViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle, (uint64_t)&type metadata for ResolvedNavigationViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedNavigationViewStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedNavigationViewStyle, NavigationViewStyleModifier<DefaultNavigationViewStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle();
  v11(&v13, v6, v7, &v21, &type metadata for ResolvedNavigationViewStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;
  __int128 v27;
  char v28;
  _OWORD v29[2];
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v29[0] = *(_OWORD *)a2;
  v29[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v30 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v25[16] = v30;
  v26 = v4;
  v27 = *(_OWORD *)(a2 + 64);
  v28 = *(_BYTE *)(a2 + 80);
  v24 = v29[0];
  *(_OWORD *)v25 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v29);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  if (!v15)
  {
    outlined release of _GraphInputs((uint64_t)v29);
    goto LABEL_7;
  }
  v5 = type metadata accessor for ResolvedProgressViewStyle(0);
  outlined release of _GraphInputs((uint64_t)v29);
  if (v5 != v15)
  {
LABEL_7:
    type metadata accessor for ResolvedProgressViewStyle(0);
    PropertyList.subscript.setter();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedProgressViewStyle>, type metadata accessor for ResolvedProgressViewStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for MakeResolvedRepresentation<ResolvedProgressViewStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedProgressViewStyle> and conformance MakeResolvedRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeResolvedRepresentation<ResolvedProgressViewStyle>, (uint64_t)&protocol conformance descriptor for MakeResolvedRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = v26;
    v21 = v27;
    v22 = *((_QWORD *)&v27 + 1);
    v23 = v28;
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>(0);
    lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier> and conformance <> ModifiedContent<A, B>();
    static ModifiedContent<>._makeViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<ProgressViewStyleConfiguration>, type metadata accessor for ProgressViewStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ProgressViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v6 = *(unsigned int *)(v15 + 16);
  v7 = *(_QWORD *)(v15 + 24);
  v8 = *(_QWORD *)(v15 + 32);
  swift_retain();
  swift_release();
  v14 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
    type metadata accessor for ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>>();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedProgressViewStyle>, type metadata accessor for ResolvedProgressViewStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeDefaultRepresentation<ResolvedProgressViewStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedProgressViewStyle> and conformance MakeDefaultRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeDefaultRepresentation<ResolvedProgressViewStyle>, (uint64_t)&protocol conformance descriptor for MakeDefaultRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = v26;
    v21 = v27;
    v22 = *((_QWORD *)&v27 + 1);
    v23 = v28;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v9 = v6;
  result = swift_conformsToProtocol2();
  if (result)
  {
    v11 = result;
    LODWORD(v14) = a1;
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = v26;
    v21 = v27;
    v22 = *((_QWORD *)&v27 + 1);
    v23 = v28;
    v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 16);
    v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedProgressViewStyle and conformance ResolvedProgressViewStyle, type metadata accessor for ResolvedProgressViewStyle, (uint64_t)&protocol conformance descriptor for ResolvedProgressViewStyle);
    v12(&v14, v9, v7, &v15, v5, v13, v7, v11);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[32];
  __int128 v17;
  __int128 v18;
  char v19;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v21 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v16[16] = v21;
  v17 = v4;
  v18 = *(_OWORD *)(a2 + 64);
  v19 = *(_BYTE *)(a2 + 80);
  v15 = v20[0];
  *(_OWORD *)v16 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v20);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = v22;
  if (!(_QWORD)v22)
  {
    outlined release of _GraphInputs((uint64_t)v20);
    goto LABEL_8;
  }
  v6 = type metadata accessor for ResolvedSearchFieldStyle(0);
  outlined release of _GraphInputs((uint64_t)v20);
  if (v6 != v5)
  {
LABEL_8:
    *(_QWORD *)&v22 = type metadata accessor for ResolvedSearchFieldStyle(0);
    PropertyList.subscript.setter();
    LODWORD(v22) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedSearchFieldStyle>, type metadata accessor for ResolvedSearchFieldStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v22) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeResolvedRepresentation<ResolvedSearchFieldStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedSearchFieldStyle> and conformance MakeResolvedRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeResolvedRepresentation<ResolvedSearchFieldStyle>, (uint64_t)&protocol conformance descriptor for MakeResolvedRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v23[16] = *(_OWORD *)&v16[16];
    v24 = v17;
    v25 = v18;
    v26 = v19;
    v22 = v15;
    *(_OWORD *)v23 = *(_OWORD *)v16;
    outlined retain of _ViewListInputs((uint64_t)&v22);
    specialized static StyleableView._makeViewList(view:inputs:)(v14, &v22);
    outlined release of _ViewListInputs((uint64_t)&v22);
    return outlined release of _ViewListInputs((uint64_t)&v22);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<SearchFieldConfiguration>, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<SearchFieldConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v22)
  {
    v14 = 0;
    PropertyList.subscript.setter();
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(v22 + 16);
  v8 = *(_QWORD *)(v22 + 24);
  v9 = *(_QWORD *)(v22 + 32);
  swift_retain();
  swift_release();
  v14 = v9;
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_10:
    type metadata accessor for ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>>();
    LODWORD(v22) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedSearchFieldStyle>, type metadata accessor for ResolvedSearchFieldStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v22) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeDefaultRepresentation<ResolvedSearchFieldStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedSearchFieldStyle> and conformance MakeDefaultRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeDefaultRepresentation<ResolvedSearchFieldStyle>, (uint64_t)&protocol conformance descriptor for MakeDefaultRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v22 = v15;
    DWORD2(v22) = DWORD2(v15);
    *(_OWORD *)&v23[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)v23 = *(_QWORD *)v16;
    *(_QWORD *)&v23[24] = *(_QWORD *)&v16[24];
    v24 = v17;
    LODWORD(v25) = v18;
    *((_QWORD *)&v25 + 1) = *((_QWORD *)&v18 + 1);
    v26 = v19;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v11 = result;
  LODWORD(v14) = a1;
  *(_QWORD *)&v22 = v15;
  DWORD2(v22) = DWORD2(v15);
  *(_OWORD *)&v23[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)v23 = *(_QWORD *)v16;
  *(_QWORD *)&v23[24] = *(_QWORD *)&v16[24];
  v24 = v17;
  LODWORD(v25) = v18;
  *((_QWORD *)&v25 + 1) = *((_QWORD *)&v18 + 1);
  v26 = v19;
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 16);
  v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle, type metadata accessor for ResolvedSearchFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedSearchFieldStyle);
  v12(&v14, v7, v8, &v22, v6, v13, v8, v11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for ResolvedRadioGroupPicker)
  {
    *(_QWORD *)&v21 = &type metadata for ResolvedRadioGroupPicker;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedRadioGroupPicker>, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedRadioGroupPicker>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedRadioGroupPicker> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StyleableView._makeViewList(view:inputs:)(v13, &v21);
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ResolvedRadioGroupPicker>, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ResolvedRadioGroupPicker> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedRadioGroupPicker, RadioGroupStyleModifier<AutomaticRadioGroupStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedRadioGroupPicker>, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedRadioGroupPicker>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedRadioGroupPicker> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedRadioGroupPicker, RadioGroupStyleModifier<AutomaticRadioGroupStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker();
  v11(&v13, v6, v7, &v21, &type metadata for ResolvedRadioGroupPicker, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for ResolvedCustomButtonMenu)
  {
    *(_QWORD *)&v21 = &type metadata for ResolvedCustomButtonMenu;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedCustomButtonMenu>, (uint64_t)&type metadata for ResolvedCustomButtonMenu, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedCustomButtonMenu>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu, (uint64_t)&type metadata for ResolvedCustomButtonMenu, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedCustomButtonMenu> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StyleableView._makeViewList(view:inputs:)(v13, &v21);
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ResolvedCustomButtonMenu.Configuration>, (uint64_t)&type metadata for ResolvedCustomButtonMenu.Configuration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ResolvedCustomButtonMenu.Configuration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedCustomButtonMenu, CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>>();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedCustomButtonMenu>, (uint64_t)&type metadata for ResolvedCustomButtonMenu, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedCustomButtonMenu>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu, (uint64_t)&type metadata for ResolvedCustomButtonMenu, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedCustomButtonMenu> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedCustomButtonMenu, CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu();
  v11(&v13, v6, v7, &v21, &type metadata for ResolvedCustomButtonMenu, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for ResolvedColorPickerStyle)
  {
    *(_QWORD *)&v21 = &type metadata for ResolvedColorPickerStyle;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedColorPickerStyle>, (uint64_t)&type metadata for ResolvedColorPickerStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedColorPickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle, (uint64_t)&type metadata for ResolvedColorPickerStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedColorPickerStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StyleableView._makeViewList(view:inputs:)(v13, &v21);
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ColorPickerStyleConfiguration>, (uint64_t)&type metadata for ColorPickerStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ColorPickerStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedColorPickerStyle, ColorPickerStyleModifier<DefaultColorPickerStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedColorPickerStyle>, (uint64_t)&type metadata for ResolvedColorPickerStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedColorPickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle, (uint64_t)&type metadata for ResolvedColorPickerStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedColorPickerStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedColorPickerStyle, ColorPickerStyleModifier<DefaultColorPickerStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle();
  v11(&v13, v6, v7, &v21, &type metadata for ResolvedColorPickerStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for ResolvedUIKitButtonBody)
  {
    *(_QWORD *)&v21 = &type metadata for ResolvedUIKitButtonBody;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedUIKitButtonBody>, (uint64_t)&type metadata for ResolvedUIKitButtonBody, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedUIKitButtonBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody, (uint64_t)&type metadata for ResolvedUIKitButtonBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedUIKitButtonBody> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StyleableView._makeViewList(view:inputs:)(v13, &v21);
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<UIKitButtonConfiguration>, (uint64_t)&type metadata for UIKitButtonConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<UIKitButtonConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedUIKitButtonBody, UIKitSystemButtonConfigurationModifier>, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedUIKitButtonBody>, (uint64_t)&type metadata for ResolvedUIKitButtonBody, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedUIKitButtonBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody, (uint64_t)&type metadata for ResolvedUIKitButtonBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedUIKitButtonBody> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedUIKitButtonBody, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody();
  v11(&v13, v6, v7, &v21, &type metadata for ResolvedUIKitButtonBody, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[32];
  __int128 v17;
  __int128 v18;
  char v19;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v21 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v16[16] = v21;
  v17 = v4;
  v18 = *(_OWORD *)(a2 + 64);
  v19 = *(_BYTE *)(a2 + 80);
  v15 = v20[0];
  *(_OWORD *)v16 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v20);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = v22;
  if (!(_QWORD)v22)
  {
    outlined release of _GraphInputs((uint64_t)v20);
    goto LABEL_8;
  }
  v6 = type metadata accessor for ResolvedTokenFieldStyle(0);
  outlined release of _GraphInputs((uint64_t)v20);
  if (v6 != v5)
  {
LABEL_8:
    *(_QWORD *)&v22 = type metadata accessor for ResolvedTokenFieldStyle(0);
    PropertyList.subscript.setter();
    LODWORD(v22) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedTokenFieldStyle>, type metadata accessor for ResolvedTokenFieldStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v22) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeResolvedRepresentation<ResolvedTokenFieldStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedTokenFieldStyle> and conformance MakeResolvedRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeResolvedRepresentation<ResolvedTokenFieldStyle>, (uint64_t)&protocol conformance descriptor for MakeResolvedRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v23[16] = *(_OWORD *)&v16[16];
    v24 = v17;
    v25 = v18;
    v26 = v19;
    v22 = v15;
    *(_OWORD *)v23 = *(_OWORD *)v16;
    outlined retain of _ViewListInputs((uint64_t)&v22);
    specialized static StyleableView._makeViewList(view:inputs:)(v14, &v22);
    outlined release of _ViewListInputs((uint64_t)&v22);
    return outlined release of _ViewListInputs((uint64_t)&v22);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<TokenFieldConfiguration>, type metadata accessor for TokenFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<TokenFieldConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v22)
  {
    v14 = 0;
    PropertyList.subscript.setter();
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(v22 + 16);
  v8 = *(_QWORD *)(v22 + 24);
  v9 = *(_QWORD *)(v22 + 32);
  swift_retain();
  swift_release();
  v14 = v9;
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_10:
    type metadata accessor for ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>>();
    LODWORD(v22) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedTokenFieldStyle>, type metadata accessor for ResolvedTokenFieldStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v22) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeDefaultRepresentation<ResolvedTokenFieldStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedTokenFieldStyle> and conformance MakeDefaultRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeDefaultRepresentation<ResolvedTokenFieldStyle>, (uint64_t)&protocol conformance descriptor for MakeDefaultRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v22 = v15;
    DWORD2(v22) = DWORD2(v15);
    *(_OWORD *)&v23[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)v23 = *(_QWORD *)v16;
    *(_QWORD *)&v23[24] = *(_QWORD *)&v16[24];
    v24 = v17;
    LODWORD(v25) = v18;
    *((_QWORD *)&v25 + 1) = *((_QWORD *)&v18 + 1);
    v26 = v19;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v11 = result;
  LODWORD(v14) = a1;
  *(_QWORD *)&v22 = v15;
  DWORD2(v22) = DWORD2(v15);
  *(_OWORD *)&v23[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)v23 = *(_QWORD *)v16;
  *(_QWORD *)&v23[24] = *(_QWORD *)&v16[24];
  v24 = v17;
  LODWORD(v25) = v18;
  *((_QWORD *)&v25 + 1) = *((_QWORD *)&v18 + 1);
  v26 = v19;
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 16);
  v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle, type metadata accessor for ResolvedTokenFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTokenFieldStyle);
  v12(&v14, v7, v8, &v22, v6, v13, v8, v11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[32];
  __int128 v17;
  __int128 v18;
  char v19;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v21 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v16[16] = v21;
  v17 = v4;
  v18 = *(_OWORD *)(a2 + 64);
  v19 = *(_BYTE *)(a2 + 80);
  v15 = v20[0];
  *(_OWORD *)v16 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v20);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = v22;
  if (!(_QWORD)v22)
  {
    outlined release of _GraphInputs((uint64_t)v20);
    goto LABEL_8;
  }
  v6 = type metadata accessor for ResolvedTextEditorStyle(0);
  outlined release of _GraphInputs((uint64_t)v20);
  if (v6 != v5)
  {
LABEL_8:
    *(_QWORD *)&v22 = type metadata accessor for ResolvedTextEditorStyle(0);
    PropertyList.subscript.setter();
    LODWORD(v22) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedTextEditorStyle>, type metadata accessor for ResolvedTextEditorStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v22) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeResolvedRepresentation<ResolvedTextEditorStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedTextEditorStyle> and conformance MakeResolvedRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeResolvedRepresentation<ResolvedTextEditorStyle>, (uint64_t)&protocol conformance descriptor for MakeResolvedRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v23[16] = *(_OWORD *)&v16[16];
    v24 = v17;
    v25 = v18;
    v26 = v19;
    v22 = v15;
    *(_OWORD *)v23 = *(_OWORD *)v16;
    outlined retain of _ViewListInputs((uint64_t)&v22);
    specialized static StyleableView._makeViewList(view:inputs:)(v14, &v22);
    outlined release of _ViewListInputs((uint64_t)&v22);
    return outlined release of _ViewListInputs((uint64_t)&v22);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<TextEditorStyleConfiguration>, type metadata accessor for TextEditorStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<TextEditorStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v22)
  {
    v14 = 0;
    PropertyList.subscript.setter();
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(v22 + 16);
  v8 = *(_QWORD *)(v22 + 24);
  v9 = *(_QWORD *)(v22 + 32);
  swift_retain();
  swift_release();
  v14 = v9;
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_10:
    type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>>();
    LODWORD(v22) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedTextEditorStyle>, type metadata accessor for ResolvedTextEditorStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v22) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeDefaultRepresentation<ResolvedTextEditorStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedTextEditorStyle> and conformance MakeDefaultRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeDefaultRepresentation<ResolvedTextEditorStyle>, (uint64_t)&protocol conformance descriptor for MakeDefaultRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v22 = v15;
    DWORD2(v22) = DWORD2(v15);
    *(_OWORD *)&v23[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)v23 = *(_QWORD *)v16;
    *(_QWORD *)&v23[24] = *(_QWORD *)&v16[24];
    v24 = v17;
    LODWORD(v25) = v18;
    *((_QWORD *)&v25 + 1) = *((_QWORD *)&v18 + 1);
    v26 = v19;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v11 = result;
  LODWORD(v14) = a1;
  *(_QWORD *)&v22 = v15;
  DWORD2(v22) = DWORD2(v15);
  *(_OWORD *)&v23[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)v23 = *(_QWORD *)v16;
  *(_QWORD *)&v23[24] = *(_QWORD *)&v16[24];
  v24 = v17;
  LODWORD(v25) = v18;
  *((_QWORD *)&v25 + 1) = *((_QWORD *)&v18 + 1);
  v26 = v19;
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 16);
  v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle, type metadata accessor for ResolvedTextEditorStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextEditorStyle);
  v12(&v14, v7, v8, &v22, v6, v13, v8, v11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for ResolvedLabelGroupStyle)
  {
    *(_QWORD *)&v21 = &type metadata for ResolvedLabelGroupStyle;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedLabelGroupStyle>, (uint64_t)&type metadata for ResolvedLabelGroupStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedLabelGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle, (uint64_t)&type metadata for ResolvedLabelGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedLabelGroupStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StyleableView._makeViewList(view:inputs:)(v13, &v21);
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<LabelGroupStyleConfiguration>, (uint64_t)&type metadata for LabelGroupStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<LabelGroupStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedLabelGroupStyle, LabelGroupStyleModifier<BodyLabelGroupStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedLabelGroupStyle>, (uint64_t)&type metadata for ResolvedLabelGroupStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedLabelGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle, (uint64_t)&type metadata for ResolvedLabelGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedLabelGroupStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelGroupStyle, LabelGroupStyleModifier<BodyLabelGroupStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle();
  v11(&v13, v6, v7, &v21, &type metadata for ResolvedLabelGroupStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;
  __int128 v27;
  char v28;
  _OWORD v29[2];
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v29[0] = *(_OWORD *)a2;
  v29[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v30 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v25[16] = v30;
  v26 = v4;
  v27 = *(_OWORD *)(a2 + 64);
  v28 = *(_BYTE *)(a2 + 80);
  v24 = v29[0];
  *(_OWORD *)v25 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v29);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  if (!v15)
  {
    outlined release of _GraphInputs((uint64_t)v29);
    goto LABEL_7;
  }
  v5 = type metadata accessor for ResolvedDatePickerStyle(0);
  outlined release of _GraphInputs((uint64_t)v29);
  if (v5 != v15)
  {
LABEL_7:
    type metadata accessor for ResolvedDatePickerStyle(0);
    PropertyList.subscript.setter();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedDatePickerStyle>, type metadata accessor for ResolvedDatePickerStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for DatePicker<DatePickerStyleConfiguration.Label>, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t)&protocol witness table for DatePickerStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DatePicker);
    type metadata accessor for MakeResolvedRepresentation<ResolvedDatePickerStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedDatePickerStyle> and conformance MakeResolvedRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeResolvedRepresentation<ResolvedDatePickerStyle>, (uint64_t)&protocol conformance descriptor for MakeResolvedRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = v26;
    v21 = v27;
    v22 = *((_QWORD *)&v27 + 1);
    v23 = v28;
    lazy protocol witness table accessor for type DatePicker<DatePickerStyleConfiguration.Label> and conformance DatePicker<A>();
    static View.makeViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<DatePickerStyleConfiguration>, type metadata accessor for DatePickerStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<DatePickerStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v6 = *(unsigned int *)(v15 + 16);
  v7 = *(_QWORD *)(v15 + 24);
  v8 = *(_QWORD *)(v15 + 32);
  swift_retain();
  swift_release();
  v14 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
    type metadata accessor for ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>>();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedDatePickerStyle>, type metadata accessor for ResolvedDatePickerStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeDefaultRepresentation<ResolvedDatePickerStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedDatePickerStyle> and conformance MakeDefaultRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeDefaultRepresentation<ResolvedDatePickerStyle>, (uint64_t)&protocol conformance descriptor for MakeDefaultRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = v26;
    v21 = v27;
    v22 = *((_QWORD *)&v27 + 1);
    v23 = v28;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v9 = v6;
  result = swift_conformsToProtocol2();
  if (result)
  {
    v11 = result;
    LODWORD(v14) = a1;
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = v26;
    v21 = v27;
    v22 = *((_QWORD *)&v27 + 1);
    v23 = v28;
    v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 16);
    v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle, type metadata accessor for ResolvedDatePickerStyle, (uint64_t)&protocol conformance descriptor for ResolvedDatePickerStyle);
    v12(&v14, v9, v7, &v15, v5, v13, v7, v11);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[32];
  __int128 v17;
  __int128 v18;
  char v19;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v21 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v16[16] = v21;
  v17 = v4;
  v18 = *(_OWORD *)(a2 + 64);
  v19 = *(_BYTE *)(a2 + 80);
  v15 = v20[0];
  *(_OWORD *)v16 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v20);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = v22;
  if (!(_QWORD)v22)
  {
    outlined release of _GraphInputs((uint64_t)v20);
    goto LABEL_8;
  }
  v6 = type metadata accessor for ResolvedTextFieldStyle();
  outlined release of _GraphInputs((uint64_t)v20);
  if (v6 != v5)
  {
LABEL_8:
    *(_QWORD *)&v22 = type metadata accessor for ResolvedTextFieldStyle();
    PropertyList.subscript.setter();
    LODWORD(v22) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ResolvedTextFieldStyle>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v22) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeResolvedRepresentation<ResolvedTextFieldStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedTextFieldStyle> and conformance MakeResolvedRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeResolvedRepresentation<ResolvedTextFieldStyle>, (uint64_t)&protocol conformance descriptor for MakeResolvedRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v23[16] = *(_OWORD *)&v16[16];
    v24 = v17;
    v25 = v18;
    v26 = v19;
    v22 = v15;
    *(_OWORD *)v23 = *(_OWORD *)v16;
    outlined retain of _ViewListInputs((uint64_t)&v22);
    specialized static StyleableView._makeViewList(view:inputs:)(v14, &v22);
    outlined release of _ViewListInputs((uint64_t)&v22);
    return outlined release of _ViewListInputs((uint64_t)&v22);
  }
  type metadata accessor for StyleInput<TextField<_TextFieldStyleLabel>>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleInput<TextField<_TextFieldStyleLabel>> and conformance StyleInput<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleInput<TextField<_TextFieldStyleLabel>>, (uint64_t)&protocol conformance descriptor for StyleInput<A>);
  PropertyList.subscript.getter();
  if (!(_QWORD)v22)
  {
    v14 = 0;
    PropertyList.subscript.setter();
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(v22 + 16);
  v8 = *(_QWORD *)(v22 + 24);
  v9 = *(_QWORD *)(v22 + 32);
  swift_retain();
  swift_release();
  v14 = v9;
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_10:
    type metadata accessor for ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>>();
    LODWORD(v22) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ResolvedTextFieldStyle>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v22) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeDefaultRepresentation<ResolvedTextFieldStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedTextFieldStyle> and conformance MakeDefaultRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeDefaultRepresentation<ResolvedTextFieldStyle>, (uint64_t)&protocol conformance descriptor for MakeDefaultRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v22 = v15;
    DWORD2(v22) = DWORD2(v15);
    *(_OWORD *)&v23[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)v23 = *(_QWORD *)v16;
    *(_QWORD *)&v23[24] = *(_QWORD *)&v16[24];
    v24 = v17;
    LODWORD(v25) = v18;
    *((_QWORD *)&v25 + 1) = *((_QWORD *)&v18 + 1);
    v26 = v19;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v11 = result;
  LODWORD(v14) = a1;
  *(_QWORD *)&v22 = v15;
  DWORD2(v22) = DWORD2(v15);
  *(_OWORD *)&v23[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)v23 = *(_QWORD *)v16;
  *(_QWORD *)&v23[24] = *(_QWORD *)&v16[24];
  v24 = v17;
  LODWORD(v25) = v18;
  *((_QWORD *)&v25 + 1) = *((_QWORD *)&v18 + 1);
  v26 = v19;
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 16);
  v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextFieldStyle);
  v12(&v14, v7, v8, &v22, v6, v13, v8, v11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  char v26;
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v28;
  v24 = v4;
  v25 = *(_OWORD *)(a2 + 64);
  v26 = *(_BYTE *)(a2 + 80);
  v22 = v27[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v27);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v27);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedLabeledContent)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ResolvedLabeledContent>, (uint64_t)&type metadata for ResolvedLabeledContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent, (uint64_t)&type metadata for ResolvedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedLabeledContent> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    lazy protocol witness table accessor for type ResolvedLabeledContent._Body and conformance ResolvedLabeledContent._Body();
    static View.makeViewList(view:inputs:)();
LABEL_8:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<LabeledContentStyleConfiguration>, (uint64_t)&type metadata for LabeledContentStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<LabeledContentStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedLabeledContent, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ResolvedLabeledContent>, (uint64_t)&type metadata for ResolvedLabeledContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent, (uint64_t)&type metadata for ResolvedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedLabeledContent> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedLabeledContent, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    goto LABEL_8;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
    v11 = lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedLabeledContent, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  char v26;
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v28;
  v24 = v4;
  v25 = *(_OWORD *)(a2 + 64);
  v26 = *(_BYTE *)(a2 + 80);
  v22 = v27[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v27);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v27);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedGroupBoxStyle)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedGroupBoxStyle>, (uint64_t)&type metadata for ResolvedGroupBoxStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>>();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedGroupBoxStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle, (uint64_t)&type metadata for ResolvedGroupBoxStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedGroupBoxStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>> and conformance _UnaryViewAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>>, MEMORY[0x1E0CE4108]);
    static _ViewListOutputs.unaryViewList<A>(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_8:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<GroupBoxStyleConfiguration>, (uint64_t)&type metadata for GroupBoxStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<GroupBoxStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedGroupBoxStyle, GroupBoxStyleModifier<DefaultGroupBoxStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedGroupBoxStyle>, (uint64_t)&type metadata for ResolvedGroupBoxStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedGroupBoxStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle, (uint64_t)&type metadata for ResolvedGroupBoxStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedGroupBoxStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedGroupBoxStyle, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_8;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
    v11 = lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedGroupBoxStyle, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  char v26;
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v28;
  v24 = v4;
  v25 = *(_OWORD *)(a2 + 64);
  v26 = *(_BYTE *)(a2 + 80);
  v22 = v27[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v27);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v27);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedControlGroup)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedControlGroup>, (uint64_t)&type metadata for ResolvedControlGroup, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedControlGroup>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup, (uint64_t)&type metadata for ResolvedControlGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedControlGroup> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>> and conformance <> ModifiedContent<A, B>();
    static ModifiedContent<>._makeViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ControlGroupStyleConfiguration>, (uint64_t)&type metadata for ControlGroupStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ControlGroupStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedControlGroup, ControlGroupStyleModifier<AutomaticControlGroupStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedControlGroup>, (uint64_t)&type metadata for ResolvedControlGroup, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedControlGroup>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup, (uint64_t)&type metadata for ResolvedControlGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedControlGroup> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedControlGroup, ControlGroupStyleModifier<AutomaticControlGroupStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
    v11 = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedControlGroup, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  char v26;
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v28;
  v24 = v4;
  v25 = *(_OWORD *)(a2 + 64);
  v26 = *(_BYTE *)(a2 + 80);
  v22 = v27[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v27);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v27);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedToggleStyle)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedToggleStyle>, (uint64_t)&type metadata for ResolvedToggleStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>();
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle, (uint64_t)&type metadata for ResolvedToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedToggleStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for KeyboardShortcutBindingBehavior);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
    static ModifiedContent<>._makeViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ToggleStyleConfiguration>, (uint64_t)&type metadata for ToggleStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ToggleStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedToggleStyle, ToggleStyleModifier<DefaultToggleStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedToggleStyle>, (uint64_t)&type metadata for ResolvedToggleStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle, (uint64_t)&type metadata for ResolvedToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedToggleStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedToggleStyle, ToggleStyleModifier<DefaultToggleStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
    v11 = lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedToggleStyle, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for ResolvedSliderStyle)
  {
    *(_QWORD *)&v21 = &type metadata for ResolvedSliderStyle;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedSliderStyle>, (uint64_t)&type metadata for ResolvedSliderStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedSliderStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle, (uint64_t)&type metadata for ResolvedSliderStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedSliderStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StyleableView._makeViewList(view:inputs:)(v13, &v21);
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<SliderStyleConfiguration>, (uint64_t)&type metadata for SliderStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<SliderStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedSliderStyle, SliderStyleModifier<AutomaticSliderStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedSliderStyle>, (uint64_t)&type metadata for ResolvedSliderStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedSliderStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle, (uint64_t)&type metadata for ResolvedSliderStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedSliderStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedSliderStyle, SliderStyleModifier<AutomaticSliderStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle();
  v11(&v13, v6, v7, &v21, &type metadata for ResolvedSliderStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for ResolvedTableStyle)
  {
    *(_QWORD *)&v21 = &type metadata for ResolvedTableStyle;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedTableStyle>, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedTableStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedTableStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StyleableView._makeViewList(view:inputs:)(v13, &v21);
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<TableStyleConfiguration>, (uint64_t)&type metadata for TableStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<TableStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedTableStyle, TableStyleModifier<AutomaticTableStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedTableStyle>, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedTableStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedTableStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedTableStyle, TableStyleModifier<AutomaticTableStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle();
  v11(&v13, v6, v7, &v21, &type metadata for ResolvedTableStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for ResolvedLabelStyle)
  {
    *(_QWORD *)&v21 = &type metadata for ResolvedLabelStyle;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedLabelStyle>, (uint64_t)&type metadata for ResolvedLabelStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle, (uint64_t)&type metadata for ResolvedLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedLabelStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StaticIf<>._makeViewList(view:inputs:)();
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<LabelStyleConfiguration>, (uint64_t)&type metadata for LabelStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<LabelStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, LabelStyleModifier<DefaultLabelStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedLabelStyle>, (uint64_t)&type metadata for ResolvedLabelStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle, (uint64_t)&type metadata for ResolvedLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedLabelStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelStyle, LabelStyleModifier<DefaultLabelStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle();
  v11(&v13, v6, v7, &v21, &type metadata for ResolvedLabelStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for ResolvedGaugeStyle)
  {
    *(_QWORD *)&v21 = &type metadata for ResolvedGaugeStyle;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedGaugeStyle>, (uint64_t)&type metadata for ResolvedGaugeStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedGaugeStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle, (uint64_t)&type metadata for ResolvedGaugeStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedGaugeStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StyleableView._makeViewList(view:inputs:)(v13, &v21);
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<GaugeStyleConfiguration>, (uint64_t)&type metadata for GaugeStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<GaugeStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedGaugeStyle, GaugeStyleModifier<DefaultGaugeStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedGaugeStyle>, (uint64_t)&type metadata for ResolvedGaugeStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedGaugeStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle, (uint64_t)&type metadata for ResolvedGaugeStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedGaugeStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedGaugeStyle, GaugeStyleModifier<DefaultGaugeStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle();
  v11(&v13, v6, v7, &v21, &type metadata for ResolvedGaugeStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for ResolvedBadgedView)
  {
    *(_QWORD *)&v21 = &type metadata for ResolvedBadgedView;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedBadgedView>, (uint64_t)&type metadata for ResolvedBadgedView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedBadgedView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView, (uint64_t)&type metadata for ResolvedBadgedView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedBadgedView> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StyleableView._makeViewList(view:inputs:)(v13, &v21);
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<BadgeViewStyleConfiguration>, (uint64_t)&type metadata for BadgeViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<BadgeViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedBadgedView, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedBadgedView>, (uint64_t)&type metadata for ResolvedBadgedView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedBadgedView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView, (uint64_t)&type metadata for ResolvedBadgedView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedBadgedView> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedBadgedView, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView();
  v11(&v13, v6, v7, &v21, &type metadata for ResolvedBadgedView, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  char v26;
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v28;
  v24 = v4;
  v25 = *(_OWORD *)(a2 + 64);
  v26 = *(_BYTE *)(a2 + 80);
  v22 = v27[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v27);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v27);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedMenuStyle)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedMenuStyle>, (uint64_t)&type metadata for ResolvedMenuStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle, (uint64_t)&type metadata for ResolvedMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedMenuStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>();
    lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>();
    static ModifiedContent<>._makeViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<MenuStyleConfiguration>, (uint64_t)&type metadata for MenuStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<MenuStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedMenuStyle, MenuStyleModifier<DefaultMenuStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedMenuStyle>, (uint64_t)&type metadata for ResolvedMenuStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle, (uint64_t)&type metadata for ResolvedMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedMenuStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedMenuStyle, MenuStyleModifier<DefaultMenuStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
    v11 = lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedMenuStyle, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  char v26;
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v28;
  v24 = v4;
  v25 = *(_OWORD *)(a2 + 64);
  v26 = *(_BYTE *)(a2 + 80);
  v22 = v27[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v27);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v27);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedHelpStyle)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedHelpStyle>, (uint64_t)&type metadata for ResolvedHelpStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier>();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedHelpStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle, (uint64_t)&type metadata for ResolvedHelpStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedHelpStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for HelpView<HelpStyleConfiguration.Content>, (uint64_t)&type metadata for HelpStyleConfiguration.Content, (uint64_t)&protocol witness table for HelpStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for HelpView);
    lazy protocol witness table accessor for type HelpView<HelpStyleConfiguration.Content> and conformance HelpView<A>();
    static ModifiedContent<>._makeViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<HelpStyleConfiguration>, (uint64_t)&type metadata for HelpStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<HelpStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedHelpStyle, HelpStyleModifier<DefaultHelpStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedHelpStyle>, (uint64_t)&type metadata for ResolvedHelpStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedHelpStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle, (uint64_t)&type metadata for ResolvedHelpStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedHelpStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedHelpStyle, HelpStyleModifier<DefaultHelpStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
    v11 = lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedHelpStyle, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  char v26;
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v28;
  v24 = v4;
  v25 = *(_OWORD *)(a2 + 64);
  v26 = *(_BYTE *)(a2 + 80);
  v22 = v27[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v27);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v27);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedFormStyle)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedFormStyle>, (uint64_t)&type metadata for ResolvedFormStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Form<FormStyleConfiguration.Content>, (uint64_t)&type metadata for FormStyleConfiguration.Content, (uint64_t)&protocol witness table for FormStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Form);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedFormStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle, (uint64_t)&type metadata for ResolvedFormStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedFormStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    lazy protocol witness table accessor for type Form<FormStyleConfiguration.Content> and conformance Form<A>();
    static View.makeViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<FormStyleConfiguration>, (uint64_t)&type metadata for FormStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<FormStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedFormStyle, FormStyleModifier<AutomaticFormStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedFormStyle>, (uint64_t)&type metadata for ResolvedFormStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedFormStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle, (uint64_t)&type metadata for ResolvedFormStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedFormStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedFormStyle, FormStyleModifier<AutomaticFormStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = v24;
    v19 = v25;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v26;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
    v11 = lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedFormStyle, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for ResolvedDivider)
  {
    *(_QWORD *)&v21 = &type metadata for ResolvedDivider;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedDivider>, (uint64_t)&type metadata for ResolvedDivider, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedDivider>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider, (uint64_t)&type metadata for ResolvedDivider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedDivider> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StyleableView._makeViewList(view:inputs:)(v13, &v21);
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<DividerStyleConfiguration>, (uint64_t)&type metadata for DividerStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<DividerStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedDivider, DividerStyleModifier<DefaultDividerStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedDivider>, (uint64_t)&type metadata for ResolvedDivider, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedDivider>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider, (uint64_t)&type metadata for ResolvedDivider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedDivider> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedDivider, DividerStyleModifier<DefaultDividerStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider();
  v11(&v13, v6, v7, &v21, &type metadata for ResolvedDivider, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v20;
  v16 = v4;
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v19[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v21;
  outlined release of _GraphInputs((uint64_t)v19);
  if (!v5 || v5 != &type metadata for IndexViewBody)
  {
    *(_QWORD *)&v21 = &type metadata for IndexViewBody;
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<IndexViewBody>, (uint64_t)&type metadata for IndexViewBody, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<IndexViewBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody, (uint64_t)&type metadata for IndexViewBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<IndexViewBody> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v15[16];
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v21 = v14;
    *(_OWORD *)v22 = *(_OWORD *)v15;
    outlined retain of _ViewListInputs((uint64_t)&v21);
    specialized static StyleableView._makeViewList(view:inputs:)(v13, &v21);
    outlined release of _ViewListInputs((uint64_t)&v21);
    return outlined release of _ViewListInputs((uint64_t)&v21);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<_IndexViewStyleConfiguration>, (uint64_t)&type metadata for _IndexViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<_IndexViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v21 + 16);
  v7 = *(_QWORD *)(v21 + 24);
  v8 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<IndexViewBody, IndexViewStyleModifier<DefaultIndexViewStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<IndexViewBody>, (uint64_t)&type metadata for IndexViewBody, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<IndexViewBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody, (uint64_t)&type metadata for IndexViewBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<IndexViewBody> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v14;
    DWORD2(v21) = DWORD2(v14);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v22 = *(_QWORD *)v15;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
    v23 = v16;
    LODWORD(v24) = v17;
    *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
    v25 = v18;
    lazy protocol witness table accessor for type ModifiedContent<IndexViewBody, IndexViewStyleModifier<DefaultIndexViewStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v21 = v14;
  DWORD2(v21) = DWORD2(v14);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v22 = *(_QWORD *)v15;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v15[24];
  v23 = v16;
  LODWORD(v24) = v17;
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v17 + 1);
  v25 = v18;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v12 = lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody();
  v11(&v13, v6, v7, &v21, &type metadata for IndexViewBody, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[32];
  __int128 v15;
  __int128 v16;
  char v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v14[16] = v19;
  v15 = v4;
  v16 = *(_OWORD *)(a2 + 64);
  v17 = *(_BYTE *)(a2 + 80);
  v13 = v18[0];
  *(_OWORD *)v14 = v3;
  outlined retain of _ViewListInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v18);
  if (!(_QWORD)v20 || (ValueMetadata *)v20 != &type metadata for StepperBody)
  {
    *(_QWORD *)&v20 = &type metadata for StepperBody;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<StepperBody>, (uint64_t)&type metadata for StepperBody, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<StepperBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type StepperBody and conformance StepperBody, (uint64_t)&type metadata for StepperBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<StepperBody> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v14[16];
    v22 = v15;
    v23 = v16;
    v24 = v17;
    v20 = v13;
    *(_OWORD *)v21 = *(_OWORD *)v14;
    specialized static StyleableView._makeViewList(view:inputs:)(v12, &v20);
    return outlined release of _ViewListInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<StepperStyleConfiguration>, (uint64_t)&type metadata for StepperStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<StepperStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v12 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v5 = *(unsigned int *)(v20 + 16);
  v6 = *(_QWORD *)(v20 + 24);
  v7 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<StepperBody, StepperStyleModifier<DefaultStepperStyle>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<StepperBody>, (uint64_t)&type metadata for StepperBody, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<StepperBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type StepperBody and conformance StepperBody, (uint64_t)&type metadata for StepperBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<StepperBody> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v13;
    DWORD2(v20) = DWORD2(v13);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v14[8];
    *(_QWORD *)v21 = *(_QWORD *)v14;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v14[24];
    v22 = v15;
    LODWORD(v23) = v16;
    *((_QWORD *)&v23 + 1) = *((_QWORD *)&v16 + 1);
    v24 = v17;
    lazy protocol witness table accessor for type ModifiedContent<StepperBody, StepperStyleModifier<DefaultStepperStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableViewList(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v9 = result;
  LODWORD(v12) = a1;
  *(_QWORD *)&v20 = v13;
  DWORD2(v20) = DWORD2(v13);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v14[8];
  *(_QWORD *)v21 = *(_QWORD *)v14;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v14[24];
  v22 = v15;
  LODWORD(v23) = v16;
  *((_QWORD *)&v23 + 1) = *((_QWORD *)&v16 + 1);
  v24 = v17;
  v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 16);
  v11 = lazy protocol witness table accessor for type StepperBody and conformance StepperBody();
  v10(&v12, v5, v6, &v20, &type metadata for StepperBody, v11, v6, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedSectionStyle and conformance ResolvedSectionStyle;
  if (!lazy protocol witness table cache variable for type ResolvedSectionStyle and conformance ResolvedSectionStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedSectionStyle, &type metadata for ResolvedSectionStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedSectionStyle and conformance ResolvedSectionStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedSectionStyle and conformance ResolvedSectionStyle;
  if (!lazy protocol witness table cache variable for type ResolvedSectionStyle and conformance ResolvedSectionStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedSectionStyle, &type metadata for ResolvedSectionStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedSectionStyle and conformance ResolvedSectionStyle);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedSectionStyle, SectionStyleModifier<DefaultSectionStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedSectionStyle, SectionStyleModifier<DefaultSectionStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for SectionStyleModifier<DefaultSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultSectionStyle and conformance DefaultSectionStyle, (uint64_t)&type metadata for DefaultSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedSectionStyle, SectionStyleModifier<DefaultSectionStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedSectionStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedSectionStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedSectionStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle, (uint64_t)&type metadata for ResolvedSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedSectionStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedSectionStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedSectionStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedSectionStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle, (uint64_t)&type metadata for ResolvedSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedSectionStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

uint64_t ListCoreBatchUpdates.isEmpty.getter(int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  void (*v28)(char *, uint64_t, int *);
  char v29;
  void (*v30)(char *, int *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;

  v3 = v2;
  v5 = *((_QWORD *)a1 - 1);
  MEMORY[0x1E0C80A78](a1, a2);
  v39 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v38 - v9;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v38 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v38 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v38 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v38 - v25;
  v27 = IndexSet.isEmpty.getter();
  v28 = *(void (**)(char *, uint64_t, int *))(v5 + 16);
  v28(v26, v3, a1);
  if ((v27 & 1) != 0)
    v29 = IndexSet.isEmpty.getter();
  else
    v29 = 0;
  v30 = *(void (**)(char *, int *))(v5 + 8);
  v30(v26, a1);
  v28(v22, v3, a1);
  if ((v29 & 1) == 0)
  {
    v30(v22, a1);
    v28(v18, v3, a1);
    goto LABEL_11;
  }
  v31 = *(_QWORD *)(*(_QWORD *)&v22[a1[10]] + 16);
  v30(v22, a1);
  v28(v18, v3, a1);
  if (v31)
  {
LABEL_11:
    v30(v18, a1);
    v28(v14, v3, a1);
    goto LABEL_12;
  }
  v32 = *(_QWORD *)(*(_QWORD *)&v18[a1[11]] + 16);
  v30(v18, a1);
  v28(v14, v3, a1);
  if (v32)
  {
LABEL_12:
    v30(v14, a1);
    v28(v10, v3, a1);
    goto LABEL_13;
  }
  v33 = *(_QWORD *)(*(_QWORD *)&v14[a1[12]] + 16);
  v30(v14, a1);
  v28(v10, v3, a1);
  if (v33)
  {
LABEL_13:
    v30(v10, a1);
    v35 = v39;
    v28(v39, v3, a1);
    goto LABEL_14;
  }
  v34 = *(_QWORD *)(*(_QWORD *)&v10[a1[13]] + 16);
  v30(v10, a1);
  v35 = v39;
  v28(v39, v3, a1);
  if (v34)
  {
LABEL_14:
    LOBYTE(v36) = 0;
    goto LABEL_15;
  }
  v36 = IndexSet.isEmpty.getter();
LABEL_15:
  v30(v35, a1);
  return v36 & 1;
}

uint64_t destroy for ListCoreBatchUpdates(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = type metadata accessor for IndexSet();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 36), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5(a1 + *(int *)(a2 + 56), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ListCoreBatchUpdates(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for IndexSet();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v8 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = a3[14];
  v11 = a1 + v10;
  v12 = a2 + v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(v11, v12, v6);
  v13 = a3[15];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = v15[3];
  v14[2] = v15[2];
  v14[3] = v17;
  v14[4] = v15[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t $defer #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(uint64_t result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;

  if ((result & 1) != 0)
  {
    v2 = (_QWORD *)((char *)a2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a2) + 0xA0));
    swift_beginAccess();
    v3 = *v2;
    *v2 = 1;
    return outlined consume of Transaction?(v3);
  }
  return result;
}

void ShadowListDataSource.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t updated;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 8);
  updated = type metadata accessor for ShadowListUpdateRecorder(0, v9, v8, v10);
  v13 = MEMORY[0x1E0C80A78](updated, v12);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, a1, a2, v13);
  ShadowListUpdateRecorder.init(_:)((uint64_t)v6, a2, v8, v14);
}

uint64_t sub_186E8EFDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v2, v4, v3);
}

void ShadowListUpdateRecorder.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ShadowListUpdateRecorder(0, a2, a3, a4);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ListUpdate();
}

uint64_t sub_186E8F180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + v4) = Array.init()();
  v2 = *(int *)(v5 + 40);
  *(_QWORD *)(v1 + v2) = Array.init()();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 32))(v1, v6, v0);
}

uint64_t type metadata accessor for ListCoreBatchUpdates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListCoreBatchUpdates);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return _GeometryActionModifier2.action(oldValue:newValue:)(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t _GeometryActionModifier2.action(oldValue:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of (key: ViewIdentity, value: InspectorStorage)(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>();
  v35 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v33 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v33)
        goto LABEL_34;
      v19 = *(_QWORD *)(v34 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v19 = *(_QWORD *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_43;
            if (v13 >= v33)
              goto LABEL_34;
            v19 = *(_QWORD *)(v34 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_21;
          }
        }
        v13 = v20;
      }
    }
LABEL_21:
    v10 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
    if ((v35 & 1) != 0)
    {
      outlined init with take of Any(v22, v36);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v22, (uint64_t)v36);
      v23 = v21;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    v24 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v25 = -1 << *(_BYTE *)(v7 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v21;
    result = (uint64_t)outlined init with take of Any(v36, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v18 = (_QWORD *)(v5 + 64);
  if ((v35 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<CGFloat, Int>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, Any>();
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v36 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v36 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v40 = *(_QWORD *)(v25 + 32);
      v38 = v26;
      v39 = v27;
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v38);
      outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v38;
    v18 = v39;
    *(_QWORD *)(v16 + 32) = v40;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35[8];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, WeakBox<Swift.AnyObject>>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    v34 = MEMORY[0x1E0DEE9B0] + 8;
    v13 = MEMORY[0x1E0CE77D8];
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v32)
          goto LABEL_34;
        v19 = v33[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v32)
            goto LABEL_34;
          v19 = v33[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v32)
            {
LABEL_34:
              if ((a2 & 1) != 0)
              {
                v31 = 1 << *(_BYTE *)(v5 + 32);
                if (v31 >= 64)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_42;
                if (v8 >= v32)
                  goto LABEL_34;
                v19 = v33[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = 8 * v17;
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v21);
      v23 = *(_QWORD *)(v5 + 56) + v21;
      if ((a2 & 1) != 0)
        outlined init with take of WeakBox<Swift.AnyObject>(v23, (uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, v34, (uint64_t (*)(_QWORD, uint64_t))v13);
      else
        outlined init with copy of AccessibilityScrollableContext?(v23, (uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))v13);
      result = static Hasher._hash(seed:_:)();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = 8 * v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v15) = v22;
      result = outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v35, *(_QWORD *)(v7 + 56) + v15, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))v13);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, IncrementalLayoutCacheItem>, (void (*)(uint64_t))type metadata accessor for IncrementalLayoutCacheItem, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v31 = *v30;
    v32 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_retain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    _ViewList_ID.Canonical.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v31;
    v19[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, Int>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v31 = *v30;
    v32 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
      swift_retain();
    Hasher.init(_seed:)();
    _ViewList_ID.Canonical.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v31;
    v19[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int v19;
  uint64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  char v32;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.Relationship, [AccessibilityNode]>();
  v32 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v30 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v8 << 6);
      }
      else
      {
        v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v16 >= v30)
          goto LABEL_36;
        v17 = v31[v16];
        ++v8;
        if (!v17)
        {
          v8 = v16 + 1;
          if (v16 + 1 >= v30)
            goto LABEL_36;
          v17 = v31[v8];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v30)
            {
LABEL_36:
              if ((v32 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_43;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v17 = v31[v18];
            if (!v17)
            {
              while (1)
              {
                v8 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_45;
                if (v8 >= v30)
                  goto LABEL_36;
                v17 = v31[v8];
                ++v18;
                if (v17)
                  goto LABEL_21;
              }
            }
            v8 = v18;
          }
        }
LABEL_21:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      v19 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v15);
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
      if ((v32 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      if ((v19 - 2) >= 3)
      {
        v21 = v19 & 1;
        Hasher._combine(_:)(0);
      }
      else
      {
        v21 = (v19 - 2) + 1;
      }
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v13 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v13) = v19;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v20;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  Swift::UInt v42[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityRelationshipScope.Key, [AccessibilityRelationshipScope.Relationship : [AccessibilityNode]]>, (void (*)(uint64_t))type metadata accessor for [AccessibilityRelationshipScope.Relationship : [AccessibilityNode]], (void (*)(void))lazy protocol witness table accessor for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key);
  v6 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v37 = v2;
  v38 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v38)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v39 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v38)
        goto LABEL_34;
      v23 = *(_QWORD *)(v39 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v38)
        {
LABEL_34:
          swift_release();
          v3 = v37;
          if ((v6 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v39 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v38)
              goto LABEL_34;
            v23 = *(_QWORD *)(v39 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = (__int128 *)(*(_QWORD *)(v5 + 48) + 48 * v20);
    if ((v6 & 1) != 0)
    {
      v26 = *v25;
      v27 = v25[2];
      v41 = v25[1];
      *(_OWORD *)v42 = v27;
      v40 = v26;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    }
    else
    {
      outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v25, (uint64_t)&v40);
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    AnyHashable.hash(into:)();
    Hasher._combine(_:)(v42[1]);
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_OWORD *)(*(_QWORD *)(v8 + 48) + 48 * v15);
    v17 = v40;
    v18 = *(_OWORD *)v42;
    v16[1] = v41;
    v16[2] = v18;
    *v16 = v17;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v15) = v28;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v37;
  v22 = (_QWORD *)(v5 + 64);
  if ((v6 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AGAttribute, (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v8 << 6);
      }
      else
      {
        v22 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v22 >= v13)
          goto LABEL_34;
        v23 = v9[v22];
        ++v8;
        if (!v23)
        {
          v8 = v22 + 1;
          if (v22 + 1 >= v13)
            goto LABEL_34;
          v23 = v9[v8];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v13)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v38;
                goto LABEL_41;
              }
              v37 = 1 << *(_BYTE *)(v5 + 32);
              if (v37 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v37;
              v3 = v38;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v9[v24];
            if (!v23)
            {
              while (1)
              {
                v8 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_43;
                if (v8 >= v13)
                  goto LABEL_34;
                v23 = v9[v8];
                ++v24;
                if (v23)
                  goto LABEL_21;
              }
            }
            v8 = v24;
          }
        }
LABEL_21:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      v25 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v21);
      v26 = (__int128 *)(*(_QWORD *)(v5 + 56) + (v21 << 6));
      if ((a2 & 1) != 0)
      {
        v27 = *v26;
        v28 = v26[1];
        v29 = v26[3];
        v41 = v26[2];
        v42 = v29;
        v39 = v27;
        v40 = v28;
      }
      else
      {
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v26, (uint64_t)&v39, (uint64_t (*)(_QWORD))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
      }
      result = MEMORY[0x18D75ED7C](*(_QWORD *)(v7 + 40), v25, 4);
      v30 = -1 << *(_BYTE *)(v7 + 32);
      v31 = result & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v14 + 8 * (v31 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v14 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v35 = v32 == v34;
          if (v32 == v34)
            v32 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)(v14 + 8 * v32);
        }
        while (v36 == -1);
        v15 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v15) = v25;
      v16 = (_OWORD *)(*(_QWORD *)(v7 + 56) + (v15 << 6));
      v17 = v39;
      v18 = v40;
      v19 = v42;
      v16[2] = v41;
      v16[3] = v19;
      *v16 = v17;
      v16[1] = v18;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  int v22;
  uint64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.NodeRelation, Set<AccessibilityRelationshipScope.Key>>();
  v35 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v33)
          goto LABEL_36;
        v18 = v34[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v33)
            goto LABEL_36;
          v18 = v34[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v33)
            {
LABEL_36:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_43;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_45;
                if (v8 >= v33)
                  goto LABEL_36;
                v18 = v34[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(v5 + 48) + 16 * v16;
      v21 = *(_QWORD *)v20;
      v22 = *(unsigned __int8 *)(v20 + 8);
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
      if ((v35 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      if ((v22 - 2) >= 3)
      {
        v24 = v22 & 1;
        Hasher._combine(_:)(0);
      }
      else
      {
        v24 = (v22 - 2) + 1;
      }
      Hasher._combine(_:)(v24);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 16 * v13;
      *(_QWORD *)v14 = v21;
      *(_BYTE *)(v14 + 8) = v22;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v23;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt32 v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, (_:)>, (void (*)(uint64_t))type metadata accessor for (_:), (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v29 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v12)
          goto LABEL_33;
        v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v12)
            goto LABEL_33;
          v21 = v29[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v29 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_33;
                v21 = v29[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v19);
      v30 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v17) = v27;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v17) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::UInt32 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  char v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  _BYTE v78[32];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, AlertStorage>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  v50 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v48 = (_QWORD *)(v5 + 64);
    v49 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v47 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
        if ((v50 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        v24 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v48;
        if (v24 >= v47)
          goto LABEL_33;
        v25 = v48[v24];
        ++v8;
        if (!v25)
        {
          v8 = v24 + 1;
          if (v24 + 1 >= v47)
            goto LABEL_33;
          v25 = v48[v8];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v47)
            {
LABEL_33:
              if ((v50 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v46 = 1 << *(_BYTE *)(v5 + 32);
              if (v46 >= 64)
                bzero(v48, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v48 = -1 << v46;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v25 = v48[v26];
            if (!v25)
            {
              while (1)
              {
                v8 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_42;
                if (v8 >= v47)
                  goto LABEL_33;
                v25 = v48[v8];
                ++v26;
                if (v25)
                  goto LABEL_22;
              }
            }
            v8 = v26;
          }
        }
LABEL_22:
        v11 = (v25 - 1) & v25;
        v16 = __clz(__rbit64(v25)) + (v8 << 6);
        if ((v50 & 1) != 0)
        {
LABEL_10:
          v17 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v16);
          v18 = *(_QWORD *)(v5 + 56) + 240 * v16;
          v19 = *(_BYTE *)v18;
          v20 = *(_QWORD *)(v18 + 16);
          v21 = *(_BYTE *)(v18 + 24);
          v22 = *(_QWORD *)(v18 + 28);
          v54 = *(_QWORD *)(v18 + 40);
          v51 = *(_QWORD *)(v18 + 48);
          v52 = *(_QWORD *)(v18 + 8);
          v53 = *(_BYTE *)(v18 + 56);
          v56 = *(_BYTE *)(v18 + 57);
          v57 = *(_OWORD *)(v18 + 64);
          v23 = *(_BYTE *)(v18 + 88);
          v61 = *(_BYTE *)(v18 + 89);
          v71 = *(_QWORD *)(v18 + 96);
          v69 = *(_QWORD *)(v18 + 104);
          v67 = *(_QWORD *)(v18 + 112);
          v65 = *(_QWORD *)(v18 + 120);
          v63 = *(_QWORD *)(v18 + 128);
          v59 = *(_QWORD *)(v18 + 136);
          v60 = *(_QWORD *)(v18 + 80);
          v55 = *(_BYTE *)(v18 + 144);
          v75 = *(_QWORD *)(v18 + 160);
          v76 = *(_QWORD *)(v18 + 152);
          v73 = *(_QWORD *)(v18 + 176);
          v74 = *(_QWORD *)(v18 + 168);
          v72 = *(_QWORD *)(v18 + 184);
          v70 = *(_QWORD *)(v18 + 192);
          v68 = *(_QWORD *)(v18 + 200);
          v66 = *(_QWORD *)(v18 + 208);
          v64 = *(_QWORD *)(v18 + 216);
          v62 = *(_QWORD *)(v18 + 224);
          v58 = *(_QWORD *)(v18 + 232);
          goto LABEL_24;
        }
      }
      v17 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v16);
      v27 = (__int128 *)(*(_QWORD *)(v5 + 56) + 240 * v16);
      v29 = v27[1];
      v28 = v27[2];
      v77 = *v27;
      *(_OWORD *)v78 = v29;
      *(_OWORD *)&v78[16] = v28;
      v30 = v27[6];
      v32 = v27[3];
      v31 = v27[4];
      v81 = v27[5];
      v82 = v30;
      v79 = v32;
      v80 = v31;
      v33 = v27[10];
      v35 = v27[7];
      v34 = v27[8];
      v85 = v27[9];
      v86 = v33;
      v83 = v35;
      v84 = v34;
      v36 = v27[14];
      v38 = v27[11];
      v37 = v27[12];
      v89 = v27[13];
      v90 = v36;
      v87 = v38;
      v88 = v37;
      v75 = v86;
      v76 = *((_QWORD *)&v85 + 1);
      v73 = v38;
      v74 = *((_QWORD *)&v86 + 1);
      v64 = *((_QWORD *)&v89 + 1);
      v66 = v89;
      v58 = *((_QWORD *)&v36 + 1);
      v62 = v36;
      v71 = v82;
      v72 = *((_QWORD *)&v38 + 1);
      v69 = *((_QWORD *)&v82 + 1);
      v70 = v37;
      v67 = v83;
      v68 = *((_QWORD *)&v37 + 1);
      v65 = *((_QWORD *)&v83 + 1);
      v63 = v84;
      v61 = BYTE9(v81);
      v59 = *((_QWORD *)&v84 + 1);
      v60 = v81;
      v23 = BYTE8(v81);
      v57 = v80;
      v55 = v85;
      v56 = BYTE9(v79);
      v53 = BYTE8(v79);
      v54 = *((_QWORD *)&v28 + 1);
      v22 = *(_QWORD *)&v78[12];
      v20 = *(_QWORD *)v78;
      v51 = v79;
      v52 = *((_QWORD *)&v77 + 1);
      v21 = v78[8];
      v19 = v77;
      outlined retain of AlertStorage(&v77);
LABEL_24:
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v17);
      result = Hasher._finalize()();
      v39 = -1 << *(_BYTE *)(v7 + 32);
      v40 = result & ~v39;
      v41 = v40 >> 6;
      if (((-1 << v40) & ~*(_QWORD *)(v12 + 8 * (v40 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v12 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v42 = 0;
        v43 = (unint64_t)(63 - v39) >> 6;
        do
        {
          if (++v41 == v43 && (v42 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v44 = v41 == v43;
          if (v41 == v43)
            v41 = 0;
          v42 |= v44;
          v45 = *(_QWORD *)(v12 + 8 * v41);
        }
        while (v45 == -1);
        v13 = __clz(__rbit64(~v45)) + (v41 << 6);
      }
      LOBYTE(v77) = v23;
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v13) = v17;
      v14 = *(_QWORD *)(v7 + 56) + 240 * v13;
      *(_BYTE *)v14 = v19;
      *(_QWORD *)(v14 + 8) = v52;
      *(_QWORD *)(v14 + 16) = v20;
      *(_BYTE *)(v14 + 24) = v21;
      *(_QWORD *)(v14 + 40) = v54;
      *(_QWORD *)(v14 + 48) = v51;
      *(_BYTE *)(v14 + 56) = v53;
      *(_BYTE *)(v14 + 57) = v56;
      *(_OWORD *)(v14 + 64) = v57;
      *(_QWORD *)(v14 + 80) = v60;
      *(_BYTE *)(v14 + 88) = v23;
      *(_BYTE *)(v14 + 89) = v61;
      *(_QWORD *)(v14 + 96) = v71;
      *(_QWORD *)(v14 + 104) = v69;
      *(_QWORD *)(v14 + 112) = v67;
      *(_QWORD *)(v14 + 120) = v65;
      *(_QWORD *)(v14 + 128) = v63;
      *(_QWORD *)(v14 + 136) = v59;
      *(_BYTE *)(v14 + 144) = v55;
      *(_QWORD *)(v14 + 152) = v76;
      *(_QWORD *)(v14 + 160) = v75;
      *(_QWORD *)(v14 + 168) = v74;
      *(_QWORD *)(v14 + 176) = v73;
      *(_QWORD *)(v14 + 184) = v72;
      *(_QWORD *)(v14 + 192) = v70;
      *(_QWORD *)(v14 + 200) = v68;
      *(_QWORD *)(v14 + 208) = v66;
      *(_QWORD *)(v14 + 216) = v64;
      *(_QWORD *)(v14 + 224) = v62;
      *(_QWORD *)(v14 + 232) = v58;
      *(_QWORD *)(v14 + 28) = v22;
      ++*(_QWORD *)(v7 + 16);
      v5 = v49;
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, Transaction>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v32 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v31 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v31)
          goto LABEL_33;
        v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v31)
            goto LABEL_33;
          v21 = v32[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v31)
                  goto LABEL_33;
                v21 = v32[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = 8 * v19;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v27);
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v17) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  Swift::UInt32 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  _QWORD *v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, InspectorStorage>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  v44 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v43 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v42 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v8 << 6);
      }
      else
      {
        v23 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v23 >= v42)
          goto LABEL_34;
        v24 = v43[v23];
        ++v8;
        if (!v24)
        {
          v8 = v23 + 1;
          if (v23 + 1 >= v42)
            goto LABEL_34;
          v24 = v43[v8];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v42)
            {
LABEL_34:
              if ((v44 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v41 = 1 << *(_BYTE *)(v5 + 32);
              if (v41 >= 64)
                bzero(v43, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v43 = -1 << v41;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v24 = v43[v25];
            if (!v24)
            {
              while (1)
              {
                v8 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_43;
                if (v8 >= v42)
                  goto LABEL_34;
                v24 = v43[v8];
                ++v25;
                if (v24)
                  goto LABEL_21;
              }
            }
            v8 = v25;
          }
        }
LABEL_21:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v8 << 6);
      }
      v26 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v22);
      v27 = *(_QWORD *)(v5 + 56) + 120 * v22;
      if ((v44 & 1) != 0)
      {
        v28 = *(_OWORD *)v27;
        v29 = *(_OWORD *)(v27 + 16);
        v30 = *(_OWORD *)(v27 + 48);
        v47 = *(_OWORD *)(v27 + 32);
        v48 = v30;
        v45 = v28;
        v46 = v29;
        v31 = *(_OWORD *)(v27 + 64);
        v32 = *(_OWORD *)(v27 + 80);
        v33 = *(_OWORD *)(v27 + 96);
        v52 = *(_QWORD *)(v27 + 112);
        v50 = v32;
        v51 = v33;
        v49 = v31;
      }
      else
      {
        outlined init with copy of InspectorStorage(v27, (uint64_t)&v45);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      result = Hasher._finalize()();
      v34 = -1 << *(_BYTE *)(v7 + 32);
      v35 = result & ~v34;
      v36 = v35 >> 6;
      if (((-1 << v35) & ~*(_QWORD *)(v12 + 8 * (v35 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v12 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v37 = 0;
        v38 = (unint64_t)(63 - v34) >> 6;
        do
        {
          if (++v36 == v38 && (v37 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v39 = v36 == v38;
          if (v36 == v38)
            v36 = 0;
          v37 |= v39;
          v40 = *(_QWORD *)(v12 + 8 * v36);
        }
        while (v40 == -1);
        v13 = __clz(__rbit64(~v40)) + (v36 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v13) = v26;
      v14 = *(_QWORD *)(v7 + 56) + 120 * v13;
      v15 = v45;
      v16 = v46;
      v17 = v48;
      *(_OWORD *)(v14 + 32) = v47;
      *(_OWORD *)(v14 + 48) = v17;
      *(_OWORD *)v14 = v15;
      *(_OWORD *)(v14 + 16) = v16;
      v18 = v49;
      v19 = v50;
      v20 = v51;
      *(_QWORD *)(v14 + 112) = v52;
      *(_OWORD *)(v14 + 80) = v19;
      *(_OWORD *)(v14 + 96) = v20;
      *(_OWORD *)(v14 + 64) = v18;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt32 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;
  _BYTE v31[184];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, ConfirmationDialog>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v8 << 6);
      }
      else
      {
        v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v16 >= v29)
          goto LABEL_34;
        v17 = v30[v16];
        ++v8;
        if (!v17)
        {
          v8 = v16 + 1;
          if (v16 + 1 >= v29)
            goto LABEL_34;
          v17 = v30[v8];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v29)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                v8 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_43;
                if (v8 >= v29)
                  goto LABEL_34;
                v17 = v30[v8];
                ++v18;
                if (v17)
                  goto LABEL_21;
              }
            }
            v8 = v18;
          }
        }
LABEL_21:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      v19 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v15);
      v20 = *(_QWORD *)(v5 + 56) + 176 * v15;
      if ((a2 & 1) != 0)
        outlined init with take of ConfirmationDialog(v20, (uint64_t)v31);
      else
        outlined init with copy of ConfirmationDialog(v20, (uint64_t)v31);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v19);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v7 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v13) = v19;
      result = outlined init with take of ConfirmationDialog((uint64_t)v31, *(_QWORD *)(v7 + 56) + 176 * v13);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  Swift::UInt v33;
  Swift::Int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  _OWORD v56[2];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _BYTE v61[48];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, ToolbarAppearanceConfiguration>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v48 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_49;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v46 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v44 = v2;
  v45 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  swift_retain();
  v12 = 0;
  v47 = v5;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v16 = (v10 - 1) & v10;
      v17 = v15 | (v12 << 6);
      goto LABEL_22;
    }
    v18 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_50;
    if (v18 >= v45)
      break;
    v19 = v46[v18];
    ++v12;
    if (!v19)
    {
      v12 = v18 + 1;
      if (v18 + 1 >= v45)
        break;
      v19 = v46[v12];
      if (!v19)
      {
        v20 = v18 + 2;
        if (v20 >= v45)
          break;
        v19 = v46[v20];
        if (!v19)
        {
          while (1)
          {
            v12 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_51;
            if (v12 >= v45)
              goto LABEL_44;
            v19 = v46[v12];
            ++v20;
            if (v19)
              goto LABEL_21;
          }
        }
        v12 = v20;
      }
    }
LABEL_21:
    v16 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_22:
    v21 = *(_QWORD *)(v5 + 48) + 40 * v17;
    v22 = 80 * v17;
    if ((v48 & 1) != 0)
    {
      outlined init with take of ToolbarPlacement.Role(v21, (uint64_t)v61);
      v23 = *(_QWORD *)(v5 + 56) + v22;
      v24 = *(_BYTE *)v23;
      v25 = *(_QWORD *)(v23 + 8);
      v26 = *(_QWORD *)(v23 + 16);
      v27 = *(_BYTE *)(v23 + 24);
      v28 = *(_QWORD *)(v23 + 32);
      v29 = *(_BYTE *)(v23 + 40);
      v54 = *(_QWORD *)(v23 + 48);
      v52 = *(_BYTE *)(v23 + 57);
      v53 = *(_BYTE *)(v23 + 56);
      v51 = *(_BYTE *)(v23 + 58);
      v50 = *(_QWORD *)(v23 + 64);
      v49 = *(_BYTE *)(v23 + 72);
    }
    else
    {
      outlined init with copy of ToolbarPlacement.Role(v21, (uint64_t)v61);
      v30 = *(_QWORD *)(v5 + 56) + v22;
      v24 = *(_BYTE *)v30;
      v25 = *(_QWORD *)(v30 + 8);
      v26 = *(_QWORD *)(v30 + 16);
      v27 = *(_BYTE *)(v30 + 24);
      v28 = *(_QWORD *)(v30 + 32);
      v29 = *(_BYTE *)(v30 + 40);
      v54 = *(_QWORD *)(v30 + 48);
      v52 = *(_BYTE *)(v30 + 57);
      v53 = *(_BYTE *)(v30 + 56);
      v51 = *(_BYTE *)(v30 + 58);
      v49 = *(_BYTE *)(v30 + 72);
      v50 = *(_QWORD *)(v30 + 64);
      swift_retain();
      swift_retain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v61, (uint64_t)&v58);
    v55 = v16;
    switch(*((_QWORD *)&v59 + 1))
    {
      case 0:
        v31 = v12;
        v32 = v25;
        v33 = 0;
        goto LABEL_34;
      case 1:
        v31 = v12;
        v32 = v25;
        v33 = 1;
        goto LABEL_34;
      case 2:
        v31 = v12;
        v32 = v25;
        v33 = 2;
        goto LABEL_34;
      case 3:
        v31 = v12;
        v32 = v25;
        v33 = 3;
        goto LABEL_34;
      case 4:
        v31 = v12;
        v32 = v25;
        v33 = 4;
        goto LABEL_34;
      case 5:
        v31 = v12;
        v32 = v25;
        v33 = 5;
        goto LABEL_34;
      case 6:
        v31 = v12;
        v32 = v25;
        v33 = 7;
LABEL_34:
        Hasher._combine(_:)(v33);
        break;
      default:
        v31 = v12;
        v32 = v25;
        v56[0] = v58;
        v56[1] = v59;
        v57 = v60;
        Hasher._combine(_:)(6uLL);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v56);
        break;
    }
    v34 = Hasher._finalize()();
    v35 = -1 << *(_BYTE *)(v7 + 32);
    v36 = v34 & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v11 + 8 * (v36 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v11 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v38 = 0;
    v39 = (unint64_t)(63 - v35) >> 6;
    do
    {
      if (++v37 == v39 && (v38 & 1) != 0)
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        JUMPOUT(0x1877BE3ACLL);
      }
      v40 = v37 == v39;
      if (v37 == v39)
        v37 = 0;
      v38 |= v40;
      v41 = *(_QWORD *)(v11 + 8 * v37);
    }
    while (v41 == -1);
    v13 = __clz(__rbit64(~v41)) + (v37 << 6);
LABEL_7:
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    outlined init with take of ToolbarPlacement.Role((uint64_t)v61, *(_QWORD *)(v7 + 48) + 40 * v13);
    v14 = *(_QWORD *)(v7 + 56) + 80 * v13;
    *(_BYTE *)v14 = v24;
    *(_QWORD *)(v14 + 8) = v32;
    *(_QWORD *)(v14 + 16) = v26;
    *(_BYTE *)(v14 + 24) = v27;
    *(_QWORD *)(v14 + 32) = v28;
    *(_BYTE *)(v14 + 40) = v29;
    *(_QWORD *)(v14 + 48) = v54;
    *(_BYTE *)(v14 + 56) = v53;
    *(_BYTE *)(v14 + 57) = v52;
    *(_BYTE *)(v14 + 58) = v51;
    *(_QWORD *)(v14 + 64) = v50;
    *(_BYTE *)(v14 + 72) = v49;
    ++*(_QWORD *)(v7 + 16);
    v5 = v47;
    v12 = v31;
    v10 = v55;
  }
LABEL_44:
  swift_release();
  v3 = v44;
  if ((v48 & 1) != 0)
  {
    v42 = 1 << *(_BYTE *)(v5 + 32);
    if (v42 >= 64)
      bzero(v46, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v46 = -1 << v42;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_49:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  int64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, OrnamentPresentation>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v35 = v8;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v33)
          goto LABEL_33;
        v21 = v34[v20];
        v22 = v8 + 1;
        if (!v21)
        {
          v22 = v20 + 1;
          if (v20 + 1 >= v33)
            goto LABEL_33;
          v21 = v34[v22];
          if (!v21)
          {
            v23 = v20 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v34[v23];
            if (!v21)
            {
              while (1)
              {
                v22 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v22 >= v33)
                  goto LABEL_33;
                v21 = v34[v22];
                ++v23;
                if (v21)
                  goto LABEL_30;
              }
            }
            v22 = v23;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v35 = v22;
        v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v29 = *(_QWORD *)(v5 + 56) + 120 * v19;
      v30 = *(_QWORD *)v29;
      v41 = *(_QWORD *)(v29 + 8);
      v42 = *(_OWORD *)(v29 + 40);
      v43 = *(_OWORD *)(v29 + 24);
      v39 = *(_BYTE *)(v29 + 56);
      v40 = *(_BYTE *)(v29 + 16);
      v38 = *(_QWORD *)(v29 + 64);
      v36 = *(_BYTE *)(v29 + 73);
      v37 = *(_BYTE *)(v29 + 72);
      v44 = *(_OWORD *)(v29 + 96);
      v45 = *(_OWORD *)(v29 + 80);
      v31 = *(_QWORD *)(v29 + 112);
      if ((a2 & 1) == 0)
      {
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v15 == v25;
          if (v15 == v25)
            v15 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v28;
      v17 = *(_QWORD *)(v7 + 56) + 120 * v16;
      *(_QWORD *)v17 = v30;
      *(_QWORD *)(v17 + 8) = v41;
      *(_BYTE *)(v17 + 16) = v40;
      *(_OWORD *)(v17 + 24) = v43;
      *(_OWORD *)(v17 + 40) = v42;
      *(_BYTE *)(v17 + 56) = v39;
      *(_QWORD *)(v17 + 64) = v38;
      *(_BYTE *)(v17 + 72) = v37;
      *(_BYTE *)(v17 + 73) = v36;
      *(_OWORD *)(v17 + 80) = v45;
      *(_OWORD *)(v17 + 96) = v44;
      *(_QWORD *)(v17 + 112) = v31;
      ++*(_QWORD *)(v7 + 16);
      v8 = v35;
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  __int128 v34[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Selector, CommandAction>();
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v31 = v2;
  v32 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v32)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v33 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_34;
      v19 = *(_QWORD *)(v33 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v32)
        {
LABEL_34:
          swift_release();
          v3 = v31;
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v19 = *(_QWORD *)(v33 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_43;
            if (v13 >= v32)
              goto LABEL_34;
            v19 = *(_QWORD *)(v33 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_21;
          }
        }
        v13 = v20;
      }
    }
LABEL_21:
    v10 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v16);
    if ((a2 & 1) != 0)
      outlined init with take of OptionalBinaryInteger(v22, (uint64_t)v34);
    else
      outlined init with copy of TableColumnList((uint64_t)v22, (uint64_t)v34);
    Hasher.init(_seed:)();
    Selector.hash(into:)();
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v25);
      }
      while (v29 == -1);
      v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v21;
    result = outlined init with take of OptionalBinaryInteger(v34, *(_QWORD *)(v7 + 56) + 40 * v14);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v31;
  v18 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v30 = 1 << *(_BYTE *)(v5 + 32);
  if (v30 >= 64)
    bzero(v18, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v30;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<ContainerBackgroundKeys.AnyCustomKey, AnyView>, (void (*)(void))lazy protocol witness table accessor for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v32 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v31 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v31)
          goto LABEL_33;
        v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v31)
            goto LABEL_33;
          v21 = v32[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v31)
                  goto LABEL_33;
                v21 = v32[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = 8 * v19;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v27);
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v17) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;
  _BYTE v31[104];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, NavigationDestinationPresentation>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v8 << 6);
      }
      else
      {
        v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v16 >= v29)
          goto LABEL_34;
        v17 = v30[v16];
        ++v8;
        if (!v17)
        {
          v8 = v16 + 1;
          if (v16 + 1 >= v29)
            goto LABEL_34;
          v17 = v30[v8];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v29)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                v8 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_43;
                if (v8 >= v29)
                  goto LABEL_34;
                v17 = v30[v8];
                ++v18;
                if (v17)
                  goto LABEL_21;
              }
            }
            v8 = v18;
          }
        }
LABEL_21:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v15);
      v20 = *(_QWORD *)(v5 + 56) + 96 * v15;
      if ((a2 & 1) != 0)
        outlined init with take of NavigationDestinationPresentation(v20, (uint64_t)v31);
      else
        outlined init with copy of NavigationDestinationPresentation(v20, (uint64_t)v31);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v19);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v7 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v19;
      result = outlined init with take of NavigationDestinationPresentation((uint64_t)v31, *(_QWORD *)(v7 + 56) + 96 * v13);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, Anchor<CGRect?>>();
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v36 = v2;
  v37 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_22;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v20 >= v37)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v38 + 8 * v20);
    ++v13;
    if (!v22)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v37)
        goto LABEL_34;
      v22 = *(_QWORD *)(v38 + 8 * v13);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v22 = *(_QWORD *)(v38 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v13 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_43;
            if (v13 >= v37)
              goto LABEL_34;
            v22 = *(_QWORD *)(v38 + 8 * v13);
            ++v23;
            if (v22)
              goto LABEL_21;
          }
        }
        v13 = v23;
      }
    }
LABEL_21:
    v10 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_22:
    v24 = *(_QWORD *)(v5 + 48) + 40 * v19;
    if ((a2 & 1) != 0)
    {
      v25 = *(_OWORD *)v24;
      v26 = *(_OWORD *)(v24 + 16);
      v41 = *(_QWORD *)(v24 + 32);
      v39 = v25;
      v40 = v26;
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    }
    else
    {
      outlined init with copy of AnyHashable(v24, (uint64_t)&v39);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      swift_retain();
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v11 + 8 * v30);
      }
      while (v34 == -1);
      v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 40 * v14;
    v16 = v39;
    v17 = v40;
    *(_QWORD *)(v15 + 32) = v41;
    *(_OWORD *)v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v27;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v21 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v21, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;
  _BYTE v31[168];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, UpdateViewDestinationRequest>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v8 << 6);
      }
      else
      {
        v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v16 >= v29)
          goto LABEL_34;
        v17 = v30[v16];
        ++v8;
        if (!v17)
        {
          v8 = v16 + 1;
          if (v16 + 1 >= v29)
            goto LABEL_34;
          v17 = v30[v8];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v29)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                v8 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_43;
                if (v8 >= v29)
                  goto LABEL_34;
                v17 = v30[v8];
                ++v18;
                if (v17)
                  goto LABEL_21;
              }
            }
            v8 = v18;
          }
        }
LABEL_21:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v15);
      v20 = *(_QWORD *)(v5 + 56) + 160 * v15;
      if ((a2 & 1) != 0)
        outlined init with take of UpdateViewDestinationRequest(v20, (uint64_t)v31);
      else
        outlined init with copy of UpdateViewDestinationRequest(v20, (uint64_t)v31);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v19);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v7 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v19;
      result = outlined init with take of UpdateViewDestinationRequest((uint64_t)v31, *(_QWORD *)(v7 + 56) + 160 * v13);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::UInt v27;
  Swift::UInt v28;
  Swift::UInt v29;
  Swift::UInt v30;
  Swift::UInt v31;
  Swift::UInt8 v32;
  __int128 *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char v56;
  int64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[28];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[3];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest>, (void (*)(void))lazy protocol witness table accessor for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
  v56 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v54 = (_QWORD *)(v5 + 64);
    v55 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v53 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v8 << 6);
      }
      else
      {
        v22 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v54;
        if (v22 >= v53)
          goto LABEL_34;
        v23 = v54[v22];
        ++v8;
        if (!v23)
        {
          v8 = v22 + 1;
          if (v22 + 1 >= v53)
            goto LABEL_34;
          v23 = v54[v8];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v53)
            {
LABEL_34:
              if ((v56 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v52 = 1 << *(_BYTE *)(v5 + 32);
              if (v52 >= 64)
                bzero(v54, ((unint64_t)(v52 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v54 = -1 << v52;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v54[v24];
            if (!v23)
            {
              while (1)
              {
                v8 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_43;
                if (v8 >= v53)
                  goto LABEL_34;
                v23 = v54[v8];
                ++v24;
                if (v23)
                  goto LABEL_21;
              }
            }
            v8 = v24;
          }
        }
LABEL_21:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      v57 = v8;
      v25 = *(_QWORD *)(v5 + 56);
      v26 = *(_QWORD *)(v5 + 48) + 48 * v21;
      v27 = *(_QWORD *)v26;
      v28 = *(_QWORD *)(v26 + 8);
      v29 = *(unsigned __int8 *)(v26 + 16);
      v30 = *(_QWORD *)(v26 + 24);
      v31 = *(_QWORD *)(v26 + 32);
      v32 = *(_BYTE *)(v26 + 40);
      v33 = (__int128 *)(v25 + 144 * v21);
      if ((v56 & 1) != 0)
      {
        v34 = v33[7];
        v72 = v33[6];
        v73[0] = v34;
        *(_OWORD *)((char *)v73 + 12) = *(__int128 *)((char *)v33 + 124);
        v35 = v33[3];
        v68 = v33[2];
        v69 = v35;
        v36 = v33[5];
        v70 = v33[4];
        v71 = v36;
        v38 = *v33;
        v37 = v33[1];
      }
      else
      {
        v58 = *v33;
        v39 = v33[4];
        v41 = v33[1];
        v40 = v33[2];
        v61 = v33[3];
        v62 = v39;
        v59 = v41;
        v60 = v40;
        v43 = v33[6];
        v42 = v33[7];
        v44 = v33[5];
        *(_OWORD *)&v65[12] = *(__int128 *)((char *)v33 + 124);
        v64 = v43;
        *(_OWORD *)v65 = v42;
        v63 = v44;
        outlined retain of NavigationRequest((uint64_t)&v58);
        v72 = v64;
        v73[0] = *(_OWORD *)v65;
        *(_OWORD *)((char *)v73 + 12) = *(_OWORD *)&v65[12];
        v68 = v60;
        v69 = v61;
        v70 = v62;
        v71 = v63;
        v38 = v58;
        v37 = v59;
      }
      v66 = v38;
      v67 = v37;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      Hasher._combine(_:)(v28);
      Hasher._combine(_:)(v29);
      Hasher._combine(_:)(v30);
      Hasher._combine(_:)(v31);
      Hasher._combine(_:)(v32);
      result = Hasher._finalize()();
      v45 = -1 << *(_BYTE *)(v7 + 32);
      v46 = result & ~v45;
      v47 = v46 >> 6;
      if (((-1 << v46) & ~*(_QWORD *)(v12 + 8 * (v46 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v46) & ~*(_QWORD *)(v12 + 8 * (v46 >> 6)))) | v46 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v48 = 0;
        v49 = (unint64_t)(63 - v45) >> 6;
        do
        {
          if (++v47 == v49 && (v48 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v50 = v47 == v49;
          if (v47 == v49)
            v47 = 0;
          v48 |= v50;
          v51 = *(_QWORD *)(v12 + 8 * v47);
        }
        while (v51 == -1);
        v13 = __clz(__rbit64(~v51)) + (v47 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 48 * v13;
      *(_QWORD *)v14 = v27;
      *(_QWORD *)(v14 + 8) = v28;
      *(_BYTE *)(v14 + 16) = v29;
      *(_QWORD *)(v14 + 24) = v30;
      *(_QWORD *)(v14 + 32) = v31;
      *(_BYTE *)(v14 + 40) = v32;
      v15 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 144 * v13);
      v16 = v73[0];
      v15[6] = v72;
      v15[7] = v16;
      *(_OWORD *)((char *)v15 + 124) = *(_OWORD *)((char *)v73 + 12);
      v17 = v69;
      v15[2] = v68;
      v15[3] = v17;
      v18 = v71;
      v15[4] = v70;
      v15[5] = v18;
      v19 = v67;
      *v15 = v66;
      v15[1] = v19;
      ++*(_QWORD *)(v7 + 16);
      v5 = v55;
      v8 = v57;
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, [AnyConnectionOptionActionBox]>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, DisplayList.Version>();
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((v38 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((v38 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v39);
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v29 = -1 << *(_BYTE *)(v7 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v28;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  Swift::UInt *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt *v20;
  Swift::UInt v21;
  Swift::UInt v22;
  __int128 *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  char v34;
  __int128 v35[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<EventID, EventType>();
  v34 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v32)
          goto LABEL_34;
        v18 = v33[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v32)
            goto LABEL_34;
          v18 = v33[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v32)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v33[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_43;
                if (v8 >= v32)
                  goto LABEL_34;
                v18 = v33[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = (Swift::UInt *)(*(_QWORD *)(v5 + 48) + 16 * v16);
      v22 = *v20;
      v21 = v20[1];
      v23 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v16);
      if ((v34 & 1) != 0)
        outlined init with take of OptionalBinaryInteger(v23, (uint64_t)v35);
      else
        outlined init with copy of TableColumnList((uint64_t)v23, (uint64_t)v35);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (Swift::UInt *)(*(_QWORD *)(v7 + 48) + 16 * v13);
      *v14 = v22;
      v14[1] = v21;
      result = outlined init with take of OptionalBinaryInteger(v35, *(_QWORD *)(v7 + 56) + 40 * v13);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<SceneID, PlatformSceneCache.Info>, (void (*)(void))lazy protocol witness table accessor for type SceneID and conformance SceneID);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v18 >= v36)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v37 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v36)
        goto LABEL_36;
      v20 = *(_QWORD *)(v37 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v36)
        {
LABEL_36:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v20 = *(_QWORD *)(v37 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_45;
            if (v13 >= v36)
              goto LABEL_36;
            v20 = *(_QWORD *)(v37 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = *(_QWORD *)(v5 + 48) + 24 * v17;
    v24 = *(_QWORD *)v22;
    v23 = *(_QWORD *)(v22 + 8);
    v25 = *(_BYTE *)(v22 + 16);
    v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
    if ((v38 & 1) == 0)
    {
      outlined copy of SceneID(*(_QWORD *)v22, *(_QWORD *)(v22 + 8), *(_BYTE *)(v22 + 16));
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    if ((v25 & 1) != 0)
    {
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v23);
    }
    else
    {
      String.hash(into:)();
    }
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v7 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v11 + 8 * v29);
      }
      while (v33 == -1);
      v14 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 24 * v14;
    *(_QWORD *)v15 = v24;
    *(_QWORD *)(v15 + 8) = v23;
    *(_BYTE *)(v15 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v26;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v19 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v19, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  char v32[8];
  Swift::UInt v33;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<HashableWeakBox<UIViewController>, ScenePhase>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = v2;
    v8 = 0;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_34;
        v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_34;
          v18 = v31[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v30;
                goto LABEL_41;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v30;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_43;
                if (v8 >= v12)
                  goto LABEL_34;
                v18 = v31[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(v5 + 48) + 16 * v16;
      if ((a2 & 1) != 0)
        outlined init with take of HashableWeakBox<UIViewController>(v20, (uint64_t)v32);
      else
        outlined init with copy of HashableWeakBox<UIViewController>(v20, (uint64_t)v32);
      v21 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v33);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      result = outlined init with take of HashableWeakBox<UIViewController>((uint64_t)v32, *(_QWORD *)(v7 + 48) + 16 * v14);
      *(_BYTE *)(*(_QWORD *)(v7 + 56) + v14) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  Swift::UInt v22;
  Swift::UInt v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int64_t v34;
  _QWORD *v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.StackContent.Key, NavigationState.SelectionSeed>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v8 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v34)
          goto LABEL_31;
        v18 = v35[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v34)
            goto LABEL_31;
          v18 = v35[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v34)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v35 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v35[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v34)
                  goto LABEL_31;
                v18 = v35[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(v5 + 48) + 24 * v16;
      v21 = *(_QWORD *)(v20 + 16);
      v22 = *(unsigned __int8 *)(v20 + 8);
      v23 = *(_QWORD *)v20;
      v24 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 24 * v13;
      *(_QWORD *)v14 = v23;
      *(_BYTE *)(v14 + 8) = v22;
      *(_QWORD *)(v14 + 16) = v21;
      *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v13) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD *__return_ptr, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  __int128 v38;
  _QWORD v39[5];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationLinkSelectionIdentifier, Int>, (void (*)(void))lazy protocol witness table accessor for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v18 >= v35)
          goto LABEL_39;
        v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v35)
            goto LABEL_39;
          v19 = v36[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v35)
            {
LABEL_39:
              swift_release();
              v3 = v2;
              if ((v37 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v36[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_46;
                if (v13 >= v35)
                  goto LABEL_39;
                v19 = v36[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = *(_QWORD *)(v5 + 48) + 32 * v17;
      v23 = *(_QWORD *)v21;
      v22 = *(_QWORD *)(v21 + 8);
      v38 = *(_OWORD *)(v21 + 16);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      if ((v37 & 1) == 0)
      {
        swift_retain();
        outlined copy of _ViewList_ID.Canonical?(v22, v38);
      }
      Hasher.init(_seed:)();
      if (v23)
      {
        Hasher._combine(_:)(1u);
        v25 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v23 + 96);
        v26 = swift_retain();
        v25(v39, v26);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v39);
        swift_release();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      if ((_QWORD)v38 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v39[0] = v22;
        v39[1] = v38;
        Hasher._combine(_:)(1u);
        _ViewList_ID.Canonical.hash(into:)();
      }
      Hasher._combine(_:)(*((Swift::UInt *)&v38 + 1));
      result = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v7 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        v14 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = *(_QWORD *)(v7 + 48) + 32 * v14;
      *(_QWORD *)v15 = v23;
      *(_QWORD *)(v15 + 8) = v22;
      *(_OWORD *)(v15 + 16) = v38;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, [ObjectIdentifier]>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  __int128 v38;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, Decodable & Encodable.Type>();
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35)
          goto LABEL_33;
        v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_33;
          v23 = v36[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v37 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v35)
                  goto LABEL_33;
                v23 = v36[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v38 = *(_OWORD *)v32;
      v33 = *(_QWORD *)(v32 + 16);
      if ((v37 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
      *(_OWORD *)v19 = v38;
      *(_QWORD *)(v19 + 16) = v33;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, NavigationDestinationResolverBase>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_retain();
      result = static Hasher._hash(seed:_:)();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  Swift::UInt v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  _OWORD __dst[19];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.StackContent.Key, NavigationColumnState>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key);
  v43 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v41 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v40 = (unint64_t)(v9 + 63) >> 6;
    v42 = v5;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v8 << 6);
        if ((v43 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        v28 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v41;
        if (v28 >= v40)
          goto LABEL_33;
        v29 = v41[v28];
        ++v8;
        if (!v29)
        {
          v8 = v28 + 1;
          if (v28 + 1 >= v40)
            goto LABEL_33;
          v29 = v41[v8];
          if (!v29)
          {
            v30 = v28 + 2;
            if (v30 >= v40)
            {
LABEL_33:
              if ((v43 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v39 = 1 << *(_BYTE *)(v5 + 32);
              if (v39 >= 64)
                bzero(v41, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v41 = -1 << v39;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v29 = v41[v30];
            if (!v29)
            {
              while (1)
              {
                v8 = v30 + 1;
                if (__OFADD__(v30, 1))
                  goto LABEL_42;
                if (v8 >= v40)
                  goto LABEL_33;
                v29 = v41[v8];
                ++v30;
                if (v29)
                  goto LABEL_22;
              }
            }
            v8 = v30;
          }
        }
LABEL_22:
        v11 = (v29 - 1) & v29;
        v17 = __clz(__rbit64(v29)) + (v8 << 6);
        if ((v43 & 1) != 0)
        {
LABEL_10:
          v18 = *(_QWORD *)(v5 + 48) + 24 * v17;
          v19 = *(_QWORD *)v18;
          v20 = *(unsigned __int8 *)(v18 + 8);
          v21 = *(_QWORD *)(v18 + 16);
          v22 = *(_QWORD *)(v5 + 56) + 304 * v17;
          v23 = *(_QWORD *)v22;
          v48 = *(_DWORD *)(v22 + 8);
          v55 = *(_BYTE *)(v22 + 24);
          v25 = *(_QWORD *)(v22 + 32);
          v24 = *(_QWORD *)(v22 + 40);
          v60 = *(_QWORD *)(v22 + 56);
          v61 = *(_QWORD *)(v22 + 16);
          v54 = *(_QWORD *)(v22 + 64);
          v49 = *(_QWORD *)(v22 + 72);
          v26 = *(_QWORD *)(v22 + 80);
          v64 = *(_QWORD *)(v22 + 48);
          v65 = *(_QWORD *)(v22 + 88);
          v57 = *(_QWORD *)(v22 + 112);
          v58 = *(_QWORD *)(v22 + 104);
          v73 = *(_QWORD *)(v22 + 120);
          v71 = *(_QWORD *)(v22 + 128);
          v68 = *(_QWORD *)(v22 + 136);
          v66 = *(_QWORD *)(v22 + 144);
          v62 = *(_QWORD *)(v22 + 96);
          v63 = *(_QWORD *)(v22 + 152);
          v59 = *(_QWORD *)(v22 + 160);
          v47 = *(_QWORD *)(v22 + 176);
          v44 = *(_QWORD *)(v22 + 184);
          v76 = *(_OWORD *)(v22 + 192);
          v74 = *(_QWORD *)(v22 + 216);
          v75 = *(_QWORD *)(v22 + 208);
          v72 = *(_QWORD *)(v22 + 224);
          v70 = *(_QWORD *)(v22 + 232);
          v27 = *(_QWORD *)(v22 + 280);
          v56 = *(_QWORD *)(v22 + 240);
          v52 = *(_QWORD *)(v22 + 248);
          v53 = *(_QWORD *)(v22 + 168);
          v50 = *(_QWORD *)(v22 + 256);
          v46 = *(_BYTE *)(v22 + 264);
          v45 = *(_QWORD *)(v22 + 272);
          v67 = *(_QWORD *)(v22 + 288);
          v69 = *(_BYTE *)(v22 + 296);
          v51 = *(_WORD *)(v22 + 297);
          goto LABEL_24;
        }
      }
      v31 = *(_QWORD *)(v5 + 48) + 24 * v17;
      v19 = *(_QWORD *)v31;
      v20 = *(unsigned __int8 *)(v31 + 8);
      v21 = *(_QWORD *)(v31 + 16);
      memcpy(__dst, (const void *)(*(_QWORD *)(v5 + 56) + 304 * v17), 0x12BuLL);
      v51 = *(_WORD *)((char *)&__dst[18] + 9);
      v69 = BYTE8(__dst[18]);
      v67 = *(_QWORD *)&__dst[18];
      v27 = *((_QWORD *)&__dst[17] + 1);
      v76 = __dst[12];
      v74 = *((_QWORD *)&__dst[13] + 1);
      v75 = *(_QWORD *)&__dst[13];
      v56 = *(_QWORD *)&__dst[15];
      v50 = *(_QWORD *)&__dst[16];
      v46 = BYTE8(__dst[16]);
      v45 = *(_QWORD *)&__dst[17];
      v72 = *(_QWORD *)&__dst[14];
      v73 = *((_QWORD *)&__dst[7] + 1);
      v70 = *((_QWORD *)&__dst[14] + 1);
      v68 = *((_QWORD *)&__dst[8] + 1);
      v71 = *(_QWORD *)&__dst[8];
      v59 = *(_QWORD *)&__dst[10];
      v52 = *((_QWORD *)&__dst[15] + 1);
      v53 = *((_QWORD *)&__dst[10] + 1);
      v44 = *((_QWORD *)&__dst[11] + 1);
      v47 = *(_QWORD *)&__dst[11];
      v65 = *((_QWORD *)&__dst[5] + 1);
      v66 = *(_QWORD *)&__dst[9];
      v62 = *(_QWORD *)&__dst[6];
      v63 = *((_QWORD *)&__dst[9] + 1);
      v57 = *(_QWORD *)&__dst[7];
      v58 = *((_QWORD *)&__dst[6] + 1);
      v24 = *((_QWORD *)&__dst[2] + 1);
      v64 = *(_QWORD *)&__dst[3];
      v49 = *((_QWORD *)&__dst[4] + 1);
      v54 = *(_QWORD *)&__dst[4];
      v26 = *(_QWORD *)&__dst[5];
      v60 = *((_QWORD *)&__dst[3] + 1);
      v61 = *(_QWORD *)&__dst[1];
      v55 = BYTE8(__dst[1]);
      v23 = *(_QWORD *)&__dst[0];
      v25 = *(_QWORD *)&__dst[2];
      v48 = DWORD2(__dst[0]);
      outlined retain of NavigationColumnState((uint64_t *)__dst);
LABEL_24:
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v19);
      Hasher._combine(_:)(v20);
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v32 = -1 << *(_BYTE *)(v7 + 32);
      v33 = result & ~v32;
      v34 = v33 >> 6;
      if (((-1 << v33) & ~*(_QWORD *)(v12 + 8 * (v33 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v35 = 0;
        v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v37 = v34 == v36;
          if (v34 == v36)
            v34 = 0;
          v35 |= v37;
          v38 = *(_QWORD *)(v12 + 8 * v34);
        }
        while (v38 == -1);
        v13 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 24 * v13;
      *(_QWORD *)v14 = v19;
      *(_BYTE *)(v14 + 8) = v20;
      *(_QWORD *)(v14 + 16) = v21;
      v15 = *(_QWORD *)(v7 + 56) + 304 * v13;
      *(_WORD *)(v15 + 297) = v51;
      *(_DWORD *)(v15 + 8) = v48;
      *(_QWORD *)(v15 + 16) = v61;
      *(_BYTE *)(v15 + 24) = v55;
      *(_QWORD *)(v15 + 32) = v25;
      *(_QWORD *)(v15 + 40) = v24;
      *(_QWORD *)(v15 + 48) = v64;
      *(_QWORD *)(v15 + 56) = v60;
      *(_QWORD *)(v15 + 64) = v54;
      *(_QWORD *)(v15 + 72) = v49;
      *(_QWORD *)(v15 + 88) = v65;
      *(_QWORD *)(v15 + 96) = v62;
      *(_QWORD *)(v15 + 104) = v58;
      *(_QWORD *)(v15 + 112) = v57;
      *(_QWORD *)(v15 + 120) = v73;
      *(_QWORD *)(v15 + 128) = v71;
      *(_QWORD *)(v15 + 136) = v68;
      *(_QWORD *)(v15 + 144) = v66;
      *(_QWORD *)(v15 + 152) = v63;
      *(_QWORD *)(v15 + 160) = v59;
      *(_QWORD *)(v15 + 168) = v53;
      *(_QWORD *)(v15 + 176) = v47;
      *(_QWORD *)(v15 + 184) = v44;
      *(_QWORD *)(v15 + 208) = v75;
      *(_QWORD *)(v15 + 216) = v74;
      *(_QWORD *)(v15 + 224) = v72;
      *(_QWORD *)(v15 + 232) = v70;
      *(_QWORD *)(v15 + 240) = v56;
      *(_QWORD *)(v15 + 248) = v52;
      *(_QWORD *)(v15 + 256) = v50;
      *(_BYTE *)(v15 + 264) = v46;
      *(_QWORD *)(v15 + 272) = v45;
      *(_QWORD *)(v15 + 288) = v67;
      *(_BYTE *)(v15 + 296) = v69;
      *(_QWORD *)v15 = v23;
      *(_QWORD *)(v15 + 80) = v26;
      *(_OWORD *)(v15 + 192) = v76;
      *(_QWORD *)(v15 + 280) = v27;
      ++*(_QWORD *)(v7 + 16);
      v5 = v42;
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationSplitColumn, NavigationState.StackContent.PositionedView>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitColumn and conformance NavigationSplitColumn);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v37 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v36)
          goto LABEL_34;
        v21 = v37[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v36)
            goto LABEL_34;
          v21 = v37[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v36)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v35 = 1 << *(_BYTE *)(v5 + 32);
              if (v35 >= 64)
                bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v37 = -1 << v35;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v37[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v8 >= v36)
                  goto LABEL_34;
                v21 = v37[v8];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v8 = v22;
          }
        }
LABEL_21:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v23 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v19);
      v24 = *(_QWORD *)(v5 + 56) + 72 * v19;
      if ((a2 & 1) != 0)
      {
        v38 = *(_OWORD *)v24;
        v25 = *(_OWORD *)(v24 + 16);
        v26 = *(_OWORD *)(v24 + 32);
        v27 = *(_OWORD *)(v24 + 48);
        v42 = *(_BYTE *)(v24 + 64);
        v40 = v26;
        v41 = v27;
        v39 = v25;
      }
      else
      {
        outlined init with copy of NavigationState.StackContent.PositionedView(v24, (uint64_t)&v38);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v7 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        v13 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v13) = v23;
      v14 = *(_QWORD *)(v7 + 56) + 72 * v13;
      *(_OWORD *)v14 = v38;
      v15 = v39;
      v16 = v40;
      v17 = v41;
      *(_BYTE *)(v14 + 64) = v42;
      *(_OWORD *)(v14 + 32) = v16;
      *(_OWORD *)(v14 + 48) = v17;
      *(_OWORD *)(v14 + 16) = v15;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<KeyCommandID, ()>, (void (*)(uint64_t))type metadata accessor for (), (void (*)(void))lazy protocol witness table accessor for type KeyCommandID and conformance KeyCommandID);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v29 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v12)
          goto LABEL_33;
        v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v12)
            goto LABEL_33;
          v21 = v29[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v29 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_33;
                v21 = v29[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v30 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v17) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<GridIndex, Int>, (void (*)(void))lazy protocol witness table accessor for type GridIndex and conformance GridIndex);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v9 = 0;
    v10 = (_QWORD *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v20 >= v14)
          goto LABEL_31;
        v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v14)
            goto LABEL_31;
          v21 = v10[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_40;
                if (v9 >= v14)
                  goto LABEL_31;
                v21 = v10[v9];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v9 = v22;
          }
        }
LABEL_21:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v23 = 8 * v19;
      *(_QWORD *)&v7 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v23);
      v34 = v7;
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v23);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v34);
      Hasher._combine(_:)(DWORD1(v34));
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v8 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v15 + 8 * v27);
        }
        while (v31 == -1);
        v16 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *((_QWORD *)&v7 + 1) = *((_QWORD *)&v34 + 1);
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v17) = v34;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v17) = v24;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, PropertyList>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_retain();
      result = static Hasher._hash(seed:_:)();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, Any>();
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt8 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<VerticalEdge, Double>, (void (*)(void))lazy protocol witness table accessor for type VerticalEdge and conformance VerticalEdge);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = a2;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v31 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  Swift::UInt v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  int64_t v36;
  uint64_t v37;
  char v38;
  _OWORD v39[2];
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _BYTE v44[48];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, PlatformBarUpdates>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_51;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  swift_retain();
  v12 = 0;
LABEL_8:
  if (v10)
  {
    v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v16 = v15 | (v12 << 6);
    goto LABEL_22;
  }
  v17 = v12 + 1;
  if (__OFADD__(v12, 1))
    goto LABEL_52;
  if (v17 >= v36)
  {
    swift_release();
    v18 = (_QWORD *)(v5 + 64);
    if ((v38 & 1) != 0)
    {
LABEL_47:
      v34 = 1 << *(_BYTE *)(v5 + 32);
      if (v34 >= 64)
        bzero(v18, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v18 = -1 << v34;
      *(_QWORD *)(v5 + 16) = 0;
    }
  }
  else
  {
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v37 + 8 * v17);
    ++v12;
    if (v19)
      goto LABEL_21;
    v12 = v17 + 1;
    if (v17 + 1 >= v36)
      goto LABEL_44;
    v19 = *(_QWORD *)(v37 + 8 * v12);
    if (v19)
    {
LABEL_21:
      v10 = (v19 - 1) & v19;
      v16 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_22:
      v21 = *(_QWORD *)(v5 + 48) + 40 * v16;
      if ((v38 & 1) != 0)
        outlined init with take of ToolbarPlacement.Role(v21, (uint64_t)v44);
      else
        outlined init with copy of ToolbarPlacement.Role(v21, (uint64_t)v44);
      v22 = (char *)(*(_QWORD *)(v5 + 56) + 2 * v16);
      v23 = v22[1];
      v24 = *v22;
      Hasher.init(_seed:)();
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v44, (uint64_t)&v41);
      switch(*((_QWORD *)&v42 + 1))
      {
        case 0:
          v25 = 0;
          goto LABEL_34;
        case 1:
          v25 = 1;
          goto LABEL_34;
        case 2:
          v25 = 2;
          goto LABEL_34;
        case 3:
          v25 = 3;
          goto LABEL_34;
        case 4:
          v25 = 4;
          goto LABEL_34;
        case 5:
          v25 = 5;
          goto LABEL_34;
        case 6:
          v25 = 7;
LABEL_34:
          Hasher._combine(_:)(v25);
          break;
        default:
          v39[0] = v41;
          v39[1] = v42;
          v40 = v43;
          Hasher._combine(_:)(6uLL);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v39);
          break;
      }
      v26 = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v7 + 32);
      v28 = v26 & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      while (++v29 != v31 || (v30 & 1) == 0)
      {
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v11 + 8 * v29);
        if (v33 != -1)
        {
          v13 = __clz(__rbit64(~v33)) + (v29 << 6);
LABEL_7:
          *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          outlined init with take of ToolbarPlacement.Role((uint64_t)v44, *(_QWORD *)(v7 + 48) + 40 * v13);
          v14 = (_BYTE *)(*(_QWORD *)(v7 + 56) + 2 * v13);
          *v14 = v24;
          v14[1] = v23;
          ++*(_QWORD *)(v7 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      JUMPOUT(0x1877C44D8);
    }
    v20 = v17 + 2;
    if (v20 < v36)
    {
      v19 = *(_QWORD *)(v37 + 8 * v20);
      if (!v19)
      {
        while (1)
        {
          v12 = v20 + 1;
          if (__OFADD__(v20, 1))
            goto LABEL_53;
          if (v12 >= v36)
            goto LABEL_44;
          v19 = *(_QWORD *)(v37 + 8 * v12);
          ++v20;
          if (v19)
            goto LABEL_21;
        }
      }
      v12 = v20;
      goto LABEL_21;
    }
LABEL_44:
    swift_release();
    if ((v38 & 1) != 0)
      goto LABEL_47;
  }
LABEL_51:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, Int>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(_QWORD))type metadata accessor for _DictionaryStorage<UInt, ObjectIdentifier>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, TabItemGroup.HostCache>();
  v40 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v37 = v2;
  v38 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v38)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v39 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v38)
        goto LABEL_33;
      v24 = *(_QWORD *)(v39 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_33:
          swift_release();
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v38)
              goto LABEL_33;
            v24 = *(_QWORD *)(v39 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 32 * v21;
    v34 = *(_QWORD *)v33;
    v35 = *(_QWORD *)(v33 + 8);
    v41 = *(_OWORD *)(v33 + 16);
    if ((v40 & 1) == 0)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = *(_QWORD *)(v7 + 56) + 32 * v17;
    *(_QWORD *)v19 = v34;
    *(_QWORD *)(v19 + 8) = v35;
    *(_OWORD *)(v19 + 16) = v41;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v37;
  v23 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, Int>();
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, Int>();
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((v38 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((v38 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v39);
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v29 = -1 << *(_BYTE *)(v7 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v28;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabSectionCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = *(_QWORD *)(v5 + 48) + 24 * v20;
    v31 = *(_QWORD *)v29;
    v30 = *(_QWORD *)(v29 + 8);
    v32 = *(unsigned __int8 *)(v29 + 16);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      outlined copy of TabCustomizationID.Base();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v32);
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = *(_QWORD *)(v7 + 48) + 24 * v17;
    *(_QWORD *)v18 = v31;
    *(_QWORD *)(v18 + 8) = v30;
    *(_BYTE *)(v18 + 16) = v32;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt v31;
  char v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v35 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v20 = v19 | (v13 << 6);
      }
      else
      {
        v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v34)
          goto LABEL_33;
        v22 = v35[v21];
        ++v13;
        if (!v22)
        {
          v13 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_33;
          v22 = v35[v13];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v36 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                v13 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_40;
                if (v13 >= v34)
                  goto LABEL_33;
                v22 = v35[v13];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v13 = v23;
          }
        }
LABEL_30:
        v10 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      v28 = *(_QWORD *)(v5 + 48) + 24 * v20;
      v30 = *(_QWORD *)v28;
      v29 = *(_QWORD *)(v28 + 8);
      v31 = *(unsigned __int8 *)(v28 + 16);
      v32 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v20);
      if ((v36 & 1) == 0)
        outlined copy of TabCustomizationID.Base();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v31);
      String.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = *(_QWORD *)(v7 + 48) + 24 * v17;
      *(_QWORD *)v18 = v30;
      *(_QWORD *)(v18 + 8) = v29;
      *(_BYTE *)(v18 + 16) = v31;
      *(_BYTE *)(*(_QWORD *)(v7 + 56) + v17) = v32;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, ScrollViewCommitInfo>();
  v43 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v6 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 0;
    v41 = (uint64_t *)(v4 + 64);
    v42 = v4;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v37 = -1 << v8;
    v38 = v8;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 64);
    v40 = (unint64_t)(v8 + 63) >> 6;
    v11 = result + 64;
    while (1)
    {
      if (v10)
      {
        v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v44 = v7;
        v18 = v17 | (v7 << 6);
      }
      else
      {
        v19 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        result = (uint64_t)v41;
        if (v19 >= v40)
          goto LABEL_33;
        v20 = v41[v19];
        v21 = v7 + 1;
        if (!v20)
        {
          v21 = v19 + 1;
          if (v19 + 1 >= v40)
            goto LABEL_33;
          v20 = v41[v21];
          if (!v20)
          {
            v22 = v19 + 2;
            if (v22 >= v40)
            {
LABEL_33:
              if ((v43 & 1) == 0)
                break;
              if (v38 >= 64)
                bzero(v41, 8 * v40);
              else
                *v41 = v37;
              v36 = v39;
              *(_QWORD *)(v4 + 16) = 0;
              result = swift_release();
              goto LABEL_39;
            }
            v20 = v41[v22];
            if (!v20)
            {
              while (1)
              {
                v21 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v21 >= v40)
                  goto LABEL_33;
                v20 = v41[v21];
                ++v22;
                if (v20)
                  goto LABEL_30;
              }
            }
            v21 = v22;
          }
        }
LABEL_30:
        v10 = (v20 - 1) & v20;
        v44 = v21;
        v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      v27 = *(_QWORD *)(v4 + 56);
      v28 = *(unsigned int *)(*(_QWORD *)(v4 + 48) + 4 * v18);
      v29 = (uint64_t *)(v27 + 80 * v18);
      v30 = *v29;
      v31 = v29[1];
      v32 = v29[2];
      v33 = v29[3];
      v34 = v29[4];
      v48 = v29[5];
      v35 = v29[6];
      v46 = v29[8];
      v47 = v29[7];
      v45 = v29[9];
      if ((v43 & 1) == 0)
        outlined copy of ScrollViewCommitInfo(v30, v31, v32, v33, v34, v48, v35, v47, v46);
      result = MEMORY[0x18D75ED7C](*(_QWORD *)(v6 + 40), v28, 4);
      v12 = -1 << *(_BYTE *)(v6 + 32);
      v13 = result & ~v12;
      v14 = v13 >> 6;
      if (((-1 << v13) & ~*(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v11 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v12) >> 6;
        do
        {
          if (++v14 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v25 = v14 == v24;
          if (v14 == v24)
            v14 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v11 + 8 * v14);
        }
        while (v26 == -1);
        v15 = __clz(__rbit64(~v26)) + (v14 << 6);
      }
      *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v15) = v28;
      v16 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 80 * v15);
      *v16 = v30;
      v16[1] = v31;
      v16[2] = v32;
      v16[3] = v33;
      v16[4] = v34;
      v16[5] = v48;
      v16[6] = v35;
      v16[7] = v47;
      v7 = v44;
      v16[8] = v46;
      v16[9] = v45;
      ++*(_QWORD *)(v6 + 16);
      v4 = v42;
    }
  }
  result = swift_release();
  v36 = v39;
LABEL_39:
  *v36 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  char v33[72];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<SensoryFeedback.FeedbackType, UIFeedbackGenerator>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v12)
          goto LABEL_33;
        v22 = v31[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v12)
            goto LABEL_33;
          v22 = v31[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v31, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v31[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_33;
                v22 = v31[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v11 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v32 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v20);
      v28 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
      if ((a2 & 1) == 0)
        v29 = v28;
      Hasher.init(_seed:)();
      SensoryFeedback.FeedbackType.hash(into:)((uint64_t)v33, v32, *((Swift::UInt64 *)&v32 + 1));
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        v18 = v32;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        v18 = v32;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17) = v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v28;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t *v32;
  __int128 v33;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UIDragItem, CGPoint>();
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = v2;
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v15 << 6);
      }
      else
      {
        v22 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v22 >= v12)
          goto LABEL_33;
        v23 = v9[v22];
        ++v15;
        if (!v23)
        {
          v15 = v22 + 1;
          if (v22 + 1 >= v12)
            goto LABEL_33;
          v23 = v9[v15];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v32;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v31;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v9[v24];
            if (!v23)
            {
              while (1)
              {
                v15 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v15 >= v12)
                  goto LABEL_33;
                v23 = v9[v15];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v15 = v24;
          }
        }
LABEL_30:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v15 << 6);
      }
      v29 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v33 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0)
        v30 = v29;
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
      v16 = -1 << *(_BYTE *)(v7 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v18 == v26;
          if (v18 == v26)
            v18 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v28 == -1);
        v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v19) = v29;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v19) = v33;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  __int128 *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UIDragItem, CGAffineTransform>();
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v34 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v34 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v34 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v34 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = (__int128 *)(*(_QWORD *)(v5 + 56) + 48 * v21);
    v36 = v31[1];
    v37 = *v31;
    v35 = v31[2];
    if ((a2 & 1) == 0)
      v32 = v30;
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v30;
    v19 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 48 * v18);
    *v19 = v37;
    v19[1] = v36;
    v19[2] = v35;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::UInt *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt *v26;
  Swift::UInt v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;
  char v33;

  v4 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBinding>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v33 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v6 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 0;
    v32 = (_QWORD *)(v4 + 64);
    v8 = 1 << *(_BYTE *)(v4 + 32);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 64);
    v31 = (unint64_t)(v8 + 63) >> 6;
    v11 = result + 64;
    while (1)
    {
      if (v10)
      {
        v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v18 = v17 | (v7 << 6);
      }
      else
      {
        v19 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        result = v4 + 64;
        if (v19 >= v31)
          goto LABEL_33;
        v20 = v32[v19];
        ++v7;
        if (!v20)
        {
          v7 = v19 + 1;
          if (v19 + 1 >= v31)
            goto LABEL_33;
          v20 = v32[v7];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v31)
            {
LABEL_33:
              if ((v33 & 1) != 0)
              {
                v30 = 1 << *(_BYTE *)(v4 + 32);
                if (v30 >= 64)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v4 + 16) = 0;
              }
              break;
            }
            v20 = v32[v21];
            if (!v20)
            {
              while (1)
              {
                v7 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v7 >= v31)
                  goto LABEL_33;
                v20 = v32[v7];
                ++v21;
                if (v20)
                  goto LABEL_30;
              }
            }
            v7 = v21;
          }
        }
LABEL_30:
        v10 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v7 << 6);
      }
      v26 = (Swift::UInt *)(*(_QWORD *)(v4 + 48) + 16 * v18);
      v28 = *v26;
      v27 = v26[1];
      v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
      if ((v33 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v12 = -1 << *(_BYTE *)(v6 + 32);
      v13 = result & ~v12;
      v14 = v13 >> 6;
      if (((-1 << v13) & ~*(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v11 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v12) >> 6;
        do
        {
          if (++v14 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v24 = v14 == v23;
          if (v14 == v23)
            v14 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v14);
        }
        while (v25 == -1);
        v15 = __clz(__rbit64(~v25)) + (v14 << 6);
      }
      *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (Swift::UInt *)(*(_QWORD *)(v6 + 48) + 16 * v15);
      *v16 = v28;
      v16[1] = v27;
      *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15) = v29;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt32 v20;
  _OWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _OWORD v31[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ViewDebug.Property, Any>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Property and conformance _ViewDebug.Property);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_34;
        v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_34;
          v18 = v30[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_43;
                if (v8 >= v12)
                  goto LABEL_34;
                v18 = v30[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v16);
      v21 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
      if ((a2 & 1) != 0)
        outlined init with take of Any(v21, v31);
      else
        outlined init with copy of Any((uint64_t)v21, (uint64_t)v31);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v14) = v20;
      result = (uint64_t)outlined init with take of Any(v31, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.Index.ID, DisplayList.AccessibilityUpdater.CacheValue>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.Index.ID and conformance DisplayList.Index.ID);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v21 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v22 = v21 | (v8 << 6);
      }
      else
      {
        v23 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v23 >= v13)
          goto LABEL_33;
        v24 = v9[v23];
        ++v8;
        if (!v24)
        {
          v8 = v23 + 1;
          if (v23 + 1 >= v13)
            goto LABEL_33;
          v24 = v9[v8];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v24 = v9[v25];
            if (!v24)
            {
              while (1)
              {
                v8 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_42;
                if (v8 >= v13)
                  goto LABEL_33;
                v24 = v9[v8];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v8 = v25;
          }
        }
LABEL_30:
        v12 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v8 << 6);
      }
      v30 = 16 * v22;
      v33 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v30);
      v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + v30);
      if ((a2 & 1) == 0)
      {
        v31 = (id)v33;
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v34);
      Hasher._combine(_:)(DWORD1(v34));
      Hasher._combine(_:)(DWORD2(v34));
      Hasher._combine(_:)(HIDWORD(v34));
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        v19 = v34;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        v19 = v34;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v20 = 16 * v18;
      *(_OWORD *)(*(_QWORD *)(v7 + 48) + v20) = v19;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + v20) = v33;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<AccessibilityAttachmentToken, DisplayList.Version>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return result;
    }
    if (v18 >= v35)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v35)
        goto LABEL_31;
      v20 = *(_QWORD *)(v36 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_31:
          swift_release();
          v3 = v34;
          if ((a2 & 1) == 0)
            goto LABEL_38;
          goto LABEL_34;
        }
        v20 = *(_QWORD *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_40;
            if (v13 >= v35)
              goto LABEL_31;
            v20 = *(_QWORD *)(v36 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = *(_QWORD *)(v5 + 48) + 12 * v17;
    v23 = *(_BYTE *)(v22 + 8);
    v24 = *(_QWORD *)v22;
    v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
    Hasher.init(_seed:)();
    AccessibilityAttachmentToken.hash(into:)();
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 12 * v14;
    *(_QWORD *)v15 = v24;
    *(_BYTE *)(v15 + 8) = v23;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v25;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v19 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(_QWORD))type metadata accessor for _DictionaryStorage<String, MainMenuItemCoordinator>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, [Any]>();
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t *v33;
  int64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[48];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, BarEnvironmentViewModel>, (void (*)(uint64_t))type metadata accessor for BarEnvironmentViewModel, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_51;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v33 = v2;
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  swift_retain();
  v12 = 0;
LABEL_8:
  if (v10)
  {
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v15 = v14 | (v12 << 6);
    goto LABEL_22;
  }
  v16 = v12 + 1;
  if (__OFADD__(v12, 1))
    goto LABEL_52;
  if (v16 >= v34)
  {
    swift_release();
    v3 = v33;
    v17 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) != 0)
    {
LABEL_47:
      v31 = 1 << *(_BYTE *)(v5 + 32);
      if (v31 >= 64)
        bzero(v17, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v17 = -1 << v31;
      *(_QWORD *)(v5 + 16) = 0;
    }
  }
  else
  {
    v17 = (_QWORD *)(v5 + 64);
    v18 = *(_QWORD *)(v35 + 8 * v16);
    ++v12;
    if (v18)
      goto LABEL_21;
    v12 = v16 + 1;
    if (v16 + 1 >= v34)
      goto LABEL_44;
    v18 = *(_QWORD *)(v35 + 8 * v12);
    if (v18)
    {
LABEL_21:
      v10 = (v18 - 1) & v18;
      v15 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_22:
      v20 = *(_QWORD *)(v5 + 48) + 40 * v15;
      if ((a2 & 1) != 0)
      {
        outlined init with take of ToolbarPlacement.Role(v20, (uint64_t)v41);
        v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
      }
      else
      {
        outlined init with copy of ToolbarPlacement.Role(v20, (uint64_t)v41);
        v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
        swift_retain();
      }
      Hasher.init(_seed:)();
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v41, (uint64_t)&v38);
      switch(*((_QWORD *)&v39 + 1))
      {
        case 0:
          v22 = 0;
          goto LABEL_34;
        case 1:
          v22 = 1;
          goto LABEL_34;
        case 2:
          v22 = 2;
          goto LABEL_34;
        case 3:
          v22 = 3;
          goto LABEL_34;
        case 4:
          v22 = 4;
          goto LABEL_34;
        case 5:
          v22 = 5;
          goto LABEL_34;
        case 6:
          v22 = 7;
LABEL_34:
          Hasher._combine(_:)(v22);
          break;
        default:
          v36[0] = v38;
          v36[1] = v39;
          v37 = v40;
          Hasher._combine(_:)(6uLL);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v36);
          break;
      }
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v28 || (v27 & 1) == 0)
      {
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
        if (v30 != -1)
        {
          v13 = __clz(__rbit64(~v30)) + (v26 << 6);
LABEL_7:
          *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          outlined init with take of ToolbarPlacement.Role((uint64_t)v41, *(_QWORD *)(v7 + 48) + 40 * v13);
          *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v21;
          ++*(_QWORD *)(v7 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      JUMPOUT(0x1877C7A1CLL);
    }
    v19 = v16 + 2;
    if (v19 < v34)
    {
      v18 = *(_QWORD *)(v35 + 8 * v19);
      if (!v18)
      {
        while (1)
        {
          v12 = v19 + 1;
          if (__OFADD__(v19, 1))
            goto LABEL_53;
          if (v12 >= v34)
            goto LABEL_44;
          v18 = *(_QWORD *)(v35 + 8 * v12);
          ++v19;
          if (v18)
            goto LABEL_21;
        }
      }
      v12 = v19;
      goto LABEL_21;
    }
LABEL_44:
    swift_release();
    v3 = v33;
    if ((a2 & 1) != 0)
      goto LABEL_47;
  }
LABEL_51:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t *v33;
  int64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[48];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, AnyShapeStyle>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_51;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v33 = v2;
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  swift_retain();
  v12 = 0;
LABEL_8:
  if (v10)
  {
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v15 = v14 | (v12 << 6);
    goto LABEL_22;
  }
  v16 = v12 + 1;
  if (__OFADD__(v12, 1))
    goto LABEL_52;
  if (v16 >= v34)
  {
    swift_release();
    v3 = v33;
    v17 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) != 0)
    {
LABEL_47:
      v31 = 1 << *(_BYTE *)(v5 + 32);
      if (v31 >= 64)
        bzero(v17, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v17 = -1 << v31;
      *(_QWORD *)(v5 + 16) = 0;
    }
  }
  else
  {
    v17 = (_QWORD *)(v5 + 64);
    v18 = *(_QWORD *)(v35 + 8 * v16);
    ++v12;
    if (v18)
      goto LABEL_21;
    v12 = v16 + 1;
    if (v16 + 1 >= v34)
      goto LABEL_44;
    v18 = *(_QWORD *)(v35 + 8 * v12);
    if (v18)
    {
LABEL_21:
      v10 = (v18 - 1) & v18;
      v15 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_22:
      v20 = *(_QWORD *)(v5 + 48) + 40 * v15;
      if ((a2 & 1) != 0)
      {
        outlined init with take of ToolbarPlacement.Role(v20, (uint64_t)v41);
        v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
      }
      else
      {
        outlined init with copy of ToolbarPlacement.Role(v20, (uint64_t)v41);
        v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
        swift_retain();
      }
      Hasher.init(_seed:)();
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v41, (uint64_t)&v38);
      switch(*((_QWORD *)&v39 + 1))
      {
        case 0:
          v22 = 0;
          goto LABEL_34;
        case 1:
          v22 = 1;
          goto LABEL_34;
        case 2:
          v22 = 2;
          goto LABEL_34;
        case 3:
          v22 = 3;
          goto LABEL_34;
        case 4:
          v22 = 4;
          goto LABEL_34;
        case 5:
          v22 = 5;
          goto LABEL_34;
        case 6:
          v22 = 7;
LABEL_34:
          Hasher._combine(_:)(v22);
          break;
        default:
          v36[0] = v38;
          v36[1] = v39;
          v37 = v40;
          Hasher._combine(_:)(6uLL);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v36);
          break;
      }
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v28 || (v27 & 1) == 0)
      {
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
        if (v30 != -1)
        {
          v13 = __clz(__rbit64(~v30)) + (v26 << 6);
LABEL_7:
          *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          outlined init with take of ToolbarPlacement.Role((uint64_t)v41, *(_QWORD *)(v7 + 48) + 40 * v13);
          *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v21;
          ++*(_QWORD *)(v7 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      JUMPOUT(0x1877C7E10);
    }
    v19 = v16 + 2;
    if (v19 < v34)
    {
      v18 = *(_QWORD *)(v35 + 8 * v19);
      if (!v18)
      {
        while (1)
        {
          v12 = v19 + 1;
          if (__OFADD__(v19, 1))
            goto LABEL_53;
          if (v12 >= v34)
            goto LABEL_44;
          v18 = *(_QWORD *)(v35 + 8 * v12);
          ++v19;
          if (v18)
            goto LABEL_21;
        }
      }
      v12 = v19;
      goto LABEL_21;
    }
LABEL_44:
    swift_release();
    v3 = v33;
    if ((a2 & 1) != 0)
      goto LABEL_47;
  }
LABEL_51:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt16 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31[8];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Target>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_34;
        v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_34;
          v18 = v30[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_43;
                if (v8 >= v12)
                  goto LABEL_34;
                v18 = v30[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v16);
      v21 = *(_QWORD *)(v5 + 56) + 8 * v16;
      if ((a2 & 1) != 0)
        outlined init with take of AccessibilityFocus.Target(v21, (uint64_t)v31);
      else
        outlined init with copy of AccessibilityFocus.Target(v21, (uint64_t)v31);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v14) = v20;
      result = outlined init with take of AccessibilityFocus.Target((uint64_t)v31, *(_QWORD *)(v7 + 56) + 8 * v14);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, [AnyHashable : PassthroughSubject<Any, Never>]>();
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v36 = v2;
  v37 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_22;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v20 >= v37)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v38 + 8 * v20);
    ++v13;
    if (!v22)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v37)
        goto LABEL_34;
      v22 = *(_QWORD *)(v38 + 8 * v13);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v22 = *(_QWORD *)(v38 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v13 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_43;
            if (v13 >= v37)
              goto LABEL_34;
            v22 = *(_QWORD *)(v38 + 8 * v13);
            ++v23;
            if (v22)
              goto LABEL_21;
          }
        }
        v13 = v23;
      }
    }
LABEL_21:
    v10 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_22:
    v24 = *(_QWORD *)(v5 + 48) + 40 * v19;
    if ((a2 & 1) != 0)
    {
      v25 = *(_OWORD *)v24;
      v26 = *(_OWORD *)(v24 + 16);
      v41 = *(_QWORD *)(v24 + 32);
      v39 = v25;
      v40 = v26;
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    }
    else
    {
      outlined init with copy of AnyHashable(v24, (uint64_t)&v39);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      swift_bridgeObjectRetain();
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v11 + 8 * v30);
      }
      while (v34 == -1);
      v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 40 * v14;
    v16 = v39;
    v17 = v40;
    *(_QWORD *)(v15 + 32) = v41;
    *(_OWORD *)v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v27;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v21 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v21, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, PassthroughSubject<Any, Never>>();
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v36 = v2;
  v37 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_22;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v20 >= v37)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v38 + 8 * v20);
    ++v13;
    if (!v22)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v37)
        goto LABEL_34;
      v22 = *(_QWORD *)(v38 + 8 * v13);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v22 = *(_QWORD *)(v38 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v13 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_43;
            if (v13 >= v37)
              goto LABEL_34;
            v22 = *(_QWORD *)(v38 + 8 * v13);
            ++v23;
            if (v22)
              goto LABEL_21;
          }
        }
        v13 = v23;
      }
    }
LABEL_21:
    v10 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_22:
    v24 = *(_QWORD *)(v5 + 48) + 40 * v19;
    if ((a2 & 1) != 0)
    {
      v25 = *(_OWORD *)v24;
      v26 = *(_OWORD *)(v24 + 16);
      v41 = *(_QWORD *)(v24 + 32);
      v39 = v25;
      v40 = v26;
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    }
    else
    {
      outlined init with copy of AnyHashable(v24, (uint64_t)&v39);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      swift_retain();
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v11 + 8 * v30);
      }
      while (v34 == -1);
      v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 40 * v14;
    v16 = v39;
    v17 = v40;
    *(_QWORD *)(v15 + 32) = v41;
    *(_OWORD *)v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v27;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v21 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v21, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::UInt *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt *v28;
  Swift::UInt v29;
  Swift::UInt v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, TouchEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v41 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v39 = (_QWORD *)(v5 + 64);
    v40 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v21 >= v38)
          goto LABEL_33;
        v22 = v39[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v38)
            goto LABEL_33;
          v22 = v39[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v38)
            {
LABEL_33:
              if ((v41 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v37 = 1 << *(_BYTE *)(v5 + 32);
              if (v37 >= 64)
                bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v37;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v38)
                  goto LABEL_33;
                v22 = v39[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v11 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = (Swift::UInt *)(*(_QWORD *)(v5 + 48) + 16 * v20);
      v30 = *v28;
      v29 = v28[1];
      v31 = *(_QWORD *)(v5 + 56) + 112 * v20;
      v32 = *(_QWORD *)v31;
      v33 = *(_BYTE *)(v31 + 8);
      v34 = *(_QWORD *)(v31 + 16);
      v45 = *(_OWORD *)(v31 + 40);
      v46 = *(_OWORD *)(v31 + 24);
      v35 = *(_QWORD *)(v31 + 72);
      v36 = *(_QWORD *)(v31 + 80);
      v43 = *(_OWORD *)(v31 + 88);
      v44 = *(_OWORD *)(v31 + 56);
      v42 = *(_BYTE *)(v31 + 104);
      if ((v41 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v30);
      Hasher._combine(_:)(v29);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v15 == v25;
          if (v15 == v25)
            v15 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = (Swift::UInt *)(*(_QWORD *)(v7 + 48) + 16 * v16);
      *v17 = v30;
      v17[1] = v29;
      v18 = *(_QWORD *)(v7 + 56) + 112 * v16;
      *(_QWORD *)v18 = v32;
      *(_BYTE *)(v18 + 8) = v33;
      *(_QWORD *)(v18 + 16) = v34;
      *(_OWORD *)(v18 + 24) = v46;
      *(_OWORD *)(v18 + 40) = v45;
      *(_OWORD *)(v18 + 56) = v44;
      *(_QWORD *)(v18 + 72) = v35;
      *(_QWORD *)(v18 + 80) = v36;
      *(_OWORD *)(v18 + 88) = v43;
      *(_BYTE *)(v18 + 104) = v42;
      ++*(_QWORD *)(v7 + 16);
      v5 = v40;
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::UInt *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt *v28;
  Swift::UInt v29;
  Swift::UInt v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, PhysicalButtonEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v40 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v38 = (_QWORD *)(v5 + 64);
    v39 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v38;
        if (v21 >= v37)
          goto LABEL_33;
        v22 = v38[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v37)
            goto LABEL_33;
          v22 = v38[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_33:
              if ((v40 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v36 = 1 << *(_BYTE *)(v5 + 32);
              if (v36 >= 64)
                bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v38 = -1 << v36;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v37)
                  goto LABEL_33;
                v22 = v38[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v11 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = (Swift::UInt *)(*(_QWORD *)(v5 + 48) + 16 * v20);
      v30 = *v28;
      v29 = v28[1];
      v31 = *(_QWORD *)(v5 + 56) + 32 * v20;
      v32 = *(_QWORD *)v31;
      v33 = *(_BYTE *)(v31 + 8);
      v34 = *(_QWORD *)(v31 + 16);
      v35 = *(_BYTE *)(v31 + 24);
      if ((v40 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v30);
      Hasher._combine(_:)(v29);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v15 == v25;
          if (v15 == v25)
            v15 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = (Swift::UInt *)(*(_QWORD *)(v7 + 48) + 16 * v16);
      *v17 = v30;
      v17[1] = v29;
      v18 = *(_QWORD *)(v7 + 56) + 32 * v16;
      *(_QWORD *)v18 = v32;
      *(_BYTE *)(v18 + 8) = v33;
      *(_QWORD *)(v18 + 16) = v34;
      *(_BYTE *)(v18 + 24) = v35;
      ++*(_QWORD *)(v7 + 16);
      v5 = v39;
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationSplitColumn, NavigationSplitViewColumnWidth>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitColumn and conformance NavigationSplitColumn);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v8 = 0;
    v36 = (_QWORD *)(v5 + 64);
    v37 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = (uint64_t)v36;
        if (v17 >= v35)
          goto LABEL_31;
        v18 = v36[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v35)
            goto LABEL_31;
          v18 = v36[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v35)
            {
LABEL_31:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v36[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v35)
                  goto LABEL_31;
                v18 = v36[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(v5 + 56) + 40 * v16;
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v16);
      v38 = *(_BYTE *)(v20 + 32);
      v22 = *(_QWORD *)(v20 + 16);
      v23 = *(_QWORD *)(v20 + 24);
      v25 = *(_QWORD *)v20;
      v24 = *(_QWORD *)(v20 + 8);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v7 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v13) = v21;
      v14 = *(_QWORD *)(v7 + 56) + 40 * v13;
      *(_QWORD *)v14 = v25;
      *(_QWORD *)(v14 + 8) = v24;
      *(_QWORD *)(v14 + 16) = v22;
      *(_QWORD *)(v14 + 24) = v23;
      *(_BYTE *)(v14 + 32) = v38;
      ++*(_QWORD *)(v7 + 16);
      v5 = v37;
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<SpatialEventCollection.Event.ID, SpatialEventCollection.Event>, (void (*)(void))lazy protocol witness table accessor for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = a2;
    v8 = 0;
    v39 = (_QWORD *)(v5 + 64);
    v40 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v17 >= v38)
          goto LABEL_31;
        v18 = v39[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v38)
            goto LABEL_31;
          v18 = v39[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v38)
            {
LABEL_31:
              if ((v37 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v36 = 1 << *(_BYTE *)(v5 + 32);
              if (v36 >= 64)
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v36;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v39[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v38)
                  goto LABEL_31;
                v18 = v39[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = *(_QWORD *)(v5 + 56) + 80 * v16;
      v43 = *(_BYTE *)(v21 + 72);
      v22 = *(_QWORD *)(v21 + 48);
      v41 = *(_QWORD *)(v21 + 56);
      v42 = *(_QWORD *)(v21 + 64);
      v23 = *(_BYTE *)(v21 + 40);
      v25 = *(_QWORD *)(v21 + 24);
      v24 = *(_QWORD *)(v21 + 32);
      v26 = *(_BYTE *)(v21 + 16);
      v27 = *(_QWORD *)(v21 + 8);
      v28 = *(_QWORD *)v21;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v7 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v12 + 8 * v31);
        }
        while (v35 == -1);
        v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v20;
      v14 = *(_QWORD *)(v7 + 56) + 80 * v13;
      *(_QWORD *)v14 = v28;
      *(_QWORD *)(v14 + 8) = v27;
      *(_BYTE *)(v14 + 16) = v26;
      *(_QWORD *)(v14 + 24) = v25;
      *(_QWORD *)(v14 + 32) = v24;
      *(_BYTE *)(v14 + 40) = v23;
      *(_QWORD *)(v14 + 48) = v22;
      *(_QWORD *)(v14 + 56) = v41;
      *(_QWORD *)(v14 + 64) = v42;
      *(_BYTE *)(v14 + 72) = v43;
      ++*(_QWORD *)(v7 + 16);
      v5 = v40;
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt16 v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, [AccessibilityFocus.Match : Set<UniqueID>]>, (void (*)(uint64_t))type metadata accessor for [AccessibilityFocus.Match : Set<UniqueID>], (void (*)(void))lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v19 >= v29)
          goto LABEL_33;
        v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v29)
            goto LABEL_33;
          v20 = v30[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_42;
                if (v8 >= v29)
                  goto LABEL_33;
                v20 = v30[v8];
                ++v21;
                if (v20)
                  goto LABEL_30;
              }
            }
            v8 = v21;
          }
        }
LABEL_30:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v26 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v18);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v24 = v15 == v23;
          if (v15 == v23)
            v15 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v26;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AccessibilityFocus.Match, Set<UniqueID>>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v19 >= v29)
          goto LABEL_33;
        v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v29)
            goto LABEL_33;
          v20 = v30[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_42;
                if (v8 >= v29)
                  goto LABEL_33;
                v20 = v30[v8];
                ++v21;
                if (v20)
                  goto LABEL_30;
              }
            }
            v8 = v21;
          }
        }
LABEL_30:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v26 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v18);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v24 = v15 == v23;
          if (v15 == v23)
            v15 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v26;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt16 v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Match>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = a2;
    v8 = 0;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_31;
        v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_31;
          v18 = v31[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v12)
                  goto LABEL_31;
                v18 = v31[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v16);
      v21 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v14) = v20;
      *(_BYTE *)(*(_QWORD *)(v7 + 56) + v14) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  int64_t v41;
  uint64_t *v42;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, PinnedSection>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v40 = a2;
    v39 = v3;
    v8 = 0;
    v42 = (uint64_t *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v37 = -1 << v9;
    v38 = v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v41 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v41)
          goto LABEL_31;
        v18 = v42[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v41)
            goto LABEL_31;
          v18 = v42[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v41)
            {
LABEL_31:
              if ((v40 & 1) == 0)
              {
                result = swift_release();
                v3 = v39;
                goto LABEL_38;
              }
              if (v38 >= 64)
                bzero(v42, 8 * v41);
              else
                *v42 = v37;
              v3 = v39;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v42[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v41)
                  goto LABEL_31;
                v18 = v42[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v16);
      v21 = *(_QWORD *)(v5 + 56) + (v16 << 6);
      v22 = *(_BYTE *)(v21 + 56);
      v23 = *(_QWORD *)(v21 + 48);
      v24 = *(_BYTE *)(v21 + 40);
      v25 = *(_QWORD *)(v21 + 32);
      v27 = *(_QWORD *)(v21 + 16);
      v26 = *(_QWORD *)(v21 + 24);
      v29 = *(_QWORD *)v21;
      v28 = *(_QWORD *)(v21 + 8);
      result = MEMORY[0x18D75ED7C](*(_QWORD *)(v7 + 40), v20, 4);
      v30 = -1 << *(_BYTE *)(v7 + 32);
      v31 = result & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v35 = v32 == v34;
          if (v32 == v34)
            v32 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)(v12 + 8 * v32);
        }
        while (v36 == -1);
        v13 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v13) = v20;
      v14 = *(_QWORD *)(v7 + 56) + (v13 << 6);
      *(_QWORD *)v14 = v29;
      *(_QWORD *)(v14 + 8) = v28;
      *(_QWORD *)(v14 + 16) = v27;
      *(_QWORD *)(v14 + 24) = v26;
      *(_QWORD *)(v14 + 32) = v25;
      *(_BYTE *)(v14 + 40) = v24;
      *(_QWORD *)(v14 + 48) = v23;
      *(_BYTE *)(v14 + 56) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(_QWORD))type metadata accessor for _DictionaryStorage<String, SceneStorageValues.AnyEntry>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt32 v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_DisplayList_Identity, DisplayList>, (void (*)(void))lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity);
  v35 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v33)
          goto LABEL_33;
        v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v33)
            goto LABEL_33;
          v21 = v34[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v33)
                  goto LABEL_33;
                v21 = v34[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v19);
      v28 = *(_QWORD *)(v5 + 56) + 16 * v19;
      v29 = *(_QWORD *)v28;
      v30 = *(_WORD *)(v28 + 8);
      v31 = *(_BYTE *)(v28 + 10);
      if ((v35 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v16) = v27;
      v17 = *(_QWORD *)(v7 + 56) + 16 * v16;
      *(_QWORD *)v17 = v29;
      *(_WORD *)(v17 + 8) = v30;
      *(_BYTE *)(v17 + 10) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _BYTE v38[280];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, TabEntry>();
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v35)
        goto LABEL_34;
      v20 = *(_QWORD *)(v36 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v35)
              goto LABEL_34;
            v20 = *(_QWORD *)(v36 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = (const void *)(*(_QWORD *)(v5 + 56) + 272 * v17);
    if ((v37 & 1) != 0)
    {
      outlined init with take of TabEntry(v25, v38);
    }
    else
    {
      outlined init with copy of TabEntry((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    result = (uint64_t)outlined init with take of TabEntry(v38, (void *)(*(_QWORD *)(v7 + 56) + 272 * v14));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v19 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(_QWORD))type metadata accessor for _DictionaryStorage<Int, Int>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, DragReorderableLayoutCoordinator.ChildFrame>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = a2;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v35 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v36 = 1 << *(_BYTE *)(v5 + 32);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v37 & 1) != 0)
              {
                if (v36 >= 64)
                  bzero((void *)(v5 + 64), 8 * v13);
                else
                  *v9 = v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_39;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v23 = *(_QWORD *)(v5 + 56) + 48 * v18;
      v24 = *(_QWORD *)(v23 + 40);
      v38 = *(_OWORD *)(v23 + 24);
      v26 = *(_QWORD *)(v23 + 8);
      v25 = *(_QWORD *)(v23 + 16);
      v27 = *(_QWORD *)v23;
      result = static Hasher._hash(seed:_:)();
      v28 = -1 << *(_BYTE *)(v7 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v14 + 8 * v30);
        }
        while (v34 == -1);
        v15 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v22;
      v16 = *(_QWORD *)(v7 + 56) + 48 * v15;
      *(_QWORD *)v16 = v27;
      *(_QWORD *)(v16 + 8) = v26;
      *(_QWORD *)(v16 + 16) = v25;
      *(_OWORD *)(v16 + 24) = v38;
      *(_QWORD *)(v16 + 40) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UIMenuIdentifier, UIMenuIdentifier>(0, &lazy cache variable for type metadata for _DictionaryStorage<AGAttribute, AGAttribute>, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, (unint64_t *)&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, MEMORY[0x1E0CFED18]);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 4 * v18;
      v23 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = MEMORY[0x18D75ED7C](*(_QWORD *)(v7 + 40), v23, 4);
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 4 * v15;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_DWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _BYTE v46[48];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<Toolbar.BarLocation, Toolbar.LocationStorage>, (void (*)(void))lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  v39 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_59;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v36 = v2;
  v37 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  swift_retain();
  v12 = 0;
LABEL_8:
  if (v10)
  {
    v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v16 = v15 | (v12 << 6);
    goto LABEL_22;
  }
  v17 = v12 + 1;
  if (__OFADD__(v12, 1))
    goto LABEL_60;
  if (v17 >= v37)
  {
    swift_release();
    v3 = v36;
    v18 = (_QWORD *)(v5 + 64);
    if ((v39 & 1) != 0)
    {
LABEL_55:
      v34 = 1 << *(_BYTE *)(v5 + 32);
      if (v34 >= 64)
        bzero(v18, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v18 = -1 << v34;
      *(_QWORD *)(v5 + 16) = 0;
    }
  }
  else
  {
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v38 + 8 * v17);
    ++v12;
    if (v19)
      goto LABEL_21;
    v12 = v17 + 1;
    if (v17 + 1 >= v37)
      goto LABEL_52;
    v19 = *(_QWORD *)(v38 + 8 * v12);
    if (v19)
    {
LABEL_21:
      v10 = (v19 - 1) & v19;
      v16 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_22:
      v21 = *(_QWORD *)(v5 + 48) + 40 * v16;
      if ((v39 & 1) != 0)
      {
        outlined init with take of Toolbar.BarLocation(v21, (uint64_t)v46);
        v22 = *(_QWORD *)(v5 + 56) + 24 * v16;
        v40 = *(_OWORD *)v22;
        v23 = *(_QWORD *)(v22 + 16);
      }
      else
      {
        outlined init with copy of Toolbar.BarLocation(v21, (uint64_t)v46);
        v24 = *(_QWORD *)(v5 + 56) + 24 * v16;
        v40 = *(_OWORD *)v24;
        v23 = *(_QWORD *)(v24 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      outlined init with copy of Toolbar.BarLocation((uint64_t)v46, (uint64_t)&v43);
      switch(*((_QWORD *)&v44 + 1))
      {
        case 0:
          v25 = 0;
          goto LABEL_42;
        case 1:
          v25 = 1;
          goto LABEL_42;
        case 2:
          v25 = 2;
          goto LABEL_42;
        case 3:
          v25 = 3;
          goto LABEL_42;
        case 4:
          v25 = 4;
          goto LABEL_42;
        case 5:
          v25 = 5;
          goto LABEL_42;
        case 6:
          v25 = 6;
          goto LABEL_42;
        case 7:
          v25 = 7;
          goto LABEL_42;
        case 8:
          v25 = 8;
          goto LABEL_42;
        case 9:
          v25 = 9;
          goto LABEL_42;
        case 0xALL:
          v25 = 10;
          goto LABEL_42;
        case 0xBLL:
          v25 = 11;
          goto LABEL_42;
        case 0xCLL:
          v25 = 12;
          goto LABEL_42;
        case 0xDLL:
          v25 = 13;
          goto LABEL_42;
        case 0xELL:
          v25 = 15;
LABEL_42:
          Hasher._combine(_:)(v25);
          break;
        default:
          v41[0] = v43;
          v41[1] = v44;
          v42 = v45;
          Hasher._combine(_:)(0xEuLL);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v41);
          break;
      }
      v26 = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v7 + 32);
      v28 = v26 & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      while (++v29 != v31 || (v30 & 1) == 0)
      {
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v11 + 8 * v29);
        if (v33 != -1)
        {
          v13 = __clz(__rbit64(~v33)) + (v29 << 6);
LABEL_7:
          *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          outlined init with take of Toolbar.BarLocation((uint64_t)v46, *(_QWORD *)(v7 + 48) + 40 * v13);
          v14 = *(_QWORD *)(v7 + 56) + 24 * v13;
          *(_OWORD *)v14 = v40;
          *(_QWORD *)(v14 + 16) = v23;
          ++*(_QWORD *)(v7 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      JUMPOUT(0x1877CC3E8);
    }
    v20 = v17 + 2;
    if (v20 < v37)
    {
      v19 = *(_QWORD *)(v38 + 8 * v20);
      if (!v19)
      {
        while (1)
        {
          v12 = v20 + 1;
          if (__OFADD__(v20, 1))
            goto LABEL_61;
          if (v12 >= v37)
            goto LABEL_52;
          v19 = *(_QWORD *)(v38 + 8 * v12);
          ++v20;
          if (v19)
            goto LABEL_21;
        }
      }
      v12 = v20;
      goto LABEL_21;
    }
LABEL_52:
    swift_release();
    v3 = v36;
    if ((v39 & 1) != 0)
      goto LABEL_55;
  }
LABEL_59:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, Toolbar.VendedItem>();
  v43 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v40 = v2;
  v41 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v42 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_33;
      v25 = *(_QWORD *)(v42 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_33:
          swift_release();
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v42 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v41)
              goto LABEL_33;
            v25 = *(_QWORD *)(v42 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = *(_QWORD *)(v5 + 56) + v31;
    v36 = *(void **)v35;
    v37 = *(_BYTE *)(v35 + 8);
    if ((v43 & 1) == 0)
    {
      v38 = v36;
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = *(_QWORD *)(v7 + 56) + v18;
    *(_QWORD *)v20 = v36;
    *(_BYTE *)(v20 + 8) = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v40;
  v24 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UINavigationController, Set<NavigationStackHostingController<AnyView>>>();
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      v33 = v31;
      swift_bridgeObjectRetain();
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  void *v29;
  id v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UISplitViewControllerColumn, NavigationStackCoordinator<SplitColumnNavigationStrategy>>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_33;
        v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_33;
          v21 = v33[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v32)
                  goto LABEL_33;
                v21 = v33[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = 8 * v19;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v27);
      v29 = *(void **)(*(_QWORD *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
        v30 = v29;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v17) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  id v37;
  uint64_t v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  char v42;
  __int128 v43;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, SizeFittingState.Child>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v40 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v39)
          goto LABEL_33;
        v23 = v40[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v39)
            goto LABEL_33;
          v23 = v40[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v42 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v5 + 32);
                if (v38 >= 64)
                  bzero(v40, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v38;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v39)
                  goto LABEL_33;
                v23 = v40[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v30 = *v29;
      v31 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 48 * v21;
      v33 = *(void **)v32;
      v34 = *(_QWORD *)(v32 + 8);
      v35 = *(_QWORD *)(v32 + 16);
      v43 = *(_OWORD *)(v32 + 24);
      v36 = *(_BYTE *)(v32 + 40);
      if ((v42 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        v37 = v33;
      }
      Hasher.init(_seed:)();
      _ViewList_ID.Canonical.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      v19 = *(_QWORD *)(v7 + 56) + 48 * v17;
      *(_QWORD *)v19 = v33;
      *(_QWORD *)(v19 + 8) = v34;
      *(_QWORD *)(v19 + 16) = v35;
      *(_OWORD *)(v19 + 24) = v43;
      *(_BYTE *)(v19 + 40) = v36;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::UInt8 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>, (void (*)(void))lazy protocol witness table accessor for type Axis and conformance Axis);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = a2;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v36 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v35 = 1 << *(_BYTE *)(v5 + 32);
              if (v35 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v35;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v18);
      v23 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      v25 = v23[2];
      v24 = v23[3];
      v27 = *v23;
      v26 = v23[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      result = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v7 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v14 + 8 * v30);
        }
        while (v34 == -1);
        v15 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v22;
      v16 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15);
      *v16 = v27;
      v16[1] = v26;
      v16[2] = v25;
      v16[3] = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Character, String>();
  v39 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v38 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v8 << 6);
      }
      else
      {
        v22 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v8;
        if (!v23)
        {
          v8 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v8];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              if ((v39 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v36 = 1 << *(_BYTE *)(v5 + 32);
              if (v36 >= 64)
                bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v38 = -1 << v36;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v8 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v8 >= v37)
                  goto LABEL_33;
                v23 = v38[v8];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v8 = v24;
          }
        }
LABEL_30:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      v29 = 16 * v21;
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v29);
      v32 = *v30;
      v31 = v30[1];
      v33 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v29);
      v34 = *v33;
      v35 = v33[1];
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v15 == v26;
          if (v15 == v26)
            v15 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v28 == -1);
        v16 = __clz(__rbit64(~v28)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 16 * v16;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v17);
      *v18 = v32;
      v18[1] = v31;
      v19 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v17);
      *v19 = v34;
      v19[1] = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  __int128 v41;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<KeyboardShortcut, KeyboardShortcutBridge.Shortcut>, (void (*)(void))lazy protocol witness table accessor for type KeyboardShortcut and conformance KeyboardShortcut);
  v40 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v38 = (_QWORD *)(v5 + 64);
    v39 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v38;
        if (v21 >= v37)
          goto LABEL_33;
        v22 = v38[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v37)
            goto LABEL_33;
          v22 = v38[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_33:
              if ((v40 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v36 = 1 << *(_BYTE *)(v5 + 32);
              if (v36 >= 64)
                bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v38 = -1 << v36;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v37)
                  goto LABEL_33;
                v22 = v38[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v11 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = *(_QWORD *)(v5 + 48) + 32 * v20;
      v29 = *(_QWORD *)v28;
      v30 = *(_QWORD *)(v28 + 8);
      v31 = *(_QWORD *)(v28 + 16);
      v32 = *(unsigned __int8 *)(v28 + 24);
      v33 = *(_QWORD *)(v5 + 56) + 24 * v20;
      v41 = *(_OWORD *)v33;
      v34 = *(_QWORD *)(v33 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        v35 = (id)v41;
        swift_retain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._combine(_:)(v31);
      Hasher._combine(_:)(v32);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v15 == v25;
          if (v15 == v25)
            v15 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = *(_QWORD *)(v7 + 48) + 32 * v16;
      *(_QWORD *)v17 = v29;
      *(_QWORD *)(v17 + 8) = v30;
      *(_QWORD *)(v17 + 16) = v31;
      *(_BYTE *)(v17 + 24) = v32;
      v18 = *(_QWORD *)(v7 + 56) + 24 * v16;
      *(_OWORD *)v18 = v41;
      *(_QWORD *)(v18 + 16) = v34;
      ++*(_QWORD *)(v7 + 16);
      v5 = v39;
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt v26;
  Swift::UInt v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  int64_t v42;
  uint64_t v43;
  __int128 v44;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<KeyboardShortcutBinding, Int>, (void (*)(void))lazy protocol witness table accessor for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding);
  v41 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v39 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    v40 = v5;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v42 = v13;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v38)
          goto LABEL_35;
        v19 = v39[v18];
        v20 = v13 + 1;
        if (!v19)
        {
          v20 = v13 + 2;
          if (v13 + 2 >= v38)
            goto LABEL_35;
          v19 = v39[v20];
          if (!v19)
          {
            v21 = v13 + 3;
            if (v13 + 3 >= v38)
            {
LABEL_35:
              swift_release();
              v3 = v2;
              if ((v41 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v5 + 32);
                if (v37 >= 64)
                  bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v37;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v39[v21];
            if (!v19)
            {
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_42;
                if (v20 >= v38)
                  goto LABEL_35;
                v19 = v39[v20];
                ++v21;
                if (v19)
                  goto LABEL_21;
              }
            }
            v20 = v13 + 3;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v42 = v20;
        v17 = __clz(__rbit64(v19)) + (v20 << 6);
      }
      v22 = *(_QWORD *)(v5 + 56);
      v23 = *(_QWORD *)(v5 + 48) + (v17 << 6);
      v25 = *(_QWORD *)v23;
      v24 = *(_QWORD *)(v23 + 8);
      v26 = *(_QWORD *)(v23 + 16);
      v27 = *(unsigned __int8 *)(v23 + 24);
      v44 = *(_OWORD *)(v23 + 32);
      v29 = *(_QWORD *)(v23 + 48);
      v28 = *(_QWORD *)(v23 + 56);
      v43 = *(_QWORD *)(v22 + 8 * v17);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v27);
      if (v28)
        String.hash(into:)();
      result = Hasher._finalize()();
      v30 = -1 << *(_BYTE *)(v7 + 32);
      v31 = result & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v11 + 8 * (v31 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v11 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v35 = v32 == v34;
          if (v32 == v34)
            v32 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)(v11 + 8 * v32);
        }
        while (v36 == -1);
        v14 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = *(_QWORD *)(v7 + 48) + (v14 << 6);
      *(_QWORD *)v15 = v25;
      *(_QWORD *)(v15 + 8) = v24;
      *(_QWORD *)(v15 + 16) = v26;
      *(_BYTE *)(v15 + 24) = v27;
      *(_OWORD *)(v15 + 32) = v44;
      *(_QWORD *)(v15 + 48) = v29;
      *(_QWORD *)(v15 + 56) = v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v43;
      ++*(_QWORD *)(v7 + 16);
      v5 = v40;
      v13 = v42;
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[8];
  _OWORD v28[6];
  _BYTE v29[25];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>>, type metadata accessor for WeakBox<PlatformDocument>, (void (*)(void))lazy protocol witness table accessor for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration);
  v6 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return result;
        }
        if (v16 >= v11)
          goto LABEL_23;
        v17 = v8[v16];
        ++v13;
        if (!v17)
        {
          v13 = v16 + 1;
          if (v16 + 1 >= v11)
            goto LABEL_23;
          v17 = v8[v13];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v26 = 1 << *(_BYTE *)(v5 + 32);
                if (v26 >= 64)
                  bzero((void *)(v5 + 64), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v26;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_30;
                if (v13 >= v11)
                  goto LABEL_23;
                v17 = v8[v13];
                ++v18;
                if (v17)
                  goto LABEL_20;
              }
            }
            v13 = v18;
          }
        }
LABEL_20:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      v19 = (__int128 *)(*(_QWORD *)(v5 + 48) + (v15 << 7));
      if ((a2 & 1) != 0)
      {
        v20 = *v19;
        v21 = v19[1];
        v22 = v19[2];
        v28[3] = v19[3];
        v23 = v19[4];
        v24 = v19[5];
        v25 = v19[6];
        *(_OWORD *)&v29[9] = *(__int128 *)((char *)v19 + 105);
        v28[5] = v24;
        *(_OWORD *)v29 = v25;
        v28[4] = v23;
        v28[1] = v21;
        v28[2] = v22;
        v28[0] = v20;
        outlined init with take of TableCellFormula(*(_QWORD *)(v5 + 56) + 8 * v15, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<PlatformDocument>);
      }
      else
      {
        outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v19, (uint64_t)v28);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v5 + 56) + 8 * v15, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<PlatformDocument>);
      }
      result = specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v28, (uint64_t)v27, v6);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UIMenuIdentifier, [UIMenuElement]>();
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v2;
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35)
          goto LABEL_33;
        v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_33;
          v23 = v36[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v34;
              if ((v37 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v35)
                  goto LABEL_33;
                v23 = v36[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = 8 * v21;
      v30 = *(void **)(*(_QWORD *)(v5 + 48) + v29);
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v29);
      if ((v37 & 1) == 0)
      {
        v32 = v30;
        swift_bridgeObjectRetain();
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      v14 = Hasher._finalize()();
      result = swift_bridgeObjectRelease();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v30;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UIMenuIdentifier, UIMenuIdentifier>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UIMenuIdentifier, UIMenuIdentifier>, (uint64_t (*)(uint64_t))type metadata accessor for UIMenuIdentifier, &lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, (uint64_t)&protocol conformance descriptor for UIMenuIdentifier);
  v39 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v36 = v2;
  v37 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_33;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v37)
              goto LABEL_33;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + v30);
    if ((v39 & 1) == 0)
    {
      v33 = v31;
      v34 = v32;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    v14 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, UIAccessibilityCustomRotor>();
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unsigned __int8 *v20;
  Swift::UInt v21;
  Swift::UInt v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<NavigationContentAbstractPosition, NavigationStackHostingController<AnyView>>();
  v35 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v33)
          goto LABEL_36;
        v18 = v34[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v33)
            goto LABEL_36;
          v18 = v34[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v33)
            {
LABEL_36:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_43;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_45;
                if (v8 >= v33)
                  goto LABEL_36;
                v18 = v34[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = (unsigned __int8 *)(*(_QWORD *)(v5 + 48) + 16 * v16);
      v21 = *v20;
      v22 = *((_QWORD *)v20 + 1);
      v23 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v16);
      if ((v35 & 1) == 0)
        v24 = v23;
      Hasher.init(_seed:)();
      if ((_DWORD)v21 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v21);
      }
      Hasher._combine(_:)(v22);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 16 * v13;
      *(_BYTE *)v14 = v21;
      *(_QWORD *)(v14 + 8) = v22;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v23;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  Swift::UInt *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::UInt *v22;
  Swift::UInt v23;
  Swift::UInt v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _QWORD *v39;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, RawPanGesture.StateType.EventInfo>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = a2;
    v8 = 0;
    v39 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v19 >= v12)
          goto LABEL_31;
        v20 = v39[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v12)
            goto LABEL_31;
          v20 = v39[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v12)
            {
LABEL_31:
              if ((v38 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v37 = 1 << *(_BYTE *)(v5 + 32);
              if (v37 >= 64)
                bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v37;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v39[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v12)
                  goto LABEL_31;
                v20 = v39[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = (Swift::UInt *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      v27 = v25[2];
      v26 = v25[3];
      v29 = *v25;
      v28 = v25[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v30 = -1 << *(_BYTE *)(v7 + 32);
      v31 = result & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v35 = v32 == v34;
          if (v32 == v34)
            v32 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)(v13 + 8 * v32);
        }
        while (v36 == -1);
        v14 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (Swift::UInt *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v24;
      v15[1] = v23;
      v16 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14);
      *v16 = v29;
      v16[1] = v28;
      v16[2] = v27;
      v16[3] = v26;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  char v29;
  _BYTE v30[48];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>, type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>)), (void (*)(void))lazy protocol witness table accessor for type TableRowID and conformance TableRowID);
  v6 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v18 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v19 = v18 | (v13 << 6);
      }
      else
      {
        v20 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return result;
        }
        if (v20 >= v11)
          goto LABEL_23;
        v21 = v8[v20];
        ++v13;
        if (!v21)
        {
          v13 = v20 + 1;
          if (v20 + 1 >= v11)
            goto LABEL_23;
          v21 = v8[v13];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v11)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v24 = 1 << *(_BYTE *)(v5 + 32);
                if (v24 >= 64)
                  bzero((void *)(v5 + 64), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v24;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v21 = v8[v22];
            if (!v21)
            {
              while (1)
              {
                v13 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_30;
                if (v13 >= v11)
                  goto LABEL_23;
                v21 = v8[v13];
                ++v22;
                if (v21)
                  goto LABEL_20;
              }
            }
            v13 = v22;
          }
        }
LABEL_20:
        v10 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v13 << 6);
      }
      v23 = *(_QWORD *)(v5 + 48) + 48 * v19;
      if ((a2 & 1) != 0)
        outlined init with take of TableRowID(v23, (uint64_t)v30);
      else
        outlined init with copy of TableRowID(v23, (uint64_t)v30);
      v14 = *(_QWORD *)(v5 + 56) + 56 * v19;
      v15 = *(_BYTE *)(v14 + 48);
      v16 = *(_BYTE *)(v14 + 24);
      v17 = *(_QWORD *)(v14 + 16);
      v25 = *(_OWORD *)v14;
      v26 = v17;
      v27 = v16;
      v28 = *(_OWORD *)(v14 + 32);
      v29 = v15;
      result = specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v30, (uint64_t *)&v25, v6);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[48];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TableRowID, Int>, (void (*)(void))lazy protocol witness table accessor for type TableRowID and conformance TableRowID);
  v6 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return result;
        }
        if (v16 >= v11)
          goto LABEL_23;
        v17 = v8[v16];
        ++v13;
        if (!v17)
        {
          v13 = v16 + 1;
          if (v16 + 1 >= v11)
            goto LABEL_23;
          v17 = v8[v13];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v20 = 1 << *(_BYTE *)(v5 + 32);
                if (v20 >= 64)
                  bzero((void *)(v5 + 64), ((unint64_t)(v20 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v20;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_30;
                if (v13 >= v11)
                  goto LABEL_23;
                v17 = v8[v13];
                ++v18;
                if (v17)
                  goto LABEL_20;
              }
            }
            v13 = v18;
          }
        }
LABEL_20:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      v19 = *(_QWORD *)(v5 + 48) + 48 * v15;
      if ((a2 & 1) != 0)
        outlined init with take of TableRowID(v19, (uint64_t)v21);
      else
        outlined init with copy of TableRowID(v19, (uint64_t)v21);
      result = specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v21, *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15), v6);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  int64_t v37;
  uint64_t *v38;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, (Int, CountingIndex<Int>)>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = a2;
    v35 = v3;
    v8 = 0;
    v38 = (uint64_t *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v9;
    v34 = v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v37)
          goto LABEL_31;
        v18 = v38[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v37)
            goto LABEL_31;
          v18 = v38[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v37)
            {
LABEL_31:
              if ((v36 & 1) == 0)
              {
                result = swift_release();
                v3 = v35;
                goto LABEL_38;
              }
              if (v34 >= 64)
                bzero(v38, 8 * v37);
              else
                *v38 = v33;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v38[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v37)
                  goto LABEL_31;
                v18 = v38[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = *(_QWORD *)(v5 + 56) + 32 * v16;
      v22 = *(_BYTE *)(v21 + 24);
      v23 = *(_QWORD *)(v21 + 8);
      v24 = *(_QWORD *)(v21 + 16);
      v25 = *(_QWORD *)v21;
      result = static Hasher._hash(seed:_:)();
      v26 = -1 << *(_BYTE *)(v7 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v20;
      v14 = *(_QWORD *)(v7 + 56) + 32 * v13;
      *(_QWORD *)v14 = v25;
      *(_QWORD *)(v14 + 8) = v23;
      *(_QWORD *)(v14 + 16) = v24;
      *(_BYTE *)(v14 + 24) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::UInt *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt *v28;
  Swift::UInt v29;
  Swift::UInt v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  char v38;
  __int128 v39;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, HoverEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v38 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v37 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v36)
          goto LABEL_33;
        v22 = v37[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v36)
            goto LABEL_33;
          v22 = v37[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_33:
              if ((v38 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v35 = 1 << *(_BYTE *)(v5 + 32);
              if (v35 >= 64)
                bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v37 = -1 << v35;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v36)
                  goto LABEL_33;
                v22 = v37[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v11 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = (Swift::UInt *)(*(_QWORD *)(v5 + 48) + 16 * v20);
      v30 = *v28;
      v29 = v28[1];
      v31 = *(_QWORD *)(v5 + 56) + 40 * v20;
      v32 = *(_QWORD *)v31;
      v33 = *(_BYTE *)(v31 + 8);
      v34 = *(_QWORD *)(v31 + 16);
      v39 = *(_OWORD *)(v31 + 24);
      if ((v38 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v30);
      Hasher._combine(_:)(v29);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v15 == v25;
          if (v15 == v25)
            v15 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = (Swift::UInt *)(*(_QWORD *)(v7 + 48) + 16 * v16);
      *v17 = v30;
      v17[1] = v29;
      v18 = *(_QWORD *)(v7 + 56) + 40 * v16;
      *(_QWORD *)v18 = v32;
      *(_BYTE *)(v18 + 8) = v33;
      *(_QWORD *)(v18 + 16) = v34;
      *(_OWORD *)(v18 + 24) = v39;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::UInt *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt *v26;
  Swift::UInt v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;
  char v33;

  v4 = *v2;
  type metadata accessor for _DictionaryStorage<EventID, [KeyPress.Handler]>();
  v33 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v6 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 0;
    v32 = (_QWORD *)(v4 + 64);
    v8 = 1 << *(_BYTE *)(v4 + 32);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 64);
    v31 = (unint64_t)(v8 + 63) >> 6;
    v11 = result + 64;
    while (1)
    {
      if (v10)
      {
        v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v18 = v17 | (v7 << 6);
      }
      else
      {
        v19 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        result = v4 + 64;
        if (v19 >= v31)
          goto LABEL_33;
        v20 = v32[v19];
        ++v7;
        if (!v20)
        {
          v7 = v19 + 1;
          if (v19 + 1 >= v31)
            goto LABEL_33;
          v20 = v32[v7];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v31)
            {
LABEL_33:
              if ((v33 & 1) != 0)
              {
                v30 = 1 << *(_BYTE *)(v4 + 32);
                if (v30 >= 64)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v4 + 16) = 0;
              }
              break;
            }
            v20 = v32[v21];
            if (!v20)
            {
              while (1)
              {
                v7 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v7 >= v31)
                  goto LABEL_33;
                v20 = v32[v7];
                ++v21;
                if (v20)
                  goto LABEL_30;
              }
            }
            v7 = v21;
          }
        }
LABEL_30:
        v10 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v7 << 6);
      }
      v26 = (Swift::UInt *)(*(_QWORD *)(v4 + 48) + 16 * v18);
      v28 = *v26;
      v27 = v26[1];
      v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
      if ((v33 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v12 = -1 << *(_BYTE *)(v6 + 32);
      v13 = result & ~v12;
      v14 = v13 >> 6;
      if (((-1 << v13) & ~*(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v11 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v12) >> 6;
        do
        {
          if (++v14 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v24 = v14 == v23;
          if (v14 == v23)
            v14 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v14);
        }
        while (v25 == -1);
        v15 = __clz(__rbit64(~v25)) + (v14 << 6);
      }
      *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (Swift::UInt *)(*(_QWORD *)(v6 + 48) + 16 * v15);
      *v16 = v28;
      v16[1] = v27;
      *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15) = v29;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, String>();
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt8 v23;
  Swift::UInt v24;
  Swift::UInt v25;
  Swift::UInt v26;
  Swift::UInt v27;
  Swift::UInt v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int64_t v41;
  int v42;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationStackViewPosition, VersionSeed>, (void (*)(void))lazy protocol witness table accessor for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = a2;
    v8 = 0;
    v39 = (_QWORD *)(v5 + 64);
    v40 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v41 = v8;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v17 >= v38)
          goto LABEL_31;
        v18 = v39[v17];
        v19 = v8 + 1;
        if (!v18)
        {
          v19 = v17 + 1;
          if (v17 + 1 >= v38)
            goto LABEL_31;
          v18 = v39[v19];
          if (!v18)
          {
            v20 = v17 + 2;
            if (v20 >= v38)
            {
LABEL_31:
              if ((v37 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v36 = 1 << *(_BYTE *)(v5 + 32);
              if (v36 >= 64)
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v36;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v39[v20];
            if (!v18)
            {
              while (1)
              {
                v19 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v19 >= v38)
                  goto LABEL_31;
                v18 = v39[v19];
                ++v20;
                if (v18)
                  goto LABEL_21;
              }
            }
            v19 = v20;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v41 = v19;
        v16 = __clz(__rbit64(v18)) + (v19 << 6);
      }
      v21 = *(_QWORD *)(v5 + 56);
      v22 = *(_QWORD *)(v5 + 48) + 48 * v16;
      v23 = *(_BYTE *)(v22 + 40);
      v25 = *(_QWORD *)(v22 + 24);
      v24 = *(_QWORD *)(v22 + 32);
      v26 = *(unsigned __int8 *)(v22 + 16);
      v27 = *(_QWORD *)v22;
      v28 = *(_QWORD *)(v22 + 8);
      v42 = *(_DWORD *)(v21 + 4 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      Hasher._combine(_:)(v28);
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v25);
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v7 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v12 + 8 * v31);
        }
        while (v35 == -1);
        v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 48 * v13;
      *(_QWORD *)v14 = v27;
      *(_QWORD *)(v14 + 8) = v28;
      *(_BYTE *)(v14 + 16) = v26;
      *(_QWORD *)(v14 + 24) = v25;
      *(_QWORD *)(v14 + 32) = v24;
      *(_BYTE *)(v14 + 40) = v23;
      *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v13) = v42;
      ++*(_QWORD *)(v7 + 16);
      v5 = v40;
      v8 = v41;
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char v51;
  char v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[32];
  __int128 v72;
  __int128 v73;
  _BYTE v74[64];
  _BYTE v75[19];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, Image.Resolved>();
  v51 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v49 = (_QWORD *)(v5 + 64);
    v50 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v47 = v3;
    v48 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
        if ((v51 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        v25 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v49;
        if (v25 >= v48)
          goto LABEL_33;
        v26 = v49[v25];
        ++v8;
        if (!v26)
        {
          v8 = v25 + 1;
          if (v25 + 1 >= v48)
            goto LABEL_33;
          v26 = v49[v8];
          if (!v26)
          {
            v27 = v25 + 2;
            if (v27 >= v48)
            {
LABEL_33:
              if ((v51 & 1) == 0)
              {
                result = swift_release();
                v3 = v47;
                goto LABEL_40;
              }
              v46 = 1 << *(_BYTE *)(v5 + 32);
              if (v46 >= 64)
                bzero(v49, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v49 = -1 << v46;
              v3 = v47;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v26 = v49[v27];
            if (!v26)
            {
              while (1)
              {
                v8 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_42;
                if (v8 >= v48)
                  goto LABEL_33;
                v26 = v49[v8];
                ++v27;
                if (v26)
                  goto LABEL_22;
              }
            }
            v8 = v27;
          }
        }
LABEL_22:
        v11 = (v26 - 1) & v26;
        v16 = __clz(__rbit64(v26)) + (v8 << 6);
        if ((v51 & 1) != 0)
        {
LABEL_10:
          v17 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
          v18 = *(_QWORD *)(v5 + 56) + 184 * v16;
          v65 = *(_QWORD *)v18;
          v62 = *(_BYTE *)(v18 + 8);
          v19 = *(_QWORD *)(v18 + 32);
          v56 = *(_BYTE *)(v18 + 40);
          v20 = *(_BYTE *)(v18 + 60);
          v54 = *(_OWORD *)(v18 + 64);
          v55 = *(_OWORD *)(v18 + 44);
          v53 = *(_OWORD *)(v18 + 80);
          v52 = *(_BYTE *)(v18 + 96);
          v21 = *(_BYTE *)(v18 + 97);
          v22 = *(_BYTE *)(v18 + 98);
          v23 = *(_BYTE *)(v18 + 99);
          v58 = *(_OWORD *)(v18 + 104);
          v59 = *(_OWORD *)(v18 + 16);
          v57 = *(_OWORD *)(v18 + 120);
          v60 = *(_OWORD *)(v18 + 136);
          v61 = *(_BYTE *)(v18 + 152);
          v24 = *(_BYTE *)(v18 + 160);
          v68 = *(_QWORD *)(v18 + 168);
          v66 = *(_DWORD *)(v18 + 156);
          v67 = *(_WORD *)(v18 + 176);
          v63 = *(_BYTE *)(v18 + 153);
          v64 = *(_BYTE *)(v18 + 178);
          goto LABEL_24;
        }
      }
      v17 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v28 = *(_QWORD *)(v5 + 56) + 184 * v16;
      v30 = *(_OWORD *)(v28 + 32);
      v29 = *(_OWORD *)(v28 + 48);
      v31 = *(_OWORD *)v28;
      v70 = *(_OWORD *)(v28 + 16);
      *(_OWORD *)v71 = v30;
      v69 = v31;
      v32 = *(_OWORD *)(v28 + 112);
      v34 = *(_OWORD *)(v28 + 64);
      v33 = *(_OWORD *)(v28 + 80);
      *(_OWORD *)v74 = *(_OWORD *)(v28 + 96);
      *(_OWORD *)&v74[16] = v32;
      v72 = v34;
      v73 = v33;
      v36 = *(_OWORD *)(v28 + 144);
      v35 = *(_OWORD *)(v28 + 160);
      v38 = *(_OWORD *)(v28 + 128);
      *(_DWORD *)&v75[15] = *(_DWORD *)(v28 + 175);
      v37 = *(_DWORD *)&v75[15];
      *(_OWORD *)&v74[48] = v36;
      *(_OWORD *)v75 = v35;
      *(_OWORD *)&v74[32] = v38;
      *(_OWORD *)&v71[16] = v29;
      v68 = *((_QWORD *)&v35 + 1);
      v66 = HIDWORD(v36);
      v67 = v37 >> 8;
      v24 = v35;
      v63 = BYTE9(v36);
      v64 = HIBYTE(v37);
      v57 = *(_OWORD *)&v74[24];
      v58 = *(_OWORD *)&v74[8];
      v65 = v69;
      v61 = BYTE8(v36);
      v62 = BYTE8(v69);
      v59 = v70;
      v60 = *(_OWORD *)&v74[40];
      v19 = *(_QWORD *)v71;
      v56 = v71[8];
      v20 = BYTE12(v29);
      v54 = v34;
      v55 = *(_OWORD *)&v71[12];
      v53 = v73;
      v52 = v74[0];
      v21 = v74[1];
      v22 = v74[2];
      v23 = v74[3];
      outlined retain of Image.Resolved((uint64_t)&v69);
LABEL_24:
      result = static Hasher._hash(seed:_:)();
      v39 = -1 << *(_BYTE *)(v7 + 32);
      v40 = result & ~v39;
      v41 = v40 >> 6;
      if (((-1 << v40) & ~*(_QWORD *)(v12 + 8 * (v40 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v12 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v42 = 0;
        v43 = (unint64_t)(63 - v39) >> 6;
        do
        {
          if (++v41 == v43 && (v42 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v44 = v41 == v43;
          if (v41 == v43)
            v41 = 0;
          v42 |= v44;
          v45 = *(_QWORD *)(v12 + 8 * v41);
        }
        while (v45 == -1);
        v13 = __clz(__rbit64(~v45)) + (v41 << 6);
      }
      LOBYTE(v69) = v20;
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v17;
      v14 = *(_QWORD *)(v7 + 56) + 184 * v13;
      *(_QWORD *)v14 = v65;
      *(_BYTE *)(v14 + 8) = v62;
      *(_OWORD *)(v14 + 16) = v59;
      *(_QWORD *)(v14 + 32) = v19;
      *(_BYTE *)(v14 + 40) = v56;
      *(_OWORD *)(v14 + 44) = v55;
      *(_BYTE *)(v14 + 60) = v20;
      *(_OWORD *)(v14 + 64) = v54;
      *(_OWORD *)(v14 + 80) = v53;
      *(_BYTE *)(v14 + 96) = v52;
      *(_BYTE *)(v14 + 97) = v21;
      *(_BYTE *)(v14 + 98) = v22;
      *(_BYTE *)(v14 + 99) = v23;
      *(_OWORD *)(v14 + 104) = v58;
      *(_OWORD *)(v14 + 120) = v57;
      *(_OWORD *)(v14 + 136) = v60;
      *(_BYTE *)(v14 + 152) = v61;
      *(_BYTE *)(v14 + 153) = v63;
      *(_DWORD *)(v14 + 156) = v66;
      *(_BYTE *)(v14 + 160) = v24;
      *(_QWORD *)(v14 + 168) = v68;
      *(_WORD *)(v14 + 176) = v67;
      *(_BYTE *)(v14 + 178) = v64;
      ++*(_QWORD *)(v7 + 16);
      v5 = v50;
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AdaptableTabBarPlacement, Visibility>, (void (*)(void))lazy protocol witness table accessor for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = a2;
    v8 = 0;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_31;
        v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_31;
          v18 = v31[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v12)
                  goto LABEL_31;
                v18 = v31[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v16);
      v21 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v14) = v20;
      *(_BYTE *)(*(_QWORD *)(v7 + 56) + v14) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>, (void (*)(uint64_t))type metadata accessor for (_ViewList_ID.Canonical, AccessibilitySectionContext?), (void (*)(void))lazy protocol witness table accessor for type UniqueID and conformance UniqueID);
  v36 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v34)
          goto LABEL_33;
        v21 = v35[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v34)
            goto LABEL_33;
          v21 = v35[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v34)
            {
LABEL_33:
              if ((v36 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v35 = -1 << v33;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v35[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v34)
                  goto LABEL_33;
                v21 = v35[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = *(_QWORD *)(v5 + 56) + 24 * v19;
      v29 = *(_QWORD *)v28;
      v30 = *(_QWORD *)(v28 + 8);
      v31 = *(unsigned __int16 *)(v28 + 20);
      v32 = *(unsigned int *)(v28 + 16);
      if ((v36 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = *(_QWORD *)(v7 + 56) + 24 * v16;
      *(_QWORD *)v17 = v29;
      *(_QWORD *)(v17 + 8) = v30;
      *(_WORD *)(v17 + 20) = (v32 | (unint64_t)(v31 << 32)) >> 32;
      *(_DWORD *)(v17 + 16) = v32;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, _ScrollableLayoutProxy.SizeRecord>();
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_22;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v40 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = *(_QWORD *)(v40 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = *(_QWORD *)(v40 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v13 >= v39)
              goto LABEL_34;
            v24 = *(_QWORD *)(v40 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v13 = v25;
      }
    }
LABEL_21:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      v45 = *(_QWORD *)(v26 + 32);
      v43 = v27;
      v44 = v28;
    }
    else
    {
      outlined init with copy of AnyHashable(v26, (uint64_t)&v43);
    }
    v29 = *(_QWORD *)(v5 + 56) + 40 * v21;
    v41 = *(_OWORD *)(v29 + 8);
    v42 = *(_OWORD *)(v29 + 24);
    v30 = *(_DWORD *)v29;
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v31 = -1 << *(_BYTE *)(v7 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v11 + 8 * (v32 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v11 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v11 + 8 * v33);
      }
      while (v37 == -1);
      v14 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = 40 * v14;
    v16 = *(_QWORD *)(v7 + 48) + v15;
    v17 = v43;
    v18 = v44;
    *(_QWORD *)(v16 + 32) = v45;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    v19 = *(_QWORD *)(v7 + 56) + v15;
    *(_DWORD *)v19 = v30;
    *(_OWORD *)(v19 + 8) = v41;
    *(_OWORD *)(v19 + 24) = v42;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t i;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  __int128 v32[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, AnyAccessibilityPropertiesEntry>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = v3;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_35;
        v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_35;
          v18 = v31[v8];
          if (!v18)
          {
            v8 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_35;
            v18 = v31[v8];
            if (!v18)
            {
              v8 = v17 + 3;
              if (v17 + 3 >= v12)
              {
LABEL_35:
                if ((a2 & 1) == 0)
                {
                  result = swift_release();
                  v3 = v30;
                  goto LABEL_42;
                }
                v29 = 1 << *(_BYTE *)(v5 + 32);
                if (v29 >= 64)
                  bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v31 = -1 << v29;
                v3 = v30;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v18 = v31[v8];
              for (i = v17 + 3; !v18; ++i)
              {
                v8 = i + 1;
                if (__OFADD__(i, 1))
                  goto LABEL_44;
                if (v8 >= v12)
                  goto LABEL_35;
                v18 = v31[v8];
              }
            }
          }
        }
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v16);
      if ((a2 & 1) != 0)
        outlined init with take of OptionalBinaryInteger(v21, (uint64_t)v32);
      else
        outlined init with copy of TableColumnList((uint64_t)v21, (uint64_t)v32);
      result = static Hasher._hash(seed:_:)();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v20;
      result = outlined init with take of OptionalBinaryInteger(v32, *(_QWORD *)(v7 + 56) + 40 * v14);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_42:
  *v3 = v7;
  return result;
}

void type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>)
  {
    type metadata accessor for NSAttributedStringKey(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
  }
}

uint64_t EnvironmentValues.isPresentingContextMenu.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void DisplayLink.displayLinkTimer(_:)(void *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  void *v14;
  double *v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t (**v22)();
  uint64_t v23;
  uint64_t v24;
  id v25;
  int v26;
  id v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  uint64_t v47;
  id v48;
  void *v49;
  char *v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  Swift::Double v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;

  v2 = v1;
  ObjectType = swift_getObjectType();
  static Update.lock()();
  v5 = OBJC_IVAR____TtC7SwiftUI11DisplayLink_currentThread;
  v6 = OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread;
  v7 = v1[OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread];
  if (v1[OBJC_IVAR____TtC7SwiftUI11DisplayLink_currentThread] == v7)
  {
    if (*(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link])
    {
      objc_msgSend(a1, sel_timestamp);
      v9 = v8;
      objc_msgSend(a1, sel_targetTimestamp);
      v11 = v10;
      v12 = OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate;
      v13 = *(double *)&v1[OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate];
      if (v13 + -0.00416666667 < v9)
      {
        v14 = a1;
        v15 = (double *)&v1[OBJC_IVAR____TtC7SwiftUI11DisplayLink_currentUpdate];
        *v15 = v9;
        *((_BYTE *)v15 + 8) = 0;
        static Time.infinity.getter();
        *(_QWORD *)&v1[v12] = v69;
        v16 = &v1[OBJC_IVAR____TtC7SwiftUI11DisplayLink_host];
        v17 = MEMORY[0x18D760234](&v1[OBJC_IVAR____TtC7SwiftUI11DisplayLink_host]);
        if (v17)
        {
          v18 = (void *)v17;
          v19 = *((_QWORD *)v16 + 1);
          v20 = swift_getObjectType();
          v68 = v11;
          *(double *)&v69 = v9;
          (*(void (**)(__int128 *, uint64_t *, _QWORD, uint64_t, uint64_t))(v19 + 32))(&v69, &v68, v2[v5], v20, v19);

        }
        *v15 = 0.0;
        *((_BYTE *)v15 + 8) = 1;
        v13 = *(double *)&v2[v12];
        a1 = v14;
      }
      static Time.infinity.getter();
      if (v13 == *(double *)&v69)
      {
        if ((v2[v6] & 1) == 0)
        {
          if ((v2[v5] & 1) == 0)
            goto LABEL_36;
          v21 = *(void **)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link];
          if (!v21)
            goto LABEL_36;
          v64 = (void **)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link];
          goto LABEL_18;
        }
        v2[v6] = 0;
        *(double *)&v2[v12] = v9;
      }
    }
    v7 = v2[v6];
    if (v7 == v2[v5])
      goto LABEL_36;
  }
  v21 = *(void **)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link];
  if (!v21)
    goto LABEL_36;
  v64 = (void **)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link];
  if (!v7)
  {
LABEL_18:
    v25 = v21;
LABEL_19:
    v26 = v2[v6];
    if (v26 != v2[v5])
    {
      if ((v26 & 1) == 0)
        goto LABEL_32;
      v62 = v6;
      v63 = v5;
      if (static DisplayLink.asyncRunloop)
      {
        v27 = (id)static DisplayLink.asyncRunloop;
        v28 = 1;
        goto LABEL_33;
      }
      goto LABEL_43;
    }
    goto LABEL_35;
  }
  v61 = a1;
  v22 = off_1EDE14000;
  static DisplayLink.asyncPending = 1;
  v23 = static DisplayLink.asyncRunloop;
  v60 = v21;
  if (v23)
  {
LABEL_14:
    v25 = v60;
    a1 = v61;
    goto LABEL_19;
  }
  v65 = ObjectType;
  v66 = 0x8000000187BD8580;
  v29 = &unk_1ECDFA000;
  while (static DisplayLink.asyncThread)
  {
LABEL_24:
    static Update.wait()();
    *((_BYTE *)v22 + 1136) = 1;
    if (v29[490])
      goto LABEL_14;
  }
  v69 = 0u;
  v70 = 0u;
  v68 = ObjectType;
  type metadata accessor for Decodable & Encodable.Type(0, &lazy cache variable for type metadata for DisplayLink.Type, v24, (uint64_t (*)(uint64_t))type metadata accessor for DisplayLink, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEECC0]);
  v30 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  v31 = *((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v32 = __swift_project_boxed_opaque_existential_1(&v69, *((uint64_t *)&v70 + 1));
    v67 = &v59;
    v33 = v29;
    v34 = v6;
    v35 = *(_QWORD *)(v31 - 8);
    v36 = MEMORY[0x1E0C80A78](v32, v32);
    v38 = v5;
    v39 = (char *)&v59 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v35 + 16))(v39, v36);
    v40 = _bridgeAnythingToObjectiveC<A>(_:)();
    v41 = *(void (**)(char *, uint64_t))(v35 + 8);
    v6 = v34;
    v29 = v33;
    v42 = v39;
    v5 = v38;
    v41(v42, v31);
    v22 = off_1EDE14000;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
  }
  else
  {
    v40 = 0;
  }
  v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3978]), sel_initWithTarget_selector_object_, v30, sel_asyncThreadWithArg_, v40);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  objc_msgSend(v43, sel_setQualityOfService_, 33);
  v44 = (void *)MEMORY[0x18D75CC88](0xD00000000000001FLL, v66);
  objc_msgSend(v43, sel_setName_, v44);

  if (_NSThreadStart(v43))
  {
    v45 = (void *)static DisplayLink.asyncThread;
    static DisplayLink.asyncThread = (uint64_t)v43;

    ObjectType = v65;
    goto LABEL_24;
  }

  v2[v6] = 0;
  v25 = v60;
  a1 = v61;
  if ((v2[v5] & 1) == 0)
  {
LABEL_35:

LABEL_36:
    if (*(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link])
    {
      v58 = *(double *)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate];
      static Time.infinity.getter();
      if (v58 == *(double *)&v69 && v2[v6] == v2[v5])
        objc_msgSend(a1, sel_setPaused_, 1);
    }
    else
    {
      objc_msgSend(a1, sel_invalidate);
    }
    static Update.unlock()();
    return;
  }
LABEL_32:
  v62 = v6;
  v63 = v5;
  v27 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
  v28 = 0;
LABEL_33:
  v46 = objc_msgSend((id)objc_opt_self(), sel_currentRunLoop);
  v47 = *MEMORY[0x1E0C99860];
  objc_msgSend(v25, sel_removeFromRunLoop_forMode_, v46, *MEMORY[0x1E0C99860]);

  v48 = objc_msgSend(v25, sel_display);
  v49 = (void *)objc_opt_self();
  v50 = v2;
  v51 = objc_msgSend(v49, sel_displayLinkWithDisplay_target_selector_, v48, v50, sel_displayLinkTimer_);

  if (v51)
  {
    v52 = v25;
    objc_msgSend(v51, sel_addToRunLoop_forMode_, v27, v47);
    v53 = *v64;
    *v64 = v51;
    v54 = v51;

    v55 = *(double *)&v50[OBJC_IVAR____TtC7SwiftUI11DisplayLink_interval];
    v56 = OBJC_IVAR____TtC7SwiftUI11DisplayLink_reasons;
    v57 = *(_QWORD *)&v50[OBJC_IVAR____TtC7SwiftUI11DisplayLink_reasons];
    *(_QWORD *)&v50[OBJC_IVAR____TtC7SwiftUI11DisplayLink_interval] = 0;
    *(_QWORD *)&v50[v56] = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    DisplayLink.setFrameInterval(_:reasons:)(v57, v55);
    swift_bridgeObjectRelease();

    v6 = v62;
    v5 = v63;
    v2[v63] = v28;
    goto LABEL_36;
  }
  __break(1u);
LABEL_43:
  __break(1u);
}

uint64_t ActionDispatcherSubscriber.receive(_:)(uint64_t a1, uint64_t a2)
{
  ActionDispatcherSubscriber.respond(to:)(a1, a2);
  return static Subscribers.Demand.none.getter();
}

uint64_t ActionDispatcherSubscriber.respond(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD v21[2];
  uint64_t v22;

  v3 = v2;
  v5 = a1;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v13, v10);
  v14 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!pthread_main_np())
  {
    v21[1] = static os_log_type_t.fault.getter();
    v15 = static Log.runtimeIssuesLog.getter();
    v22 = v5;
    v16 = (void *)v15;
    os_log(_:dso:log:_:_:)();

    v5 = v22;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v6);
  v17 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v18 = (v12 + v17 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v6;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v19 + v17, v14, a2);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v19 + v18, v9, v6);
  onMainThread(do:)();
  return swift_release();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@out ())()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 48))();
}

void partial apply for closure #1 in SubscriptionView.Subscriber.updateValue()()
{
  type metadata accessor for SubscriptionView();
}

void sub_186E900D0()
{
  closure #1 in SubscriptionView.Subscriber.updateValue()();
}

void closure #1 in SubscriptionView.Subscriber.updateValue()()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v0);
  type metadata accessor for SubscriptionView();
}

uint64_t sub_186E901C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[96];

  v9 = *(_QWORD *)(a1 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = &v20[-v12];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v9 + 16))(&v20[-v12], v6, a1, v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v7 - 120), v2);
  v14 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v15 = (v10 + v14 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v16 = (char *)swift_allocObject();
  v17 = *(_QWORD *)(v7 - 136);
  *((_QWORD *)v16 + 2) = v4;
  *((_QWORD *)v16 + 3) = v17;
  v18 = *(_QWORD *)(v7 - 128);
  *((_QWORD *)v16 + 4) = *(_QWORD *)(v7 - 144);
  *((_QWORD *)v16 + 5) = v18;
  (*(void (**)(char *, _BYTE *, uint64_t))(v9 + 32))(&v16[v14], v13, a1);
  (*(void (**)(char *, uint64_t, _QWORD))(v3 + 32))(&v16[v15], v5, *(_QWORD *)(v7 - 152));
  static Update.enqueueAction(_:)();
  return swift_release();
}

void applyNode #1 (start:style:node:transform:) in _IncrementalLayout_Children.applyNodes(from:style:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v3[208];

  outlined init with copy of _ViewList_Node(a3, (uint64_t)v3);
  __asm { BR              X10 }
}

uint64_t sub_186E90328()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;
  unsigned __int8 v12;

  v6 = *v3;
  v7 = *((_DWORD *)v3 + 2);
  outlined init with copy of _ViewList_Node(v4, v5 - 184);
  v8 = *v2;
  v9 = *((_DWORD *)v3 + 28);
  v10 = *((_BYTE *)v3 + 116);
  v11 = *((_BYTE *)v3 + 117);
  v12 = *((_BYTE *)v3 + 118);
  *(_QWORD *)(v5 - 200) = v6;
  *(_DWORD *)(v5 - 192) = v7;
  *(_QWORD *)(v5 - 96) = v8;
  *(_DWORD *)(v5 - 88) = v9;
  *(_BYTE *)(v5 - 84) = v10;
  *(_BYTE *)(v5 - 83) = v11;
  *(_WORD *)(v5 - 82) = v12;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined destroy of _ViewList_Node(v5 - 288);
  *(_BYTE *)(v5 - 288) = 0;
  v1(v0, v5 - 200, v5 - 288);
  outlined destroy of _IncrementalLayout_Children.Node(v5 - 200);
  return (*(_BYTE *)(v5 - 288) ^ 1) & 1;
}

void sub_186E90498()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined destroy of _IncrementalLayout_Children.Node(uint64_t a1)
{
  destroy for _IncrementalLayout_Children.Node(a1);
  return a1;
}

uint64_t destroy for _IncrementalLayout_Children.Node(uint64_t a1)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(a1 + 119);
  if (v2 >= 2)
    v2 = *(_DWORD *)a1 + 2;
  if (v2 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    swift_release();
    switch(*(_BYTE *)(a1 + 101))
    {
      case 0:
        __swift_destroy_boxed_opaque_existential_1(a1 + 16);
        return swift_bridgeObjectRelease();
      case 1:
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(a1 + 48);
        goto LABEL_9;
      case 2:
        goto LABEL_9;
      case 3:
        swift_bridgeObjectRelease();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        return swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
}

BOOL partial apply for specialized closure #1 in StackPlacement.place(children:from:position:stopping:style:)(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  return specialized closure #1 in StackPlacement.place(children:from:position:stopping:style:)(a1, a2, a3);
}

{
  return specialized closure #1 in StackPlacement.place(children:from:position:stopping:style:)(a1, a2, a3);
}

{
  return specialized closure #1 in StackPlacement.place(children:from:position:stopping:style:)(a1, a2, a3);
}

{
  return specialized closure #1 in StackPlacement.place(children:from:position:stopping:style:)(a1, a2, a3);
}

uint64_t outlined init with copy of _IncrementalLayout_Children.Node(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _IncrementalLayout_Children.Node(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for _IncrementalLayout_Children.Node(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned __int8 *)(a2 + 119);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 != 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    v6 = *(unsigned __int8 *)(a2 + 101);
    swift_retain();
    __asm { BR              X9 }
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 119) = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t partial apply for closure #1 in closure #1 in IncrementalLayoutComputer.Engine.sizeThatFits(_:)@<X0>(double *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in IncrementalLayoutComputer.Engine.sizeThatFits(_:)(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(unsigned __int8 *)(v1 + 72), *(_QWORD *)(v1 + 80), *(unsigned __int8 *)(v1 + 88), a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t closure #1 in closure #1 in IncrementalLayoutComputer.Engine.sizeThatFits(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, double *a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v11;
  int v12;
  unint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  double *v33;
  _DWORD v34[4];
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  _DWORD v39[32];

  v31 = a8;
  v30 = a7;
  v29 = a6;
  v28 = a5;
  v32 = a4;
  v11 = a3;
  v12 = a2;
  v33 = a9;
  v14 = HIDWORD(a2);
  v27 = HIDWORD(a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v17);
  v19 = (char *)&v26 - v18;
  v39[0] = v12;
  v39[1] = v14;
  v39[2] = v11;
  v20 = SizeAndSpacingContext.context.getter();
  IncrementalLayoutViewCache.children(context:)(v20, (uint64_t)v39);
  v35 = v28;
  v36 = v29 & 1;
  v37 = v30;
  v38 = v31 & 1;
  v34[0] = v12;
  v34[1] = v14;
  v34[2] = v11;
  v34[3] = v27;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(AssociatedTypeWitness, AssociatedTypeWitness);
  v21 = (*(double (**)(uint64_t *, _DWORD *, _DWORD *, char *, uint64_t, uint64_t))(a11 + 40))(&v35, v39, v34, v19, a10, a11);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, AssociatedTypeWitness);
  result = outlined destroy of _IncrementalLayout_Children((uint64_t)v39);
  v25 = v33;
  *v33 = v21;
  *((_QWORD *)v25 + 1) = v23;
  return result;
}

uint64_t outlined destroy of _IncrementalLayout_Children(uint64_t a1)
{
  destroy for _IncrementalLayout_Children(a1);
  return a1;
}

uint64_t destroy for _IncrementalLayout_Children(uint64_t a1)
{
  swift_release();
  switch(*(_BYTE *)(a1 + 101))
  {
    case 0:
      __swift_destroy_boxed_opaque_existential_1(a1 + 16);
      return swift_bridgeObjectRelease();
    case 1:
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
      goto LABEL_5;
    case 2:
      goto LABEL_5;
    case 3:
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t destroy for _IncrementalStack_State(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = ~v4;
  v6 = ((v4 + 16) & ~v4) + *(_QWORD *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84))
  {
    if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v3 + 48))((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v4 + 8) & v5, *(unsigned int *)(v3 + 84), AssociatedTypeWitness))LABEL_13:(*(void (**)(unint64_t, uint64_t))(v3 + 8))((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v4 + 8) & v5, AssociatedTypeWitness);
  }
  else
  {
    if (!*(_BYTE *)(a1 + v6))
      goto LABEL_13;
    v7 = (*(unsigned __int8 *)(a1 + v6) - 1) << (8 * v6);
    if (v6 > 3)
      v7 = 0;
    if ((_DWORD)v6)
    {
      if (v6 <= 3)
        v8 = ((v4 + 16) & ~(_DWORD)v4) + *(_DWORD *)(v3 + 64);
      else
        v8 = 4;
      __asm { BR              X11 }
    }
    if (v7 == -1)
      goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t IncrementalLayoutViewCache.children(context:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  int v7;
  uint64_t InputValue;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v3 = v2;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    GraphHost.graph.getter();
    TransactionID.init(graph:)();
    swift_release();
    Strong = v11;
  }
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 184) != Strong)
  {
    *(_QWORD *)(v3 + 184) = Strong;
    ++*(_DWORD *)(v3 + 192);
  }
  v7 = *(_DWORD *)(v3 + 136);
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  InputValue = AGGraphGetInputValue();
  outlined init with copy of TableColumnList(InputValue, a2 + 16);
  *(_DWORD *)(a2 + 56) = v7;
  *(_BYTE *)(a2 + 60) = 0;
  *(_BYTE *)(a2 + 101) = 0;
  swift_retain();
  result = _ViewList_SublistTransform.init()();
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = a1;
  *(_QWORD *)(a2 + 104) = v10;
  *(_DWORD *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 116) = 1;
  *(_WORD *)(a2 + 117) = 0;
  return result;
}

uint64_t _IncrementalLayoutViewCache.copyState<A>(type:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  _QWORD v10[7];

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 328);
  v10[2] = *(_QWORD *)(*v2 + 320);
  v10[3] = a2;
  v10[4] = v5;
  v6 = (uint64_t)v2 + *(_QWORD *)(v4 + 344);
  swift_beginAccess();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)partial apply for closure #1 in _IncrementalLayoutViewCache.copyState<A>(type:), (uint64_t)v10, AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], a2, MEMORY[0x1E0DEDD18], v8);
  return swift_endAccess();
}

uint64_t protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyVStackLayout(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD))
{
  return a7(*a1);
}

uint64_t outlined init with copy of _IncrementalLayout_Children(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _IncrementalLayout_Children(a2, a1);
  return a2;
}

void initializeWithCopy for _IncrementalLayout_Children(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v2 = *(unsigned __int8 *)(a2 + 101);
  swift_retain();
  __asm { BR              X9 }
}

uint64_t sub_186E90F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v4 = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(v0 + 40) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(v3, v2);
  *(_DWORD *)(v0 + 56) = *(_DWORD *)(v1 + 56);
  *(_BYTE *)(v0 + 60) = *(_BYTE *)(v1 + 60);
  *(_BYTE *)(v0 + 101) = 0;
  *(_QWORD *)(v0 + 104) = *(_QWORD *)(v1 + 104);
  *(_DWORD *)(v0 + 112) = *(_DWORD *)(v1 + 112);
  *(_DWORD *)(v0 + 115) = *(_DWORD *)(v1 + 115);
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t outlined retain of _IncrementalStack_State<LazyVStackLayout>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyVGridLayout(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD))specialized IncrementalStack<>.sizeThatFits(proposedSize:children:context:state:));
}

uint64_t protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyHGridLayout(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD))
{
  return a7(*a1);
}

uint64_t specialized IncrementalStack<>.sizeThatFits(proposedSize:children:context:state:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t updated;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t result;
  __int128 *Value;
  __int128 v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  char v50;
  char v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  double v55;
  double v56;
  BOOL v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  int v64;
  double v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  _BYTE v77[16];
  _QWORD v78[13];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  _BYTE v84[25];

  v64 = HIDWORD(a7);
  v14 = a4;
  *(_QWORD *)&v69 = a1;
  BYTE8(v69) = a2 & 1;
  *(_QWORD *)&v70 = a3;
  BYTE8(v70) = a4 & 1;
  v15 = _ProposedSize.subscript.getter();
  v17 = v16;
  outlined init with copy of _IncrementalLayout_Children(a5, (uint64_t)v77);
  if ((v17 & 1) != 0)
  {
    v60 = a5;
    v18 = *(_QWORD *)(a9 + 16);
    *(_QWORD *)&v67 = 0;
    if (v18)
    {
      v58 = v14;
      v59 = a8;
      type metadata accessor for AGGraphRef(0);
      swift_bridgeObjectRetain_n();
      v19 = 0;
      v20 = 32;
      do
      {
        v21 = *(_OWORD *)(a9 + v20 + 16);
        v82 = *(_OWORD *)(a9 + v20);
        v83 = v21;
        *(_OWORD *)v84 = *(_OWORD *)(a9 + v20 + 32);
        *(_OWORD *)&v84[9] = *(_OWORD *)(a9 + v20 + 41);
        updated = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()();
        if ((updated & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v15 = 0;
          a8 = v59;
          a5 = v60;
          v14 = v58;
          goto LABEL_13;
        }
        v81 = v19;
        MEMORY[0x1E0C80A78](updated, v23);
        v80 = v78[11];
        v24 = outlined init with copy of _ViewList_Node((uint64_t)v78, (uint64_t)&v69);
        v79 = 2;
        MEMORY[0x1E0C80A78](v24, v25);
        swift_bridgeObjectRetain();
        _ViewList_Node.applyNodes(from:style:transform:to:)();
        outlined destroy of _ViewList_Node((uint64_t)&v69);
        swift_bridgeObjectRelease();
        static Semantics.v5.getter();
        if ((isLinkedOnOrAfter(_:)() & 1) == 0)
          break;
        ++v19;
        v20 += 64;
      }
      while (v18 != v19);
      swift_bridgeObjectRelease();
      a8 = v59;
      v14 = v58;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    a5 = v60;
    v15 = v67;
LABEL_13:
    outlined destroy of _IncrementalLayout_Children((uint64_t)v77);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of _IncrementalLayout_Children((uint64_t)v77);
  }
  v79 = v15;
  *(_QWORD *)&v69 = v15;
  v26 = specialized HVGrid.minorGeometry(updatingSize:)((double *)&v69, a9);
  v28 = v27;
  if (v26 < 1 || (v29 = *(double *)&v69, *(double *)&v69 <= 0.0))
  {
    swift_bridgeObjectRelease();
    return specialized IncrementalStack<>.log(_:)((uint64_t)&v79, 0xD000000000000036, 0x8000000187BD5FE0);
  }
  v30 = v26;
  v31 = v14;
  v32 = *(_OWORD *)(a8 + 64);
  v33 = *(_OWORD *)(a8 + 96);
  v74 = *(_OWORD *)(a8 + 80);
  v75 = v33;
  v76 = *(_QWORD *)(a8 + 112);
  v34 = *(_OWORD *)(a8 + 16);
  v69 = *(_OWORD *)a8;
  v70 = v34;
  v35 = *(_OWORD *)(a8 + 48);
  v71 = *(_OWORD *)(a8 + 32);
  v72 = v35;
  v73 = v32;
  if (*MEMORY[0x1E0CFED28] == v64)
  {
    outlined retain of _IncrementalStack_State<LazyHGridLayout>(a8);
  }
  else
  {
    Value = (__int128 *)AGGraphGetValue();
    v38 = Value[1];
    v67 = *Value;
    v68 = v38;
    v39 = outlined retain of _IncrementalStack_State<LazyHGridLayout>(a8);
    MEMORY[0x18D75BE3C](v39);
    v41 = *(double *)(a8 + 96);
    if (v41 > 0.0 && v40 > 0.0 && vabdd_f64(v41, v40) >= 0.01)
    {
      v42 = *(_QWORD *)(a8 + 112);
      v80 = *(_QWORD *)(a8 + 104);
      v81 = v42;
      v43 = MEMORY[0x1E0DEE9D8];
      v44 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      outlined release of _IncrementalLayout_Placements((uint64_t)&v80);
      *((_QWORD *)&v75 + 1) = v44;
      v45 = specialized Dictionary.init(dictionaryLiteral:)(v43);
      outlined release of _IncrementalLayout_Placements((uint64_t)&v81);
      v76 = v45;
    }
  }
  v65 = 0.0;
  v66 = 0;
  specialized IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(&v65, &v66, v30, v28, a5, (uint64_t)&v69, a9, a10, v29, a11, a12 & 1, (a12 & 0xFFFFFFFF00000001) >> 32);
  v46 = EstimationState.average.getter(*((uint64_t *)&v75 + 1), v76);
  v48 = v47;
  v49 = *(double *)&v46;
  v51 = v50;
  *(_QWORD *)&v67 = 2 * v30;
  result = _ViewList_Node.estimatedCount(style:)();
  if (__OFSUB__(result, v66))
  {
    __break(1u);
    goto LABEL_36;
  }
  v52 = (result - v66) & ~((result - v66) >> 63);
  if (v30 != 1)
  {
    v53 = __OFADD__(v52, v30);
    v54 = v52 + v30;
    if (!v53)
    {
      v52 = (v54 - 1) / v30;
      goto LABEL_27;
    }
LABEL_36:
    __break(1u);
    return result;
  }
LABEL_27:
  v55 = v49;
  if ((v51 & 1) != 0)
    v55 = 0.0;
  v56 = v65 + (v48 + v55) * (double)v52;
  if (v52)
    v57 = v66 == 0;
  else
    v57 = 0;
  if (!v57)
    v55 = 0.0;
  v65 = v56 - v55;
  specialized IncrementalStack<>.log(_:)((uint64_t)&v79, (uint64_t)&v65, 0xD000000000000036, 0x8000000187BD5FE0);
  *(_QWORD *)&v67 = a1;
  BYTE8(v67) = a2 & 1;
  *(_QWORD *)&v68 = a3;
  BYTE8(v68) = v31 & 1;
  _ProposedSize.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t updated;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t result;
  __int128 *Value;
  __int128 v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  char v50;
  char v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  double v55;
  double v56;
  BOOL v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  int v64;
  double v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  _BYTE v77[16];
  _QWORD v78[13];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  _BYTE v84[25];

  v64 = HIDWORD(a7);
  v14 = a4;
  *(_QWORD *)&v69 = a1;
  BYTE8(v69) = a2 & 1;
  *(_QWORD *)&v70 = a3;
  BYTE8(v70) = a4 & 1;
  v15 = _ProposedSize.subscript.getter();
  v17 = v16;
  outlined init with copy of _IncrementalLayout_Children(a5, (uint64_t)v77);
  if ((v17 & 1) != 0)
  {
    v60 = a5;
    v18 = *(_QWORD *)(a9 + 16);
    *(_QWORD *)&v67 = 0;
    if (v18)
    {
      v58 = v14;
      v59 = a8;
      type metadata accessor for AGGraphRef(0);
      swift_bridgeObjectRetain_n();
      v19 = 0;
      v20 = 32;
      do
      {
        v21 = *(_OWORD *)(a9 + v20 + 16);
        v82 = *(_OWORD *)(a9 + v20);
        v83 = v21;
        *(_OWORD *)v84 = *(_OWORD *)(a9 + v20 + 32);
        *(_OWORD *)&v84[9] = *(_OWORD *)(a9 + v20 + 41);
        updated = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()();
        if ((updated & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v15 = 0;
          a8 = v59;
          a5 = v60;
          v14 = v58;
          goto LABEL_13;
        }
        v81 = v19;
        MEMORY[0x1E0C80A78](updated, v23);
        v80 = v78[11];
        v24 = outlined init with copy of _ViewList_Node((uint64_t)v78, (uint64_t)&v69);
        v79 = 2;
        MEMORY[0x1E0C80A78](v24, v25);
        swift_bridgeObjectRetain();
        _ViewList_Node.applyNodes(from:style:transform:to:)();
        outlined destroy of _ViewList_Node((uint64_t)&v69);
        swift_bridgeObjectRelease();
        static Semantics.v5.getter();
        if ((isLinkedOnOrAfter(_:)() & 1) == 0)
          break;
        ++v19;
        v20 += 64;
      }
      while (v18 != v19);
      swift_bridgeObjectRelease();
      a8 = v59;
      v14 = v58;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    a5 = v60;
    v15 = v67;
LABEL_13:
    outlined destroy of _IncrementalLayout_Children((uint64_t)v77);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of _IncrementalLayout_Children((uint64_t)v77);
  }
  v79 = v15;
  *(_QWORD *)&v69 = v15;
  v26 = specialized HVGrid.minorGeometry(updatingSize:)((double *)&v69, a9);
  v28 = v27;
  if (v26 < 1 || (v29 = *(double *)&v69, *(double *)&v69 <= 0.0))
  {
    swift_bridgeObjectRelease();
    return specialized IncrementalStack<>.log(_:)((uint64_t)&v79, 0xD000000000000036, 0x8000000187BD5F30);
  }
  v30 = v26;
  v31 = v14;
  v32 = *(_OWORD *)(a8 + 64);
  v33 = *(_OWORD *)(a8 + 96);
  v74 = *(_OWORD *)(a8 + 80);
  v75 = v33;
  v76 = *(_QWORD *)(a8 + 112);
  v34 = *(_OWORD *)(a8 + 16);
  v69 = *(_OWORD *)a8;
  v70 = v34;
  v35 = *(_OWORD *)(a8 + 48);
  v71 = *(_OWORD *)(a8 + 32);
  v72 = v35;
  v73 = v32;
  if (*MEMORY[0x1E0CFED28] == v64)
  {
    outlined retain of _IncrementalStack_State<LazyHGridLayout>(a8);
  }
  else
  {
    Value = (__int128 *)AGGraphGetValue();
    v38 = Value[1];
    v67 = *Value;
    v68 = v38;
    v39 = outlined retain of _IncrementalStack_State<LazyHGridLayout>(a8);
    MEMORY[0x18D75BE3C](v39);
    v41 = *(double *)(a8 + 96);
    if (v41 > 0.0 && v40 > 0.0 && vabdd_f64(v41, v40) >= 0.01)
    {
      v42 = *(_QWORD *)(a8 + 112);
      v80 = *(_QWORD *)(a8 + 104);
      v81 = v42;
      v43 = MEMORY[0x1E0DEE9D8];
      v44 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      outlined release of _IncrementalLayout_Placements((uint64_t)&v80);
      *((_QWORD *)&v75 + 1) = v44;
      v45 = specialized Dictionary.init(dictionaryLiteral:)(v43);
      outlined release of _IncrementalLayout_Placements((uint64_t)&v81);
      v76 = v45;
    }
  }
  v65 = 0.0;
  v66 = 0;
  specialized IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(&v65, &v66, v30, v28, a5, (uint64_t)&v69, a9, a10, v29, a11, a12 & 1, (a12 & 0xFFFFFFFF00000001) >> 32);
  v46 = EstimationState.average.getter(*((uint64_t *)&v75 + 1), v76);
  v48 = v47;
  v49 = *(double *)&v46;
  v51 = v50;
  *(_QWORD *)&v67 = 2 * v30;
  result = _ViewList_Node.estimatedCount(style:)();
  if (__OFSUB__(result, v66))
  {
    __break(1u);
    goto LABEL_36;
  }
  v52 = (result - v66) & ~((result - v66) >> 63);
  if (v30 != 1)
  {
    v53 = __OFADD__(v52, v30);
    v54 = v52 + v30;
    if (!v53)
    {
      v52 = (v54 - 1) / v30;
      goto LABEL_27;
    }
LABEL_36:
    __break(1u);
    return result;
  }
LABEL_27:
  v55 = v49;
  if ((v51 & 1) != 0)
    v55 = 0.0;
  v56 = v65 + (v48 + v55) * (double)v52;
  if (v52)
    v57 = v66 == 0;
  else
    v57 = 0;
  if (!v57)
    v55 = 0.0;
  v65 = v56 - v55;
  specialized IncrementalStack<>.log(_:)((uint64_t)&v79, (uint64_t)&v65, 0xD000000000000036, 0x8000000187BD5F30);
  *(_QWORD *)&v67 = a1;
  BYTE8(v67) = a2 & 1;
  *(_QWORD *)&v68 = a3;
  BYTE8(v68) = v31 & 1;
  _ProposedSize.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized HVGrid.minorGeometry(updatingSize:)(double *a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  int64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  int v23;
  char v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  double *v63;
  double *v64;
  double v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  double v69;

  v67 = *(_QWORD *)(a2 + 16);
  if (!v67)
    return 0;
  v3 = *a1;
  v4 = MEMORY[0x1E0DEE9D8];
  if ((~*(_QWORD *)a1 & 0x7FF0000000000000) == 0)
    return 0;
  v69 = *a1;
  v68 = 0;
  v7 = *(_QWORD *)(a2 + 16);
  v66 = a2 + 32;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  v10 = v3;
  do
  {
    v11 = *(double *)(a2 + v8 + 56);
    if (!*(_BYTE *)(a2 + v8 + 48))
    {
      v10 = v10 - *(double *)(a2 + v8 + 32);
      v69 = v10;
      if (v7 == 1)
        goto LABEL_7;
LABEL_13:
      if ((*(_BYTE *)(a2 + v8 + 64) & 1) != 0)
        result = defaultSpacingValue.getter();
      v10 = v10 - v11;
      v69 = v10;
      goto LABEL_7;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      return result;
    }
    v68 = v9;
    if (v7 != 1)
      goto LABEL_13;
LABEL_7:
    v8 += 64;
    --v7;
  }
  while (v7);
  v64 = a1;
  v65 = v3;
  if (*(_QWORD *)(v4 + 16) <= v67)
    v13 = v67;
  else
    v13 = *(_QWORD *)(v4 + 16);
  v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0, (char *)v4);
  swift_beginAccess();
  swift_beginAccess();
  v15 = 0;
  v16 = 0.0;
  do
  {
    v20 = v66 + (v15 << 6);
    v22 = *(double *)v20;
    v21 = *(double *)(v20 + 8);
    v23 = *(unsigned __int8 *)(v20 + 16);
    v24 = *(_BYTE *)(v20 + 56);
    if ((*(_BYTE *)(v20 + 32) & 1) != 0)
    {
      defaultSpacingValue.getter();
      v26 = v25;
      if ((v24 & 1) == 0)
        goto LABEL_26;
    }
    else
    {
      v26 = *(double *)(v20 + 24);
      if ((*(_BYTE *)(v20 + 56) & 1) == 0)
      {
LABEL_26:
        result = Alignment.fraction.getter();
        v28 = v27;
        v30 = v29;
        if (!v23)
          goto LABEL_42;
        goto LABEL_27;
      }
    }
    lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment();
    swift_bridgeObjectRetain();
    AlignmentGuide.fraction.getter();
    UnitPoint.init(_:in:by:)();
    v28 = v37;
    v30 = v38;
    result = swift_bridgeObjectRelease();
    if (!v23)
    {
LABEL_42:
      v40 = *((_QWORD *)v14 + 2);
      v39 = *((_QWORD *)v14 + 3);
      if (v40 >= v39 >> 1)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v14);
      *((_QWORD *)v14 + 2) = v40 + 1;
      v41 = &v14[32 * v40];
      *((double *)v41 + 4) = v16;
      v17 = v22;
      *((double *)v41 + 5) = v22;
      *((_QWORD *)v41 + 6) = v28;
      *((_QWORD *)v41 + 7) = v30;
      goto LABEL_21;
    }
LABEL_27:
    v31 = v22;
    if (v23 == 1)
    {
      if (v22 > v21)
        goto LABEL_81;
      if (v10 < 0.0)
        v32 = 0.0;
      else
        v32 = v10;
      v33 = v32 / (double)v9;
      if (v33 >= v22)
        v31 = v33;
      if (v31 <= v21)
        v17 = v31;
      else
        v17 = v21;
      v35 = *((_QWORD *)v14 + 2);
      v34 = *((_QWORD *)v14 + 3);
      if (v35 >= v34 >> 1)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v14);
      *((_QWORD *)v14 + 2) = v35 + 1;
      v36 = &v14[32 * v35];
      *((double *)v36 + 4) = v16;
      *((double *)v36 + 5) = v17;
      *((_QWORD *)v36 + 6) = v28;
      *((_QWORD *)v36 + 7) = v30;
    }
    else
    {
      if (v10 < 0.0)
        v42 = 0.0;
      else
        v42 = v10;
      v43 = v42 / (double)v9;
      v44 = floor((v43 - v22) / (v26 + v22));
      if (v44 < 0.0)
        v45 = 1.0;
      else
        v45 = v44 + 1.0;
      if ((~*(_QWORD *)&v45 & 0x7FF0000000000000) == 0)
        goto LABEL_82;
      if (v45 <= -9.22337204e18)
        goto LABEL_83;
      if (v45 >= 9.22337204e18)
        goto LABEL_84;
      v46 = (uint64_t)v45;
      if (__OFSUB__((uint64_t)v45, 1))
        goto LABEL_85;
      v47 = (v43 - v26 * (double)((uint64_t)v45 - 1)) / (double)v46;
      if (v47 >= v21)
        v48 = v21;
      else
        v48 = v47;
      if (v46 < 0)
        goto LABEL_86;
      if (v46)
      {
        v49 = *((_QWORD *)v14 + 2);
        v50 = 32 * v49 + 32;
        v17 = 0.0;
        do
        {
          v51 = *((_QWORD *)v14 + 3);
          v52 = v49 + 1;
          if (v49 >= v51 >> 1)
            v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v49 + 1, 1, v14);
          *((_QWORD *)v14 + 2) = v52;
          v53 = &v14[v50];
          *(double *)v53 = v16 + v17;
          *((double *)v53 + 1) = v48;
          *((_QWORD *)v53 + 2) = v28;
          *((_QWORD *)v53 + 3) = v30;
          --v46;
          v54 = -0.0;
          if (v46)
            v54 = v26;
          v17 = v48 + v17 + v54;
          v50 += 32;
          v49 = v52;
        }
        while (v46);
      }
      else
      {
        v17 = 0.0;
      }
    }
    v10 = v69 - v17;
    v69 = v69 - v17;
    v9 = --v68;
LABEL_21:
    v18 = v15 + 1;
    v19 = -0.0;
    if (v15 != v67 - 1)
      v19 = v26;
    v16 = v19 + v16 + v17;
    ++v15;
  }
  while (v18 != v67);
  swift_bridgeObjectRelease();
  if (v65 < v16)
  {
    *v64 = v16;
    return *((_QWORD *)v14 + 2);
  }
  if (v16 < v65)
  {
    lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment();
    AlignmentGuide.fraction.getter();
    v56 = (v65 - v16) * v55;
    if (v56 != 0.0)
    {
      v57 = *((_QWORD *)v14 + 2);
      if (v57)
      {
        if (v57 == 1)
        {
          v58 = 0;
          goto LABEL_77;
        }
        v58 = v57 & 0x7FFFFFFFFFFFFFFELL;
        v59 = (double *)(v14 + 64);
        v60 = v57 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v61 = v56 + *v59;
          *(v59 - 4) = v56 + *(v59 - 4);
          *v59 = v61;
          v59 += 8;
          v60 -= 2;
        }
        while (v60);
        if (v57 != v58)
        {
LABEL_77:
          v62 = v57 - v58;
          v63 = (double *)&v14[32 * v58 + 32];
          do
          {
            *v63 = v56 + *v63;
            v63 += 4;
            --v62;
          }
          while (v62);
        }
      }
    }
  }
  return *((_QWORD *)v14 + 2);
}

{
  double v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  int64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  int v23;
  char v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  double *v63;
  double *v64;
  double v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  double v69;

  v67 = *(_QWORD *)(a2 + 16);
  if (!v67)
    return 0;
  v3 = *a1;
  v4 = MEMORY[0x1E0DEE9D8];
  if ((~*(_QWORD *)a1 & 0x7FF0000000000000) == 0)
    return 0;
  v69 = *a1;
  v68 = 0;
  v7 = *(_QWORD *)(a2 + 16);
  v66 = a2 + 32;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  v10 = v3;
  do
  {
    v11 = *(double *)(a2 + v8 + 56);
    if (!*(_BYTE *)(a2 + v8 + 48))
    {
      v10 = v10 - *(double *)(a2 + v8 + 32);
      v69 = v10;
      if (v7 == 1)
        goto LABEL_7;
LABEL_13:
      if ((*(_BYTE *)(a2 + v8 + 64) & 1) != 0)
        result = defaultSpacingValue.getter();
      v10 = v10 - v11;
      v69 = v10;
      goto LABEL_7;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      return result;
    }
    v68 = v9;
    if (v7 != 1)
      goto LABEL_13;
LABEL_7:
    v8 += 64;
    --v7;
  }
  while (v7);
  v64 = a1;
  v65 = v3;
  if (*(_QWORD *)(v4 + 16) <= v67)
    v13 = v67;
  else
    v13 = *(_QWORD *)(v4 + 16);
  v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0, (char *)v4);
  swift_beginAccess();
  swift_beginAccess();
  v15 = 0;
  v16 = 0.0;
  do
  {
    v20 = v66 + (v15 << 6);
    v22 = *(double *)v20;
    v21 = *(double *)(v20 + 8);
    v23 = *(unsigned __int8 *)(v20 + 16);
    v24 = *(_BYTE *)(v20 + 56);
    if ((*(_BYTE *)(v20 + 32) & 1) != 0)
    {
      defaultSpacingValue.getter();
      v26 = v25;
      if ((v24 & 1) == 0)
        goto LABEL_26;
    }
    else
    {
      v26 = *(double *)(v20 + 24);
      if ((*(_BYTE *)(v20 + 56) & 1) == 0)
      {
LABEL_26:
        result = Alignment.fraction.getter();
        v28 = v27;
        v30 = v29;
        if (!v23)
          goto LABEL_42;
        goto LABEL_27;
      }
    }
    lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment();
    swift_bridgeObjectRetain();
    AlignmentGuide.fraction.getter();
    UnitPoint.init(_:in:by:)();
    v28 = v37;
    v30 = v38;
    result = swift_bridgeObjectRelease();
    if (!v23)
    {
LABEL_42:
      v40 = *((_QWORD *)v14 + 2);
      v39 = *((_QWORD *)v14 + 3);
      if (v40 >= v39 >> 1)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v14);
      *((_QWORD *)v14 + 2) = v40 + 1;
      v41 = &v14[32 * v40];
      *((double *)v41 + 4) = v16;
      v17 = v22;
      *((double *)v41 + 5) = v22;
      *((_QWORD *)v41 + 6) = v28;
      *((_QWORD *)v41 + 7) = v30;
      goto LABEL_21;
    }
LABEL_27:
    v31 = v22;
    if (v23 == 1)
    {
      if (v22 > v21)
        goto LABEL_81;
      if (v10 < 0.0)
        v32 = 0.0;
      else
        v32 = v10;
      v33 = v32 / (double)v9;
      if (v33 >= v22)
        v31 = v33;
      if (v31 <= v21)
        v17 = v31;
      else
        v17 = v21;
      v35 = *((_QWORD *)v14 + 2);
      v34 = *((_QWORD *)v14 + 3);
      if (v35 >= v34 >> 1)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v14);
      *((_QWORD *)v14 + 2) = v35 + 1;
      v36 = &v14[32 * v35];
      *((double *)v36 + 4) = v16;
      *((double *)v36 + 5) = v17;
      *((_QWORD *)v36 + 6) = v28;
      *((_QWORD *)v36 + 7) = v30;
    }
    else
    {
      if (v10 < 0.0)
        v42 = 0.0;
      else
        v42 = v10;
      v43 = v42 / (double)v9;
      v44 = floor((v43 - v22) / (v26 + v22));
      if (v44 < 0.0)
        v45 = 1.0;
      else
        v45 = v44 + 1.0;
      if ((~*(_QWORD *)&v45 & 0x7FF0000000000000) == 0)
        goto LABEL_82;
      if (v45 <= -9.22337204e18)
        goto LABEL_83;
      if (v45 >= 9.22337204e18)
        goto LABEL_84;
      v46 = (uint64_t)v45;
      if (__OFSUB__((uint64_t)v45, 1))
        goto LABEL_85;
      v47 = (v43 - v26 * (double)((uint64_t)v45 - 1)) / (double)v46;
      if (v47 >= v21)
        v48 = v21;
      else
        v48 = v47;
      if (v46 < 0)
        goto LABEL_86;
      if (v46)
      {
        v49 = *((_QWORD *)v14 + 2);
        v50 = 32 * v49 + 32;
        v17 = 0.0;
        do
        {
          v51 = *((_QWORD *)v14 + 3);
          v52 = v49 + 1;
          if (v49 >= v51 >> 1)
            v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v49 + 1, 1, v14);
          *((_QWORD *)v14 + 2) = v52;
          v53 = &v14[v50];
          *(double *)v53 = v16 + v17;
          *((double *)v53 + 1) = v48;
          *((_QWORD *)v53 + 2) = v28;
          *((_QWORD *)v53 + 3) = v30;
          --v46;
          v54 = -0.0;
          if (v46)
            v54 = v26;
          v17 = v48 + v17 + v54;
          v50 += 32;
          v49 = v52;
        }
        while (v46);
      }
      else
      {
        v17 = 0.0;
      }
    }
    v10 = v69 - v17;
    v69 = v69 - v17;
    v9 = --v68;
LABEL_21:
    v18 = v15 + 1;
    v19 = -0.0;
    if (v15 != v67 - 1)
      v19 = v26;
    v16 = v19 + v16 + v17;
    ++v15;
  }
  while (v18 != v67);
  swift_bridgeObjectRelease();
  if (v65 < v16)
  {
    *v64 = v16;
    return *((_QWORD *)v14 + 2);
  }
  if (v16 < v65)
  {
    lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment();
    AlignmentGuide.fraction.getter();
    v56 = (v65 - v16) * v55;
    if (v56 != 0.0)
    {
      v57 = *((_QWORD *)v14 + 2);
      if (v57)
      {
        if (v57 == 1)
        {
          v58 = 0;
          goto LABEL_77;
        }
        v58 = v57 & 0x7FFFFFFFFFFFFFFELL;
        v59 = (double *)(v14 + 64);
        v60 = v57 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v61 = v56 + *v59;
          *(v59 - 4) = v56 + *(v59 - 4);
          *v59 = v61;
          v59 += 8;
          v60 -= 2;
        }
        while (v60);
        if (v57 != v58)
        {
LABEL_77:
          v62 = v57 - v58;
          v63 = (double *)&v14[32 * v58 + 32];
          do
          {
            *v63 = v56 + *v63;
            v63 += 4;
            --v62;
          }
          while (v62);
        }
      }
    }
  }
  return *((_QWORD *)v14 + 2);
}

uint64_t outlined retain of _IncrementalStack_State<LazyHGridLayout>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t key path getter for EnvironmentValues.interactionActivityTag : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.interactionActivityTag.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t EnvironmentValues.interactionActivityTag.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<UserInteractionActivityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UserInteractionActivityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<UserInteractionActivityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<UserInteractionActivityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UserInteractionActivityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<UserInteractionActivityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void @objc _UIHostingView._geometryChanged(_:forAncestor:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v5 = a4;
  v9 = a1;
  specialized _UIHostingView._geometryChanged(_:forAncestor:)((uint64_t)v9, v6, v7, v8);

}

uint64_t EnvironmentValues.safeAreaTransitionState.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v1 = MEMORY[0x18D760234](&v3);
  outlined destroy of weak FallbackResponderProvider?((uint64_t)&v3);
  return v1;
}

uint64_t outlined init with copy of EnvironmentValues.SafeAreaTransitionStateKey.Value(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t initializeWithCopy for EnvironmentValues.SafeAreaTransitionStateKey.Value(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

void View.onLongPressGesture(minimumDuration:maximumDistance:pressing:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  double v8[2];

  v8[0] = a7;
  v8[1] = a8;
  View.pressableGesture<A>(_:action:pressingAction:)((uint64_t)v8, a3, a4, a1, a2, a5, (uint64_t)&type metadata for LongPressGesture, a6, (uint64_t)&protocol witness table for LongPressGesture, (uint64_t)&protocol witness table for Bool);
}

unint64_t lazy protocol witness table accessor for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>;
  if (!lazy protocol witness table cache variable for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _EndedGesture<TapGesture>, MEMORY[0x1E0CE0D08], MEMORY[0x1E0CE0CF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2250]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2260], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UniqueID and conformance UniqueID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UniqueID and conformance UniqueID;
  if (!lazy protocol witness table cache variable for type UniqueID and conformance UniqueID)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7918], MEMORY[0x1E0CE7910]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UniqueID and conformance UniqueID);
  }
  return result;
}

uint64_t outlined destroy of CoordinateSpace(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE2C98] - 8) + 8))();
  return a1;
}

uint64_t outlined destroy of ViewTransform.Conversion(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE2188] - 8) + 8))();
  return a1;
}

uint64_t outlined init with copy of CoordinateSpace(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE2C98] - 8) + 16))(a2, a1);
  return a2;
}

void type metadata accessor for RBDisplayListRenderKey(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for RBDisplayListRenderKey);
}

void type metadata accessor for _ContiguousArrayStorage<(RBDisplayListRenderKey, Any)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(RBDisplayListRenderKey, Any)>)
  {
    type metadata accessor for (RBDisplayListRenderKey, Any)();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(RBDisplayListRenderKey, Any)>);
  }
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE148], MEMORY[0x1E0DEE0F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE120], MEMORY[0x1E0DEE0F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

Swift::Void __swiftcall UIHostingController.didRender()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v0 = specialized UIHostingController.contentScrollViewBridge.getter();
  if (v0)
  {
    v1 = v0;
    if (*(_QWORD *)(v0 + 40))
    {
      v2 = MEMORY[0x18D760234](v0 + 16);
      if (v2)
      {
        v7 = (id)v2;
        swift_retain();
        v3 = swift_bridgeObjectRetain();
        v4 = (void *)UIKitContentScrollViewBridge.findBestCandidates(in:)(v3);
        v6 = v5;
        swift_bridgeObjectRelease();
        if (v4 != (void *)1)
        {
          *(_QWORD *)(v1 + 40) = 0;
          swift_bridgeObjectRelease();
          update #1 (edge:) in UIKitContentScrollViewBridge.update()(4, v7, v1, v4, v6);
          update #1 (edge:) in UIKitContentScrollViewBridge.update()(1, v7, v1, v4, v6);
          outlined consume of UIKitContentScrollViewBridge.Candidates?(v4, v6);
        }
        swift_release();

      }
    }
  }
}

void update #1 (edge:) in UIKitContentScrollViewBridge.update()(uint64_t a1, id a2, uint64_t a3, void *a4, void *a5)
{
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  id v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v10 = objc_msgSend(a2, sel_contentScrollViewForEdge_, a1);
  if (v10)
  {
    v11 = v10;
    swift_getObjectType();
    if ((objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI) & 1) != 0)
    {

    }
    else
    {
      swift_beginAccess();
      v12 = *(_QWORD *)(a3 + 32);
      if (*(_QWORD *)(v12 + 16) && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v14 & 1) != 0))
        v15 = *(void **)(*(_QWORD *)(v12 + 56) + 8 * v13);
      else
        v15 = 0;
      swift_endAccess();

      if (!v15 || v11 != v15)
        return;
    }
  }
  if ((a1 == 4 || (a5 = a4, a1 == 1)) && a5)
  {
    v16 = a5;
    objc_msgSend(a2, sel_setContentScrollView_forEdge_, v16, a1);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 32) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v16, a1, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a3 + 32) = v24;
    swift_bridgeObjectRelease();
    swift_endAccess();

  }
  else
  {
    objc_msgSend(a2, sel_setContentScrollView_forEdge_, 0, a1);
    v18 = (uint64_t *)(a3 + 32);
    swift_beginAccess();
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v20 & 1) != 0)
    {
      v21 = v19;
      v22 = swift_isUniquelyReferenced_nonNull_native();
      v23 = *v18;
      v25 = *v18;
      *v18 = 0x8000000000000000;
      if ((v22 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v23 = v25;
      }
      specialized _NativeDictionary._delete(at:)(v21, v23);
      *v18 = v23;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(a1 + 8));
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  type metadata accessor for CodingUserInfoKey();
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();
  outlined release of TableColumnCustomizationID(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::Int v4;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)a1);
  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  Hasher._combine(_:)(*(_QWORD *)(a1 + 8));
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(*(_QWORD *)(a1 + 32));
  Hasher._combine(_:)(*(_BYTE *)(a1 + 40) & 1);
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  Hasher._combine(_:)(*(_QWORD *)(a1 + 40));
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Selector.hash(into:)();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for UUID();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, &lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09D0]);
}

{
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt v5;
  Swift::Int v6;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  if (v4 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v4);
    Hasher._combine(_:)(v5);
  }
  Hasher._combine(_:)(*(_BYTE *)(a1 + 32) & 1);
  v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  type metadata accessor for CommandGroupPlacement(0);
  UUID.hash(into:)();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;

  Hasher.init(_seed:)();
  v3 = *(_QWORD *)(a1 + 104);
  v2 = *(_QWORD *)(a1 + 112);
  if ((*(_BYTE *)(a1 + 120) & 1) != 0)
  {
    Hasher._combine(_:)(*(_QWORD *)(a1 + 104));
    Hasher._combine(_:)(v2);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of SceneID(v3, v2, 0);
  }
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
}

{
  Swift::Int v2;
  _BYTE v4[48];
  _BYTE v5[48];

  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  outlined init with copy of SwiftUIAnySortComparator?(a1 + 40, (uint64_t)v5, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  if (v5[40] == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v5, (uint64_t)v4);
    Hasher._combine(_:)(1u);
    ToolbarItemPlacement.Role.hash(into:)();
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v4);
  }
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v4;
  Swift::Int v5;
  _BYTE v7[16];
  _QWORD v8[2];

  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = MEMORY[0x1E0DEA968];
  outlined init with take of Image.Resolved?(a1 + 48, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968]);
  String.hash(into:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  outlined init with take of Image.Resolved?((uint64_t)v7, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for String?, v4);
  if (v8[1])
    String.hash(into:)();
  v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t *)a1, v5);
}

{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for UTType();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0358]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, &lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E0DF0360]);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for NSFileWrapper);
}

{
  Swift::UInt v2;
  Swift::Int v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;
  char v9;

  Hasher.init(_seed:)();
  outlined init with copy of TableRowID(a1, (uint64_t)v7);
  if ((v9 & 1) != 0)
  {
    v5[0] = v7[0];
    v5[1] = v7[1];
    v6 = v8;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v5);
  }
  else
  {
    v2 = *(_QWORD *)&v7[0];
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v2);
  }
  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

uint64_t UIKitContentScrollViewBridge.findBestCandidates(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  int v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;
  id v26;
  void *v27;
  BOOL v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  int v33;
  id v34;
  void *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  void *v40;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  double v54;
  CGFloat MaxY;
  double v56;
  double v57;
  CGFloat MinY;
  double v59;
  double v60;
  CGFloat v61;
  double v62;
  double v63;
  id v64;
  id v65;
  void *v66;
  id v67;
  uint64_t v69;
  id v70;
  unsigned int v71;
  _BYTE *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  int v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  double v85;
  char v86[8];
  _BYTE v87[48];
  CGRect v88;
  CGRect v89;
  CGRect v90;

  v75 = type metadata accessor for FloatingPointRoundingRule();
  v74 = *(_QWORD *)(v75 - 8);
  v4 = MEMORY[0x1E0C80A78](v75, v3);
  v73 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v1;
  v6 = (void *)MEMORY[0x18D760234](v1 + 16, v4);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = objc_msgSend(v6, sel_view);

  if (!v8)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {

    return 0;
  }
  v72 = v87;
  v71 = *MEMORY[0x1E0DED508];
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v69 = swift_bridgeObjectRetain();
  v13 = v69 + 48 * v9 - 16;
  v70 = v8;
  while (1)
  {
    outlined init with copy of ContentScrollViewBox(v13, (uint64_t)v86);
    v14 = MEMORY[0x18D760234](v86);
    if (v14)
      break;
    outlined destroy of ContentScrollViewBox((uint64_t)v86);
LABEL_6:
    v13 -= 48;
    if (!--v9)
      goto LABEL_32;
  }
  v15 = (void *)v14;
  v16 = (id)MEMORY[0x18D760234](v72);
  if (!v16)
    v16 = v15;
  objc_msgSend(v16, sel_bounds, v69);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = v16;
  v26 = objc_msgSend(v25, sel_superview);
  v27 = v26;
  if (v22 == 0.0)
  {
    v28 = v24 != 0.0 || v26 == 0;
    v29 = v25;
    if (!v28)
    {
      v30 = v13;
      v31 = v11;
      v32 = v12;
      v33 = v10;
      v34 = v26;

      v29 = v34;
      v35 = v34;
      v10 = v33;
      v12 = v32;
      v11 = v31;
      v13 = v30;
      objc_msgSend(v35, sel_bounds);
      v18 = v36;
      v20 = v37;
      v22 = v38;
      v24 = v39;
    }
  }
  else
  {
    v29 = v25;
  }
  v40 = v70;
  v41 = objc_msgSend(v25, sel_isDescendantOfView_, v70);
  v80 = v12;
  v81 = v11;
  v77 = v9;
  v78 = v15;
  v83 = v27;
  v84 = v25;
  v82 = v29;
  if (v41)
  {
    objc_msgSend(v40, sel_convertRect_fromCoordinateSpace_, v29, v18, v20, v22, v24);
    v18 = v42;
    v20 = v43;
    v22 = v44;
    v24 = v45;
  }
  v79 = v10 | (v22 != 0.0) | (v24 != 0.0);
  v46 = v76;
  v47 = *(double *)(v76 + 48);
  v85 = v20 + v47 * 0.5;
  v48 = v74;
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 104);
  v50 = (uint64_t)v73;
  v51 = v71;
  v52 = v75;
  v49(v73, v71, v75);
  specialized FloatingPoint.round(_:toMultipleOf:)(v50, v47);
  v53 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v53(v50, v52);
  v54 = v85;
  v88.origin.x = v18;
  v88.origin.y = v20;
  v88.size.width = v22;
  v88.size.height = v24;
  MaxY = CGRectGetMaxY(v88);
  v56 = *(double *)(v46 + 48);
  v85 = MaxY + v56 * 0.5;
  v49((char *)v50, v51, v52);
  specialized FloatingPoint.round(_:toMultipleOf:)(v50, v56);
  v53(v50, v52);
  v57 = v85;
  objc_msgSend(v40, sel_bounds);
  MinY = CGRectGetMinY(v89);
  v59 = *(double *)(v46 + 48);
  v85 = MinY + v59 * 0.5;
  v49((char *)v50, v51, v52);
  specialized FloatingPoint.round(_:toMultipleOf:)(v50, v59);
  v53(v50, v52);
  v60 = v85;
  v8 = v40;
  objc_msgSend(v40, sel_bounds);
  v61 = CGRectGetMaxY(v90);
  v62 = *(double *)(v46 + 48);
  v85 = v61 + v62 * 0.5;
  v49((char *)v50, v51, v52);
  specialized FloatingPoint.round(_:toMultipleOf:)(v50, v62);
  v53(v50, v52);

  if ((v87[32] & 1) != 0)
  {

    v12 = v78;
    v67 = v78;
    outlined destroy of ContentScrollViewBox((uint64_t)v86);

    swift_bridgeObjectRelease();
    v11 = v12;
    if ((v79 & 1) != 0)
      return (uint64_t)v12;
    goto LABEL_33;
  }
  v63 = v85;
  v12 = v80;
  v11 = v81;
  v64 = v78;
  if (v54 <= v60)
  {

    v65 = v64;
    v12 = v64;
  }
  v10 = v79;
  v9 = v77;
  outlined destroy of ContentScrollViewBox((uint64_t)v86);
  if (v63 <= v57)
    v66 = v11;
  else
    v66 = v64;
  if (v63 <= v57)
    v11 = v64;

  if (!v12 || !v11)
    goto LABEL_6;
LABEL_32:

  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
    return (uint64_t)v12;
LABEL_33:

  return 1;
}

void outlined consume of UIKitContentScrollViewBridge.Candidates?(void *a1, void *a2)
{
  if (a1 != (void *)1)
  {

  }
}

uint64_t outlined destroy of ContentScrollViewBox(uint64_t a1)
{
  destroy for ContentScrollViewBox();
  return a1;
}

uint64_t destroy for ContentScrollViewBox()
{
  swift_unknownObjectWeakDestroy();
  return swift_unknownObjectWeakDestroy();
}

uint64_t outlined init with copy of ContentScrollViewBox(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ContentScrollViewBox(a2, a1, (uint64_t)&type metadata for ContentScrollViewBox);
  return a2;
}

uint64_t initializeWithCopy for ContentScrollViewBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7;

  v7 = a4();
  ((void (*)(uint64_t, uint64_t))a4)(v7 + 8, a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t initializeWithCopy for ContentScrollViewBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for ContentScrollViewBox(a1, a2, a3, MEMORY[0x1E0DEEF30]);
}

uint64_t static _ScrollViewBoundsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;

  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v9 = *((_DWORD *)a2 + 6);
  v8 = *((_DWORD *)a2 + 7);
  v11 = *((_DWORD *)a2 + 8);
  v10 = *((_DWORD *)a2 + 9);
  v13 = a2[5];
  v12 = a2[6];
  v15 = *((_DWORD *)a2 + 14);
  v14 = *((_DWORD *)a2 + 15);
  v17 = *((_DWORD *)a2 + 16);
  v16 = *((_DWORD *)a2 + 17);
  v19 = *((_DWORD *)a2 + 18);
  v18 = *((_DWORD *)a2 + 19);
  v32 = *((_DWORD *)a2 + 20);
  if (a5 == MEMORY[0x1E0CE1E98])
  {
    v33 = *a2;
    v34 = v6;
    v35 = v7;
    v36 = v9;
    v37 = v8;
    v38 = v11;
    v39 = v10;
    v40 = v13;
    v41 = v12;
    v42 = v15;
    v43 = v14;
    v44 = v17;
    v45 = v16;
    v46 = v19;
    v47 = v18;
    v48 = v32;
    return a3(a1, &v33);
  }
  else
  {
    v27 = *((_DWORD *)a2 + 17);
    v28 = *((_DWORD *)a2 + 19);
    v30 = *((_DWORD *)a2 + 18);
    v25 = *((_DWORD *)a2 + 15);
    v26 = *((_DWORD *)a2 + 16);
    v24 = *((_DWORD *)a2 + 14);
    v31 = *a2;
    type metadata accessor for _ScrollViewBoundsModifier(255, a5, a6, a4);
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    _ViewInputs.position.getter();
    _ViewInputs.transform.getter();
    v22 = type metadata accessor for _ScrollViewBoundsModifier.Child(0, a5, a6, v21);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollViewBoundsModifier<A>.Child, v22);
    _GraphValue.init<A>(_:)();
    v33 = v31;
    v34 = v6;
    v35 = v7;
    v36 = v9;
    v37 = v8;
    v38 = v11;
    v39 = v10;
    v40 = v13;
    v41 = v12;
    v42 = v24;
    v43 = v25;
    v44 = v26;
    v45 = v27;
    v46 = v30;
    v47 = v28;
    v48 = v32;
    return static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  }
}

uint64_t type metadata accessor for _ScrollViewBoundsModifier.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ScrollViewBoundsModifier.Child);
}

uint64_t partial apply for closure #1 in Attribute.init<A>(_:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1);
}

{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t closure #1 in Attribute.init<A>(_:)partial apply@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for [Selectable](0);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)partial apply(a1);
}

{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_1((void (*)(_QWORD))type metadata accessor for (_:), a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_22(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  type metadata accessor for TableColumnList();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_30(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_1((void (*)(_QWORD))type metadata accessor for (_:), a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_1((void (*)(_QWORD))type metadata accessor for (_:), a1);
}

{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  uint64_t result;

  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

{
  return closure #1 in Attribute.init<A>(_:)partial apply(a1);
}

{
  type metadata accessor for [ScrollableCollection](0);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [ContentScrollViewBox], (uint64_t)&type metadata for ContentScrollViewBox, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_16(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_13(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_17(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_21(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_1((void (*)(_QWORD))type metadata accessor for (_:), a1);
}

{
  type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)partial apply((unint64_t *)&lazy cache variable for type metadata for (_:), type metadata accessor for ToolbarStorage.SearchItem?, a1);
}

{
  return closure #1 in Attribute.init<A>(_:)partial apply((unint64_t *)&lazy cache variable for type metadata for (_:), type metadata accessor for ToolbarStorage.NavigationProperties?, a1);
}

{
  type metadata accessor for AccessibilityQuickActionProxy();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_1((void (*)(_QWORD))type metadata accessor for (_:), a1);
}

{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_0@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_0@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

void type metadata accessor for [ViewResponder]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [ViewResponder])
  {
    type metadata accessor for ViewResponder();
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder]);
  }
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_2@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_3@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for (_:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_5@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for [EventID : EventType]();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_6@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_7@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for UIScrollView?();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_8@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_9(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for NSAttributedString, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_10(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_11(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_0(a1, a2, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_12@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_13@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_14@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_15@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_16@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_17@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_18@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_19@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_20@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_21@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_22@<X0>(_DWORD *a1@<X8>)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_1((void (*)(_QWORD))type metadata accessor for (_:), a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_23(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_24@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_25@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_26@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UInt32?, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_27@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_28(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE3278], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_29@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_30@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_31@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_32@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_33@<X0>(_DWORD *a1@<X8>)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_1(type metadata accessor for (())?, a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_34@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_35@<X0>(_DWORD *a1@<X8>)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_1((void (*)(_QWORD))type metadata accessor for NavigationDestinationResolverBase, a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_36@<X0>(_DWORD *a1@<X8>)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_1(type metadata accessor for ToolbarStorage.NavigationProperties?, a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_37@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for BaseFocusResponder?(0);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t closure #1 in Attribute.init<A>(_:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_3@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_4@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_5@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_6@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_10(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for TableColumnList, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_11@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_12(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryTextImagePreference?, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_13(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_0(a1, a2, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_14@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_15@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for [ViewResponder]();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_16@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_17(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for DragReorderableLayoutCoordinator, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_18@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_19(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_20@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_21@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_22@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_23@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_24(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_25@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_26@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_27@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [KeyboardShortcutBinding], (uint64_t)&type metadata for KeyboardShortcutBinding, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_28@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

unint64_t lazy protocol witness table accessor for type AccessibilityOpacityAttachment and conformance AccessibilityOpacityAttachment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityOpacityAttachment and conformance AccessibilityOpacityAttachment;
  if (!lazy protocol witness table cache variable for type AccessibilityOpacityAttachment and conformance AccessibilityOpacityAttachment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityOpacityAttachment, &type metadata for AccessibilityOpacityAttachment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityOpacityAttachment and conformance AccessibilityOpacityAttachment);
  }
  return result;
}

uint64_t partial apply for closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v10 = a3(0);
  return a4(a1, v10, v9, v8, a2);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return a5(a1, v11, v10, v9, a2);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_1@<X0>(void (*a1)(_QWORD)@<X2>, _DWORD *a2@<X8>)
{
  a1(0);
  return closure #1 in Attribute.init<A>(_:)(a2);
}

void static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, ValueMetadata **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v9;
  ValueMetadata *v10;
  int v11;
  _UNKNOWN **v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int OffsetAttribute2;
  uint64_t v19;
  int v20;
  _UNKNOWN **v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  ValueMetadata *v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  __int128 *v47;
  void (*v48)(uint64_t *__return_ptr, uint64_t, ValueMetadata **);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _UNKNOWN **v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  ValueMetadata *v56;
  _UNKNOWN **v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  ValueMetadata *v70;
  uint64_t v71;
  _UNKNOWN **v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  ValueMetadata *v85;
  int v86;
  _UNKNOWN **v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  unsigned __int8 v98;
  int v99;
  uint64_t v100;

  v47 = (__int128 *)a4;
  v48 = a3;
  v49 = a7;
  v100 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v10 = *(ValueMetadata **)a2;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_UNKNOWN ***)(a2 + 16);
  v13 = *(_DWORD *)(a2 + 24);
  v68 = *(_DWORD *)(a2 + 28);
  v67 = *(_DWORD *)(a2 + 32);
  v66 = *(_DWORD *)(a2 + 36);
  v14 = *(_QWORD *)(a2 + 40);
  v65 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 56);
  v64 = *(_DWORD *)(a2 + 60);
  v63 = *(_DWORD *)(a2 + 64);
  v62 = *(_DWORD *)(a2 + 68);
  v61 = *(_DWORD *)(a2 + 72);
  v55 = *(_DWORD *)(a2 + 76);
  v60 = *(_DWORD *)(a2 + 80);
  v45 = v9;
  LODWORD(v85) = v9;
  type metadata accessor for AccessibilityLargeContentViewModifier(255, a5, a6, a4);
  v42 = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v17 = *(_QWORD *)(*(_QWORD *)(a5 - 8) + 64);
  v51 = a6;
  v50 = a5;
  if (v17)
    closure #1 in static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)(1, a5, a6, v16);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v70 = v10;
  LODWORD(v71) = v11;
  v72 = v12;
  v73 = __PAIR64__(v68, v13);
  v74 = v67;
  v75 = v66;
  v19 = v14;
  v76 = v14;
  v53 = v14;
  v77 = v65;
  v78 = v15;
  v79 = v64;
  v80 = v63;
  v81 = v62;
  v82 = v61;
  v83 = v55;
  v84 = v60;
  PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v70, 1, (uint64_t)&v85);
  v38 = v85;
  v37 = v86;
  v52 = v87;
  v54 = v15;
  v20 = v11;
  v58 = v11;
  v21 = v12;
  v22 = v13;
  v59 = v13;
  v23 = v88;
  v24 = v90;
  v26 = v93;
  v25 = v94;
  v41 = v97;
  v40 = v98;
  v39 = v99;
  v27 = v91;
  v28 = v92;
  v36 = v95;
  v29 = v96;
  v85 = v10;
  v56 = v10;
  v86 = v20;
  v87 = v21;
  v57 = v21;
  v88 = v22;
  v89 = v68;
  v90 = __PAIR64__(v66, v67);
  v91 = v19;
  v92 = v65;
  v93 = __PAIR64__(v64, v15);
  v94 = __PAIR64__(v62, v63);
  *(_QWORD *)&v95 = __PAIR64__(v55, v61);
  DWORD2(v95) = v60;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v30 = swift_bridgeObjectRetain();
  v48(&v69, v30, &v85);
  LODWORD(v85) = v45;
  _GraphValue.value.getter();
  v31 = v50;
  v32 = v51;
  closure #2 in static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)(1, v50, v51, v33);
  v34 = AGGraphCreateOffsetAttribute2();
  LODWORD(v48) = v34;
  v47 = &v36;
  v86 = v37;
  v85 = v38;
  v87 = v52;
  v88 = v23;
  v46 = v24;
  v90 = v24;
  v91 = v27;
  v92 = v28;
  v44 = v26;
  v93 = v26;
  v94 = v25;
  v43 = v25;
  v95 = v36;
  v96 = v29;
  v97 = v41;
  v98 = v40;
  v99 = v39;
  MEMORY[0x1E0C80A78](v34, v35);
  v70 = &type metadata for LabelPlatformItemListFlags;
  v71 = v31;
  v72 = &protocol witness table for LabelPlatformItemListFlags;
  v73 = v32;
  type metadata accessor for PlatformItemListGenerator();
}

uint64_t sub_186E949F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t result;
  _QWORD *v27;
  _BYTE v28[128];

  v5 = a1;
  *(_QWORD *)(v1 - 16) = a1;
  *(_QWORD *)(v1 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListGenerator<A, B>, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v7 = v6;
  *(_QWORD *)(v4 - 456) = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4 - 240, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1, v2, v5, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  v9 = *(void **)(v4 - 240);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  *(_DWORD *)(v4 - 464) = *(_DWORD *)(v4 - 328);
  *(_QWORD *)(v4 - 240) = *(_QWORD *)(v4 - 424);
  *(_DWORD *)(v4 - 232) = *(_DWORD *)(v4 - 404);
  *(_QWORD *)(v4 - 224) = *(_QWORD *)(v4 - 416);
  v10 = *(_DWORD *)(v4 - 356);
  *(_DWORD *)(v4 - 216) = *(_DWORD *)(v4 - 400);
  *(_DWORD *)(v4 - 212) = v10;
  LODWORD(v7) = *(_DWORD *)(v4 - 360);
  v11 = *(_DWORD *)(v4 - 364);
  *(_DWORD *)(v4 - 208) = v7;
  *(_DWORD *)(v4 - 204) = v11;
  v12 = *(_QWORD *)(v4 - 376);
  *(_QWORD *)(v4 - 200) = *(_QWORD *)(v4 - 440);
  *(_QWORD *)(v4 - 192) = v12;
  v13 = *(_DWORD *)(v4 - 380);
  *(_DWORD *)(v4 - 184) = *(_DWORD *)(v4 - 432);
  *(_DWORD *)(v4 - 180) = v13;
  v14 = *(_DWORD *)(v4 - 384);
  LODWORD(v9) = *(_DWORD *)(v4 - 388);
  *(_DWORD *)(v4 - 176) = v14;
  *(_DWORD *)(v4 - 172) = (_DWORD)v9;
  LODWORD(v5) = *(_DWORD *)(v4 - 392);
  v15 = *(_DWORD *)(v4 - 428);
  *(_DWORD *)(v4 - 168) = v5;
  *(_DWORD *)(v4 - 164) = v15;
  *(_DWORD *)(v4 - 160) = *(_DWORD *)(v4 - 396);
  *(_DWORD *)(v4 - 488) = _ViewInputs.size.getter();
  *(_QWORD *)(v4 - 240) = *(_QWORD *)(v4 - 424);
  *(_DWORD *)(v4 - 232) = *(_DWORD *)(v4 - 404);
  *(_QWORD *)(v4 - 224) = *(_QWORD *)(v4 - 416);
  *(_DWORD *)(v4 - 216) = *(_DWORD *)(v4 - 400);
  *(_DWORD *)(v4 - 212) = v10;
  *(_DWORD *)(v4 - 208) = v7;
  *(_DWORD *)(v4 - 204) = v11;
  v16 = *(_QWORD *)(v4 - 440);
  *(_QWORD *)(v4 - 200) = v16;
  *(_QWORD *)(v4 - 192) = v12;
  v17 = v12;
  LODWORD(v12) = *(_DWORD *)(v4 - 432);
  *(_DWORD *)(v4 - 184) = v12;
  *(_DWORD *)(v4 - 180) = v13;
  *(_DWORD *)(v4 - 176) = v14;
  *(_DWORD *)(v4 - 172) = (_DWORD)v9;
  *(_DWORD *)(v4 - 168) = v5;
  *(_DWORD *)(v4 - 164) = v15;
  v18 = *(_DWORD *)(v4 - 396);
  *(_DWORD *)(v4 - 160) = v18;
  *(_DWORD *)(v4 - 500) = _ViewInputs.position.getter();
  *(_QWORD *)(v4 - 240) = *(_QWORD *)(v4 - 424);
  *(_DWORD *)(v4 - 232) = *(_DWORD *)(v4 - 404);
  *(_QWORD *)(v4 - 224) = *(_QWORD *)(v4 - 416);
  v19 = *(_DWORD *)(v4 - 356);
  *(_DWORD *)(v4 - 216) = *(_DWORD *)(v4 - 400);
  *(_DWORD *)(v4 - 212) = v19;
  v20 = *(_DWORD *)(v4 - 364);
  *(_DWORD *)(v4 - 208) = *(_DWORD *)(v4 - 360);
  *(_DWORD *)(v4 - 204) = v20;
  *(_QWORD *)(v4 - 200) = v16;
  *(_QWORD *)(v4 - 192) = v17;
  *(_DWORD *)(v4 - 184) = v12;
  *(_DWORD *)(v4 - 180) = v13;
  *(_DWORD *)(v4 - 176) = v14;
  *(_DWORD *)(v4 - 172) = (_DWORD)v9;
  *(_DWORD *)(v4 - 168) = v5;
  *(_DWORD *)(v4 - 164) = v15;
  *(_DWORD *)(v4 - 160) = v18;
  v21 = _ViewInputs.transform.getter();
  *(_QWORD *)(v4 - 240) = v17;
  *(_DWORD *)(v4 - 232) = v12;
  MEMORY[0x1E0C80A78](v21, v22);
  v23 = *(_DWORD *)(v4 - 464);
  *(_DWORD *)&v28[-32] = *(_DWORD *)(v4 - 480);
  *(_DWORD *)&v28[-28] = v23;
  v24 = *(_DWORD *)(v4 - 500);
  *(_DWORD *)&v28[-24] = *(_DWORD *)(v4 - 488);
  *(_DWORD *)&v28[-20] = v24;
  *(_DWORD *)&v28[-16] = v25;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  result = swift_bridgeObjectRelease();
  v27 = *(_QWORD **)(v4 - 472);
  *v27 = *(_QWORD *)(v4 - 344);
  v27[1] = *(_QWORD *)(v4 - 336);
  return result;
}

uint64_t type metadata accessor for AccessibilityLargeContentViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityLargeContentViewModifier);
}

void type metadata accessor for PlatformItemListGenerator()
{
  JUMPOUT(0x18D75FF28);
}

id PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)@<X0>(int a1@<W1>, uint64_t *a2@<X2>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  id result;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v15 = *(_OWORD *)(a2 + 5);
  v16 = *(_OWORD *)(a2 + 3);
  v14 = *(_OWORD *)(a2 + 7);
  v10 = a2[9];
  v11 = *((_DWORD *)a2 + 20);
  result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    v13 = *MEMORY[0x1E0CFED28];
    *(_QWORD *)a4 = result;
    *(_DWORD *)(a4 + 8) = a1;
    *(_QWORD *)(a4 + 16) = v7;
    *(_DWORD *)(a4 + 24) = v8;
    *(_QWORD *)(a4 + 32) = v9;
    *(_OWORD *)(a4 + 40) = v16;
    *(_OWORD *)(a4 + 56) = v15;
    *(_OWORD *)(a4 + 72) = v14;
    *(_QWORD *)(a4 + 88) = v10;
    *(_DWORD *)(a4 + 96) = v11;
    *(_BYTE *)(a4 + 100) = a3 & 1;
    *(_DWORD *)(a4 + 104) = v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #2 in static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v8[2] = type metadata accessor for AccessibilityLargeContentViewModifier(0, a2, a3, a4);
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_1, (uint64_t)v8, (uint64_t)&type metadata for AccessibilityLargeContentViewBehavior, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[5];
}

uint64_t type metadata accessor for BindKeyboardShortcutItems(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BindKeyboardShortcutItems);
}

void type metadata accessor for Attribute<[KeyboardShortcutBinding]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<[KeyboardShortcutBinding]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for [KeyboardShortcutBinding], (uint64_t)&type metadata for KeyboardShortcutBinding, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<[KeyboardShortcutBinding]>);
  }
}

uint64_t partial apply for implicit closure #1 in static _AnchorTransformModifier.makeView(modifier:inputs:animated:body:)()
{
  uint64_t *v0;

  return implicit closure #1 in static _AnchorTransformModifier.makeView(modifier:inputs:animated:body:)(v0[5], v0[6], v0[2], v0[3], v0[4]);
}

uint64_t implicit closure #1 in static _AnchorTransformModifier.makeView(modifier:inputs:animated:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _BYTE v12[16];
  uint64_t FunctionTypeMetadata;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v11[0] = a1;
  v11[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  v14 = type metadata accessor for AnchorTransform(0, a3, a4, a5);
  v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnchorTransform<A, B>, v14);
  v8 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v11, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v12, v14, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return AssociatedTypeWitness;
}

uint64_t protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key()
{
  return 1;
}

uint64_t type metadata accessor for AnchorTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnchorTransform);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v9 = type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  return a3(a1, v9, v8, v7, a2);
}

unint64_t lazy protocol witness table accessor for type AccessibilityLargeContentViewTransform and conformance AccessibilityLargeContentViewTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityLargeContentViewTransform and conformance AccessibilityLargeContentViewTransform;
  if (!lazy protocol witness table cache variable for type AccessibilityLargeContentViewTransform and conformance AccessibilityLargeContentViewTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLargeContentViewTransform, &unk_1E1B07BD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLargeContentViewTransform and conformance AccessibilityLargeContentViewTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityLargeContentViewHitTestingTransform and conformance AccessibilityLargeContentViewHitTestingTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityLargeContentViewHitTestingTransform and conformance AccessibilityLargeContentViewHitTestingTransform;
  if (!lazy protocol witness table cache variable for type AccessibilityLargeContentViewHitTestingTransform and conformance AccessibilityLargeContentViewHitTestingTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLargeContentViewHitTestingTransform, &unk_1E1B0A220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLargeContentViewHitTestingTransform and conformance AccessibilityLargeContentViewHitTestingTransform);
  }
  return result;
}

double key path getter for EnvironmentValues.refresh : EnvironmentValues@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t EnvironmentValues.refresh.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<RefreshAction?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RefreshAction?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for RefreshAction?, (uint64_t)&type metadata for RefreshAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RefreshAction?>);
  }
}

_QWORD *key path setter for EnvironmentValues.presentSharingPicker : EnvironmentValues(uint64_t a1)
{
  uint64_t v2[18];

  outlined init with take of Image.Resolved?(a1, (uint64_t)v2, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
  outlined retain of PresentSharingPickerAction?(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PresentSharingPickerAction?);
  specialized EnvironmentValues.subscript.setter(v2);
  return outlined retain of PresentSharingPickerAction?(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of PresentSharingPickerAction?);
}

uint64_t key path getter for EnvironmentValues.presentSharingPicker : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[144];

  EnvironmentValues.presentSharingPicker.getter((uint64_t)v3);
  return outlined init with take of Image.Resolved?((uint64_t)v3, a1, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
}

uint64_t EnvironmentValues.presentSharingPicker.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[144];
  _BYTE v5[144];

  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PresentSharingPickerKey>, (uint64_t)&type metadata for PresentSharingPickerKey, (uint64_t)&protocol witness table for PresentSharingPickerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentSharingPickerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PresentSharingPickerKey>, (uint64_t)&type metadata for PresentSharingPickerKey, (uint64_t)&protocol witness table for PresentSharingPickerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentSharingPickerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  outlined init with take of Image.Resolved?((uint64_t)v5, (uint64_t)v4, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
  return outlined init with take of Image.Resolved?((uint64_t)v4, a1, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
}

uint64_t *outlined release of SharingPickerHostModifier(uint64_t *a1)
{
  outlined consume of SharingPickerHostModifier.Model?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  swift_release();
  return a1;
}

uint64_t *outlined retain of SharingPickerHostModifier(uint64_t *a1)
{
  outlined copy of SharingPickerHostModifier.Model?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  swift_retain();
  return a1;
}

uint64_t outlined consume of SharingPickerSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2 < 0)
  {
    swift_release();
    swift_release();
    outlined consume of AnyShareConfiguration.Storage(a5, a6, a7, a8, a9);
    outlined consume of Text?(a10, a11, a12, a13);
    return outlined consume of Text?(a14, a15, a16, a17);
  }
  else
  {
    swift_release();
    swift_release();
    return outlined consume of AnyIdentifiableShareConfiguration?(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
  }
}

_QWORD *outlined retain of PresentSharingPickerAction?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17]);
  return a1;
}

uint64_t outlined copy of PresentSharingPickerAction?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    swift_retain();
    return outlined copy of SharingPickerHostModifier.Model?(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
  return result;
}

uint64_t outlined consume of AnyIdentifiableShareConfiguration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), void (*a16)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result;

  if (a10 != 1)
  {
    a15(a2, a3, a4, a5, a6);
    a16(a7, a8, a9, a10);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))a16)(a11, a12, a13, a14);
  }
  return result;
}

uint64_t outlined consume of PresentSharingPickerAction?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_release();
    return outlined consume of SharingPickerHostModifier.Model?(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
  return result;
}

uint64_t partial apply for closure #1 in _IncrementalLayoutViewCache.withMutableState<A, B>(type:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t specialized IncrementalStack<>.place(children:context:state:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unint64_t v16;
  unint64_t v17;
  char v18;
  __int128 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  double v23;
  double v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  char v35;
  __int128 v36;
  double v37;
  double v38;
  int v39;
  int v40;
  uint64_t v41;
  double v42;
  char v43;
  uint64_t result;
  uint64_t (*v45)(_QWORD);
  _QWORD *v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  char v68;
  double v69;
  uint64_t v70;
  int v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void (*v82)(_QWORD *, _QWORD);
  uint64_t v83;
  double v84;
  uint64_t v85;
  double v86;
  double v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  int v96;
  uint64_t v97;
  int v98;
  char v99;
  CGFloat v100;
  __int128 v101;
  uint64_t v102;
  double *v103;
  double v104;
  _QWORD v105[43];
  _QWORD __src[42];
  __int128 v107;
  _BYTE v108[32];
  __int128 v109;
  _OWORD __dst[21];
  __int128 v111;
  _BYTE v112[32];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  CGRect v118;

  v8 = a8;
  v16 = *(_QWORD *)(a2 + 280);
  v17 = *(_QWORD *)(a2 + 288);
  v18 = *(_BYTE *)(a2 + 296);
  v19 = *(_OWORD *)(a2 + 104);
  v20 = a8 & 0xFFFFFFFF00000000;
  v21 = *(_OWORD *)(a2 + 136);
  __dst[4] = *(_OWORD *)(a2 + 120);
  __dst[5] = v21;
  __dst[6] = *(_OWORD *)(a2 + 152);
  v22 = *(_OWORD *)(a2 + 72);
  __dst[0] = *(_OWORD *)(a2 + 56);
  __dst[1] = v22;
  __dst[2] = *(_OWORD *)(a2 + 88);
  __dst[3] = v19;
  if ((v18 & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v17, v16));
  ScrollGeometry.visibleRect.getter();
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  specialized IncrementalStack<>.resolvedPlacerProperties(children:context:state:)(a1, a2, a3, a5, a6, a7, v20 | v8 & 1, (uint64_t)__src);
  if (!__src[0])
  {
    v45 = (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>)?;
    v46 = __src;
LABEL_93:
    *(double *)&result = COERCE_DOUBLE(outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v46, v45));
    return result;
  }
  v100 = v24;
  v103 = (double *)a4;
  memcpy(__dst, __src, sizeof(__dst));
  v31 = v107;
  v32 = *(_OWORD *)v108;
  v33 = *(_QWORD *)&v108[16];
  v34 = v108[24];
  v35 = v108[25];
  v36 = v109;
  v111 = v107;
  *(_OWORD *)v112 = *(_OWORD *)v108;
  *(_QWORD *)&v112[16] = *(_QWORD *)&v108[16];
  *(_WORD *)&v112[24] = *(_WORD *)&v108[24];
  v113 = v109;
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  memcpy(v105, __src, 0x150uLL);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v107 = v31;
  *(_OWORD *)v108 = v32;
  *(_QWORD *)&v108[16] = v33;
  v108[24] = v34;
  v108[25] = v35;
  v109 = v36;
  swift_bridgeObjectRetain();
  outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v37 = *(double *)&v112[8];
  v38 = *(double *)&v112[16];
  v107 = v111;
  *(_OWORD *)v108 = *(_OWORD *)v112;
  *(_QWORD *)&v108[16] = *(_QWORD *)&v112[16];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  v109 = v113;
  outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v39 = v112[24];
  v107 = v111;
  *(_QWORD *)v108 = *(_QWORD *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  v109 = v113;
  outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v40 = v112[25];
  v107 = v111;
  *(_QWORD *)v108 = *(_QWORD *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  v109 = v113;
  outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src);
  v114 = v111;
  v115 = *(_OWORD *)v112;
  v116 = *(_OWORD *)&v112[16];
  v117 = v113;
  v41 = specialized IncrementalStack<>.resolveIndexAndPosition(children:context:state:placer:properties:)(a1, a2, a3, (uint64_t)v105, (uint64_t)&v114);
  if ((v43 & 1) != 0)
  {
LABEL_92:
    swift_bridgeObjectRelease();
    outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)v105);
    v45 = (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>);
    v46 = __dst;
    goto LABEL_93;
  }
  v99 = specialized StackPlacement.place(children:from:position:stopping:style:)(a1, v41, 0, 1, v42);
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0 || LOBYTE(v105[39]) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)v105);
    *(double *)&result = COERCE_DOUBLE(outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__dst, (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>)));
    *(_BYTE *)(a4 + 64) = 1;
    return result;
  }
  v96 = v40;
  v98 = v39;
  v47 = v105[32];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v47;
  CGRect.subscript.getter();
  v50 = v48;
  if (*(double *)&v105[35] >= *(double *)&v105[36])
  {
    v48 = *MEMORY[0x1E0C9D628];
    v52 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v53 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v54 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  else
  {
    v51 = v49 - v48;
    if (LOBYTE(v105[4]))
    {
      v52 = *(double *)&v105[35];
    }
    else
    {
      v48 = *(double *)&v105[35];
      v52 = v50;
    }
    if (LOBYTE(v105[4]))
      v53 = v51;
    else
      v53 = *(double *)&v105[36] - *(double *)&v105[35];
    if (LOBYTE(v105[4]))
      v54 = *(double *)&v105[36] - *(double *)&v105[35];
    else
      v54 = v51;
  }
  v118.origin.x = v100;
  v118.origin.y = v26;
  v118.size.width = v28;
  v118.size.height = v30;
  *(CGRect *)(a4 + 8) = CGRectUnion(*(CGRect *)&v48, v118);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v55 = v115;
  v101 = v114;
  v107 = v114;
  *(_OWORD *)v108 = v115;
  *(_OWORD *)&v108[16] = v116;
  v109 = v117;
  outlined retain of PlacementProperties<LazyHGridLayout>((uint64_t)&v114);
  swift_bridgeObjectRelease();
  *(_OWORD *)a3 = v101;
  *(_QWORD *)(a3 + 16) = v55;
  outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v56 = *(_QWORD *)&v112[16];
  v107 = v111;
  *(_OWORD *)v108 = *(_OWORD *)v112;
  *(_QWORD *)&v108[16] = *(_QWORD *)&v112[16];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  v109 = v113;
  *(_QWORD *)(a3 + 72) = *(_QWORD *)&v112[8];
  *(_QWORD *)(a3 + 80) = v56;
  outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v107 = v111;
  *(_QWORD *)v108 = *(_QWORD *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  v109 = v113;
  *(_QWORD *)(a3 + 88) = v113;
  outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v107 = v111;
  *(_QWORD *)v108 = *(_QWORD *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  v109 = v113;
  *(_QWORD *)(a3 + 96) = *((_QWORD *)&v113 + 1);
  *(double *)&result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src));
  v57 = *(_QWORD *)(a3 + 40);
  v58 = v105[33];
  v59 = v105[34];
  if (v57 != *(_QWORD *)(a3 + 48))
    goto LABEL_24;
  if (v105[34] >= v105[33])
  {
    if (v105[34] + 1 < v105[33])
    {
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    if (v105[33] != v105[34] + 1)
    {
LABEL_24:
      if (v105[34] >= v105[33])
      {
        v60 = v105[34] + 1;
        if (v105[34] + 1 < v105[33])
        {
LABEL_97:
          __break(1u);
          __break(1u);
          goto LABEL_98;
        }
        v57 = v105[33];
      }
      else
      {
        v57 = v105[13];
        v60 = v105[13];
      }
      *(_QWORD *)(a3 + 40) = v57;
      *(_QWORD *)(a3 + 48) = v60;
      v61 = *(double *)&v105[35];
      v62 = *(double *)&v105[36];
      if (*(double *)&v105[35] < *(double *)&v105[36])
      {
        if (*(double *)&v105[35] <= *(double *)&v105[36])
        {
LABEL_32:
          *(double *)(a3 + 56) = v61;
          *(double *)(a3 + 64) = v62;
          if ((v99 & 1) != 0)
          {
            if (v59 >= v58)
            {
              v63 = v59 + 1;
              if (v59 + 1 < v58)
              {
LABEL_101:
                __break(1u);
                goto LABEL_102;
              }
            }
            else
            {
              v63 = v105[13];
            }
          }
          else
          {
            v63 = 0;
          }
          *(_QWORD *)(a3 + 24) = v63;
          *(_BYTE *)(a3 + 32) = (v99 & 1) == 0;
          if (v61 < 0.01 && v62 < 0.01)
          {
            v57 = 0;
            *(_QWORD *)(a3 + 40) = 0;
            *(_QWORD *)(a3 + 48) = 0;
          }
          goto LABEL_40;
        }
        __break(1u);
      }
      v61 = *(double *)&v105[15];
      v62 = *(double *)&v105[15];
      goto LABEL_32;
    }
  }
LABEL_40:
  v97 = v59;
  v102 = v58;
  v64 = v105[40];
  v65 = v105[41];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EstimationState.merge(_:)(v64, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(uint64_t *)(a3 + 104);
  if (*(_QWORD *)(result + 16))
  {
    *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(result, *(_QWORD *)(a3 + 112)));
    v67 = *(double *)&result;
    if ((v68 & 1) != 0)
      v67 = 0.0;
    v69 = v66 + v67;
  }
  else
  {
    v69 = 32.0;
  }
  v70 = (uint64_t)v103;
  v71 = v98;
  v72 = *(double *)(a3 + 56);
  v73 = v102;
  v74 = v97;
  if ((_QWORD)v31 != 1)
  {
    if (!(_QWORD)v31)
    {
LABEL_95:
      __break(1u);
      __break(1u);
      goto LABEL_96;
    }
    if (v57 == 0x8000000000000000 && (_QWORD)v31 == -1)
      goto LABEL_99;
    v57 /= (uint64_t)v31;
  }
  if ((v98 & 1) == 0)
  {
    if (v57)
    {
      if (v72 >= 0.01)
        goto LABEL_66;
      v75 = v69 * (double)v57;
    }
    else
    {
      if (fabs(v72) <= 0.01)
        goto LABEL_66;
      v75 = -v72;
    }
    v104 = v75;
    if (fabs(v75) > 0.01)
    {
      v76 = v72 + v75;
      v77 = v75 + *(double *)(a3 + 64);
      if (v76 > v77)
      {
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      *(double *)(a3 + 56) = v76;
      *(double *)(a3 + 64) = v77;
      v103[7] = v75;
      v78 = *(_QWORD *)v103;
      v79 = *(_QWORD *)(*(_QWORD *)v103 + 16);
      if (v79)
      {
        v80 = 0;
        v81 = 40;
        while (1)
        {
          *(double *)&result = COERCE_DOUBLE(swift_isUniquelyReferenced_nonNull_native());
          if ((result & 1) == 0)
          {
            *(double *)&result = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(v78));
            v78 = result;
          }
          if (v80 >= *(_QWORD *)(v78 + 16))
            break;
          ++v80;
          v82 = (void (*)(_QWORD *, _QWORD))_Placement.anchorPosition.modify();
          *(double *)(v83 + 8) = v75 + *(double *)(v83 + 8);
          v82(__src, 0);
          v81 += 72;
          if (v79 == v80)
          {
            v70 = (uint64_t)v103;
            *(_QWORD *)v103 = v78;
            goto LABEL_65;
          }
        }
        __break(1u);
        goto LABEL_95;
      }
LABEL_65:
      *(double *)&result = COERCE_DOUBLE(specialized IncrementalStack<>.log(_:)((uint64_t)&v104));
      v71 = v98;
      v73 = v102;
      v74 = v97;
    }
  }
LABEL_66:
  v84 = *(double *)&v105[36];
  if (*(double *)&v105[35] < *(double *)&v105[36])
  {
    if (*(double *)&v105[35] <= *(double *)&v105[36])
      goto LABEL_70;
    __break(1u);
  }
  v84 = *(double *)&v105[15];
LABEL_70:
  if (v74 >= v73)
  {
    v85 = v74 + 1;
    if (v74 + 1 < v73)
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
  }
  else
  {
    v85 = v105[13];
  }
  v86 = *(double *)(a2 + 40);
  if ((v99 & 1) != 0)
  {
    v87 = vabdd_f64(v84, v86);
    *(_BYTE *)(v70 + 40) = v87 >= 1.0;
    if (v87 >= 1.0)
      specialized IncrementalStack<>.log(_:)(a2, 1);
    goto LABEL_91;
  }
  if (v86 + 0.01 < v84)
  {
    *(_BYTE *)(v70 + 40) = 1;
    specialized IncrementalStack<>.log(_:)(a2, 1);
LABEL_91:
    specialized IncrementalStack<>.log(_:)((double *)a3, v70, v37, v38);
    goto LABEL_92;
  }
  __src[0] = 2 * v31;
  *(double *)&result = COERCE_DOUBLE(_ViewList_Node.estimatedCount(style:)());
  if (__OFSUB__(result, v85))
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v88 = (result - v85) & ~((result - v85) >> 63);
  if ((_QWORD)v31 == 1)
  {
LABEL_84:
    v92 = v84 + v69 * (double)v88;
    if (v92 >= v86)
      v93 = v86;
    else
      v93 = v84 + v69 * (double)v88;
    v94 = v93 * 0.1;
    if ((v71 & v96) != 0)
      v94 = 0.01;
    v95 = vabdd_f64(v86, v92);
    *(_BYTE *)(v70 + 40) = v94 < v95;
    if (v94 < v95)
      specialized IncrementalStack<>.log(_:)();
    goto LABEL_91;
  }
  v89 = __OFADD__(v88, (_QWORD)v31);
  v90 = v88 + v31;
  if (!v89)
  {
    v91 = v90 - 1;
    if (v91 == 0x8000000000000000 && (_QWORD)v31 == -1)
      goto LABEL_104;
    v88 = v91 / (uint64_t)v31;
    goto LABEL_84;
  }
LABEL_103:
  __break(1u);
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v16;
  unint64_t v17;
  char v18;
  __int128 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  double v23;
  double v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  char v35;
  __int128 v36;
  double v37;
  double v38;
  int v39;
  int v40;
  uint64_t v41;
  double v42;
  char v43;
  uint64_t result;
  uint64_t (*v45)(_QWORD);
  _QWORD *v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  char v68;
  double v69;
  uint64_t v70;
  int v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void (*v82)(_QWORD *, _QWORD);
  double *v83;
  double v84;
  uint64_t v85;
  double v86;
  double v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  int v96;
  uint64_t v97;
  int v98;
  char v99;
  CGFloat v100;
  __int128 v101;
  uint64_t v102;
  double *v103;
  double v104;
  _QWORD v105[43];
  _QWORD __src[42];
  __int128 v107;
  _BYTE v108[32];
  __int128 v109;
  _OWORD __dst[21];
  __int128 v111;
  _BYTE v112[32];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  CGRect v118;

  v8 = a8;
  v16 = *(_QWORD *)(a2 + 280);
  v17 = *(_QWORD *)(a2 + 288);
  v18 = *(_BYTE *)(a2 + 296);
  v19 = *(_OWORD *)(a2 + 104);
  v20 = a8 & 0xFFFFFFFF00000000;
  v21 = *(_OWORD *)(a2 + 136);
  __dst[4] = *(_OWORD *)(a2 + 120);
  __dst[5] = v21;
  __dst[6] = *(_OWORD *)(a2 + 152);
  v22 = *(_OWORD *)(a2 + 72);
  __dst[0] = *(_OWORD *)(a2 + 56);
  __dst[1] = v22;
  __dst[2] = *(_OWORD *)(a2 + 88);
  __dst[3] = v19;
  if ((v18 & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v17, v16));
  ScrollGeometry.visibleRect.getter();
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  specialized IncrementalStack<>.resolvedPlacerProperties(children:context:state:)(a1, a2, a3, a5, a6, a7, v20 | v8 & 1, (uint64_t)__src);
  if (!__src[0])
  {
    v45 = (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>)?;
    v46 = __src;
LABEL_93:
    *(double *)&result = COERCE_DOUBLE(outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v46, v45));
    return result;
  }
  v100 = v24;
  v103 = (double *)a4;
  memcpy(__dst, __src, sizeof(__dst));
  v31 = v107;
  v32 = *(_OWORD *)v108;
  v33 = *(_QWORD *)&v108[16];
  v34 = v108[24];
  v35 = v108[25];
  v36 = v109;
  v111 = v107;
  *(_OWORD *)v112 = *(_OWORD *)v108;
  *(_QWORD *)&v112[16] = *(_QWORD *)&v108[16];
  *(_WORD *)&v112[24] = *(_WORD *)&v108[24];
  v113 = v109;
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  memcpy(v105, __src, 0x150uLL);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v107 = v31;
  *(_OWORD *)v108 = v32;
  *(_QWORD *)&v108[16] = v33;
  v108[24] = v34;
  v108[25] = v35;
  v109 = v36;
  swift_bridgeObjectRetain();
  outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v37 = *(double *)&v112[8];
  v38 = *(double *)&v112[16];
  v107 = v111;
  *(_OWORD *)v108 = *(_OWORD *)v112;
  *(_QWORD *)&v108[16] = *(_QWORD *)&v112[16];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  v109 = v113;
  outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v39 = v112[24];
  v107 = v111;
  *(_QWORD *)v108 = *(_QWORD *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  v109 = v113;
  outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v40 = v112[25];
  v107 = v111;
  *(_QWORD *)v108 = *(_QWORD *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  v109 = v113;
  outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src);
  v114 = v111;
  v115 = *(_OWORD *)v112;
  v116 = *(_OWORD *)&v112[16];
  v117 = v113;
  v41 = specialized IncrementalStack<>.resolveIndexAndPosition(children:context:state:placer:properties:)(a1, a2, a3, (uint64_t)v105, (uint64_t)&v114);
  if ((v43 & 1) != 0)
  {
LABEL_92:
    swift_bridgeObjectRelease();
    outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)v105);
    v45 = (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>);
    v46 = __dst;
    goto LABEL_93;
  }
  v99 = specialized StackPlacement.place(children:from:position:stopping:style:)(a1, v41, 0, 1, v42);
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0 || LOBYTE(v105[39]) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)v105);
    *(double *)&result = COERCE_DOUBLE(outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__dst, (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>)));
    *(_BYTE *)(a4 + 64) = 1;
    return result;
  }
  v96 = v40;
  v98 = v39;
  v47 = v105[32];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v47;
  CGRect.subscript.getter();
  v50 = v48;
  if (*(double *)&v105[35] >= *(double *)&v105[36])
  {
    v48 = *MEMORY[0x1E0C9D628];
    v52 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v53 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v54 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  else
  {
    v51 = v49 - v48;
    if (LOBYTE(v105[4]))
    {
      v52 = *(double *)&v105[35];
    }
    else
    {
      v48 = *(double *)&v105[35];
      v52 = v50;
    }
    if (LOBYTE(v105[4]))
      v53 = v51;
    else
      v53 = *(double *)&v105[36] - *(double *)&v105[35];
    if (LOBYTE(v105[4]))
      v54 = *(double *)&v105[36] - *(double *)&v105[35];
    else
      v54 = v51;
  }
  v118.origin.x = v100;
  v118.origin.y = v26;
  v118.size.width = v28;
  v118.size.height = v30;
  *(CGRect *)(a4 + 8) = CGRectUnion(*(CGRect *)&v48, v118);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v55 = v115;
  v101 = v114;
  v107 = v114;
  *(_OWORD *)v108 = v115;
  *(_OWORD *)&v108[16] = v116;
  v109 = v117;
  outlined retain of PlacementProperties<LazyHGridLayout>((uint64_t)&v114);
  swift_bridgeObjectRelease();
  *(_OWORD *)a3 = v101;
  *(_QWORD *)(a3 + 16) = v55;
  outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v56 = *(_QWORD *)&v112[16];
  v107 = v111;
  *(_OWORD *)v108 = *(_OWORD *)v112;
  *(_QWORD *)&v108[16] = *(_QWORD *)&v112[16];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  v109 = v113;
  *(_QWORD *)(a3 + 72) = *(_QWORD *)&v112[8];
  *(_QWORD *)(a3 + 80) = v56;
  outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v107 = v111;
  *(_QWORD *)v108 = *(_QWORD *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  v109 = v113;
  *(_QWORD *)(a3 + 88) = v113;
  outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  v107 = v111;
  *(_QWORD *)v108 = *(_QWORD *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  v109 = v113;
  *(_QWORD *)(a3 + 96) = *((_QWORD *)&v113 + 1);
  *(double *)&result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src));
  v57 = *(_QWORD *)(a3 + 40);
  v58 = v105[33];
  v59 = v105[34];
  if (v57 != *(_QWORD *)(a3 + 48))
    goto LABEL_24;
  if (v105[34] >= v105[33])
  {
    if (v105[34] + 1 < v105[33])
    {
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    if (v105[33] != v105[34] + 1)
    {
LABEL_24:
      if (v105[34] >= v105[33])
      {
        v60 = v105[34] + 1;
        if (v105[34] + 1 < v105[33])
        {
LABEL_97:
          __break(1u);
          __break(1u);
          goto LABEL_98;
        }
        v57 = v105[33];
      }
      else
      {
        v57 = v105[13];
        v60 = v105[13];
      }
      *(_QWORD *)(a3 + 40) = v57;
      *(_QWORD *)(a3 + 48) = v60;
      v61 = *(double *)&v105[35];
      v62 = *(double *)&v105[36];
      if (*(double *)&v105[35] < *(double *)&v105[36])
      {
        if (*(double *)&v105[35] <= *(double *)&v105[36])
        {
LABEL_32:
          *(double *)(a3 + 56) = v61;
          *(double *)(a3 + 64) = v62;
          if ((v99 & 1) != 0)
          {
            if (v59 >= v58)
            {
              v63 = v59 + 1;
              if (v59 + 1 < v58)
              {
LABEL_101:
                __break(1u);
                goto LABEL_102;
              }
            }
            else
            {
              v63 = v105[13];
            }
          }
          else
          {
            v63 = 0;
          }
          *(_QWORD *)(a3 + 24) = v63;
          *(_BYTE *)(a3 + 32) = (v99 & 1) == 0;
          if (v61 < 0.01 && v62 < 0.01)
          {
            v57 = 0;
            *(_QWORD *)(a3 + 40) = 0;
            *(_QWORD *)(a3 + 48) = 0;
          }
          goto LABEL_40;
        }
        __break(1u);
      }
      v61 = *(double *)&v105[15];
      v62 = *(double *)&v105[15];
      goto LABEL_32;
    }
  }
LABEL_40:
  v97 = v59;
  v102 = v58;
  v64 = v105[40];
  v65 = v105[41];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EstimationState.merge(_:)(v64, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(uint64_t *)(a3 + 104);
  if (*(_QWORD *)(result + 16))
  {
    *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(result, *(_QWORD *)(a3 + 112)));
    v67 = *(double *)&result;
    if ((v68 & 1) != 0)
      v67 = 0.0;
    v69 = v66 + v67;
  }
  else
  {
    v69 = 32.0;
  }
  v70 = (uint64_t)v103;
  v71 = v98;
  v72 = *(double *)(a3 + 56);
  v73 = v102;
  v74 = v97;
  if ((_QWORD)v31 != 1)
  {
    if (!(_QWORD)v31)
    {
LABEL_95:
      __break(1u);
      __break(1u);
      goto LABEL_96;
    }
    if (v57 == 0x8000000000000000 && (_QWORD)v31 == -1)
      goto LABEL_99;
    v57 /= (uint64_t)v31;
  }
  if ((v98 & 1) == 0)
  {
    if (v57)
    {
      if (v72 >= 0.01)
        goto LABEL_66;
      v75 = v69 * (double)v57;
    }
    else
    {
      if (fabs(v72) <= 0.01)
        goto LABEL_66;
      v75 = -v72;
    }
    v104 = v75;
    if (fabs(v75) > 0.01)
    {
      v76 = v72 + v75;
      v77 = v75 + *(double *)(a3 + 64);
      if (v76 > v77)
      {
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      *(double *)(a3 + 56) = v76;
      *(double *)(a3 + 64) = v77;
      v103[6] = v75;
      v78 = *(_QWORD *)v103;
      v79 = *(_QWORD *)(*(_QWORD *)v103 + 16);
      if (v79)
      {
        v80 = 0;
        v81 = 40;
        while (1)
        {
          *(double *)&result = COERCE_DOUBLE(swift_isUniquelyReferenced_nonNull_native());
          if ((result & 1) == 0)
          {
            *(double *)&result = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(v78));
            v78 = result;
          }
          if (v80 >= *(_QWORD *)(v78 + 16))
            break;
          ++v80;
          v82 = (void (*)(_QWORD *, _QWORD))_Placement.anchorPosition.modify();
          *v83 = v75 + *v83;
          v82(__src, 0);
          v81 += 72;
          if (v79 == v80)
          {
            v70 = (uint64_t)v103;
            *(_QWORD *)v103 = v78;
            goto LABEL_65;
          }
        }
        __break(1u);
        goto LABEL_95;
      }
LABEL_65:
      *(double *)&result = COERCE_DOUBLE(specialized IncrementalStack<>.log(_:)((uint64_t)&v104));
      v71 = v98;
      v73 = v102;
      v74 = v97;
    }
  }
LABEL_66:
  v84 = *(double *)&v105[36];
  if (*(double *)&v105[35] < *(double *)&v105[36])
  {
    if (*(double *)&v105[35] <= *(double *)&v105[36])
      goto LABEL_70;
    __break(1u);
  }
  v84 = *(double *)&v105[15];
LABEL_70:
  if (v74 >= v73)
  {
    v85 = v74 + 1;
    if (v74 + 1 < v73)
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
  }
  else
  {
    v85 = v105[13];
  }
  v86 = *(double *)(a2 + 32);
  if ((v99 & 1) != 0)
  {
    v87 = vabdd_f64(v84, v86);
    *(_BYTE *)(v70 + 40) = v87 >= 1.0;
    if (v87 >= 1.0)
      specialized IncrementalStack<>.log(_:)(a2, 0);
    goto LABEL_91;
  }
  if (v86 + 0.01 < v84)
  {
    *(_BYTE *)(v70 + 40) = 1;
    specialized IncrementalStack<>.log(_:)(a2, 0);
LABEL_91:
    specialized IncrementalStack<>.log(_:)((double *)a3, v70, v37, v38);
    goto LABEL_92;
  }
  __src[0] = 2 * v31;
  *(double *)&result = COERCE_DOUBLE(_ViewList_Node.estimatedCount(style:)());
  if (__OFSUB__(result, v85))
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v88 = (result - v85) & ~((result - v85) >> 63);
  if ((_QWORD)v31 == 1)
  {
LABEL_84:
    v92 = v84 + v69 * (double)v88;
    if (v92 >= v86)
      v93 = v86;
    else
      v93 = v84 + v69 * (double)v88;
    v94 = v93 * 0.1;
    if ((v71 & v96) != 0)
      v94 = 0.01;
    v95 = vabdd_f64(v86, v92);
    *(_BYTE *)(v70 + 40) = v94 < v95;
    if (v94 < v95)
      specialized IncrementalStack<>.log(_:)();
    goto LABEL_91;
  }
  v89 = __OFADD__(v88, (_QWORD)v31);
  v90 = v88 + v31;
  if (!v89)
  {
    v91 = v90 - 1;
    if (v91 == 0x8000000000000000 && (_QWORD)v31 == -1)
      goto LABEL_104;
    v88 = v91 / (uint64_t)v31;
    goto LABEL_84;
  }
LABEL_103:
  __break(1u);
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t outlined destroy of StackPlacement<LazyVGridLayout>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of StackPlacement<LazyVGridLayout>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized IncrementalStack<>.resolvedPlacerProperties(children:context:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v8;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  double v23;
  uint64_t result;
  double v25;
  __int128 *Value;
  __int128 v27;
  double v28;
  double v29;
  double v30;
  double v31;
  _BOOL4 v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;

  v8 = a7;
  v16 = a7 & 0xFFFFFFFF00000000;
  specialized IncrementalStack<>.placer(children:context:state:)(a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001, (uint64_t)&v62);
  if (!(_QWORD)v62)
  {
    result = outlined destroy of StackPlacement<LazyVGridLayout>?((uint64_t)&v62);
    *(_OWORD *)(a8 + 368) = 0u;
    *(_OWORD *)(a8 + 384) = 0u;
    *(_OWORD *)(a8 + 336) = 0u;
    *(_OWORD *)(a8 + 352) = 0u;
    *(_OWORD *)(a8 + 304) = 0u;
    *(_OWORD *)(a8 + 320) = 0u;
    *(_OWORD *)(a8 + 272) = 0u;
    *(_OWORD *)(a8 + 288) = 0u;
    *(_OWORD *)(a8 + 240) = 0u;
    *(_OWORD *)(a8 + 256) = 0u;
    *(_OWORD *)(a8 + 208) = 0u;
    *(_OWORD *)(a8 + 224) = 0u;
    *(_OWORD *)(a8 + 176) = 0u;
    *(_OWORD *)(a8 + 192) = 0u;
    *(_OWORD *)(a8 + 144) = 0u;
    *(_OWORD *)(a8 + 160) = 0u;
    *(_OWORD *)(a8 + 112) = 0u;
    *(_OWORD *)(a8 + 128) = 0u;
    *(_OWORD *)(a8 + 80) = 0u;
    *(_OWORD *)(a8 + 96) = 0u;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)(a8 + 64) = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)a8 = 0u;
    return result;
  }
  v59 = a6;
  v99 = v62;
  v100 = v63;
  v60 = *((_QWORD *)&v64 + 1);
  v101 = v64;
  v17 = v65;
  v18 = v66;
  v85 = v69;
  v86 = v70;
  v83 = v67;
  v84 = v68;
  v89 = v73;
  v90 = v74;
  v87 = v71;
  v88 = v72;
  v93 = v77;
  v94 = v78;
  v91 = v75;
  v92 = v76;
  v97 = v81;
  v98 = v82;
  v95 = v79;
  v96 = v80;
  v19 = *(_OWORD *)(a2 + 104);
  v20 = *(_OWORD *)(a2 + 136);
  v66 = *(_OWORD *)(a2 + 120);
  v67 = v20;
  v68 = *(_OWORD *)(a2 + 152);
  v21 = *(_OWORD *)(a2 + 72);
  v62 = *(_OWORD *)(a2 + 56);
  v63 = v21;
  v64 = *(_OWORD *)(a2 + 88);
  v65 = v19;
  swift_bridgeObjectRetain();
  ScrollGeometry.visibleRect.getter();
  v23 = v22;
  result = *(unsigned int *)(a2 + 12);
  v25 = 0.0;
  if ((_DWORD)result != *MEMORY[0x1E0CFED28])
  {
    Value = (__int128 *)AGGraphGetValue();
    v27 = Value[1];
    v62 = *Value;
    v63 = v27;
    result = MEMORY[0x18D75BE3C]();
    v25 = v28;
  }
  v30 = *(double *)(a3 + 88);
  v29 = *(double *)(a3 + 96);
  if (v30 <= 0.0 || v23 <= 0.0)
  {
    v32 = 0;
    if (v29 > 0.0 && v25 > 0.0)
LABEL_13:
      v32 = vabdd_f64(v29, v25) >= 0.01;
  }
  else
  {
    v31 = vabdd_f64(v30, v23);
    if (v29 > 0.0 && v25 > 0.0)
    {
      if (v31 >= 0.01)
        goto LABEL_19;
      goto LABEL_13;
    }
    if (v31 >= 0.01)
    {
LABEL_19:
      v33 = *(_QWORD *)(a3 + 104);
      LOBYTE(v32) = 1;
LABEL_20:
      v54 = v32;
      v56 = v8;
      v37 = *(_QWORD *)(a3 + 112);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v57 = specialized Set.init<A>(_:)(v33);
      v55 = a4;
      v38 = MEMORY[0x1E0DEE9D8];
      v39 = a5;
      v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 104) = v40;
      v41 = specialized Dictionary.init(dictionaryLiteral:)(v38);
      v58 = v37;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 112) = v41;
      *(_QWORD *)&v62 = 0;
      v61 = 0;
      v36 = v60;
      specialized IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)((double *)&v62, &v61, v60, *((uint64_t *)&v17 + 1), a1, a3, v55, v39, *(double *)&v17, v59, v16 | v56 & 1, (v16 | v56 & 1) >> 32);
      specialized IncrementalStack<>.log(_:)(a3);
      v42 = swift_bridgeObjectRetain();
      v43 = specialized Set.init<A>(_:)(v42);
      v44 = specialized Set.isSubset(of:)(v57, v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v34 = v44 ^ 1;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (((v44 ^ 1) & 1) != 0)
      {
        v35 = v54;
      }
      else
      {
        v35 = 0;
        *(_QWORD *)(a3 + 104) = v33;
        *(_QWORD *)(a3 + 112) = v58;
      }
      goto LABEL_23;
    }
    v32 = 0;
  }
  v33 = *(_QWORD *)(a3 + 104);
  if (!*(_QWORD *)(v33 + 16) || v32)
    goto LABEL_20;
  v34 = 0;
  v35 = 0;
  v36 = v60;
LABEL_23:
  *(_QWORD *)(a8 + 336) = v36;
  *(_OWORD *)(a8 + 344) = v17;
  *(_OWORD *)(a8 + 360) = v18;
  *(_BYTE *)(a8 + 376) = v35;
  *(_BYTE *)(a8 + 377) = v34 & 1;
  *(double *)(a8 + 384) = v23;
  *(double *)(a8 + 392) = v25;
  v45 = v100;
  *(_OWORD *)a8 = v99;
  *(_OWORD *)(a8 + 16) = v45;
  *(_QWORD *)(a8 + 32) = v101;
  *(_QWORD *)(a8 + 40) = v36;
  *(_OWORD *)(a8 + 48) = v17;
  *(_OWORD *)(a8 + 64) = v18;
  v46 = v96;
  *(_OWORD *)(a8 + 272) = v95;
  *(_OWORD *)(a8 + 288) = v46;
  v47 = v98;
  *(_OWORD *)(a8 + 304) = v97;
  *(_OWORD *)(a8 + 320) = v47;
  v48 = v92;
  *(_OWORD *)(a8 + 208) = v91;
  *(_OWORD *)(a8 + 224) = v48;
  v49 = v94;
  *(_OWORD *)(a8 + 240) = v93;
  *(_OWORD *)(a8 + 256) = v49;
  v50 = v88;
  *(_OWORD *)(a8 + 144) = v87;
  *(_OWORD *)(a8 + 160) = v50;
  v51 = v90;
  *(_OWORD *)(a8 + 176) = v89;
  *(_OWORD *)(a8 + 192) = v51;
  v52 = v84;
  *(_OWORD *)(a8 + 80) = v83;
  *(_OWORD *)(a8 + 96) = v52;
  v53 = v86;
  *(_OWORD *)(a8 + 112) = v85;
  *(_OWORD *)(a8 + 128) = v53;
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  double v14;
  uint64_t v15;

  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  result = Set.init(minimumCapacity:)();
  v3 = 0;
  v15 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v8)
      goto LABEL_25;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_25;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_25;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_25;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
          {
            v3 = v11 + 4;
            if (v11 + 4 >= v8)
              goto LABEL_25;
            v12 = *(_QWORD *)(v4 + 8 * v3);
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_24:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = specialized Set._Variant.insert(_:)(&v14, *(double *)(*(_QWORD *)(a1 + 48) + 8 * v10));
  }
  v13 = v11 + 5;
  if (v13 >= v8)
  {
LABEL_25:
    swift_release();
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_25;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::UInt v14[2];
  uint64_t v15;

  lazy protocol witness table accessor for type EventID and conformance EventID();
  result = Set.init(minimumCapacity:)();
  v3 = 0;
  v15 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v8)
      goto LABEL_25;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_25;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_25;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_25;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
          {
            v3 = v11 + 4;
            if (v11 + 4 >= v8)
              goto LABEL_25;
            v12 = *(_QWORD *)(v4 + 8 * v3);
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_24:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = specialized Set._Variant.insert(_:)(v14, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v10), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v10 + 8));
  }
  v13 = v11 + 5;
  if (v13 >= v8)
  {
LABEL_25:
    swift_release();
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_25;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::UInt v14;
  uint64_t v15;

  lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID();
  result = Set.init(minimumCapacity:)();
  v3 = 0;
  v15 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v8)
      goto LABEL_25;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_25;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_25;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_25;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
          {
            v3 = v11 + 4;
            if (v11 + 4 >= v8)
              goto LABEL_25;
            v12 = *(_QWORD *)(v4 + 8 * v3);
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_24:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = specialized Set._Variant.insert(_:)(&v14, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
  }
  v13 = v11 + 5;
  if (v13 >= v8)
  {
LABEL_25:
    swift_release();
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_25;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::UInt *v4;
  Swift::UInt v5;
  Swift::UInt v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type UniqueID and conformance UniqueID();
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (Swift::UInt *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for URL();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v21 - v10;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, v3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v21 - v14;
  v16 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, v3, MEMORY[0x1E0CB0018]);
  v22 = Set.init(minimumCapacity:)();
  if (v16)
  {
    v17 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v21 = *(_QWORD *)(v4 + 72);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v18(v15, v17, v2);
      v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v19(v15, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v15, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v15, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v11, v7);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v2);
      v17 += v21;
      if (!--v16)
        goto LABEL_7;
    }
  }
  else
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_7:
    v19(v15, 1, 1, v2);
  }
  return v22;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for UTType();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, MEMORY[0x1E0DF0340]);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v16 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, v11, MEMORY[0x1E0DF0358]);
  result = Set.init(minimumCapacity:)();
  v17 = result;
  if (v10)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v15(v5, v13, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v9, v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      v13 += v14;
      --v10;
    }
    while (v10);
    return v17;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[48];
  _BYTE v6[48];
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role();
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      outlined init with copy of ToolbarItemPlacement.Role(v4, (uint64_t)v5);
      specialized Set._Variant.insert(_:)((uint64_t)v6, (uint64_t)v5);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v6);
      v4 += 48;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[40];
  _BYTE v6[40];
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation();
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      outlined init with copy of Toolbar.BarLocation(v4, (uint64_t)v5);
      specialized Set._Variant.insert(_:)((uint64_t)v6, (uint64_t)v5);
      outlined destroy of Toolbar.BarLocation((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t outlined retain of PlacementProperties<LazyHGridLayout>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of PlacementProperties<LazyHGridLayout>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized StackPlacement.log(_:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  return specialized StackPlacement.log(_:)(a3, a4, a5, a1, a2, 0x8000000187BD6020);
}

{
  return specialized StackPlacement.log(_:)(a3, a4, a5, a1, a2, 0x8000000187BD5BF0);
}

{
  return specialized StackPlacement.log(_:)(a3, a4, a5, a1, a2, 0x8000000187BD5F70);
}

{
  return specialized StackPlacement.log(_:)(a3, a4, a5, a1, a2, 0x8000000187BD5D00);
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGRect>, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PreferencesOutputs>, MEMORY[0x1E0CE43F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TabEntry>, (uint64_t)&type metadata for TabEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 272);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[272 * v8])
      memmove(v12, v13, 272 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<ViewList>>, (uint64_t (*)(uint64_t))type metadata accessor for Attribute<ViewList>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<UniqueID>, MEMORY[0x1E0CE7910], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ScrollableLayoutItem>, (uint64_t)&type metadata for _ScrollableLayoutItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8])
      memmove(v12, v13, 104 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TabCustomizationID>, (uint64_t)&type metadata for TabCustomizationID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, MEMORY[0x1E0CE2910], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 40 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScalarDeceleration>, (uint64_t)&type metadata for ScalarDeceleration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 88 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(Int, Int)>();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<EndChildGeometries.CodableViewGeometry>, (uint64_t)&type metadata for EndChildGeometries.CodableViewGeometry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8 << 6);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<InterfaceOrientation>, (uint64_t)&type metadata for InterfaceOrientation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<NavigationSplitViewColumnWidth?>();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 40 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItem>, (uint64_t)&type metadata for PlatformItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 336);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[336 * v8])
      memmove(v12, v13, 336 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)>();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 56 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationItemDescription.Group>, (uint64_t)&type metadata for NavigationItemDescription.Group, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationItemDescription.Item>, (uint64_t)&type metadata for NavigationItemDescription.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TabItem>, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8])
      memmove(v12, v13, 104 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement>, (uint64_t)&type metadata for ToolbarPlacement, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<HostingScrollView.PlatformGroupContainer.SubstitutionCandidate>, (uint64_t)&type metadata for HostingScrollView.PlatformGroupContainer.SubstitutionCandidate, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<ClosedRange<CGFloat>>();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID.Canonical>, MEMORY[0x1E0CE1C78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<StackItem>, (uint64_t)&type metadata for StackItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.ID>, (uint64_t)&type metadata for ToolbarStorage.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusableFillerBounds>, (uint64_t)&type metadata for FocusableFillerBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 112 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_Preview>, (uint64_t)&type metadata for _Preview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 120);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[120 * v8])
      memmove(v12, v13, 120 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Gradient.Stop>, MEMORY[0x1E0CE7808], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.Entry.ID>, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8])
      memmove(v12, v13, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GeneralItem>, (uint64_t)&type metadata for GeneralItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = v8 << 6;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityNodeProxy>, (uint64_t)&type metadata for AccessibilityNodeProxy, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 184);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[184 * v8])
      memmove(v12, v13, 184 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SectionConfiguration>, (uint64_t)&type metadata for SectionConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 184);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[184 * v8])
      memmove(v12, v13, 184 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationRequest>, (uint64_t)&type metadata for NavigationRequest, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[136 * v8])
      memmove(v12, v13, 136 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for CGRect);
}

uint64_t type metadata accessor for IncrementalLayoutViewCache()
{
  return objc_opt_self();
}

uint64_t _IncrementalLayoutViewCache.withMutableState<A, B>(type:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = v5;
  v22 = a2;
  v23 = a5;
  v31 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)v6;
  v12 = *(_QWORD *)(*(_QWORD *)v6 + 320);
  v11 = *(_QWORD *)(*(_QWORD *)v6 + 328);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v15);
  v17 = (char *)&v21 - v16;
  v18 = v6 + *(_QWORD *)(v10 + 344);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v18, AssociatedTypeWitness);
  v25 = v12;
  v26 = a3;
  v27 = a4;
  v28 = v11;
  v29 = a1;
  v30 = v22;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)partial apply for closure #1 in _IncrementalLayoutViewCache.withMutableState<A, B>(type:_:), (uint64_t)v24, AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], a4, MEMORY[0x1E0DEDD18], v19);
  $defer #1 <A><A1, B1>() in _IncrementalLayoutViewCache.withMutableState<A, B>(type:_:)(v6, (uint64_t)v17);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
}

uint64_t partial apply for closure #1 in _IncrementalLayoutViewCache.copyState<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 24) - 8) + 16))(a2, a1);
}

_QWORD *initializeWithCopy for _IncrementalStack_State(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ~v7;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64);
  if (!v6)
  {
    if (!*((_BYTE *)a2 + v9))
      goto LABEL_17;
    v10 = (*((unsigned __int8 *)a2 + v9) - 1) << (8 * v9);
    if (v9 > 3)
      v10 = 0;
    if ((_DWORD)v9)
    {
      if (v9 <= 3)
        v11 = ((v7 + 16) & ~(_DWORD)v7) + *(_DWORD *)(v5 + 64);
      else
        v11 = 4;
      __asm { BR              X11 }
    }
    if (v10 == -1)
      goto LABEL_17;
LABEL_13:
    if (v6)
      v12 = v9;
    else
      v12 = v9 + 1;
    memcpy(a1, a2, v12);
    goto LABEL_19;
  }
  if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v5 + 48))(((((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v8, *(unsigned int *)(v5 + 84), AssociatedTypeWitness))
  {
    goto LABEL_13;
  }
LABEL_17:
  *a1 = *a2;
  v13 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v13 + v7 + 8) & v8, ((unint64_t)v14 + v7 + 8) & v8, AssociatedTypeWitness);
  if (!v6)
    *((_BYTE *)a1 + v9) = 0;
LABEL_19:
  if (v6)
    v15 = v9;
  else
    v15 = v9 + 1;
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = (unint64_t)(v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = v20;
  v21 = (_OWORD *)((unint64_t)(v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_OWORD *)((unint64_t)(v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  v23 = (_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_OWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = (_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = (_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFF8);
  *v29 = *v30;
  v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t $defer #1 <A><A1, B1>() in _IncrementalLayoutViewCache.withMutableState<A, B>(type:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v12 - v8, a2, AssociatedTypeWitness, v7);
  v10 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 344);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v10, v9, AssociatedTypeWitness);
  return swift_endAccess();
}

_QWORD *assignWithTake for _IncrementalStack_State(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(unint64_t, uint64_t, uint64_t);
  int v11;
  int v12;
  char v13;
  int v14;
  int v15;
  int v16;
  int v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ~v7;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64);
  if ((_DWORD)v6)
  {
    v10 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    v11 = v10(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v8, *(unsigned int *)(v5 + 84), AssociatedTypeWitness);
    v12 = v10(((((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v8, v6, AssociatedTypeWitness);
    if (v11)
    {
      if (!v12)
        goto LABEL_33;
LABEL_27:
      if ((_DWORD)v6)
        v18 = v9;
      else
        v18 = v9 + 1;
      memcpy(a1, a2, v18);
      goto LABEL_35;
    }
    goto LABEL_25;
  }
  v13 = 8 * v9;
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_16;
  v14 = (*((unsigned __int8 *)a1 + v9) - 1) << v13;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v9)
  {
    if (v9 <= 3)
      v15 = ((v7 + 16) & ~(_DWORD)v7) + *(_DWORD *)(v5 + 64);
    else
      v15 = 4;
    __asm { BR              X12 }
  }
  if (v14 == -1)
  {
LABEL_16:
    if (!*((_BYTE *)a2 + v9))
      goto LABEL_31;
    v16 = (*((unsigned __int8 *)a2 + v9) - 1) << v13;
    if (v9 > 3)
      v16 = 0;
    if ((_DWORD)v9)
    {
      if (v9 <= 3)
        v17 = ((v7 + 16) & ~(_DWORD)v7) + *(_DWORD *)(v5 + 64);
      else
        v17 = 4;
      __asm { BR              X11 }
    }
    v12 = v16 + 1;
LABEL_25:
    if (v12)
    {
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v8, AssociatedTypeWitness);
      goto LABEL_27;
    }
LABEL_31:
    *a1 = *a2;
    v19 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))(((unint64_t)v19 + v7 + 8) & v8, ((unint64_t)v20 + v7 + 8) & v8, AssociatedTypeWitness);
    goto LABEL_35;
  }
  if (*((_BYTE *)a2 + v9) && (*((unsigned __int8 *)a2 + v9) - 1) << v13 != -1)
    goto LABEL_27;
LABEL_33:
  *a1 = *a2;
  v21 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)v21 + v7 + 8) & v8, ((unint64_t)v22 + v7 + 8) & v8, AssociatedTypeWitness);
  if (!(_DWORD)v6)
    *((_BYTE *)a1 + v9) = 0;
LABEL_35:
  if ((_DWORD)v6)
    v23 = v9;
  else
    v23 = v9 + 1;
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = (unint64_t)(v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = (unint64_t)(v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v26 = v28;
  v29 = (_QWORD *)((unint64_t)(v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)((unint64_t)(v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v29[1] = v30[1];
  v31 = (_QWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v31[1] = v32[1];
  v33 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  v34 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v33 = *v34;
  v33[1] = v34[1];
  v35 = (_QWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFF8);
  v36 = (_QWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFF8);
  *v35 = *v36;
  v37 = (_QWORD *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFF8);
  v38 = (_QWORD *)(((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFF8);
  *v37 = *v38;
  v39 = (_QWORD *)(((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8);
  v40 = (_QWORD *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v39 = *v40;
  swift_bridgeObjectRelease();
  v39[1] = v40[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t closure #1 in closure #1 in _ScrollViewBoundsModifier2.Child.value.getter(uint64_t (**a1)(_BYTE *, double, double), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v5)(_BYTE *, double, double);
  __int128 *Value;
  __int128 v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[48];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;

  v5 = *a1;
  Value = (__int128 *)AGGraphGetValue();
  v7 = Value[1];
  v21 = *Value;
  v22 = v7;
  v8 = MEMORY[0x18D75BE3C]();
  v10 = v9;
  *(_QWORD *)v16 = *(_QWORD *)a4;
  *(_OWORD *)&v16[8] = *(_OWORD *)(a4 + 8);
  *(_OWORD *)&v16[24] = *(_OWORD *)(a4 + 24);
  ViewTransform.containingScrollGeometry.getter();
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  if ((v28 & 1) == 0)
  {
    *(_OWORD *)v16 = v21;
    *(_OWORD *)&v16[16] = v22;
    *(_OWORD *)&v16[32] = v23;
    v17 = v24;
    v18 = v25;
    v19 = v26;
    v20 = v27;
    ScrollGeometry.bounds.getter();
  }
  *(_QWORD *)v16 = v11;
  *(_QWORD *)&v16[8] = v12;
  *(_QWORD *)&v16[16] = v13;
  *(_QWORD *)&v16[24] = v14;
  v16[32] = v28;
  return v5(v16, v8, v10);
}

double _IncrementalLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X2>, uint64_t a3@<X3>, char *a4@<X4>, int *a5@<X5>, char a6@<W6>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[40];

  v24 = a1[1];
  v25 = *a1;
  v23 = *a2;
  v9 = *((_QWORD *)a2 + 2);
  v10 = *((_QWORD *)a2 + 3);
  v11 = *a4;
  v12 = *a5;
  *(_QWORD *)v48 = *(_QWORD *)a3;
  *(_OWORD *)&v48[8] = *(_OWORD *)(a3 + 8);
  *(_OWORD *)&v48[24] = *(_OWORD *)(a3 + 24);
  *(double *)&v13 = MEMORY[0x18D755E9C]();
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v14, v13));
  v33 = v23;
  *(_QWORD *)&v34 = v9;
  *((_QWORD *)&v34 + 1) = v10;
  v15 = MEMORY[0x18D75BE3C]();
  v17 = v16;
  v41 = *(_OWORD *)v48;
  v42 = *(_OWORD *)&v48[16];
  *(_QWORD *)&v43 = *(_QWORD *)&v48[32];
  ViewTransform.containingScrollGeometry.getter();
  if ((v40 & 1) != 0)
  {
    static ScrollGeometry.size(_:)();
  }
  else
  {
    v41 = v23;
    v42 = v34;
    v43 = v35;
    v44 = v36;
    v45 = v37;
    v46 = v38;
    v47 = v39;
  }
  LOBYTE(v33) = v11;
  ScrollGeometry.applyLayoutDirection(_:contentSize:)();
  v26 = *(_OWORD *)v48;
  v27 = *(_OWORD *)&v48[16];
  *(_QWORD *)&v28 = *(_QWORD *)&v48[32];
  ViewTransform.nearestScrollGeometry.getter();
  if ((v40 & 1) != 0)
  {
    static ScrollGeometry.size(_:)();
  }
  else
  {
    v26 = v33;
    v27 = v34;
    v28 = v35;
    v29 = v36;
    v30 = v37;
    v31 = v38;
    v32 = v39;
  }
  v18 = ScrollGeometry.applyLayoutDirection(_:contentSize:)();
  v19 = MEMORY[0x18D755E9C](v18);
  v21 = v20;
  swift_release();
  *(_QWORD *)a7 = v25;
  *(_QWORD *)(a7 + 8) = v24;
  *(double *)(a7 + 16) = v19;
  *(_QWORD *)(a7 + 24) = v21;
  *(double *)(a7 + 32) = v15;
  *(_QWORD *)(a7 + 40) = v17;
  *(_DWORD *)(a7 + 48) = v12;
  *(_OWORD *)(a7 + 56) = v41;
  *(_OWORD *)(a7 + 72) = v42;
  *(_OWORD *)(a7 + 88) = v43;
  *(_OWORD *)(a7 + 104) = v44;
  *(_OWORD *)(a7 + 120) = v45;
  *(_OWORD *)(a7 + 136) = v46;
  *(_OWORD *)(a7 + 152) = v47;
  *(_OWORD *)(a7 + 168) = v26;
  *(_OWORD *)(a7 + 184) = v27;
  *(_OWORD *)(a7 + 200) = v28;
  *(_OWORD *)(a7 + 216) = v29;
  *(_OWORD *)(a7 + 232) = v30;
  *(_OWORD *)(a7 + 248) = v31;
  result = *(double *)&v32;
  *(_OWORD *)(a7 + 264) = v32;
  *(double *)(a7 + 280) = v15;
  *(_QWORD *)(a7 + 288) = v17;
  *(_BYTE *)(a7 + 296) = a6 & 1;
  return result;
}

uint64_t closure #1 in closure #1 in _ScrollViewBoundsModifier.Child.value.getter(uint64_t (**a1)(_BYTE *), uint64_t a2)
{
  uint64_t (*v2)(_BYTE *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[48];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v2 = *a1;
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *(_OWORD *)&v8[8] = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v8[24] = *(_OWORD *)(a2 + 24);
  ViewTransform.containingScrollGeometry.getter();
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  if ((v20 & 1) == 0)
  {
    *(_OWORD *)v8 = v13;
    *(_OWORD *)&v8[16] = v14;
    *(_OWORD *)&v8[32] = v15;
    v9 = v16;
    v10 = v17;
    v11 = v18;
    v12 = v19;
    ScrollGeometry.bounds.getter();
  }
  *(_QWORD *)v8 = v3;
  *(_QWORD *)&v8[8] = v4;
  *(_QWORD *)&v8[16] = v5;
  *(_QWORD *)&v8[24] = v6;
  v8[32] = v20;
  return v2(v8);
}

uint64_t destroy for StackPlacement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (a1 + v4 + (v7 | 7) + 1) & ~(v7 | 7);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))((v7 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v7, AssociatedTypeWitness);
  v9 = ((((((((*(_QWORD *)(v6 + 64) + ((v7 + 16) & ~v7) + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
         + 43) & 0xFFFFFFFFFFFFFFF8)
       + 31) & 0xFFFFFFFFFFFFFFF8)
     + 15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (_QWORD *)(((v9 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v10 >= 0xFFFFFFFFuLL)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v10 + 2));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StackPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  _DWORD *v20;
  unint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(unint64_t, unint64_t, uint64_t);
  int v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD *v47;
  _QWORD *v48;
  _OWORD *v49;
  _OWORD *v50;
  _OWORD *v51;
  _OWORD *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = (_BYTE *)(v6 + a2);
  *(_BYTE *)(v6 + a1) = *v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 1;
  v13 = (_QWORD *)((v12 + v7) & ~(v11 | 7));
  v14 = (_QWORD *)((unint64_t)&v8[v12] & ~(v11 | 7));
  *v13 = *v14;
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)v15 + v11 + 8) & ~v11, ((unint64_t)v16 + v11 + 8) & ~v11, AssociatedTypeWitness);
  v17 = *(_QWORD *)(v10 + 64) + ((v11 + 16) & ~v11) + 7;
  v18 = (_OWORD *)(((unint64_t)v13 + v17) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_OWORD *)(((unint64_t)v14 + v17) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_DWORD *)(((unint64_t)v19 + 19) & 0xFFFFFFFFFFFFFFF8);
  v21 = (unint64_t)v20 + 43;
  v22 = (_DWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v20;
  v23 = ((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = v25;
  v26 = ((unint64_t)v22 + 27) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)v20 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  v28 = (_QWORD *)(((unint64_t)v22 + 43) & 0xFFFFFFFFFFFFFFF8);
  v29 = (v21 & 0xFFFFFFFFFFFFFFF8) + 15;
  v30 = (v21 & 0xFFFFFFFFFFFFFFF8) + 31;
  *v28 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  v31 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  v29 &= 0xFFFFFFFFFFFFFFF8;
  v32 = *(_QWORD *)v29;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v31 = v32;
  v30 &= 0xFFFFFFFFFFFFF8uLL;
  v33 = (_QWORD *)(((unint64_t)v28 + 31) & 0xFFFFFFFFFFFFF8);
  *v33 = *(_QWORD *)v30;
  v34 = (_QWORD *)((v30 + 15) & 0xFFFFFFFFFFFFF8);
  v35 = (_QWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFF8);
  *v35 = *v34;
  v36 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  v37 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  v38 = *(_QWORD *)v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v38 < 0xFFFFFFFF)
  {
    v43 = *(_OWORD *)(v37 + 16);
    *(_OWORD *)v36 = *(_OWORD *)v37;
    *(_OWORD *)(v36 + 16) = v43;
    v44 = *(_OWORD *)(v37 + 32);
    v45 = *(_OWORD *)(v37 + 48);
    v46 = *(_OWORD *)(v37 + 64);
    *(_OWORD *)(v36 + 79) = *(_OWORD *)(v37 + 79);
    *(_OWORD *)(v36 + 48) = v45;
    *(_OWORD *)(v36 + 64) = v46;
    *(_OWORD *)(v36 + 32) = v44;
  }
  else
  {
    *(_QWORD *)v36 = v38;
    *(_DWORD *)(v36 + 8) = *(_DWORD *)(v37 + 8);
    v39 = *(_QWORD *)(v37 + 40);
    *(_QWORD *)(v36 + 40) = v39;
    *(_QWORD *)(v36 + 48) = *(_QWORD *)(v37 + 48);
    v40 = **(void (***)(unint64_t, unint64_t, uint64_t))(v39 - 8);
    swift_retain();
    v40(v36 + 16, v37 + 16, v39);
    *(_DWORD *)(v36 + 56) = *(_DWORD *)(v37 + 56);
    *(_DWORD *)(v36 + 60) = *(_DWORD *)(v37 + 60);
    *(_QWORD *)(v36 + 64) = *(_QWORD *)(v37 + 64);
    *(_QWORD *)(v36 + 72) = *(_QWORD *)(v37 + 72);
    v41 = *(_DWORD *)(v37 + 80);
    *(_BYTE *)(v36 + 84) = *(_BYTE *)(v37 + 84);
    *(_DWORD *)(v36 + 80) = v41;
    v42 = *(_DWORD *)(v37 + 91);
    *(_DWORD *)(v36 + 88) = *(_DWORD *)(v37 + 88);
    *(_DWORD *)(v36 + 91) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v47 = (_QWORD *)((v36 + 102) & 0xFFFFFFFFFFFFF8);
  v48 = (_QWORD *)((v37 + 102) & 0xFFFFFFFFFFFFFFF8);
  *v47 = *v48;
  v49 = (_OWORD *)(((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8);
  v50 = (_OWORD *)(((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v49 = *v50;
  v51 = (_OWORD *)(((unint64_t)v49 + 23) & 0xFFFFFFFFFFFFFFF8);
  v52 = (_OWORD *)(((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v51 = *v52;
  v53 = ((unint64_t)v51 + 23) & 0xFFFFFFFFFFFFFFF8;
  v54 = ((unint64_t)v52 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v53 = *(_OWORD *)v54;
  *(_BYTE *)(v53 + 16) = *(_BYTE *)(v54 + 16);
  v55 = (_QWORD *)(((unint64_t)v51 + 47) & 0xFFFFFFFFFFFFFFF8);
  v56 = (_QWORD *)(((unint64_t)v52 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v55 = *v56;
  v55[1] = v56[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for LazyHGridLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_IncrementalLayout_PlacedChild>, (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size_2(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 72);
  return v4;
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<_IncrementalLayout_Child>, (uint64_t)&type metadata for _IncrementalLayout_Child, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (Int, Int));
}

{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridLayout.Cache.Cell>, (uint64_t)&type metadata for GridLayout.Cache.Cell, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size_2(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 104);
  return v4;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridLayout.Cache.RowOrColumn>, (uint64_t)&type metadata for GridLayout.Cache.RowOrColumn, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size_2(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 + 31;
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 6);
  return v4;
}

{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.RowIDs.Chunk>, (uint64_t)&type metadata for SectionAccumulator.RowIDs.Chunk, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size_2(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 48);
  return v4;
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityLinkElement>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityLinkElement);
}

{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ListUpdate<Int, Int>>, (uint64_t (*)(uint64_t))type metadata accessor for ListUpdate<Int, Int>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size_2(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  return v4;
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>, (uint64_t)type metadata accessor for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
}

{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<UInt8>, MEMORY[0x1E0DEDE70], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size_2(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t outlined destroy of ScrollStateRequestTransform(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE6208] - 8) + 8))();
  return a1;
}

uint64_t outlined init with copy of ScrollStateRequestTransform(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE6208] - 8) + 16))(a2, a1);
  return a2;
}

unint64_t type metadata accessor for (_:)()
{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for _ContiguousArrayStorage<CVarArg>(255, &lazy cache variable for type metadata for [ScrollStateRequest], &lazy cache variable for type metadata for ScrollStateRequest, MEMORY[0x1E0CE44C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]();
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for [NavigationDestinationResolverBase], (uint64_t (*)(uint64_t))type metadata accessor for NavigationDestinationResolverBase, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for ()?, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSUserActivity);
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [ViewIdentity : ConfirmationDialog]();
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [Namespace.ID : UpdateViewDestinationRequest]();
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for TextSelection(255);
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration]();
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EditMenuPresentation?, (uint64_t)&type metadata for EditMenuPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [ViewIdentity : AlertStorage]();
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for FallbackDelegateBox<NSObject>(255, (unint64_t *)&lazy cache variable for type metadata for [BLSAlwaysOnTimeline], &lazy cache variable for type metadata for BLSAlwaysOnTimeline, 0x1E0D00F38, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for [SharingActivityPickerPresentation], (uint64_t)&type metadata for SharingActivityPickerPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

double _IncrementalLayout_PlacedChild.size.getter()
{
  double v0;
  double v1;

  if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
  {
    static LayoutComputer.defaultValue.getter();
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
  }
  LayoutComputer.sizeThatFits(_:)();
  v1 = v0;
  swift_release();
  return v1;
}

uint64_t specialized Set._Variant.insert(_:)(double *a1, double a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t result;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v9, isUniquelyReferenced_nonNull_native, a2);
    *v3 = v15;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(v6 + 48);
  v11 = *(double *)(v10 + 8 * v9);
  if (v11 != a2)
  {
    v13 = ~v8;
    do
    {
      v9 = (v9 + 1) & v13;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_8;
      v11 = *(double *)(v10 + 8 * v9);
    }
    while (v11 != a2);
  }
  result = 0;
  a2 = v11;
LABEL_9:
  *a1 = a2;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, char a2, double a3)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v4 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a2 & 1) != 0)
    goto LABEL_14;
  if ((a2 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  result = static Hasher._hash(seed:_:)();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  v4 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(double *)(v10 + 8 * v4) == a3)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        v4 = (v4 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
          break;
        if (*(double *)(v10 + 8 * v4) == a3)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (v4 >> 6) + 56) |= 1 << v4;
  *(double *)(*(_QWORD *)(v12 + 48) + 8 * v4) = a3;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t type metadata accessor for ContainerBackgroundHost(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t specialized IncrementalStack<>.place(children:context:state:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v7;
  unint64_t v14;
  unint64_t v15;
  char v16;
  __int128 v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  char v32;
  char v33;
  __int128 v34;
  __int128 v35;
  int v36;
  int v37;
  uint64_t v38;
  double v39;
  char v40;
  char v41;
  uint64_t result;
  uint64_t (*v43)(_QWORD);
  _BYTE *v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  char v65;
  double v66;
  int v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void (*v78)(_QWORD *, _QWORD);
  uint64_t v79;
  double v80;
  uint64_t v81;
  double v82;
  double v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  double v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  _QWORD v97[42];
  _QWORD __src[41];
  _BYTE v99[48];
  __int128 v100;
  _BYTE __dst[328];
  _BYTE v102[48];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  CGRect v108;

  v7 = a7;
  v14 = *(_QWORD *)(a2 + 280);
  v15 = *(_QWORD *)(a2 + 288);
  v16 = *(_BYTE *)(a2 + 296);
  v17 = *(_OWORD *)(a2 + 104);
  v18 = a7 & 0xFFFFFFFF00000000;
  v19 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)&__dst[64] = *(_OWORD *)(a2 + 120);
  *(_OWORD *)&__dst[80] = v19;
  *(_OWORD *)&__dst[96] = *(_OWORD *)(a2 + 152);
  v20 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)__dst = *(_OWORD *)(a2 + 56);
  *(_OWORD *)&__dst[16] = v20;
  *(_OWORD *)&__dst[32] = *(_OWORD *)(a2 + 88);
  *(_OWORD *)&__dst[48] = v17;
  if ((v16 & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v15, v14));
  ScrollGeometry.visibleRect.getter();
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  specialized IncrementalStack<>.resolvedPlacerProperties(children:context:state:)(a1, a2, a3, a5, a6, v18 | v7 & 1, (uint64_t)__src);
  if (!__src[17])
  {
    v43 = (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>)?;
    v44 = __src;
LABEL_93:
    *(double *)&result = COERCE_DOUBLE(outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v44, v43));
    return result;
  }
  v95 = a4;
  memcpy(__dst, __src, sizeof(__dst));
  v29 = *(_QWORD *)v99;
  v30 = *(_OWORD *)&v99[8];
  v31 = *(_OWORD *)&v99[24];
  v32 = v99[40];
  v33 = v99[41];
  v34 = v100;
  *(_QWORD *)v102 = *(_QWORD *)v99;
  *(_OWORD *)&v102[8] = *(_OWORD *)&v99[8];
  *(_OWORD *)&v102[24] = *(_OWORD *)&v99[24];
  v102[40] = v99[40];
  v102[41] = v99[41];
  v103 = v100;
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  memcpy(v97, __src, 0x148uLL);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(_QWORD *)v99 = v29;
  *(_OWORD *)&v99[8] = v30;
  *(_OWORD *)&v99[24] = v31;
  v99[40] = v32;
  v99[41] = v33;
  v100 = v34;
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  v35 = *(_OWORD *)&v102[24];
  *(_QWORD *)v99 = *(_QWORD *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  v100 = v103;
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  v36 = v102[40];
  *(_QWORD *)v99 = *(_QWORD *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  v100 = v103;
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  v37 = v102[41];
  *(_QWORD *)v99 = *(_QWORD *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  v100 = v103;
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  v104 = *(_OWORD *)v102;
  v105 = *(_OWORD *)&v102[16];
  v106 = *(_OWORD *)&v102[32];
  v107 = v103;
  v38 = specialized IncrementalStack<>.resolveIndexAndPosition(children:context:state:placer:properties:)(a1, a2, a3, (uint64_t)v97, (uint64_t)&v104);
  if ((v40 & 1) != 0)
  {
LABEL_92:
    outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)v97);
    v43 = (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>);
    v44 = __dst;
    goto LABEL_93;
  }
  v41 = specialized StackPlacement.place(children:from:position:stopping:style:)(a1, v38, 0, 1, v39);
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0 || LOBYTE(v97[38]) == 1)
  {
    outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)v97);
    *(double *)&result = COERCE_DOUBLE(outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__dst, (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>)));
    *(_BYTE *)(v95 + 64) = 1;
    return result;
  }
  v92 = v36;
  v45 = v97[31];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)v95 = v45;
  CGRect.subscript.getter();
  v48 = v46;
  if (*(double *)&v97[34] >= *(double *)&v97[35])
  {
    v46 = *MEMORY[0x1E0C9D628];
    v50 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v51 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v52 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  else
  {
    v49 = v47 - v46;
    if (LOBYTE(v97[3]))
    {
      v50 = *(double *)&v97[34];
    }
    else
    {
      v46 = *(double *)&v97[34];
      v50 = v48;
    }
    if (LOBYTE(v97[3]))
      v51 = v49;
    else
      v51 = *(double *)&v97[35] - *(double *)&v97[34];
    if (LOBYTE(v97[3]))
      v52 = *(double *)&v97[35] - *(double *)&v97[34];
    else
      v52 = v49;
  }
  v108.origin.x = v22;
  v108.origin.y = v24;
  v108.size.width = v26;
  v108.size.height = v28;
  *(CGRect *)(v95 + 8) = CGRectUnion(*(CGRect *)&v46, v108);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  v53 = v105;
  *(_OWORD *)v99 = v104;
  *(_OWORD *)&v99[16] = v105;
  *(_OWORD *)&v99[32] = v106;
  v100 = v107;
  *(_OWORD *)a3 = v104;
  *(_QWORD *)(a3 + 16) = v53;
  *(_BYTE *)(a3 + 24) = 0;
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(_QWORD *)v99 = *(_QWORD *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  v100 = v103;
  *(_OWORD *)(a3 + 80) = *(_OWORD *)&v102[24];
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(_QWORD *)v99 = *(_QWORD *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  v100 = v103;
  *(_QWORD *)(a3 + 96) = v103;
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(_QWORD *)v99 = *(_QWORD *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  v100 = v103;
  *(_QWORD *)(a3 + 104) = *((_QWORD *)&v103 + 1);
  *(double *)&result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src));
  v54 = *(_QWORD *)(a3 + 48);
  v55 = v97[32];
  v56 = v97[33];
  if (v54 != *(_QWORD *)(a3 + 56))
    goto LABEL_24;
  if (v97[33] >= v97[32])
  {
    if (v97[33] + 1 < v97[32])
    {
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    if (v97[32] != v97[33] + 1)
    {
LABEL_24:
      if (v97[33] >= v97[32])
      {
        v57 = v97[33] + 1;
        if (v97[33] + 1 < v97[32])
        {
LABEL_97:
          __break(1u);
          __break(1u);
          goto LABEL_98;
        }
        v54 = v97[32];
      }
      else
      {
        v54 = v97[12];
        v57 = v97[12];
      }
      *(_QWORD *)(a3 + 48) = v54;
      *(_QWORD *)(a3 + 56) = v57;
      v58 = *(double *)&v97[34];
      v59 = *(double *)&v97[35];
      if (*(double *)&v97[34] < *(double *)&v97[35])
      {
        if (*(double *)&v97[34] <= *(double *)&v97[35])
        {
LABEL_32:
          *(double *)(a3 + 64) = v58;
          *(double *)(a3 + 72) = v59;
          if ((v41 & 1) != 0)
          {
            if (v56 >= v55)
            {
              v60 = v56 + 1;
              if (v56 + 1 < v55)
              {
LABEL_101:
                __break(1u);
                goto LABEL_102;
              }
            }
            else
            {
              v60 = v97[12];
            }
          }
          else
          {
            v60 = 0;
          }
          *(_QWORD *)(a3 + 32) = v60;
          *(_BYTE *)(a3 + 40) = (v41 & 1) == 0;
          if (v58 < 0.01 && v59 < 0.01)
          {
            v54 = 0;
            *(_QWORD *)(a3 + 48) = 0;
            *(_QWORD *)(a3 + 56) = 0;
          }
          goto LABEL_40;
        }
        __break(1u);
      }
      v58 = *(double *)&v97[14];
      v59 = *(double *)&v97[14];
      goto LABEL_32;
    }
  }
LABEL_40:
  v93 = v55;
  v94 = v56;
  v61 = v97[39];
  v62 = v97[40];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EstimationState.merge(_:)(v61, v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(uint64_t *)(a3 + 112);
  if (*(_QWORD *)(result + 16))
  {
    *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(result, *(_QWORD *)(a3 + 120)));
    v64 = *(double *)&result;
    if ((v65 & 1) != 0)
      v64 = 0.0;
    v66 = v63 + v64;
  }
  else
  {
    v66 = 32.0;
  }
  v67 = v92;
  v68 = *(double *)(a3 + 64);
  v70 = v93;
  v69 = v94;
  if (v29 != 1)
  {
    if (!v29)
    {
LABEL_95:
      __break(1u);
      __break(1u);
      goto LABEL_96;
    }
    if (v54 == 0x8000000000000000 && v29 == -1)
      goto LABEL_99;
    v54 /= v29;
  }
  if ((v92 & 1) == 0)
  {
    if (v54)
    {
      if (v68 >= 0.01)
        goto LABEL_66;
      v71 = v66 * (double)v54;
    }
    else
    {
      if (fabs(v68) <= 0.01)
        goto LABEL_66;
      v71 = -v68;
    }
    v96 = v71;
    if (fabs(v71) > 0.01)
    {
      v72 = v68 + v71;
      v73 = v71 + *(double *)(a3 + 72);
      if (v72 > v73)
      {
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      *(double *)(a3 + 64) = v72;
      *(double *)(a3 + 72) = v73;
      *(double *)(v95 + 56) = v71;
      v74 = *(_QWORD *)v95;
      v75 = *(_QWORD *)(*(_QWORD *)v95 + 16);
      if (v75)
      {
        v76 = 0;
        v77 = 40;
        while (1)
        {
          *(double *)&result = COERCE_DOUBLE(swift_isUniquelyReferenced_nonNull_native());
          if ((result & 1) == 0)
          {
            *(double *)&result = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(v74));
            v74 = result;
          }
          if (v76 >= *(_QWORD *)(v74 + 16))
            break;
          ++v76;
          v78 = (void (*)(_QWORD *, _QWORD))_Placement.anchorPosition.modify();
          *(double *)(v79 + 8) = v71 + *(double *)(v79 + 8);
          v78(__src, 0);
          v77 += 72;
          if (v75 == v76)
          {
            *(_QWORD *)v95 = v74;
            v70 = v93;
            goto LABEL_65;
          }
        }
        __break(1u);
        goto LABEL_95;
      }
LABEL_65:
      *(double *)&result = COERCE_DOUBLE(specialized IncrementalStack<>.log(_:)((uint64_t)&v96));
      v67 = v92;
      v69 = v94;
    }
  }
LABEL_66:
  v80 = *(double *)&v97[35];
  if (*(double *)&v97[34] < *(double *)&v97[35])
  {
    if (*(double *)&v97[34] <= *(double *)&v97[35])
      goto LABEL_70;
    __break(1u);
  }
  v80 = *(double *)&v97[14];
LABEL_70:
  if (v69 >= v70)
  {
    v81 = v69 + 1;
    if (v69 + 1 < v70)
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
  }
  else
  {
    v81 = v97[12];
  }
  v82 = *(double *)(a2 + 40);
  if ((v41 & 1) != 0)
  {
    v83 = vabdd_f64(v80, v82);
    *(_BYTE *)(v95 + 40) = v83 >= 1.0;
    if (v83 >= 1.0)
      specialized IncrementalStack<>.log(_:)(a2, 1);
    goto LABEL_91;
  }
  if (v82 + 0.01 < v80)
  {
    *(_BYTE *)(v95 + 40) = 1;
    specialized IncrementalStack<>.log(_:)(a2, 1);
LABEL_91:
    specialized IncrementalStack<>.log(_:)((double *)a3, v95, *(double *)&v35, *((double *)&v35 + 1));
    goto LABEL_92;
  }
  __src[0] = 2 * v29;
  *(double *)&result = COERCE_DOUBLE(_ViewList_Node.estimatedCount(style:)());
  if (__OFSUB__(result, v81))
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v84 = (result - v81) & ~((result - v81) >> 63);
  if (v29 == 1)
  {
LABEL_84:
    v88 = v80 + v66 * (double)v84;
    if (v88 >= v82)
      v89 = v82;
    else
      v89 = v80 + v66 * (double)v84;
    v90 = v89 * 0.1;
    if ((v67 & v37) != 0)
      v90 = 0.01;
    v91 = vabdd_f64(v82, v88);
    *(_BYTE *)(v95 + 40) = v90 < v91;
    if (v90 < v91)
      specialized IncrementalStack<>.log(_:)();
    goto LABEL_91;
  }
  v85 = __OFADD__(v84, v29);
  v86 = v84 + v29;
  if (!v85)
  {
    v87 = v86 - 1;
    if (v87 == 0x8000000000000000 && v29 == -1)
      goto LABEL_104;
    v84 = v87 / v29;
    goto LABEL_84;
  }
LABEL_103:
  __break(1u);
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v14;
  unint64_t v15;
  char v16;
  __int128 v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  char v32;
  char v33;
  __int128 v34;
  __int128 v35;
  int v36;
  int v37;
  uint64_t v38;
  double v39;
  char v40;
  char v41;
  uint64_t result;
  uint64_t (*v43)(_QWORD);
  _BYTE *v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  char v65;
  double v66;
  int v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void (*v78)(_QWORD *, _QWORD);
  double *v79;
  double v80;
  uint64_t v81;
  double v82;
  double v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  double v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  _QWORD v97[42];
  _QWORD __src[41];
  _BYTE v99[48];
  __int128 v100;
  _BYTE __dst[328];
  _BYTE v102[48];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  CGRect v108;

  v7 = a7;
  v14 = *(_QWORD *)(a2 + 280);
  v15 = *(_QWORD *)(a2 + 288);
  v16 = *(_BYTE *)(a2 + 296);
  v17 = *(_OWORD *)(a2 + 104);
  v18 = a7 & 0xFFFFFFFF00000000;
  v19 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)&__dst[64] = *(_OWORD *)(a2 + 120);
  *(_OWORD *)&__dst[80] = v19;
  *(_OWORD *)&__dst[96] = *(_OWORD *)(a2 + 152);
  v20 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)__dst = *(_OWORD *)(a2 + 56);
  *(_OWORD *)&__dst[16] = v20;
  *(_OWORD *)&__dst[32] = *(_OWORD *)(a2 + 88);
  *(_OWORD *)&__dst[48] = v17;
  if ((v16 & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v15, v14));
  ScrollGeometry.visibleRect.getter();
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  specialized IncrementalStack<>.resolvedPlacerProperties(children:context:state:)(a1, a2, a3, a5, a6, v18 | v7 & 1, (uint64_t)__src);
  if (!__src[17])
  {
    v43 = (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>)?;
    v44 = __src;
LABEL_93:
    *(double *)&result = COERCE_DOUBLE(outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v44, v43));
    return result;
  }
  v95 = a4;
  memcpy(__dst, __src, sizeof(__dst));
  v29 = *(_QWORD *)v99;
  v30 = *(_OWORD *)&v99[8];
  v31 = *(_OWORD *)&v99[24];
  v32 = v99[40];
  v33 = v99[41];
  v34 = v100;
  *(_QWORD *)v102 = *(_QWORD *)v99;
  *(_OWORD *)&v102[8] = *(_OWORD *)&v99[8];
  *(_OWORD *)&v102[24] = *(_OWORD *)&v99[24];
  v102[40] = v99[40];
  v102[41] = v99[41];
  v103 = v100;
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  memcpy(v97, __src, 0x148uLL);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(_QWORD *)v99 = v29;
  *(_OWORD *)&v99[8] = v30;
  *(_OWORD *)&v99[24] = v31;
  v99[40] = v32;
  v99[41] = v33;
  v100 = v34;
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  v35 = *(_OWORD *)&v102[24];
  *(_QWORD *)v99 = *(_QWORD *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  v100 = v103;
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  v36 = v102[40];
  *(_QWORD *)v99 = *(_QWORD *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  v100 = v103;
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  v37 = v102[41];
  *(_QWORD *)v99 = *(_QWORD *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  v100 = v103;
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  v104 = *(_OWORD *)v102;
  v105 = *(_OWORD *)&v102[16];
  v106 = *(_OWORD *)&v102[32];
  v107 = v103;
  v38 = specialized IncrementalStack<>.resolveIndexAndPosition(children:context:state:placer:properties:)(a1, a2, a3, (uint64_t)v97, (uint64_t)&v104);
  if ((v40 & 1) != 0)
  {
LABEL_92:
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)v97);
    v43 = (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>);
    v44 = __dst;
    goto LABEL_93;
  }
  v41 = specialized StackPlacement.place(children:from:position:stopping:style:)(a1, v38, 0, 1, v39);
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0 || LOBYTE(v97[38]) == 1)
  {
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)v97);
    *(double *)&result = COERCE_DOUBLE(outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__dst, (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>)));
    *(_BYTE *)(v95 + 64) = 1;
    return result;
  }
  v92 = v36;
  v45 = v97[31];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)v95 = v45;
  CGRect.subscript.getter();
  v48 = v46;
  if (*(double *)&v97[34] >= *(double *)&v97[35])
  {
    v46 = *MEMORY[0x1E0C9D628];
    v50 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v51 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v52 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  else
  {
    v49 = v47 - v46;
    if (LOBYTE(v97[3]))
    {
      v50 = *(double *)&v97[34];
    }
    else
    {
      v46 = *(double *)&v97[34];
      v50 = v48;
    }
    if (LOBYTE(v97[3]))
      v51 = v49;
    else
      v51 = *(double *)&v97[35] - *(double *)&v97[34];
    if (LOBYTE(v97[3]))
      v52 = *(double *)&v97[35] - *(double *)&v97[34];
    else
      v52 = v49;
  }
  v108.origin.x = v22;
  v108.origin.y = v24;
  v108.size.width = v26;
  v108.size.height = v28;
  *(CGRect *)(v95 + 8) = CGRectUnion(*(CGRect *)&v46, v108);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  v53 = v105;
  *(_OWORD *)v99 = v104;
  *(_OWORD *)&v99[16] = v105;
  *(_OWORD *)&v99[32] = v106;
  v100 = v107;
  *(_OWORD *)a3 = v104;
  *(_QWORD *)(a3 + 16) = v53;
  *(_BYTE *)(a3 + 24) = 0;
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(_QWORD *)v99 = *(_QWORD *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  v100 = v103;
  *(_OWORD *)(a3 + 80) = *(_OWORD *)&v102[24];
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(_QWORD *)v99 = *(_QWORD *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  v100 = v103;
  *(_QWORD *)(a3 + 96) = v103;
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(_QWORD *)v99 = *(_QWORD *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  v100 = v103;
  *(_QWORD *)(a3 + 104) = *((_QWORD *)&v103 + 1);
  *(double *)&result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src));
  v54 = *(_QWORD *)(a3 + 48);
  v55 = v97[32];
  v56 = v97[33];
  if (v54 != *(_QWORD *)(a3 + 56))
    goto LABEL_24;
  if (v97[33] >= v97[32])
  {
    if (v97[33] + 1 < v97[32])
    {
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    if (v97[32] != v97[33] + 1)
    {
LABEL_24:
      if (v97[33] >= v97[32])
      {
        v57 = v97[33] + 1;
        if (v97[33] + 1 < v97[32])
        {
LABEL_97:
          __break(1u);
          __break(1u);
          goto LABEL_98;
        }
        v54 = v97[32];
      }
      else
      {
        v54 = v97[12];
        v57 = v97[12];
      }
      *(_QWORD *)(a3 + 48) = v54;
      *(_QWORD *)(a3 + 56) = v57;
      v58 = *(double *)&v97[34];
      v59 = *(double *)&v97[35];
      if (*(double *)&v97[34] < *(double *)&v97[35])
      {
        if (*(double *)&v97[34] <= *(double *)&v97[35])
        {
LABEL_32:
          *(double *)(a3 + 64) = v58;
          *(double *)(a3 + 72) = v59;
          if ((v41 & 1) != 0)
          {
            if (v56 >= v55)
            {
              v60 = v56 + 1;
              if (v56 + 1 < v55)
              {
LABEL_101:
                __break(1u);
                goto LABEL_102;
              }
            }
            else
            {
              v60 = v97[12];
            }
          }
          else
          {
            v60 = 0;
          }
          *(_QWORD *)(a3 + 32) = v60;
          *(_BYTE *)(a3 + 40) = (v41 & 1) == 0;
          if (v58 < 0.01 && v59 < 0.01)
          {
            v54 = 0;
            *(_QWORD *)(a3 + 48) = 0;
            *(_QWORD *)(a3 + 56) = 0;
          }
          goto LABEL_40;
        }
        __break(1u);
      }
      v58 = *(double *)&v97[14];
      v59 = *(double *)&v97[14];
      goto LABEL_32;
    }
  }
LABEL_40:
  v93 = v55;
  v94 = v56;
  v61 = v97[39];
  v62 = v97[40];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EstimationState.merge(_:)(v61, v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(uint64_t *)(a3 + 112);
  if (*(_QWORD *)(result + 16))
  {
    *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(result, *(_QWORD *)(a3 + 120)));
    v64 = *(double *)&result;
    if ((v65 & 1) != 0)
      v64 = 0.0;
    v66 = v63 + v64;
  }
  else
  {
    v66 = 32.0;
  }
  v67 = v92;
  v68 = *(double *)(a3 + 64);
  v70 = v93;
  v69 = v94;
  if (v29 != 1)
  {
    if (!v29)
    {
LABEL_95:
      __break(1u);
      __break(1u);
      goto LABEL_96;
    }
    if (v54 == 0x8000000000000000 && v29 == -1)
      goto LABEL_99;
    v54 /= v29;
  }
  if ((v92 & 1) == 0)
  {
    if (v54)
    {
      if (v68 >= 0.01)
        goto LABEL_66;
      v71 = v66 * (double)v54;
    }
    else
    {
      if (fabs(v68) <= 0.01)
        goto LABEL_66;
      v71 = -v68;
    }
    v96 = v71;
    if (fabs(v71) > 0.01)
    {
      v72 = v68 + v71;
      v73 = v71 + *(double *)(a3 + 72);
      if (v72 > v73)
      {
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      *(double *)(a3 + 64) = v72;
      *(double *)(a3 + 72) = v73;
      *(double *)(v95 + 48) = v71;
      v74 = *(_QWORD *)v95;
      v75 = *(_QWORD *)(*(_QWORD *)v95 + 16);
      if (v75)
      {
        v76 = 0;
        v77 = 40;
        while (1)
        {
          *(double *)&result = COERCE_DOUBLE(swift_isUniquelyReferenced_nonNull_native());
          if ((result & 1) == 0)
          {
            *(double *)&result = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(v74));
            v74 = result;
          }
          if (v76 >= *(_QWORD *)(v74 + 16))
            break;
          ++v76;
          v78 = (void (*)(_QWORD *, _QWORD))_Placement.anchorPosition.modify();
          *v79 = v71 + *v79;
          v78(__src, 0);
          v77 += 72;
          if (v75 == v76)
          {
            *(_QWORD *)v95 = v74;
            v70 = v93;
            goto LABEL_65;
          }
        }
        __break(1u);
        goto LABEL_95;
      }
LABEL_65:
      *(double *)&result = COERCE_DOUBLE(specialized IncrementalStack<>.log(_:)((uint64_t)&v96));
      v67 = v92;
      v69 = v94;
    }
  }
LABEL_66:
  v80 = *(double *)&v97[35];
  if (*(double *)&v97[34] < *(double *)&v97[35])
  {
    if (*(double *)&v97[34] <= *(double *)&v97[35])
      goto LABEL_70;
    __break(1u);
  }
  v80 = *(double *)&v97[14];
LABEL_70:
  if (v69 >= v70)
  {
    v81 = v69 + 1;
    if (v69 + 1 < v70)
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
  }
  else
  {
    v81 = v97[12];
  }
  v82 = *(double *)(a2 + 32);
  if ((v41 & 1) != 0)
  {
    v83 = vabdd_f64(v80, v82);
    *(_BYTE *)(v95 + 40) = v83 >= 1.0;
    if (v83 >= 1.0)
      specialized IncrementalStack<>.log(_:)(a2, 0);
    goto LABEL_91;
  }
  if (v82 + 0.01 < v80)
  {
    *(_BYTE *)(v95 + 40) = 1;
    specialized IncrementalStack<>.log(_:)(a2, 0);
LABEL_91:
    specialized IncrementalStack<>.log(_:)((double *)a3, v95, *(double *)&v35, *((double *)&v35 + 1));
    goto LABEL_92;
  }
  __src[0] = 2 * v29;
  *(double *)&result = COERCE_DOUBLE(_ViewList_Node.estimatedCount(style:)());
  if (__OFSUB__(result, v81))
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v84 = (result - v81) & ~((result - v81) >> 63);
  if (v29 == 1)
  {
LABEL_84:
    v88 = v80 + v66 * (double)v84;
    if (v88 >= v82)
      v89 = v82;
    else
      v89 = v80 + v66 * (double)v84;
    v90 = v89 * 0.1;
    if ((v67 & v37) != 0)
      v90 = 0.01;
    v91 = vabdd_f64(v82, v88);
    *(_BYTE *)(v95 + 40) = v90 < v91;
    if (v90 < v91)
      specialized IncrementalStack<>.log(_:)();
    goto LABEL_91;
  }
  v85 = __OFADD__(v84, v29);
  v86 = v84 + v29;
  if (!v85)
  {
    v87 = v86 - 1;
    if (v87 == 0x8000000000000000 && v29 == -1)
      goto LABEL_104;
    v84 = v87 / v29;
    goto LABEL_84;
  }
LABEL_103:
  __break(1u);
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t outlined destroy of StackPlacement<LazyVStackLayout>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of StackPlacement<LazyVStackLayout>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized IncrementalStack<>.resolvedPlacerProperties(children:context:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v7;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  double v22;
  uint64_t result;
  double v24;
  __int128 *Value;
  __int128 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  _BOOL4 v31;
  uint64_t v32;
  char v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[56];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;

  v7 = a6;
  v14 = a6 & 0xFFFFFFFF00000000;
  specialized IncrementalStack<>.placer(children:context:state:)(a2, a3, a4, a5, a6 & 0xFFFFFFFF00000001, (uint64_t)&v59);
  if (!(_QWORD)v65)
  {
    result = outlined destroy of StackPlacement<LazyVStackLayout>?((uint64_t)&v59);
    *(_QWORD *)(a7 + 384) = 0;
    *(_OWORD *)(a7 + 352) = 0u;
    *(_OWORD *)(a7 + 368) = 0u;
    *(_OWORD *)(a7 + 320) = 0u;
    *(_OWORD *)(a7 + 336) = 0u;
    *(_OWORD *)(a7 + 288) = 0u;
    *(_OWORD *)(a7 + 304) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_OWORD *)(a7 + 272) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    return result;
  }
  v93 = v59;
  v94 = v60;
  v15 = v61;
  v17 = v62;
  v16 = *(_QWORD *)v63;
  v85 = v69;
  v86 = v70;
  v87 = v71;
  v88 = v72;
  v81 = v65;
  v82 = v66;
  v83 = v67;
  v84 = v68;
  v77 = *(_OWORD *)&v63[8];
  v78 = *(_OWORD *)&v63[24];
  v79 = *(_OWORD *)&v63[40];
  v80 = v64;
  v89 = v73;
  v90 = v74;
  v91 = v75;
  v92 = v76;
  v18 = *(_OWORD *)(a2 + 104);
  v19 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)v63 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)&v63[16] = v19;
  *(_OWORD *)&v63[32] = *(_OWORD *)(a2 + 152);
  v20 = *(_OWORD *)(a2 + 72);
  v59 = *(_OWORD *)(a2 + 56);
  v60 = v20;
  v61 = *(_OWORD *)(a2 + 88);
  v62 = v18;
  ScrollGeometry.visibleRect.getter();
  v22 = v21;
  result = *(unsigned int *)(a2 + 12);
  v24 = 0.0;
  if ((_DWORD)result != *MEMORY[0x1E0CFED28])
  {
    Value = (__int128 *)AGGraphGetValue();
    v26 = Value[1];
    v59 = *Value;
    v60 = v26;
    result = MEMORY[0x18D75BE3C]();
    v24 = v27;
  }
  v29 = *(double *)(a3 + 96);
  v28 = *(double *)(a3 + 104);
  if (v29 <= 0.0 || v22 <= 0.0)
  {
    v31 = 0;
    if (v28 > 0.0 && v24 > 0.0)
LABEL_13:
      v31 = vabdd_f64(v28, v24) >= 0.01;
  }
  else
  {
    v30 = vabdd_f64(v29, v22);
    if (v28 > 0.0 && v24 > 0.0)
    {
      if (v30 >= 0.01)
        goto LABEL_19;
      goto LABEL_13;
    }
    if (v30 >= 0.01)
    {
LABEL_19:
      v32 = *(_QWORD *)(a3 + 112);
      LOBYTE(v31) = 1;
LABEL_20:
      v53 = v31;
      v55 = v7;
      v36 = *(_QWORD *)(a3 + 120);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v56 = specialized Set.init<A>(_:)(v32);
      v54 = a5;
      v37 = MEMORY[0x1E0DEE9D8];
      v38 = a4;
      v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 112) = v39;
      v40 = specialized Dictionary.init(dictionaryLiteral:)(v37);
      v57 = v36;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 120) = v40;
      *(_QWORD *)&v59 = 0;
      v58 = 0;
      v35 = v15;
      specialized IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)((double *)&v59, &v58, v15, a1, a3, v38, v54, v14 | v55 & 1, *((double *)&v15 + 1), *(double *)&v17);
      specialized IncrementalStack<>.log(_:)((_OWORD *)a3);
      v41 = swift_bridgeObjectRetain();
      v42 = specialized Set.init<A>(_:)(v41);
      v43 = specialized Set.isSubset(of:)(v56, v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v33 = v43 ^ 1;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (((v43 ^ 1) & 1) != 0)
      {
        v34 = v53;
      }
      else
      {
        v34 = 0;
        *(_QWORD *)(a3 + 112) = v32;
        *(_QWORD *)(a3 + 120) = v57;
      }
      goto LABEL_23;
    }
    v31 = 0;
  }
  v32 = *(_QWORD *)(a3 + 112);
  if (!*(_QWORD *)(v32 + 16) || v31)
    goto LABEL_20;
  v33 = 0;
  v34 = 0;
  v35 = v15;
LABEL_23:
  *(_QWORD *)(a7 + 328) = v35;
  *(_QWORD *)(a7 + 336) = *((_QWORD *)&v15 + 1);
  *(_OWORD *)(a7 + 344) = v17;
  *(_QWORD *)(a7 + 360) = v16;
  *(_BYTE *)(a7 + 368) = v34;
  *(_BYTE *)(a7 + 369) = v33 & 1;
  *(double *)(a7 + 376) = v22;
  *(double *)(a7 + 384) = v24;
  v44 = v94;
  *(_OWORD *)a7 = v93;
  *(_OWORD *)(a7 + 16) = v44;
  *(_QWORD *)(a7 + 32) = v35;
  *(_QWORD *)(a7 + 40) = *((_QWORD *)&v15 + 1);
  *(_OWORD *)(a7 + 48) = v17;
  *(_QWORD *)(a7 + 64) = v16;
  v45 = v90;
  *(_OWORD *)(a7 + 264) = v89;
  *(_OWORD *)(a7 + 280) = v45;
  v46 = v92;
  *(_OWORD *)(a7 + 296) = v91;
  *(_OWORD *)(a7 + 312) = v46;
  v47 = v86;
  *(_OWORD *)(a7 + 200) = v85;
  *(_OWORD *)(a7 + 216) = v47;
  v48 = v88;
  *(_OWORD *)(a7 + 232) = v87;
  *(_OWORD *)(a7 + 248) = v48;
  v49 = v82;
  *(_OWORD *)(a7 + 136) = v81;
  *(_OWORD *)(a7 + 152) = v49;
  v50 = v84;
  *(_OWORD *)(a7 + 168) = v83;
  *(_OWORD *)(a7 + 184) = v50;
  v51 = v78;
  *(_OWORD *)(a7 + 72) = v77;
  *(_OWORD *)(a7 + 88) = v51;
  v52 = v80;
  *(_OWORD *)(a7 + 104) = v79;
  *(_OWORD *)(a7 + 120) = v52;
  return result;
}

uint64_t specialized Set.isSubset(of:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(result + 16);
  if (v2 < *(_QWORD *)(a2 + 16))
    return 0;
  v4 = result;
  v5 = 0;
  v6 = a2 + 56;
  v7 = -1 << *(_BYTE *)(a2 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a2 + 56);
  v10 = (unint64_t)(63 - v7) >> 6;
  v11 = result + 56;
LABEL_6:
  while (1)
  {
    v12 = v5;
    if (!v9)
      break;
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v5 << 6);
    if (!v2)
      goto LABEL_28;
LABEL_22:
    v18 = *(double *)(*(_QWORD *)(a2 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    if (((*(_QWORD *)(v11 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_28;
    v21 = *(_QWORD *)(v4 + 48);
    if (*(double *)(v21 + 8 * v20) != v18)
    {
      v22 = ~v19;
      while (1)
      {
        v20 = (v20 + 1) & v22;
        if (((*(_QWORD *)(v11 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
          break;
        if (*(double *)(v21 + 8 * v20) == v18)
          goto LABEL_6;
      }
LABEL_28:
      swift_bridgeObjectRetain();
      outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
      return 0;
    }
  }
  v15 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v15 >= v10)
    goto LABEL_31;
  v16 = *(_QWORD *)(v6 + 8 * v15);
  ++v5;
  if (v16)
    goto LABEL_21;
  v5 = v12 + 2;
  if (v12 + 2 >= v10)
    goto LABEL_31;
  v16 = *(_QWORD *)(v6 + 8 * v5);
  if (v16)
    goto LABEL_21;
  v5 = v12 + 3;
  if (v12 + 3 >= v10)
    goto LABEL_31;
  v16 = *(_QWORD *)(v6 + 8 * v5);
  if (v16)
    goto LABEL_21;
  v17 = v12 + 4;
  if (v12 + 4 >= v10)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return 1;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  v5 = v12 + 4;
  if (v16)
  {
LABEL_21:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
    if (!v2)
      goto LABEL_28;
    goto LABEL_22;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_31;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
  return result;
}

Swift::Void __swiftcall IncrementalLayoutViewCache.updateItemPhases()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v1 + 64);
  v3 = v1 + 64;
  v2 = v4;
  v5 = 1 << *(_BYTE *)(*(_QWORD *)(v0 + 160) + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v2;
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v7 &= v7 - 1;
      goto LABEL_5;
    }
    v11 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v11 >= v8)
      goto LABEL_21;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v9;
    if (!v12)
    {
      v9 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_21;
      v12 = *(_QWORD *)(v3 + 8 * v9);
      if (!v12)
      {
        v9 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_21;
        v12 = *(_QWORD *)(v3 + 8 * v9);
        if (!v12)
          break;
      }
    }
LABEL_20:
    v7 = (v12 - 1) & v12;
LABEL_5:
    v10 = swift_retain();
    IncrementalLayoutViewCache.updateItemPhase(_:)(v10);
    swift_release();
  }
  v13 = v11 + 3;
  if (v13 >= v8)
  {
LABEL_21:
    swift_release();
    return;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v9 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v9 >= v8)
      goto LABEL_21;
    v12 = *(_QWORD *)(v3 + 8 * v9);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

uint64_t IncrementalLayoutViewCache.updateItemPhase(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  int v5;
  int v6;
  _BYTE *v7;
  _OWORD *v8;

  result = AGSubgraphIsValid();
  if ((_DWORD)result)
  {
    v4 = *(_DWORD *)(a1 + 192);
    v5 = *(_DWORD *)(v1 + 208);
    result = AGGraphGetValue();
    v6 = *(unsigned __int8 *)(result + 4);
    if (v4 == v5)
    {
      if (v6 == 1)
        return result;
      return AGGraphSetValue();
    }
    if (*(_BYTE *)(result + 4))
    {
      v7 = (_BYTE *)(a1 + 280);
      if (v6 == 1 && (*(_BYTE *)(a1 + 208) & 1) == 0)
      {
        result = AGGraphSetValue();
        *(_BYTE *)(a1 + 368) = 0;
        return result;
      }
      if (!*(_DWORD *)(a1 + 180))
      {
        *(_OWORD *)(a1 + 216) = 0u;
        v8 = (_OWORD *)(a1 + 216);
        *((_QWORD *)v8 - 2) = 0;
        *((_BYTE *)v8 - 8) = 1;
        v8[1] = 0u;
        v8[2] = 0u;
        v8[3] = 0u;
        *v7 = 1;
        AGGraphGetValue();
        return AGGraphSetValue();
      }
    }
  }
  return result;
}

uint64_t specialized IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(double *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, char a11, unsigned int a12)
{
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  double *v52;
  _QWORD v53[2];
  _QWORD *v54;
  double *v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[88];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;
  unsigned int v74;
  uint64_t v75;
  double v76;
  uint64_t v77;

  v64 = a5;
  v75 = a3;
  v76 = a9;
  v77 = a4;
  v70 = a7;
  v71 = a8;
  v72 = a10;
  v73 = a11 & 1;
  v74 = a12;
  v69 = 0;
  *(double *)&result = COERCE_DOUBLE(swift_allocObject());
  v19 = a6;
  v20 = result;
  *(_BYTE *)(result + 16) = 0;
  v21 = *a1;
  v22 = a6 + 104;
  v23 = *(_QWORD *)(*(_QWORD *)(a6 + 104) + 16);
  v24 = *(_QWORD *)(a6 + 40);
  v25 = *(_QWORD *)(v22 - 56);
  if (v24 != v25)
  {
    v26 = *(_QWORD *)(v19 + 16);
    if (v26)
    {
      if (*(_QWORD *)v19 == a3 && *(double *)(v19 + 8) == a9)
      {
        v60 = v19;
        v63 = v23;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v27 = specialized static Array<A>.== infix(_:_:)(a4, v26);
        swift_bridgeObjectRelease_n();
        *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRelease());
        v23 = v63;
        v19 = v60;
        if ((v27 & 1) != 0)
        {
          *a2 = v24;
          v69 = v25;
          v21 = *(double *)(v19 + 56);
          if (v24 >= a3)
          {
            *(_BYTE *)(v20 + 16) = 1;
            if (__OFSUB__(v24, a3))
            {
LABEL_41:
              __break(1u);
              goto LABEL_42;
            }
            *a2 = v24 - a3;
            v24 -= a3;
          }
          if (__OFSUB__(v25, v24))
            goto LABEL_39;
          v62 = a3;
          if (v25 - v24 <= 1)
          {
            v28 = __OFADD__(v25, a3);
            v25 += a3;
            if (v28)
            {
LABEL_42:
              __break(1u);
              return result;
            }
            v69 = v25;
          }
          if (v24 >= v25)
            goto LABEL_35;
          goto LABEL_20;
        }
      }
    }
  }
  if (v23)
  {
    v24 = *a2;
    if ((*a2 & 0x8000000000000000) != 0)
    {
      v62 = a3;
      goto LABEL_20;
    }
LABEL_35:
    *(double *)&result = COERCE_DOUBLE(swift_release());
    return result;
  }
  if (a3 + 0x4000000000000000 < 0)
  {
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v62 = a3;
  v69 = 2 * a3;
  v24 = *a2;
  if (*a2 >= 2 * a3)
    goto LABEL_35;
LABEL_20:
  v63 = v23;
  v60 = v19;
  v56 = a1;
  v58 = swift_allocObject();
  *(_QWORD *)(v58 + 16) = 0;
  v29 = swift_allocObject();
  v30 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v29 + 16) = MEMORY[0x1E0DEE9D8];
  v57 = v29;
  v31 = swift_allocObject();
  v61 = v31;
  *(_QWORD *)(v31 + 16) = 0;
  v55 = (double *)(v31 + 16);
  v32 = v20;
  v33 = swift_allocObject();
  v34 = specialized Dictionary.init(dictionaryLiteral:)(v30);
  v35 = specialized Dictionary.init(dictionaryLiteral:)(v30);
  *(_QWORD *)(v33 + 16) = v34;
  v53[1] = v33 + 16;
  *(_QWORD *)(v33 + 24) = v35;
  v36 = swift_allocObject();
  v59 = v53;
  *(_BYTE *)(v36 + 16) = 0;
  v68 = v24;
  v37 = 2 * v62;
  MEMORY[0x1E0C80A78](v36, v38);
  v62 = v32;
  v39 = v58;
  v54 = a2;
  v66 = *(_QWORD *)(v64 + 104);
  v40 = outlined init with copy of _ViewList_Node(v64 + 16, (uint64_t)v67);
  v65 = v37;
  MEMORY[0x1E0C80A78](v40, v41);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v67);
  swift_bridgeObjectRelease();
  v42 = v57;
  swift_beginAccess();
  if ((*(_BYTE *)(v36 + 16) & 1) == 0)
  {
    LOBYTE(v66) = v73;
    specialized flushMinorGroup #1 <A>() in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(v36, v42, v75, v77, v62, v70, v71, v72, v73 | ((unint64_t)v74 << 32), v39, v61, v33, v54, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:));
  }
  if (v63)
    goto LABEL_32;
  swift_beginAccess();
  v43 = *(_QWORD *)(v33 + 16);
  v44 = *(_QWORD *)(v33 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EstimationState.merge(_:)(v43, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45 = v60;
  *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(*(_QWORD *)(v60 + 104), *(_QWORD *)(v60 + 112)));
  if (!v75)
    goto LABEL_37;
  v48 = *(_QWORD *)(v45 + 40);
  if (v48 == 0x8000000000000000 && v75 == -1)
    goto LABEL_40;
  v49 = v48 / v75;
  if ((unsigned __int128)(v49 * (__int128)v75) >> 64 != (v49 * v75) >> 63)
    goto LABEL_38;
  v50 = *(double *)&result;
  if ((v46 & 1) != 0)
    v50 = 0.0;
  v51 = (v47 + v50) * (double)(v49 * v75);
  if (v49 < 1)
    v50 = 0.0;
  v21 = v51 - v50;
LABEL_32:
  v52 = v55;
  swift_beginAccess();
  *v56 = v21 + *v52;
  if (*(_BYTE *)(v36 + 16) == 1)
    AGGraphCancelUpdate();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(double *)&result = COERCE_DOUBLE(swift_release());
  return result;
}

{
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  double *v52;
  _QWORD v53[2];
  _QWORD *v54;
  double *v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[88];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;
  unsigned int v74;
  uint64_t v75;
  double v76;
  uint64_t v77;

  v64 = a5;
  v75 = a3;
  v76 = a9;
  v77 = a4;
  v70 = a7;
  v71 = a8;
  v72 = a10;
  v73 = a11 & 1;
  v74 = a12;
  v69 = 0;
  *(double *)&result = COERCE_DOUBLE(swift_allocObject());
  v19 = a6;
  v20 = result;
  *(_BYTE *)(result + 16) = 0;
  v21 = *a1;
  v22 = a6 + 104;
  v23 = *(_QWORD *)(*(_QWORD *)(a6 + 104) + 16);
  v24 = *(_QWORD *)(a6 + 40);
  v25 = *(_QWORD *)(v22 - 56);
  if (v24 != v25)
  {
    v26 = *(_QWORD *)(v19 + 16);
    if (v26)
    {
      if (*(_QWORD *)v19 == a3 && *(double *)(v19 + 8) == a9)
      {
        v60 = v19;
        v63 = v23;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v27 = specialized static Array<A>.== infix(_:_:)(a4, v26);
        swift_bridgeObjectRelease_n();
        *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRelease());
        v23 = v63;
        v19 = v60;
        if ((v27 & 1) != 0)
        {
          *a2 = v24;
          v69 = v25;
          v21 = *(double *)(v19 + 56);
          if (v24 >= a3)
          {
            *(_BYTE *)(v20 + 16) = 1;
            if (__OFSUB__(v24, a3))
            {
LABEL_41:
              __break(1u);
              goto LABEL_42;
            }
            *a2 = v24 - a3;
            v24 -= a3;
          }
          if (__OFSUB__(v25, v24))
            goto LABEL_39;
          v62 = a3;
          if (v25 - v24 <= 1)
          {
            v28 = __OFADD__(v25, a3);
            v25 += a3;
            if (v28)
            {
LABEL_42:
              __break(1u);
              return result;
            }
            v69 = v25;
          }
          if (v24 >= v25)
            goto LABEL_35;
          goto LABEL_20;
        }
      }
    }
  }
  if (v23)
  {
    v24 = *a2;
    if ((*a2 & 0x8000000000000000) != 0)
    {
      v62 = a3;
      goto LABEL_20;
    }
LABEL_35:
    *(double *)&result = COERCE_DOUBLE(swift_release());
    return result;
  }
  if (a3 + 0x4000000000000000 < 0)
  {
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v62 = a3;
  v69 = 2 * a3;
  v24 = *a2;
  if (*a2 >= 2 * a3)
    goto LABEL_35;
LABEL_20:
  v63 = v23;
  v60 = v19;
  v56 = a1;
  v58 = swift_allocObject();
  *(_QWORD *)(v58 + 16) = 0;
  v29 = swift_allocObject();
  v30 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v29 + 16) = MEMORY[0x1E0DEE9D8];
  v57 = v29;
  v31 = swift_allocObject();
  v61 = v31;
  *(_QWORD *)(v31 + 16) = 0;
  v55 = (double *)(v31 + 16);
  v32 = v20;
  v33 = swift_allocObject();
  v34 = specialized Dictionary.init(dictionaryLiteral:)(v30);
  v35 = specialized Dictionary.init(dictionaryLiteral:)(v30);
  *(_QWORD *)(v33 + 16) = v34;
  v53[1] = v33 + 16;
  *(_QWORD *)(v33 + 24) = v35;
  v36 = swift_allocObject();
  v59 = v53;
  *(_BYTE *)(v36 + 16) = 0;
  v68 = v24;
  v37 = 2 * v62;
  MEMORY[0x1E0C80A78](v36, v38);
  v62 = v32;
  v39 = v58;
  v54 = a2;
  v66 = *(_QWORD *)(v64 + 104);
  v40 = outlined init with copy of _ViewList_Node(v64 + 16, (uint64_t)v67);
  v65 = v37;
  MEMORY[0x1E0C80A78](v40, v41);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v67);
  swift_bridgeObjectRelease();
  v42 = v57;
  swift_beginAccess();
  if ((*(_BYTE *)(v36 + 16) & 1) == 0)
  {
    LOBYTE(v66) = v73;
    specialized flushMinorGroup #1 <A>() in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(v36, v42, v75, v77, v62, v70, v71, v72, v73 | ((unint64_t)v74 << 32), v39, v61, v33, v54, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:));
  }
  if (v63)
    goto LABEL_32;
  swift_beginAccess();
  v43 = *(_QWORD *)(v33 + 16);
  v44 = *(_QWORD *)(v33 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EstimationState.merge(_:)(v43, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45 = v60;
  *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(*(_QWORD *)(v60 + 104), *(_QWORD *)(v60 + 112)));
  if (!v75)
    goto LABEL_37;
  v48 = *(_QWORD *)(v45 + 40);
  if (v48 == 0x8000000000000000 && v75 == -1)
    goto LABEL_40;
  v49 = v48 / v75;
  if ((unsigned __int128)(v49 * (__int128)v75) >> 64 != (v49 * v75) >> 63)
    goto LABEL_38;
  v50 = *(double *)&result;
  if ((v46 & 1) != 0)
    v50 = 0.0;
  v51 = (v47 + v50) * (double)(v49 * v75);
  if (v49 < 1)
    v50 = 0.0;
  v21 = v51 - v50;
LABEL_32:
  v52 = v55;
  swift_beginAccess();
  *v56 = v21 + *v52;
  if (*(_BYTE *)(v36 + 16) == 1)
    AGGraphCancelUpdate();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(double *)&result = COERCE_DOUBLE(swift_release());
  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEF060], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEF048], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0940], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEF078], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEF050], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEF068], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEF070], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

uint64_t EstimationState.average.getter(uint64_t result, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  double v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  if (!*(_QWORD *)(result + 16))
  {
    *(double *)&result = 0.0;
    return result;
  }
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v8 = 0.0;
  v9 = 0.0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v2 << 6);
      goto LABEL_6;
    }
    v14 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v14 >= v7)
      goto LABEL_22;
    v15 = *(_QWORD *)(v3 + 8 * v14);
    ++v2;
    if (!v15)
    {
      v2 = v14 + 1;
      if (v14 + 1 >= v7)
        goto LABEL_22;
      v15 = *(_QWORD *)(v3 + 8 * v2);
      if (!v15)
      {
        v2 = v14 + 2;
        if (v14 + 2 >= v7)
          goto LABEL_22;
        v15 = *(_QWORD *)(v3 + 8 * v2);
        if (!v15)
          break;
      }
    }
LABEL_21:
    v6 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v2 << 6);
LABEL_6:
    v12 = 8 * v11;
    v13 = (double)*(uint64_t *)(*(_QWORD *)(result + 56) + v12);
    v9 = v9 + *(double *)(*(_QWORD *)(result + 48) + v12) * v13;
    v8 = v8 + v13;
  }
  v16 = v14 + 3;
  if (v16 < v7)
  {
    v15 = *(_QWORD *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        v2 = v16 + 1;
        if (__OFADD__(v16, 1))
          break;
        if (v2 >= v7)
          goto LABEL_22;
        v15 = *(_QWORD *)(v3 + 8 * v2);
        ++v16;
        if (v15)
          goto LABEL_21;
      }
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    v2 = v16;
    goto LABEL_21;
  }
LABEL_22:
  v17 = 0;
  v18 = a2 + 64;
  v19 = 1 << *(_BYTE *)(a2 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & *(_QWORD *)(a2 + 64);
  v22 = (unint64_t)(v19 + 63) >> 6;
  v23 = 0.0;
  v24 = 0.0;
  while (2)
  {
    if (v21)
    {
      v25 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v26 = v25 | (v17 << 6);
LABEL_26:
      v27 = 8 * v26;
      v28 = (double)*(uint64_t *)(*(_QWORD *)(a2 + 56) + v27);
      v24 = v24 + *(double *)(*(_QWORD *)(a2 + 48) + v27) * v28;
      v23 = v23 + v28;
      continue;
    }
    break;
  }
  v29 = v17 + 1;
  if (__OFADD__(v17, 1))
    goto LABEL_47;
  if (v29 >= v22)
  {
LABEL_42:
    if (v23 <= 0.0)
      *(double *)&result = 0.0;
    else
      *(double *)&result = v24 / v23;
    return result;
  }
  v30 = *(_QWORD *)(v18 + 8 * v29);
  ++v17;
  if (v30)
    goto LABEL_41;
  v17 = v29 + 1;
  if (v29 + 1 >= v22)
    goto LABEL_42;
  v30 = *(_QWORD *)(v18 + 8 * v17);
  if (v30)
    goto LABEL_41;
  v17 = v29 + 2;
  if (v29 + 2 >= v22)
    goto LABEL_42;
  v30 = *(_QWORD *)(v18 + 8 * v17);
  if (v30)
  {
LABEL_41:
    v21 = (v30 - 1) & v30;
    v26 = __clz(__rbit64(v30)) + (v17 << 6);
    goto LABEL_26;
  }
  v31 = v29 + 3;
  if (v31 >= v22)
    goto LABEL_42;
  v30 = *(_QWORD *)(v18 + 8 * v31);
  if (v30)
  {
    v17 = v31;
    goto LABEL_41;
  }
  while (1)
  {
    v17 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v17 >= v22)
      goto LABEL_42;
    v30 = *(_QWORD *)(v18 + 8 * v17);
    ++v31;
    if (v30)
      goto LABEL_41;
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t swapChildren(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  v3 = *a1;
  *a1 = *a2;
  if (v3)
    v4 = v3;
  else
    v4 = MEMORY[0x1E0DEE9D8];
  *a2 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *a2;
  if (isUniquelyReferenced_nonNull_native)
    return specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v6 + 16));
  *a2 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v6 + 24) >> 1, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<_IncrementalLayout_Child>, (uint64_t)&type metadata for _IncrementalLayout_Child, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  return swift_bridgeObjectRelease();
}

uint64_t EstimationState.add(length:spacing:count:)(uint64_t a1, char a2, uint64_t a3, double a4)
{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  double v25;
  char v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  void (*v35)(_QWORD *@<X8>);
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v6 = v4;
  LOBYTE(v8) = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *v4;
  v58 = v12;
  *v6 = 0x8000000000000000;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_34;
  }
  v5 = v13;
  if (*(_QWORD *)(v12 + 24) >= v17)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_35;
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, isUniquelyReferenced_nonNull_native);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
    if ((v5 & 1) != (v19 & 1))
      goto LABEL_39;
    v14 = v18;
  }
  while (1)
  {
    *v6 = v12;
    swift_bridgeObjectRelease();
    v20 = (_QWORD *)*v6;
    if ((v5 & 1) == 0)
      specialized _NativeDictionary._insert(at:key:value:)(v14, 0, (_QWORD *)*v6, a4);
    v21 = v20[7];
    v22 = *(_QWORD *)(v21 + 8 * v14);
    v23 = __OFADD__(v22, a3);
    v24 = v22 + a3;
    if (!v23)
      break;
LABEL_34:
    __break(1u);
LABEL_35:
    specialized _NativeDictionary.copy()();
    v12 = v58;
  }
  *(_QWORD *)(v21 + 8 * v14) = v24;
  if ((v8 & 1) == 0)
  {
    v25 = *(double *)&a1;
    v26 = swift_isUniquelyReferenced_nonNull_native();
    v27 = v6[1];
    v59 = v27;
    v6[1] = 0x8000000000000000;
    v29 = specialized __RawDictionaryStorage.find<A>(_:)(*(double *)&a1);
    v30 = *(_QWORD *)(v27 + 16);
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
    {
      __break(1u);
      goto LABEL_37;
    }
    LOBYTE(v8) = v28;
    if (*(_QWORD *)(v27 + 24) >= v32)
    {
      if ((v26 & 1) == 0)
        goto LABEL_38;
      goto LABEL_16;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, v26);
    v33 = specialized __RawDictionaryStorage.find<A>(_:)(v25);
    if ((v8 & 1) == (v34 & 1))
    {
      v29 = v33;
      while (1)
      {
LABEL_16:
        v6[1] = v27;
        swift_bridgeObjectRelease();
        v36 = (_QWORD *)v6[1];
        swift_bridgeObjectRetain();
        if ((v8 & 1) == 0)
          specialized _NativeDictionary._insert(at:key:value:)(v29, 0, v36, v25);
        v8 = v36[7];
        swift_bridgeObjectRelease();
        v37 = *(_QWORD *)(v8 + 8 * v29);
        v23 = __OFADD__(v37, a3);
        v38 = v37 + a3;
        if (!v23)
          break;
LABEL_37:
        __break(1u);
LABEL_38:
        specialized _NativeDictionary.copy()();
        v27 = v59;
      }
      *(_QWORD *)(v8 + 8 * v29) = v38;
      v35 = protocol witness for SetAlgebra.init() in conformance UIRectEdge;
      goto LABEL_20;
    }
LABEL_39:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v35 = 0;
LABEL_20:
  if (*(_QWORD *)(*v6 + 16) >= 0x1AuLL)
  {
    v39 = swift_bridgeObjectRetain();
    v40 = specialized Sequence.min(by:)(v39);
    v42 = v41;
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0)
    {
      v43 = specialized __RawDictionaryStorage.find<A>(_:)(*(double *)&v40);
      if ((v44 & 1) != 0)
      {
        v45 = v43;
        v46 = swift_isUniquelyReferenced_nonNull_native();
        v47 = *v6;
        v60 = *v6;
        *v6 = 0x8000000000000000;
        if ((v46 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v47 = v60;
        }
        specialized _NativeDictionary._delete(at:)(v45, v47);
        *v6 = v47;
        swift_bridgeObjectRelease();
      }
    }
  }
  if (*(_QWORD *)(v6[1] + 16) >= 0x1AuLL)
  {
    v48 = swift_bridgeObjectRetain();
    v49 = specialized Sequence.min(by:)(v48);
    v51 = v50;
    swift_bridgeObjectRelease();
    if ((v51 & 1) == 0)
    {
      v52 = specialized __RawDictionaryStorage.find<A>(_:)(*(double *)&v49);
      if ((v53 & 1) != 0)
      {
        v54 = v52;
        v55 = swift_isUniquelyReferenced_nonNull_native();
        v56 = v6[1];
        v6[1] = 0x8000000000000000;
        if ((v55 & 1) == 0)
          specialized _NativeDictionary.copy()();
        specialized _NativeDictionary._delete(at:)(v54, v56);
        v6[1] = v56;
        swift_bridgeObjectRelease();
      }
    }
  }
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v35);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(double a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, a1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a3[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(double *)(a3[6] + v4) = a4;
  *(_QWORD *)(a3[7] + v4) = a2;
  v5 = a3[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a3[2] = v7;
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))
{
  uint64_t v5;
  _QWORD *v7;
  size_t v8;

  if (a2 <= a1)
    v5 = a1;
  else
    v5 = a2;
  if (!v5)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  a5(0, a3, a4, MEMORY[0x1E0DED1E8]);
  v7 = (_QWORD *)swift_allocObject();
  v8 = _swift_stdlib_malloc_size_2(v7);
  v7[2] = a1;
  v7[3] = 2 * ((uint64_t)(v8 - 32) / 96);
  return v7;
}

double specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double result;
  uint64_t v3;

  result = *(double *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  *a2 = *(_QWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  int v11;
  char v12;
  char v13;
  uint64_t result;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  outlined init with copy of _IncrementalLayout_Child(a1, (uint64_t)&v20);
  outlined init with copy of _IncrementalLayout_Child(a5, (uint64_t)&v18);
  if ((a3 & 1) == 0)
    goto LABEL_3;
  v11 = a4 & 1;
  IncrementalLayoutViewCache.item(data:)((uint64_t)&v21);
  swift_bridgeObjectRetain();
  swift_release();
  _ViewOutputs.layoutComputer.getter();
  swift_bridgeObjectRelease();
  LayoutProxy.init(context:layoutComputer:)();
  LayoutProxy.spacing()();
  AGGraphGetValue();
  IncrementalLayoutViewCache.item(data:)((uint64_t)&v19);
  swift_bridgeObjectRetain();
  swift_release();
  _ViewOutputs.layoutComputer.getter();
  swift_bridgeObjectRelease();
  LayoutProxy.init(context:layoutComputer:)();
  LayoutProxy.spacing()();
  a2 = Spacing.distanceToSuccessorView(along:layoutDirection:preferring:)();
  v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
    defaultSpacingValue.getter();
    if (v11)
      v17 = v16;
    else
      v17 = v15;
    outlined destroy of _IncrementalLayout_Child((uint64_t)&v18);
    result = outlined destroy of _IncrementalLayout_Child((uint64_t)&v20);
    *a6 = v17;
  }
  else
  {
LABEL_3:
    outlined destroy of _IncrementalLayout_Child((uint64_t)&v18);
    result = outlined destroy of _IncrementalLayout_Child((uint64_t)&v20);
    *(_QWORD *)a6 = a2;
  }
  return result;
}

uint64_t outlined init with copy of _IncrementalLayout_Child(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _IncrementalLayout_Child(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for _IncrementalLayout_Child(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = a2 + 16;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 16, v4, v6);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 91) = *(_DWORD *)(a2 + 91);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

double _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v20;
  int v21;
  _OWORD v22[4];
  _OWORD v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[3];

  v6 = v5;
  v8 = a2 & 1;
  v9 = *a1;
  v10 = *((_BYTE *)a1 + 8);
  v11 = a1[2];
  v12 = *((_BYTE *)a1 + 24);
  v13 = IncrementalLayoutViewCache.item(data:)(v5 + 16);
  swift_bridgeObjectRetain();
  v14 = *(_QWORD *)(v13 + 40);
  swift_release();
  *((_QWORD *)&v24 + 1) = v14;
  _ViewOutputs.layoutComputer.getter();
  swift_bridgeObjectRelease();
  LayoutProxy.init(context:layoutComputer:)();
  v20 = *(_QWORD *)&v22[0];
  v21 = DWORD2(v22[0]);
  *(_QWORD *)&v24 = v9;
  BYTE8(v24) = v10;
  *(_QWORD *)&v25 = v11;
  BYTE8(v25) = v12;
  LayoutProxy.lengthThatFits(_:in:)();
  v16 = v15;
  outlined init with copy of SwiftUIAnySortComparator?(a3, (uint64_t)&v24, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child);
  v22[2] = v26;
  v22[3] = v27;
  v23[0] = v28[0];
  *(_OWORD *)((char *)v23 + 15) = *(_OWORD *)((char *)v28 + 15);
  v22[0] = v24;
  v22[1] = v25;
  closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)v22, a4, a5 & 1, v8, v6, (double *)&v20);
  outlined destroy of _IncrementalLayout_Child((uint64_t)v22);
  return v16;
}

uint64_t specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t (*v23)(void);
  double v24;
  char updated;
  uint64_t v27;
  char v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _OWORD v35[4];
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  double v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[31];

  if (a2)
  {
    v34 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(result + 16);
    if (!v7)
      return result;
  }
  else
  {
    v34 = 0;
    v7 = *(_QWORD *)(result + 16);
    if (!v7)
      return result;
  }
  v8 = 0;
  v9 = 0;
  v27 = a2 + 32;
  v32 = result + 32;
  v33 = *(_QWORD *)(a3 + 16);
  v29 = a7 & 1;
  v31 = v7 - 1;
  v10 = a3 + 40;
  v11 = 0.0;
  v12 = 0.0;
  while (v33 != v9)
  {
    result = _ProposedSize.init(_:in:by:)();
    v13 = v46;
    v14 = BYTE8(v46);
    v15 = v47;
    v16 = BYTE8(v47);
    if (v9 >= v34)
    {
      v49 = 0u;
      memset(v50, 0, sizeof(v50));
      v47 = 0u;
      v48 = 0u;
      v17 = v8;
      v46 = 0u;
    }
    else
    {
      if (!a2)
        goto LABEL_25;
      if (v9 >= *(_QWORD *)(a2 + 16))
        goto LABEL_24;
      v17 = 96 * v9;
      outlined init with copy of _IncrementalLayout_Child(v27 + v8, (uint64_t)&v46);
    }
    outlined init with copy of _IncrementalLayout_Child(v32 + v17, (uint64_t)&v44);
    v18 = IncrementalLayoutViewCache.item(data:)((uint64_t)&v45);
    v19 = *(_QWORD *)(v18 + 32);
    swift_bridgeObjectRetain();
    v20 = *(_QWORD *)(v18 + 40);
    swift_release();
    *(_QWORD *)&v37 = v19;
    *((_QWORD *)&v37 + 1) = v20;
    _ViewOutputs.layoutComputer.getter();
    swift_bridgeObjectRelease();
    LayoutProxy.init(context:layoutComputer:)();
    v42 = *(double *)v35;
    v43 = DWORD2(v35[0]);
    *(_QWORD *)&v37 = v13;
    BYTE8(v37) = v14;
    *(_QWORD *)&v38 = v15;
    BYTE8(v38) = v16;
    LayoutProxy.lengthThatFits(_:in:)();
    v22 = v21;
    v23 = MEMORY[0x1E0DEB940];
    outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v46, (uint64_t)&v37, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    if ((_QWORD)v37)
    {
      v35[2] = v39;
      v35[3] = v40;
      v36[0] = v41[0];
      *(_OWORD *)((char *)v36 + 15) = *(_OWORD *)((char *)v41 + 15);
      v35[0] = v37;
      v35[1] = v38;
      closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)v35, a6, v29, 1, (uint64_t)&v44, &v42);
      outlined destroy of _IncrementalLayout_Child((uint64_t)v35);
      v24 = v42;
    }
    else
    {
      v24 = 0.0;
    }
    outlined destroy of _IncrementalLayout_Child((uint64_t)&v44);
    if (v12 <= v22)
      v12 = v22;
    if (v11 <= v24)
      v11 = v24;
    type metadata accessor for AGGraphRef(0);
    updated = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()();
    result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v46, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))v23);
    if ((updated & 1) == 0)
    {
      v8 += 96;
      v10 += 32;
      if (v31 != v9++)
        continue;
    }
    return result;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t (*v23)(void);
  double v24;
  char updated;
  uint64_t v27;
  char v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _OWORD v35[4];
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  double v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[31];

  if (a2)
  {
    v34 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(result + 16);
    if (!v7)
      return result;
  }
  else
  {
    v34 = 0;
    v7 = *(_QWORD *)(result + 16);
    if (!v7)
      return result;
  }
  v8 = 0;
  v9 = 0;
  v27 = a2 + 32;
  v32 = result + 32;
  v33 = *(_QWORD *)(a3 + 16);
  v29 = a7 & 1;
  v31 = v7 - 1;
  v10 = a3 + 40;
  v11 = 0.0;
  v12 = 0.0;
  while (v33 != v9)
  {
    result = _ProposedSize.init(_:in:by:)();
    v13 = v46;
    v14 = BYTE8(v46);
    v15 = v47;
    v16 = BYTE8(v47);
    if (v9 >= v34)
    {
      v49 = 0u;
      memset(v50, 0, sizeof(v50));
      v47 = 0u;
      v48 = 0u;
      v17 = v8;
      v46 = 0u;
    }
    else
    {
      if (!a2)
        goto LABEL_25;
      if (v9 >= *(_QWORD *)(a2 + 16))
        goto LABEL_24;
      v17 = 96 * v9;
      outlined init with copy of _IncrementalLayout_Child(v27 + v8, (uint64_t)&v46);
    }
    outlined init with copy of _IncrementalLayout_Child(v32 + v17, (uint64_t)&v44);
    v18 = IncrementalLayoutViewCache.item(data:)((uint64_t)&v45);
    v19 = *(_QWORD *)(v18 + 32);
    swift_bridgeObjectRetain();
    v20 = *(_QWORD *)(v18 + 40);
    swift_release();
    *(_QWORD *)&v37 = v19;
    *((_QWORD *)&v37 + 1) = v20;
    _ViewOutputs.layoutComputer.getter();
    swift_bridgeObjectRelease();
    LayoutProxy.init(context:layoutComputer:)();
    v42 = *(double *)v35;
    v43 = DWORD2(v35[0]);
    *(_QWORD *)&v37 = v13;
    BYTE8(v37) = v14;
    *(_QWORD *)&v38 = v15;
    BYTE8(v38) = v16;
    LayoutProxy.lengthThatFits(_:in:)();
    v22 = v21;
    v23 = MEMORY[0x1E0DEB940];
    outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v46, (uint64_t)&v37, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    if ((_QWORD)v37)
    {
      v35[2] = v39;
      v35[3] = v40;
      v36[0] = v41[0];
      *(_OWORD *)((char *)v36 + 15) = *(_OWORD *)((char *)v41 + 15);
      v35[0] = v37;
      v35[1] = v38;
      closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)v35, a6, v29, 0, (uint64_t)&v44, &v42);
      outlined destroy of _IncrementalLayout_Child((uint64_t)v35);
      v24 = v42;
    }
    else
    {
      v24 = 0.0;
    }
    outlined destroy of _IncrementalLayout_Child((uint64_t)&v44);
    if (v12 <= v22)
      v12 = v22;
    if (v11 <= v24)
      v11 = v24;
    type metadata accessor for AGGraphRef(0);
    updated = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()();
    result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v46, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))v23);
    if ((updated & 1) == 0)
    {
      v8 += 96;
      v10 += 32;
      if (v31 != v9++)
        continue;
    }
    return result;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of AnyHashable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t IncrementalLayoutViewCache.item(data:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  double v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t *v67;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  unsigned __int8 v104;
  id v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  unint64_t v129;
  unsigned __int8 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  unint64_t v140;
  unsigned __int8 v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  unint64_t v159;
  unsigned __int8 v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  id v167;
  uint64_t v168;
  char v169;
  char v170;
  char v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  unint64_t v197;
  id v198;
  int v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unsigned __int8 v203;
  int v204;
  int v205;
  unsigned __int8 v206;
  uint64_t v207;
  void (*v208)(_QWORD, _QWORD);
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  id v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t result;
  uint64_t v218;
  uint64_t (*v219)(void);
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t (*v224)(void);
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  unsigned __int8 v230;
  _DWORD *v231;
  uint64_t v232;
  _QWORD v233[2];
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  _QWORD *v237;
  char *v238;
  char *v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  void (*v256)(_QWORD, _QWORD);
  _QWORD *v257;
  unsigned __int8 v258;
  _QWORD v259[2];
  uint64_t v260;
  int v261;
  int v262;
  unsigned int v263;
  char v264;
  unsigned int v265;
  char v266;
  int v267;
  char v268;
  unsigned int v269;
  char v270;
  int v271;
  char v272;
  __int128 v273;
  uint64_t v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  int v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  _QWORD v287[7];
  __int128 v288;
  __int128 v289;
  __int128 v290;
  uint64_t v291;
  unsigned __int8 v292;
  _OWORD v293[3];
  uint64_t v294;
  unsigned __int8 v295;
  uint64_t v296;

  v296 = *MEMORY[0x1E0C80C00];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v238 = (char *)&v236 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v255 = (char *)&v236 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v249 = (uint64_t)&v236 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v250 = (char *)&v236 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v245 = (char *)&v236 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v239 = (char *)&v236 - v20;
  v21 = *(_DWORD *)(a1 + 40);
  v22 = *(_DWORD *)(a1 + 44);
  v252 = a1;
  v23 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v293[0] = __PAIR64__(v22, v21);
  *((_QWORD *)&v293[0] + 1) = v23;
  _ViewList_ID.canonicalID.getter();
  v24 = v273;
  v25 = DWORD1(v273);
  v26 = *((_QWORD *)&v273 + 1);
  v240 = (uint64_t *)(v1 + 160);
  swift_beginAccess();
  v254 = v1;
  v27 = *(_QWORD *)(v1 + 160);
  v28 = v24 | (v25 << 32);
  if (!*(_QWORD *)(v27 + 16))
  {
LABEL_8:
    v243 = v28;
    v244 = v26;
    swift_endAccess();
    if ((*(_BYTE *)(v252 + 68) & 1) != 0
      || (*(_QWORD *)&v273 = *(_QWORD *)(v252 + 56), !ViewTraitCollection.optionalTransition()()))
    {
      v251 = 0;
    }
    else
    {
      AGGraphClearUpdate();
      v38 = *(_DWORD *)(v254 + 40);
      v39 = *(_QWORD *)(v254 + 48);
      v40 = *(_DWORD *)(v254 + 112);
      *(_QWORD *)&v273 = *(_QWORD *)(v254 + 32);
      DWORD2(v273) = v38;
      v274 = v39;
      v275 = *(_OWORD *)(v254 + 56);
      v276 = *(_OWORD *)(v254 + 72);
      v277 = *(_OWORD *)(v254 + 88);
      v278 = *(_QWORD *)(v254 + 104);
      v279 = v40;
      _ViewInputs.environment.getter();
      v273 = *(_OWORD *)AGGraphGetValue();
      EnvironmentValues.accessibilityPrefersCrossFadeTransitions.getter();
      AGGraphSetUpdate();
      v251 = AnyTransition.adjustedForAccessibility(prefersCrossFade:)();
      swift_release();
    }
    v41 = v254;
    v42 = swift_bridgeObjectRetain();
    v43 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v42);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v44 = *(_QWORD *)(v41 + 200);
    if (!v44)
    {
      ++*(_DWORD *)(v41 + 168);
      swift_bridgeObjectRetain();
      if ((v43 & 0x8000000000000000) != 0 || (v45 = v43, (v43 & 0x4000000000000000) != 0))
      {
        v45 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v43, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
        swift_release();
      }
      swift_bridgeObjectRetain();
      if ((v45 & 0x8000000000000000) != 0 || (v46 = (_QWORD *)v45, (v45 & 0x4000000000000000) != 0))
      {
        v46 = specialized _copyCollectionToContiguousArray<A>(_:)(v45, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
        swift_release();
      }
      *(_QWORD *)&v293[0] = v46;
      specialized MutableCollection<>.sort(by:)((uint64_t *)v293);
      swift_release();
      v44 = *(_QWORD *)&v293[0];
      *(_QWORD *)(v254 + 200) = *(_QWORD *)&v293[0];
      swift_bridgeObjectRetain();
    }
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)&v273 = __PAIR64__(v22, v21);
    *((_QWORD *)&v273 + 1) = v23;
    v47 = _ViewList_ID.reuseIdentifier.getter();
    v288 = 0uLL;
    *(_QWORD *)&v289 = 0;
    *((_QWORD *)&v289 + 1) = 0x1FFFFFFFELL;
    v291 = 0;
    v290 = 0uLL;
    v292 = 0;
    *(_QWORD *)&v273 = __PAIR64__(v22, v21);
    *((_QWORD *)&v273 + 1) = v23;
    _ViewList_ID.reuseIdentifier.getter();
    static ReuseTrace.traceReuseIdentifier(_:)();
    v248 = (unint64_t)v44 >> 62;
    if ((unint64_t)v44 >> 62)
    {
      swift_bridgeObjectRetain();
      v48 = (id)_CocoaArrayWrapper.endIndex.getter();
      v49 = v254;
      if (v48)
        goto LABEL_20;
    }
    else
    {
      v48 = *(id *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v49 = v254;
      if (v48)
      {
LABEL_20:
        v246 = (unint64_t)&v289 + 8;
        v247 = (unint64_t)&v288 + 8;
        v257 = (_QWORD *)(v44 & 0xC000000000000001);
        swift_beginAccess();
        v50 = v44 & 0xFFFFFFFFFFFFFF8;
        v242 = v44 & 0xFFFFFFFFFFFFFF8;
        if (v44 < 0)
          v50 = v44;
        v241 = v50;
        v51 = 4;
        v253 = v47;
        v256 = (void (*)(_QWORD, _QWORD))v48;
        while (1)
        {
          v55 = v51 - 4;
          if (v257)
          {
            v56 = MEMORY[0x18D75E3BC](v51 - 4, v44);
            v32 = v56;
            v58 = (id)(v51 - 3);
            if (__OFADD__(v55, 1))
              goto LABEL_92;
          }
          else
          {
            v32 = *(_QWORD *)(v44 + 8 * v51);
            v56 = swift_retain();
            v58 = (id)(v51 - 3);
            if (__OFADD__(v55, 1))
            {
LABEL_92:
              __break(1u);
LABEL_93:
              v161 = swift_bridgeObjectRelease_n();
              v163 = MEMORY[0x1E0C80A78](v161, v162);
              v164 = v252;
              v234 = (_QWORD *)v32;
              v235 = (_QWORD *)v252;
              (*(void (**)(double (*)@<D0>(__n128 *@<X8>), double))(*(_QWORD *)v49 + 312))(partial apply for implicit closure #10 in IncrementalLayoutViewCache.item(data:), v163);
              v165 = *(_QWORD *)(v164 + 24);
              v166 = *(_QWORD *)(v164 + 32);
              __swift_project_boxed_opaque_existential_1((_QWORD *)v164, v165);
              *(_QWORD *)(v32 + 360) = (*(uint64_t (**)(uint64_t, uint64_t))(v166 + 32))(v165, v166);
              swift_release();
              v167 = *(id *)(v32 + 24);
              static ReuseTrace.traceCacheItemRecycled(_:)();

              v168 = *(_QWORD *)(v164 + 48);
              *(_QWORD *)(v32 + 136) = *(_QWORD *)(v164 + 40);
              *(_QWORD *)(v32 + 144) = v168;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v169 = *(_BYTE *)(v164 + 76);
              v170 = *(_BYTE *)(v164 + 77);
              v171 = *(_BYTE *)(v164 + 78);
              *(_DWORD *)(v32 + 160) = *(_DWORD *)(v164 + 72);
              *(_BYTE *)(v32 + 164) = v169;
              *(_BYTE *)(v32 + 165) = v170;
              *(_BYTE *)(v32 + 166) = v171;
              add #1 (item:reset:) in IncrementalLayoutViewCache.item(data:)(v32, 1, v164, v49, v243, v244);
              swift_release();
              swift_release();
              outlined consume of ReuseMessage?(v288, *((uint64_t *)&v288 + 1), v289, *((uint64_t *)&v289 + 1), v290, *((uint64_t *)&v290 + 1), v291, v292);
LABEL_117:
              swift_release();
              return v32;
            }
          }
          if (*(_QWORD *)(v32 + 152) != v47)
          {
            MEMORY[0x1E0C80A78](v56, v57);
            v234 = (_QWORD *)v44;
            lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();
            if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
            {
              if (one-time initialization token for log != -1)
                swift_once();
              v72 = type metadata accessor for Logger();
              v73 = __swift_project_value_buffer(v72, (uint64_t)static Log.LazyLayoutReuse.log);
              v74 = *(_QWORD *)(v72 - 8);
              v75 = (uint64_t)v255;
              (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v255, v73, v72);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56))(v75, 0, 1, v72);
              outlined destroy of TableRowID?(v75, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
              lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways();
              v76 = static UserDefaultKeyedFeature.isEnabled.getter();
              if ((v76 & 1) != 0)
              {
                v78 = MEMORY[0x1E0C80A78](v76, v77);
                v234 = partial apply for implicit closure #4 in IncrementalLayoutViewCache.item(data:);
                v235 = v233;
                v79 = v254;
                (*(void (**)(uint64_t (*)(), double))(*(_QWORD *)v254 + 312))(partial apply for implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:), v78);
                v49 = v79;
                v47 = v253;
                goto LABEL_51;
              }
              if (v248)
              {
                swift_bridgeObjectRetain();
                v96 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                v96 = *(_QWORD *)(v242 + 16);
              }
              v47 = v253;
              v49 = v254;
              v48 = v256;
              v99 = v288;
              v100 = v289;
              v101 = v290;
              v102 = v291;
              *(_QWORD *)&v288 = v96;
              v103 = v247;
              *(_OWORD *)v247 = 0u;
              *(_OWORD *)(v103 + 16) = 0u;
              *(_OWORD *)(v103 + 32) = 0u;
              v104 = v292;
              v292 = 16;
              outlined consume of ReuseMessage?(v99, *((uint64_t *)&v99 + 1), v100, *((uint64_t *)&v100 + 1), v101, *((uint64_t *)&v101 + 1), v102, v104);
            }
            else
            {
              v80 = type metadata accessor for Logger();
              v81 = (uint64_t)v255;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v255, 1, 1, v80);
              outlined destroy of TableRowID?(v81, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
LABEL_51:
              v48 = v256;
            }
            v105 = *(id *)(v32 + 24);
            static ReuseTrace.traceMismatchedReuseIDFailure(_:_:)();
            swift_release();

            goto LABEL_26;
          }
          if (*(_DWORD *)(v49 + 192) - *(_DWORD *)(v32 + 176) < 1)
            break;
          if (*(_DWORD *)(v32 + 188) == *(_DWORD *)(v49 + 212) || *(_BYTE *)(v32 + 208) != 1)
          {
            lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();
            if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
            {
              if (one-time initialization token for log != -1)
                swift_once();
              v82 = type metadata accessor for Logger();
              v83 = __swift_project_value_buffer(v82, (uint64_t)static Log.LazyLayoutReuse.log);
              v84 = *(_QWORD *)(v82 - 8);
              v85 = (uint64_t)v250;
              (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v250, v83, v82);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v84 + 56))(v85, 0, 1, v82);
              outlined destroy of TableRowID?(v85, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
              lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways();
              v86 = static UserDefaultKeyedFeature.isEnabled.getter();
              if ((v86 & 1) != 0)
              {
                v88 = MEMORY[0x1E0C80A78](v86, v87);
                v234 = partial apply for implicit closure #6 in IncrementalLayoutViewCache.item(data:);
                v235 = (_QWORD *)v32;
                (*(void (**)(uint64_t (*)(), double))(*(_QWORD *)v49 + 312))(implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply, v88);
              }
              else
              {
                v106 = *(_QWORD *)(v32 + 144);
                *(_QWORD *)&v293[0] = *(_QWORD *)(v32 + 136);
                *((_QWORD *)&v293[0] + 1) = v106;
                swift_retain();
                _ViewList_ID.canonicalID.getter();
                v107 = v273;
                v108 = *(_QWORD *)(v32 + 152);
                swift_release();
                v109 = v288;
                v110 = v289;
                v111 = v290;
                v112 = v291;
                v288 = v107;
                *(_QWORD *)&v289 = v108;
                v48 = v256;
                v113 = v246;
                *(_OWORD *)v246 = 0u;
                *(_OWORD *)(v113 + 16) = 0u;
                v114 = v292;
                v292 = 48;
                outlined consume of ReuseMessage?(v109, *((uint64_t *)&v109 + 1), v110, *((uint64_t *)&v110 + 1), v111, *((uint64_t *)&v111 + 1), v112, v114);
              }
              v47 = v253;
            }
            else
            {
              v97 = type metadata accessor for Logger();
              v98 = (uint64_t)v250;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v250, 1, 1, v97);
              outlined destroy of TableRowID?(v98, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
            }
            v54 = *(id *)(v32 + 24);
            static ReuseTrace.traceReuseCacheItemPlaced(_:)();
            goto LABEL_25;
          }
          v280 = *(_QWORD *)(v32 + 128);
          LOBYTE(v281) = 0;
          if (!v251
            || (lazy protocol witness table accessor for type CompareTransitionType and conformance CompareTransitionType(),
                swift_retain(),
                AnyTransition.visitType<A>(applying:)(),
                swift_release(),
                v281 != 1))
          {
            lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();
            if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
            {
              if (one-time initialization token for log != -1)
                swift_once();
              v115 = type metadata accessor for Logger();
              v116 = __swift_project_value_buffer(v115, (uint64_t)static Log.LazyLayoutReuse.log);
              v117 = *(_QWORD *)(v115 - 8);
              v118 = (uint64_t)v245;
              (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v245, v116, v115);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v117 + 56))(v118, 0, 1, v115);
              outlined destroy of TableRowID?(v118, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
              lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways();
              v119 = static UserDefaultKeyedFeature.isEnabled.getter();
              if ((v119 & 1) != 0)
              {
                v121 = MEMORY[0x1E0C80A78](v119, v120);
                v234 = partial apply for implicit closure #7 in IncrementalLayoutViewCache.item(data:);
                v235 = (_QWORD *)v32;
                (*(void (**)(uint64_t (*)(), double))(*(_QWORD *)v49 + 312))(implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply, v121);
              }
              else
              {
                v133 = *(_QWORD *)(v32 + 144);
                *(_QWORD *)&v293[0] = *(_QWORD *)(v32 + 136);
                *((_QWORD *)&v293[0] + 1) = v133;
                swift_retain();
                _ViewList_ID.canonicalID.getter();
                v134 = v273;
                v135 = *(_QWORD *)(v32 + 152);
                swift_release();
                v136 = v288;
                v137 = v289;
                v138 = v290;
                v139 = v291;
                v288 = v134;
                *(_QWORD *)&v289 = v135;
                v48 = v256;
                v140 = v246;
                *(_OWORD *)v246 = 0u;
                *(_OWORD *)(v140 + 16) = 0u;
                v141 = v292;
                v292 = 64;
                outlined consume of ReuseMessage?(v136, *((uint64_t *)&v136 + 1), v137, *((uint64_t *)&v137 + 1), v138, *((uint64_t *)&v138 + 1), v139, v141);
              }
              v47 = v253;
            }
            else
            {
              v131 = type metadata accessor for Logger();
              v132 = (uint64_t)v245;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 56))(v245, 1, 1, v131);
              outlined destroy of TableRowID?(v132, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
            }
            static ReuseTrace.traceReuseTypeComparisonFailure(_:_:)();
LABEL_24:
            v54 = *(id *)(v32 + 24);
            static ReuseTrace.traceReuseSkippedNotIdle(_:)();
LABEL_25:
            swift_release();

            goto LABEL_26;
          }
          v60 = *(_QWORD *)(v32 + 80);
          v59 = *(_QWORD *)(v32 + 88);
          v237 = (_QWORD *)(v32 + 56);
          __swift_project_boxed_opaque_existential_1((_QWORD *)(v32 + 56), v60);
          if (((*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v59 + 24))(*(_QWORD *)(v32 + 96), v252, *(int *)(v252 + 40), *(_QWORD *)(v32 + 112), 1, v60, v59) & 1) != 0)
          {
            v61 = *(_QWORD *)(v32 + 144);
            *(_QWORD *)&v293[0] = *(_QWORD *)(v32 + 136);
            *((_QWORD *)&v293[0] + 1) = v61;
            _ViewList_ID.canonicalID.getter();
            v63 = *((_QWORD *)&v273 + 1);
            v62 = v273;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            v236 = v63;
            v64 = specialized __RawDictionaryStorage.find<A>(_:)(v62, v63);
            LOBYTE(v62) = v65;
            swift_bridgeObjectRelease();
            if ((v62 & 1) != 0)
            {
              v66 = v64;
              v67 = v240;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v69 = *v67;
              *(_QWORD *)&v293[0] = *v67;
              *v67 = 0x8000000000000000;
              if (!isUniquelyReferenced_nonNull_native)
              {
                specialized _NativeDictionary.copy()();
                v69 = *(_QWORD *)&v293[0];
              }
              swift_release();
              specialized _NativeDictionary._delete(at:)(v66, v69);
              *v67 = v69;
              swift_bridgeObjectRelease();
            }
            swift_endAccess();
            swift_release();
            v70 = *(_QWORD *)(v32 + 80);
            v71 = *(_QWORD *)(v32 + 88);
            __swift_project_boxed_opaque_existential_1(v237, v70);
            if (((*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v71 + 24))(*(_QWORD *)(v32 + 96), v252, *(int *)(v252 + 40), *(_QWORD *)(v32 + 112), 0, v70, v71) & 1) != 0)goto LABEL_93;
            swift_release();
            swift_release();
            v47 = v253;
            v48 = v256;
          }
          else
          {
            v142 = *(id *)(v32 + 24);
            static ReuseTrace.traceReuseCacheItemFailure(_:)();

            lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();
            if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
            {
              v48 = v256;
              if (one-time initialization token for log != -1)
                swift_once();
              v143 = type metadata accessor for Logger();
              v144 = __swift_project_value_buffer(v143, (uint64_t)static Log.LazyLayoutReuse.log);
              v145 = *(_QWORD *)(v143 - 8);
              v146 = (uint64_t)v239;
              (*(void (**)(char *, uint64_t, uint64_t))(v145 + 16))(v239, v144, v143);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v145 + 56))(v146, 0, 1, v143);
              outlined destroy of TableRowID?(v146, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
              lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways();
              v147 = static UserDefaultKeyedFeature.isEnabled.getter();
              if ((v147 & 1) != 0)
              {
                v149 = MEMORY[0x1E0C80A78](v147, v148);
                v234 = partial apply for implicit closure #11 in IncrementalLayoutViewCache.item(data:);
                v235 = (_QWORD *)v32;
                (*(void (**)(uint64_t (*)(), double))(*(_QWORD *)v49 + 312))(implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply, v149);
              }
              else
              {
                v152 = *(_QWORD *)(v32 + 144);
                *(_QWORD *)&v293[0] = *(_QWORD *)(v32 + 136);
                *((_QWORD *)&v293[0] + 1) = v152;
                swift_retain();
                _ViewList_ID.canonicalID.getter();
                v153 = v273;
                v154 = *(_QWORD *)(v32 + 152);
                swift_release();
                v155 = v288;
                v156 = v289;
                v157 = v290;
                v158 = v291;
                v288 = v153;
                *(_QWORD *)&v289 = v154;
                v48 = v256;
                v159 = v246;
                *(_OWORD *)v246 = 0u;
                *(_OWORD *)(v159 + 16) = 0u;
                v160 = v292;
                v292 = 80;
                outlined consume of ReuseMessage?(v155, *((uint64_t *)&v155 + 1), v156, *((uint64_t *)&v156 + 1), v157, *((uint64_t *)&v157 + 1), v158, v160);
              }
              swift_release();
              v47 = v253;
            }
            else
            {
              v150 = type metadata accessor for Logger();
              v151 = (uint64_t)v239;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 56))(v239, 1, 1, v150);
              outlined destroy of TableRowID?(v151, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
              swift_release();
              v48 = v256;
            }
          }
LABEL_26:
          ++v51;
          if (v58 == v48)
            goto LABEL_95;
        }
        lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();
        if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
        {
          if (one-time initialization token for log != -1)
            swift_once();
          v89 = type metadata accessor for Logger();
          v90 = __swift_project_value_buffer(v89, (uint64_t)static Log.LazyLayoutReuse.log);
          v91 = *(_QWORD *)(v89 - 8);
          v92 = v249;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16))(v249, v90, v89);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v91 + 56))(v92, 0, 1, v89);
          outlined destroy of TableRowID?(v92, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
          lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways();
          v93 = static UserDefaultKeyedFeature.isEnabled.getter();
          if ((v93 & 1) != 0)
          {
            v95 = MEMORY[0x1E0C80A78](v93, v94);
            v234 = partial apply for implicit closure #5 in IncrementalLayoutViewCache.item(data:);
            v235 = (_QWORD *)v32;
            (*(void (**)(uint64_t (*)(), double))(*(_QWORD *)v49 + 312))(implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply, v95);
          }
          else
          {
            v122 = *(_QWORD *)(v32 + 144);
            *(_QWORD *)&v293[0] = *(_QWORD *)(v32 + 136);
            *((_QWORD *)&v293[0] + 1) = v122;
            swift_retain();
            _ViewList_ID.canonicalID.getter();
            v123 = v273;
            v124 = *(_QWORD *)(v32 + 152);
            swift_release();
            v125 = v288;
            v126 = v289;
            v127 = v290;
            v128 = v291;
            v288 = v123;
            *(_QWORD *)&v289 = v124;
            v48 = v256;
            v129 = v246;
            *(_OWORD *)v246 = 0u;
            *(_OWORD *)(v129 + 16) = 0u;
            v130 = v292;
            v292 = 32;
            outlined consume of ReuseMessage?(v125, *((uint64_t *)&v125 + 1), v126, *((uint64_t *)&v126 + 1), v127, *((uint64_t *)&v127 + 1), v128, v130);
          }
          v47 = v253;
        }
        else
        {
          v52 = type metadata accessor for Logger();
          v53 = v249;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v249, 1, 1, v52);
          outlined destroy of TableRowID?(v53, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
        }
        goto LABEL_24;
      }
    }
LABEL_95:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways();
    v172 = static UserDefaultKeyedFeature.isEnabled.getter();
    swift_bridgeObjectRelease();
    if ((v172 & 1) == 0)
    {
      if (!v48)
      {
        swift_beginAccess();
        if (*((_QWORD *)&v289 + 1) >> 1 == 0xFFFFFFFFLL && v292 <= 1u)
        {
          lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();
          if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
          {
            if (one-time initialization token for log != -1)
              swift_once();
            v218 = type metadata accessor for Logger();
            v219 = MEMORY[0x1E0DF2258];
            v220 = __swift_project_value_buffer(v218, (uint64_t)static Log.LazyLayoutReuse.log);
            v221 = *(_QWORD *)(v218 - 8);
            v222 = (uint64_t)v238;
            (*(void (**)(char *, uint64_t, uint64_t))(v221 + 16))(v238, v220, v218);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v221 + 56))(v222, 0, 1, v218);
            outlined destroy of TableRowID?(v222, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)v219, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
            if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
            {
              (*(void (**)(double (*)@<D0>(uint64_t@<X8>), _QWORD))(*(_QWORD *)v49 + 312))(specialized implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:), 0);
            }
            else
            {
              v226 = v288;
              v227 = v289;
              v228 = v290;
              v229 = v291;
              v288 = 0u;
              v289 = 0u;
              v290 = 0u;
              v291 = 0;
              v230 = v292;
              v292 = 16;
              outlined consume of ReuseMessage?(v226, *((uint64_t *)&v226 + 1), v227, *((uint64_t *)&v227 + 1), v228, *((uint64_t *)&v228 + 1), v229, v230);
            }
          }
          else
          {
            v223 = type metadata accessor for Logger();
            v224 = MEMORY[0x1E0DF2258];
            v225 = (uint64_t)v238;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v223 - 8) + 56))(v238, 1, 1, v223);
            outlined destroy of TableRowID?(v225, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)v224, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
          }
        }
      }
      v173 = swift_beginAccess();
      v175 = *((_QWORD *)&v289 + 1);
      v176 = v292;
      if (*((_QWORD *)&v289 + 1) >> 1 != 0xFFFFFFFFLL || v292 >= 2u)
      {
        v257 = &v236;
        v178 = *((_QWORD *)&v290 + 1);
        v177 = v291;
        v179 = v290;
        v181 = *((_QWORD *)&v288 + 1);
        v180 = v289;
        v182 = v288;
        v293[0] = v288;
        v293[1] = v289;
        v293[2] = v290;
        v294 = v291;
        v295 = v292;
        MEMORY[0x1E0C80A78](v173, v174);
        v234 = v293;
        v256 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)v254 + 312);
        outlined copy of ReuseMessage(v182, v181, v180, v175, v179, v178, v177, v176);
        v256(partial apply for implicit closure #1 in closure #2 in IncrementalLayoutViewCache.item(data:), v233);
        v183 = v178;
        v49 = v254;
        outlined consume of ReuseMessage?(v182, v181, v180, v175, v179, v183, v177, v176);
      }
    }
    v184 = (id)AGSubgraphGetGraph();
    v185 = v252;
    v186 = *(unsigned int *)(v252 + 64);
    LODWORD(v250) = *(unsigned __int8 *)(v252 + 68);
    v253 = v186;
    v187 = (void *)AGSubgraphCreate2();

    type metadata accessor for IndirectAttributeMap();
    v188 = v187;
    v257 = (_QWORD *)IndirectAttributeMap.__allocating_init(subgraph:)();
    v271 = 0;
    v272 = 1;
    v269 = 0;
    v270 = 1;
    v267 = 0;
    v268 = 1;
    v265 = 0;
    v266 = 1;
    v263 = 0;
    v264 = 1;
    v287[0] = 0;
    swift_retain();
    v255 = (char *)AGGraphClearUpdate();
    v249 = (uint64_t)(id)AGSubgraphGetCurrent();
    v256 = (void (*)(_QWORD, _QWORD))v188;
    AGSubgraphSetCurrent();
    outlined init with copy of TableColumnList(v185, (uint64_t)&v280);
    v248 = v284;
    v246 = (unint64_t)__swift_project_boxed_opaque_existential_1(&v280, v283);
    v247 = (unint64_t)&v236;
    v189 = *(_QWORD *)(v49 + 32);
    v190 = *(_QWORD *)(v49 + 48);
    v192 = *(_QWORD *)(v49 + 72);
    v191 = *(_QWORD *)(v49 + 80);
    DWORD2(v273) = *(_DWORD *)(v49 + 40);
    v193 = *(_DWORD *)(v49 + 112);
    *(_QWORD *)&v273 = v189;
    v274 = v190;
    v275 = *(_OWORD *)(v49 + 56);
    *(_QWORD *)&v276 = v192;
    *((_QWORD *)&v276 + 1) = v191;
    v277 = *(_OWORD *)(v49 + 88);
    v278 = *(_QWORD *)(v49 + 104);
    v279 = v193;
    MEMORY[0x1E0C80A78](v189, v194);
    *(&v236 - 10) = (uint64_t)&v271;
    *(&v236 - 9) = (uint64_t)&v269;
    *(&v236 - 8) = (uint64_t)&v267;
    *(&v236 - 7) = v49;
    v231 = &v265;
    v232 = v251;
    v233[0] = v185;
    v233[1] = &v263;
    v234 = v287;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v280);
    v195 = (void *)v249;
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_release();
    v196 = v285;
    v197 = v286;
    if (v272 == 1)
    {
      AGGraphClearUpdate();
      v198 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      LODWORD(v273) = 0;
      WORD2(v273) = 0;
      BYTE6(v273) = 1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<IncrementalLayoutCacheItem.State>, (uint64_t)&type metadata for IncrementalLayoutCacheItem.State, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<IncrementalLayoutCacheItem.State> and conformance External<A>();
      v199 = Attribute.init<A>(body:value:flags:update:)();
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
      LODWORD(v255) = v199;
      v271 = v199;
      v272 = 0;
      v200 = v252;
      if (v196)
      {
LABEL_102:
        v201 = HIDWORD(v197);
        goto LABEL_105;
      }
    }
    else
    {
      LODWORD(v255) = v271;
      v200 = v252;
      if (v285)
        goto LABEL_102;
    }
    _ViewOutputs.init()();
    v196 = v280;
    LODWORD(v197) = v281;
    LODWORD(v201) = v282;
LABEL_105:
    v260 = v196;
    v261 = v197;
    v262 = v201;
    outlined init with copy of TableColumnList(v200, (uint64_t)&v273);
    v202 = *(_QWORD *)(v200 + 48);
    v259[0] = *(_QWORD *)(v200 + 40);
    v259[1] = v202;
    v247 = *(unsigned int *)(v200 + 72);
    v203 = *(_BYTE *)(v200 + 76);
    v204 = *(unsigned __int8 *)(v200 + 77);
    v205 = *(unsigned __int8 *)(v200 + 78);
    v246 = v263;
    v206 = v264;
    v248 = v287[0];
    v249 = SLODWORD(v259[0]);
    type metadata accessor for IncrementalLayoutCacheItem();
    v207 = swift_allocObject();
    v208 = v256;
    v209 = (uint64_t)v257;
    swift_retain();
    v210 = v254;
    swift_retain();
    swift_bridgeObjectRetain();
    v258 = v203;
    v211 = 0x1000000000000;
    if (!v205)
      v211 = 0;
    v212 = 0x10000000000;
    if (!v204)
      v212 = 0;
    v258 = v206;
    v231 = (_DWORD *)(v212 | v211 | ((unint64_t)v203 << 32) | v247);
    v32 = specialized IncrementalLayoutCacheItem.init(cache:subgraph:outputs:state:list:elements:id:elementIndex:section:indirectMap:transition:transitionType:)(v210, v208, &v260, (int)v255, v253 | ((unint64_t)v250 << 32), &v273, (int *)v259, v249, (int)v231, SBYTE4(v231), SBYTE5(v231), SBYTE6(v231), v209, v246, (v246 | ((unint64_t)v206 << 32)) >> 32, v248, v207);
    swift_release();

    swift_release();
    (*(void (**)(double (*)@<D0>(uint64_t@<X8>), uint64_t))(*(_QWORD *)v210 + 312))(partial apply for implicit closure #16 in IncrementalLayoutViewCache.item(data:), v32);
    v213 = *(id *)(v32 + 24);
    static ReuseTrace.traceReuseCacheItemAdded(_:_:)();

    if ((v270 & 1) == 0)
    {
      MEMORY[0x1E0C80A78](v269, v214);
      v234 = partial apply for closure #6 in IncrementalLayoutViewCache.item(data:);
      v235 = (_QWORD *)v32;
      AGGraphMutateAttribute();
    }
    v215 = v244;
    v216 = v251;
    if ((v266 & 1) == 0)
    {
      MEMORY[0x1E0C80A78](v265, v214);
      v234 = partial apply for closure #7 in IncrementalLayoutViewCache.item(data:);
      v235 = (_QWORD *)v32;
      AGGraphMutateAttribute();
    }
    if ((v264 & 1) == 0)
    {
      LODWORD(v273) = v263;
      *((_QWORD *)&v273 + 1) = v32;
      if (!v216)
      {
        __break(1u);
        result = swift_release();
        __break(1u);
        return result;
      }
      lazy protocol witness table accessor for type UpdateChildTransition and conformance UpdateChildTransition();
      swift_retain();
      swift_retain();
      AnyTransition.visitType<A>(applying:)();
      swift_release();
      swift_release();
    }
    add #1 (item:reset:) in IncrementalLayoutViewCache.item(data:)(v32, 0, v252, v210, v243, v215);
    swift_release();

    swift_release();
    outlined consume of ReuseMessage?(v288, *((uint64_t *)&v288 + 1), v289, *((uint64_t *)&v289 + 1), v290, *((uint64_t *)&v290 + 1), v291, v292);
    goto LABEL_117;
  }
  swift_retain();
  v29 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v26);
  if ((v30 & 1) == 0)
  {
    swift_release();
    goto LABEL_8;
  }
  v31 = v28;
  v32 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v29);
  swift_endAccess();
  swift_retain();
  swift_release();
  v33 = v254;
  if ((*(_BYTE *)(v32 + 208) & 1) != 0)
  {
    v34 = *(_DWORD *)(v32 + 176);
    swift_beginAccess();
    if (v34 != *(_DWORD *)(v33 + 192))
    {
      add #1 (item:reset:) in IncrementalLayoutViewCache.item(data:)(v32, 0, v252, v33, v31, v26);
      goto LABEL_117;
    }
  }
  v35 = *(_DWORD *)(v32 + 184);
  swift_beginAccess();
  v36 = *(_DWORD *)(v33 + 168);
  if (v35 == v36)
    goto LABEL_117;
  *(_DWORD *)(v32 + 184) = v36;
  v280 = *(_QWORD *)(v252 + 56);
  v287[4] = 0;
  swift_bridgeObjectRetain();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  swift_release();
  v37 = *(double *)&v288;
  *(_QWORD *)(v32 + 168) = v288;
  *(_BYTE *)(v33 + 226) = *(_BYTE *)(v33 + 226) & 1 | (v37 != 0.0);
  return v32;
}

uint64_t outlined destroy of AccessibilityValueStorage?(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  type metadata accessor for AccessibilityValueStorage?(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of AccessibilityTableContext?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t closure #1 in IncrementalLayoutViewCache.collect()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  _BOOL4 v8;
  char v9;
  uint64_t v10;
  id v12;

  v4 = *a2;
  v5 = *(unsigned __int8 *)(*a2 + 208);
  swift_retain();
  v6 = *(unsigned __int8 *)(v4 + 370);
  v8 = (v6 & 1) == 0 && v6 != 2;
  if (v5 == 1)
  {
    if (v8)
    {
      (*(void (**)(double (*)@<D0>(uint64_t@<X8>), uint64_t))(*(_QWORD *)a3 + 312))(partial apply for implicit closure #2 in IncrementalLayoutViewCache.ensureRemoved(item:), v4);
      static ReuseTrace.traceReuseItemUnplaced(_:)();
      AGSubgraphRef.willRemove()();
      AGSubgraphRemoveChild();
      v9 = 1;
LABEL_14:
      *(_BYTE *)(v4 + 370) = v9;
    }
  }
  else if (!v8)
  {
    AGSubgraphAddChild();
    if ((*(_BYTE *)(v4 + 370) & 1) != 0)
      AGSubgraphRef.didReinsert()();
    v9 = 0;
    goto LABEL_14;
  }
  swift_beginAccess();
  if (*(_QWORD *)(a3 + 176) >= (uint64_t)(*(_DWORD *)(a3 + 168) - *(_DWORD *)(v4 + 184))
    || *(_DWORD *)(v4 + 192) == *(_DWORD *)(a3 + 208)
    || *(_DWORD *)(v4 + 180)
    || *(_DWORD *)(v4 + 196) == *(_DWORD *)(a3 + 212))
  {
    v10 = 1;
  }
  else
  {
    (*(void (**)(double (*)@<D0>(uint64_t@<X8>), uint64_t))(*(_QWORD *)a3 + 312))(partial apply for implicit closure #4 in closure #1 in IncrementalLayoutViewCache.collect(), v4);
    v12 = *(id *)(v4 + 24);
    AGSubgraphRef.willInvalidate(isInserted:)(0);

    AGSubgraphInvalidate();
    v10 = 0;
  }
  swift_release();
  return v10;
}

uint64_t outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;

  v7 = a5(0, a3, a4, MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t outlined destroy of _ViewList_ID.Canonical(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE1C78] - 8) + 8))();
  return a1;
}

uint64_t outlined destroy of AccessibilityScrollableContext?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  uint64_t v5;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t add #1 (item:reset:) in IncrementalLayoutViewCache.item(data:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t result;
  BOOL v17;
  _QWORD v18[9];
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_beginAccess();
  swift_retain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22 = *(_QWORD *)(a4 + 160);
  *(_QWORD *)(a4 + 160) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a5, a6, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a4 + 160) = v22;
  swift_release();
  swift_bridgeObjectRelease();
  swift_endAccess();
  (*(void (**)(double (*)@<D0>(uint64_t@<X8>), uint64_t))(*(_QWORD *)a4 + 312))(partial apply for implicit closure #3 in add #1 (item:reset:) in IncrementalLayoutViewCache.item(data:), a4);
  swift_beginAccess();
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a4 + 168);
  v13 = *(_QWORD *)(a3 + 56);
  v20 = 0;
  v21 = v13;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  *(_QWORD *)(a1 + 168) = v18[0];
  *(_DWORD *)(a1 + 212) = -1;
  AGGraphClearUpdate();
  closure #1 in add #1 (item:reset:) in IncrementalLayoutViewCache.item(data:)(a4, a1, a2, a3);
  AGGraphSetUpdate();
  v14 = *(_BYTE *)(a4 + 225);
  outlined init with copy of _IncrementalLayout_Child.Data(a3, (uint64_t)v18);
  v15 = v14 | ~v19;
  result = outlined destroy of _IncrementalLayout_Child.Data((uint64_t)v18);
  *(_BYTE *)(a4 + 225) = v15 & 1;
  v17 = (*(_BYTE *)(a4 + 226) & 1) != 0 || *(double *)(a1 + 168) != 0.0;
  *(_BYTE *)(a4 + 226) = v17;
  return result;
}

uint64_t closure #1 in add #1 (item:reset:) in IncrementalLayoutViewCache.item(data:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;
  BOOL v13;
  char v14;
  uint64_t Value;
  __int128 v16;
  uint64_t v17;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_DWORD *)(a1 + 112);
  v23 = *(_QWORD *)(a1 + 32);
  v24 = v8;
  v25 = v9;
  v26 = *(_OWORD *)(a1 + 56);
  v27 = *(_OWORD *)(a1 + 72);
  v28 = *(_OWORD *)(a1 + 88);
  v29 = *(_QWORD *)(a1 + 104);
  v30 = v10;
  _ViewInputs.transaction.getter();
  AGGraphGetValue();
  v11 = Transaction.fromScrollView.getter();
  v12 = *(_DWORD *)AGGraphGetValue();
  swift_beginAccess();
  *(_DWORD *)(a2 + 176) = *(_DWORD *)(a1 + 192);
  if ((v11 & 1) != 0)
  {
    v13 = 0;
    v14 = 1;
  }
  else
  {
    AGGraphClearUpdate();
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    Value = AGGraphGetValue();
    outlined init with copy of TableColumnList(Value, (uint64_t)&v23);
    AGGraphSetUpdate();
    v16 = v26;
    __swift_project_boxed_opaque_existential_1(&v23, v26);
    v17 = *(_QWORD *)(a4 + 48);
    v21[0] = *(_QWORD *)(a4 + 40);
    v21[1] = v17;
    v20 = *(_QWORD *)(a1 + 184);
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *, _QWORD, _QWORD))(*((_QWORD *)&v16 + 1) + 56))(&v22, v21, &v20, v16, *((_QWORD *)&v16 + 1));
    v13 = (v22 & 1) == 0 && v22 != 2;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
    v14 = 0;
  }
  LODWORD(v23) = v12 + (a3 & 1);
  BYTE4(v23) = v14;
  *(_WORD *)((char *)&v23 + 5) = v13;
  return AGGraphSetValue();
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<_ViewList_ID.Canonical, IncrementalLayoutCacheItem>();
  result = static _DictionaryStorage.allocate(capacity:)();
  v8 = result;
  v31 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_38;
      if (v14 >= v31)
        return v8;
      v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        v10 = v14 + 1;
        if (v14 + 1 >= v31)
          return v8;
        v15 = a1[v10];
        if (!v15)
        {
          v16 = v14 + 2;
          if (v16 >= v31)
            return v8;
          v15 = a1[v16];
          if (!v15)
          {
            while (1)
            {
              v10 = v16 + 1;
              if (__OFADD__(v16, 1))
                goto LABEL_39;
              if (v10 >= v31)
                return v8;
              v15 = a1[v10];
              ++v16;
              if (v15)
                goto LABEL_22;
            }
          }
          v10 = v16;
        }
      }
LABEL_22:
      v9 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v13);
    Hasher.init(_seed:)();
    swift_retain();
    swift_retain();
    _ViewList_ID.Canonical.hash(into:)();
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v8 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v24);
    *v29 = v18;
    v29[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v24) = v20;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v8;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt32 v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<ViewIdentity, AlertStorage>();
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v52 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v52)
        return v9;
      v16 = a1[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v52)
          return v9;
        v16 = a1[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v52)
            return v9;
          v16 = a1[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v52)
              return v9;
            v16 = a1[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v52)
                  return v9;
                v16 = a1[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v14);
    v19 = (__int128 *)(*(_QWORD *)(v4 + 56) + 240 * v14);
    v21 = *v19;
    v20 = v19[1];
    v55 = v19[2];
    v22 = v19[5];
    v23 = v19[6];
    v24 = v19[4];
    v56 = v19[3];
    v58 = v22;
    v59 = v23;
    v57 = v24;
    v25 = v19[10];
    v27 = v19[7];
    v26 = v19[8];
    v62 = v19[9];
    v63 = v25;
    v60 = v27;
    v61 = v26;
    v28 = v19[14];
    v30 = v19[11];
    v29 = v19[12];
    v66 = v19[13];
    v67 = v28;
    v64 = v30;
    v65 = v29;
    v53 = v21;
    v54 = v20;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v9 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v12 + 8 * (v32 >> 6))) != 0)
    {
      v34 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v12 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v37 = v33 == v36;
        if (v33 == v36)
          v33 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v12 + 8 * v33);
      }
      while (v38 == -1);
      v34 = __clz(__rbit64(~v38)) + (v33 << 6);
    }
    *(_QWORD *)(v12 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
    *(_DWORD *)(*(_QWORD *)(v9 + 48) + 4 * v34) = v18;
    v39 = (_OWORD *)(*(_QWORD *)(v9 + 56) + 240 * v34);
    v40 = v53;
    v41 = v55;
    v39[1] = v54;
    v39[2] = v41;
    *v39 = v40;
    v42 = v56;
    v43 = v57;
    v44 = v59;
    v39[5] = v58;
    v39[6] = v44;
    v39[3] = v42;
    v39[4] = v43;
    v45 = v60;
    v46 = v61;
    v47 = v63;
    v39[9] = v62;
    v39[10] = v47;
    v39[7] = v45;
    v39[8] = v46;
    v48 = v64;
    v49 = v65;
    v50 = v67;
    v39[13] = v66;
    v39[14] = v50;
    v39[11] = v48;
    v39[12] = v49;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    result = (uint64_t)outlined retain of AlertStorage(&v53);
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::UInt32 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v27;
  _BYTE v29[176];
  _BYTE v30[184];

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<ViewIdentity, ConfirmationDialog>();
  result = static _DictionaryStorage.allocate(capacity:)();
  v8 = result;
  v27 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v27)
        return v8;
      v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        v10 = v14 + 1;
        if (v14 + 1 >= v27)
          return v8;
        v15 = a1[v10];
        if (!v15)
        {
          v10 = v14 + 2;
          if (v14 + 2 >= v27)
            return v8;
          v15 = a1[v10];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v27)
              return v8;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v10 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_41;
                if (v10 >= v27)
                  return v8;
                v15 = a1[v10];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v10 = v16;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    v17 = *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v13);
    outlined init with copy of ConfirmationDialog(*(_QWORD *)(v4 + 56) + 176 * v13, (uint64_t)v30);
    outlined init with take of ConfirmationDialog((uint64_t)v30, (uint64_t)v29);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    result = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(v8 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v20);
      }
      while (v25 == -1);
      v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(_QWORD *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_DWORD *)(*(_QWORD *)(v8 + 48) + 4 * v21) = v17;
    result = outlined init with take of ConfirmationDialog((uint64_t)v29, *(_QWORD *)(v8 + 56) + 176 * v21);
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v27;
  _BYTE v29[96];
  _BYTE v30[104];

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<Namespace.ID, NavigationDestinationPresentation>();
  result = static _DictionaryStorage.allocate(capacity:)();
  v8 = result;
  v27 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v27)
        return v8;
      v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        v10 = v14 + 1;
        if (v14 + 1 >= v27)
          return v8;
        v15 = a1[v10];
        if (!v15)
        {
          v10 = v14 + 2;
          if (v14 + 2 >= v27)
            return v8;
          v15 = a1[v10];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v27)
              return v8;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v10 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_41;
                if (v10 >= v27)
                  return v8;
                v15 = a1[v10];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v10 = v16;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13);
    outlined init with copy of NavigationDestinationPresentation(*(_QWORD *)(v4 + 56) + 96 * v13, (uint64_t)v30);
    outlined init with take of NavigationDestinationPresentation((uint64_t)v30, (uint64_t)v29);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    result = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(v8 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v20);
      }
      while (v25 == -1);
      v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(_QWORD *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v21) = v17;
    result = outlined init with take of NavigationDestinationPresentation((uint64_t)v29, *(_QWORD *)(v8 + 56) + 96 * v21);
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<DisplayList.Index.ID, DisplayList.AccessibilityUpdater.CacheValue>();
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
        return v9;
      v16 = a1[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = a1[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            return v9;
          v16 = a1[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              return v9;
            v16 = a1[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  return v9;
                v16 = a1[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = 16 * v14;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + v18);
    v34 = *v19;
    v35 = v19[1];
    v33 = *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v34);
    Hasher._combine(_:)(HIDWORD(v34));
    Hasher._combine(_:)(v35);
    Hasher._combine(_:)(HIDWORD(v35));
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      v24 = v33;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v20) >> 6;
      v24 = v33;
      do
      {
        if (++v22 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v22 == v26;
        if (v22 == v26)
          v22 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v22);
      }
      while (v28 == -1);
      v23 = __clz(__rbit64(~v28)) + (v22 << 6);
    }
    *(_QWORD *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v29 = 16 * v23;
    v30 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v29);
    *v30 = v34;
    v30[1] = v35;
    *(_OWORD *)(*(_QWORD *)(v9 + 56) + v29) = v24;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    v32 = (id)v24;
    result = swift_bridgeObjectRetain();
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v36;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<TabCustomizationID, TabSectionCustomizationEntry>();
  result = static _DictionaryStorage.allocate(capacity:)();
  v8 = result;
  v34 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v36 = v10;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v34)
        return v8;
      v15 = a1[v14];
      v16 = v10 + 1;
      if (!v15)
      {
        v16 = v10 + 2;
        if (v10 + 2 >= v34)
          return v8;
        v15 = a1[v16];
        if (!v15)
        {
          v16 = v10 + 3;
          if (v10 + 3 >= v34)
            return v8;
          v15 = a1[v16];
          if (!v15)
          {
            v17 = v10 + 4;
            if (v10 + 4 >= v34)
              return v8;
            v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                v16 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v16 >= v34)
                  return v8;
                v15 = a1[v16];
                ++v17;
                if (v15)
                  goto LABEL_24;
              }
            }
            v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v36 = v16;
      v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    v18 = v4;
    v19 = *(_QWORD *)(v4 + 48) + 24 * v13;
    v21 = *(_QWORD *)v19;
    v20 = *(_QWORD *)(v19 + 8);
    v22 = *(unsigned __int8 *)(v19 + 16);
    v23 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v13);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v22);
    swift_bridgeObjectRetain();
    outlined copy of TabCustomizationID.Base();
    String.hash(into:)();
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v8 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v26 == v29;
        if (v26 == v29)
          v26 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v31 == -1);
      v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    v32 = *(_QWORD *)(v8 + 48) + 24 * v27;
    *(_QWORD *)v32 = v21;
    *(_QWORD *)(v32 + 8) = v20;
    *(_BYTE *)(v32 + 16) = v22;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v27) = v23;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    v4 = v18;
    v10 = v36;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v36;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<TabCustomizationID, TabCustomizationEntry>();
  result = static _DictionaryStorage.allocate(capacity:)();
  v8 = result;
  v34 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v36 = v10;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v34)
        return v8;
      v15 = a1[v14];
      v16 = v10 + 1;
      if (!v15)
      {
        v16 = v10 + 2;
        if (v10 + 2 >= v34)
          return v8;
        v15 = a1[v16];
        if (!v15)
        {
          v16 = v10 + 3;
          if (v10 + 3 >= v34)
            return v8;
          v15 = a1[v16];
          if (!v15)
          {
            v17 = v10 + 4;
            if (v10 + 4 >= v34)
              return v8;
            v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                v16 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v16 >= v34)
                  return v8;
                v15 = a1[v16];
                ++v17;
                if (v15)
                  goto LABEL_24;
              }
            }
            v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v36 = v16;
      v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    v18 = v4;
    v19 = *(_QWORD *)(v4 + 48) + 24 * v13;
    v21 = *(_QWORD *)v19;
    v20 = *(_QWORD *)(v19 + 8);
    v22 = *(unsigned __int8 *)(v19 + 16);
    v23 = *(_BYTE *)(*(_QWORD *)(v4 + 56) + v13);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v22);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v8 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v26 == v29;
        if (v26 == v29)
          v26 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v31 == -1);
      v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    v32 = *(_QWORD *)(v8 + 48) + 24 * v27;
    *(_QWORD *)v32 = v21;
    *(_QWORD *)(v32 + 8) = v20;
    *(_BYTE *)(v32 + 16) = v22;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v27) = v23;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    v4 = v18;
    v10 = v36;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt16 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;
  char v29[8];
  char v30[8];

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Target>();
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
        return v9;
      v16 = v28[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = v28[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            return v9;
          v16 = v28[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              return v9;
            v16 = v28[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  return v9;
                v16 = v28[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v14);
    outlined init with copy of AccessibilityFocus.Target(*(_QWORD *)(v4 + 56) + 8 * v14, (uint64_t)v30);
    outlined init with take of AccessibilityFocus.Target((uint64_t)v30, (uint64_t)v29);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_BYTE *)(*(_QWORD *)(v9 + 48) + v22) = v18;
    result = outlined init with take of AccessibilityFocus.Target((uint64_t)v29, *(_QWORD *)(v9 + 56) + 8 * v22);
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<_ViewList_ID.Canonical, SizeFittingState.Child>();
  result = static _DictionaryStorage.allocate(capacity:)();
  v8 = result;
  v40 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  v42 = v4;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v43 = v10;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v40)
        return v8;
      v15 = a1[v14];
      v16 = v10 + 1;
      if (!v15)
      {
        v16 = v10 + 2;
        if (v10 + 2 >= v40)
          return v8;
        v15 = a1[v16];
        if (!v15)
        {
          v16 = v10 + 3;
          if (v10 + 3 >= v40)
            return v8;
          v15 = a1[v16];
          if (!v15)
          {
            v17 = v10 + 4;
            if (v10 + 4 >= v40)
              return v8;
            v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                v16 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v16 >= v40)
                  return v8;
                v15 = a1[v16];
                ++v17;
                if (v15)
                  goto LABEL_24;
              }
            }
            v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v43 = v16;
      v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(v4 + 56) + 48 * v13;
    v22 = *(void **)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    v25 = *(_QWORD *)(v21 + 24);
    v26 = *(_QWORD *)(v21 + 32);
    v27 = *(_BYTE *)(v21 + 40);
    Hasher.init(_seed:)();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v28 = v22;
    _ViewList_ID.Canonical.hash(into:)();
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v11 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v11 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v11 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v11 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    v37 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v32);
    *v37 = v19;
    v37[1] = v20;
    v38 = *(_QWORD *)(v8 + 56) + 48 * v32;
    *(_QWORD *)v38 = v28;
    *(_QWORD *)(v38 + 8) = v23;
    *(_QWORD *)(v38 + 16) = v24;
    *(_QWORD *)(v38 + 24) = v25;
    *(_QWORD *)(v38 + 32) = v26;
    *(_BYTE *)(v38 + 40) = v27;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    v4 = v42;
    v10 = v43;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for IncrementalLayoutCacheItem()
{
  uint64_t result;

  result = type metadata singleton initialization cache for IncrementalLayoutCacheItem;
  if (!type metadata singleton initialization cache for IncrementalLayoutCacheItem)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t UpdateChildTransition.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for IncrementalTransition(0, a2, a3, a4);
  return AGGraphMutateAttribute();
}

uint64_t MakeChildTransition.visit<A>(_:)(uint64_t a1, uint64_t a2)
{
  int *v2;
  int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD v32[6];
  _BYTE v33[16];
  uint64_t AssociatedTypeWitness;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v3 = v2;
  v5 = a1;
  v46 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[1] = v9;
  v12 = type metadata accessor for IncrementalTransition(0, v10, v9, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)v32 - v16;
  v18 = *v3;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, v5, a2, v15);
  *(_DWORD *)v17 = v18;
  *((_QWORD *)v17 + 1) = 0;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v17[*(int *)(v12 + 40)], v8, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v35 = v12;
  v36 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalTransition<A>, v12);
  v19 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v33, v12, MEMORY[0x1E0DEDCE8], v19, MEMORY[0x1E0DEDD18], v20);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
  LODWORD(v5) = v37;
  _GraphValue.init(_:)();
  v21 = v3[4];
  v22 = *((_QWORD *)v3 + 3);
  v23 = *((_QWORD *)v3 + 6);
  v24 = *((_QWORD *)v3 + 7);
  v25 = v3[22];
  v37 = *((_QWORD *)v3 + 1);
  v38 = v21;
  v39 = v22;
  v40 = *((_OWORD *)v3 + 2);
  v41 = v23;
  v42 = v24;
  v43 = *((_OWORD *)v3 + 4);
  v44 = *((_QWORD *)v3 + 10);
  v45 = v25;
  v26 = *((_QWORD *)v3 + 14);
  v27 = *((_QWORD *)v3 + 15);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v26;
  *(_QWORD *)(v28 + 24) = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  static Transition.makeView(view:inputs:body:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v29 = v32[3];
  v30 = v32[4];
  result = swift_bridgeObjectRelease();
  *((_QWORD *)v3 + 16) = v29;
  *((_QWORD *)v3 + 17) = v30;
  v3[36] = v5;
  *((_BYTE *)v3 + 148) = 0;
  *((_QWORD *)v3 + 19) = a2;
  return result;
}

uint64_t type metadata accessor for IncrementalTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IncrementalTransition);
}

uint64_t destroy for IncrementalTransition(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = (a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v3 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t specialized LazyHVStack<>.lengthAndSpacing(children:predecessors:minorGeometry:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _OWORD v8[6];
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  _BYTE v17[96];

  if (*(_QWORD *)(result + 16))
  {
    outlined init with copy of _IncrementalLayout_Child(result + 32, (uint64_t)v17);
    result = _ProposedSize.init(_:in:by:)();
    v9 = v13;
    v10 = v14;
    v11 = v15;
    v12 = v16;
    if (!a2)
    {
      memset(v8, 0, 95);
      goto LABEL_6;
    }
    if (*(_QWORD *)(a2 + 16))
    {
      outlined init with copy of _IncrementalLayout_Child(a2 + 32, (uint64_t)v8);
LABEL_6:
      _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(&v9, 1, (uint64_t)v8, a4, a5 & 1);
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v8, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      return outlined destroy of _IncrementalLayout_Child((uint64_t)v17);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  _OWORD v8[6];
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  _BYTE v17[96];

  if (*(_QWORD *)(result + 16))
  {
    outlined init with copy of _IncrementalLayout_Child(result + 32, (uint64_t)v17);
    result = _ProposedSize.init(_:in:by:)();
    v9 = v13;
    v10 = v14;
    v11 = v15;
    v12 = v16;
    if (!a2)
    {
      memset(v8, 0, 95);
      goto LABEL_6;
    }
    if (*(_QWORD *)(a2 + 16))
    {
      outlined init with copy of _IncrementalLayout_Child(a2 + 32, (uint64_t)v8);
LABEL_6:
      _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(&v9, 0, (uint64_t)v8, a4, a5 & 1);
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v8, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      return outlined destroy of _IncrementalLayout_Child((uint64_t)v17);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SectionConfiguration>, (uint64_t)&type metadata for SectionConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 184);
  v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusStoreList.Item>, (uint64_t)&type metadata for FocusStoreList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 72);
  v5 = specialized Sequence._copyContents(initializing:)((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)>, (uint64_t (*)(uint64_t))type metadata accessor for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 56);
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SidebarLabelStyle and conformance SidebarLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarLabelStyle and conformance SidebarLabelStyle;
  if (!lazy protocol witness table cache variable for type SidebarLabelStyle and conformance SidebarLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarLabelStyle, &type metadata for SidebarLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarLabelStyle and conformance SidebarLabelStyle);
  }
  return result;
}

void key path getter for EnvironmentValues.defaultMinListRowHeight : EnvironmentValues(double *a1@<X8>)
{
  *a1 = EnvironmentValues.defaultMinListRowHeight.getter();
}

double EnvironmentValues.defaultMinListRowHeight.getter()
{
  uint64_t v0;
  double result;
  double v2;
  char v3;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  result = v2;
  if (v3)
    return 44.0;
  return result;
}

uint64_t partial apply for closure #1 in static Rule._update(_:attribute:)()
{
  swift_getAssociatedTypeWitness();
  return AGGraphSetOutputValue();
}

uint64_t FlipForRTLEnvironment.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  v4 = Value[1];
  v6 = *Value;
  if (*(_BYTE *)AGGraphGetValue() == 2)
  {
    swift_retain();
    result = swift_retain();
  }
  else
  {
    swift_retain();
    swift_retain();
    result = EnvironmentValues.layoutDirection.setter();
    v3 = v6;
  }
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path getter for EnvironmentValues.listCellState : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.listCellState.getter();
  *a1 = result & 1;
  a1[1] = BYTE1(result) & 1;
  a1[2] = BYTE2(result) & 1;
  return result;
}

uint64_t EnvironmentValues.listCellState.getter()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned __int8 v4;
  char v5;
  char v6;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListCellStateKey>, (uint64_t)&unk_1E1ABF7B8, (uint64_t)&protocol witness table for ListCellStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListCellStateKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListCellStateKey>, (uint64_t)&unk_1E1ABF7B8, (uint64_t)&protocol witness table for ListCellStateKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListCellStateKey>, (uint64_t)&unk_1E1ABF7B8, (uint64_t)&protocol witness table for ListCellStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListCellStateKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListCellStateKey>, (uint64_t)&unk_1E1ABF7B8, (uint64_t)&protocol witness table for ListCellStateKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v6)
    v1 = 0x10000;
  else
    v1 = 0;
  if (v5)
    v2 = 256;
  else
    v2 = 0;
  return v2 | v4 | v1;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(__int128 *, uint64_t, uint64_t, uint64_t);
  __int128 v11;
  __int128 v12;

  v9 = *(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    *((_QWORD *)&v12 + 1) = swift_getObjectType();
    *(_QWORD *)&v11 = a2;
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  swift_unknownObjectRetain();
  v9(&v11, a3, a4, a5);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)&v11, (unint64_t *)&lazy cache variable for type metadata for Any?);
}

uint64_t outlined destroy of URL?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, a2, 255, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of SearchFieldConfiguration.Data?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t outlined init with copy of PlatformItemList.Item?(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t ModifiedContent<>.accessibilityLabel<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v15;

  v5 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v7 + 16))((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v8 = Text.init<A>(_:)();
  v10 = v9;
  v12 = v11 & 1;
  ModifiedContent<>.accessibilityLabel(_:)(v8, v9, v11 & 1, v13, a2, a3);
  outlined consume of Text.Storage(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityLabel(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v14;
  char v15;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  *(_BYTE *)(v12 + 48) = a3 & 1;
  *(_QWORD *)(v12 + 56) = a4;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  v14 = v12;
  v15 = 2;
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE5888], (uint64_t)&v14, 1, a5, a6);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityInputLabels<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[7];
  uint64_t v12;

  v12 = a1;
  v11[2] = *(_QWORD *)(a2 + 16);
  v11[3] = a3;
  v11[4] = a4;
  v7 = type metadata accessor for Array();
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v7);
  v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ModifiedContent<>.accessibilityInputLabels<A>(_:), (uint64_t)v11, v7, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE5740], (uint64_t)&v12, 1, a2, a5);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityInputLabels(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = a1;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE5740], (uint64_t)&v4, 1, a2, a3);
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v19 = a3;
    v21 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v5 = v21;
    v7 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8 = Text.init(_:tableName:bundle:comment:)();
      v10 = v9;
      v12 = v11;
      v14 = v13;
      v21 = v5;
      v16 = *(_QWORD *)(v5 + 16);
      v15 = *(_QWORD *)(v5 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1);
        v5 = v21;
      }
      *(_QWORD *)(v5 + 16) = v16 + 1;
      v17 = v5 + 32 * v16;
      *(_QWORD *)(v17 + 32) = v8;
      *(_QWORD *)(v17 + 40) = v10;
      *(_BYTE *)(v17 + 48) = v12 & 1;
      *(_QWORD *)(v17 + 56) = v14;
      v7 += 32;
      --v4;
    }
    while (v4);
    v3 = a2;
    a3 = v19;
  }
  v21 = v5;
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE5740], (uint64_t)&v21, 1, v3, a3);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityTraits(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v7;

  v7 = *a1;
  v5 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>, MEMORY[0x1E0CE6508]);
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E0CE58B8], (uint64_t)&v7, 1, a2, MEMORY[0x1E0CE58B8], MEMORY[0x1E0CE58B0], v5, a3);
}

unint64_t lazy protocol witness table accessor for type AccessibilityCustomAttributes? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes? and conformance <A> A?)
  {
    type metadata accessor for AccessibilityCustomAttributes?();
    v2 = MEMORY[0x1E0CE6408];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes? and conformance <A> A?);
  }
  return result;
}

uint64_t outlined init with take of AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessibilityCustomAttributes.Value();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AccessibilityCustomAttributes.Value?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (void (*)(uint64_t))MEMORY[0x1E0CE63F8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSNumber *v7;
  uint64_t v9;

  v4 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (NSNumber *)((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7->super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_storeEnumTagMultiPayload();
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)((uint64_t)v7, a1, a2);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v7);
}

uint64_t outlined init with copy of AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessibilityCustomAttributes.Value();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for URL?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void static SubscriptionView._makeView(view:inputs:)()
{
  type metadata accessor for SubscriptionView();
}

void sub_186E9F710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for SubscriptionLifetime();
  SubscriptionLifetime.__allocating_init()();
  default argument 2 of SubscriptionView.Subscriber.init(view:subscriptionLifetime:actionBox:)(v3, v0, v2, v1);
  type metadata accessor for SubscriptionView.Subscriber();
}

uint64_t sub_186E9F78C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;

  v24[2] = a1;
  v24[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubscriptionView<A, B>.Subscriber, a1);
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v19, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)v24, a1, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  swift_release();
  swift_release();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v20 = v5;
  v21 = v1;
  v22 = v4;
  v23 = v2;
  LODWORD(v25) = v3;
  _GraphValue.subscript.getter();
  v25 = v6;
  v26 = v17;
  v27 = v7;
  v28 = v9;
  v29 = v10;
  v30 = v16;
  v31 = v15;
  v32 = v8;
  v33 = v18;
  return static View.makeDebuggableView(view:inputs:)();
}

void static SubscriptionView._makeViewList(view:inputs:)()
{
  type metadata accessor for SubscriptionView();
}

void sub_186E9F968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for SubscriptionLifetime();
  SubscriptionLifetime.__allocating_init()();
  default argument 2 of SubscriptionView.Subscriber.init(view:subscriptionLifetime:actionBox:)(v3, v1, v2, v0);
  type metadata accessor for SubscriptionView.Subscriber();
}

uint64_t sub_186E9F9D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;

  v25[2] = a1;
  v25[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubscriptionView<A, B>.Subscriber, a1);
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v20, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v25, a1, MEMORY[0x1E0DEDCE8], v11, MEMORY[0x1E0DEDD18], v12);
  swift_release();
  swift_release();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v21 = v5;
  v22 = v2;
  v23 = v4;
  v24 = v1;
  LODWORD(v26) = v3;
  _GraphValue.subscript.getter();
  v26 = v14;
  v27 = v6;
  v28 = v7;
  v29 = v8;
  v30 = v9;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  v35 = v15;
  return static View.makeDebuggableViewList(view:inputs:)();
}

void type metadata accessor for SubscriptionView.Subscriber()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t default argument 2 of SubscriptionView.Subscriber.init(view:subscriptionLifetime:actionBox:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD v10[2];

  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for MutableBox();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v10[0] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v10[1] = v8;
  return MEMORY[0x18D755D28](v10);
}

void type metadata accessor for Attribute<()>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<()>)
  {
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>);
  }
}

void protocol witness for static View._makeViewList(view:inputs:) in conformance SubscriptionView<A, B>()
{
  static SubscriptionView._makeViewList(view:inputs:)();
}

uint64_t outlined copy of DynamicPropertyCache.Fields.Layout()
{
  return swift_bridgeObjectRetain();
}

uint64_t outlined consume of DynamicPropertyCache.Fields.Layout()
{
  return swift_bridgeObjectRelease();
}

void type metadata accessor for External<()>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<()>)
  {
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<()>);
  }
}

_QWORD *initializeWithCopy for SelectionManagerBox(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = v7 + 1;
  if (v8 <= v7)
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = v8;
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = v9;
  v11 = *((unsigned __int8 *)a2 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  if (v11 == 2)
  {
    (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
    v13 = 2;
LABEL_23:
    *((_BYTE *)a1 + v10) = v13;
    return a1;
  }
  if (v11 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    v13 = 1;
    goto LABEL_23;
  }
  *a1 = *a2;
  *((_BYTE *)a1 + v10) = 0;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextInputDictation(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *(unsigned __int8 *)a1;
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance ButtonStyleContent<A, B>()
{
  return static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t getEnumTagSinglePayload for AccessibilityLargeContentViewBehavior(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for TextInputDictation(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)result = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ActiveContextMenu(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance IdentityLink()
{
  return specialized static IdentityLink._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

uint64_t storeEnumTagSinglePayload for MenuOrder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186EA00D0 + 4 * byte_187C171C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186EA0104 + 4 * byte_187C171C0[v4]))();
}

uint64_t sub_186EA0104(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186EA010C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186EA0114);
  return result;
}

uint64_t sub_186EA0120(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186EA0128);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186EA012C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186EA0134(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for ScenePhase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186EA01B4 + 4 * byte_187C1D3C9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186EA01E8 + 4 * asc_187C1D3C4[v4]))();
}

uint64_t sub_186EA01E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186EA01F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186EA01F8);
  return result;
}

uint64_t sub_186EA0204(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186EA020CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186EA0210(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186EA0218(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for ActiveContextMenu(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 1;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PlatterButtonType(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

BOOL IdentityLinkBox.update(property:phase:)(int *a1)
{
  int *v1;
  int v2;
  int v3;
  int v4;
  _BOOL8 result;

  v2 = *v1;
  v3 = *v1;
  if (!*v1)
  {
    v3 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1)
      v4 = static ViewIdentity.nextSeed + 1;
    else
      v4 = 1;
    static ViewIdentity.nextSeed = v4;
  }
  *a1 = v3;
  result = v3 != v2;
  *v1 = v3;
  return result;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance NavigationStateHost@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for NavigationStateHost();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for NavigationStateHost()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for OnScrollVisibilityGeometryAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ListPadding(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[65])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE v21[16];
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(_QWORD *)(v12 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = &v21[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, double))(v9 + 16))(v11, v16);
  dispatch thunk of Rule.value.getter();
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, a5);
  v23 = a5;
  v24 = a6;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v18, (uint64_t)partial apply for closure #1 in static Rule._update(_:attribute:), (uint64_t)v22, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v19);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v18, a4);
}

uint64_t initializeBufferWithCopyOfBuffer for IncrementalPreference(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t partial apply for closure #1 in IncrementalPreference.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in IncrementalPreference.value.getter(a1);
}

uint64_t closure #1 in IncrementalPreference.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t Value;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, Value, AssociatedTypeWitness);
}

uint64_t protocol witness for Rule.value.getter in conformance _ScrollViewBoundsModifier<A>.Child(uint64_t a1)
{
  uint64_t v1;

  return _ScrollViewBoundsModifier.Child.value.getter(*(_QWORD *)v1, *(unsigned int *)(v1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for Rule.value.getter in conformance IncrementalPreference<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IncrementalPreference.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t IncrementalPreference.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  double v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v38 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v33 - v13;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v12);
  v16 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  v42 = v14;
  v16(a1, a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  Value = AGGraphGetValue();
  v18 = *(_QWORD *)Value;
  v19 = *(_QWORD *)(*(_QWORD *)Value + 16);
  if (!v19)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v42, AssociatedTypeWitness);
  v39 = v7;
  v40 = AssociatedTypeWitness;
  v37 = a3;
  type metadata accessor for AGGraphRef(0);
  result = swift_bridgeObjectRetain();
  v21 = 0;
  v35 = v19 - 1;
  v36 = 1;
  v41 = 32;
LABEL_3:
  v22 = v41 + 72 * v21;
  while (v21 < *(_QWORD *)(v18 + 16))
  {
    v23 = *(_QWORD *)(v18 + v22);
    swift_retain();
    if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0)
    {
      swift_release();
LABEL_17:
      swift_bridgeObjectRelease();
      a3 = v37;
      v7 = v39;
      AssociatedTypeWitness = v40;
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v42, AssociatedTypeWitness);
    }
    v43 = *(_QWORD *)(v23 + 32);
    v44 = *(_QWORD *)(v23 + 40);
    v24 = _ViewOutputs.subscript.getter();
    if ((v24 & 0x100000000) == 0)
    {
      v26 = v24;
      if ((v15 & 1) != 0 || (v24 = AGGraphGetValue(), (*(_BYTE *)(v24 + 6) & 1) == 0))
      {
        v34 = v21 + 1;
        if ((v36 & 1) != 0)
        {
          v27 = v40;
          v28 = AGGraphGetValue();
          v29 = v39;
          (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v38, v28, v27);
          swift_release();
          v30 = v42;
          (*(void (**)(char *, uint64_t))(v29 + 8))(v42, v27);
          result = (*(uint64_t (**)(char *, char *, uint64_t))(v29 + 32))(v30, v38, v27);
        }
        else
        {
          v31 = MEMORY[0x1E0C80A78](v24, v25);
          *(&v33 - 4) = a1;
          *(&v33 - 3) = a2;
          *((_DWORD *)&v33 - 4) = v26;
          (*(void (**)(char *, uint64_t (*)@<X0>(uint64_t@<X8>), double))(a2 + 24))(v42, partial apply for closure #1 in IncrementalPreference.value.getter, v31);
          result = swift_release();
        }
        v36 = 0;
        v32 = v35 == v21;
        v21 = v34;
        if (v32)
          goto LABEL_17;
        goto LABEL_3;
      }
    }
    ++v21;
    result = swift_release();
    v22 += 72;
    if (v19 == v21)
      goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t destroy for UpdateViewCache()
{
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance MakeBody<A>(uint64_t a1)
{
  unsigned int *v1;

  return MakeBody.value.getter(*v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t MakeBody.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Value;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, Value, a2);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
}

void protocol witness for PubliclyPrimitiveView.internalBody.getter in conformance <> Section<A, B, C>(uint64_t a1, uint64_t a2)
{
  Section<>.internalBody.getter(a1, *(_QWORD *)(a2 - 8));
}

void Section<>.internalBody.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[3];

  v3 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityTraitsModifier.ChildModifier(255, v3, a2, v5);
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header();
  v11[0] = a2;
  v11[1] = &protocol witness table for CaptureViewRespondersModifier;
  v8 = MEMORY[0x1E0CE2E70];
  v10[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v11);
  v10[1] = &protocol witness table for AccessibilityTraitsModifier<A>.ChildModifier;
  v9[0] = MEMORY[0x18D75FFDC](v8, v6, v10);
  v9[1] = &protocol witness table for IgnoreViewRespondersModifier;
  MEMORY[0x18D75FFDC](v8, v7, v9);
  type metadata accessor for StaticSourceWriter();
}

void sub_186EA0AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v13 = type metadata accessor for ModifiedContent();
  v9[8] = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v9[12] = (char *)&a9 - v15;
  v16 = *(_QWORD *)(v10 + 32);
  v17 = lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer();
  v9[6] = v17;
  *(_QWORD *)(v12 - 168) = &type metadata for SectionStyleConfiguration.Footer;
  *(_QWORD *)(v12 - 160) = v16;
  *(_QWORD *)(v12 - 152) = v17;
  *(_QWORD *)(v12 - 144) = v11;
  v9[1] = v11;
  type metadata accessor for StaticSourceWriter();
}

void sub_186EA0B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v16 = type metadata accessor for ModifiedContent();
  v9[7] = v16;
  v9[9] = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v9[2] = (char *)&a9 - v18;
  v19 = v10 + *(int *)(v13 + 52);
  v20 = *(_QWORD *)v19;
  v21 = *(_QWORD *)(v19 + 8);
  v22 = *(_BYTE *)(v19 + 16);
  *(_QWORD *)(v15 - 168) = *(_QWORD *)v19;
  *(_QWORD *)(v15 - 160) = v21;
  *(_BYTE *)(v15 - 152) = v22;
  v23 = *(_QWORD *)(v13 + 24);
  v9[36] = v9[13];
  v9[37] = v23;
  v9[38] = v12;
  v9[39] = v14;
  v9[40] = v9[10];
  v9[41] = v11;
  v9[42] = v10;
  *v9 = v10;
  outlined copy of Binding<NavigationSplitViewColumn>?(v20, v21);
  lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SectionStyleConfiguration.Header, (uint64_t)partial apply for closure #1 in Section<>.internalBody.getter);
}

void sub_186EA0C0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  outlined consume of Binding<NavigationSplitViewColumn>?(*(_QWORD *)(v9 - 168), *(_QWORD *)(v9 - 160));
  v0[26] = v6;
  v0[27] = v5;
  v0[28] = v3;
  v0[29] = v2;
  v10 = v0[1];
  v0[30] = v8;
  v0[31] = v10;
  v0[32] = v4;
  *(_QWORD *)(v9 - 184) = v1;
  *(_QWORD *)(v9 - 176) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v9 - 184);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SectionStyleConfiguration.Footer, (uint64_t)partial apply for closure #2 in Section<>.internalBody.getter);
}

void sub_186EA0C94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t, uint64_t))(v0[8] + 8))(v1, v7);
  v0[16] = v0[13];
  v0[17] = v5;
  v0[18] = v4;
  v0[19] = v3;
  v0[20] = v8;
  v0[21] = v2;
  v0[22] = *v0;
  *(_QWORD *)(v9 - 200) = v6;
  *(_QWORD *)(v9 - 192) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0[7], v9 - 200);
  lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SectionStyleConfiguration.RawContent, (uint64_t)partial apply for closure #3 in Section<>.internalBody.getter);
}

uint64_t sub_186EA0D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 8))(v2, v1);
}

uint64_t outlined copy of Binding<NavigationSplitViewColumn>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

void protocol witness for PlatformGroupFactory.features.getter in conformance HostingScrollView.PlatformContainer(_WORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for Rule.value.getter in conformance CoordinateSpaceTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CoordinateSpaceTransform.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t CoordinateSpaceTransform.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _OWORD *Value;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD v16[3];

  v5 = type metadata accessor for _CoordinateSpaceModifier(0, a1, a2, a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v16 - v8;
  CoordinateSpaceTransform.transform.getter(a3);
  Value = (_OWORD *)AGGraphGetValue();
  v16[0] = *Value;
  *(double *)&v12 = MEMORY[0x18D755E9C](Value, v11);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v13, v12));
  v14 = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v14, v5);
  _convertToAnyHashable<A>(_:)();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v9, a1);
  type metadata accessor for CGSize(0);
  AGGraphGetValue();
  ViewTransform.appendSizedSpace(name:size:)();
  return outlined destroy of AnyHashable((uint64_t)v16);
}

uint64_t type metadata accessor for _CoordinateSpaceModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _CoordinateSpaceModifier);
}

uint64_t CoordinateSpaceTransform.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;

  Value = AGGraphGetValue();
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
  return swift_retain();
}

uint64_t protocol witness for Rule.value.getter in conformance AnchorWriter<A, B>(uint64_t *a1)
{
  uint64_t *v1;

  return AnchorWriter.value.getter(*v1, v1[1], a1[2], a1[3], a1[4]);
}

uint64_t AnchorWriter.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for _AnchorWritingModifier(0, a3, a4, a5);
  swift_getAssociatedTypeWitness();
  return Attribute.syncMainIfReferences<A>(do:)();
}

uint64_t type metadata accessor for _AnchorWritingModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnchorWritingModifier);
}

uint64_t protocol witness for Rule.value.getter in conformance _ScrollViewBoundsModifier2<A>.Child(uint64_t a1)
{
  uint64_t *v1;

  return _ScrollViewBoundsModifier2.Child.value.getter(*v1, v1[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t _ScrollViewBoundsModifier2.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  AGGraphGetValue();
  swift_retain();
  AGGraphGetValue();
  *(double *)&v6 = MEMORY[0x18D755E9C]();
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v7, v6));
  v9 = type metadata accessor for _ScrollViewBoundsModifier2.Child(0, a3, a4, v8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollViewBoundsModifier2<A>.Child, v9);
  Rule.withObservation<A>(do:)();
  return swift_release();
}

uint64_t destroy for TextFieldState.DeprecatedActions()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for BorderlessButtonLabelShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + 3 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 3 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance SystemScrollViewContainer<A>.EnvironmentAxesModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SystemScrollViewContainer.EnvironmentAxesModifier.makeEnvironment(modifier:environment:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t static SystemScrollViewContainer.EnvironmentAxesModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t (*v5)(uint64_t *, _QWORD);
  _BYTE *v6;
  uint64_t v8;

  closure #1 in static SystemScrollViewContainer.EnvironmentAxesModifier.makeEnvironment(modifier:environment:)(1, a3, a4, a4);
  AGGraphCreateOffsetAttribute2();
  v4 = *(_BYTE *)AGGraphGetValue();
  EnvironmentValues.nearestScrollableAxes.setter();
  v5 = (uint64_t (*)(uint64_t *, _QWORD))EnvironmentValues.allScrollableAxes.modify();
  *v6 |= v4;
  return v5(&v8, 0);
}

uint64_t closure #1 in static SystemScrollViewContainer.EnvironmentAxesModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for SystemScrollViewContainer.EnvironmentAxesModifier(0, a2, a3, a4);
  v5 = MEMORY[0x1E0CE6900];
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_13, (uint64_t)v9, v5, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t type metadata accessor for SystemScrollViewContainer.EnvironmentAxesModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SystemScrollViewContainer.EnvironmentAxesModifier);
}

_BYTE *partial apply for closure #1 in View.listRowSeparator(_:edges:)(_BYTE *result)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(v1 + 16);
  v3 = *(_BYTE *)(v1 + 17);
  if ((v3 & 1) == 0)
  {
    if ((*(_BYTE *)(v1 + 17) & 2) == 0)
      return result;
LABEL_5:
    result[16] = v2;
    return result;
  }
  *result = v2;
  if ((v3 & 2) != 0)
    goto LABEL_5;
  return result;
}

void @objc _UIHostingView.didMoveToWindow()(void *a1)
{
  id v1;

  v1 = a1;
  _UIHostingView.didMoveToWindow()();

}

Swift::Void __swiftcall _UIHostingView.didMoveToWindow()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  id v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _UNKNOWN **v17;
  char *v18;
  uint64_t v19;
  uint64_t ObjectType;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[6];

  v1 = v0;
  v2 = (uint64_t *)MEMORY[0x1E0DEEDD8];
  v3 = *MEMORY[0x1E0DEEDD8] & *v0;
  MEMORY[0x18D75B908]();
  v4 = objc_msgSend(v0, sel_window);
  if (v4)
  {

    _UIHostingView.traitCollectionOverride.setter(0);
    v5 = (_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x110));
    v6 = *v5;
    *(_OWORD *)v5 = xmmword_187BFE310;
    outlined consume of EnvironmentValues?(v6);
    LOWORD(v40[0]) = 8;
    v8 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v7);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v8);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  _UIHostingView.updateKeyboardAvoidance()();
  swift_retain();
  v9 = objc_msgSend(v0, sel_window);
  UIKitEventBindingBridge.hostingView<A>(_:didMoveToWindow:)((uint64_t)v0, (uint64_t)v9);
  swift_release();

  v10 = *v0;
  v11 = *v2;
  if (!*(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x248)))
  {
    v12 = _UIHostingView.isWindowRoot.getter();
    v10 = *v0;
    v11 = *v2;
    if ((v12 & 1) != 0)
    {
      v13 = v11 & v10;
      v14 = *(_QWORD *)((char *)v0 + *(_QWORD *)(v13 + 584));
      if (!v14)
      {
        type metadata accessor for RootViewDelegate();
        v14 = swift_allocObject();
        *(_DWORD *)(v14 + 16) = -1;
        *(_QWORD *)(v14 + 32) = 0;
        swift_unknownObjectWeakInit();
        v13 = *v2 & *v0;
      }
      *(_QWORD *)((char *)v0 + *(_QWORD *)(v13 + 584)) = v14;
      swift_retain();
      swift_release();
      v15 = (char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x240);
      if (MEMORY[0x18D760234](v15))
      {
        v16 = *(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x248));
        if (v16)
        {
          *(_QWORD *)(v16 + 32) = *((_QWORD *)v15 + 1);
          swift_unknownObjectWeakAssign();
        }
        swift_unknownObjectRelease();
      }
      v17 = &protocol witness table for RootViewDelegate;
      if (!*(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x248)))
        v17 = 0;
      *(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x240) + 8) = v17;
      swift_unknownObjectWeakAssign();
      v10 = *v0;
      v11 = *v2;
    }
  }
  v18 = (char *)v0 + *(_QWORD *)((v11 & v10) + 0x240);
  if (MEMORY[0x18D760234](v18))
  {
    v19 = *((_QWORD *)v18 + 1);
    ObjectType = swift_getObjectType();
    v21 = objc_msgSend(v0, sel_window);
    (*(void (**)(_QWORD *, id, _QWORD, _QWORD, uint64_t, uint64_t))(v19 + 8))(v0, v21, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), ObjectType, v19);

    swift_unknownObjectRelease();
  }
  v22 = objc_msgSend(v0, sel_window, v40[0]);

  if (!v22)
  {
    v23 = *(id *)((char *)v1 + *(_QWORD *)((*v2 & *v1) + 0x210));
    ContextMenuBridge.hostRemovedFromWindow()();

    v24 = *(id *)((char *)v1 + *(_QWORD *)((*v2 & *v1) + 0x1C0));
    EditMenuBridge.hostRemovedFromWindow()();

  }
  if ((*((_BYTE *)v1 + *(_QWORD *)((*v2 & *v1) + 0x168)) & 1) == 0)
  {
    static Semantics.v6.getter();
    if ((isLinkedOnOrAfter(_:)() & 1) != 0)
    {
      *((_BYTE *)v1 + *(_QWORD *)((*v2 & *v1) + 0x168)) = 1;
      v25 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = *(_QWORD *)(v3 + 80);
      v26[3] = *(_QWORD *)(v3 + 88);
      v26[4] = v25;
      swift_retain();
      specialized static UIKitUpdateCycle.addPreCommitObserver(_:)((uint64_t)partial apply for closure #1 in _UIHostingView.didMoveToWindow(), (uint64_t)v26);
      swift_release();
      swift_release();
    }
  }
  v27 = objc_msgSend(v1, sel_window);

  if (v27)
  {
    _UIHostingView.updateRemovedState()();
    _UIHostingView.updateEventBridge()();
  }
  else
  {
    v28 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
    v29 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v30 = (_QWORD *)swift_allocObject();
    v30[2] = *(_QWORD *)(v3 + 80);
    v30[3] = *(_QWORD *)(v3 + 88);
    v30[4] = v29;
    v40[4] = partial apply for closure #2 in _UIHostingView.didMoveToWindow();
    v40[5] = v30;
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 1107296256;
    v40[2] = thunk for @escaping @callee_guaranteed () -> ();
    v40[3] = &block_descriptor_80;
    v31 = _Block_copy(v40);
    swift_release();
    objc_msgSend(v28, sel__performBlockAfterCATransactionCommits_, v31);
    _Block_release(v31);

  }
  _UIHostingView.updateSceneNotifications()();
  _UIHostingView.updateWindowNotifications()();
  _UIHostingView.requestUpdateForFidelity()();
  swift_retain();
  v32 = (void *)FocusBridge.host.getter();
  swift_release();
  if (v32)

  v33 = MEMORY[0x18D760234]((char *)v1 + *(_QWORD *)((*v2 & *v1) + 0x130));
  if (v33)
  {
    v34 = (void *)v33;
    UIHostingController._viewDidMoveToWindow()();

  }
  v35 = _UIHostingView.sheetBridge.getter();
  if (v35)
  {
    v36 = v35;
    SheetBridge.didMoveToWindow()();

  }
  v37 = objc_msgSend(v1, sel_window);
  if (v37)

  else
    *((_BYTE *)v1 + *(_QWORD *)((*v2 & *v1) + 0xA8)) = 0;
  LOWORD(v40[0]) = 2;
  v39 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v38);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v39);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  static Update.end()();
}

Swift::Void __swiftcall _UIHostingView.requestUpdateForFidelity()()
{
  void *v0;
  id v1;
  unsigned int v2;

  if ((_UIHostingView.updatesWillBeVisible.getter() & 1) != 0)
  {
    objc_msgSend(v0, sel_setNeedsLayout);
    _UIHostingView.requestUpdate(after:)(0.0);
  }
  else
  {
    _UIHostingView.clearDisplayLink()();
    _UIHostingView.clearUpdateTimer()();
    v1 = objc_msgSend(v0, sel_layer);
    v2 = objc_msgSend(v1, sel_needsLayout);

    if (v2)
      _UIHostingView.requestImmediateUpdate()();
  }
}

uint64_t outlined consume of EnvironmentValues?(uint64_t result)
{
  if (result != 1)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall _UIHostingView.updateRemovedState()()
{
  _QWORD *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8);
  v2 = swift_beginAccess();
  if (*v1 == 1)
    _UIHostingView.clearDisplayLink()();
  MEMORY[0x1E0C80A78](v2, v3);
  static Update.ensure<A>(_:)();
}

Swift::Void __swiftcall SheetBridge.didMoveToWindow()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)MEMORY[0x18D760234](v0 + direct field offset for SheetBridge.host);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_window);

    if (v3)
    *(_BYTE *)(v0 + direct field offset for SheetBridge.hasWindow) = v3 != 0;
  }
  else
  {
    __break(1u);
  }
}

void SheetBridge.host.getter()
{
  JUMPOUT(0x18D760234);
}

void _UIHostingView.updateWindowNotifications()()
{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v1 = objc_msgSend(v0, sel_window);
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (void *)MEMORY[0x18D760234]((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260));
  v4 = v3;
  if (v1)
  {

    if (v4)
    {

      if (v1 == v4)
        return;
    }
  }
  else
  {
    if (!v3)
      return;

  }
  v5 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v6 = MEMORY[0x18D760234]((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x260));
  if (v6)
  {
    v7 = (void *)v6;
    v8 = (void *)MEMORY[0x18D75CC88](0xD00000000000001ELL, 0x8000000187BEF5A0);
    objc_msgSend(v5, sel_removeObserver_name_object_, v0, v8, v7);

    v9 = (void *)MEMORY[0x18D75CC88](0xD00000000000001DLL, 0x8000000187BEF5C0);
    objc_msgSend(v5, sel_removeObserver_name_object_, v0, v9, v7);

    v10 = (void *)MEMORY[0x18D75CC88](0xD000000000000023, 0x8000000187BEF5E0);
    objc_msgSend(v5, sel_removeObserver_name_object_, v0, v10, v7);

  }
  v11 = objc_msgSend(v0, sel_window);
  if (v11)
  {
    v12 = v11;
    v13 = (void *)MEMORY[0x18D75CC88](0xD00000000000001ELL, 0x8000000187BEF5A0);
    objc_msgSend(v5, sel_addObserver_selector_name_object_, v0, sel_windowWillRotateWithNotification_, v13, v12);

    v14 = (void *)MEMORY[0x18D75CC88](0xD00000000000001DLL, 0x8000000187BEF5C0);
    objc_msgSend(v5, sel_addObserver_selector_name_object_, v0, sel_windowDidRotateWithNotification_, v14, v12);

    v15 = (void *)MEMORY[0x18D75CC88](0xD000000000000023, 0x8000000187BEF5E0);
    objc_msgSend(v5, sel_addObserver_selector_name_object_, v0, sel_windowDidMoveToSceneWithNotification_, v15, v12);

  }
  v16 = objc_msgSend(v0, sel_window);
  swift_unknownObjectWeakAssign();

}

void _UIHostingView.observedWindow.getter()
{
  JUMPOUT(0x18D760234);
}

id _UIHostingView.isWindowRoot.getter()
{
  id v0;
  id result;
  void *v2;
  id v3;
  id v4;

  result = objc_msgSend(v0, sel_window);
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_rootViewController);

    if (v3 && (v4 = objc_msgSend(v3, sel_viewIfLoaded), v3, v4))
    {

      return (id)(v4 == v0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void _UIHostingView.displayLink.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x148);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

uint64_t _UIHostingView.initialInheritedEnvironment.setter(_OWORD *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x110));
  v3 = *v2;
  *(_OWORD *)v2 = *a1;
  return outlined consume of EnvironmentValues?(v3);
}

void _UIHostingView.traitCollectionOverride.setter(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x128);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;
  v7 = a1;
  _UIHostingView.traitCollectionOverride.didset((uint64_t)v3, v4, v5, v6);

}

uint64_t _UIHostingView.traitCollectionOverride.didset(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)((char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x128));
  if (!v5)
  {
    if (!result)
      return result;
    goto LABEL_6;
  }
  if (!result || v5 != result)
  {
LABEL_6:
    v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
    return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  return result;
}

Swift::Void __swiftcall _UIHostingView.updateEventBridge()()
{
  void *v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  Class isa;

  v1 = specialized _UIHostingView.eventBridge.getter();
  swift_retain();
  v2 = objc_msgSend(v0, sel_traitCollection);
  v3 = objc_msgSend(v2, sel_userInterfaceIdiom);

  if (v3 == (id)3 && (v4 = *(void **)(v1 + 48)) != 0)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_187BFF9C0;
    v6 = v4;
    *(NSNumber *)(v5 + 32) = Int._bridgeToObjectiveC()();
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_setAllowedTouchTypes_, isa);
    swift_release();

  }
  else
  {
    swift_release();
  }
}

Swift::Void __swiftcall _UIHostingView.clearDisplayLink()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;

  _UIHostingView.cancelAsyncRendering()();
  v0 = specialized _UIHostingView.displayLink.getter();
  if (v0)
  {
    MEMORY[0x1E0C80A78](v0, v1);
    v3 = v2;
    static Update.locked<A>(_:)();

  }
  _UIHostingView.displayLink.setter(0);
}

uint64_t UIHostingController.resolveRequiredBridges(in:allowedActions:)(uint64_t *a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char v19;
  char v20;
  char v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char v26;
  id v27;
  char v28;
  id v29;
  char v30;
  id v31;
  uint64_t v32;
  char v33;
  uint64_t ObjectType;
  char v35;
  void *v36;
  char v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];

  v3 = *v2;
  v4 = *MEMORY[0x1E0DEEDD8];
  v6 = *a1;
  v5 = a1[1];
  MEMORY[0x18D75B908]();
  v7 = v5;
  v8 = v6;
  if (v6 == 1)
  {
    specialized UIHostingController.host.getter();
    swift_retain();
    GraphHost.environment.getter();
    swift_release();
    v8 = v40;
    v7 = v41;
  }
  if (!v8)
  {
    outlined copy of EnvironmentValues?(v6);
LABEL_9:
    swift_release();
    return static Update.end()();
  }
  if ((a2 & 3) == 0)
  {
    outlined copy of EnvironmentValues?(v6);
    v40 = v8;
    v41 = v7;
    UIHostingController.resolveBarAppearanceBehavior(in:)((uint64_t)&v40);
    swift_release();
    goto LABEL_9;
  }
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = UIHostingController.requiredBridges.getter();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBridgesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  outlined copy of EnvironmentValues?(v6);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBridgesKey);
  swift_retain_n();
  if (v7)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v10 = v40;
  v11 = (uint64_t)objc_msgSend(v2, sel_navigationController);
  if (!v11)
  {
    UIHostingController.overrides.getter((uint64_t)&v40);
    v11 = MEMORY[0x18D760234](&v42);
    outlined destroy of HostingControllerOverrides((uint64_t)&v40);
  }
  v12 = (unint64_t)objc_msgSend(v2, sel_tabBarController);
  v37 = v10;
  v36 = (void *)v12;
  if (v11)
  {
    if ((v10 & 4) == 0)
    {
      update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(4, objc_msgSend((id)v11, sel__supportsDataDrivenNavigation) ^ 1, a2 & 1, v38, (a2 & 2) != 0);
LABEL_22:
      v19 = v37;
      v20 = (v37 & 1) == 0;
      goto LABEL_23;
    }
    goto LABEL_19;
  }
  if (!specialized UIHostingController.navigationBridge.getter()
    || (swift_retain(), v13 = UIKitNavigationBridge.isInTransientPop.getter(), swift_release(), !v13))
  {
LABEL_19:
    v14 = 0;
    goto LABEL_20;
  }
  v14 = 1;
LABEL_20:
  update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(4, v14, a2 & 1, v38, (a2 & 2) != 0);
  if (v11 | v12)
    goto LABEL_22;
  v15 = (void *)specialized UIHostingController.host.getter();
  v17 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v4 & v3) + 0x50), *(_QWORD *)((v4 & v3) + 0x58), v16);
  v18 = v15;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v17);
  LOBYTE(v17) = ViewRendererHost.isRootHost.getter();

  if ((v17 & 1) != 0)
    goto LABEL_22;
  v20 = 0;
  v19 = v37;
LABEL_23:
  update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(1, v20, a2 & 1, v38, (a2 & 2) != 0);
  static Semantics.v3.getter();
  v21 = isLinkedOnOrAfter(_:)();
  update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(16, v21 & ((v19 & 0x10) == 0), a2 & 1, v38, (a2 & 2) != 0);
  v22 = (void *)specialized UIHostingController.host.getter();
  v24 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v4 & v3) + 0x50), *(_QWORD *)((v4 & v3) + 0x58), v23);
  v25 = v22;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v24);
  v26 = ViewRendererHost.isRootHost.getter();

  if ((v26 & 1) != 0
    && (v27 = objc_msgSend((id)specialized UIHostingController.host.getter(), sel_window)) != 0)
  {

    v28 = 1;
  }
  else
  {
    v28 = 0;
  }
  update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(2, v28, a2 & 1, v38, (a2 & 2) != 0);
  v29 = (id)specialized UIHostingController.host.getter();
  v30 = ViewRendererHost.isRootHost.getter();

  if ((v30 & 1) != 0)
  {
    v31 = objc_msgSend((id)specialized UIHostingController.host.getter(), sel_window);
    v32 = v7;
    if (v31)
    {

      v33 = 1;
    }
    else
    {
      v33 = 0;
    }
  }
  else
  {
    v33 = 0;
    v32 = v7;
  }
  update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(32, v33, a2 & 1, v38, (a2 & 2) != 0);
  if (v37 < 0)
  {
    v35 = 0;
  }
  else
  {
    specialized UIHostingController.host.getter();
    ObjectType = swift_getObjectType();
    v35 = (*(uint64_t (**)(void))(ObjectType + 1776))() ^ 1;
  }
  update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(128, v35 & 1, a2 & 1, v38, (a2 & 2) != 0);
  swift_beginAccess();
  UIHostingController.requiredBridges.setter(*(_QWORD *)(v38 + 16));
  swift_release();

  v43[0] = v8;
  v43[1] = v32;
  UIHostingController.resolveBarAppearanceBehavior(in:)((uint64_t)v43);
  swift_release();
  swift_release();
  return static Update.end()();
}

uint64_t update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(uint64_t result, char a2, char a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v5 = result;
  v6 = (uint64_t *)(a4 + 16);
  if ((a2 & 1) != 0)
  {
    if ((a3 & 1) != 0)
    {
      result = swift_beginAccess();
      if ((v5 & ~*v6) != 0)
      {
        v7 = *v6 | v5;
LABEL_8:
        *v6 = v7;
      }
    }
  }
  else if ((a5 & 1) != 0)
  {
    result = swift_beginAccess();
    if ((*v6 & v5) != 0)
    {
      v7 = *v6 & ~v5;
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t UIHostingController.requiredBridges.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for UIHostingController.requiredBridges);
}

Swift::Void __swiftcall UIHostingController.didChangeRequiredBridges(from:to:)(SwiftUI::HostingControllerBridges from, SwiftUI::HostingControllerBridges to)
{
  _QWORD *v2;
  void *v3;
  char rawValue;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  void *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  Class v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  _QWORD v35[5];

  if (to.rawValue != from.rawValue)
  {
    v3 = v2;
    rawValue = from.rawValue;
    v5 = *MEMORY[0x1E0DEEDD8] & *v2;
    MEMORY[0x18D75B908]();
    v6 = rawValue & ~UIHostingController.requiredBridges.getter();
    v8 = UIHostingController.requiredBridges.getter() & ~rawValue;
    if ((v6 & 2) != 0)
    {
      v10 = specialized UIHostingController.keyboardShortcutBridge.getter();
      if (v10)
      {
        v11 = (void *)v10;
        specialized UIHostingController.host.getter();
        v12 = v11;
        swift_retain();
        GraphHost.removePreference<A>(_:)();
        v12[OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_isObservingPreferences] = 0;

        swift_release();
      }
      v13 = specialized UIHostingController.keyboardShortcutBridge.getter();
      if (v13)
      {
        v15 = (void *)v13;
        v35[3] = type metadata accessor for UIHostingController(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v14);
        v35[4] = &protocol witness table for UIHostingController<A>;
        v35[0] = v3;
        v16 = v15;
        v17 = v3;
        KeyboardShortcutBridge.flushKeyCommands(_:)((uint64_t)v35);

        outlined destroy of KeyboardShortcutSource?((uint64_t)v35);
      }
      v9 = 0;
    }
    else
    {
      if ((v8 & 2) == 0)
        goto LABEL_11;
      v9 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for KeyboardShortcutBridge()), sel_init);
    }
    UIHostingController.keyboardShortcutBridge.setter((uint64_t)v9);
LABEL_11:
    if ((v6 & 4) != 0)
    {
      if (specialized UIHostingController.navigationBridge.getter())
      {
        specialized UIHostingController.host.getter();
        swift_retain();
        swift_retain();
        specialized UIKitNavigationBridge.removePreferences(from:)();
        swift_release();
        swift_release();
      }
      UIHostingController.navigationBridge.setter(0);
      if ((v6 & 1) == 0)
        goto LABEL_17;
      goto LABEL_39;
    }
    if ((v8 & 4) != 0)
    {
      type metadata accessor for NavigationBridge_PhoneTV(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v7);
      v18 = NavigationBridge_PhoneTV.__allocating_init()();
      UIHostingController.navigationBridge.setter(v18);
      if (specialized UIHostingController.navigationBridge.getter())
      {
        swift_unknownObjectWeakAssign();
        if (specialized UIHostingController.navigationBridge.getter())
        {
          specialized UIHostingController.host.getter();
          swift_retain();
          swift_retain();
          specialized UIKitNavigationBridge.addPreferences(to:)();
          swift_release();
          swift_release();
          goto LABEL_16;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_55;
    }
LABEL_16:
    if ((v6 & 1) == 0)
    {
LABEL_17:
      if ((v8 & 1) == 0)
        goto LABEL_20;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ToolbarBridge<UIKitToolbarStrategy>, (uint64_t)&type metadata for UIKitToolbarStrategy, (uint64_t)&protocol witness table for UIKitToolbarStrategy, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarBridge);
      UIHostingController.toolbarBridge.setter((uint64_t)objc_msgSend(objc_allocWithZone(v19), sel_init));
      v20 = specialized UIHostingController.toolbarBridge.getter();
      if (v20)
      {
        v21 = (void *)v20;
        specialized UIHostingController.host.getter();
        v22 = v21;
        swift_retain();
        GraphHost.addPreference<A>(_:)();
        GraphHost.addPreference<A>(_:)();
        GraphHost.addPreference<A>(_:)();
        GraphHost.addPreference<A>(_:)();

        swift_release();
LABEL_20:
        if ((v6 & 0x10) == 0)
          goto LABEL_21;
        goto LABEL_42;
      }
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
LABEL_39:
    v29 = specialized UIHostingController.toolbarBridge.getter();
    if (v29)
    {
      v30 = (void *)v29;
      specialized UIHostingController.host.getter();
      v31 = v30;
      swift_retain();
      GraphHost.removePreference<A>(_:)();
      GraphHost.removePreference<A>(_:)();
      GraphHost.removePreference<A>(_:)();
      GraphHost.removePreference<A>(_:)();

      swift_release();
    }
    UIHostingController.toolbarBridge.setter(0);
    if ((v6 & 0x10) == 0)
    {
LABEL_21:
      if ((v8 & 0x10) == 0)
        goto LABEL_25;
      type metadata accessor for UIKitContentScrollViewBridge();
      v23 = swift_allocObject();
      swift_unknownObjectWeakInit();
      *(_DWORD *)(v23 + 24) = -1;
      *(_QWORD *)(v23 + 32) = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0x3FF0000000000000;
      UIHostingController.contentScrollViewBridge.setter(v23);
      if (specialized UIHostingController.contentScrollViewBridge.getter())
      {
        swift_unknownObjectWeakAssign();
        if (specialized UIHostingController.contentScrollViewBridge.getter())
        {
          specialized UIHostingController.host.getter();
          swift_retain();
          swift_retain();
          GraphHost.addPreference<A>(_:)();
          swift_release();
          swift_release();
LABEL_25:
          if ((v6 & 0x20) == 0)
            goto LABEL_26;
          goto LABEL_45;
        }
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
LABEL_42:
    if (specialized UIHostingController.contentScrollViewBridge.getter())
    {
      specialized UIHostingController.host.getter();
      swift_retain();
      swift_retain();
      GraphHost.removePreference<A>(_:)();
      swift_release();
      swift_release();
    }
    UIHostingController.contentScrollViewBridge.setter(0);
    if ((v6 & 0x20) == 0)
    {
LABEL_26:
      if ((v8 & 0x20) == 0)
        goto LABEL_30;
      type metadata accessor for AlwaysOnBridge(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v7);
      v24 = AlwaysOnBridge.__allocating_init()();
      UIHostingController.alwaysOnBridge.setter(v24);
      if (specialized UIHostingController.alwaysOnBridge.getter())
      {
        swift_unknownObjectWeakAssign();
        if (specialized UIHostingController.alwaysOnBridge.getter())
        {
          specialized UIHostingController.host.getter();
          swift_retain();
          swift_retain();
          specialized AlwaysOnBridge.addPreferences(to:)();
          swift_release();
          swift_release();
LABEL_30:
          if ((v6 & 0x80) == 0)
          {
LABEL_31:
            if (v8 < 0)
            {
              type metadata accessor for UIKitInspectorBridgeV5(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v7);
              v25 = PencilEventsBridge.__allocating_init()();
              UIHostingController.inspectorBridgeV5.setter((uint64_t)v25);
              if (specialized UIHostingController.inspectorBridgeV5.getter())
              {
                specialized UIHostingController.host.getter();
                specialized SheetBridge.host.setter();
              }
              v26 = specialized UIHostingController.inspectorBridgeV5.getter();
              if (v26)
              {
                v27 = (void *)v26;
                specialized UIHostingController.host.getter();
                v28 = v27;
                swift_retain();
                specialized UIKitInspectorBridgeV5.addPreferences(to:)();

                swift_release();
              }
            }
LABEL_51:
            static Update.end()();
            return;
          }
LABEL_48:
          v32 = specialized UIHostingController.inspectorBridgeV5.getter();
          if (v32)
          {
            v33 = (void *)v32;
            specialized UIHostingController.host.getter();
            v34 = v33;
            swift_retain();
            specialized UIKitInspectorBridgeV5.removePreferences(from:)();

            swift_release();
          }
          UIHostingController.inspectorBridgeV5.setter(0);
          goto LABEL_51;
        }
LABEL_59:
        __break(1u);
        return;
      }
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
LABEL_45:
    if (specialized UIHostingController.alwaysOnBridge.getter())
    {
      specialized UIHostingController.host.getter();
      swift_retain();
      swift_retain();
      specialized AlwaysOnBridge.removePreferences(from:)();
      swift_release();
      swift_release();
    }
    UIHostingController.alwaysOnBridge.setter(0);
    if ((v6 & 0x80) == 0)
      goto LABEL_31;
    goto LABEL_48;
  }
}

void UIHostingController.requiredBridges.setter(uint64_t a1)
{
  uint64_t v1;
  SwiftUI::HostingControllerBridges v2;

  v2.rawValue = *(_QWORD *)(v1 + direct field offset for UIHostingController.requiredBridges);
  *(_QWORD *)(v1 + direct field offset for UIHostingController.requiredBridges) = a1;
  UIHostingController.didChangeRequiredBridges(from:to:)(v2, *(SwiftUI::HostingControllerBridges *)(v1 + direct field offset for UIHostingController.requiredBridges));
}

void UIHostingController.resolveBarAppearanceBehavior(in:)(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v1 = UIHostingController.allowedBehaviors.getter();
  v2 = specialized UIHostingController.barAppearanceBridge.getter();
  if (*(_QWORD *)(v18 + 16))
  {
    if (v2)
      goto LABEL_14;
  }
  else
  {
    if (v2)
    {
      if ((v1 & 1) != 0)
        goto LABEL_14;
      v3 = specialized UIHostingController.barAppearanceBridge.getter();
      if (v3)
      {
        v4 = (void *)v3;
        specialized UIHostingController.host.getter();
        v5 = v4;
        swift_retain();
        GraphHost.removePreference<A>(_:)();
        GraphHost.removePreference<A>(_:)();

        swift_release();
        UIHostingController.barAppearanceBridge.setter(0);
        goto LABEL_14;
      }
LABEL_21:
      __break(1u);
      return;
    }
    if ((v1 & 1) == 0)
      goto LABEL_14;
  }
  v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BarAppearanceBridge()), sel_init);
  UIHostingController.barAppearanceBridge.setter((uint64_t)v6);
  v7 = specialized UIHostingController.barAppearanceBridge.getter();
  if (!v7)
  {
    __break(1u);
    goto LABEL_21;
  }
  v8 = (void *)v7;
  specialized UIHostingController.host.getter();
  v9 = v8;
  swift_retain();
  BarAppearanceBridge.addPreferences(to:)();

  swift_release();
LABEL_14:
  v10 = specialized UIHostingController.barAppearanceBridge.getter();
  if (v10)
  {
    v11 = (void *)v10;
    v12 = (_QWORD *)specialized UIHostingController.host.getter();
    v13 = *(_QWORD *)((char *)v12 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v12) + 0x68));
    v14 = v11;
    swift_retain();
    BarAppearanceBridge.updateAllowedBars(_:viewGraph:)(v18, v13);
    swift_release();
    v15 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage;
    if ((v1 & 1) != 0)
    {
      v14[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage] = *(_QWORD *)(v18 + 16) != 0;
      v17 = *(_QWORD *)(v18 + 16);
      swift_bridgeObjectRelease();
      v16 = v17 == 0;
    }
    else
    {
      v14[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage] = 1;
      swift_bridgeObjectRelease();
      v16 = 0;
    }
    v14[v15 + 16] = v16;

  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t UIHostingController.allowedBehaviors.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for UIHostingController.allowedBehaviors);
}

uint64_t outlined init with copy of BarAppearanceBridge.UpdateContext?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  _BYTE v16[40];
  _BYTE v17[24];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[6];

  v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  ToolbarPlacement.Role.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  v13 = a1;
  v9 = ~v7;
  while (2)
  {
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v5 + 48) + 40 * v8, (uint64_t)v22);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v22, (uint64_t)v17);
    outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)&v19);
    switch(v18)
    {
      case 0:
        if (*((_QWORD *)&v20 + 1))
          goto LABEL_19;
        goto LABEL_26;
      case 1:
        if (*((_QWORD *)&v20 + 1) == 1)
          goto LABEL_26;
        goto LABEL_19;
      case 2:
        if (*((_QWORD *)&v20 + 1) == 2)
          goto LABEL_26;
        goto LABEL_19;
      case 3:
        if (*((_QWORD *)&v20 + 1) == 3)
          goto LABEL_26;
        goto LABEL_19;
      case 4:
        if (*((_QWORD *)&v20 + 1) == 4)
          goto LABEL_26;
        goto LABEL_19;
      case 5:
        if (*((_QWORD *)&v20 + 1) == 5)
          goto LABEL_26;
        goto LABEL_19;
      case 6:
        if (*((_QWORD *)&v20 + 1) != 6)
          goto LABEL_19;
        goto LABEL_26;
      default:
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v17, (uint64_t)v16);
        if (*((_QWORD *)&v20 + 1) < 7uLL)
        {
          outlined destroy of AnyHashable((uint64_t)v16);
LABEL_19:
          outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role));
          goto LABEL_20;
        }
        v14[0] = v19;
        v14[1] = v20;
        v15 = v21;
        v10 = MEMORY[0x18D75E284](v16, v14);
        outlined destroy of AnyHashable((uint64_t)v14);
        outlined destroy of AnyHashable((uint64_t)v16);
        if ((v10 & 1) == 0)
        {
          outlined destroy of ToolbarPlacement.Role((uint64_t)v17);
LABEL_20:
          outlined destroy of ToolbarPlacement.Role((uint64_t)v22);
          v8 = (v8 + 1) & v9;
          if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            a1 = v13;
LABEL_25:
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v17);
            v22[0] = *v2;
            *v2 = 0x8000000000000000;
            specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v17, v8, isUniquelyReferenced_nonNull_native);
            *v2 = v22[0];
            swift_bridgeObjectRelease();
            outlined init with take of ToolbarPlacement.Role(a2, a1);
            return 1;
          }
          continue;
        }
LABEL_26:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v17);
        outlined destroy of ToolbarPlacement.Role((uint64_t)v22);
        swift_bridgeObjectRelease();
        outlined destroy of ToolbarPlacement.Role(a2);
        outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(*v2 + 48) + 40 * v8, v13);
        return 0;
    }
  }
}

{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  _BYTE v16[40];
  _BYTE v17[24];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[6];

  v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  Toolbar.BarLocation.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  v13 = a1;
  v9 = ~v7;
  while (2)
  {
    outlined init with copy of Toolbar.BarLocation(*(_QWORD *)(v5 + 48) + 40 * v8, (uint64_t)v22);
    outlined init with copy of Toolbar.BarLocation((uint64_t)v22, (uint64_t)v17);
    outlined init with copy of Toolbar.BarLocation(a2, (uint64_t)&v19);
    switch(v18)
    {
      case 0:
        if (*((_QWORD *)&v20 + 1))
          goto LABEL_35;
        goto LABEL_42;
      case 1:
        if (*((_QWORD *)&v20 + 1) == 1)
          goto LABEL_42;
        goto LABEL_35;
      case 2:
        if (*((_QWORD *)&v20 + 1) == 2)
          goto LABEL_42;
        goto LABEL_35;
      case 3:
        if (*((_QWORD *)&v20 + 1) == 3)
          goto LABEL_42;
        goto LABEL_35;
      case 4:
        if (*((_QWORD *)&v20 + 1) == 4)
          goto LABEL_42;
        goto LABEL_35;
      case 5:
        if (*((_QWORD *)&v20 + 1) == 5)
          goto LABEL_42;
        goto LABEL_35;
      case 6:
        if (*((_QWORD *)&v20 + 1) == 6)
          goto LABEL_42;
        goto LABEL_35;
      case 7:
        if (*((_QWORD *)&v20 + 1) == 7)
          goto LABEL_42;
        goto LABEL_35;
      case 8:
        if (*((_QWORD *)&v20 + 1) == 8)
          goto LABEL_42;
        goto LABEL_35;
      case 9:
        if (*((_QWORD *)&v20 + 1) == 9)
          goto LABEL_42;
        goto LABEL_35;
      case 10:
        if (*((_QWORD *)&v20 + 1) == 10)
          goto LABEL_42;
        goto LABEL_35;
      case 11:
        if (*((_QWORD *)&v20 + 1) == 11)
          goto LABEL_42;
        goto LABEL_35;
      case 12:
        if (*((_QWORD *)&v20 + 1) == 12)
          goto LABEL_42;
        goto LABEL_35;
      case 13:
        if (*((_QWORD *)&v20 + 1) == 13)
          goto LABEL_42;
        goto LABEL_35;
      case 14:
        if (*((_QWORD *)&v20 + 1) != 14)
          goto LABEL_35;
        goto LABEL_42;
      default:
        outlined init with copy of Toolbar.BarLocation((uint64_t)v17, (uint64_t)v16);
        if (*((_QWORD *)&v20 + 1) < 0xFuLL)
        {
          outlined destroy of AnyHashable((uint64_t)v16);
LABEL_35:
          outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
          goto LABEL_36;
        }
        v14[0] = v19;
        v14[1] = v20;
        v15 = v21;
        v12 = MEMORY[0x18D75E284](v16, v14);
        outlined destroy of AnyHashable((uint64_t)v14);
        outlined destroy of AnyHashable((uint64_t)v16);
        if ((v12 & 1) == 0)
        {
          outlined destroy of Toolbar.BarLocation((uint64_t)v17);
LABEL_36:
          outlined destroy of Toolbar.BarLocation((uint64_t)v22);
          v8 = (v8 + 1) & v9;
          if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            a1 = v13;
LABEL_41:
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            outlined init with copy of Toolbar.BarLocation(a2, (uint64_t)v17);
            v22[0] = *v2;
            *v2 = 0x8000000000000000;
            specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v17, v8, isUniquelyReferenced_nonNull_native);
            *v2 = v22[0];
            swift_bridgeObjectRelease();
            outlined init with take of Toolbar.BarLocation(a2, a1);
            return 1;
          }
          continue;
        }
LABEL_42:
        outlined destroy of Toolbar.BarLocation((uint64_t)v17);
        outlined destroy of Toolbar.BarLocation((uint64_t)v22);
        swift_bridgeObjectRelease();
        outlined destroy of Toolbar.BarLocation(a2);
        outlined init with copy of Toolbar.BarLocation(*(_QWORD *)(*v2 + 48) + 40 * v8, v13);
        return 0;
    }
  }
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  v5 = type metadata accessor for CommandGroupPlacementBox(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = v2;
  v10 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for CommandGroupPlacement(0);
  swift_bridgeObjectRetain();
  UUID.hash(into:)();
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v20 = a2;
    v21 = a1;
    v14 = ~v12;
    v15 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      outlined init with copy of CommandGroupPlacementBox(*(_QWORD *)(v10 + 48) + v15 * v13, (uint64_t)v9);
      v16 = static UUID.== infix(_:_:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for CommandGroupPlacementBox);
      if ((v16 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a2 = v20;
        a1 = v21;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v20, type metadata accessor for CommandGroupPlacementBox);
    outlined init with copy of CommandGroupPlacementBox(*(_QWORD *)(*v22 + 48) + v15 * v13, v21);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    v17 = v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of CommandGroupPlacementBox(a2, (uint64_t)v9);
    v23 = *v17;
    *v17 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v17 = v23;
    swift_bridgeObjectRelease();
    outlined init with take of TableCellFormula(a2, a1, type metadata accessor for CommandGroupPlacementBox);
    return 1;
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _BYTE v15[72];

  v3 = v2;
  v6 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  ToolbarItemPlacement.Role.hash(into:)();
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (1)
    {
      outlined init with copy of ToolbarItemPlacement.Role(*(_QWORD *)(v6 + 48) + 48 * v9, (uint64_t)v15);
      v11 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v15, a2);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v15);
      if ((v11 & 1) != 0)
        break;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarItemPlacement.Role(a2);
    outlined init with copy of ToolbarItemPlacement.Role(*(_QWORD *)(*v3 + 48) + 48 * v9, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of ToolbarItemPlacement.Role(a2, (uint64_t)v15);
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v15, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    outlined init with take of ToolbarItemPlacement.Role(a2, a1);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  __int128 v14;
  uint64_t v16;
  _BYTE v17[40];

  v3 = v2;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  swift_bridgeObjectRetain();
  v8 = AnyHashable._rawHashValue(seed:)(v7);
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (1)
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v6 + 48) + 40 * v10, (uint64_t)v17);
      v12 = MEMORY[0x18D75E284](v17, a2);
      outlined destroy of AnyHashable((uint64_t)v17);
      if ((v12 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable(a2);
    outlined init with copy of AnyHashable(*(_QWORD *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of AnyHashable(a2, (uint64_t)v17);
    v16 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((Swift::Int)v17, v10, isUniquelyReferenced_nonNull_native);
    *v3 = v16;
    swift_bridgeObjectRelease();
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    return 1;
  }
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  _OWORD v19[2];
  uint64_t v20;
  _BYTE v21[40];
  _BYTE v22[24];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[48];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v7 > v6)
      {
        specialized _NativeSet.copy()();
        goto LABEL_31;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v8 = *v3;
    Hasher.init(_seed:)();
    ToolbarPlacement.Role.hash(into:)();
    v9 = Hasher._finalize()();
    v10 = -1 << *(_BYTE *)(v8 + 32);
    a2 = v9 & ~v10;
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v11 = ~v10;
      while (1)
      {
        outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v8 + 48) + 40 * a2, (uint64_t)v27);
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v27, (uint64_t)v22);
        outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v24);
        switch(v23)
        {
          case 0:
            if (!*((_QWORD *)&v25 + 1))
              goto LABEL_34;
            goto LABEL_26;
          case 1:
            if (*((_QWORD *)&v25 + 1) == 1)
              goto LABEL_34;
            goto LABEL_26;
          case 2:
            if (*((_QWORD *)&v25 + 1) == 2)
              goto LABEL_34;
            goto LABEL_26;
          case 3:
            if (*((_QWORD *)&v25 + 1) == 3)
              goto LABEL_34;
            goto LABEL_26;
          case 4:
            if (*((_QWORD *)&v25 + 1) == 4)
              goto LABEL_34;
            goto LABEL_26;
          case 5:
            if (*((_QWORD *)&v25 + 1) == 5)
              goto LABEL_34;
            goto LABEL_26;
          case 6:
            if (*((_QWORD *)&v25 + 1) == 6)
              goto LABEL_34;
            goto LABEL_26;
          default:
            outlined init with copy of ToolbarPlacement.Role((uint64_t)v22, (uint64_t)v21);
            if (*((_QWORD *)&v25 + 1) >= 7uLL)
            {
              v19[0] = v24;
              v19[1] = v25;
              v20 = v26;
              v12 = MEMORY[0x18D75E284](v21, v19);
              outlined destroy of AnyHashable((uint64_t)v19);
              outlined destroy of AnyHashable((uint64_t)v21);
              if ((v12 & 1) != 0)
                goto LABEL_34;
              outlined destroy of ToolbarPlacement.Role((uint64_t)v22);
            }
            else
            {
              outlined destroy of AnyHashable((uint64_t)v21);
LABEL_26:
              outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role));
            }
            outlined destroy of ToolbarPlacement.Role((uint64_t)v27);
            a2 = (a2 + 1) & v11;
            if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
              goto LABEL_31;
            break;
        }
      }
    }
  }
LABEL_31:
  v13 = *v18;
  *(_QWORD *)(*v18 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of ToolbarPlacement.Role(a1, *(_QWORD *)(v13 + 48) + 40 * a2);
  v15 = *(_QWORD *)(v13 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
LABEL_34:
    outlined destroy of ToolbarPlacement.Role((uint64_t)v22);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v27);
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + 16) = v17;
  }
  return result;
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  _OWORD v19[2];
  uint64_t v20;
  _BYTE v21[40];
  _BYTE v22[24];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[48];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v7 > v6)
      {
        specialized _NativeSet.copy()();
        goto LABEL_47;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v8 = *v3;
    Hasher.init(_seed:)();
    Toolbar.BarLocation.hash(into:)();
    v9 = Hasher._finalize()();
    v10 = -1 << *(_BYTE *)(v8 + 32);
    a2 = v9 & ~v10;
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v11 = ~v10;
      while (1)
      {
        outlined init with copy of Toolbar.BarLocation(*(_QWORD *)(v8 + 48) + 40 * a2, (uint64_t)v27);
        outlined init with copy of Toolbar.BarLocation((uint64_t)v27, (uint64_t)v22);
        outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v24);
        switch(v23)
        {
          case 0:
            if (!*((_QWORD *)&v25 + 1))
              goto LABEL_50;
            goto LABEL_42;
          case 1:
            if (*((_QWORD *)&v25 + 1) == 1)
              goto LABEL_50;
            goto LABEL_42;
          case 2:
            if (*((_QWORD *)&v25 + 1) == 2)
              goto LABEL_50;
            goto LABEL_42;
          case 3:
            if (*((_QWORD *)&v25 + 1) == 3)
              goto LABEL_50;
            goto LABEL_42;
          case 4:
            if (*((_QWORD *)&v25 + 1) == 4)
              goto LABEL_50;
            goto LABEL_42;
          case 5:
            if (*((_QWORD *)&v25 + 1) == 5)
              goto LABEL_50;
            goto LABEL_42;
          case 6:
            if (*((_QWORD *)&v25 + 1) == 6)
              goto LABEL_50;
            goto LABEL_42;
          case 7:
            if (*((_QWORD *)&v25 + 1) == 7)
              goto LABEL_50;
            goto LABEL_42;
          case 8:
            if (*((_QWORD *)&v25 + 1) == 8)
              goto LABEL_50;
            goto LABEL_42;
          case 9:
            if (*((_QWORD *)&v25 + 1) == 9)
              goto LABEL_50;
            goto LABEL_42;
          case 10:
            if (*((_QWORD *)&v25 + 1) == 10)
              goto LABEL_50;
            goto LABEL_42;
          case 11:
            if (*((_QWORD *)&v25 + 1) == 11)
              goto LABEL_50;
            goto LABEL_42;
          case 12:
            if (*((_QWORD *)&v25 + 1) == 12)
              goto LABEL_50;
            goto LABEL_42;
          case 13:
            if (*((_QWORD *)&v25 + 1) == 13)
              goto LABEL_50;
            goto LABEL_42;
          case 14:
            if (*((_QWORD *)&v25 + 1) == 14)
              goto LABEL_50;
            goto LABEL_42;
          default:
            outlined init with copy of Toolbar.BarLocation((uint64_t)v22, (uint64_t)v21);
            if (*((_QWORD *)&v25 + 1) >= 0xFuLL)
            {
              v19[0] = v24;
              v19[1] = v25;
              v20 = v26;
              v17 = MEMORY[0x18D75E284](v21, v19);
              outlined destroy of AnyHashable((uint64_t)v19);
              outlined destroy of AnyHashable((uint64_t)v21);
              if ((v17 & 1) != 0)
                goto LABEL_50;
              outlined destroy of Toolbar.BarLocation((uint64_t)v22);
            }
            else
            {
              outlined destroy of AnyHashable((uint64_t)v21);
LABEL_42:
              outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
            }
            outlined destroy of Toolbar.BarLocation((uint64_t)v27);
            a2 = (a2 + 1) & v11;
            if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
              goto LABEL_47;
            break;
        }
      }
    }
  }
LABEL_47:
  v12 = *v18;
  *(_QWORD *)(*v18 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of Toolbar.BarLocation(a1, *(_QWORD *)(v12 + 48) + 40 * a2);
  v14 = *(_QWORD *)(v12 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
LABEL_50:
    outlined destroy of Toolbar.BarLocation((uint64_t)v22);
    outlined destroy of Toolbar.BarLocation((uint64_t)v27);
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v12 + 16) = v16;
  }
  return result;
}

{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _BYTE v20[8];
  uint64_t v21;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v9 = *v3;
  Hasher.init(_seed:)();
  v10 = *(_QWORD *)(a1 + 8);
  Hasher._combine(_:)(v10);
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = ~v12;
    do
    {
      outlined init with copy of HashableWeakBox<Swift.AnyObject>(*(_QWORD *)(v9 + 48) + 16 * a2, (uint64_t)v20);
      v14 = v21;
      outlined destroy of HashableWeakBox<Swift.AnyObject>((uint64_t)v20);
      if (v14 == v10)
        goto LABEL_15;
      a2 = (a2 + 1) & v13;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v15 = *v3;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of HashableWeakBox<Swift.AnyObject>(a1, *(_QWORD *)(v15 + 48) + 16 * a2);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v15 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_15:
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE2D98]);
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for UTType();
  v7 = *(_QWORD *)(v6 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], &lazy cache variable for type metadata for _SetStorage<UTType>, &lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E0DF0358]);
  }
  else
  {
    if (v13 > v12)
    {
      specialized _NativeSet.copy()((uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], &lazy cache variable for type metadata for _SetStorage<UTType>, &lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E0DF0358]);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], &lazy cache variable for type metadata for _SetStorage<UTType>, &lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E0DF0358]);
  }
  v15 = *v3;
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type UTType and conformance UTType, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0358]);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v11, *(_QWORD *)(v15 + 48) + v19 * a2, v6);
      lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type UTType and conformance UTType, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0360]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6, v9);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v7 = type metadata accessor for CommandGroupPlacementBox(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  v29 = a1;
  v27 = v8;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v13 > v12)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v14 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for CommandGroupPlacement(0);
  UUID.hash(into:)();
  v15 = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v26[1] = v7;
    v17 = ~v16;
    v18 = *(_QWORD *)(v8 + 72);
    do
    {
      outlined init with copy of CommandGroupPlacementBox(*(_QWORD *)(v14 + 48) + v18 * a2, (uint64_t)v11);
      v19 = static UUID.== infix(_:_:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for CommandGroupPlacementBox);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v29;
  v21 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of TableCellFormula(v20, *(_QWORD *)(v21 + 48) + *(_QWORD *)(v27 + 72) * a2, type metadata accessor for CommandGroupPlacementBox);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (unint64_t *)&lazy cache variable for type metadata for _SetStorage<URL>, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E0CB0018]);
  }
  else
  {
    if (v13 > v12)
    {
      specialized _NativeSet.copy()((uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (unint64_t *)&lazy cache variable for type metadata for _SetStorage<URL>, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E0CB0018]);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (unint64_t *)&lazy cache variable for type metadata for _SetStorage<URL>, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E0CB0018]);
  }
  v15 = *v3;
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v11, *(_QWORD *)(v15 + 48) + v19 * a2, v6);
      lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type URL and conformance URL, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6, v9);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for IndexPath();
  v7 = *(_QWORD *)(v6 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], &lazy cache variable for type metadata for _SetStorage<IndexPath>, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1668]);
  }
  else
  {
    if (v13 > v12)
    {
      specialized _NativeSet.copy()((uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], &lazy cache variable for type metadata for _SetStorage<IndexPath>, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1668]);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], &lazy cache variable for type metadata for _SetStorage<IndexPath>, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1668]);
  }
  v15 = *v3;
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1668]);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v11, *(_QWORD *)(v15 + 48) + v19 * a2, v6);
      lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6, v9);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _BYTE v19[72];

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v9 = *v3;
  Hasher.init(_seed:)();
  ToolbarItemPlacement.Role.hash(into:)();
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v11;
    do
    {
      outlined init with copy of ToolbarItemPlacement.Role(*(_QWORD *)(v9 + 48) + 48 * a2, (uint64_t)v19);
      v13 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v19, a1);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v19);
      if ((v13 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v12;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of ToolbarItemPlacement.Role(a1, *(_QWORD *)(v14 + 48) + 48 * a2);
  v16 = *(_QWORD *)(v14 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (!v17)
  {
    *(_QWORD *)(v14 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for DateComponents();
  v7 = *(_QWORD *)(v6 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], &lazy cache variable for type metadata for _SetStorage<DateComponents>, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E0CAEAD8]);
  }
  else
  {
    if (v13 > v12)
    {
      specialized _NativeSet.copy()((uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], &lazy cache variable for type metadata for _SetStorage<DateComponents>, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E0CAEAD8]);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], &lazy cache variable for type metadata for _SetStorage<DateComponents>, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E0CAEAD8]);
  }
  v15 = *v3;
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], MEMORY[0x1E0CAEAD8]);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v11, *(_QWORD *)(v15 + 48) + v19 * a2, v6);
      lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], MEMORY[0x1E0CAEAE0]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6, v9);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t BarAppearanceBridge.updateAllowedBars(_:viewGraph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;

  v3 = v2;
  v6 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars;
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars);
  if (*(_QWORD *)(a1 + 16) <= *(_QWORD *)(v7 + 16) >> 3)
  {
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(a1);
    v8 = v7;
  }
  else
  {
    swift_bridgeObjectRetain();
    v8 = specialized _NativeSet.subtracting<A>(_:)(a1, v7);
  }
  if (*(_QWORD *)(*(_QWORD *)(v3 + v6) + 16) <= *(_QWORD *)(a1 + 16) >> 3)
  {
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v11);
    swift_bridgeObjectRelease();
    v10 = a1;
  }
  else
  {
    swift_bridgeObjectRetain();
    v9 = swift_bridgeObjectRetain();
    v10 = specialized _NativeSet.subtracting<A>(_:)(v9, a1);
    swift_bridgeObjectRelease();
  }
  v12 = (char **)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_seedTracker);
  swift_beginAccess();
  Set<>.updatePreferences(viewGraph:tracker:isAdding:)(a2, v12, 0, v8);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  Set<>.updatePreferences(viewGraph:tracker:isAdding:)(a2, v12, 1, v10);
  swift_endAccess();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + v6) = a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t Set<>.updatePreferences(viewGraph:tracker:isAdding:)(uint64_t a1, char **a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t result;
  uint64_t v64;
  int64_t v65;
  _BYTE v66[24];
  uint64_t v67;
  _BYTE v68[40];
  _BYTE v69[48];

  v64 = a4 + 56;
  v7 = 1 << *(_BYTE *)(a4 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a4 + 56);
  v65 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  while (v9)
  {
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v10 << 6);
LABEL_24:
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(a4 + 48) + 40 * v16, (uint64_t)v69);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v69, (uint64_t)v68);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v68, (uint64_t)v66);
    switch(v67)
    {
      case 0:
        if ((a3 & 1) != 0)
        {
          GraphHost.addPreference<A>(_:)();
          v20 = *a2;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
          v22 = *((_QWORD *)v20 + 2);
          v21 = *((_QWORD *)v20 + 3);
          v23 = v22 + 1;
          if (v22 >= v21 >> 1)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v20);
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<NavigationBarAppearanceKey>, (uint64_t)&type metadata for NavigationBarAppearanceKey, (uint64_t)&protocol witness table for NavigationBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
          v12 = v11;
          v13 = lazy protocol witness table accessor for type _AnyPreferenceKey<NavigationBarAppearanceKey> and conformance _AnyPreferenceKey<A>();
          goto LABEL_5;
        }
        GraphHost.removePreference<A>(_:)();
        v20 = *a2;
        v47 = *((_QWORD *)*a2 + 2);
        if (!v47)
          goto LABEL_7;
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<NavigationBarAppearanceKey>, (uint64_t)&type metadata for NavigationBarAppearanceKey, (uint64_t)&protocol witness table for NavigationBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
        v43 = 0;
        v44 = 0;
        while (*(_QWORD *)&v20[v43 + 32] != v48)
        {
          ++v44;
          v43 += 24;
          if (v47 == v44)
            goto LABEL_7;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v20);
        v59 = *((_QWORD *)v20 + 2);
        if (v59 <= v44)
          goto LABEL_138;
        goto LABEL_131;
      case 1:
        if ((a3 & 1) != 0)
        {
          GraphHost.addPreference<A>(_:)();
          v20 = *a2;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
          v22 = *((_QWORD *)v20 + 2);
          v28 = *((_QWORD *)v20 + 3);
          v23 = v22 + 1;
          if (v22 >= v28 >> 1)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v22 + 1, 1, v20);
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<WindowToolbarItemsAppearanceKey>, (uint64_t)&type metadata for WindowToolbarItemsAppearanceKey, (uint64_t)&protocol witness table for WindowToolbarItemsAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
          v12 = v29;
          v13 = lazy protocol witness table accessor for type _AnyPreferenceKey<WindowToolbarItemsAppearanceKey> and conformance _AnyPreferenceKey<A>();
          goto LABEL_5;
        }
        GraphHost.removePreference<A>(_:)();
        v20 = *a2;
        v49 = *((_QWORD *)*a2 + 2);
        if (!v49)
          goto LABEL_7;
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<WindowToolbarItemsAppearanceKey>, (uint64_t)&type metadata for WindowToolbarItemsAppearanceKey, (uint64_t)&protocol witness table for WindowToolbarItemsAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
        v43 = 0;
        v44 = 0;
        while (*(_QWORD *)&v20[v43 + 32] != v50)
        {
          ++v44;
          v43 += 24;
          if (v49 == v44)
            goto LABEL_7;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v20);
        v59 = *((_QWORD *)v20 + 2);
        if (v59 <= v44)
          goto LABEL_139;
        goto LABEL_131;
      case 2:
        if ((a3 & 1) != 0)
        {
          GraphHost.addPreference<A>(_:)();
          v20 = *a2;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
          v22 = *((_QWORD *)v20 + 2);
          v24 = *((_QWORD *)v20 + 3);
          v23 = v22 + 1;
          if (v22 >= v24 >> 1)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v22 + 1, 1, v20);
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<WindowToolbarAppearanceKey>, (uint64_t)&type metadata for WindowToolbarAppearanceKey, (uint64_t)&protocol witness table for WindowToolbarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
          v12 = v25;
          v13 = lazy protocol witness table accessor for type _AnyPreferenceKey<WindowToolbarAppearanceKey> and conformance _AnyPreferenceKey<A>();
          goto LABEL_5;
        }
        GraphHost.removePreference<A>(_:)();
        v20 = *a2;
        v41 = *((_QWORD *)*a2 + 2);
        if (!v41)
          goto LABEL_7;
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<WindowToolbarAppearanceKey>, (uint64_t)&type metadata for WindowToolbarAppearanceKey, (uint64_t)&protocol witness table for WindowToolbarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
        v43 = 0;
        v44 = 0;
        while (*(_QWORD *)&v20[v43 + 32] != v42)
        {
          ++v44;
          v43 += 24;
          if (v41 == v44)
            goto LABEL_7;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v20);
        v59 = *((_QWORD *)v20 + 2);
        if (v59 <= v44)
          goto LABEL_136;
        goto LABEL_131;
      case 3:
        if ((a3 & 1) != 0)
        {
          GraphHost.addPreference<A>(_:)();
          v20 = *a2;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
          v22 = *((_QWORD *)v20 + 2);
          v26 = *((_QWORD *)v20 + 3);
          v23 = v22 + 1;
          if (v22 >= v26 >> 1)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v22 + 1, 1, v20);
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<BottomBarAppearanceKey>, (uint64_t)&type metadata for BottomBarAppearanceKey, (uint64_t)&protocol witness table for BottomBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
          v12 = v27;
          v13 = lazy protocol witness table accessor for type _AnyPreferenceKey<BottomBarAppearanceKey> and conformance _AnyPreferenceKey<A>();
          goto LABEL_5;
        }
        GraphHost.removePreference<A>(_:)();
        v20 = *a2;
        v45 = *((_QWORD *)*a2 + 2);
        if (!v45)
          goto LABEL_7;
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<BottomBarAppearanceKey>, (uint64_t)&type metadata for BottomBarAppearanceKey, (uint64_t)&protocol witness table for BottomBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
        v43 = 0;
        v44 = 0;
        while (*(_QWORD *)&v20[v43 + 32] != v46)
        {
          ++v44;
          v43 += 24;
          if (v45 == v44)
            goto LABEL_7;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v20);
        v59 = *((_QWORD *)v20 + 2);
        if (v59 <= v44)
          goto LABEL_137;
        goto LABEL_131;
      case 4:
        goto LABEL_143;
      case 5:
        if ((a3 & 1) != 0)
        {
          GraphHost.addPreference<A>(_:)();
          v20 = *a2;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
          v22 = *((_QWORD *)v20 + 2);
          v39 = *((_QWORD *)v20 + 3);
          v23 = v22 + 1;
          if (v22 >= v39 >> 1)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v22 + 1, 1, v20);
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<TabBarAppearanceKey>, (uint64_t)&type metadata for TabBarAppearanceKey, (uint64_t)&protocol witness table for TabBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
          v12 = v40;
          v13 = lazy protocol witness table accessor for type _AnyPreferenceKey<TabBarAppearanceKey> and conformance _AnyPreferenceKey<A>();
          goto LABEL_5;
        }
        GraphHost.removePreference<A>(_:)();
        v20 = *a2;
        v57 = *((_QWORD *)*a2 + 2);
        if (!v57)
          goto LABEL_7;
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<TabBarAppearanceKey>, (uint64_t)&type metadata for TabBarAppearanceKey, (uint64_t)&protocol witness table for TabBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
        v43 = 0;
        v44 = 0;
        while (*(_QWORD *)&v20[v43 + 32] != v58)
        {
          ++v44;
          v43 += 24;
          if (v57 == v44)
            goto LABEL_7;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v20);
        v59 = *((_QWORD *)v20 + 2);
        if (v59 <= v44)
          goto LABEL_142;
        goto LABEL_131;
      case 6:
        if ((a3 & 1) != 0)
        {
          GraphHost.addPreference<A>(_:)();
          v20 = *a2;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
          v22 = *((_QWORD *)v20 + 2);
          v30 = *((_QWORD *)v20 + 3);
          v23 = v22 + 1;
          if (v22 >= v30 >> 1)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v22 + 1, 1, v20);
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<BottomOrnamentAppearanceKey>, (uint64_t)&type metadata for BottomOrnamentAppearanceKey, (uint64_t)&protocol witness table for BottomOrnamentAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
          v12 = v31;
          v13 = lazy protocol witness table accessor for type _AnyPreferenceKey<BottomOrnamentAppearanceKey> and conformance _AnyPreferenceKey<A>();
LABEL_5:
          *((_QWORD *)v20 + 2) = v23;
          v14 = &v20[24 * v22];
          *((_QWORD *)v14 + 4) = v12;
          *((_QWORD *)v14 + 5) = v13;
          *((_DWORD *)v14 + 12) = -1;
LABEL_6:
          *a2 = v20;
          goto LABEL_7;
        }
        GraphHost.removePreference<A>(_:)();
        v20 = *a2;
        v51 = *((_QWORD *)*a2 + 2);
        if (v51)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<BottomOrnamentAppearanceKey>, (uint64_t)&type metadata for BottomOrnamentAppearanceKey, (uint64_t)&protocol witness table for BottomOrnamentAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
          v43 = 0;
          v44 = 0;
          while (*(_QWORD *)&v20[v43 + 32] != v52)
          {
            ++v44;
            v43 += 24;
            if (v51 == v44)
              goto LABEL_7;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v20);
          v59 = *((_QWORD *)v20 + 2);
          if (v59 <= v44)
            goto LABEL_140;
LABEL_131:
          if ((uint64_t)(~v44 + v59) < 0)
            goto LABEL_144;
          v62 = v59 - 1;
          memmove(&v20[v43 + 32], &v20[v43 + 56], 24 * (~v44 + v59));
          *((_QWORD *)v20 + 2) = v62;
          goto LABEL_6;
        }
LABEL_7:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v68);
        break;
      default:
        if ((a3 & 1) != 0)
        {
          GraphHost.addPreference<A>(_:)();
          v32 = *a2;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v32 + 2) + 1, 1, v32);
          v34 = *((_QWORD *)v32 + 2);
          v33 = *((_QWORD *)v32 + 3);
          if (v34 >= v33 >> 1)
            v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v32);
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<AccessoryBarAppearanceKey>, (uint64_t)&type metadata for AccessoryBarAppearanceKey, (uint64_t)&protocol witness table for AccessoryBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
          v36 = v35;
          v37 = lazy protocol witness table accessor for type _AnyPreferenceKey<AccessoryBarAppearanceKey> and conformance _AnyPreferenceKey<A>();
          *((_QWORD *)v32 + 2) = v34 + 1;
          v38 = &v32[24 * v34];
          *((_QWORD *)v38 + 4) = v36;
          *((_QWORD *)v38 + 5) = v37;
          *((_DWORD *)v38 + 12) = -1;
        }
        else
        {
          GraphHost.removePreference<A>(_:)();
          v32 = *a2;
          v53 = *((_QWORD *)*a2 + 2);
          if (!v53)
            goto LABEL_127;
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<AccessoryBarAppearanceKey>, (uint64_t)&type metadata for AccessoryBarAppearanceKey, (uint64_t)&protocol witness table for AccessoryBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
          v55 = 0;
          v56 = 0;
          while (*(_QWORD *)&v32[v55 + 32] != v54)
          {
            ++v56;
            v55 += 24;
            if (v53 == v56)
              goto LABEL_127;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v32 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v32);
          v60 = *((_QWORD *)v32 + 2);
          if (v60 <= v56)
            goto LABEL_141;
          if ((uint64_t)(~v56 + v60) < 0)
            goto LABEL_144;
          v61 = v60 - 1;
          memmove(&v32[v55 + 32], &v32[v55 + 56], 24 * (~v56 + v60));
          *((_QWORD *)v32 + 2) = v61;
        }
        *a2 = v32;
LABEL_127:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v66);
        goto LABEL_7;
    }
  }
  v17 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_135;
  }
  if (v17 >= v65)
    return swift_release();
  v18 = *(_QWORD *)(v64 + 8 * v17);
  ++v10;
  if (v18)
    goto LABEL_23;
  v10 = v17 + 1;
  if (v17 + 1 >= v65)
    return swift_release();
  v18 = *(_QWORD *)(v64 + 8 * v10);
  if (v18)
    goto LABEL_23;
  v10 = v17 + 2;
  if (v17 + 2 >= v65)
    return swift_release();
  v18 = *(_QWORD *)(v64 + 8 * v10);
  if (v18)
  {
LABEL_23:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
    goto LABEL_24;
  }
  v19 = v17 + 3;
  if (v19 >= v65)
    return swift_release();
  v18 = *(_QWORD *)(v64 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v65)
      return swift_release();
    v18 = *(_QWORD *)(v64 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_144:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::UInt v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t isStackAllocationSafe;
  uint64_t v23;
  char v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  _BYTE v42[24];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[40];
  uint64_t v51[8];

  v2 = a2;
  v51[5] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  v3 = a1;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v51[0] = a1;
  v51[1] = a1 + 56;
  v35 = a1 + 56;
  v33 = ~v4;
  v51[2] = ~v4;
  v7 = a2 + 56;
  v8 = (unint64_t)(63 - v4) >> 6;
  v9 = swift_bridgeObjectRetain();
  v10 = 0;
  v34 = v8;
  v31 = v9 + 104;
  v32 = v8 - 6;
  v36 = v9;
  while (1)
  {
    if (v6)
    {
      v37 = (v6 - 1) & v6;
      v11 = __clz(__rbit64(v6)) | (v10 << 6);
      v12 = v10;
    }
    else
    {
      v13 = v10 + 1;
      if (__OFADD__(v10, 1))
        __break(1u);
      if (v13 >= v34)
      {
LABEL_64:
        memset(v42, 0, sizeof(v42));
        v43 = xmmword_187C304E0;
LABEL_65:
        outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
        outlined destroy of AccessibilityTableContext?((uint64_t)v42, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
        return v2;
      }
      v14 = *(_QWORD *)(v35 + 8 * v13);
      v12 = v10 + 1;
      if (!v14)
      {
        v12 = v10 + 2;
        if (v10 + 2 >= v34)
          goto LABEL_64;
        v14 = *(_QWORD *)(v35 + 8 * v12);
        if (!v14)
        {
          v12 = v10 + 3;
          if (v10 + 3 >= v34)
            goto LABEL_64;
          v14 = *(_QWORD *)(v35 + 8 * v12);
          if (!v14)
          {
            v12 = v10 + 4;
            if (v10 + 4 >= v34)
              goto LABEL_64;
            v14 = *(_QWORD *)(v35 + 8 * v12);
            if (!v14)
            {
              v12 = v10 + 5;
              if (v10 + 5 >= v34)
                goto LABEL_64;
              v14 = *(_QWORD *)(v35 + 8 * v12);
              if (!v14)
              {
                v15 = v10;
                do
                {
                  if (v32 == v15)
                    goto LABEL_64;
                  v14 = *(_QWORD *)(v31 + 8 * v15++);
                }
                while (!v14);
                v12 = v15 + 5;
              }
            }
          }
        }
      }
      v37 = (v14 - 1) & v14;
      v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v3 + 48) + 40 * v11, (uint64_t)v42);
    if ((_QWORD)v43 == 7)
      goto LABEL_65;
    outlined init with take of ToolbarPlacement.Role((uint64_t)v42, (uint64_t)v50);
    Hasher.init(_seed:)();
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v50, (uint64_t)&v47);
    switch(*((_QWORD *)&v48 + 1))
    {
      case 0:
        v16 = 0;
        goto LABEL_35;
      case 1:
        v16 = 1;
        goto LABEL_35;
      case 2:
        v16 = 2;
        goto LABEL_35;
      case 3:
        v16 = 3;
        goto LABEL_35;
      case 4:
        v16 = 4;
        goto LABEL_35;
      case 5:
        v16 = 5;
        goto LABEL_35;
      case 6:
        v16 = 7;
LABEL_35:
        Hasher._combine(_:)(v16);
        break;
      default:
        v40[0] = v47;
        v40[1] = v48;
        v41 = v49;
        Hasher._combine(_:)(6uLL);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v40);
        break;
    }
    v17 = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(v2 + 32);
    v19 = v17 & ~v18;
    if (((*(_QWORD *)(v7 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
      break;
LABEL_6:
    outlined destroy of ToolbarPlacement.Role((uint64_t)v50);
    v10 = v12;
    v3 = v36;
    v6 = v37;
  }
  v20 = ~v18;
  while (2)
  {
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v2 + 48) + 40 * v19, (uint64_t)&v47);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)&v47, (uint64_t)v42);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v50, (uint64_t)&v44);
    switch((uint64_t)v43)
    {
      case 0:
        if (!*((_QWORD *)&v45 + 1))
          goto LABEL_59;
        goto LABEL_54;
      case 1:
        if (*((_QWORD *)&v45 + 1) == 1)
          goto LABEL_59;
        goto LABEL_54;
      case 2:
        if (*((_QWORD *)&v45 + 1) == 2)
          goto LABEL_59;
        goto LABEL_54;
      case 3:
        if (*((_QWORD *)&v45 + 1) == 3)
          goto LABEL_59;
        goto LABEL_54;
      case 4:
        if (*((_QWORD *)&v45 + 1) == 4)
          goto LABEL_59;
        goto LABEL_54;
      case 5:
        if (*((_QWORD *)&v45 + 1) == 5)
          goto LABEL_59;
        goto LABEL_54;
      case 6:
        if (*((_QWORD *)&v45 + 1) != 6)
          goto LABEL_54;
        goto LABEL_59;
      default:
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v42, (uint64_t)v40);
        if (*((_QWORD *)&v45 + 1) < 7uLL)
        {
          outlined destroy of AnyHashable((uint64_t)v40);
LABEL_54:
          outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v42);
          goto LABEL_55;
        }
        v38[0] = v44;
        v38[1] = v45;
        v39 = v46;
        v21 = MEMORY[0x18D75E284](v40, v38);
        outlined destroy of AnyHashable((uint64_t)v38);
        outlined destroy of AnyHashable((uint64_t)v40);
        if ((v21 & 1) == 0)
        {
          outlined destroy of ToolbarPlacement.Role((uint64_t)v42);
LABEL_55:
          outlined destroy of ToolbarPlacement.Role((uint64_t)&v47);
          v19 = (v19 + 1) & v20;
          if (((*(_QWORD *)(v7 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
            goto LABEL_6;
          continue;
        }
LABEL_59:
        v51[3] = v12;
        v51[4] = v37;
        outlined destroy of ToolbarPlacement.Role((uint64_t)v42);
        outlined destroy of ToolbarPlacement.Role((uint64_t)&v47);
        isStackAllocationSafe = outlined destroy of ToolbarPlacement.Role((uint64_t)v50);
        v24 = *(_BYTE *)(v2 + 32);
        v25 = (unint64_t)((1 << v24) + 63) >> 6;
        v26 = 8 * v25;
        if ((v24 & 0x3Fu) <= 0xD
          || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
        {
          MEMORY[0x1E0C80A78](isStackAllocationSafe, v23);
          memcpy((char *)&v31 - ((v26 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v26);
          v27 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)&v31 - ((v26 + 15) & 0x3FFFFFFFFFFFFFF0), v25, v2, v19, v51);
          swift_release();
          outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
          return v27;
        }
        else
        {
          v28 = (void *)swift_slowAlloc();
          memcpy(v28, (const void *)(v2 + 56), v26);
          v29 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v28, v25, v2, v19, v51);
          swift_release();
          outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
          MEMORY[0x18D760108](v28, -1, -1);
          return v29;
        }
    }
  }
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t *v33;
  _OWORD v34[2];
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  _QWORD v38[3];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _BYTE v46[48];
  uint64_t v47;

  v7 = *(_QWORD *)(a3 + 16);
  v33 = (unint64_t *)result;
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v47 = v7 - 1;
  v8 = a3 + 56;
LABEL_3:
  while (1)
  {
    v9 = *a5;
    v10 = a5[1];
    v11 = a5[2];
    v12 = a5[3];
    v13 = a5[4];
    if (!v13)
      break;
    v14 = (v13 - 1) & v13;
    v15 = __clz(__rbit64(v13)) | (v12 << 6);
LABEL_15:
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v9 + 48) + 40 * v15, (uint64_t)v38);
    v21 = v39;
    *a5 = v9;
    a5[1] = v10;
    a5[2] = v11;
    a5[3] = v12;
    a5[4] = v14;
    if (v21 == 7)
      goto LABEL_62;
    outlined init with take of ToolbarPlacement.Role((uint64_t)v38, (uint64_t)v46);
    Hasher.init(_seed:)();
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v46, (uint64_t)&v43);
    switch(*((_QWORD *)&v44 + 1))
    {
      case 0:
        v22 = 0;
        goto LABEL_25;
      case 1:
        v22 = 1;
        goto LABEL_25;
      case 2:
        v22 = 2;
        goto LABEL_25;
      case 3:
        v22 = 3;
        goto LABEL_25;
      case 4:
        v22 = 4;
        goto LABEL_25;
      case 5:
        v22 = 5;
        goto LABEL_25;
      case 6:
        v22 = 7;
LABEL_25:
        Hasher._combine(_:)(v22);
        break;
      default:
        v36[0] = v43;
        v36[1] = v44;
        v37 = v45;
        Hasher._combine(_:)(6uLL);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v36);
        break;
    }
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(a3 + 32);
    v25 = v23 & ~v24;
    if (((*(_QWORD *)(v8 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
    {
LABEL_2:
      result = outlined destroy of ToolbarPlacement.Role((uint64_t)v46);
      continue;
    }
    v26 = ~v24;
    while (2)
    {
      outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(a3 + 48) + 40 * v25, (uint64_t)&v43);
      outlined init with copy of ToolbarPlacement.Role((uint64_t)&v43, (uint64_t)v38);
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v46, (uint64_t)&v40);
      switch((uint64_t)v39)
      {
        case 0:
          if (*((_QWORD *)&v41 + 1))
            goto LABEL_44;
          goto LABEL_49;
        case 1:
          if (*((_QWORD *)&v41 + 1) == 1)
            goto LABEL_49;
          goto LABEL_44;
        case 2:
          if (*((_QWORD *)&v41 + 1) == 2)
            goto LABEL_49;
          goto LABEL_44;
        case 3:
          if (*((_QWORD *)&v41 + 1) == 3)
            goto LABEL_49;
          goto LABEL_44;
        case 4:
          if (*((_QWORD *)&v41 + 1) == 4)
            goto LABEL_49;
          goto LABEL_44;
        case 5:
          if (*((_QWORD *)&v41 + 1) == 5)
            goto LABEL_49;
          goto LABEL_44;
        case 6:
          if (*((_QWORD *)&v41 + 1) != 6)
            goto LABEL_44;
          goto LABEL_49;
        default:
          outlined init with copy of ToolbarPlacement.Role((uint64_t)v38, (uint64_t)v36);
          if (*((_QWORD *)&v41 + 1) < 7uLL)
          {
            outlined destroy of AnyHashable((uint64_t)v36);
LABEL_44:
            outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v38);
            goto LABEL_45;
          }
          v34[0] = v40;
          v34[1] = v41;
          v35 = v42;
          v27 = MEMORY[0x18D75E284](v36, v34);
          outlined destroy of AnyHashable((uint64_t)v34);
          outlined destroy of AnyHashable((uint64_t)v36);
          if ((v27 & 1) == 0)
          {
            outlined destroy of ToolbarPlacement.Role((uint64_t)v38);
LABEL_45:
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v43);
            v25 = (v25 + 1) & v26;
            if (((*(_QWORD *)(v8 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
              goto LABEL_2;
            continue;
          }
LABEL_49:
          outlined destroy of ToolbarPlacement.Role((uint64_t)v38);
          outlined destroy of ToolbarPlacement.Role((uint64_t)&v43);
          result = outlined destroy of ToolbarPlacement.Role((uint64_t)v46);
          v28 = (v25 >> 3) & 0x1FFFFFFFFFFFFFF8;
          v29 = *(unint64_t *)((char *)v33 + v28);
          *(unint64_t *)((char *)v33 + v28) = v29 & ~(1 << v25);
          if ((v29 & (1 << v25)) == 0)
            goto LABEL_3;
          v30 = v47 - 1;
          if (__OFSUB__(v47, 1))
            goto LABEL_64;
          --v47;
          if (!v30)
            return MEMORY[0x1E0DEE9E8];
          break;
      }
      break;
    }
  }
  v16 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    v17 = (unint64_t)(v11 + 64) >> 6;
    v18 = a5[3];
    if (v16 >= v17)
      goto LABEL_61;
    v19 = *(_QWORD *)(v10 + 8 * v16);
    if (v19)
      goto LABEL_14;
    v20 = v12 + 2;
    v18 = v12 + 1;
    if (v12 + 2 >= v17)
      goto LABEL_61;
    v19 = *(_QWORD *)(v10 + 8 * v20);
    if (!v19)
    {
      v18 = v12 + 2;
      if (v12 + 3 >= v17)
        goto LABEL_61;
      v19 = *(_QWORD *)(v10 + 8 * (v12 + 3));
      if (v19)
      {
        v16 = v12 + 3;
        goto LABEL_14;
      }
      v20 = v12 + 4;
      v18 = v12 + 3;
      if (v12 + 4 >= v17)
        goto LABEL_61;
      v19 = *(_QWORD *)(v10 + 8 * v20);
      if (!v19)
      {
        v16 = v12 + 5;
        v18 = v12 + 4;
        if (v12 + 5 >= v17)
        {
LABEL_61:
          memset(v38, 0, sizeof(v38));
          v39 = xmmword_187C304E0;
          *a5 = v9;
          a5[1] = v10;
          a5[2] = v11;
          a5[3] = v18;
          a5[4] = 0;
LABEL_62:
          outlined destroy of AccessibilityTableContext?((uint64_t)v38, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v33, a2, v47, a3);
        }
        v19 = *(_QWORD *)(v10 + 8 * v16);
        if (!v19)
        {
          v18 = v17 - 1;
          v31 = v12 + 6;
          do
          {
            if (v17 == v31)
              goto LABEL_61;
            v19 = *(_QWORD *)(v10 + 8 * v31++);
          }
          while (!v19);
          v16 = v31 - 1;
        }
        goto LABEL_14;
      }
    }
    v16 = v20;
LABEL_14:
    v14 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v16 << 6);
    v12 = v16;
    goto LABEL_15;
  }
  __break(1u);
LABEL_64:
  __break(1u);
  return result;
}

uint64_t outlined init with take of ToolbarPlacement.Role(uint64_t a1, uint64_t a2)
{
  __swift_memcpy40_8(a2, a1);
  return a2;
}

void _UIHostingView.sceneActivationStateDidChange(with:)(unsigned __int8 a1)
{
  void *v1;
  int v3;
  id v4;

  v3 = a1;
  _UIHostingView.updateSceneActivationState()();
  if (v3 == 3)
  {
    _UIHostingView.isEnteringForeground.setter(1);
    *(_QWORD *)(swift_allocObject() + 16) = v1;
    v4 = v1;
    onNextMainRunLoop(do:)();
    swift_release();
  }
  _UIHostingView.isExitingForeground.setter(a1 == 0);
  if ((_UIHostingView.isExitingForeground.getter() & 1) == 0)
    _UIHostingView.requestUpdateForFidelity()();
}

Swift::Void __swiftcall _UIHostingView.updateSceneActivationState()()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  void *v3;
  id v4;
  char *v5;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (void *)MEMORY[0x18D760234]((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x268));
  v3 = v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, sel_activationState);

  }
  else
  {
    v4 = 0;
  }
  v5 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x270);
  *(_QWORD *)v5 = v4;
  v5[8] = v3 == 0;
}

uint64_t _UIHostingView._sceneActivationState.setter(uint64_t result, char a2)
{
  _QWORD *v2;
  char *v3;

  v3 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x270);
  *(_QWORD *)v3 = result;
  v3[8] = a2 & 1;
  return result;
}

void _UIHostingView.updateSceneNotifications()()
{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;

  v1 = objc_msgSend(v0, sel_window);
  v14 = objc_msgSend(v1, sel_windowScene);

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (id)MEMORY[0x18D760234]((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x268));
  if (!v14)
  {
    if (!v3)
      return;

    goto LABEL_7;
  }
  if (!v3 || (v3, v14 != v3))
  {
LABEL_7:
    v4 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    v5 = MEMORY[0x18D760234]((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x268));
    v6 = (uint64_t *)MEMORY[0x1E0DC5330];
    v7 = (_QWORD *)MEMORY[0x1E0DC5308];
    v8 = (_QWORD *)MEMORY[0x1E0DC5318];
    v9 = (_QWORD *)MEMORY[0x1E0DC5338];
    v10 = (_QWORD *)MEMORY[0x1E0DC5B18];
    if (v5)
    {
      v11 = (void *)v5;
      objc_msgSend(v4, sel_removeObserver_name_object_, v0, *MEMORY[0x1E0DC5330], v5);
      objc_msgSend(v4, sel_removeObserver_name_object_, v0, *v7, v11);
      objc_msgSend(v4, sel_removeObserver_name_object_, v0, *v8, v11);
      objc_msgSend(v4, sel_removeObserver_name_object_, v0, *v9, v11);
      objc_msgSend(v4, sel_removeObserver_name_object_, v0, *v10, v11);

    }
    if (v14)
    {
      v12 = *v6;
      v13 = v14;
      objc_msgSend(v4, sel_addObserver_selector_name_object_, v0, sel_sceneWillDeactivateWithNotification_, v12, v13);
      objc_msgSend(v4, sel_addObserver_selector_name_object_, v0, sel_sceneDidActivateWithNotification_, *v7, v13);
      objc_msgSend(v4, sel_addObserver_selector_name_object_, v0, sel_sceneDidEnterBackgroundWithNotification_, *v8, v13);
      objc_msgSend(v4, sel_addObserver_selector_name_object_, v0, sel_sceneWillEnterForegroundWithNotification_, *v9, v13);
      objc_msgSend(v4, sel_addObserver_selector_name_object_, v0, sel_sceneDidUpdateSystemUserInterfaceStyle, *MEMORY[0x1E0DC5B18], v13);

    }
    swift_unknownObjectWeakAssign();
    _UIHostingView.updateSceneActivationState()();

  }
}

void _UIHostingView.observedScene.getter()
{
  JUMPOUT(0x18D760234);
}

uint64_t _UIHostingView.isExitingForeground.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x280)) = result;
  return result;
}

uint64_t _UIHostingView.isExitingForeground.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x280));
}

void UIHostingController._update(environment:)(uint64_t a1)
{
  char *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  _QWORD v14[2];
  char v15[8];

  v2 = v1;
  if (specialized UIHostingController.alwaysOnBridge.getter())
  {
    swift_retain();
    AlwaysOnBridge.update(environment:)((__int128 *)a1);
    swift_release();
  }
  v4 = *(_QWORD *)&v1[direct field offset for UIHostingController.dialogBridge];
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 88) = *(_QWORD *)a1;
  *(_QWORD *)(v4 + 96) = v5;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  if (specialized UIHostingController.navigationBridge.getter())
  {
    swift_retain();
    UIKitNavigationBridge.update(environment:)((uint64_t *)a1);
    swift_release();
  }
  v6 = (void *)specialized UIHostingController.barAppearanceBridge.getter();
  if (v6)
  {
    v7 = v6;
    BarAppearanceBridge.update(environment:)((_QWORD *)a1);

  }
  if (specialized UIHostingController.contentScrollViewBridge.getter())
  {
    swift_retain();
    UIKitContentScrollViewBridge.update(environment:)(a1);
    swift_release();
  }
  if (specialized UIHostingController.testBridge.getter())
  {
    swift_retain();
    PPTTestBridge.update(environment:)(a1);
    swift_release();
  }
  v8 = v2;
  WithCurrentHostingControllerAction.init<A>(_:)(v8, (uint64_t)v14);
  outlined init with copy of WithCurrentHostingControllerAction((uint64_t)v14, (uint64_t)v15);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>, (uint64_t)&type metadata for EnvironmentValues.WithCurrentHostingControllerKey, (uint64_t)&protocol witness table for EnvironmentValues.WithCurrentHostingControllerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>, (uint64_t)&type metadata for EnvironmentValues.WithCurrentHostingControllerKey, (uint64_t)&protocol witness table for EnvironmentValues.WithCurrentHostingControllerKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v5)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of WithCurrentHostingControllerAction((uint64_t)v14);
  ContainerBackgroundBridge.update(environment:)(a1);
  v9 = *(_QWORD *)(a1 + 8);
  v14[0] = *(_QWORD *)a1;
  v14[1] = v9;
  swift_retain();
  swift_retain();
  UIHostingController.persistentSystemOverlaysEnvironmentDidChange(environment:)((uint64_t)v14);
  swift_release();
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ToolbarBridge<UIKitToolbarStrategy>, (uint64_t)&type metadata for UIKitToolbarStrategy, (uint64_t)&protocol witness table for UIKitToolbarStrategy, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarBridge);
  v10 = (void *)specialized UIHostingController.toolbarBridge.getter();
  v11 = v10;
  static ToolbarBridge.update<A>(environment:toolbarBridge:hostingController:)((uint64_t *)a1, v10, v8);

  v12 = (void *)specialized UIHostingController.inspectorBridgeV5.getter();
  if (v12)
  {
    v13 = v12;
    UIKitInspectorBridgeV5.update(environment:)((uint64_t *)a1);

  }
}

uint64_t outlined destroy of WithCurrentHostingControllerAction(uint64_t a1)
{
  destroy for UIKitScenePresentationModeLocation();
  return a1;
}

void WithCurrentHostingControllerAction.init<A>(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[8];

  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<UIViewController>((uint64_t)v4, a2);

}

uint64_t outlined init with take of WeakBox<UIViewController>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakBox<UIViewController>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for WeakBox<UIViewController>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakBox<UIViewController>)
  {
    type metadata accessor for UIViewController();
    v0 = type metadata accessor for WeakBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIViewController>);
  }
}

uint64_t UIKitInspectorBridgeV5.update(environment:)(uint64_t *a1)
{
  uint64_t v2;

  v2 = a1[1];
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return SheetBridge.update(environment:)(a1);
}

uint64_t UIKitContentScrollViewBridge.update(environment:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  result = EnvironmentValues.pixelLength.getter();
  *(_QWORD *)(v1 + 48) = v4;
  return result;
}

uint64_t BarAppearanceBridge.update(environment:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __objc2_class **v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v2 = v1;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage) == 1)
  {
    v4 = a1[1];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v4)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v5 = swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v5);
    swift_bridgeObjectRelease();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.setter();
    if (v4)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
  swift_beginAccess();
  v7 = *v6;
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v24), (v9 & 1) != 0))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 80 * v8 + 8);
    swift_endAccess();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
    if (v10)
    {
      v26 = 0;
      v24 = 0u;
      v25 = 0u;
      if (a1[1])
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
        swift_retain_n();
        swift_retain_n();
        PropertyList.subscript.getter();
      }
      swift_release_n();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, (uint64_t)&v24, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
      swift_bridgeObjectRetain();
      swift_retain();
      PropertyList.subscript.setter();
      if (a1[1])
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
        swift_release_n();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release_n();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_release();
      swift_release();
    }
    swift_release();
  }
  else
  {
    swift_endAccess();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
  }
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barBackgroundViewModels);
  swift_beginAccess();
  if (*(_QWORD *)(*v12 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v24), (v13 & 1) != 0))
  {
    swift_endAccess();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
  }
  else
  {
    swift_endAccess();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
    type metadata accessor for PrimaryBarViewModel(0);
    v14 = swift_allocObject();
    LOBYTE(v24) = 0;
    Published.init(initialValue:)();
    LOBYTE(v24) = 2;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ColorScheme?, MEMORY[0x1E0CE0F28], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    Published.init(initialValue:)();
    v26 = 0;
    v24 = 0u;
    v25 = 0u;
    swift_beginAccess();
    swift_retain();
    v15 = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v12;
    *v12 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, (uint64_t)&v24, v15);
    *v12 = v23;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
    swift_endAccess();
    swift_release();
  }
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  swift_beginAccess();
  v16 = *v12;
  if (*(_QWORD *)(*v12 + 16) && (v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v24), (v18 & 1) != 0))
  {
    v19 = *(__objc2_class ***)(*(_QWORD *)(v16 + 56) + 8 * v17);
    swift_endAccess();
    swift_retain();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
    if (*v19 == _TtC7SwiftUI19PrimaryBarViewModel)
      goto LABEL_31;
    swift_release();
  }
  else
  {
    swift_endAccess();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
  }
  v19 = 0;
LABEL_31:
  *(_QWORD *)&v24 = v19;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (a1[1])
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  v20 = a1[1];
  v21 = (_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment);
  *v21 = *a1;
  v21[1] = v20;
  swift_retain();
  swift_retain();
  swift_release();
  return swift_release();
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  _BYTE v14[40];
  _BYTE v15[40];
  _BYTE v16[40];

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        return swift_release();
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          return swift_release();
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            return swift_release();
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v2 + 48) + 40 * v10, (uint64_t)v16);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v16, (uint64_t)v15);
    specialized Set._Variant.remove(_:)((uint64_t)v15, (uint64_t)v14);
    outlined destroy of AccessibilityTableContext?((uint64_t)v14, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    result = outlined destroy of ToolbarPlacement.Role((uint64_t)v15);
  }
  v13 = v11 + 4;
  if (v13 >= v7)
    return swift_release();
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t static ToolbarBridge.update<A>(environment:toolbarBridge:hostingController:)(uint64_t *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[12];
  _BYTE v13[96];

  v5 = a3;
  Toolbar.UpdateContext.init<A>(hostingController:)(v5, (uint64_t)v13);
  if (a2)
  {
    v6 = a2;
    v7 = ToolbarBridge.update(environment:context:)(a1, (uint64_t)v13);
    ToolbarBridge.adoptUpdates<A>(_:hostingController:)(v7, v8 & 0xFF0101, v5);
    swift_bridgeObjectRelease();
    v9 = a1[1];
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
    swift_retain_n();
    if (v9)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v12[0] |= 1uLL;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
    swift_retain();
    PropertyList.subscript.setter();
    if (v9)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

      swift_release();
      swift_release();
    }
    else
    {

    }
    swift_release();
  }
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v13, (uint64_t)v12);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v12, (uint64_t)&v11, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (a1[1])
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of AccessibilityTableContext?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  return outlined destroy of Toolbar.UpdateContext((uint64_t)v13);
}

void Toolbar.UpdateContext.init<A>(hostingController:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  id v6;
  id v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v8 = xmmword_187BF9F90;
  v9 = 0;
  LOBYTE(v10) = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v11 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v8, a2);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_WORD *)(a2 + 80) = 257;
  *(_QWORD *)(a2 + 88) = MEMORY[0x1E0DEE9D8];
  outlined destroy of HostingControllerOverrides(a2);
  UIHostingController.overrides.getter(a2);
  v4 = objc_msgSend(a1, sel_navigationController, v8, v9, v10);
  swift_unknownObjectWeakAssign();

  swift_unknownObjectWeakAssign();
  v5 = objc_msgSend((id)specialized UIHostingController.host.getter(), sel_window);
  v6 = v5;
  if (v5)
  {
    v7 = objc_msgSend(v5, sel_windowScene);

    if (v7)
    {
      v6 = objc_msgSend(v7, sel_session);

    }
    else
    {
      v6 = 0;
    }
  }

  swift_unknownObjectWeakAssign();
}

uint64_t PPTTestBridge.update(environment:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[48];
  _QWORD v7[6];

  if (*(_BYTE *)(v1 + 24) == 1)
  {
    v2 = v1;
    v3 = result;
    if (*(_QWORD *)(result + 8))
    {
      type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>();
      lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>();
      lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v5 = v7[0];
    v4 = v7[1];
    result = outlined destroy of PPTTestCase?((uint64_t)v7);
    if (!v5 && v4 == 1)
    {
      *(_BYTE *)(v2 + 24) = 0;
      swift_beginAccess();
      outlined init with copy of PPTTestCase?(v2 + 32, (uint64_t)v7);
      outlined init with copy of PPTTestCase?((uint64_t)v7, (uint64_t)v6);
      type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>();
      lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (*(_QWORD *)(v3 + 8))
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      return outlined destroy of PPTTestCase?((uint64_t)v7);
    }
  }
  return result;
}

uint64_t outlined init with copy of WithCurrentHostingControllerAction(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for BridgedPopUpButtonProvider(a2, a1);
  return a2;
}

uint64_t outlined destroy of TableRowList?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;

  v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t outlined destroy of UIBackgroundConfiguration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v5;

  v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

BOOL UIViewController.hasOrWillHaveBackItem(overrides:)(uint64_t a1)
{
  void *v1;
  int v2;
  id v4;
  id v5;
  void *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  int v11;
  int v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unsigned __int8 v44;
  _BYTE v45[16];
  uint64_t v46;
  unsigned __int8 v47;
  _BYTE v48[32];

  v2 = *(unsigned __int8 *)(a1 + 48);
  if (v2 == 2)
  {
    outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for PushTarget?, (uint64_t)&type metadata for PushTarget);
    v4 = (id)MEMORY[0x18D760234](a1 + 40);
    if (!v4)
      v4 = objc_msgSend(v1, sel_splitViewController);
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v48, (uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for PushTarget?, (uint64_t)&type metadata for PushTarget);
    if (v44 == 2)
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for PushTarget?, (uint64_t)&type metadata for PushTarget);
      v5 = objc_msgSend(v1, sel_navigationController);
      if (v5)
      {
        v6 = v5;
        v7 = objc_msgSend(v5, sel_viewControllers);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (!(v8 >> 62))
        {
          v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRelease();

          if (v9 <= 1)
            goto LABEL_14;
LABEL_12:

          v10 = 1;
          goto LABEL_60;
        }
        swift_bridgeObjectRetain();
        v13 = _CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease_n();
        if (v13 > 1)
          goto LABEL_12;
      }
LABEL_14:
      if (v4)
      {
        v14 = v4;
        v15 = objc_msgSend(v14, sel_traitCollection);
        v16 = objc_msgSend(v15, sel_horizontalSizeClass);

        v10 = v16 != (id)1 && objc_msgSend(v14, sel_displayMode) == (id)1;
        outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v48, (uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for PushTarget?, (uint64_t)&type metadata for PushTarget);
        if (v44 == 2)
        {
          outlined destroy of AccessibilityTableContext?((uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for PushTarget?, (uint64_t)&type metadata for PushTarget);
        }
        else
        {
          outlined init with take of PushTarget((uint64_t)&v43, (uint64_t)v45);
          if (v47 != 1)
          {
            v17 = v46;
            if (objc_msgSend(v14, sel_style))
            {
              v18 = objc_msgSend(v14, sel_viewControllerForColumn_, v17);
              if (v18)
              {
                v19 = v18;
                objc_opt_self();
                v20 = (void *)swift_dynamicCastObjCClass();
                if (v20)
                {
                  v21 = objc_msgSend(v20, sel_viewControllers);
                  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
                  v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                  if (v22 >> 62)
                  {
                    swift_bridgeObjectRetain();
                    v23 = _CocoaArrayWrapper.endIndex.getter();

                    swift_bridgeObjectRelease_n();
                  }
                  else
                  {
                    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
                    swift_bridgeObjectRelease();

                  }
                  v10 = v23 != 0;
                  outlined destroy of PushTarget((uint64_t)v45);

                  goto LABEL_60;
                }

              }
            }
          }
          outlined destroy of PushTarget((uint64_t)v45);
        }
        if (objc_msgSend(v14, sel_style))
        {
          v24 = objc_msgSend(v14, sel_viewControllerForColumn_, 0);
          if (v24)
          {
            v25 = v24;
            objc_opt_self();
            v26 = (void *)swift_dynamicCastObjCClass();
            if (v26)
            {
              v27 = v26;
              v28 = objc_msgSend(v26, sel_viewControllers);
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
              v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (v29 >> 62)
              {
                swift_bridgeObjectRetain();
                v30 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
              }
              swift_bridgeObjectRelease();
              if (v30)
              {

                goto LABEL_49;
              }
            }

          }
        }
        if (!objc_msgSend(v14, sel_style)
          || (v31 = objc_msgSend(v14, sel_viewControllerForColumn_, 2)) == 0)
        {

          goto LABEL_60;
        }
        v25 = v31;
        objc_opt_self();
        v32 = (void *)swift_dynamicCastObjCClass();
        if (!v32)
        {

          goto LABEL_53;
        }
        v27 = v32;
        v33 = objc_msgSend(v32, sel_viewControllers);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v34 >> 62)
        {
          swift_bridgeObjectRetain();
          v35 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v35)
          {
LABEL_43:
            v36 = v35 - 1;
            if (__OFSUB__(v35, 1))
            {
              __break(1u);
            }
            else if ((v34 & 0xC000000000000001) == 0)
            {
              if ((v36 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v36 < *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                v37 = *(_QWORD *)(v34 + 8 * v36 + 32);
                goto LABEL_48;
              }
              __break(1u);
              goto LABEL_66;
            }
            v37 = MEMORY[0x18D75E3BC](v36, v34);
            swift_unknownObjectRelease();
LABEL_48:

            swift_bridgeObjectRelease();
            if ((void *)v37 == v1)
            {
LABEL_49:
              v38 = v25;
              if (v10)
              {

                v10 = 1;
                goto LABEL_60;
              }
              v39 = objc_msgSend(v27, sel_viewControllers);
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
              v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (!(v40 >> 62))
              {
                v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRelease();

LABEL_56:
                v10 = v41 > 1;
                goto LABEL_60;
              }
LABEL_66:
              swift_bridgeObjectRetain();
              v41 = _CocoaArrayWrapper.endIndex.getter();

              swift_bridgeObjectRelease_n();
              goto LABEL_56;
            }
LABEL_53:

            goto LABEL_60;
          }
        }
        else
        {
          v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v35)
            goto LABEL_43;
        }

        swift_bridgeObjectRelease();
        goto LABEL_60;
      }
      v10 = 0;
LABEL_60:
      outlined destroy of AccessibilityTableContext?((uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for PushTarget?, (uint64_t)&type metadata for PushTarget);
      return v10;
    }
    outlined init with take of PushTarget((uint64_t)&v43, (uint64_t)v45);
    v11 = v47;
    outlined init with take of PushTarget((uint64_t)v45, (uint64_t)&v43);
    v12 = v44;
    outlined destroy of PushTarget((uint64_t)&v43);
    if (v11 != 1 || v12)
      goto LABEL_14;
    goto LABEL_12;
  }
  return v2 & 1;
}

void BarAppearanceBridge.UpdateContext.init<A>(hostingController:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  char v15;
  id v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _BYTE v20[32];
  uint64_t v21;
  uint64_t v22;

  v3 = MEMORY[0x1E0DEE9D8];
  a2[9] = MEMORY[0x1E0DEE9D8];
  a2[10] = v3;
  *a2 = a1;
  a2[1] = 0;
  v4 = a1;
  v5 = objc_msgSend(v4, sel_navigationController);
  if (!v5)
  {
    UIHostingController.overrides.getter((uint64_t)v20);
    v5 = (id)MEMORY[0x18D760234](&v21);
    outlined destroy of HostingControllerOverrides((uint64_t)v20);
  }
  v6 = objc_msgSend(v4, sel_splitViewController);
  v7 = v6;
  if (v6)
  {
    v8 = v6;
    if (v5)
      goto LABEL_5;
LABEL_12:

LABEL_16:
    v9 = 0;
    goto LABEL_17;
  }
  UIHostingController.overrides.getter((uint64_t)v20);
  v9 = (id)MEMORY[0x18D760234](&v22);
  outlined destroy of HostingControllerOverrides((uint64_t)v20);
  if (!v9)
  {
    v7 = 0;
    goto LABEL_17;
  }
  v7 = v9;
  v16 = 0;
  if (!v5)
    goto LABEL_12;
LABEL_5:
  v9 = objc_msgSend(v5, sel_parentViewController);
  if (!v9)
  {

    goto LABEL_17;
  }
  objc_opt_self();
  v10 = swift_dynamicCastObjCClass();
  if (!v10)
  {

    goto LABEL_16;
  }
  v11 = (id)v10;
  v12 = v9;
  v9 = objc_msgSend(v11, sel_parentViewController);
  if (v9)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v13 = v7;
    v14 = v9;
    v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) != 0)
    {
      v9 = (id)a2[1];
      goto LABEL_18;
    }

    v9 = (id)a2[1];
  }
  else
  {

  }
LABEL_17:
  v11 = v5;
LABEL_18:

  a2[1] = v11;
  UIHostingController.overrides.getter((uint64_t)(a2 + 2));
  v17 = (char *)specialized UIHostingController.toolbarBridge.getter();
  if (v17)
  {
    v18 = *(_QWORD *)&v17[direct field offset for ToolbarBridge.navigationAdaptor];
    v19 = v17;
    swift_bridgeObjectRetain();

    swift_bridgeObjectRelease();
    a2[9] = v18;
  }
  else
  {

  }
}

uint64_t UIHostingController.overrides.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + direct field offset for UIHostingController.overrides;
  swift_beginAccess();
  return outlined init with copy of HostingControllerOverrides(v3, a1);
}

uint64_t outlined init with copy of HostingControllerOverrides(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for HostingControllerOverrides(a2, a1, (uint64_t)&type metadata for HostingControllerOverrides);
  return a2;
}

uint64_t initializeWithCopy for HostingControllerOverrides(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  if (*(_BYTE *)(a2 + 8) == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  else
  {
    a4(a1, a2);
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  }
  a4(a1 + 32, a2 + 32);
  a4(a1 + 40, a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t initializeWithCopy for HostingControllerOverrides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for HostingControllerOverrides(a1, a2, a3, (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEF30]);
}

Swift::Void __swiftcall UIHostingController._viewDidMoveToWindow()()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;

  v1 = v0;
  v2 = (void *)specialized UIHostingController.barAppearanceBridge.getter();
  if (v2)
  {
    v3 = v2;
    BarAppearanceBridge.didMoveToWindow<A>(hostingController:)(v1);

  }
  v4 = (void *)specialized UIHostingController.inspectorBridgeV5.getter();
  if (v4)
  {
    v5 = v4;
    SheetBridge.didMoveToWindow()();

  }
}

Swift::Void __swiftcall UIHostingController._commonInit()()
{
  void *v0;
  id v1;

  (id)specialized UIHostingController.host.getter();
  v1 = v0;
  specialized _UIHostingView.viewController.setter();
}

uint64_t type metadata accessor for SharingActivityPickerBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharingActivityPickerBridge);
}

uint64_t SharingActivityPickerBridge.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  SharingActivityPickerBridge.init()();
  return v0;
}

uint64_t SharingActivityPickerBridge.init()()
{
  uint64_t v0;
  _BYTE v2[152];

  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  _s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOi0_((uint64_t)v2);
  outlined init with take of SharingActivityPickerPresentation?((uint64_t)v2, v0 + 56);
  *(_QWORD *)(v0 + 208) = 0;
  *(_DWORD *)(v0 + 216) = 0;
  *(_QWORD *)(v0 + 224) = 0;
  *(_BYTE *)(v0 + 232) = 0;
  return v0;
}

uint64_t type metadata accessor for ShareConfigurationBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShareConfigurationBridge);
}

uint64_t ShareConfigurationBridge.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_DWORD *)(v0 + 24) = -1;
  return v0;
}

uint64_t type metadata accessor for UIKitInspectorV3Bridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitInspectorV3Bridge);
}

id @objc UIKitInspectorV3Bridge.init()()
{
  return UIKitInspectorV3Bridge.init()();
}

id UIKitInspectorV3Bridge.init()()
{
  _BYTE *v0;
  objc_class *ObjectType;
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  v2 = &v0[direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.delayedPopoverPreferences] = 1;
  v3 = &v0[direct field offset for UIKitInspectorV3Bridge.activePresentation];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_QWORD *)v3 + 4) = 0;
  v3[40] = 3;
  *(_QWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor] = 0;
  v0[direct field offset for UIKitInspectorV3Bridge.dismissingReason] = 2;
  *(_QWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate] = 0;
  *(_QWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.presentedVC] = 0;
  *(_DWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.inspectorSeed] = 0;
  *(_DWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.anchorSeed] = 0;
  *(_DWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.popoverSeed] = 0;
  *(_DWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.backgroundSeed] = 0;
  *(_DWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.presentationDetentsSeed] = 0;
  v4 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.lastInspectorValues] = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.lastAnchorValues] = v4;
  v5 = &v0[direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation];
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_QWORD *)v5 + 12) = 0;
  v0[direct field offset for UIKitInspectorV3Bridge.wasBackgrounded] = 0;
  v7.receiver = v0;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

id PencilEventsBridge.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t add #1 <A><A1>(preference:) in UIHostingController.addScreenEdgesSystemGesturePreferences(to:)()
{
  GraphHost.addPreference<A>(_:)();
  swift_beginAccess();
  return VersionSeedSetTracker.addPreference<A>(_:)();
}

uint64_t UIHostingController.addScreenEdgesSystemGesturePreferences(to:)()
{
  return add #1 <A><A1>(preference:) in UIHostingController.addScreenEdgesSystemGesturePreferences(to:)();
}

uint64_t add #1 <A><A1>(preference:) in UIHostingController.addPersistentSystemOverlaysPreferences(to:)()
{
  GraphHost.addPreference<A>(_:)();
  swift_beginAccess();
  return VersionSeedSetTracker.addPreference<A>(_:)();
}

uint64_t UIHostingController.addPersistentSystemOverlaysPreferences(to:)()
{
  return add #1 <A><A1>(preference:) in UIHostingController.addPersistentSystemOverlaysPreferences(to:)();
}

uint64_t UIHostingController.testBridge.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + direct field offset for UIHostingController.testBridge) = a1;
  return swift_release();
}

uint64_t _UIHostingView.sharingActivityPickerBridge.setter(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1C8)) = a1;
  return swift_release();
}

uint64_t _UIHostingView.shareConfigurationBridge.setter(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1D0)) = a1;
  return swift_release();
}

void _UIHostingView.inspectorBridge.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1B0);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

void _UIHostingView.init(rootView:)()
{
  specialized _UIHostingView.init(rootView:)();
}

uint64_t sub_186EAA350(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 8))(v1);
  return a1;
}

void *_UIHostingView.sheetBridge.getter()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t ObjectType;
  void *v5;
  id v6;

  v1 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x198);
  v2 = *(void **)((char *)v0 + v1);
  v3 = v2;
  if (v2 == (void *)1)
  {
    ObjectType = swift_getObjectType();
    v3 = (void *)closure #1 in _UIHostingView.sheetBridge.getter(ObjectType);
    v5 = *(void **)((char *)v0 + v1);
    *(_QWORD *)((char *)v0 + v1) = v3;
    v6 = v3;
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v5);
  }
  outlined copy of SheetBridge<_ViewList_View, SheetPreference.Key>??(v2);
  return v3;
}

id outlined copy of SheetBridge<_ViewList_View, SheetPreference.Key>??(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

void DeprecatedAlertBridge.__allocating_init(style:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  DeprecatedAlertBridge.init(style:)(a1);
}

void DeprecatedAlertBridge.init(style:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  char *v5;

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *MEMORY[0x1E0DEEDD8] & *v1;
  swift_unknownObjectWeakInit();
  *((_BYTE *)v1 + *(_QWORD *)((*v3 & *v1) + 0x78)) = 0;
  *(_DWORD *)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x80)) = 0;
  *(_QWORD *)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x88)) = 0;
  v5 = v1;
  EnvironmentValues.init()();
  (*(void (**)(char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v4 + 88) - 8) + 56))(&v5[*(_QWORD *)((*v3 & *(_QWORD *)v5) + 0x98)], 1, 1, *(_QWORD *)(v4 + 88));
  v5[*(_QWORD *)((*v3 & *(_QWORD *)v5) + 0xA0)] = 0;
  *(_QWORD *)&v5[*(_QWORD *)((*v3 & *(_QWORD *)v5) + 0xA8)] = a1;

  type metadata accessor for DeprecatedAlertBridge();
}

id sub_186EAA558(objc_class *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, objc_super a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;
  objc_super v23;

  v23.receiver = v21;
  v23.super_class = a1;
  return -[objc_class init](&v23, sel_init);
}

void type metadata accessor for DeprecatedAlertBridge()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for FocusBridge()
{
  return objc_opt_self();
}

ValueMetadata *protocol witness for static ForwardedEventDispatcher.eventType.getter in conformance PencilDoubleTapEventDispatcher()
{
  lazy protocol witness table accessor for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent();
  return &type metadata for PencilDoubleTapEvent;
}

ValueMetadata *protocol witness for static ForwardedEventDispatcher.eventType.getter in conformance PencilSqueezeEventDispatcher()
{
  lazy protocol witness table accessor for type PencilSqueezeEvent and conformance PencilSqueezeEvent();
  return &type metadata for PencilSqueezeEvent;
}

ValueMetadata *protocol witness for static ForwardedEventDispatcher.eventType.getter in conformance HoverEventDispatcher()
{
  lazy protocol witness table accessor for type HoverEvent and conformance HoverEvent();
  return &type metadata for HoverEvent;
}

ValueMetadata *protocol witness for static ForwardedEventDispatcher.eventType.getter in conformance KeyEventDispatcher()
{
  lazy protocol witness table accessor for type KeyEvent and conformance KeyEvent();
  return &type metadata for KeyEvent;
}

void type metadata accessor for NSNotificationName(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for NSNotificationName);
}

uint64_t type metadata accessor for UILargeContentViewerInteractionBridge()
{
  return objc_opt_self();
}

id UILargeContentViewerInteractionBridge.init()()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  objc_super v12;
  __int128 v13[15];

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_interaction] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_simultaneousGesture] = 0;
  v2 = &v0[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_activeItem];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_largeContentViewTreeSeed] = 0;
  v3 = &v0[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_largeContentViewTree];
  _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi1_((uint64_t)v13);
  outlined init with take of AccessibilityLargeContentViewTree(v13, v3);
  v4 = OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_showLargeContentViewer;
  v5 = (void *)objc_opt_self();
  v6 = v0;
  v0[v4] = objc_msgSend(v5, sel_isEnabled);

  v12.receiver = v6;
  v12.super_class = ObjectType;
  v7 = objc_msgSendSuper2(&v12, sel_init);
  v8 = (void *)objc_opt_self();
  v9 = v7;
  v10 = objc_msgSend(v8, sel_defaultCenter);
  objc_msgSend(v10, sel_addObserver_selector_name_object_, v9, sel_enabledStatusDidChange, *MEMORY[0x1E0DC4FF0], 0);

  return v9;
}

id @objc AVKitCaptureButtonBridge.init()()
{
  return AVKitCaptureButtonBridge.init()();
}

id AVKitCaptureButtonBridge.init()()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_DWORD *)&v0[direct field offset for AVKitCaptureButtonBridge.seedTracker] = -1;
  v2 = &v0[direct field offset for AVKitCaptureButtonBridge.dispatch];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *(_QWORD *)&v0[direct field offset for AVKitCaptureButtonBridge.interaction] = 0;
  swift_unknownObjectWeakInit();
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for UIKitEventBindingBridge()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UIKitEventBindingBridge;
  if (!type metadata singleton initialization cache for UIKitEventBindingBridge)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for UIKitKeyPressResponder()
{
  return objc_opt_self();
}

uint64_t UIKitEventBindingBridge.init(eventBindingManager:)()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t Strong;
  void (*v7)(uint64_t);
  _QWORD *v8;

  v0[6] = 0;
  v0[8] = 0;
  v1 = swift_retain();
  if ((MEMORY[0x18D75A3D8](v1) & 1) == 0)
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitGestureRecognizer()), sel_init);
    v3 = (void *)v0[6];
    v0[6] = v2;

  }
  v0[7] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitHoverGestureRecognizer()), sel_init);
  swift_release();
  swift_retain();
  v4 = EventBindingBridge.init(eventBindingManager:)();
  v5 = *(_QWORD **)(v4 + 48);
  if (v5)
  {
    swift_weakAssign();
    Strong = swift_weakLoadStrong();
    v7 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x130);
    swift_retain_n();
    v8 = v5;
    v7(Strong);

    swift_release();
    swift_release_n();
  }
  swift_release();
  swift_weakAssign();
  return v4;
}

uint64_t type metadata accessor for UIKitGestureRecognizer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for UIKitHoverGestureRecognizer()
{
  return objc_opt_self();
}

id UIKitGestureRecognizer.init()()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  Class isa;
  objc_super v11;

  swift_weakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialScale] = 0x3FF0000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialAngle] = 0;
  v1 = &v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_scrollConverter];
  *(_DWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_gestureCategory] = 0;
  v2 = &v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastInheritedPhase];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  v3 = &v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastState];
  *(_QWORD *)v3 = 0;
  v3[8] = 1;
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for UIKitGestureRecognizer();
  v4 = objc_msgSendSuper2(&v11, sel_initWithTarget_action_, 0, 0);
  v5 = one-time initialization token for back;
  v6 = v4;
  if (v5 != -1)
    swift_once();
  v7 = static UIPressType.back;
  v8 = v6;
  specialized ContiguousArray.reserveCapacity(_:)();
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 0);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 1);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 2);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 3);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 4);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 5);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 6);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v7);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  objc_msgSend(v8, sel_setAllowedPressTypes_, isa);

  objc_msgSend(v8, sel_setDelaysTouchesEnded_, 0);
  return v8;
}

unint64_t lazy protocol witness table accessor for type EventID and conformance EventID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EventID and conformance EventID;
  if (!lazy protocol witness table cache variable for type EventID and conformance EventID)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7618], MEMORY[0x1E0CE7610]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventID and conformance EventID);
  }
  return result;
}

id @objc PencilEventsBridge.init()()
{
  return PencilEventsBridge.init()();
}

id PencilEventsBridge.init()()
{
  _BYTE *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(_DWORD *)&v0[direct field offset for PencilEventsBridge.wantsPencilEventsSeed] = 0;
  *(_QWORD *)&v0[direct field offset for PencilEventsBridge.pencilInteraction] = 0;
  v0[direct field offset for PencilEventsBridge.preferredTapActionContext] = 0;
  v0[direct field offset for PencilEventsBridge.preferredSqueezeActionContext] = 0;
  *(_QWORD *)&v0[direct field offset for PencilEventsBridge.pencilDoubleTapSerial] = 0;
  *(_QWORD *)&v0[direct field offset for PencilEventsBridge.pencilSqueezeSerial] = 0;
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t UIKitEventBindingBridge.eventSources.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if ((MEMORY[0x18D75A3D8]() & 1) != 0)
  {
    v1 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    type metadata accessor for _ContiguousArrayStorage<EventBindingSource>();
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_187BF9830;
    v3 = *(void **)(v0 + 48);
    if (!v3)
    {
      __break(1u);
      return result;
    }
    v1 = (_QWORD *)result;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer, (uint64_t (*)(uint64_t))type metadata accessor for UIKitGestureRecognizer, (uint64_t)&protocol conformance descriptor for UIKitGestureRecognizer);
    v1[4] = v3;
    v1[5] = v4;
    v5 = v3;
  }
  v6 = *(id *)(v0 + 56);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
  v8 = v1[2];
  v7 = v1[3];
  if (v8 >= v7 >> 1)
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v1);
  v9 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer, (uint64_t (*)(uint64_t))type metadata accessor for UIKitHoverGestureRecognizer, (uint64_t)&protocol conformance descriptor for UIKitHoverGestureRecognizer);
  v1[2] = v8 + 1;
  v10 = &v1[2 * v8];
  v10[4] = v6;
  v10[5] = v9;
  return (uint64_t)v1;
}

void type metadata accessor for _ContiguousArrayStorage<EventBindingSource>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<EventBindingSource>)
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for EventBindingSource);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<EventBindingSource>);
  }
}

id @objc DragAndDropBridge.init()()
{
  return DragAndDropBridge.init()();
}

id DragAndDropBridge.init()()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  char *v3;
  char *v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(_DWORD *)&v0[direct field offset for DragAndDropBridge.hasDragItemsSeed] = 0;
  *(_DWORD *)&v0[direct field offset for DragAndDropBridge.dragTimingsSeed] = 0;
  *(_QWORD *)&v0[direct field offset for DragAndDropBridge.dragInteraction] = 0;
  *(_DWORD *)&v0[direct field offset for DragAndDropBridge.canDropSeed] = 0;
  *(_QWORD *)&v0[direct field offset for DragAndDropBridge.dropInteraction] = 0;
  *(_DWORD *)&v0[direct field offset for DragAndDropBridge.canSpringLoadSeed] = 0;
  *(_QWORD *)&v0[direct field offset for DragAndDropBridge.springLoadedInteraction] = 0;
  *(_QWORD *)&v0[direct field offset for DragAndDropBridge.activeSpringLoadedResponder] = 0;
  v2 = &v0[direct field offset for DragAndDropBridge.activeDrop];
  *(_OWORD *)v2 = xmmword_187BF9840;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *(_OWORD *)(v2 + 57) = 0u;
  v3 = &v0[direct field offset for DragAndDropBridge.onSessionBegan];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = &v0[direct field offset for DragAndDropBridge.onSessionEnded];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v6.receiver = v0;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for AnyDragAndDropBridge()
{
  return objc_opt_self();
}

id @objc ContextMenuBridge.init()()
{
  return ContextMenuBridge.init()();
}

id ContextMenuBridge.init()()
{
  _BYTE *v0;
  objc_class *ObjectType;
  char *v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[direct field offset for ContextMenuBridge.interaction] = 0;
  v0[direct field offset for ContextMenuBridge.menuOrder] = 0;
  *(_DWORD *)&v0[direct field offset for ContextMenuBridge.hasContextMenuSeed] = 0;
  *(_DWORD *)&v0[direct field offset for ContextMenuBridge.menuOrderSeed] = 0;
  *(_QWORD *)&v0[direct field offset for ContextMenuBridge.inspectorBridgeToken] = 0;
  v2 = &v0[direct field offset for ContextMenuBridge.presentedMenu];
  *(_DWORD *)v2 = 0;
  v2[4] = 0;
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

id @objc TooltipBridge.init()()
{
  return TooltipBridge.init()();
}

id TooltipBridge.init()()
{
  char *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(_DWORD *)&v0[direct field offset for TooltipBridge.hasTooltipSeed] = 0;
  *(_QWORD *)&v0[direct field offset for TooltipBridge.tooltipInteraction] = 0;
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t SheetBridge.addPreferences(to:)()
{
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  return GraphHost.addPreference<A>(_:)();
}

void outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(id a1)
{
  if (a1 != (id)1)

}

uint64_t storeEnumTagSinglePayload for Alert.Presentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 280) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 280) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for UIKitSensoryFeedbackCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitSensoryFeedbackCache);
}

uint64_t UIKitSensoryFeedbackCache.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  return v0;
}

unint64_t lazy protocol witness table accessor for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType;
  if (!lazy protocol witness table cache variable for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SensoryFeedback.FeedbackType, &type metadata for SensoryFeedback.FeedbackType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType;
  if (!lazy protocol witness table cache variable for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SensoryFeedback.FeedbackType, &type metadata for SensoryFeedback.FeedbackType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType);
  }
  return result;
}

uint64_t type metadata accessor for AVKitCaptureButtonBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AVKitCaptureButtonBridge);
}

Swift::Void __swiftcall AVKitCaptureButtonBridge.addPreferences()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = MEMORY[0x18D760234](v0 + direct field offset for AVKitCaptureButtonBridge.host);
  if (v1)
  {
    v2 = (void *)v1;
    swift_retain();

    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for UIKitStatusBarBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitStatusBarBridge);
}

uint64_t UIKitStatusBarBridge.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_WORD *)(v0 + 16) = 2;
  *(_QWORD *)(v0 + 24) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 32) = -1;
  swift_unknownObjectWeakInit();
  return v0;
}

uint64_t add #1 <A><A1>(preference:) in UIKitStatusBarBridge.addPreferences(to:)()
{
  GraphHost.addPreference<A>(_:)();
  swift_beginAccess();
  return VersionSeedSetTracker.addPreference<A>(_:)();
}

uint64_t UIKitStatusBarBridge.addPreferences(to:)()
{
  return add #1 <A><A1>(preference:) in UIKitStatusBarBridge.addPreferences(to:)();
}

uint64_t type metadata accessor for PencilEventsBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PencilEventsBridge);
}

uint64_t type metadata accessor for DragAndDropBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DragAndDropBridge);
}

uint64_t type metadata accessor for ContextMenuBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContextMenuBridge);
}

uint64_t ContextMenuBridge.addPreferences(to:)()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  uint64_t ObjectType;

  result = MEMORY[0x18D760234](v0 + direct field offset for ContextMenuBridge.host);
  if (result)
  {
    v2 = (void *)result;
    ObjectType = swift_getObjectType();

    result = (*(uint64_t (**)(void))(ObjectType + 1784))();
    if ((result & 1) != 0)
    {
      GraphHost.addPreference<A>(_:)();
      return GraphHost.addPreference<A>(_:)();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in _UIHostingView.sheetBridge.getter(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(a1 + 1776))() & 1) == 0)
    type metadata accessor for SheetBridge();
  return 0;
}

void @objc SheetBridge.init()()
{
  SheetBridge.init()();
}

void SheetBridge.init()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  swift_unknownObjectWeakInit();
  *(_DWORD *)(v0 + direct field offset for SheetBridge.seed) = 0;
  *(_DWORD *)(v0 + direct field offset for SheetBridge.backgroundSeed) = 0;
  *(_DWORD *)(v0 + direct field offset for SheetBridge.presentationOptionsSeed) = 0;
  *(_DWORD *)(v0 + direct field offset for SheetBridge.interactiveDismissHandlerSeed) = -1;
  v1 = (_QWORD *)(v0 + direct field offset for SheetBridge.interactiveDismissHandler);
  *v1 = 0;
  v1[1] = 0;
  *(_BYTE *)(v0 + direct field offset for SheetBridge.hasWindow) = 0;
  v2 = v0 + direct field offset for SheetBridge.presentationState;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 217) = 0u;
  *(_BYTE *)(v2 + 233) = 10;
  swift_unknownObjectWeakInit();
  EnvironmentValues.init()();
  type metadata accessor for SheetBridge();
}

id sub_186EABA40(objc_class *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, objc_super a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;
  objc_super v19;

  v19.receiver = v17;
  v19.super_class = a1;
  return -[objc_class init](&v19, sel_init);
}

void type metadata accessor for SheetBridge()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for TooltipBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TooltipBridge);
}

uint64_t storeEnumTagSinglePayload for ActionSheet.Presentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

id specialized _UIHostingView.sheetBridge.getter(uint64_t a1, uint64_t (*a2)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()), void (*a3)(uint64_t), void (*a4)(void *))
{
  _QWORD *v4;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t ObjectType;
  uint64_t v13;
  id v14;

  v6 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x198);
  v7 = *(void **)((char *)v4 + v6);
  v8 = v7;
  if (v7 == (void *)1)
  {
    ObjectType = swift_getObjectType();
    v8 = specialized closure #1 in _UIHostingView.sheetBridge.getter(ObjectType, a1, a2);
    v13 = *(_QWORD *)((char *)v4 + v6);
    *(_QWORD *)((char *)v4 + v6) = v8;
    v14 = v8;
    a3(v13);
  }
  a4(v7);
  return v8;
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for UIKitSensoryFeedbackCache(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for AVKitCaptureButtonBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for UIKitStatusBarBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for PencilEventsBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
  }
}

uint64_t static UIItemHostingView.defaultViewGraphOutputs.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = static ViewGraph.Outputs.defaults.getter();
  *a1 = v3 | 2;
  return result;
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for DragAndDropBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for ContextMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for _UIHostingView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for TooltipBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
  }
}

uint64_t type metadata accessor for PPTTestBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PPTTestBridge);
}

uint64_t PPTTestBridge.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v0 + 24) = 0;
  *(_OWORD *)(v0 + 32) = xmmword_187BF9840;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_DWORD *)(v0 + 72) = 0;
  return v0;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  _BYTE v26[40];
  _BYTE v27[24];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v32[40];
  _BYTE v33[40];
  _BYTE v34[48];

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = *(_QWORD *)(result + 56);
  v20 = result;
  v21 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & v4;
  v22 = (unint64_t)(v5 + 63) >> 6;
  v8 = a2 + 56;
  if ((v6 & v4) != 0)
    goto LABEL_7;
LABEL_8:
  v11 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_53;
  }
  if (v11 >= v22)
    return 1;
  v12 = *(_QWORD *)(v21 + 8 * v11);
  v13 = v3 + 1;
  if (v12)
    goto LABEL_23;
  v13 = v11 + 1;
  if (v11 + 1 >= v22)
    return 1;
  v12 = *(_QWORD *)(v21 + 8 * v13);
  if (v12)
    goto LABEL_23;
  v13 = v11 + 2;
  if (v11 + 2 >= v22)
    return 1;
  v12 = *(_QWORD *)(v21 + 8 * v13);
  if (v12)
    goto LABEL_23;
  v13 = v11 + 3;
  if (v11 + 3 >= v22)
    return 1;
  v12 = *(_QWORD *)(v21 + 8 * v13);
  if (v12)
    goto LABEL_23;
  v14 = v11 + 4;
  if (v14 >= v22)
    return 1;
  v12 = *(_QWORD *)(v21 + 8 * v14);
  if (v12)
  {
    v13 = v14;
LABEL_23:
    v7 = (v12 - 1) & v12;
    v23 = v13;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    while (1)
    {
      outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(result + 48) + 40 * v10, (uint64_t)v34);
      outlined init with take of ToolbarPlacement.Role((uint64_t)v34, (uint64_t)v33);
      Hasher.init(_seed:)();
      ToolbarPlacement.Role.hash(into:)();
      v15 = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(a2 + 32);
      v17 = v15 & ~v16;
      if (((*(_QWORD *)(v8 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
        break;
      v18 = ~v16;
      while (2)
      {
        outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(a2 + 48) + 40 * v17, (uint64_t)v32);
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v32, (uint64_t)v27);
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v33, (uint64_t)&v29);
        switch(v28)
        {
          case 0:
            if (*((_QWORD *)&v30 + 1))
              goto LABEL_42;
            goto LABEL_47;
          case 1:
            if (*((_QWORD *)&v30 + 1) == 1)
              goto LABEL_47;
            goto LABEL_42;
          case 2:
            if (*((_QWORD *)&v30 + 1) == 2)
              goto LABEL_47;
            goto LABEL_42;
          case 3:
            if (*((_QWORD *)&v30 + 1) == 3)
              goto LABEL_47;
            goto LABEL_42;
          case 4:
            if (*((_QWORD *)&v30 + 1) == 4)
              goto LABEL_47;
            goto LABEL_42;
          case 5:
            if (*((_QWORD *)&v30 + 1) == 5)
              goto LABEL_47;
            goto LABEL_42;
          case 6:
            if (*((_QWORD *)&v30 + 1) != 6)
              goto LABEL_42;
            goto LABEL_47;
          default:
            outlined init with copy of ToolbarPlacement.Role((uint64_t)v27, (uint64_t)v26);
            if (*((_QWORD *)&v30 + 1) < 7uLL)
            {
              outlined destroy of AnyHashable((uint64_t)v26);
LABEL_42:
              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role));
              goto LABEL_43;
            }
            v24[0] = v29;
            v24[1] = v30;
            v25 = v31;
            v19 = MEMORY[0x18D75E284](v26, v24);
            outlined destroy of AnyHashable((uint64_t)v24);
            outlined destroy of AnyHashable((uint64_t)v26);
            if ((v19 & 1) == 0)
            {
              outlined destroy of ToolbarPlacement.Role((uint64_t)v27);
LABEL_43:
              outlined destroy of ToolbarPlacement.Role((uint64_t)v32);
              v17 = (v17 + 1) & v18;
              if (((*(_QWORD *)(v8 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
                goto LABEL_50;
              continue;
            }
LABEL_47:
            outlined destroy of ToolbarPlacement.Role((uint64_t)v27);
            outlined destroy of ToolbarPlacement.Role((uint64_t)v32);
            outlined destroy of ToolbarPlacement.Role((uint64_t)v33);
            result = v20;
            v3 = v23;
            if (!v7)
              goto LABEL_8;
LABEL_7:
            v9 = __clz(__rbit64(v7));
            v7 &= v7 - 1;
            v23 = v3;
            v10 = v9 | (v3 << 6);
            break;
        }
        break;
      }
    }
LABEL_50:
    outlined destroy of ToolbarPlacement.Role((uint64_t)v33);
    return 0;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v22)
      return 1;
    v12 = *(_QWORD *)(v21 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_23;
  }
LABEL_53:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_24;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 3;
    if (v13 + 3 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v15 = v13 + 4;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_34;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_24;
      }
    }
    v4 = v15;
LABEL_24:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    v16 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v12);
    result = MEMORY[0x18D75ED7C](*(_QWORD *)(a2 + 40), v16, 4);
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(_DWORD *)(v19 + 4 * v18) == v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(_DWORD *)(v19 + 4 * v18) == v16)
      goto LABEL_7;
  }
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_24;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 3;
    if (v13 + 3 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v15 = v13 + 4;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_34;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_24;
      }
    }
    v4 = v15;
LABEL_24:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12);
    result = static Hasher._hash(seed:_:)();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(_QWORD *)(v19 + 8 * v18) == v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(_QWORD *)(v19 + 8 * v18) == v16)
      goto LABEL_7;
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v32 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v33 = (unint64_t)(v4 + 63) >> 6;
  v35 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v34 = v3;
      v8 = v7 | (v3 << 6);
      goto LABEL_25;
    }
    v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v9 >= v33)
      return 1;
    v10 = *(_QWORD *)(v32 + 8 * v9);
    v11 = v3 + 1;
    if (!v10)
    {
      v11 = v3 + 2;
      if (v3 + 2 >= v33)
        return 1;
      v10 = *(_QWORD *)(v32 + 8 * v11);
      if (!v10)
      {
        v11 = v3 + 3;
        if (v3 + 3 >= v33)
          return 1;
        v10 = *(_QWORD *)(v32 + 8 * v11);
        if (!v10)
          break;
      }
    }
LABEL_24:
    v6 = (v10 - 1) & v10;
    v34 = v11;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_25:
    v13 = result;
    v14 = *(void **)(*(_QWORD *)(result + 48) + 8 * v8);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    v15 = v14;
    String.hash(into:)();
    v16 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = v16 & ~v17;
    if (((*(_QWORD *)(v35 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      goto LABEL_40;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;
    if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22)
    {
LABEL_7:
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
        v25 = ~v17;
        while (1)
        {
          v18 = (v18 + 1) & v25;
          if (((*(_QWORD *)(v35 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
            break;
          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v28 = v27;
          if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v28 == v29)
            goto LABEL_7;
          v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v31 & 1) != 0)
            goto LABEL_8;
        }
LABEL_40:

        return 0;
      }
    }
LABEL_8:

    result = v13;
    v3 = v34;
  }
  v12 = v3 + 4;
  if (v3 + 4 >= v33)
    return 1;
  v10 = *(_QWORD *)(v32 + 8 * v12);
  if (v10)
  {
    v11 = v3 + 4;
    goto LABEL_24;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v33)
      return 1;
    v10 = *(_QWORD *)(v32 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_24;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t outlined destroy of Toolbar.UpdateContext(uint64_t a1)
{
  destroy for Toolbar.UpdateContext(a1);
  return a1;
}

uint64_t destroy for Toolbar.UpdateContext(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8) != 2)
    swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of Toolbar.UpdateContext(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Toolbar.UpdateContext(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for Toolbar.UpdateContext(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 8) == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  else
  {
    swift_unknownObjectWeakCopyInit();
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  }
  swift_unknownObjectWeakCopyInit();
  swift_unknownObjectWeakCopyInit();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_unknownObjectWeakCopyInit();
  swift_unknownObjectWeakCopyInit();
  swift_unknownObjectWeakCopyInit();
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined destroy of HostingControllerOverrides(uint64_t a1)
{
  destroy for HostingControllerOverrides(a1);
  return a1;
}

uint64_t destroy for HostingControllerOverrides(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8) != 2)
    swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  return swift_unknownObjectWeakDestroy();
}

uint64_t outlined init with copy of PushTarget?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for PushTarget?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PushTarget?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PushTarget?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PushTarget?);
  }
}

uint64_t type metadata accessor for PrimaryBarViewModel(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PrimaryBarViewModel);
}

uint64_t outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role));
  }
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  result = outlined init with take of ToolbarPlacement.Role(a2, a4[6] + 40 * a1);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of WeakBox<Swift.AnyObject>(a3, a4[7] + 8 * a1, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE77D8]);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for CommandOperation();
  result = outlined init with take of TableCellFormula(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of UpdateViewDestinationRequest(a3, a4[7] + 160 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of NavigationDestinationPresentation(a3, a4[7] + 96 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  _BYTE v16[40];
  _QWORD v17[5];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[48];

  v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  ToolbarPlacement.Role.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_24:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_OWORD *)(a2 + 24) = xmmword_187C304E0;
    return result;
  }
  v9 = ~v7;
  while (2)
  {
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v5 + 48) + 40 * v8, (uint64_t)v21);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v21, (uint64_t)v17);
    outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v18);
    switch(v17[3])
    {
      case 0:
        if (*((_QWORD *)&v19 + 1))
          goto LABEL_19;
        goto LABEL_25;
      case 1:
        if (*((_QWORD *)&v19 + 1) == 1)
          goto LABEL_25;
        goto LABEL_19;
      case 2:
        if (*((_QWORD *)&v19 + 1) == 2)
          goto LABEL_25;
        goto LABEL_19;
      case 3:
        if (*((_QWORD *)&v19 + 1) == 3)
          goto LABEL_25;
        goto LABEL_19;
      case 4:
        if (*((_QWORD *)&v19 + 1) == 4)
          goto LABEL_25;
        goto LABEL_19;
      case 5:
        if (*((_QWORD *)&v19 + 1) == 5)
          goto LABEL_25;
        goto LABEL_19;
      case 6:
        if (*((_QWORD *)&v19 + 1) != 6)
          goto LABEL_19;
        goto LABEL_25;
      default:
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v17, (uint64_t)v16);
        if (*((_QWORD *)&v19 + 1) < 7uLL)
        {
          outlined destroy of AnyHashable((uint64_t)v16);
LABEL_19:
          outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v17);
          goto LABEL_20;
        }
        v14[0] = v18;
        v14[1] = v19;
        v15 = v20;
        v10 = MEMORY[0x18D75E284](v16, v14);
        outlined destroy of AnyHashable((uint64_t)v14);
        outlined destroy of AnyHashable((uint64_t)v16);
        if ((v10 & 1) == 0)
        {
          outlined destroy of ToolbarPlacement.Role((uint64_t)v17);
LABEL_20:
          outlined destroy of ToolbarPlacement.Role((uint64_t)v21);
          v8 = (v8 + 1) & v9;
          if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
            goto LABEL_24;
          continue;
        }
LABEL_25:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v17);
        outlined destroy of ToolbarPlacement.Role((uint64_t)v21);
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v13 = *v2;
        v17[0] = *v2;
        *v2 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeSet.copy()();
          v13 = v17[0];
        }
        outlined init with take of ToolbarPlacement.Role(*(_QWORD *)(v13 + 48) + 40 * v8, a2);
        specialized _NativeSet._delete(at:)(v8);
        *v2 = v17[0];
        return swift_bridgeObjectRelease();
    }
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for IndexPath();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, MEMORY[0x1E0CB1658]);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, v11, MEMORY[0x1E0CB1668]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v30 = v7;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v18 = v16 * v14;
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
        a2 = v28;
        v7 = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v21 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v21;
    v31 = *v21;
    *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v23 = v31;
    }
    v24 = *(_QWORD *)(v23 + 48) + v18;
    v7 = v30;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 32))(v28, v24, v6);
    specialized _NativeSet._delete(at:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1668]);
    *v21 = v31;
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for DateComponents();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, MEMORY[0x1E0CAEAB0]);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, v11, MEMORY[0x1E0CAEAD8]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v30 = v7;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v18 = v16 * v14;
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], MEMORY[0x1E0CAEAE0]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
        a2 = v28;
        v7 = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v21 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v21;
    v31 = *v21;
    *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v23 = v31;
    }
    v24 = *(_QWORD *)(v23 + 48) + v18;
    v7 = v30;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 32))(v28, v24, v6);
    specialized _NativeSet._delete(at:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E0CAEAD8]);
    *v21 = v31;
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  Swift::UInt v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[48];

  v2 = v1;
  v3 = result;
  v4 = *v1;
  v5 = *v1 + 56;
  v6 = -1 << *(_BYTE *)(*v1 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(v5 + 8 * (v7 >> 6))) != 0)
  {
    v8 = ~v6;
    swift_retain();
    v9 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (v9 + 1) & v8;
      do
      {
        outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v4 + 48) + 40 * v7, (uint64_t)v28);
        Hasher.init(_seed:)();
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v28, (uint64_t)&v25);
        switch(*((_QWORD *)&v26 + 1))
        {
          case 0:
            v13 = 0;
            goto LABEL_15;
          case 1:
            v13 = 1;
            goto LABEL_15;
          case 2:
            v13 = 2;
            goto LABEL_15;
          case 3:
            v13 = 3;
            goto LABEL_15;
          case 4:
            v13 = 4;
            goto LABEL_15;
          case 5:
            v13 = 5;
            goto LABEL_15;
          case 6:
            v13 = 7;
LABEL_15:
            Hasher._combine(_:)(v13);
            break;
          default:
            v23[0] = v25;
            v23[1] = v26;
            v24 = v27;
            Hasher._combine(_:)(6uLL);
            AnyHashable.hash(into:)();
            outlined destroy of AnyHashable((uint64_t)v23);
            break;
        }
        v14 = Hasher._finalize()();
        outlined destroy of ToolbarPlacement.Role((uint64_t)v28);
        v15 = v14 & v8;
        if (v3 >= (uint64_t)v10)
        {
          if (v15 < v10)
            goto LABEL_5;
        }
        else if (v15 >= v10)
        {
          goto LABEL_21;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_21:
          v16 = *(_QWORD *)(v4 + 48);
          v17 = v16 + 40 * v3;
          v18 = (__int128 *)(v16 + 40 * v7);
          if (v3 != v7 || (v3 = v7, v17 >= (unint64_t)v18 + 40))
          {
            v11 = *v18;
            v12 = v18[1];
            *(_QWORD *)(v17 + 32) = *((_QWORD *)v18 + 4);
            *(_OWORD *)v17 = v11;
            *(_OWORD *)(v17 + 16) = v12;
            v3 = v7;
          }
        }
LABEL_5:
        v7 = (v7 + 1) & v8;
      }
      while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    *(_QWORD *)(v5 + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v3) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *v2;
  v20 = *(_QWORD *)(*v2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v19 + 16) = v22;
    ++*(_DWORD *)(v19 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _BYTE v22[40];
  Swift::UInt v23;

  v2 = v1;
  v3 = result;
  v4 = *v1;
  v5 = *v1 + 56;
  v6 = -1 << *(_BYTE *)(*v1 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(v5 + 8 * (v7 >> 6))) != 0)
  {
    v8 = ~v6;
    swift_retain();
    v9 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (v9 + 1) & v8;
      do
      {
        outlined init with copy of AccessibilityRelationshipScope.Key(*(_QWORD *)(v4 + 48) + 48 * v7, (uint64_t)v22);
        Hasher.init(_seed:)();
        AnyHashable.hash(into:)();
        Hasher._combine(_:)(v23);
        v13 = Hasher._finalize()();
        outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v22);
        v14 = v13 & v8;
        if (v3 >= (uint64_t)v10)
        {
          if (v14 < v10)
            goto LABEL_5;
        }
        else if (v14 >= v10)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v4 + 48);
          v16 = (__int128 *)(v15 + 48 * v3);
          v17 = (__int128 *)(v15 + 48 * v7);
          if (v3 != v7 || (v3 = v7, v16 >= v17 + 3))
          {
            v11 = *v17;
            v12 = v17[2];
            v16[1] = v17[1];
            v16[2] = v12;
            *v16 = v11;
            v3 = v7;
          }
        }
LABEL_5:
        v7 = (v7 + 1) & v8;
      }
      while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    *(_QWORD *)(v5 + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v3) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *v2;
  v19 = *(_QWORD *)(*v2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
    JUMPOUT(0x187426CC0);
  }
  *(_QWORD *)(v18 + 16) = v21;
  ++*(_DWORD *)(v18 + 36);
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_QWORD *)(v12 + 8 * v2);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt *v10;
  Swift::UInt v11;
  Swift::UInt v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (Swift::UInt *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        Hasher._combine(_:)(v12);
        v13 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 < v9)
            goto LABEL_5;
        }
        else if (v13 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(v3 + 48);
          v15 = (_OWORD *)(v14 + 16 * v2);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v17 = *(_QWORD *)(v3 + 16);
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
    JUMPOUT(0x18742746CLL);
  }
  *(_QWORD *)(v3 + 16) = v19;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

uint64_t type metadata accessor for UIKitContentScrollViewBridge()
{
  return objc_opt_self();
}

void type metadata accessor for Published<ColorScheme?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<ColorScheme?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for ColorScheme?, MEMORY[0x1E0CE0F28], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<ColorScheme?>);
  }
}

uint64_t type metadata accessor for UIKitInspectorBridgeV5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitInspectorBridgeV5);
}

id @objc UIKitInspectorBridgeV5.init()()
{
  return SwiftUIGlue.init()();
}

id SwiftUIGlue.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t UIKitInspectorBridgeV5.addPreferences(to:)()
{
  return specialized UIKitInspectorBridgeV5.addPreferences(to:)();
}

uint64_t UIHostingController.contentScrollViewBridge.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + direct field offset for UIHostingController.contentScrollViewBridge) = a1;
  return swift_release();
}

void UIHostingController.keyboardShortcutBridge.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + direct field offset for UIHostingController.keyboardShortcutBridge);
  *(_QWORD *)(v1 + direct field offset for UIHostingController.keyboardShortcutBridge) = a1;

}

void UIHostingController.barAppearanceBridge.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + direct field offset for UIHostingController.barAppearanceBridge);
  *(_QWORD *)(v1 + direct field offset for UIHostingController.barAppearanceBridge) = a1;

}

void UIHostingController.inspectorBridgeV5.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + direct field offset for UIHostingController.inspectorBridgeV5);
  *(_QWORD *)(v1 + direct field offset for UIHostingController.inspectorBridgeV5) = a1;

}

uint64_t type metadata accessor for BarAppearanceBridge()
{
  return objc_opt_self();
}

id BarAppearanceBridge.init()()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  objc_super v11;
  int v12[4];
  char v13;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = (uint64_t)&v0[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage];
  v12[0] = 33685505;
  swift_unknownObjectWeakInit();
  v13 = 1;
  outlined init with take of BarAppearanceBridge.PlatformStorage((uint64_t)v12, v2);
  v3 = &v0[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_QWORD *)v3 + 10) = 0;
  v4 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars] = MEMORY[0x1E0DEE9E8];
  v5 = v0;
  EnvironmentValues.init()();
  v6 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastBarUpdates;
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v5[v6] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v8 = &v5[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = 1;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = 0;
  v8[56] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barBackgroundViewModels] = MEMORY[0x1E0DEE9E0];
  v9 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations;
  *(_QWORD *)&v5[v9] = specialized Dictionary.init(dictionaryLiteral:)(v7);
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_toUpdateBars] = v4;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_seedTracker] = v7;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates] = 0;

  v11.receiver = v5;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, sel_init);
}

uint64_t BarAppearanceBridge.updateConfigurations(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  unint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  char v33;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[3];
  _OWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _BYTE v65[40];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[3];

  v2 = v1;
  v39 = *a1;
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext);
  swift_beginAccess();
  if (!*v3)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v7 = 7;
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_187C304A0;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_QWORD *)(v6 + 96) = 2;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_QWORD *)(v6 + 136) = 3;
    *(_OWORD *)(v6 + 144) = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
    *(_QWORD *)(v6 + 176) = 4;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_QWORD *)(v6 + 216) = 5;
    *(_OWORD *)(v6 + 224) = 0u;
    *(_OWORD *)(v6 + 240) = 0u;
    *(_QWORD *)(v6 + 256) = 6;
    *(_OWORD *)(v6 + 264) = 0u;
    *(_OWORD *)(v6 + 280) = 0u;
    *(_QWORD *)(v6 + 296) = 1;
    *(_QWORD *)(v6 + 304) = 0;
    goto LABEL_5;
  }
  outlined init with copy of BarAppearanceBridge.UpdateContext((uint64_t)v3, (uint64_t)&v51);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_187C304A0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 96) = 2;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_QWORD *)(v4 + 136) = 3;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_QWORD *)(v4 + 176) = 4;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_QWORD *)(v4 + 216) = 5;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_QWORD *)(v4 + 256) = 6;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_QWORD *)(v4 + 296) = 1;
  *(_QWORD *)(v4 + 304) = 0;
  *(_QWORD *)&v66 = v4;
  v5 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v5);
  v6 = v66;
  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v51);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
LABEL_5:
    v8 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars;
    v43 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
    v36 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_toUpdateBars);
    v9 = v6 + 32;
    v37 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars;
    v38 = v1;
    do
    {
      outlined init with copy of ToolbarPlacement.Role(v9, (uint64_t)v65);
      v10 = *(_QWORD *)(v2 + v8);
      swift_bridgeObjectRetain();
      v11 = specialized Set.contains(_:)((uint64_t)v65, v10);
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
      {
        *(_QWORD *)&v47[0] = v39;
        PreferenceList.configuration(toolbarPlacement:)((uint64_t)v65, (uint64_t)&v51);
        v68 = v53;
        v69[0] = v54[0];
        *(_OWORD *)((char *)v69 + 9) = *(_OWORD *)((char *)v54 + 9);
        v66 = v51;
        v67 = v52;
        v45 = v51;
        v12 = v52;
        v44 = BYTE8(v52);
        v13 = v53;
        v41 = *((_QWORD *)&v51 + 1);
        v42 = BYTE8(v53);
        v40 = *(_QWORD *)&v54[0];
        v14 = BYTE8(v54[0]);
        v15 = BYTE9(v54[0]);
        v16 = BYTE10(v54[0]);
        v17 = *(_QWORD *)&v54[1];
        v18 = BYTE8(v54[1]);
        swift_beginAccess();
        v19 = *v43;
        if (!*(_QWORD *)(*v43 + 16)
          || (v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v65), (v21 & 1) == 0))
        {
          swift_endAccess();
          v51 = xmmword_187BF9840;
          v52 = 0u;
          v53 = 0u;
          memset(v54, 0, 25);
          v55 = v45;
          v56 = v41;
          v57 = v12;
          v58 = v44;
          v59 = v13;
          v60 = v42;
          v61 = v40;
          v62 = v14 | (v15 << 8) | (v16 << 16);
          v63 = v17;
          v64 = v18;
          outlined retain of ToolbarAppearanceConfiguration((uint64_t)&v66);
          outlined release of (ToolbarAppearanceConfiguration?, ToolbarAppearanceConfiguration?)((uint64_t *)&v51);
          v31 = 0;
          v46 = 1;
LABEL_14:
          v8 = v37;
          outlined init with copy of ToolbarPlacement.Role((uint64_t)v65, (uint64_t)&v51);
          swift_beginAccess();
          outlined retain of ToolbarAppearanceConfiguration((uint64_t)&v66);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v50 = *v43;
          *v43 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, (uint64_t)&v51, isUniquelyReferenced_nonNull_native);
          *v43 = v50;
          swift_bridgeObjectRelease();
          outlined destroy of ToolbarPlacement.Role((uint64_t)&v51);
          swift_endAccess();
          outlined init with copy of ToolbarPlacement.Role((uint64_t)v65, (uint64_t)v47);
          swift_beginAccess();
          v33 = swift_isUniquelyReferenced_nonNull_native();
          v49 = *v36;
          *v36 = 0x8000000000000000;
          specialized _NativeSet.update(with:isUnique:)((uint64_t)v47, v33, (uint64_t)&v51);
          *v36 = v49;
          swift_bridgeObjectRelease();
          swift_endAccess();
          outlined consume of ToolbarAppearanceConfiguration?(v31, v46);
          outlined release of ToolbarAppearanceConfiguration((uint64_t)&v66);
          outlined destroy of AccessibilityTableContext?((uint64_t)&v51, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
          outlined destroy of ToolbarPlacement.Role((uint64_t)v65);
          v2 = v38;
          goto LABEL_7;
        }
        v22 = (unsigned __int8 *)(*(_QWORD *)(v19 + 56) + 80 * v20);
        v23 = *v22;
        v24 = *((_QWORD *)v22 + 2);
        v46 = *((_QWORD *)v22 + 1);
        v25 = v22[24];
        v26 = *((_QWORD *)v22 + 4);
        v27 = v22[40];
        v28 = *((_QWORD *)v22 + 6);
        v35 = *((_QWORD *)v22 + 8);
        v29 = v22[72];
        v30 = v22[56] | ((unint64_t)v22[57] << 8) | ((unint64_t)v22[58] << 16);
        swift_endAccess();
        *(_QWORD *)&v51 = v23;
        *((_QWORD *)&v51 + 1) = v46;
        *(_QWORD *)&v52 = v24;
        *((_QWORD *)&v52 + 1) = v25;
        *(_QWORD *)&v53 = v26;
        *((_QWORD *)&v53 + 1) = v27;
        *(_QWORD *)&v54[0] = v28;
        *((_QWORD *)&v54[0] + 1) = v30;
        *(_QWORD *)&v54[1] = v35;
        BYTE8(v54[1]) = v29;
        v47[2] = v68;
        v48[0] = v69[0];
        *(_OWORD *)((char *)v48 + 9) = *(_OWORD *)((char *)v69 + 9);
        v47[0] = v66;
        v47[1] = v67;
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        LOBYTE(v26) = specialized static ToolbarAppearanceConfiguration.== infix(_:_:)((double *)&v51, (double *)v47);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        if ((v26 & 1) == 0)
        {
          v31 = v23;
          goto LABEL_14;
        }
        outlined destroy of ToolbarPlacement.Role((uint64_t)v65);
        swift_release();
        swift_release();
        swift_release();
        outlined release of ToolbarAppearanceConfiguration((uint64_t)&v66);
        v8 = v37;
        v2 = v38;
      }
      else
      {
        outlined destroy of ToolbarPlacement.Role((uint64_t)v65);
      }
LABEL_7:
      v9 += 40;
      --v7;
    }
    while (v7);
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, void (*a2)(_BYTE *), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Swift::Int v5;
  _BYTE v8[72];

  Hasher.init(_seed:)();
  a2(v8);
  v5 = Hasher._finalize()();
  return a3(a1, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _OWORD v9[2];
  uint64_t v10;
  _BYTE v11[40];
  _BYTE v12[24];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[48];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v17);
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v17, (uint64_t)v12);
      outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v14);
      switch(v13)
      {
        case 0:
          if (*((_QWORD *)&v15 + 1))
            goto LABEL_19;
          goto LABEL_25;
        case 1:
          if (*((_QWORD *)&v15 + 1) == 1)
            goto LABEL_25;
          goto LABEL_19;
        case 2:
          if (*((_QWORD *)&v15 + 1) == 2)
            goto LABEL_25;
          goto LABEL_19;
        case 3:
          if (*((_QWORD *)&v15 + 1) == 3)
            goto LABEL_25;
          goto LABEL_19;
        case 4:
          if (*((_QWORD *)&v15 + 1) == 4)
            goto LABEL_25;
          goto LABEL_19;
        case 5:
          if (*((_QWORD *)&v15 + 1) == 5)
            goto LABEL_25;
          goto LABEL_19;
        case 6:
          if (*((_QWORD *)&v15 + 1) != 6)
            goto LABEL_19;
          goto LABEL_25;
        default:
          outlined init with copy of ToolbarPlacement.Role((uint64_t)v12, (uint64_t)v11);
          if (*((_QWORD *)&v15 + 1) >= 7uLL)
          {
            v9[0] = v14;
            v9[1] = v15;
            v10 = v16;
            v7 = MEMORY[0x18D75E284](v11, v9);
            outlined destroy of AnyHashable((uint64_t)v9);
            outlined destroy of AnyHashable((uint64_t)v11);
            if ((v7 & 1) != 0)
            {
LABEL_25:
              outlined destroy of ToolbarPlacement.Role((uint64_t)v12);
              outlined destroy of ToolbarPlacement.Role((uint64_t)v17);
              return v4;
            }
            outlined destroy of ToolbarPlacement.Role((uint64_t)v12);
          }
          else
          {
            outlined destroy of AnyHashable((uint64_t)v11);
LABEL_19:
            outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role));
          }
          outlined destroy of ToolbarPlacement.Role((uint64_t)v17);
          v4 = (v4 + 1) & v6;
          if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
            return v4;
          break;
      }
    }
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
            break;
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v8;
  _OWORD v9[2];
  uint64_t v10;
  _BYTE v11[40];
  _BYTE v12[24];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[48];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      outlined init with copy of Toolbar.BarLocation(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v17);
      outlined init with copy of Toolbar.BarLocation((uint64_t)v17, (uint64_t)v12);
      outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v14);
      switch(v13)
      {
        case 0:
          if (*((_QWORD *)&v15 + 1))
            goto LABEL_35;
          goto LABEL_41;
        case 1:
          if (*((_QWORD *)&v15 + 1) == 1)
            goto LABEL_41;
          goto LABEL_35;
        case 2:
          if (*((_QWORD *)&v15 + 1) == 2)
            goto LABEL_41;
          goto LABEL_35;
        case 3:
          if (*((_QWORD *)&v15 + 1) == 3)
            goto LABEL_41;
          goto LABEL_35;
        case 4:
          if (*((_QWORD *)&v15 + 1) == 4)
            goto LABEL_41;
          goto LABEL_35;
        case 5:
          if (*((_QWORD *)&v15 + 1) == 5)
            goto LABEL_41;
          goto LABEL_35;
        case 6:
          if (*((_QWORD *)&v15 + 1) == 6)
            goto LABEL_41;
          goto LABEL_35;
        case 7:
          if (*((_QWORD *)&v15 + 1) == 7)
            goto LABEL_41;
          goto LABEL_35;
        case 8:
          if (*((_QWORD *)&v15 + 1) == 8)
            goto LABEL_41;
          goto LABEL_35;
        case 9:
          if (*((_QWORD *)&v15 + 1) == 9)
            goto LABEL_41;
          goto LABEL_35;
        case 10:
          if (*((_QWORD *)&v15 + 1) == 10)
            goto LABEL_41;
          goto LABEL_35;
        case 11:
          if (*((_QWORD *)&v15 + 1) == 11)
            goto LABEL_41;
          goto LABEL_35;
        case 12:
          if (*((_QWORD *)&v15 + 1) == 12)
            goto LABEL_41;
          goto LABEL_35;
        case 13:
          if (*((_QWORD *)&v15 + 1) == 13)
            goto LABEL_41;
          goto LABEL_35;
        case 14:
          if (*((_QWORD *)&v15 + 1) != 14)
            goto LABEL_35;
          goto LABEL_41;
        default:
          outlined init with copy of Toolbar.BarLocation((uint64_t)v12, (uint64_t)v11);
          if (*((_QWORD *)&v15 + 1) >= 0xFuLL)
          {
            v9[0] = v14;
            v9[1] = v15;
            v10 = v16;
            v8 = MEMORY[0x18D75E284](v11, v9);
            outlined destroy of AnyHashable((uint64_t)v9);
            outlined destroy of AnyHashable((uint64_t)v11);
            if ((v8 & 1) != 0)
            {
LABEL_41:
              outlined destroy of Toolbar.BarLocation((uint64_t)v12);
              outlined destroy of Toolbar.BarLocation((uint64_t)v17);
              return v4;
            }
            outlined destroy of Toolbar.BarLocation((uint64_t)v12);
          }
          else
          {
            outlined destroy of AnyHashable((uint64_t)v11);
LABEL_35:
            outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
          }
          outlined destroy of Toolbar.BarLocation((uint64_t)v17);
          v4 = (v4 + 1) & v6;
          if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
            return v4;
          break;
      }
    }
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x18D75E284](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v2 + 48) + 16 * v4, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for HashableWeakBox<UIViewController>);
      v7 = v10[1];
      v8 = *(_QWORD *)(a1 + 8);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for HashableWeakBox<UIViewController>);
      if (v7 == v8)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t, __n128);
  char v16;
  _QWORD v18[2];

  v3 = v2;
  v18[1] = a1;
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = *(_QWORD *)(v5 - 8);
  v8.n128_f64[0] = MEMORY[0x1E0C80A78](v5, v7);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = -1 << *(_BYTE *)(v3 + 32);
  v12 = a2 & ~v11;
  if (((*(_QWORD *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v6 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v15(v10, *(_QWORD *)(v3 + 48) + v14 * v12, v5, v8);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
      if ((v16 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _BYTE v19[40];
  _QWORD v20[4];
  char v21;
  _QWORD v22[4];
  char v23;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = ~v4;
    v7 = *(_QWORD *)(v2 + 48);
    outlined init with take of TableColumnCustomizationID.Base(a1, (uint64_t)v19);
    do
    {
      v8 = (uint64_t *)(v7 + 40 * v5);
      v9 = *v8;
      v10 = v8[1];
      if ((v8[4] & 1) != 0)
      {
        v11 = v8[2];
        v12 = v8[3];
        outlined init with take of TableColumnCustomizationID.Base((uint64_t)v19, (uint64_t)v20);
        if ((v21 & 1) != 0)
        {
          v13 = v20[2];
          v14 = v20[3];
          v15 = v9 == v20[0] && v10 == v20[1];
          if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            if (v11 == v13 && v12 == v14)
              return v5;
LABEL_3:
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              return v5;
          }
        }
      }
      else
      {
        outlined init with take of TableColumnCustomizationID.Base((uint64_t)v19, (uint64_t)v22);
        if ((v23 & 1) == 0)
        {
          if (v9 == v22[0] && v10 == v22[1])
            return v5;
          goto LABEL_3;
        }
      }
      v5 = (v5 + 1) & v6;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * result) == a1)
        break;
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = *(_QWORD *)(v2 + 48) + 48 * result;
      if (*(_QWORD *)v7 == *(_QWORD *)a1)
      {
        v8 = *(_QWORD *)(v7 + 8) == *(_QWORD *)(a1 + 8)
          && *(unsigned __int8 *)(v7 + 16) == *(unsigned __int8 *)(a1 + 16);
        v9 = v8 && *(_QWORD *)(v7 + 24) == *(_QWORD *)(a1 + 24);
        if (v9 && *(_QWORD *)(v7 + 32) == *(_QWORD *)(a1 + 32) && *(_BYTE *)(v7 + 40) == (*(_BYTE *)(a1 + 40) & 1))
          break;
      }
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  _QWORD v8[6];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      outlined init with copy of AccessibilityRelationshipScope.Key(*(_QWORD *)(v2 + 48) + 48 * v4, (uint64_t)v8);
      if ((MEMORY[0x18D75E284](v8, a1) & 1) != 0 && v8[5] == *(_QWORD *)(a1 + 40))
        break;
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v8);
      v4 = (v4 + 1) & v6;
      if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        return v4;
    }
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v8);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0
    && (static Selector.== infix(_:_:)() & 1) == 0)
  {
    v6 = ~v4;
    for (i = (i + 1) & v6; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v6)
    {
      if ((static Selector.== infix(_:_:)() & 1) != 0)
        break;
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v13 = *(_QWORD *)(v2 + 48) + 48 * result;
      if (*(_QWORD *)v13 == *(_QWORD *)a1)
      {
        v14 = *(_QWORD *)(v13 + 16);
        v15 = *(unsigned __int8 *)(v13 + 32);
        v16 = *(_QWORD *)(a1 + 16);
        if (v14 == 6)
        {
          if (v16 != 6)
            goto LABEL_13;
        }
        else
        {
          v7 = *(_QWORD *)(v13 + 8);
          v8 = *(_QWORD *)(v13 + 24);
          v9 = (v16 ^ v14);
          if (v16 == 6 || v7 != *(_QWORD *)(a1 + 8) || v9 != 0 || v8 != *(_QWORD *)(a1 + 24))
            goto LABEL_13;
        }
        if (v15 == (*(_BYTE *)(a1 + 32) & 1))
          return result;
      }
LABEL_13:
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = (int *)(*(_QWORD *)(v2 + 48) + 8 * result);
      v9 = *v7;
      v8 = v7[1];
      if (v9 == (_DWORD)a1 && v8 == HIDWORD(a1))
        break;
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;

  v4 = type metadata accessor for CommandGroupPlacementBox(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    type metadata accessor for CommandGroupPlacement(0);
    v12 = *(_QWORD *)(v5 + 72);
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8, type metadata accessor for CommandGroupPlacementBox);
      v13 = static UUID.== infix(_:_:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for CommandGroupPlacementBox);
      if ((v13 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[104];
  uint64_t v28;
  uint64_t v29;
  char v30;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
    return v5;
  v6 = v2;
  v8 = ~v4;
  while (1)
  {
    outlined init with copy of IdentifiedDocumentGroupConfiguration(*(_QWORD *)(v6 + 48) + (v5 << 7), (uint64_t)v27);
    v14 = v28;
    v12 = v29;
    v16 = *(_QWORD *)(a1 + 104);
    v15 = *(_QWORD *)(a1 + 112);
    if ((v30 & 1) == 0)
      break;
    if ((*(_BYTE *)(a1 + 120) & 1) == 0)
    {
      v23 = _typeName(_:qualified:)();
      v25 = v9;
      v10._countAndFlagsBits = 45;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12 = v25;
      swift_bridgeObjectRetain();
      if (v23 == v16)
        goto LABEL_4;
LABEL_5:
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_6:
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v27);
      if ((v13 & 1) != 0)
        return v5;
      goto LABEL_7;
    }
    if (v28 == v16)
    {
      v21 = v29;
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v27);
      if (v21 == v15)
        return v5;
    }
    else
    {
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v27);
    }
LABEL_7:
    v5 = (v5 + 1) & v8;
    if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
      return v5;
  }
  if ((*(_BYTE *)(a1 + 120) & 1) == 0)
  {
    if (v28 == v16 && v29 == v15)
      goto LABEL_24;
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  v24 = _typeName(_:qualified:)();
  v26 = v17;
  v18._countAndFlagsBits = 45;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v15 = v26;
  if (v14 != v24)
    goto LABEL_5;
LABEL_4:
  if (v12 != v15)
    goto LABEL_5;
  swift_bridgeObjectRelease_n();
LABEL_24:
  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v27);
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v10[48];
  _BYTE v11[48];
  _BYTE v12[48];
  _BYTE v13[40];
  unsigned __int8 v14;
  _BYTE v15[48];
  _BYTE v16[40];
  uint64_t v17;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
    return v4;
  v6 = ~v3;
  v7 = a1 + 40;
  while (1)
  {
    outlined init with copy of ToolbarStorage.Entry.ID(*(_QWORD *)(v2 + 48) + 88 * v4, (uint64_t)v16);
    if ((MEMORY[0x18D75E284](v16, a1) & 1) == 0)
      goto LABEL_5;
    outlined init with copy of SwiftUIAnySortComparator?(v7, (uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v17, (uint64_t)v12, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v15, (uint64_t)v13, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    if (v12[40] == 255)
      break;
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v12, (uint64_t)v11, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    if (v14 == 255)
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v11);
      goto LABEL_4;
    }
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v13, (uint64_t)v10);
    v8 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v11, (uint64_t)v10);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v10);
    outlined destroy of AccessibilityTableContext?((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v11);
    outlined destroy of AccessibilityTableContext?((uint64_t)v12, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    if ((v8 & 1) != 0)
      goto LABEL_14;
LABEL_5:
    outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v16);
    v4 = (v4 + 1) & v6;
    if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
      return v4;
  }
  outlined destroy of AccessibilityTableContext?((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  if (v14 != 255)
  {
LABEL_4:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?));
    goto LABEL_5;
  }
  outlined destroy of AccessibilityTableContext?((uint64_t)v12, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
LABEL_14:
  outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v16);
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _OWORD v9[2];
  uint64_t v10;
  _QWORD v11[6];
  _BYTE v12[48];
  _OWORD v13[2];
  uint64_t v14;
  char v15;
  _BYTE v16[56];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of TableRowID(*(_QWORD *)(v2 + 48) + 48 * v4, (uint64_t)v16);
      outlined init with copy of TableRowID((uint64_t)v16, (uint64_t)v12);
      outlined init with copy of TableRowID(a1, (uint64_t)v13);
      if ((v12[40] & 1) != 0)
      {
        outlined init with copy of TableRowID((uint64_t)v12, (uint64_t)v11);
        if ((v15 & 1) != 0)
        {
          v9[0] = v13[0];
          v9[1] = v13[1];
          v10 = v14;
          v7 = MEMORY[0x18D75E284](v11, v9);
          outlined destroy of AnyHashable((uint64_t)v9);
          outlined destroy of AnyHashable((uint64_t)v11);
          if ((v7 & 1) != 0)
            goto LABEL_14;
LABEL_12:
          outlined destroy of TableRowID((uint64_t)v12);
          goto LABEL_5;
        }
        outlined destroy of AnyHashable((uint64_t)v11);
      }
      else
      {
        outlined init with copy of TableRowID((uint64_t)v12, (uint64_t)v11);
        if ((v15 & 1) == 0)
        {
          if (v11[0] == *(_QWORD *)&v13[0])
          {
LABEL_14:
            outlined destroy of TableRowID((uint64_t)v12);
            outlined destroy of TableRowID((uint64_t)v16);
            return v4;
          }
          goto LABEL_12;
        }
      }
      outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for (TableRowID, TableRowID));
LABEL_5:
      outlined destroy of TableRowID((uint64_t)v16);
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      result = (result + 1) & v8;
      if (((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0
        && *(_QWORD *)(v7 + 8 * result) != a1)
      {
        for (result = (result + 1) & v8;
              ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
              result = (result + 1) & v8)
        {
          if (*(_QWORD *)(v7 + 8 * result) == a1)
            break;
        }
      }
    }
  }
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  _OWORD v10[2];
  uint64_t v11;
  _BYTE v12[40];
  _BYTE v13[24];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[48];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)();
  ToolbarPlacement.Role.hash(into:)();
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v7 = ~v5;
  while (2)
  {
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v18);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v18, (uint64_t)v13);
    outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v15);
    switch(v14)
    {
      case 0:
        if (*((_QWORD *)&v16 + 1))
          goto LABEL_20;
        goto LABEL_26;
      case 1:
        if (*((_QWORD *)&v16 + 1) == 1)
          goto LABEL_26;
        goto LABEL_20;
      case 2:
        if (*((_QWORD *)&v16 + 1) == 2)
          goto LABEL_26;
        goto LABEL_20;
      case 3:
        if (*((_QWORD *)&v16 + 1) == 3)
          goto LABEL_26;
        goto LABEL_20;
      case 4:
        if (*((_QWORD *)&v16 + 1) == 4)
          goto LABEL_26;
        goto LABEL_20;
      case 5:
        if (*((_QWORD *)&v16 + 1) == 5)
          goto LABEL_26;
        goto LABEL_20;
      case 6:
        if (*((_QWORD *)&v16 + 1) != 6)
          goto LABEL_20;
        goto LABEL_26;
      default:
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v13, (uint64_t)v12);
        if (*((_QWORD *)&v16 + 1) < 7uLL)
        {
          outlined destroy of AnyHashable((uint64_t)v12);
LABEL_20:
          outlined destroy of TableRowList?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role), (uint64_t)&type metadata for ToolbarPlacement.Role, (uint64_t)&type metadata for ToolbarPlacement.Role, (uint64_t (*)(_QWORD))type metadata accessor for (Badge, Spacer));
          goto LABEL_21;
        }
        v10[0] = v15;
        v10[1] = v16;
        v11 = v17;
        v8 = MEMORY[0x18D75E284](v12, v10);
        outlined destroy of AnyHashable((uint64_t)v10);
        outlined destroy of AnyHashable((uint64_t)v12);
        if ((v8 & 1) == 0)
        {
          outlined destroy of ToolbarPlacement.Role((uint64_t)v13);
LABEL_21:
          outlined destroy of ToolbarPlacement.Role((uint64_t)v18);
          v6 = (v6 + 1) & v7;
          if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
            return 0;
          continue;
        }
LABEL_26:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v13);
        outlined destroy of ToolbarPlacement.Role((uint64_t)v18);
        return 1;
    }
  }
}

{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v9;
  _OWORD v10[2];
  uint64_t v11;
  _BYTE v12[40];
  _BYTE v13[24];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[48];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)();
  Toolbar.BarLocation.hash(into:)();
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v7 = ~v5;
  while (2)
  {
    outlined init with copy of Toolbar.BarLocation(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v18);
    outlined init with copy of Toolbar.BarLocation((uint64_t)v18, (uint64_t)v13);
    outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v15);
    switch(v14)
    {
      case 0:
        if (*((_QWORD *)&v16 + 1))
          goto LABEL_36;
        goto LABEL_42;
      case 1:
        if (*((_QWORD *)&v16 + 1) == 1)
          goto LABEL_42;
        goto LABEL_36;
      case 2:
        if (*((_QWORD *)&v16 + 1) == 2)
          goto LABEL_42;
        goto LABEL_36;
      case 3:
        if (*((_QWORD *)&v16 + 1) == 3)
          goto LABEL_42;
        goto LABEL_36;
      case 4:
        if (*((_QWORD *)&v16 + 1) == 4)
          goto LABEL_42;
        goto LABEL_36;
      case 5:
        if (*((_QWORD *)&v16 + 1) == 5)
          goto LABEL_42;
        goto LABEL_36;
      case 6:
        if (*((_QWORD *)&v16 + 1) == 6)
          goto LABEL_42;
        goto LABEL_36;
      case 7:
        if (*((_QWORD *)&v16 + 1) == 7)
          goto LABEL_42;
        goto LABEL_36;
      case 8:
        if (*((_QWORD *)&v16 + 1) == 8)
          goto LABEL_42;
        goto LABEL_36;
      case 9:
        if (*((_QWORD *)&v16 + 1) == 9)
          goto LABEL_42;
        goto LABEL_36;
      case 10:
        if (*((_QWORD *)&v16 + 1) == 10)
          goto LABEL_42;
        goto LABEL_36;
      case 11:
        if (*((_QWORD *)&v16 + 1) == 11)
          goto LABEL_42;
        goto LABEL_36;
      case 12:
        if (*((_QWORD *)&v16 + 1) == 12)
          goto LABEL_42;
        goto LABEL_36;
      case 13:
        if (*((_QWORD *)&v16 + 1) == 13)
          goto LABEL_42;
        goto LABEL_36;
      case 14:
        if (*((_QWORD *)&v16 + 1) != 14)
          goto LABEL_36;
        goto LABEL_42;
      default:
        outlined init with copy of Toolbar.BarLocation((uint64_t)v13, (uint64_t)v12);
        if (*((_QWORD *)&v16 + 1) < 0xFuLL)
        {
          outlined destroy of AnyHashable((uint64_t)v12);
LABEL_36:
          outlined destroy of TableRowList?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation), (uint64_t)&type metadata for Toolbar.BarLocation, (uint64_t)&type metadata for Toolbar.BarLocation, (uint64_t (*)(_QWORD))type metadata accessor for (Badge, Spacer));
          goto LABEL_37;
        }
        v10[0] = v15;
        v10[1] = v16;
        v11 = v17;
        v9 = MEMORY[0x18D75E284](v12, v10);
        outlined destroy of AnyHashable((uint64_t)v10);
        outlined destroy of AnyHashable((uint64_t)v12);
        if ((v9 & 1) == 0)
        {
          outlined destroy of Toolbar.BarLocation((uint64_t)v13);
LABEL_37:
          outlined destroy of Toolbar.BarLocation((uint64_t)v18);
          v6 = (v6 + 1) & v7;
          if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
            return 0;
          continue;
        }
LABEL_42:
        outlined destroy of Toolbar.BarLocation((uint64_t)v13);
        outlined destroy of Toolbar.BarLocation((uint64_t)v18);
        return 1;
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;

  v3 = type metadata accessor for CommandGroupPlacementBox(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (Hasher.init(_seed:)(),
        type metadata accessor for CommandGroupPlacement(0),
        UUID.hash(into:)(),
        v8 = Hasher._finalize()(),
        v9 = -1 << *(_BYTE *)(a2 + 32),
        v10 = v8 & ~v9,
        ((*(_QWORD *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0))
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v4 + 72);
    do
    {
      outlined init with copy of CommandGroupPlacementBox(*(_QWORD *)(a2 + 48) + v12 * v10, (uint64_t)v7);
      v13 = static UUID.== infix(_:_:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for CommandGroupPlacementBox);
      if ((v13 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  char v13;
  uint64_t v15;
  uint64_t v16;

  v3 = type metadata accessor for UTType();
  v16 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0358]), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), v8 = -1 << *(_BYTE *)(a2 + 32), v9 = v7 & ~v8, ((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    v10 = ~v8;
    v11 = *(_QWORD *)(v16 + 72);
    v12 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    do
    {
      v12(v6, *(_QWORD *)(a2 + 48) + v11 * v9, v3);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0360]);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v3);
      if ((v13 & 1) != 0)
        break;
      v9 = (v9 + 1) & v10;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  char v13;
  uint64_t v15;
  uint64_t v16;

  v3 = type metadata accessor for IndexPath();
  v16 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1668]), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), v8 = -1 << *(_BYTE *)(a2 + 32), v9 = v7 & ~v8, ((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    v10 = ~v8;
    v11 = *(_QWORD *)(v16 + 72);
    v12 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    do
    {
      v12(v6, *(_QWORD *)(a2 + 48) + v11 * v9, v3);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v3);
      if ((v13 & 1) != 0)
        break;
      v9 = (v9 + 1) & v10;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v10[40];

  if (*(_QWORD *)(a2 + 16)
    && (v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40)),
        v5 = -1 << *(_BYTE *)(a2 + 32),
        v6 = v4 & ~v5,
        ((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0))
  {
    v7 = ~v5;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v10);
      v8 = MEMORY[0x18D75E284](v10, a1);
      outlined destroy of AnyHashable((uint64_t)v10);
      if ((v8 & 1) != 0)
        break;
      v6 = (v6 + 1) & v7;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t outlined destroy of ToolbarPlacement.Role(uint64_t a1)
{
  destroy for _PresentationTransitionOutputs.Content(a1);
  return a1;
}

uint64_t destroy for _PresentationTransitionOutputs.Content(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

void ToolbarPlacement.Role.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  _OWORD v2[2];
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  outlined init with copy of ToolbarPlacement.Role(v0, (uint64_t)&v4);
  switch(*((_QWORD *)&v5 + 1))
  {
    case 0:
      v1 = 0;
      goto LABEL_10;
    case 1:
      v1 = 1;
      goto LABEL_10;
    case 2:
      v1 = 2;
      goto LABEL_10;
    case 3:
      v1 = 3;
      goto LABEL_10;
    case 4:
      v1 = 4;
      goto LABEL_10;
    case 5:
      v1 = 5;
      goto LABEL_10;
    case 6:
      v1 = 7;
LABEL_10:
      Hasher._combine(_:)(v1);
      break;
    default:
      v2[0] = v4;
      v2[1] = v5;
      v3 = v6;
      Hasher._combine(_:)(6uLL);
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)v2);
      break;
  }
}

uint64_t outlined init with copy of ToolbarPlacement.Role(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _PresentationTransitionOutputs.Content(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for _PresentationTransitionOutputs.Content(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  type metadata accessor for (Toolbar.BarLocation, Toolbar.BarLocation)(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (Badge, Spacer)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(_BYTE *))ToolbarPlacement.Role.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(_BYTE *))Toolbar.BarLocation.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

uint64_t outlined consume of ToolbarAppearanceConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void type metadata accessor for (Toolbar.BarLocation, Toolbar.BarLocation)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t specialized _NativeSet.update(with:isUnique:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _BYTE v37[40];
  _BYTE v38[24];
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _BYTE v43[48];

  v6 = *v3;
  Hasher.init(_seed:)();
  ToolbarPlacement.Role.hash(into:)();
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
    v12 = 0;
    goto LABEL_27;
  }
  v30 = a3;
  v10 = ~v8;
  while (2)
  {
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v6 + 48) + 40 * v9, (uint64_t)v43);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v43, (uint64_t)v38);
    outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v40);
    switch(v39)
    {
      case 0:
        if (*((_QWORD *)&v41 + 1))
          goto LABEL_19;
        goto LABEL_25;
      case 1:
        if (*((_QWORD *)&v41 + 1) == 1)
          goto LABEL_25;
        goto LABEL_19;
      case 2:
        if (*((_QWORD *)&v41 + 1) == 2)
          goto LABEL_25;
        goto LABEL_19;
      case 3:
        if (*((_QWORD *)&v41 + 1) == 3)
          goto LABEL_25;
        goto LABEL_19;
      case 4:
        if (*((_QWORD *)&v41 + 1) == 4)
          goto LABEL_25;
        goto LABEL_19;
      case 5:
        if (*((_QWORD *)&v41 + 1) == 5)
          goto LABEL_25;
        goto LABEL_19;
      case 6:
        if (*((_QWORD *)&v41 + 1) != 6)
          goto LABEL_19;
        goto LABEL_25;
      default:
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v38, (uint64_t)v37);
        if (*((_QWORD *)&v41 + 1) < 7uLL)
        {
          outlined destroy of AnyHashable((uint64_t)v37);
LABEL_19:
          outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v38, (unint64_t *)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role));
          goto LABEL_20;
        }
        v34 = v40;
        v35 = v41;
        v36 = v42;
        v11 = MEMORY[0x18D75E284](v37, &v34);
        outlined destroy of AnyHashable((uint64_t)&v34);
        outlined destroy of AnyHashable((uint64_t)v37);
        if ((v11 & 1) == 0)
        {
          outlined destroy of ToolbarPlacement.Role((uint64_t)v38);
LABEL_20:
          outlined destroy of ToolbarPlacement.Role((uint64_t)v43);
          v9 = (v9 + 1) & v10;
          if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          {
            v12 = 0;
            goto LABEL_26;
          }
          continue;
        }
LABEL_25:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v38);
        outlined destroy of ToolbarPlacement.Role((uint64_t)v43);
        v12 = 1;
LABEL_26:
        a3 = v30;
LABEL_27:
        v13 = *(_QWORD *)(*v3 + 16);
        v14 = v12 ^ 1u;
        v15 = v13 + v14;
        if (__OFADD__(v13, v14))
        {
          __break(1u);
          goto LABEL_69;
        }
        v16 = *(_QWORD *)(*v3 + 24);
        if (v16 >= v15 && (a2 & 1) != 0)
        {
          if ((v12 & 1) != 0)
            goto LABEL_67;
          goto LABEL_31;
        }
        if ((a2 & 1) != 0)
        {
          specialized _NativeSet.resize(capacity:)();
          goto LABEL_38;
        }
        if (v16 >= v15)
        {
          specialized _NativeSet.copy()();
          if ((v12 & 1) != 0)
          {
LABEL_67:
            v29 = *v3;
            outlined init with take of ToolbarPlacement.Role(*(_QWORD *)(*v3 + 48) + 40 * v9, a3);
            return outlined init with take of ToolbarPlacement.Role(a1, *(_QWORD *)(v29 + 48) + 40 * v9);
          }
LABEL_31:
          v17 = v9 >> 6;
          v18 = 1 << v9;
LABEL_64:
          v24 = *v3;
          *(_QWORD *)(*v3 + 8 * v17 + 56) |= v18;
          result = outlined init with take of ToolbarPlacement.Role(a1, *(_QWORD *)(v24 + 48) + 40 * v9);
          v26 = *(_QWORD *)(v24 + 16);
          v27 = __OFADD__(v26, 1);
          v28 = v26 + 1;
          if (!v27)
          {
            *(_QWORD *)(v24 + 16) = v28;
            *(_QWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_QWORD *)(a3 + 16) = 0;
            *(_OWORD *)(a3 + 24) = xmmword_187C304E0;
            return result;
          }
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
        specialized _NativeSet.copyAndResize(capacity:)();
LABEL_38:
        v19 = *v3;
        Hasher.init(_seed:)();
        ToolbarPlacement.Role.hash(into:)();
        v20 = Hasher._finalize()();
        v21 = -1 << *(_BYTE *)(v19 + 32);
        v9 = v20 & ~v21;
        v17 = v9 >> 6;
        v18 = 1 << v9;
        if (((1 << v9) & *(_QWORD *)(v19 + 56 + 8 * (v9 >> 6))) == 0)
        {
          if ((v12 & 1) != 0)
            goto LABEL_70;
          goto LABEL_64;
        }
        v33 = v12;
        v31 = a3;
        v22 = ~v21;
        while (2)
        {
          outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v19 + 48) + 40 * v9, (uint64_t)v43);
          outlined init with copy of ToolbarPlacement.Role((uint64_t)v43, (uint64_t)v38);
          outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v40);
          switch(v39)
          {
            case 0:
              if (*((_QWORD *)&v41 + 1))
                goto LABEL_56;
              goto LABEL_66;
            case 1:
              if (*((_QWORD *)&v41 + 1) == 1)
                goto LABEL_66;
              goto LABEL_56;
            case 2:
              if (*((_QWORD *)&v41 + 1) == 2)
                goto LABEL_66;
              goto LABEL_56;
            case 3:
              if (*((_QWORD *)&v41 + 1) == 3)
                goto LABEL_66;
              goto LABEL_56;
            case 4:
              if (*((_QWORD *)&v41 + 1) == 4)
                goto LABEL_66;
              goto LABEL_56;
            case 5:
              if (*((_QWORD *)&v41 + 1) == 5)
                goto LABEL_66;
              goto LABEL_56;
            case 6:
              if (*((_QWORD *)&v41 + 1) != 6)
                goto LABEL_56;
              goto LABEL_66;
            default:
              outlined init with copy of ToolbarPlacement.Role((uint64_t)v38, (uint64_t)v37);
              if (*((_QWORD *)&v41 + 1) < 7uLL)
              {
                outlined destroy of AnyHashable((uint64_t)v37);
LABEL_56:
                outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v38, (unint64_t *)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role));
LABEL_57:
                outlined destroy of ToolbarPlacement.Role((uint64_t)v43);
                v9 = (v9 + 1) & v22;
                v17 = v9 >> 6;
                v18 = 1 << v9;
                if ((*(_QWORD *)(v19 + 56 + 8 * (v9 >> 6)) & (1 << v9)) == 0)
                {
                  a3 = v31;
                  if ((v33 & 1) != 0)
                    goto LABEL_70;
                  goto LABEL_64;
                }
                continue;
              }
              v34 = v40;
              v35 = v41;
              v36 = v42;
              v23 = MEMORY[0x18D75E284](v37, &v34);
              outlined destroy of AnyHashable((uint64_t)&v34);
              outlined destroy of AnyHashable((uint64_t)v37);
              if ((v23 & 1) == 0)
              {
                outlined destroy of ToolbarPlacement.Role((uint64_t)v38);
                goto LABEL_57;
              }
LABEL_66:
              outlined destroy of ToolbarPlacement.Role((uint64_t)v38);
              outlined destroy of ToolbarPlacement.Role((uint64_t)v43);
              a3 = v31;
              if ((v33 & 1) != 0)
                goto LABEL_67;
LABEL_70:
              result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
          }
        }
    }
  }
}

{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _BYTE v36[40];
  _BYTE v37[24];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _BYTE v42[48];

  v7 = *v3;
  Hasher.init(_seed:)();
  Toolbar.BarLocation.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
    v12 = 0;
    goto LABEL_43;
  }
  v32 = a3;
  v11 = ~v9;
  while (2)
  {
    outlined init with copy of Toolbar.BarLocation(*(_QWORD *)(v7 + 48) + 40 * v10, (uint64_t)v42);
    outlined init with copy of Toolbar.BarLocation((uint64_t)v42, (uint64_t)v37);
    outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v39);
    switch(v38)
    {
      case 0:
        if (*((_QWORD *)&v40 + 1))
          goto LABEL_35;
        goto LABEL_41;
      case 1:
        if (*((_QWORD *)&v40 + 1) == 1)
          goto LABEL_41;
        goto LABEL_35;
      case 2:
        if (*((_QWORD *)&v40 + 1) == 2)
          goto LABEL_41;
        goto LABEL_35;
      case 3:
        if (*((_QWORD *)&v40 + 1) == 3)
          goto LABEL_41;
        goto LABEL_35;
      case 4:
        if (*((_QWORD *)&v40 + 1) == 4)
          goto LABEL_41;
        goto LABEL_35;
      case 5:
        if (*((_QWORD *)&v40 + 1) == 5)
          goto LABEL_41;
        goto LABEL_35;
      case 6:
        if (*((_QWORD *)&v40 + 1) == 6)
          goto LABEL_41;
        goto LABEL_35;
      case 7:
        if (*((_QWORD *)&v40 + 1) == 7)
          goto LABEL_41;
        goto LABEL_35;
      case 8:
        if (*((_QWORD *)&v40 + 1) != 8)
          goto LABEL_35;
        goto LABEL_41;
      case 9:
        if (*((_QWORD *)&v40 + 1) == 9)
          goto LABEL_41;
        goto LABEL_35;
      case 10:
        if (*((_QWORD *)&v40 + 1) == 10)
          goto LABEL_41;
        goto LABEL_35;
      case 11:
        if (*((_QWORD *)&v40 + 1) == 11)
          goto LABEL_41;
        goto LABEL_35;
      case 12:
        if (*((_QWORD *)&v40 + 1) == 12)
          goto LABEL_41;
        goto LABEL_35;
      case 13:
        if (*((_QWORD *)&v40 + 1) == 13)
          goto LABEL_41;
        goto LABEL_35;
      case 14:
        if (*((_QWORD *)&v40 + 1) == 14)
          goto LABEL_41;
        goto LABEL_35;
      default:
        outlined init with copy of Toolbar.BarLocation((uint64_t)v37, (uint64_t)v36);
        if (*((_QWORD *)&v40 + 1) < 0xFuLL)
        {
          outlined destroy of AnyHashable((uint64_t)v36);
LABEL_35:
          outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
          goto LABEL_36;
        }
        v33 = v39;
        v34 = v40;
        v35 = v41;
        v29 = MEMORY[0x18D75E284](v36, &v33);
        outlined destroy of AnyHashable((uint64_t)&v33);
        outlined destroy of AnyHashable((uint64_t)v36);
        if ((v29 & 1) == 0)
        {
          outlined destroy of Toolbar.BarLocation((uint64_t)v37);
LABEL_36:
          outlined destroy of Toolbar.BarLocation((uint64_t)v42);
          v10 = (v10 + 1) & v11;
          if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
          {
            v12 = 0;
            goto LABEL_42;
          }
          continue;
        }
LABEL_41:
        outlined destroy of Toolbar.BarLocation((uint64_t)v37);
        outlined destroy of Toolbar.BarLocation((uint64_t)v42);
        v12 = 1;
LABEL_42:
        a3 = v32;
LABEL_43:
        v13 = *(_QWORD *)(*v3 + 16);
        v14 = v12 ^ 1u;
        v15 = v13 + v14;
        if (__OFADD__(v13, v14))
        {
          __break(1u);
          goto LABEL_101;
        }
        v16 = *(_QWORD *)(*v3 + 24);
        if (v16 >= v15 && (a2 & 1) != 0)
        {
          if ((v12 & 1) != 0)
            goto LABEL_99;
          goto LABEL_47;
        }
        if ((a2 & 1) != 0)
        {
          specialized _NativeSet.resize(capacity:)();
          goto LABEL_54;
        }
        if (v16 >= v15)
        {
          specialized _NativeSet.copy()();
          if ((v12 & 1) != 0)
          {
LABEL_99:
            v28 = *v3;
            outlined init with take of Toolbar.BarLocation(*(_QWORD *)(*v3 + 48) + 40 * v10, a3);
            return outlined init with take of Toolbar.BarLocation(a1, *(_QWORD *)(v28 + 48) + 40 * v10);
          }
LABEL_47:
          v17 = v10 >> 6;
          v18 = 1 << v10;
LABEL_96:
          v23 = *v3;
          *(_QWORD *)(*v3 + 8 * v17 + 56) |= v18;
          result = outlined init with take of Toolbar.BarLocation(a1, *(_QWORD *)(v23 + 48) + 40 * v10);
          v25 = *(_QWORD *)(v23 + 16);
          v26 = __OFADD__(v25, 1);
          v27 = v25 + 1;
          if (!v26)
          {
            *(_QWORD *)(v23 + 16) = v27;
            *(_QWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_QWORD *)(a3 + 16) = 0;
            *(_OWORD *)(a3 + 24) = xmmword_187C390B0;
            return result;
          }
LABEL_101:
          __break(1u);
          goto LABEL_102;
        }
        specialized _NativeSet.copyAndResize(capacity:)();
LABEL_54:
        v19 = *v3;
        Hasher.init(_seed:)();
        Toolbar.BarLocation.hash(into:)();
        v20 = Hasher._finalize()();
        v21 = -1 << *(_BYTE *)(v19 + 32);
        v10 = v20 & ~v21;
        v17 = v10 >> 6;
        v18 = 1 << v10;
        if (((1 << v10) & *(_QWORD *)(v19 + 56 + 8 * (v10 >> 6))) == 0)
        {
          if ((v12 & 1) != 0)
            goto LABEL_102;
          goto LABEL_96;
        }
        v31 = v12;
        v22 = ~v21;
        while (2)
        {
          outlined init with copy of Toolbar.BarLocation(*(_QWORD *)(v19 + 48) + 40 * v10, (uint64_t)v42);
          outlined init with copy of Toolbar.BarLocation((uint64_t)v42, (uint64_t)v37);
          outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v39);
          switch(v38)
          {
            case 0:
              if (*((_QWORD *)&v40 + 1))
                goto LABEL_88;
              goto LABEL_98;
            case 1:
              if (*((_QWORD *)&v40 + 1) == 1)
                goto LABEL_98;
              goto LABEL_88;
            case 2:
              if (*((_QWORD *)&v40 + 1) == 2)
                goto LABEL_98;
              goto LABEL_88;
            case 3:
              if (*((_QWORD *)&v40 + 1) == 3)
                goto LABEL_98;
              goto LABEL_88;
            case 4:
              if (*((_QWORD *)&v40 + 1) == 4)
                goto LABEL_98;
              goto LABEL_88;
            case 5:
              if (*((_QWORD *)&v40 + 1) == 5)
                goto LABEL_98;
              goto LABEL_88;
            case 6:
              if (*((_QWORD *)&v40 + 1) == 6)
                goto LABEL_98;
              goto LABEL_88;
            case 7:
              if (*((_QWORD *)&v40 + 1) == 7)
                goto LABEL_98;
              goto LABEL_88;
            case 8:
              if (*((_QWORD *)&v40 + 1) == 8)
                goto LABEL_98;
              goto LABEL_88;
            case 9:
              if (*((_QWORD *)&v40 + 1) == 9)
                goto LABEL_98;
              goto LABEL_88;
            case 10:
              if (*((_QWORD *)&v40 + 1) != 10)
                goto LABEL_88;
              goto LABEL_98;
            case 11:
              if (*((_QWORD *)&v40 + 1) == 11)
                goto LABEL_98;
              goto LABEL_88;
            case 12:
              if (*((_QWORD *)&v40 + 1) == 12)
                goto LABEL_98;
              goto LABEL_88;
            case 13:
              if (*((_QWORD *)&v40 + 1) == 13)
                goto LABEL_98;
              goto LABEL_88;
            case 14:
              if (*((_QWORD *)&v40 + 1) == 14)
                goto LABEL_98;
              goto LABEL_88;
            default:
              outlined init with copy of Toolbar.BarLocation((uint64_t)v37, (uint64_t)v36);
              if (*((_QWORD *)&v40 + 1) < 0xFuLL)
              {
                outlined destroy of AnyHashable((uint64_t)v36);
LABEL_88:
                outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
LABEL_89:
                outlined destroy of Toolbar.BarLocation((uint64_t)v42);
                v10 = (v10 + 1) & v22;
                v17 = v10 >> 6;
                v18 = 1 << v10;
                if ((*(_QWORD *)(v19 + 56 + 8 * (v10 >> 6)) & (1 << v10)) == 0)
                {
                  if ((v31 & 1) != 0)
                    goto LABEL_102;
                  goto LABEL_96;
                }
                continue;
              }
              v33 = v39;
              v34 = v40;
              v35 = v41;
              v30 = MEMORY[0x18D75E284](v36, &v33);
              outlined destroy of AnyHashable((uint64_t)&v33);
              outlined destroy of AnyHashable((uint64_t)v36);
              if ((v30 & 1) == 0)
              {
                outlined destroy of Toolbar.BarLocation((uint64_t)v37);
                goto LABEL_89;
              }
LABEL_98:
              outlined destroy of Toolbar.BarLocation((uint64_t)v37);
              outlined destroy of Toolbar.BarLocation((uint64_t)v42);
              if ((v31 & 1) != 0)
                goto LABEL_99;
LABEL_102:
              result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
          }
        }
    }
  }
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[72];

  v4 = v3;
  v8 = *v3;
  Hasher.init(_seed:)();
  ToolbarItemPlacement.Role.hash(into:)();
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    do
    {
      outlined init with copy of ToolbarItemPlacement.Role(*(_QWORD *)(v8 + 48) + 48 * v11, (uint64_t)v33);
      v13 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v33, a1);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v33);
      if ((v13 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_QWORD *)(*v3 + 16);
  v15 = (v13 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(*v3 + 24);
  v32 = a3;
  if (v17 < v16 || (a2 & 1) == 0)
  {
    if ((a2 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v17 >= v16)
      {
        specialized _NativeSet.copy()();
        if ((v13 & 1) != 0)
          goto LABEL_11;
        goto LABEL_16;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v21 = *v3;
    Hasher.init(_seed:)();
    ToolbarItemPlacement.Role.hash(into:)();
    v22 = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v21 + 32);
    v11 = v22 & ~v23;
    v19 = v11 >> 6;
    v20 = 1 << v11;
    if (((1 << v11) & *(_QWORD *)(v21 + 56 + 8 * (v11 >> 6))) != 0)
    {
      v24 = ~v23;
      while (1)
      {
        v18 = 48 * v11;
        outlined init with copy of ToolbarItemPlacement.Role(*(_QWORD *)(v21 + 48) + 48 * v11, (uint64_t)v33);
        v25 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v33, a1);
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)v33);
        if ((v25 & 1) != 0)
          break;
        v11 = (v11 + 1) & v24;
        v19 = v11 >> 6;
        v20 = 1 << v11;
        if ((*(_QWORD *)(v21 + 56 + 8 * (v11 >> 6)) & (1 << v11)) == 0)
          goto LABEL_22;
      }
      if ((v13 & 1) != 0)
        goto LABEL_26;
    }
    else
    {
LABEL_22:
      if ((v13 & 1) == 0)
      {
LABEL_23:
        v26 = *v4;
        *(_QWORD *)(*v4 + 8 * v19 + 56) |= v20;
        result = outlined init with take of ToolbarItemPlacement.Role(a1, *(_QWORD *)(v26 + 48) + 48 * v11);
        v28 = *(_QWORD *)(v26 + 16);
        v29 = __OFADD__(v28, 1);
        v30 = v28 + 1;
        if (!v29)
        {
          *(_QWORD *)(v26 + 16) = v30;
          *(_QWORD *)(v32 + 32) = 0;
          *(_OWORD *)v32 = 0u;
          *(_OWORD *)(v32 + 16) = 0u;
          *(_BYTE *)(v32 + 40) = -1;
          return result;
        }
        goto LABEL_29;
      }
    }
LABEL_30:
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  if ((v13 & 1) == 0)
  {
LABEL_16:
    v19 = v11 >> 6;
    v20 = 1 << v11;
    goto LABEL_23;
  }
LABEL_11:
  v18 = 48 * v11;
LABEL_26:
  v31 = *v4;
  outlined init with take of ToolbarItemPlacement.Role(*(_QWORD *)(*v4 + 48) + v18, v32);
  return outlined init with take of ToolbarItemPlacement.Role(a1, *(_QWORD *)(v31 + 48) + v18);
}

uint64_t outlined destroy of ToolbarPlacement.Role?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ToolbarPlacement.Role?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role;
  if (!lazy protocol witness table cache variable for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarPlacement.Role, &type metadata for ToolbarPlacement.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role;
  if (!lazy protocol witness table cache variable for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarPlacement.Role, &type metadata for ToolbarPlacement.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  }
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  char **v1;
  int64_t v2;
  char **v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  char *v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t (*v26)(char *);
  uint64_t v27;
  char *v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t (*v36)(char *);
  uint64_t v37;
  _BYTE v38[40];
  unsigned __int8 v39;
  _BYTE v40[40];
  unsigned __int8 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char *v47;

  v3 = v1;
  v4 = a1;
  v5 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 88);
  v6 = (char *)((uint64_t (*)(uint64_t))v5)(a1);
  v7 = *(uint64_t (**)(void))(*(_QWORD *)v4 + 96);
  v8 = v7();
  v9 = v5();
  v10 = v7();
  if ((uint64_t)v6 < v9 || v10 < (uint64_t)v6)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v12 = ((uint64_t (*)(uint64_t))v5)(v10);
  v10 = v7();
  if (v8 < v12 || v10 < v8)
    goto LABEL_24;
  v14 = v8 - (_QWORD)v6;
  if (__OFSUB__(v8, v6))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v6 = *v3;
  v15 = *((_QWORD *)*v3 + 2);
  v16 = v15 + v14;
  if (__OFADD__(v15, v14))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *v3 = v6;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v18 = *((_QWORD *)v6 + 3) >> 1, v18 < v16))
  {
    if (v15 <= v16)
      v19 = v15 + v14;
    else
      v19 = v15;
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v19, 1, v6);
    *v3 = v6;
    v18 = *((_QWORD *)v6 + 3) >> 1;
  }
  v20 = *((_QWORD *)v6 + 2);
  v21 = v18 - v20;
  v10 = specialized Sequence._copySequenceContents(initializing:)(&v46, (uint64_t)&v6[48 * v20 + 32], v18 - v20);
  if (v10 < v14)
    goto LABEL_27;
  if (v10 >= 1)
  {
    v22 = *((_QWORD *)v6 + 2);
    v23 = __OFADD__(v22, v10);
    v24 = v22 + v10;
    if (v23)
    {
      __break(1u);
      goto LABEL_31;
    }
    *((_QWORD *)v6 + 2) = v24;
  }
  if (v10 != v21)
    return swift_release();
LABEL_28:
  v2 = *((_QWORD *)v6 + 2);
  v4 = v46;
  v6 = v47;
  if (v6 == (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 96))(v10))
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    v45 = -1;
    goto LABEL_32;
  }
LABEL_31:
  (*(void (**)(__int128 *__return_ptr, char *))(*(_QWORD *)v4 + 104))(&v42, v6);
  v26 = *(uint64_t (**)(char *))(*(_QWORD *)v4 + 120);
  swift_retain();
  v27 = v26(v6);
  swift_release();
  v47 = (char *)v27;
LABEL_32:
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)&v42, (uint64_t)v40, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  while (v41 != 255)
  {
    outlined destroy of TableRowID?((uint64_t)v40, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    v28 = *v3;
    v29 = *((_QWORD *)*v3 + 3);
    v30 = v29 >> 1;
    if ((uint64_t)(v29 >> 1) < v2 + 1)
    {
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v2 + 1, 1, *v3);
      *v3 = v28;
      v30 = *((_QWORD *)v28 + 3) >> 1;
    }
    outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)&v42, (uint64_t)v38, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    if (v39 != 255)
    {
      outlined init with take of TableRowID((uint64_t)v38, (uint64_t)v40);
      if (v2 <= v30)
        v31 = v30;
      else
        v31 = v2;
      if (v2 >= v30)
      {
LABEL_49:
        outlined destroy of TableRowID((uint64_t)v40);
        v2 = v31;
        goto LABEL_35;
      }
      v32 = (uint64_t)&v28[48 * v2 + 32];
      while (1)
      {
        outlined destroy of TableRowID?((uint64_t)&v42, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
        v33 = outlined init with take of TableRowID((uint64_t)v40, v32);
        v34 = v46;
        v35 = v47;
        if (v35 == (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 96))(v33))
        {
          v44 = 0;
          v42 = 0u;
          v43 = 0u;
          v45 = -1;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, char *))(*(_QWORD *)v34 + 104))(&v42, v35);
          v36 = *(uint64_t (**)(char *))(*(_QWORD *)v34 + 120);
          swift_retain();
          v37 = v36(v35);
          swift_release();
          v47 = (char *)v37;
        }
        outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)&v42, (uint64_t)v38, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
        ++v2;
        if (v39 == 255)
          break;
        outlined init with take of TableRowID((uint64_t)v38, (uint64_t)v40);
        v32 += 48;
        if (v31 == v2)
          goto LABEL_49;
      }
    }
    outlined destroy of TableRowID?((uint64_t)v38, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
LABEL_35:
    *((_QWORD *)*v3 + 2) = v2;
    outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)&v42, (uint64_t)v40, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  }
  outlined destroy of TableRowID?((uint64_t)&v42, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  swift_release();
  return outlined destroy of TableRowID?((uint64_t)v40, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for ToolbarStorage.Entry);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for CommandsList.Item);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for Selectable);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for TableColumnList);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(_QWORD))type metadata accessor for (String?, String));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(_QWORD))type metadata accessor for (key: String?, value: String));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))MEMORY[0x1E0DC16F0]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))MEMORY[0x1E0DF0340]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for CodingKey);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for DisplayList.HostedViewState.Key);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))MEMORY[0x1E0CB1658]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  char **v1;
  char **v2;
  _QWORD *v4;
  char *v5;
  int64_t v6;
  char *v7;
  _QWORD *v8;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  unsigned int i;
  unint64_t v23;
  int64_t v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[5];
  uint64_t v33;
  unsigned __int16 v34;
  _BYTE v35[328];

  v2 = v1;
  v4 = specialized BidirectionalCollection._distance(from:to:)(*(_QWORD **)(a1 + 240), *(_QWORD *)(a1 + 248), *(_BYTE *)(a1 + 256), *(_QWORD **)(a1 + 264), *(_QWORD *)(a1 + 272), *(_BYTE *)(a1 + 280));
  v5 = *v1;
  v6 = *((_QWORD *)*v2 + 2);
  v7 = (char *)v4 + v6;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v8 = v4;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *v2 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v10 = *((_QWORD *)v5 + 3) >> 1, v10 < (uint64_t)v7))
  {
    if (v6 <= (uint64_t)v7)
      v11 = (int64_t)v7;
    else
      v11 = v6;
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v5);
    *v2 = v5;
    v10 = *((_QWORD *)v5 + 3) >> 1;
  }
  v12 = *((_QWORD *)v5 + 2);
  v13 = v10 - v12;
  v14 = (uint64_t)&v5[96 * v12 + 32];
  outlined init with copy of LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(a1, (uint64_t)v32);
  v15 = specialized Sequence._copySequenceContents(initializing:)(v35, v14, v13);
  result = outlined destroy of LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(a1, &lazy cache variable for type metadata for LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC808]);
  if (v15 < (uint64_t)v8)
    goto LABEL_15;
  if (v15 < 1)
    goto LABEL_12;
  v17 = *((_QWORD *)*v2 + 2);
  v18 = __OFADD__(v17, v15);
  v19 = v17 + v15;
  if (!v18)
  {
    *((_QWORD *)*v2 + 2) = v19;
LABEL_12:
    if (v15 != v13)
      return outlined destroy of LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>((uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>.Iterator, MEMORY[0x1E0DEC7F8]);
LABEL_16:
    v20 = *v2;
    v21 = *((_QWORD *)*v2 + 2);
    specialized LazyMapSequence.Iterator.next()((uint64_t)v32);
    for (i = v34; HIBYTE(v34) <= 0xFEu; i = v34)
    {
      v23 = *((_QWORD *)v20 + 3);
      v24 = v23 >> 1;
      if ((uint64_t)(v23 >> 1) < v21 + 1)
      {
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v21 + 1, 1, v20);
        *v2 = v20;
        i = v34;
        v24 = *((_QWORD *)v20 + 3) >> 1;
      }
      if (i >> 8 <= 0xFE && v21 < v24)
      {
        LOBYTE(v25) = BYTE1(i);
        v26 = &v20[96 * v21 + 121];
        do
        {
          v27 = v33;
          v28 = v32[1];
          v29 = v32[2];
          v30 = v32[3];
          v31 = v32[4];
          *(_OWORD *)(v26 - 89) = v32[0];
          *(_OWORD *)(v26 - 73) = v28;
          *(_OWORD *)(v26 - 57) = v29;
          *(_OWORD *)(v26 - 41) = v30;
          *(_OWORD *)(v26 - 25) = v31;
          *(_QWORD *)(v26 - 9) = v27;
          *(v26 - 1) = i;
          ++v21;
          *v26 = v25;
          specialized LazyMapSequence.Iterator.next()((uint64_t)v32);
          LOBYTE(i) = v34;
          v25 = HIBYTE(v34);
          if (v25 > 0xFE)
            break;
          v26 += 96;
        }
        while (v21 < v24);
      }
      *((_QWORD *)v20 + 2) = v21;
    }
    return outlined destroy of LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>((uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>.Iterator, MEMORY[0x1E0DEC7F8]);
  }
  __break(1u);
  return result;
}

{
  char **v1;
  char **v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int64_t v17;
  unsigned int v18;
  char v19;
  unint64_t v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char v29;
  char *v30;
  _OWORD v31[5];
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  char v35;

  v2 = v1;
  v3 = specialized BidirectionalCollection._distance(from:to:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48) & 1, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72) & 1, *(_QWORD *)a1, *(_BYTE *)(a1 + 8) & 1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = *v1;
  v5 = *((_QWORD *)*v1 + 2);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    v17 = *((_QWORD *)v4 + 2);
    specialized LazyMapSequence.Iterator.next()((uint64_t)v31);
    v18 = HIBYTE(v33);
    if (v18 > 0xFE)
      goto LABEL_13;
    v19 = v33;
    while (1)
    {
      v20 = *((_QWORD *)v4 + 3);
      v21 = v20 >> 1;
      if ((uint64_t)(v20 >> 1) < v17 + 1)
      {
        v28 = v4;
        v29 = v19;
        v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v17 + 1, 1, v28);
        v19 = v29;
        v4 = v30;
        v21 = *((_QWORD *)v30 + 3) >> 1;
        if (v17 < v21)
        {
LABEL_21:
          v22 = &v4[96 * v17 + 121];
          do
          {
            v23 = v32;
            v24 = v31[1];
            v25 = v31[2];
            v26 = v31[3];
            v27 = v31[4];
            *(_OWORD *)(v22 - 89) = v31[0];
            *(_OWORD *)(v22 - 73) = v24;
            *(_OWORD *)(v22 - 57) = v25;
            *(_OWORD *)(v22 - 41) = v26;
            *(_OWORD *)(v22 - 25) = v27;
            *(_QWORD *)(v22 - 9) = v23;
            *(v22 - 1) = v19;
            ++v17;
            *v22 = v18;
            specialized LazyMapSequence.Iterator.next()((uint64_t)v31);
            v19 = v33;
            v18 = HIBYTE(v33);
            if (v18 > 0xFE)
              break;
            v22 += 96;
          }
          while (v17 < v21);
        }
      }
      else if (v17 < v21)
      {
        goto LABEL_21;
      }
      *((_QWORD *)v4 + 2) = v17;
      v19 = v33;
      v18 = HIBYTE(v33);
      if (v18 > 0xFE)
        goto LABEL_13;
    }
  }
  v7 = v3;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = *((_QWORD *)v4 + 3) >> 1, v9 < v6))
  {
    if (v5 <= v6)
      v10 = v6;
    else
      v10 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    v9 = *((_QWORD *)v4 + 3) >> 1;
  }
  v11 = *((_QWORD *)v4 + 2);
  v12 = v9 - v11;
  result = (uint64_t)specialized Sequence._copySequenceContents(initializing:)(&v34, (uint64_t)&v4[96 * v11 + 32], v9 - v11);
  if (result < v7)
    goto LABEL_15;
  if (result < 1)
    goto LABEL_12;
  v14 = *((_QWORD *)v4 + 2);
  v15 = __OFADD__(v14, result);
  v16 = v14 + result;
  if (!v15)
  {
    *((_QWORD *)v4 + 2) = v16;
LABEL_12:
    if (result != v12)
    {
LABEL_13:
      outlined consume of ResolvedTableRowIDs.Storage(v34, v35);
      result = swift_release();
      *v2 = v4;
      return result;
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t BarAppearanceBridge.didMoveToWindow<A>(hostingController:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD v5[5];
  uint64_t v6;
  _QWORD v7[11];

  BarAppearanceBridge.UpdateContext.init<A>(hostingController:)(a1, v7);
  outlined init with copy of BarAppearanceBridge.UpdateContext((uint64_t)v7, (uint64_t)v5);
  v2 = v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined assign with take of BarAppearanceBridge.UpdateContext?((uint64_t)v5, v2);
  swift_endAccess();
  BarAppearanceBridge.updateBarsToConfiguration()();
  v3 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates) & 2) != 0)
    BarAppearanceBridge.platformUpdateNavigationAdaptor()();
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  swift_beginAccess();
  outlined assign with take of BarAppearanceBridge.UpdateContext?((uint64_t)v5, v2);
  swift_endAccess();
  *(_QWORD *)(v1 + v3) = 0;
  return outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)v7);
}

uint64_t BarAppearanceBridge.preferencesDidChange(_:updateContext:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t result;
  __int128 v21[5];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v3 = v2;
  v4 = *a1;
  outlined init with copy of BarAppearanceBridge.UpdateContext(a2, (uint64_t)&v22);
  v5 = v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined assign with take of BarAppearanceBridge.UpdateContext?((uint64_t)&v22, v5);
  swift_endAccess();
  v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_seedTracker);
  swift_beginAccess();
  v7 = *v6;
  *(_QWORD *)&v22 = v4;
  swift_bridgeObjectRetain();
  v8 = VersionSeedSetTracker.hasChanges(in:)((uint64_t *)&v22, v7);
  swift_bridgeObjectRelease();
  v9 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates;
  v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates);
  if ((v8 & 1) != 0)
  {
    *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates) = v10 | 2;
    *(_QWORD *)&v21[0] = v4;
    PreferenceList.subscript.getter();
    v11 = v25;
    v12 = BYTE8(v25);
    v13 = v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage;
    v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage);
    v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage + 8);
    v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage + 16);
    v17 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage + 24);
    v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage + 32);
    v19 = v23;
    *(_OWORD *)v13 = v22;
    *(_OWORD *)(v13 + 16) = v19;
    *(_OWORD *)(v13 + 32) = v24;
    *(_QWORD *)(v13 + 48) = v11;
    *(_BYTE *)(v13 + 56) = v12;
    outlined consume of NavigationTitleStorage?(v14, v15, v16, v17, v18);
    outlined init with copy of BarAppearanceBridge.UpdateContext?(v5, (uint64_t)v21);
    if (!*(_QWORD *)&v21[0])
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v21, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    outlined init with take of BarAppearanceBridge.UpdateContext(v21, (uint64_t)&v22);
    closure #1 in BarAppearanceBridge.updateNavigationBar(updating:preferences:)((void **)&v22, v3, v4);
    outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v22);
    *(_QWORD *)&v22 = v4;
    BarAppearanceBridge.updateConfigurations(_:)((uint64_t *)&v22);
    BarAppearanceBridge.updateBarsToConfiguration()();
    v10 = *(_QWORD *)(v3 + v9);
  }
  *(_QWORD *)&v21[0] = v4;
  swift_beginAccess();
  VersionSeedSetTracker.updateSeeds(to:)((uint64_t *)v21);
  swift_endAccess();
  if ((*(_BYTE *)(v3 + v9) & 2) != 0)
    BarAppearanceBridge.platformUpdateNavigationAdaptor()();
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  swift_beginAccess();
  outlined assign with take of BarAppearanceBridge.UpdateContext?((uint64_t)&v22, v5);
  swift_endAccess();
  *(_QWORD *)(v3 + v9) = 0;
  return v10;
}

uint64_t outlined assign with take of BarAppearanceBridge.UpdateContext?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of BarAppearanceBridge.UpdateContext(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for BarAppearanceBridge.UpdateContext(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for BarAppearanceBridge.UpdateContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = (_OWORD *)(a1 + 16);
  v7 = (_OWORD *)(a2 + 16);
  v8 = *(unsigned __int8 *)(a2 + 24);
  v9 = v4;
  v10 = v5;
  if (v8 == 2)
  {
    *v6 = *v7;
    *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v7 + 9);
  }
  else
  {
    swift_unknownObjectWeakCopyInit();
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  }
  swift_unknownObjectWeakCopyInit();
  swift_unknownObjectWeakCopyInit();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t BarAppearanceBridge.updateBarsToConfiguration()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD *v19;
  id v20;
  uint64_t v21;
  unsigned __int8 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  char v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned __int8 *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  id v47;
  unsigned __int8 v48;
  __int16 v49;
  unsigned __int8 v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  __int128 v60;
  __int128 v61;
  _QWORD v62[7];
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE v74[40];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_toUpdateBars;
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 16) = xmmword_187C304B0;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_QWORD *)(v4 + 96) = 5;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_QWORD *)(v4 + 136) = 3;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = xmmword_187C304C0;
    v5 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars;
    v58 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage;
    v56 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates;
    v57 = v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
    swift_beginAccess();
    for (i = 32; i != 192; i += 40)
    {
      outlined init with copy of ToolbarPlacement.Role(v4 + i, (uint64_t)v74);
      v7 = *(_QWORD *)(v1 + v5);
      swift_bridgeObjectRetain();
      v8 = specialized Set.contains(_:)((uint64_t)v74, v7);
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
      {
        v62[0] = 0;
        v60 = 0u;
        v61 = 0u;
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v74, (uint64_t)&v63);
        outlined init with copy of ToolbarPlacement.Role((uint64_t)&v60, (uint64_t)&v66);
        switch((uint64_t)v65)
        {
          case 0:
            v9 = *((_QWORD *)&v67 + 1);
            swift_bridgeObjectRetain();
            if (v9)
              goto LABEL_25;
            goto LABEL_28;
          case 1:
            v13 = *((_QWORD *)&v67 + 1);
            swift_bridgeObjectRetain();
            if (v13 == 1)
              goto LABEL_28;
            goto LABEL_25;
          case 2:
            v11 = *((_QWORD *)&v67 + 1);
            swift_bridgeObjectRetain();
            if (v11 == 2)
              goto LABEL_28;
            goto LABEL_25;
          case 3:
            v12 = *((_QWORD *)&v67 + 1);
            swift_bridgeObjectRetain();
            if (v12 == 3)
              goto LABEL_28;
            goto LABEL_25;
          case 4:
            v10 = *((_QWORD *)&v67 + 1);
            swift_bridgeObjectRetain();
            if (v10 == 4)
              goto LABEL_28;
            goto LABEL_25;
          case 5:
            v14 = *((_QWORD *)&v67 + 1);
            swift_bridgeObjectRetain();
            if (v14 == 5)
              goto LABEL_28;
            goto LABEL_25;
          case 6:
            v15 = *((_QWORD *)&v67 + 1);
            swift_bridgeObjectRetain();
            if (v15 != 6)
              goto LABEL_25;
            goto LABEL_28;
          default:
            outlined init with copy of ToolbarPlacement.Role((uint64_t)&v63, (uint64_t)v72);
            if (*((_QWORD *)&v67 + 1) < 7uLL)
            {
              swift_bridgeObjectRetain();
              outlined destroy of AnyHashable((uint64_t)v72);
LABEL_25:
              outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)&v63);
              goto LABEL_26;
            }
            v69 = v66;
            v70 = v67;
            v71 = v68;
            swift_bridgeObjectRetain();
            v18 = MEMORY[0x18D75E284](v72, &v69);
            outlined destroy of AnyHashable((uint64_t)&v69);
            outlined destroy of AnyHashable((uint64_t)v72);
            if ((v18 & 1) == 0)
            {
              outlined destroy of ToolbarPlacement.Role((uint64_t)&v63);
LABEL_26:
              outlined destroy of ToolbarPlacement.Role((uint64_t)&v60);
              v16 = swift_allocObject();
              *(_OWORD *)(v16 + 16) = xmmword_187BF9830;
              outlined init with copy of ToolbarPlacement.Role((uint64_t)v74, v16 + 32);
              v17 = specialized Set.init(_nonEmptyArrayLiteral:)(v16);
              swift_setDeallocating();
              goto LABEL_29;
            }
LABEL_28:
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v63);
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v60);
            v19 = (_OWORD *)swift_allocObject();
            v19[1] = xmmword_187BF9820;
            v19[3] = 0u;
            v19[4] = 0u;
            v19[2] = 0u;
            v19[5] = 0u;
            v19[6] = xmmword_187C304D0;
            v17 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)v19);
            swift_setDeallocating();
LABEL_29:
            swift_arrayDestroy();
            swift_deallocClassInstance();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v17 + 16))
            {
              outlined init with copy of ToolbarPlacement.Role((uint64_t)v74, (uint64_t)v72);
              switch(v73)
              {
                case 0:
                  if (*(_BYTE *)(v1 + v58) != 1)
                    goto LABEL_40;
                  outlined init with copy of BarAppearanceBridge.UpdateContext?(v57, (uint64_t)&v63);
                  if ((_QWORD)v63)
                  {
                    outlined init with copy of HostingControllerOverrides((uint64_t)&v64, (uint64_t)&v60);
                    outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v63);
                    v20 = (id)MEMORY[0x18D760234](v62);
                    outlined destroy of HostingControllerOverrides((uint64_t)&v60);
                    if (v20)
                      goto LABEL_45;
                  }
                  else
                  {
                    outlined destroy of AccessibilityTableContext?((uint64_t)&v63, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
                  }
                  outlined init with copy of BarAppearanceBridge.UpdateContext?(v57, (uint64_t)&v63);
                  if (!(_QWORD)v63)
                  {
                    outlined destroy of AccessibilityTableContext?((uint64_t)&v63, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
                    goto LABEL_40;
                  }
                  v21 = *((_QWORD *)&v63 + 1);
                  v20 = *((id *)&v63 + 1);
                  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v63);
                  if (!v21)
                    goto LABEL_40;
LABEL_45:
                  v22 = BarAppearanceBridge.updateNavigationAppearances(navigationController:)(v20);
                  outlined init with copy of BarAppearanceBridge.UpdateContext?(v57, (uint64_t)&v60);
                  if (!(_QWORD)v60)
                  {
LABEL_105:
                    outlined destroy of AccessibilityTableContext?((uint64_t)&v60, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
                    result = _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    return result;
                  }
                  outlined init with take of BarAppearanceBridge.UpdateContext(&v60, (uint64_t)&v63);
                  closure #1 in BarAppearanceBridge.updateNavigationVisibilities(navigationController:)(v20, (void **)&v63, v1, (char *)&v60);
                  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v63);

                  if ((v60 & v22 & 1) == 0)
                    goto LABEL_40;
LABEL_47:
                  swift_beginAccess();
                  specialized Set._subtract<A>(_:)(v17);
                  swift_endAccess();
                  swift_bridgeObjectRelease();
                  v62[0] = 0;
                  v60 = 0u;
                  v61 = 0u;
                  outlined init with copy of ToolbarPlacement.Role((uint64_t)v74, (uint64_t)&v63);
                  outlined init with copy of ToolbarPlacement.Role((uint64_t)&v60, (uint64_t)&v66);
                  switch((uint64_t)v65)
                  {
                    case 0:
                      if (*((_QWORD *)&v67 + 1))
                        goto LABEL_4;
                      goto LABEL_64;
                    case 1:
                      if (*((_QWORD *)&v67 + 1) == 1)
                        goto LABEL_64;
                      goto LABEL_4;
                    case 2:
                      if (*((_QWORD *)&v67 + 1) == 2)
                        goto LABEL_64;
                      goto LABEL_4;
                    case 3:
                      if (*((_QWORD *)&v67 + 1) == 3)
                        goto LABEL_64;
                      goto LABEL_4;
                    case 4:
                      if (*((_QWORD *)&v67 + 1) == 4)
                        goto LABEL_64;
                      goto LABEL_4;
                    case 5:
                      if (*((_QWORD *)&v67 + 1) == 5)
                        goto LABEL_64;
                      goto LABEL_4;
                    case 6:
                      if (*((_QWORD *)&v67 + 1) == 6)
                        goto LABEL_64;
                      goto LABEL_4;
                    default:
                      outlined init with copy of ToolbarPlacement.Role((uint64_t)&v63, (uint64_t)v72);
                      if (*((_QWORD *)&v67 + 1) < 7uLL)
                      {
                        outlined destroy of AnyHashable((uint64_t)v72);
LABEL_4:
                        outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)&v63);
                        goto LABEL_5;
                      }
                      v69 = v66;
                      v70 = v67;
                      v71 = v68;
                      v23 = MEMORY[0x18D75E284](v72, &v69);
                      outlined destroy of AnyHashable((uint64_t)&v69);
                      outlined destroy of AnyHashable((uint64_t)v72);
                      if ((v23 & 1) == 0)
                      {
                        outlined destroy of ToolbarPlacement.Role((uint64_t)&v63);
LABEL_5:
                        outlined destroy of ToolbarPlacement.Role((uint64_t)&v60);
                        goto LABEL_6;
                      }
LABEL_64:
                      outlined destroy of ToolbarPlacement.Role((uint64_t)&v63);
                      outlined destroy of ToolbarPlacement.Role((uint64_t)&v60);
                      outlined destroy of ToolbarPlacement.Role((uint64_t)v74);
                      *(_QWORD *)(v1 + v56) |= 2uLL;
                      break;
                  }
                  break;
                case 3:
                  if ((BarAppearanceBridge.updateBottomBarConfiguration()() & 1) != 0)
                    goto LABEL_47;
                  goto LABEL_40;
                case 5:
                  if ((BarAppearanceBridge.updateTabBarConfiguration()() & 1) != 0)
                    goto LABEL_47;
                  goto LABEL_40;
                case 6:
                  goto LABEL_40;
                default:
                  outlined destroy of ToolbarPlacement.Role((uint64_t)v72);
                  goto LABEL_40;
              }
            }
            else
            {
LABEL_40:
              outlined destroy of ToolbarPlacement.Role((uint64_t)v74);
              swift_bridgeObjectRelease();
            }
            break;
        }
      }
      else
      {
LABEL_6:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v74);
      }
    }
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v24 = swift_bridgeObjectRetain();
    v25 = specialized Sequence.compactMap<A>(_:)(v24);
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v25 + 16);
    if (v26)
    {
      v27 = v25 + 32;
      v59 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
      swift_beginAccess();
      v28 = v57;
      while (2)
      {
        outlined init with copy of AnyHashable(v27, (uint64_t)v74);
        outlined init with copy of AnyHashable((uint64_t)v74, (uint64_t)v72);
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v72, (uint64_t)&v69);
        switch(*((_QWORD *)&v70 + 1))
        {
          case 0:
            if (*(_BYTE *)(v1 + v58) != 1)
              goto LABEL_69;
            outlined init with copy of BarAppearanceBridge.UpdateContext?(v28, (uint64_t)&v63);
            if ((_QWORD)v63)
            {
              outlined init with copy of HostingControllerOverrides((uint64_t)&v64, (uint64_t)&v60);
              outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v63);
              v29 = (id)MEMORY[0x18D760234](v62);
              outlined destroy of HostingControllerOverrides((uint64_t)&v60);
              if (v29)
              {
LABEL_92:
                v45 = BarAppearanceBridge.updateNavigationAppearances(navigationController:)(v29);
                outlined init with copy of BarAppearanceBridge.UpdateContext?(v28, (uint64_t)&v60);
                if (!(_QWORD)v60)
                  goto LABEL_105;
                outlined init with take of BarAppearanceBridge.UpdateContext(&v60, (uint64_t)&v63);
                closure #1 in BarAppearanceBridge.updateNavigationVisibilities(navigationController:)(v29, (void **)&v63, v1, (char *)&v60);
                outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v63);

                v30 = v60 & v45;
                goto LABEL_94;
              }
            }
            else
            {
              outlined destroy of AccessibilityTableContext?((uint64_t)&v63, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
            }
            outlined init with copy of BarAppearanceBridge.UpdateContext?(v28, (uint64_t)&v63);
            if (!(_QWORD)v63)
              goto LABEL_96;
            v44 = *((_QWORD *)&v63 + 1);
            v29 = *((id *)&v63 + 1);
            outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v63);
            if (!v44)
              goto LABEL_69;
            goto LABEL_92;
          case 3:
            v30 = BarAppearanceBridge.updateBottomBarConfiguration()();
LABEL_94:
            outlined destroy of ToolbarPlacement.Role((uint64_t)v72);
            if ((v30 & 1) != 0)
              goto LABEL_95;
            goto LABEL_70;
          case 5:
            outlined init with copy of BarAppearanceBridge.UpdateContext?(v28, (uint64_t)&v63);
            if (!(_QWORD)v63)
            {
LABEL_96:
              outlined destroy of AccessibilityTableContext?((uint64_t)&v63, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
              goto LABEL_69;
            }
            v31 = (id)v63;
            outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v63);
            v32 = objc_msgSend(v31, sel_tabBarController);
            if (!v32)
            {

              goto LABEL_69;
            }
            v33 = v32;
            v34 = *v59;
            v64 = 0;
            v63 = 0uLL;
            v65 = xmmword_187C0CDF0;
            if (!*(_QWORD *)(v34 + 16))
              goto LABEL_98;
            swift_bridgeObjectRetain();
            v35 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v63);
            if ((v36 & 1) == 0)
            {
              swift_bridgeObjectRelease();
LABEL_98:
              outlined destroy of ToolbarPlacement.Role((uint64_t)&v63);

LABEL_69:
              outlined destroy of ToolbarPlacement.Role((uint64_t)v72);
              goto LABEL_70;
            }
            v55 = v2;
            v37 = (unsigned __int8 *)(*(_QWORD *)(v34 + 56) + 80 * v35);
            v38 = *v37;
            v40 = *((_QWORD *)v37 + 1);
            v39 = *((_QWORD *)v37 + 2);
            v54 = v37[24];
            v53 = *((_QWORD *)v37 + 4);
            v52 = v37[40];
            v51 = *((_QWORD *)v37 + 6);
            v49 = *(_WORD *)(v37 + 57);
            v50 = v37[56];
            v41 = *((_QWORD *)v37 + 8);
            v48 = v37[72];
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v63);
            LOBYTE(v63) = v38;
            *((_QWORD *)&v63 + 1) = v40;
            v64 = v39;
            LOBYTE(v65) = v54;
            *((_QWORD *)&v65 + 1) = v53;
            LOBYTE(v66) = v52;
            *((_QWORD *)&v66 + 1) = v51;
            LOBYTE(v67) = v50;
            *(_WORD *)((char *)&v67 + 1) = v49;
            *((_QWORD *)&v67 + 1) = v41;
            LOBYTE(v68) = v48;
            BarAppearanceBridge.updateTabBarAppearance(_:tabBarController:)(&v63, v33);
            if (v41)
              v42 = 0.3;
            else
              v42 = 0.0;
            if (v38 == 2)
            {
              if (v41)
                v43 = 7;
              else
                v43 = 0;
            }
            else if (v41)
            {
              v43 = 3;
            }
            else
            {
              v43 = 0;
            }
            v46 = swift_allocObject();
            *(_QWORD *)(v46 + 16) = v33;
            *(_DWORD *)(v46 + 24) = v43;
            *(double *)(v46 + 32) = v42;
            v47 = v33;
            onNextMainRunLoop(do:)();
            v2 = v55;
            swift_release();
            swift_release();
            swift_release();

            swift_release();
            outlined destroy of ToolbarPlacement.Role((uint64_t)v72);
            v28 = v57;
LABEL_95:
            outlined init with copy of AnyHashable((uint64_t)v74, (uint64_t)&v60);
            swift_beginAccess();
            specialized Set._Variant.remove(_:)((uint64_t)&v60, (uint64_t)&v63);
            swift_endAccess();
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v60);
            outlined destroy of AccessibilityTableContext?((uint64_t)&v63, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
LABEL_70:
            outlined destroy of AnyHashable((uint64_t)v74);
            v27 += 40;
            if (!--v26)
              return swift_bridgeObjectRelease();
            continue;
          case 6:
            goto LABEL_69;
          default:
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v69);
            goto LABEL_69;
        }
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t BarAppearanceBridge.addPreferences(to:)()
{
  uint64_t v0;
  char **v1;
  char *v2;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t result;
  char *v39;

  GraphHost.addPreference<A>(_:)();
  v1 = (char **)(v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_seedTracker);
  swift_beginAccess();
  v2 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    *v1 = v2;
  }
  v5 = *((_QWORD *)v2 + 2);
  v4 = *((_QWORD *)v2 + 3);
  if (v5 >= v4 >> 1)
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1, v2);
    *v1 = v2;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v7 = v6;
  v8 = lazy protocol witness table accessor for type _AnyPreferenceKey<NavigationTitleKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v2 + 2) = v5 + 1;
  v9 = &v2[24 * v5];
  *((_QWORD *)v9 + 4) = v7;
  *((_QWORD *)v9 + 5) = v8;
  *((_DWORD *)v9 + 12) = -1;
  GraphHost.addPreference<A>(_:)();
  v10 = *v1;
  v11 = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v10;
  if ((v11 & 1) == 0)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    *v1 = v10;
  }
  v13 = *((_QWORD *)v10 + 2);
  v12 = *((_QWORD *)v10 + 3);
  if (v13 >= v12 >> 1)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v10);
    *v1 = v10;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ToolbarRoleKey>, (uint64_t)&type metadata for ToolbarRoleKey, (uint64_t)&protocol witness table for ToolbarRoleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v15 = v14;
  v16 = lazy protocol witness table accessor for type _AnyPreferenceKey<ToolbarRoleKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v10 + 2) = v13 + 1;
  v17 = &v10[24 * v13];
  *((_QWORD *)v17 + 4) = v15;
  *((_QWORD *)v17 + 5) = v16;
  *((_DWORD *)v17 + 12) = -1;
  GraphHost.addPreference<A>(_:)();
  v18 = *v1;
  v19 = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v18;
  if ((v19 & 1) == 0)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    *v1 = v18;
  }
  v21 = *((_QWORD *)v18 + 2);
  v20 = *((_QWORD *)v18 + 3);
  if (v21 >= v20 >> 1)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v18);
    *v1 = v18;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<NavigationBarBackButtonHiddenKey>, (uint64_t)&type metadata for NavigationBarBackButtonHiddenKey, (uint64_t)&protocol witness table for NavigationBarBackButtonHiddenKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v23 = v22;
  v24 = lazy protocol witness table accessor for type _AnyPreferenceKey<NavigationBarBackButtonHiddenKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v18 + 2) = v21 + 1;
  v25 = &v18[24 * v21];
  *((_QWORD *)v25 + 4) = v23;
  *((_QWORD *)v25 + 5) = v24;
  *((_DWORD *)v25 + 12) = -1;
  v26 = *v1;
  v28 = *((_QWORD *)*v1 + 2);
  v27 = *((_QWORD *)*v1 + 3);
  if (v28 >= v27 >> 1)
  {
    v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, *v1);
    *v1 = v26;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v30 = v29;
  v31 = lazy protocol witness table accessor for type _AnyPreferenceKey<ToolbarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v26 + 2) = v28 + 1;
  v32 = &v26[24 * v28];
  *((_QWORD *)v32 + 4) = v30;
  *((_QWORD *)v32 + 5) = v31;
  *((_DWORD *)v32 + 12) = -1;
  v33 = *v1;
  v35 = *((_QWORD *)*v1 + 2);
  v34 = *((_QWORD *)*v1 + 3);
  if (v35 >= v34 >> 1)
  {
    v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, *v1);
    *v1 = v33;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<SearchKey>, (uint64_t)&type metadata for SearchKey, (uint64_t)&protocol witness table for SearchKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v37 = v36;
  result = lazy protocol witness table accessor for type _AnyPreferenceKey<SearchKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v33 + 2) = v35 + 1;
  v39 = &v33[24 * v35];
  *((_QWORD *)v39 + 4) = v37;
  *((_QWORD *)v39 + 5) = result;
  *((_DWORD *)v39 + 12) = -1;
  return result;
}

uint64_t VersionSeedSetTracker.addPreference<A>(_:)()
{
  char **v0;
  char *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  char *v6;

  v1 = *v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v1 + 2) + 1, 1, v1);
  v3 = *((_QWORD *)v1 + 2);
  v2 = *((_QWORD *)v1 + 3);
  if (v3 >= v2 >> 1)
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v1);
  v4 = type metadata accessor for _AnyPreferenceKey();
  result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v4);
  *((_QWORD *)v1 + 2) = v3 + 1;
  v6 = &v1[24 * v3];
  *((_QWORD *)v6 + 4) = v4;
  *((_QWORD *)v6 + 5) = result;
  *((_DWORD *)v6 + 12) = -1;
  *v0 = v1;
  return result;
}

uint64_t closure #1 in BarAppearanceBridge.updateNavigationBar(updating:preferences:)(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned __int8 v15;
  BOOL v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  unsigned __int8 v22;
  id v23;
  char v24;
  int v25;
  char v26;
  id v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  _BOOL4 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39[2];
  unsigned __int8 v40;
  _BYTE v41[40];
  uint64_t v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars);
  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  swift_bridgeObjectRetain();
  v7 = specialized Set.contains(_:)((uint64_t)&v45, v6);
  swift_bridgeObjectRelease();
  result = outlined destroy of ToolbarPlacement.Role((uint64_t)&v45);
  if ((v7 & 1) != 0 || *(_BYTE *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage + 16) == 1)
  {
    v9 = a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
    swift_beginAccess();
    outlined init with copy of BarAppearanceBridge.UpdateContext?(v9, (uint64_t)v41);
    if (!*(_QWORD *)v41)
      goto LABEL_35;
    outlined init with take of BarAppearanceBridge.UpdateContext((__int128 *)v41, (uint64_t)&v45);
    closure #1 in BarAppearanceBridge.updateNavigationStyle(_:)((id *)&v45, a3, a2);
    outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v45);
    outlined init with copy of BarAppearanceBridge.UpdateContext?(v9, (uint64_t)v41);
    if (!*(_QWORD *)v41
      || (outlined init with take of BarAppearanceBridge.UpdateContext((__int128 *)v41, (uint64_t)&v45),
          closure #1 in BarAppearanceBridge.updateBackAction(_:)((id *)&v45, a3, a2),
          outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v45),
          outlined init with copy of BarAppearanceBridge.UpdateContext?(v9, (uint64_t)v41),
          !*(_QWORD *)v41))
    {
LABEL_35:
      outlined destroy of AccessibilityTableContext?((uint64_t)v41, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    outlined init with take of BarAppearanceBridge.UpdateContext((__int128 *)v41, (uint64_t)&v45);
    closure #1 in BarAppearanceBridge.updateSidebarToggle(_:)((uint64_t)&v45, a2, a3);
    outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v45);
    v10 = *a1;
    *(_QWORD *)v41 = a3;
    PreferenceList.subscript.getter();
    v37 = v45;
    v11 = v47;
    v38 = v46;
    v13 = v48;
    v12 = v49;
    v14 = v50;
    *(_QWORD *)v41 = a3;
    PreferenceList.subscript.getter();
    v15 = v45;
    outlined init with copy of BarAppearanceBridge.UpdateContext((uint64_t)a1, (uint64_t)&v45);
    v36 = v11;
    if ((v15 & 1) != 0)
    {
      v16 = 0;
    }
    else
    {
      v17 = (id)v45;
      v16 = UIViewController.hasOrWillHaveBackItem(overrides:)((uint64_t)&v46);

      v11 = v36;
    }
    outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v45);
    v40 = v15;
    *(_OWORD *)v41 = v37;
    *(_OWORD *)&v41[16] = v38;
    *(_QWORD *)&v41[32] = v11;
    v42 = v13;
    v43 = v12;
    v44 = v14;
    if (*((_QWORD *)&v38 + 1) == 1)
      v11 = 1;
    else
      outlined copy of Transaction?(v11);
    v18 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment + 8);
    v39[0] = *(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment);
    v39[1] = v18;
    swift_retain();
    swift_retain();
    v19 = (void *)BarAppearanceBridge.uiContainingNavController.getter();
    specialized UIViewController.updateNavigationBar(item:title:transaction:environment:navController:showsBackItem:)(&v40, (uint64_t)v41, v39, v19, v16);

    outlined consume of Transaction?(v11);
    swift_release();
    swift_release();
    v20 = a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage;
    *(_BYTE *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage + 1) = v15;
    static Semantics.v2.getter();
    if ((isLinkedOnOrAfter(_:)() & 1) != 0)
    {
      v21 = objc_msgSend(v10, sel_navigationItem);
      v22 = objc_msgSend(v21, sel_leftItemsSupplementBackButton);

      if ((v22 & 1) == 0)
      {
        v23 = objc_msgSend(v10, sel_navigationItem);
        objc_msgSend(v23, sel_setLeftItemsSupplementBackButton_, 1);

      }
    }
    v24 = UIViewController.hasNavigationBarContent(updateContext:)((uint64_t)a1);
    v25 = *(unsigned __int8 *)(v20 + 2);
    if (v25 == 2)
      v26 = static SemanticFeature.isEnabled.getter() ^ 1;
    else
      v26 = v25 & 1;
    if ((v24 & 1) != (v26 & 1))
    {
      memset(v41, 0, sizeof(v41));
      BarAppearanceBridge.invalidate(bar:)((uint64_t)v41);
      outlined destroy of ToolbarPlacement.Role((uint64_t)v41);
    }
    v27 = objc_msgSend(v10, sel_toolbarItems);
    if (v27)
    {
      v28 = v27;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
      v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v29 >> 62)
      {
        swift_bridgeObjectRetain();
        v30 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v31 = *(unsigned __int8 *)(v20 + 3);
      if (v31 == 2)
      {
        if (v30)
        {
          v32 = 1;
LABEL_31:
          memset(v41, 0, 24);
          *(_OWORD *)&v41[24] = xmmword_187C304D0;
          BarAppearanceBridge.invalidate(bar:)((uint64_t)v41);
          outlined consume of NavigationTitleStorage?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v36);
          result = outlined destroy of ToolbarPlacement.Role((uint64_t)v41);
          goto LABEL_32;
        }
        goto LABEL_27;
      }
      v34 = v30 != 0;
      v35 = v30 == 0;
      v32 = v30 != 0;
      if (((v35 ^ v31) & 1) == 0)
        goto LABEL_31;
    }
    else
    {
      v33 = *(unsigned __int8 *)(v20 + 3);
      if (v33 == 2)
      {
LABEL_27:
        result = outlined consume of NavigationTitleStorage?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v36);
        v32 = 0;
LABEL_32:
        *(_BYTE *)(v20 + 3) = v32;
        *(_BYTE *)(v20 + 2) = v24 & 1;
        return result;
      }
      v34 = 0;
      v32 = 0;
      if ((v33 & 1) != 0)
        goto LABEL_31;
    }
    result = outlined consume of NavigationTitleStorage?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v36);
    v32 = v34;
    goto LABEL_32;
  }
  return result;
}

uint64_t outlined init with take of BarAppearanceBridge.UpdateContext(__int128 *a1, uint64_t a2)
{
  initializeWithTake for BarAppearanceBridge.UpdateContext(a2, a1);
  return a2;
}

uint64_t initializeWithTake for BarAppearanceBridge.UpdateContext(uint64_t a1, __int128 *a2)
{
  _OWORD *v4;
  __int128 v5;
  _OWORD *v6;

  v5 = *a2;
  v4 = a2 + 1;
  *(_OWORD *)a1 = v5;
  v6 = (_OWORD *)(a1 + 16);
  if (*((_BYTE *)a2 + 24) == 2)
  {
    *v6 = *v4;
    *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v4 + 9);
  }
  else
  {
    swift_unknownObjectWeakTakeInit();
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  }
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  return a1;
}

uint64_t BarAppearanceBridge.uiContainingNavController.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  _BYTE v5[32];
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage) != 1)
    return 0;
  v1 = v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v1, (uint64_t)&v7);
  if (!v7)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v7, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
LABEL_6:
    outlined init with copy of BarAppearanceBridge.UpdateContext?(v1, (uint64_t)&v7);
    if (v7)
    {
      v2 = (uint64_t)v8;
      v3 = v8;
      outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v7);
      return v2;
    }
    outlined destroy of AccessibilityTableContext?((uint64_t)&v7, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
    return 0;
  }
  outlined init with copy of HostingControllerOverrides((uint64_t)&v9, (uint64_t)v5);
  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v7);
  v2 = MEMORY[0x18D760234](&v6);
  outlined destroy of HostingControllerOverrides((uint64_t)v5);
  if (!v2)
    goto LABEL_6;
  return v2;
}

uint64_t outlined destroy of BarAppearanceBridge.UpdateContext(uint64_t a1)
{
  destroy for BarAppearanceBridge.UpdateContext(a1);
  return a1;
}

uint64_t destroy for BarAppearanceBridge.UpdateContext(uint64_t a1)
{

  if (*(_BYTE *)(a1 + 24) != 2)
    swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t UIViewController.hasNavigationBarContent(updateContext:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  _BOOL4 v5;
  id v6;
  unsigned int v7;
  id v8;
  id v9;
  unsigned __int8 HaveNavigationBar;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  unsigned int v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  unsigned __int8 v25;
  _BYTE v26[40];
  uint64_t v27;

  v2 = v1;
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
    return 1;
  v4 = a1 + 16;
  v5 = UIViewController.hasOrWillHaveBackItem(overrides:)(a1 + 16);
  v6 = objc_msgSend(v1, sel_navigationItem);
  v7 = objc_msgSend(v6, sel_hidesBackButton);

  outlined init with copy of HostingControllerOverrides(v4, (uint64_t)v26);
  v8 = (id)MEMORY[0x18D760234](&v27);
  outlined destroy of HostingControllerOverrides((uint64_t)v26);
  if (!v8)
    v8 = objc_msgSend(v2, sel_splitViewController);
  v9 = objc_msgSend(v2, sel_navigationItem);
  HaveNavigationBar = UINavigationItem.hasContent.getter();

  if (v8)
  {
    v11 = v8;
    v12 = objc_msgSend(v2, sel_navigationController);
    if (!v12)
    {
LABEL_27:

      goto LABEL_28;
    }
    v13 = v12;
    if (objc_msgSend(v11, sel_style)
      && (v14 = objc_msgSend(v11, sel_viewControllerForColumn_, 3)) != 0
      && (v15 = v14, objc_opt_self(), v16 = swift_dynamicCastObjCClass(), v15, v16))
    {
      if (v13 == (id)v16)
        v17 = v13;
      else
        v17 = v11;
      if (v13 == (id)v16)
        v18 = v11;
      else
        v18 = v13;
      if ((v13 == (id)v16) | HaveNavigationBar & 1)
      {
        HaveNavigationBar |= v13 != (id)v16;
        v11 = v17;
        v13 = v18;
LABEL_26:

        v11 = v13;
        goto LABEL_27;
      }
    }
    else
    {
      v19 = objc_msgSend(v11, sel_isCollapsed);
      if (v19)
        v20 = v13;
      else
        v20 = v11;
      if (v19)
        v21 = v11;
      else
        v21 = v13;
      if (((v19 | HaveNavigationBar) & 1) != 0)
      {
        HaveNavigationBar |= v19 ^ 1;
        v11 = v20;
        v13 = v21;
        goto LABEL_26;
      }
    }
    HaveNavigationBar = UISplitViewController.mayHaveNavigationBarContent.getter();
    goto LABEL_26;
  }
LABEL_28:
  v22 = objc_msgSend(v2, sel_tabBarController);
  if (v22)
  {
    v23 = v22;
    if ((HaveNavigationBar & 1) != 0)
    {

      return 1;
    }
    v25 = UITabBarController.combinedWithNavigationBar.getter();

    if ((v25 & 1) != 0)
      return 1;
  }
  else
  {

    if ((HaveNavigationBar & 1) != 0)
      return 1;
  }
  return v5 & (v7 ^ 1);
}

uint64_t UIViewController.updateTitle(_:isFromSwiftUI:)(uint64_t a1, void *a2, char a3)
{
  void *v3;
  void *v4;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char v14;
  uint64_t result;
  id v16;

  v4 = v3;
  v8 = objc_msgSend(v4, sel_navigationItem);
  v9 = objc_msgSend(v8, sel_title);

  if (v9)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

    if (a2)
    {
      if (v10 != a1 || v12 != a2)
      {
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        result = 0;
        if ((v14 & 1) != 0)
          return result;
        goto LABEL_12;
      }
      swift_bridgeObjectRelease();
      return 0;
    }
    swift_bridgeObjectRelease();
    if ((a3 & 1) == 0)
      return 0;
  }
  else if (!a2)
  {
    return 0;
  }
LABEL_12:
  v16 = objc_msgSend(v4, sel_navigationItem);
  if (a2)
    a2 = (void *)MEMORY[0x18D75CC88](a1, a2);
  objc_msgSend(v16, sel_setTitle_, a2);

  return 1;
}

uint64_t outlined consume of NavigationTitleStorage?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4 != 1)
  {
    outlined consume of Text?(result, a2, a3, a4);
    outlined consume of Transaction?(a5);
    return swift_release();
  }
  return result;
}

void closure #1 in BarAppearanceBridge.updateNavigationStyle(_:)(id *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  unsigned __int8 v7;

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    PreferenceList.subscript.getter();
    if (*(_QWORD *)(a3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment + 8))
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if (v7 != 3)
    {
      v6 = objc_msgSend(*a1, sel_navigationItem, a2);
      objc_msgSend(v6, sel_setStyle_, v7);

    }
  }
}

void closure #1 in BarAppearanceBridge.updateSidebarToggle(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[4];
  uint64_t v22;
  uint64_t v23;
  id v24;
  _QWORD v25[2];
  _QWORD v26[6];

  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage) != 1)
    return;
  v5 = a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v5, (uint64_t)&v23);
  if (!v23)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v23, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
LABEL_6:
    outlined init with copy of BarAppearanceBridge.UpdateContext?(v5, (uint64_t)&v23);
    if (!v23)
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)&v23, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
      return;
    }
    v7 = v24;
    v6 = v24;
    outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v23);
    if (!v7)
      return;
    goto LABEL_8;
  }
  outlined init with copy of HostingControllerOverrides((uint64_t)v25, (uint64_t)v21);
  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v23);
  v6 = (id)MEMORY[0x18D760234](&v22);
  outlined destroy of HostingControllerOverrides((uint64_t)v21);
  if (!v6)
    goto LABEL_6;
LABEL_8:
  outlined init with copy of HostingControllerOverrides(a1 + 16, (uint64_t)&v23);
  v8 = (id)MEMORY[0x18D760234](v26);
  outlined destroy of HostingControllerOverrides((uint64_t)&v23);
  if (v8 || (v8 = objc_msgSend(v6, sel_splitViewController)) != 0)
  {
    if (objc_msgSend(v8, sel_style)
      && (v9 = objc_msgSend(v8, sel_viewControllerForColumn_, 3)) != 0
      && (v10 = v9, objc_opt_self(), v11 = swift_dynamicCastObjCClass(), v10, v11))
    {
      v12 = v6 == (id)v11;
    }
    else
    {
      v12 = objc_msgSend(v8, sel_isCollapsed);
    }
    if (objc_msgSend(v8, sel_style)
      && (!v12 ? (v13 = 0) : (v13 = 3),
          (v14 = objc_msgSend(v8, sel_viewControllerForColumn_, v13)) != 0))
    {
      v15 = v14;
      objc_opt_self();
      v16 = swift_dynamicCastObjCClass();
      if (v16 && v6 == (id)v16)
      {
        v21[0] = a3;
        PreferenceList.subscript.getter();
        v17 = v25[0];
        v18 = v25[1];
        if ((specialized Set.contains(_:)(0, v26[2]) & 1) != 0)
        {
          v19 = v8;
          v20 = 1;
        }
        else
        {
          v19 = v8;
          v20 = 0;
        }
        objc_msgSend(v19, sel_setDisplayModeButtonVisibility_, v20);

        swift_bridgeObjectRelease();
        outlined consume of Binding<NavigationSplitViewColumn>?(v17, v18);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {

      }
    }
    else
    {

    }
  }
  else
  {

  }
}

void closure #1 in BarAppearanceBridge.updateBackAction(_:)(id *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  id v5;
  void *v6;
  unsigned __int8 v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v4 = *a1;
  v17 = objc_msgSend(*a1, sel_navigationItem);
  v5 = objc_msgSend(v17, sel_backAction);
  if (!v5
    || (v6 = v5,
        swift_getObjectType(),
        v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI),
        v6,
        (v7 & 1) != 0))
  {
    PreferenceList.subscript.getter();
    if (objc_msgSend(v17, sel_style) == (id)2)
    {
      v8 = objc_msgSend(v17, sel_backAction);
      if (v8)
      {

      }
      else
      {
        v10 = objc_msgSend(v4, sel_presentingViewController);
        if (v10)
        {

          if ((v18 & 1) == 0 && (objc_msgSend(v17, sel_hidesBackButton) & 1) == 0)
          {
            if (*(_QWORD *)(a3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment + 8))
            {
              type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>);
              lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>);
              swift_retain_n();
              swift_retain_n();
              PropertyList.Tracker.value<A>(_:for:)();
              swift_release_n();
            }
            else
            {
              type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>);
              lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>);
              swift_retain_n();
              PropertyList.subscript.getter();
            }
            swift_release_n();
            type metadata accessor for UIKitAction();
            v11 = swift_allocObject();
            *(_QWORD *)(v11 + 16) = v18;
            *(_QWORD *)(v11 + 24) = v19;
            *(_BYTE *)(v11 + 32) = v20;
            v12 = 0;
            v13 = 0;
            v15 = partial apply for closure #1 in closure #1 in BarAppearanceBridge.updateBackAction(_:);
            v16 = v11;
            v14 = 0;
            v9 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
            goto LABEL_7;
          }
        }
      }
    }
    v9 = 0;
LABEL_7:
    objc_msgSend(v17, sel_setBackAction_, v9, v12, v13, v14, v15, v16);

    return;
  }

}

uint64_t BarAppearanceBridge.updateBottomBarConfiguration()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _BOOL4 v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t i;
  uint64_t v22;
  id v23;
  void *v24;
  unsigned int v25;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  __int128 v31;

  v1 = v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v1, (uint64_t)&v28);
  if (!v28)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v28, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
    return 0;
  }
  v2 = v29;
  v3 = v29;
  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v28);
  if (!v2)
    return 0;
  v4 = objc_msgSend(v3, sel_toolbar);
  if (!v4)
  {
LABEL_24:

    return 0;
  }
  v5 = v4;
  v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
  swift_beginAccess();
  v7 = *v6;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v31 = xmmword_187C304D0;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_23:
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v28);

    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v28);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v27 = v3;
  v10 = *(_QWORD *)(v7 + 56) + 80 * v8;
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(_QWORD *)(v10 + 16);
  v13 = *(unsigned __int8 *)(v10 + 24);
  v14 = *(unsigned __int8 *)(v10 + 40);
  v15 = *(unsigned __int8 *)(v10 + 56);
  v16 = *(unsigned __int8 *)(v10 + 57);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)&v28);
  v17 = v11 == 0;
  if (v13)
    v17 = 0;
  if (v12)
    v18 = 0;
  else
    v18 = v16 == 2;
  v19 = v17 & v15 & v14 ^ 1;
  if (v18)
    v20 = v19;
  else
    v20 = 1;
  swift_retain();
  swift_retain();
  for (i = 0; i != 4; ++i)
  {
    v22 = outlined read-only object #0 of BarAppearanceBridge.updateBottomBarConfiguration()[i + 32];
    v23 = objc_msgSend(v5, *off_1E1B4E6A8[v22]);
    if (v23)
    {
      v24 = v23;
      swift_getObjectType();
      v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI);

      if (!v25)
        continue;
    }
    if (v20)
      __asm { BR              X8 }
    __asm { BR              X8 }
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return 1;
}

Swift::Void __swiftcall ContextMenuBridge.hostRemovedFromWindow()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD v7[6];

  v1 = *(void **)(v0 + direct field offset for ContextMenuBridge.interaction);
  if (v1)
  {
    v2 = objc_opt_self();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = partial apply for closure #1 in ContextMenuBridge.hostRemovedFromWindow();
    *(_QWORD *)(v4 + 24) = v3;
    v7[4] = partial apply for thunk for @callee_guaranteed () -> ();
    v7[5] = v4;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 1107296256;
    v7[2] = thunk for @escaping @callee_guaranteed () -> ();
    v7[3] = &block_descriptor_60_0;
    v5 = _Block_copy(v7);
    v6 = v1;
    swift_retain();
    swift_release();
    objc_msgSend((id)v2, sel_performWithoutAnimation_, v5);

    _Block_release(v5);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((v2 & 1) != 0)
      __break(1u);
  }
}

void type metadata accessor for [ToolbarPlacement.Role](uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for ToolbarPlacement.Role);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t outlined init with copy of TimelineInvalidationAction(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TimelineInvalidationAction(a2, a1);
  return a2;
}

uint64_t AlwaysOnBridge.update(environment:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  uint64_t result;
  __int128 v6;
  _BYTE v7[8];

  v3 = *((_QWORD *)a1 + 1);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(_QWORD *)&v6 = v6 | 0x20;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  if ((AlwaysOnBridge.isActiveHost.getter() & 1) != 0)
  {
    *(_QWORD *)&v6 = *(_QWORD *)(v1 + 32);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnFrameSpecifier>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnFrameSpecifier> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnFrameSpecifier>);
    v4 = (id)v6;
    swift_retain();
    PropertyList.subscript.setter();
    if (v3)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

      swift_release();
      swift_release();
    }
    else
    {

    }
    swift_release();
  }
  swift_weakInit();
  outlined init with copy of TimelineInvalidationAction((uint64_t)&v6, (uint64_t)v7);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnInvalidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*((_QWORD *)a1 + 1))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of weak AnyGestureResponder?((uint64_t)&v6);
  v6 = *a1;
  result = EnvironmentValues.isLuminanceReduced.getter();
  *(_BYTE *)(v1 + 40) = result & 1;
  return result;
}

uint64_t outlined destroy of weak AnyGestureResponder?(uint64_t a1)
{
  swift_weakDestroy();
  return a1;
}

uint64_t AlwaysOnBridge.isActiveHost.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  char v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;

  v1 = v0;
  result = MEMORY[0x18D760234](v0 + 16);
  if (!result)
    goto LABEL_23;
  v3 = (void *)result;
  v4 = (id)specialized UIHostingController.host.getter();

  v5 = objc_msgSend(v4, sel_window);
  if (!v5 || (v6 = objc_msgSend(v5, sel_windowScene), v5, !v6))
  {
    v18 = 0;
    return v18 & 1;
  }
  v7 = objc_msgSend(v6, sel_windows);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIWindow);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v22 = MEMORY[0x1E0DEE9D8];
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v9 = result;
    if (result)
      goto LABEL_6;
LABEL_19:
    swift_bridgeObjectRelease_n();
    v19 = MEMORY[0x1E0DEE9D8];
LABEL_20:
    v18 = specialized Sequence.contains(where:)((uint64_t (*)(id *))partial apply for closure #2 in AlwaysOnBridge.isActiveHost.getter, v1, v19);
    swift_bridgeObjectRelease();

    return v18 & 1;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v9)
    goto LABEL_19;
LABEL_6:
  if (v9 >= 1)
  {
    v20 = v6;
    v21 = v1;
    v10 = 0;
    v11 = MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v8 & 0xC000000000000001) != 0)
        v13 = (id)MEMORY[0x18D75E3BC](v10, v8);
      else
        v13 = *(id *)(v8 + 8 * v10 + 32);
      v14 = v13;
      v15 = objc_msgSend(v13, sel_rootViewController, v20, v21);
      if (v15
        && (v16 = v15,
            v17 = objc_msgSend(v15, sel__effectiveControllersForAlwaysOnTimelines),
            v16,
            v17))
      {
        type metadata accessor for UIViewController & _UIBacklightEnvironmentObserver();
        v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v14 = v17;
      }
      else
      {
        v12 = v11;
      }

      ++v10;
      specialized Array.append<A>(contentsOf:)(v12);
    }
    while (v9 != v10);
    swift_bridgeObjectRelease_n();
    v19 = v22;
    v6 = v20;
    v1 = v21;
    goto LABEL_20;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  id v15;

  if (a3 >> 62)
    goto LABEL_16;
  v5 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    v6 = 4;
    while (1)
    {
      v7 = (a3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18D75E3BC](v6 - 4, a3) : *(id *)(a3 + 8 * v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v15 = v7;
      v10 = a1(&v15);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v12 & 1;
      }
      v11 = v10;

      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v12 = 1;
        return v12 & 1;
      }
      ++v6;
      if (v9 == v5)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  v12 = 0;
  return v12 & 1;
}

unint64_t type metadata accessor for UIViewController & _UIBacklightEnvironmentObserver()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIViewController & _UIBacklightEnvironmentObserver;
  if (!lazy cache variable for type metadata for UIViewController & _UIBacklightEnvironmentObserver)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIViewController & _UIBacklightEnvironmentObserver);
  }
  return result;
}

uint64_t type metadata accessor for KeyboardShortcutBridge()
{
  return objc_opt_self();
}

uint64_t UIHostingController.alwaysOnBridge.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + direct field offset for UIHostingController.alwaysOnBridge) = a1;
  return swift_release();
}

void UIHostingController.toolbarBridge.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + direct field offset for UIHostingController.toolbarBridge);
  *(_QWORD *)(v1 + direct field offset for UIHostingController.toolbarBridge) = a1;

}

uint64_t type metadata accessor for AlwaysOnBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AlwaysOnBridge);
}

uint64_t AlwaysOnBridge.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_DWORD *)(v0 + 44) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_WORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = MEMORY[0x1E0DEE9D8];
  return v0;
}

uint64_t outlined destroy of KeyboardShortcutSource?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for KeyboardShortcutSource?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for KeyboardShortcutSource?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyboardShortcutSource?)
  {
    type metadata accessor for KeyboardShortcutSource();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyboardShortcutSource?);
  }
}

uint64_t KeyboardShortcutBridge.flushKeyCommands(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  void (*v10)(id, uint64_t, uint64_t, uint64_t, uint64_t);
  id v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_shortcutMap);
  swift_beginAccess();
  v25 = v2;
  v3 = *v2;
  v27 = *v2 + 64;
  v4 = 1 << *(_BYTE *)(*v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(*v2 + 64);
  v28 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (v6)
    goto LABEL_6;
LABEL_7:
  v14 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v14 < v28)
    {
      v15 = *(_QWORD *)(v27 + 8 * v14);
      ++v8;
      if (v15)
        goto LABEL_22;
      v8 = v14 + 1;
      if (v14 + 1 >= v28)
        goto LABEL_26;
      v15 = *(_QWORD *)(v27 + 8 * v8);
      if (v15)
        goto LABEL_22;
      v8 = v14 + 2;
      if (v14 + 2 >= v28)
        goto LABEL_26;
      v15 = *(_QWORD *)(v27 + 8 * v8);
      if (v15)
        goto LABEL_22;
      v8 = v14 + 3;
      if (v14 + 3 >= v28)
        goto LABEL_26;
      v15 = *(_QWORD *)(v27 + 8 * v8);
      if (v15)
      {
LABEL_22:
        v6 = (v15 - 1) & v15;
        for (i = __clz(__rbit64(v15)) + (v8 << 6); ; i = v12 | (v8 << 6))
        {
          v17 = *(_QWORD *)(v3 + 56) + 24 * i;
          v19 = *(void **)v17;
          v18 = *(_QWORD *)(v17 + 8);
          v20 = *(_QWORD *)(v17 + 16);
          outlined init with copy of KeyboardShortcutSource?(a1, (uint64_t)v30);
          v21 = v31;
          if (v31)
          {
            v9 = v32;
            __swift_project_boxed_opaque_existential_1(v30, v31);
            v10 = *(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16);
            v11 = v19;
            swift_retain();
            v10(v11, v18, v20, v21, v9);
            swift_release();

            result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
            if (!v6)
              goto LABEL_7;
          }
          else
          {
            result = outlined destroy of KeyboardShortcutSource?((uint64_t)v30);
            if (!v6)
              goto LABEL_7;
          }
LABEL_6:
          v12 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }
      v16 = v14 + 4;
      if (v16 < v28)
      {
        v15 = *(_QWORD *)(v27 + 8 * v16);
        if (v15)
        {
          v8 = v16;
          goto LABEL_22;
        }
        while (1)
        {
          v8 = v16 + 1;
          if (__OFADD__(v16, 1))
            goto LABEL_28;
          if (v8 >= v28)
            break;
          v15 = *(_QWORD *)(v27 + 8 * v8);
          ++v16;
          if (v15)
            goto LABEL_22;
        }
      }
    }
LABEL_26:
    swift_release();
    *v25 = MEMORY[0x1E0DEE9E0];
    swift_bridgeObjectRelease();
    v22 = v26 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_currentBindings;
    v23 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)v22 = MEMORY[0x1E0DEE9D8];
    *(_DWORD *)(v22 + 8) = -1;
    swift_bridgeObjectRelease();
    v24 = v26 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_updatedBindings;
    *(_QWORD *)v24 = v23;
    *(_DWORD *)(v24 + 8) = -1;
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t UIHostingController.navigationBridge.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + direct field offset for UIHostingController.navigationBridge) = a1;
  return swift_release();
}

uint64_t _UIHostingView.setPreferenceBridge(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = ViewGraph.preferenceBridge.getter();
  if (!v2 || (v3 = v2, result = swift_release(), v3 != a1))
  {
    swift_retain();
    return ViewGraph.preferenceBridge.setter();
  }
  return result;
}

id @objc ToolbarBridge.init()()
{
  return ToolbarBridge.init()();
}

uint64_t ToolbarBridge.update(environment:context:)(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t updated;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[4];
  __int16 v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  _BYTE *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _BYTE v41[32];
  uint64_t v42;
  _OWORD v43[3];
  uint64_t v44;
  _BYTE v45[96];
  uint64_t v46;
  __int16 v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  v3 = v2;
  v46 = MEMORY[0x1E0DEE9E8];
  v47 = 0;
  v48 = 0;
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v45);
  v5 = *a1;
  v6 = a1[1];
  EnvironmentValues.horizontalSizeClass.getter();
  v45[80] = v49;
  *(_QWORD *)&v43[0] = v5;
  *((_QWORD *)&v43[0] + 1) = v6;
  EnvironmentValues.verticalSizeClass.getter();
  v45[81] = v49;
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v45, (uint64_t)v43);
  v7 = (uint64_t)v2 + direct field offset for ToolbarBridge.updateContext;
  swift_beginAccess();
  outlined assign with take of Toolbar.UpdateContext?((uint64_t)v43, v7);
  swift_endAccess();
  if (ToolbarBridge.allowsUpdates.getter())
  {
    v8 = (__int128 *)((char *)v3 + direct field offset for ToolbarBridge.lastEnvironment);
    swift_beginAccess();
    v49 = *v8;
    EnvironmentValues.horizontalSizeClass.getter();
    if (v41[0] == 2)
    {
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      v43[0] = *(_OWORD *)a1;
      EnvironmentValues.horizontalSizeClass.getter();
      if (v49 == 2 || ((v49 ^ v41[0]) & 1) != 0)
      {
        v9 = (_QWORD *)((char *)v3 + direct field offset for ToolbarBridge.toolbarStorage);
        v10 = *(_QWORD *)((char *)v3 + direct field offset for ToolbarBridge.toolbarStorage + 40);
        if (v10)
        {
          v11 = *v9;
          v12 = v9[1];
          v13 = v9[2];
          v14 = v9[3];
          v15 = v9[4];
          v16 = v9[6];
          v17 = v9[7];
          *(_QWORD *)&v49 = *v9;
          *((_QWORD *)&v49 + 1) = v12;
          v50 = v13;
          v51 = v14;
          v52 = v15;
          v53 = v10;
          v54 = v16 & 1;
          v55 = v17;
          v18 = *(unsigned int *)((char *)v3 + direct field offset for ToolbarBridge.lastBarContext) | ((unint64_t)(*(unsigned __int16 *)((char *)v3 + direct field offset for ToolbarBridge.lastBarContext + 4) | (*((unsigned __int8 *)v3 + direct field offset for ToolbarBridge.lastBarContext + 6) << 16)) << 32);
          if (*(_DWORD *)((char *)v3 + direct field offset for ToolbarBridge.lastBarContext) != 2)
          {
            v35 = HIDWORD(v18);
            v36 = v18 >> 40;
            v38 = v11;
            v39 = v16;
            updated = outlined init with copy of Toolbar.UpdateContext((uint64_t)v45, (uint64_t)v43);
            v40 = &v34;
            MEMORY[0x1E0C80A78](updated, v20);
            v37 = v25;
            v25[2] = v3;
            v25[3] = &v49;
            v26 = v18 & 0x101;
            v27 = BYTE2(v18) & 1;
            v28 = BYTE3(v18) & 1;
            v29 = v35;
            v30 = v36;
            v31 = BYTE6(v18) & 1;
            v32 = v45;
            v33 = &v46;
            swift_bridgeObjectRetain();
            outlined copy of Binding<NavigationSplitViewColumn>?(v13, v14);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            static ToolbarStrategy.withUpdater<A>(_:_:body:)(v3, (uint64_t)v43, (void (*)(char *))partial apply for closure #1 in ToolbarBridge.update(environment:context:));
            outlined consume of ToolbarStorage?(v38, v12, v13, v14, v15, v10);
            outlined destroy of Toolbar.UpdateContext((uint64_t)v43);
          }
        }
      }
    }
  }
  outlined init with copy of HostingControllerOverrides((uint64_t)v45, (uint64_t)v41);
  v21 = (void *)MEMORY[0x18D760234](&v42);
  outlined destroy of HostingControllerOverrides((uint64_t)v41);
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v45, (uint64_t)v43);
  if (v21)
  {
    outlined destroy of Toolbar.UpdateContext((uint64_t)v43);
LABEL_12:

    v22 = ToolbarBridge.uiSafeAreaTransitionState.getter();
    specialized EnvironmentValues.safeAreaTransitionState.setter(v22, (uint64_t)&protocol witness table for ToolbarSafeAreaTransitionState);
    swift_release();
    goto LABEL_13;
  }
  v21 = (void *)MEMORY[0x18D760234](&v44);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v43);
  if (v21)
    goto LABEL_12;
LABEL_13:
  specialized ToolbarBridge.uiInputAccessoryGenerator.getter();
  swift_retain();
  specialized EnvironmentValues.uiInputAccessoryGenerator.setter();
  swift_release();
  v23 = v46;
  swift_bridgeObjectRetain();
  $defer #1 <A>() in ToolbarBridge.update(environment:context:)((uint64_t)v3, a1);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v45);
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t $defer #1 <A>() in ToolbarBridge.update(environment:context:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _OWORD v8[6];

  v3 = *a2;
  v4 = a2[1];
  v5 = (_QWORD *)(a1 + direct field offset for ToolbarBridge.lastEnvironment);
  swift_beginAccess();
  *v5 = v3;
  v5[1] = v4;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  memset(v8, 0, sizeof(v8));
  v6 = a1 + direct field offset for ToolbarBridge.updateContext;
  swift_beginAccess();
  outlined assign with take of Toolbar.UpdateContext?((uint64_t)v8, v6);
  return swift_endAccess();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return dispatch thunk of StatefulRule.updateValue()();
}

unint64_t type metadata accessor for ViewList()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ViewList;
  if (!lazy cache variable for type metadata for ViewList)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  }
  return result;
}

uint64_t outlined consume of Transaction?(uint64_t result)
{
  if (result != 1)
    return swift_release();
  return result;
}

uint64_t outlined copy of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

_QWORD *initializeBufferWithCopyOfBuffer for SymmetricallyScaledTextLayout(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for StaticIf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_WORD *initializeWithCopy for Button(_WORD *a1, _WORD *a2, uint64_t a3)
{
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _WORD *v44;

  v5 = a1;
  *a1 = *a2;
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 2;
  v10 = ((unint64_t)v5 + v9) & ~(v8 | 7);
  v11 = ((unint64_t)a2 + v9) & ~(v8 | 7);
  v12 = *(_QWORD *)(v7 + 64) + ((v8 + 75) & ~v8);
  if ((unint64_t)(v12 + 1) > 0x30)
    v13 = v12 + 1;
  else
    v13 = 48;
  v14 = *(unsigned __int8 *)(v11 + v13);
  if (v14 >= 3)
  {
    if (v13 <= 3)
      v15 = v13;
    else
      v15 = 4;
    __asm { BR              X12 }
  }
  if (v14 == 2)
  {
    v29 = *(_QWORD *)v11;
    v30 = *(_QWORD *)(v11 + 8);
    v31 = *(_BYTE *)(v11 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v11, v30, v31);
    *(_QWORD *)v10 = v29;
    *(_QWORD *)(v10 + 8) = v30;
    *(_BYTE *)(v10 + 16) = v31;
    v32 = *(void **)(v11 + 24);
    *(_QWORD *)(v10 + 24) = v32;
    v33 = *(_QWORD *)(v11 + 40);
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
    *(_QWORD *)(v10 + 40) = v33;
    *(_BYTE *)(v10 + v13) = 2;
    v34 = v32;
LABEL_14:
    swift_retain();
    goto LABEL_15;
  }
  if (v14 != 1)
  {
    v35 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v35;
    *(_BYTE *)(v10 + v13) = 0;
    goto LABEL_14;
  }
  v43 = a3;
  v16 = *(_QWORD *)v11;
  v17 = *(_QWORD *)(v11 + 8);
  v44 = v5;
  v18 = *(_QWORD *)(v11 + 16);
  v19 = *(_QWORD *)(v11 + 24);
  v20 = *(_BYTE *)(v11 + 34);
  v21 = *(_WORD *)(v11 + 32);
  v41 = *(_QWORD *)(v7 + 64);
  v42 = v6;
  v40 = *(_QWORD *)(v6 - 8);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v11, v17, v18, v19, v21, v20);
  *(_QWORD *)v10 = v16;
  *(_QWORD *)(v10 + 8) = v17;
  *(_QWORD *)(v10 + 16) = v18;
  *(_QWORD *)(v10 + 24) = v19;
  *(_WORD *)(v10 + 32) = v21;
  *(_BYTE *)(v10 + 34) = v20;
  v22 = (v10 + 42) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v11 + 42) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)v23;
  v38 = *(_QWORD *)(v23 + 8);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = *(_QWORD *)(v23 + 24);
  v39 = *(_BYTE *)(v23 + 34);
  v27 = *(_WORD *)(v23 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v23, v38, v25, v26, v27, v39);
  *(_QWORD *)v22 = v24;
  *(_QWORD *)(v22 + 8) = v38;
  *(_QWORD *)(v22 + 16) = v25;
  *(_QWORD *)(v22 + 24) = v26;
  a3 = v43;
  v5 = v44;
  *(_WORD *)(v22 + 32) = v27;
  *(_BYTE *)(v22 + 34) = v39;
  v28 = (v8 + 35 + v23) & ~v8;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v40 + 16))((v8 + 35 + v22) & ~v8, v28, v42);
  *(_BYTE *)(((v8 + 35 + v22) & ~v8) + v41) = *(_BYTE *)(v28 + v41);
  *(_BYTE *)(v10 + v13) = 1;
LABEL_15:
  v36 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v36 + 16))((v13 + *(unsigned __int8 *)(v36 + 80) + 1 + v10) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80), (v13 + *(unsigned __int8 *)(v36 + 80) + 1 + v11) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
  return v5;
}

_QWORD *initializeBufferWithCopyOfBuffer for AlertTransformModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t outlined consume of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t destroy for OnChangeOfSuggestionsModifier()
{
  swift_release();
  return swift_release();
}

uint64_t destroy for StaticIf(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80));
}

uint64_t destroy for Button(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (a1 + (v6 | 7) + 2) & ~(v6 | 7);
  v8 = *(_QWORD *)(v5 + 64) + ((v6 + 75) & ~v6);
  if ((unint64_t)(v8 + 1) > 0x30)
    v9 = v8 + 1;
  else
    v9 = 48;
  v10 = *(unsigned __int8 *)(v7 + v9);
  if (v10 >= 3)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));

    goto LABEL_13;
  }
  if (v10 != 1)
  {
LABEL_13:
    swift_release();
    return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((v7 | 1) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  }
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_WORD *)(v7 + 32), *(_BYTE *)(v7 + 34));
  v12 = (v7 + 42) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), *(_WORD *)(v12 + 32), *(_BYTE *)(v12 + 34));
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + v12 + 35) & ~v6, v4);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((v7 | 1) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t destroy for WrappingLabelStyleView(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t outlined consume of Environment<Bool>.Content(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for ResolvedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = *(_BYTE *)(v8 + 2);
  *(_WORD *)v7 = *(_WORD *)v8;
  *(_BYTE *)(v7 + 2) = v9;
  return a1;
}

uint64_t destroy for PickerBuilder.Content(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
}

uint64_t initializeWithCopy for PickerBuilder.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 16))();
  return a1;
}

uint64_t initializeWithCopy for SubscriptionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  return a1;
}

uint64_t destroy for SubscriptionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  (*(void (**)(void))(v4 + 8))();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((*(_QWORD *)(v4 + 64)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_release();
}

uint64_t destroy for CollectionViewCellModifier(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  v4 = a1 + a2[6];
  type metadata accessor for Environment<UIListContentConfiguration?>.Content(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = type metadata accessor for UIListContentConfiguration();
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  v7 = a1 + a2[7];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = type metadata accessor for UIListContentConfiguration();
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8), *(_BYTE *)(a1 + a2[8] + 16));
  result = *(_QWORD *)(a1 + a2[13]);
  if (result != 1)
    result = swift_release();
  v11 = a1 + a2[16];
  v12 = *(unsigned __int8 *)(v11 + 70);
  if (v12 == 2)
  {
LABEL_14:
    __swift_destroy_boxed_opaque_existential_1(v11);
    return swift_release();
  }
  if (v12 != 1)
  {
    if (*(_BYTE *)(v11 + 70))
      return result;
    goto LABEL_14;
  }
  return swift_release();
}

uint64_t outlined consume of Environment<CGFloat?>.Content(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for CollectionViewCellModifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  type metadata accessor for Environment<UIListContentConfiguration?>.Content(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = type metadata accessor for UIListContentConfiguration();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      type metadata accessor for UIListContentConfiguration?(0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
  }
  else
  {
    *v11 = *v12;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v19 = type metadata accessor for UIListContentConfiguration();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      type metadata accessor for UIListContentConfiguration?(0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
  }
  else
  {
    *v17 = *v18;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_QWORD *)v24;
  v26 = *(_QWORD *)(v24 + 8);
  v27 = *(_BYTE *)(v24 + 16);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v24, v26, v27);
  *(_QWORD *)v23 = v25;
  *(_QWORD *)(v23 + 8) = v26;
  *(_BYTE *)(v23 + 16) = v27;
  v28 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_OWORD *)(v30 + 16);
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *(_OWORD *)(v29 + 16) = v31;
  *(_BYTE *)(v29 + 32) = *(_BYTE *)(v30 + 32);
  v32 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v32) = *(_BYTE *)(a2 + v32);
  v33 = a3[13];
  v34 = a1 + v33;
  v35 = a2 + v33;
  if (*(_QWORD *)v35 == 1)
  {
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  }
  else
  {
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
    swift_retain();
  }
  v36 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v36) = *(_QWORD *)(a2 + v36);
  v37 = a3[16];
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = *(unsigned __int8 *)(a2 + v37 + 70);
  if (v40 == 2)
  {
    v41 = *(_OWORD *)(v39 + 24);
    *(_OWORD *)(v38 + 24) = v41;
    (**(void (***)(uint64_t, uint64_t))(v41 - 8))(v38, v39);
    *(_QWORD *)(v38 + 40) = *(_QWORD *)(v39 + 40);
    *(_QWORD *)(v38 + 48) = *(_QWORD *)(v39 + 48);
  }
  else if (v40 == 1)
  {
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *(_QWORD *)(v38 + 8) = *(_QWORD *)(v39 + 8);
  }
  else
  {
    v42 = *(_OWORD *)(v39 + 24);
    *(_OWORD *)(v38 + 24) = v42;
    (**(void (***)(uint64_t, uint64_t))(v42 - 8))(v38, v39);
    *(_BYTE *)(v38 + 40) = *(_BYTE *)(v39 + 40);
    *(_QWORD *)(v38 + 48) = *(_QWORD *)(v39 + 48);
    *(_QWORD *)(v38 + 56) = *(_QWORD *)(v39 + 56);
    *(_DWORD *)(v38 + 64) = *(_DWORD *)(v39 + 64);
    *(_WORD *)(v38 + 68) = *(_WORD *)(v39 + 68);
  }
  *(_BYTE *)(v38 + 70) = v40;
  swift_retain();
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  return a1;
}

uint64_t initializeWithCopy for PlainButtonStyleBase(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(v2 + 16);
  LOBYTE(v2) = *(_BYTE *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v2);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v2;
  return a1;
}

uint64_t outlined copy of Environment<Bool>.Content(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_retain();
  return result;
}

void type metadata accessor for Environment<UIListContentConfiguration?>.Content(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for Environment<UIListContentConfiguration?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for UIListContentConfiguration?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
}

uint64_t initializeWithCopy for AsOptional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for _ButtonGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = (_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  swift_retain();
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *v6;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t destroy for AsOptional(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t destroy for _ButtonGesture(uint64_t a1)
{
  uint64_t result;

  result = swift_release();
  if (*(_QWORD *)(a1 + 16))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for OnTestViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t destroy for OnTestViewModifier()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for TextFieldState.DeprecatedActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t destroy for BorderlessButtonStyleBase(uint64_t a1)
{
  outlined consume of Environment<KeyboardShortcut?>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_BYTE *)(a1 + 25));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t outlined consume of Environment<KeyboardShortcut?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return swift_bridgeObjectRelease();
  else
    return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for EditModeScopeModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for FormatInputToString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

_BYTE *initializeWithCopy for AccessibilityLargeContentViewModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t outlined consume of ResolvedTableRowIDs.Storage(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_bridgeObjectRelease();
  else
    return swift_release();
}

uint64_t destroy for Section(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(a2[4] - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  result = (*(uint64_t (**)(unint64_t))(v9 + 8))(v10);
  if (*(_QWORD *)(((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for LazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + 24 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 24 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t initializeWithCopy for Section(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v20 + 8) < 0xFFFFFFFFuLL)
  {
    v21 = *(_OWORD *)v20;
    *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
    *(_OWORD *)v19 = v21;
  }
  else
  {
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
    *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
    swift_retain();
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithCopy for ButtonRepeatModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char v7;
  id v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = *(_BYTE *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  v8 = v5;
  swift_retain();
  outlined copy of ResolvedTableRowIDs.Storage(v6, v7);
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = v7;
  return a1;
}

uint64_t outlined copy of ResolvedTableRowIDs.Storage(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_bridgeObjectRetain();
  else
    return swift_retain();
}

uint64_t destroy for TouchEvent()
{
  return swift_release();
}

uint64_t destroy for LazyVStack(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t destroy for ButtonRepeatModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return outlined consume of ResolvedTableRowIDs.Storage(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
}

uint64_t initializeWithCopy for ButtonSpringLoadedInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for SettingsLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  LOBYTE(v5) = *(_BYTE *)(v8 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v8, v5);
  *(_QWORD *)v7 = v9;
  *(_BYTE *)(v7 + 8) = v5;
  return a1;
}

uint64_t destroy for PlatformItemListButtonStyle(uint64_t a1)
{
  outlined consume of Environment<Color?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for BorderlessButtonStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;

  v2 = a2;
  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = v2[2];
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v6, (char)v2);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = (_BYTE)v2;
  return a1;
}

uint64_t initializeWithCopy for BorderlessButtonStyleBase(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 25);
  v8 = *(unsigned __int8 *)(a2 + 24);
  outlined copy of Environment<KeyboardShortcut?>.Content(*(_QWORD *)a2, v5, v6, v8, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 25) = v7;
  v9 = *(_QWORD *)(v2 + 32);
  LOBYTE(v5) = *(_BYTE *)(v2 + 40);
  outlined copy of Environment<Bool>.Content(v9, v5);
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v5;
  v10 = *(_QWORD *)(v2 + 48);
  LOBYTE(v2) = *(_BYTE *)(v2 + 56);
  outlined copy of Environment<Bool>.Content(v10, v2);
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v2;
  return a1;
}

uint64_t outlined copy of Environment<KeyboardShortcut?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return swift_bridgeObjectRetain();
  else
    return swift_retain();
}

uint64_t initializeWithCopy for PlatformItemListButtonStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v2 = a2;
  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = v2[2];
  v7 = *((_BYTE *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = v2[4];
  v9 = *((_BYTE *)v2 + 40);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  v10 = v2[6];
  LOBYTE(v2) = *((_BYTE *)v2 + 56);
  outlined copy of Environment<Bool>.Content(v10, (char)v2);
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = (_BYTE)v2;
  return a1;
}

uint64_t destroy for ButtonSpringLoadedInteraction()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t destroy for BorderlessButtonStyle(uint64_t a1)
{
  outlined consume of Environment<Color?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeBufferWithCopyOfBuffer for SectionStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  }
  return a1;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance StyleBodyAccessor<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;

  return StyleBodyAccessor.updateBody(of:changed:)(a1, a2, *v3, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t StyleBodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v12;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Value;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD v24[6];

  v12 = a2;
  v14 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  v19 = v18;
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, Value, a4);
  if ((v12 & 1) != 0 || (v19 & 1) != 0)
  {
    v24[5] = a3;
    MEMORY[0x1E0C80A78](v20, v21);
    v24[-8] = a4;
    v24[-7] = a5;
    v24[-6] = a6;
    v24[-5] = a7;
    LODWORD(v24[-4]) = a3;
    HIDWORD(v24[-4]) = v22;
    v24[-3] = a1;
    v24[-2] = v16;
    v24[1] = a4;
    v24[2] = a5;
    v24[3] = a6;
    v24[4] = a7;
    type metadata accessor for StyleBodyAccessor();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a4);
}

void type metadata accessor for StyleBodyAccessor()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t closure #1 in StyleBodyAccessor.updateBody(of:changed:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t Value;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t AssociatedTypeWitness;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v34 = a5;
  v35 = a3;
  v40 = a2;
  v41 = a7;
  v37 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v38 = (char *)&v33 - v10;
  v36 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v36, v11);
  v12 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v33 - v15;
  v17 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v33 - v24;
  Value = AGGraphGetValue();
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v27(v25, Value, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v37, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(a6 + 72))(v16, a4, a6);
  v27(v21, (uint64_t)v25, a4);
  (*(void (**)(uint64_t))(v34 + 40))(v35);
  v28 = v38;
  v29 = AssociatedTypeWitness;
  swift_dynamicCast();
  v30 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(a6 + 88))(v28, a4, a6);
  v31 = *(void (**)(char *, uint64_t))(v17 + 8);
  v31(v21, a4);
  v31(v25, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v30, v29);
}

uint64_t initializeWithCopy for LazyHGrid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32 + a1) & ~v7;
  v9 = (v7 + 32 + a2) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  return a1;
}

uint64_t destroy for TabView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ~v6;
  v8 = v6 + 16;
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
  {
    v12 = v8 & ~v6;
    if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)v10 + v6 + 8) & v7))
    {
LABEL_5:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v10 + v6 + 8) & v7, v4);
    }
  }
  else
  {
    v11 = *v10;
    if ((unint64_t)*v10 >= 0xFFFFFFFF)
      LODWORD(v11) = -1;
    v12 = v8 & ~v6;
    if ((_DWORD)v11 == -1)
      goto LABEL_5;
  }
  v13 = (a1 + v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v13 + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
  }
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v13 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_QWORD *initializeWithCopy for TabView(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v23;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ~v8;
  v10 = (v8 + 16) & ~v8;
  v11 = *(_QWORD *)(v7 + 64);
  v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    v14 = v10 + v11;
    if ((*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9))
    {
LABEL_5:
      memcpy(__dst, __src, v14);
      goto LABEL_8;
    }
  }
  else
  {
    v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    v14 = v10 + v11;
    if ((_DWORD)v13 != -1)
      goto LABEL_5;
  }
  *__dst = *__src;
  v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v12;
  v23 = ((unint64_t)v15 + v8 + 8) & v9;
  v16 = ((unint64_t)v12 + v8 + 8) & v9;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  swift_retain();
  swift_retain();
  v17(v23, v16, v6);
LABEL_8:
  v18 = ((unint64_t)__dst + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)__src + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v19 + 8) < 0xFFFFFFFFuLL)
  {
    v20 = *(_OWORD *)v19;
    *(_BYTE *)(v18 + 16) = *(_BYTE *)(v19 + 16);
    *(_OWORD *)v18 = v20;
  }
  else
  {
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
    *(_BYTE *)(v18 + 16) = *(_BYTE *)(v19 + 16);
    swift_retain();
    swift_retain();
  }
  v21 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v21 + 16))((v18 + *(unsigned __int8 *)(v21 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), (v19 + *(unsigned __int8 *)(v21 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  return __dst;
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedButtonStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, a1, type metadata accessor for PrimitiveButtonStyleConfiguration);
}

uint64_t protocol witness for StyleModifier.style.setter in conformance UIKitButtonStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t destroy for LazyHGrid(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for ContextMenuModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_BYTE *)(v7 + 4) = *(_BYTE *)(v8 + 4);
  return a1;
}

uint64_t destroy for ContainerRelativeFrameModifier(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for ContainerRelativeFrameModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  return a1;
}

uint64_t initializeWithCopy for AccessibilityScrollableContextModifier(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;

  v4 = *(unsigned __int8 *)(a2 + 70);
  if (v4 == 2)
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  else if (v4 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
  }
  *(_BYTE *)(a1 + 70) = v4;
  swift_retain();
  return a1;
}

uint64_t destroy for AccessibilityScrollableContextModifier(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 70);
  if (v1 == 2)
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1(result);
    return swift_release();
  }
  if (v1 != 1)
  {
    if (*(_BYTE *)(result + 70))
      return result;
    goto LABEL_4;
  }
  return swift_release();
}

__n128 __swift_memcpy178_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_WORD *)(a1 + 176) = *((_WORD *)a2 + 88);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t destroy for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader(uint64_t a1)
{
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t initializeBufferWithCopyOfBuffer for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t initializeWithCopy for EditModeScopeModifier.TransformModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for ContentConfigurationBasedRootEnvironment(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = a2 + 72;
  v6 = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  if (v6 == 1)
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)v7;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(v7 + 8);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = v6;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    swift_retain();
  }
  return a1;
}

uint64_t destroy for HostingContentViewRootModifier(uint64_t a1)
{
  uint64_t result;

  swift_release();
  swift_release();
  result = *(_QWORD *)(a1 + 72);
  if (result != 1)
    return swift_release();
  return result;
}

uint64_t ResolvedButtonStyle.body.getter@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (**v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (**v81)();
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)();
  uint64_t (*v86)();
  uint64_t (*v87)();
  uint64_t (*v88)();
  uint64_t v89;
  uint64_t v90;
  uint64_t (**v91)();
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (**v95)();
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v99)();
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)();
  uint64_t (*v107)();
  uint64_t (*v108)();
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v2 = v1;
  v124 = a1;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>(0);
  v105 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v114 = (uint64_t)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>(0);
  v112 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v111 = (uint64_t)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v119 = (uint64_t)&v99 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v122 = (uint64_t)&v99 - v14;
  v110 = type metadata accessor for ButtonAction();
  MEMORY[0x1E0C80A78](v110, v15);
  v17 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v104 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v100 = (char *)&v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v99 - v23;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v26 = v25;
  MEMORY[0x1E0C80A78](v25, v27);
  v29 = (char *)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v99 - v32;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>();
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v99 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
  v123 = (_BYTE *)v38;
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)&v99 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>>, ModifiedConte();
  MEMORY[0x1E0C80A78](v113, v42);
  v121 = (uint64_t)&v99 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>(0);
  v117 = v44;
  MEMORY[0x1E0C80A78](v44, v45);
  v120 = (uint64_t)&v99 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, Accessibili(0);
  v116 = v47;
  MEMORY[0x1E0C80A78](v47, v48);
  v118 = (uint64_t)&v99 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifi();
  MEMORY[0x1E0C80A78](v50, v51);
  v115 = (uint64_t)&v99 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v2, (uint64_t)v24, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v53 = v24[1];
  *v29 = *v24;
  v29[1] = v53;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v24[*(int *)(v18 + 24)], (uint64_t)&v29[*(int *)(v26 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  v125 = v24;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v29, (uint64_t)v33);
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v33, (uint64_t)v37);
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v33);
  LOBYTE(v26) = *v2;
  LOBYTE(v33) = v2[1];
  v54 = swift_allocObject();
  *(_BYTE *)(v54 + 16) = v26;
  *(_BYTE *)(v54 + 17) = (_BYTE)v33;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v37, (uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>);
  v55 = (uint64_t)v41;
  v56 = (uint64_t (**)(uint64_t))&v41[*((int *)v123 + 9)];
  v57 = (uint64_t)v100;
  *v56 = partial apply for closure #1 in View.platformItemButtonRole(_:);
  v56[1] = (uint64_t (*)(uint64_t))v54;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>);
  v123 = v2;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v2, v57, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v57 + *(int *)(v18 + 24), (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v110 = *(_QWORD *)v17;
    v109 = *((_QWORD *)v17 + 1);
    v108 = (uint64_t (*)())v17[16];
    v107 = (uint64_t (*)())*((_QWORD *)v17 + 3);
    v99 = (uint64_t (*)())*((_QWORD *)v17 + 4);
    v106 = (uint64_t (*)())*((_QWORD *)v17 + 5);
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    v110 = 0;
    v109 = 0;
    v108 = 0;
    v107 = 0;
    v99 = 0;
    v106 = 0;
  }
  v58 = (uint64_t)v125;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v57, (uint64_t)v125, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v59 = *(unsigned __int8 *)(v104 + 80);
  v103 += (v59 + 16) & ~v59;
  v60 = (v59 + 16) & ~v59;
  v104 = v60;
  v102 = v59 | 7;
  v61 = swift_allocObject();
  outlined init with take of TableCellFormula(v58, v61 + v60, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v57, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v101 = v55;
  v62 = v114;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v55, v114, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
  *(_BYTE *)(v62 + *(int *)(v105 + 36)) = 1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  v63 = swift_allocObject();
  *(_BYTE *)(v63 + 16) = 12;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  v126 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  v64 = v128;
  v65 = v129;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v66 = swift_allocObject();
  *(_QWORD *)(v66 + 16) = v64;
  *(_QWORD *)(v66 + 24) = v65;
  v67 = v111;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v62, v111, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>);
  swift_release();
  v68 = v112;
  v69 = (uint64_t *)(v67 + *(int *)(v112 + 36));
  *v69 = v66;
  v69[1] = v63;
  AccessibilityTraitSet.init(traits:)();
  v70 = v130;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v66 + 16, 0, v70);
  swift_endAccess();
  swift_release();
  swift_release();
  v71 = v67;
  v72 = v119;
  outlined init with take of TableCellFormula(v71, v119, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>);
  v73 = (uint64_t *)(v72 + *(int *)(v68 + 36));
  v74 = *v73;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v74 + 16, 0x4000000040);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v62, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>);
  v128 = 1;
  AccessibilityNullableOptionSet<>.init(adding:)();
  v75 = v126;
  v76 = v127;
  v77 = *v73 + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v77, v75, v76);
  swift_endAccess();
  swift_release();
  swift_release();
  v78 = v122;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v72, v122, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v72, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>);
  v79 = v121;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v78, v121, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>(0);
  v81 = (uint64_t (**)())(v79 + *(int *)(v80 + 36));
  *v81 = partial apply for implicit closure #2 in implicit closure #1 in AccessibilityButtonModifier.init(_:);
  v81[1] = (uint64_t (*)())v61;
  v82 = v61;
  v83 = v110;
  v84 = v109;
  v81[2] = (uint64_t (*)())v110;
  v81[3] = (uint64_t (*)())v84;
  v85 = v108;
  v86 = v107;
  v81[4] = v108;
  v81[5] = v86;
  v87 = v99;
  v88 = v106;
  v81[6] = v99;
  v81[7] = v88;
  v89 = v79
      + *(int *)(type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>>()
               + 52);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v78, v89, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>(0);
  v91 = (uint64_t (**)())(v89 + *(int *)(v90 + 36));
  *v91 = partial apply for implicit closure #2 in implicit closure #1 in AccessibilityButtonModifier.init(_:);
  v91[1] = (uint64_t (*)())v82;
  v91[2] = (uint64_t (*)())v83;
  v91[3] = (uint64_t (*)())v84;
  v91[4] = v85;
  v91[5] = v86;
  v91[6] = v87;
  v91[7] = v88;
  outlined init with take of TableCellFormula(v78, v79 + *(int *)(v113 + 52), (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>);
  swift_retain();
  outlined copy of AppIntentAction?(v83, v84, (char)v85, v86);
  swift_retain();
  outlined copy of AppIntentAction?(v83, v84, (char)v85, v86);
  swift_release();
  outlined consume of AppIntentAction?(v83, v84, (char)v85, v86);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v101, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
  v92 = (uint64_t)v125;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v123, (uint64_t)v125, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v93 = swift_allocObject();
  outlined init with take of TableCellFormula(v92, v93 + v104, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v94 = v120;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v79, v120, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>>, ModifiedConte);
  v95 = (uint64_t (**)())(v94 + *(int *)(v117 + 36));
  *v95 = partial apply for implicit closure #2 in implicit closure #1 in ResolvedButtonStyle.body.getter;
  v95[1] = (uint64_t (*)())v93;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v79, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>>, ModifiedConte);
  v96 = v118;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v94, v118, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>);
  *(_DWORD *)(v96 + *(int *)(v116 + 36)) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v94, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>);
  v97 = v115;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v96, v115, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, Accessibili);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v96, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, Accessibili);
  return outlined init with take of TableCellFormula(v97, v124, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifi);
}

uint64_t destroy for ResolvedButtonStyle(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = a1 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);

    return swift_release();
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    return swift_release();
  }
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_WORD *)(v1 + 32), *(_BYTE *)(v1 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_WORD *)(v1 + 72), *(_BYTE *)(v1 + 74));
  v3 = v1 + *(int *)(type metadata accessor for LinkDestination() + 24);
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

_WORD *initializeWithCopy for ResolvedButtonStyle(_WORD *a1, _WORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  id v29;
  uint64_t v30;

  *a1 = *a2;
  v4 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v24 = *(_QWORD *)v6;
    v25 = *((_QWORD *)v6 + 1);
    v26 = v6[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v6, v25, v26, (uint64_t (*)(void))outlined copy of AppIntentExecutor?);
    *(_QWORD *)v5 = v24;
    *((_QWORD *)v5 + 1) = v25;
    v5[16] = v26;
    v27 = *((_QWORD *)v6 + 5);
    v28 = *(_OWORD *)(v6 + 24);
    *(_OWORD *)(v5 + 24) = v28;
    *((_QWORD *)v5 + 5) = v27;
    v29 = (id)v28;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v30 = *((_QWORD *)v6 + 1);
    *(_QWORD *)v5 = *(_QWORD *)v6;
    *((_QWORD *)v5 + 1) = v30;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)v6;
  v9 = *((_QWORD *)v6 + 1);
  v10 = *((_QWORD *)v6 + 2);
  v11 = *((_QWORD *)v6 + 3);
  v12 = v6[34];
  v13 = *((_WORD *)v6 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v6, v9, v10, v11, v13, v12);
  *(_QWORD *)v5 = v8;
  *((_QWORD *)v5 + 1) = v9;
  *((_QWORD *)v5 + 2) = v10;
  *((_QWORD *)v5 + 3) = v11;
  *((_WORD *)v5 + 16) = v13;
  v5[34] = v12;
  v14 = *((_QWORD *)v6 + 5);
  v15 = *((_QWORD *)v6 + 6);
  v16 = *((_QWORD *)v6 + 7);
  v17 = *((_QWORD *)v6 + 8);
  LOBYTE(v11) = v6[74];
  v18 = *((_WORD *)v6 + 36);
  outlined copy of Environment<OpenURLAction>.Content(v14, v15, v16, v17, v18, v11);
  *((_QWORD *)v5 + 5) = v14;
  *((_QWORD *)v5 + 6) = v15;
  *((_QWORD *)v5 + 7) = v16;
  *((_QWORD *)v5 + 8) = v17;
  *((_WORD *)v5 + 36) = v18;
  v5[74] = v11;
  v19 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v20 = &v5[v19];
  v21 = &v6[v19];
  v22 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = type metadata accessor for LinkDestination.Configuration();
  v20[*(int *)(v23 + 20)] = v21[*(int *)(v23 + 20)];
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t type metadata accessor for PrimitiveButtonStyleConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for PrimitiveButtonStyleConfiguration);
}

uint64_t type metadata accessor for ButtonAction()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ButtonAction;
  if (!type metadata singleton initialization cache for ButtonAction)
    return swift_getSingletonMetadata();
  return result;
}

_WORD *initializeWithCopy for PrimitiveButtonStyleConfiguration(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  id v29;
  uint64_t v30;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v24 = *(_QWORD *)v6;
    v25 = *((_QWORD *)v6 + 1);
    v26 = v6[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v6, v25, v26, (uint64_t (*)(void))outlined copy of AppIntentExecutor?);
    *(_QWORD *)v5 = v24;
    *((_QWORD *)v5 + 1) = v25;
    v5[16] = v26;
    v27 = *((_QWORD *)v6 + 5);
    v28 = *(_OWORD *)(v6 + 24);
    *(_OWORD *)(v5 + 24) = v28;
    *((_QWORD *)v5 + 5) = v27;
    v29 = (id)v28;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v30 = *((_QWORD *)v6 + 1);
    *(_QWORD *)v5 = *(_QWORD *)v6;
    *((_QWORD *)v5 + 1) = v30;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)v6;
  v9 = *((_QWORD *)v6 + 1);
  v10 = *((_QWORD *)v6 + 2);
  v11 = *((_QWORD *)v6 + 3);
  v12 = v6[34];
  v13 = *((_WORD *)v6 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v6, v9, v10, v11, v13, v12);
  *(_QWORD *)v5 = v8;
  *((_QWORD *)v5 + 1) = v9;
  *((_QWORD *)v5 + 2) = v10;
  *((_QWORD *)v5 + 3) = v11;
  *((_WORD *)v5 + 16) = v13;
  v5[34] = v12;
  v14 = *((_QWORD *)v6 + 5);
  v15 = *((_QWORD *)v6 + 6);
  v16 = *((_QWORD *)v6 + 7);
  v17 = *((_QWORD *)v6 + 8);
  LOBYTE(v11) = v6[74];
  v18 = *((_WORD *)v6 + 36);
  outlined copy of Environment<OpenURLAction>.Content(v14, v15, v16, v17, v18, v11);
  *((_QWORD *)v5 + 5) = v14;
  *((_QWORD *)v5 + 6) = v15;
  *((_QWORD *)v5 + 7) = v16;
  *((_QWORD *)v5 + 8) = v17;
  *((_WORD *)v5 + 36) = v18;
  v5[74] = v11;
  v19 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v20 = &v5[v19];
  v21 = &v6[v19];
  v22 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = type metadata accessor for LinkDestination.Configuration();
  v20[*(int *)(v23 + 20)] = v21[*(int *)(v23 + 20)];
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, &lazy cache variable for type metadata for AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityLargeContentViewModifier);
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>);
  }
}

uint64_t destroy for PrimitiveButtonStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = a1 + *(int *)(a2 + 24);
  type metadata accessor for ButtonAction();
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);

    return swift_release();
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    return swift_release();
  }
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_WORD *)(v2 + 32), *(_BYTE *)(v2 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_WORD *)(v2 + 72), *(_BYTE *)(v2 + 74));
  v4 = v2 + *(int *)(type metadata accessor for LinkDestination() + 24);
  v5 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>);
}

void SubscriptionView.Subscriber.updateValue()(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = a1[2];
  v22 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v21 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CombineIdentifier();
  v18 = *(_QWORD *)(v5 - 8);
  v19 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v17 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[4];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for ActionDispatcherSubscriber(0, AssociatedTypeWitness, v10, v11);
  v20 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v12);
  v15[5] = (char *)v15 - v13;
  v23 = a1[3];
  v24 = v3;
  v14 = a1[5];
  v25 = v23;
  v26 = v8;
  v27 = v14;
  v15[1] = v14;
  type metadata accessor for SubscriptionView();
}

void sub_186EB6458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v6 - 200) = v3;
  *(_QWORD *)(v6 - 192) = v9;
  *(_QWORD *)(v6 - 224) = v2;
  *(_QWORD *)(v6 - 112) = v2;
  *(_QWORD *)(v6 - 104) = *(_QWORD *)(v6 - 120);
  *(_QWORD *)(v6 - 96) = v4;
  *(_QWORD *)(v6 - 208) = v4;
  *(_QWORD *)(v6 - 88) = v5;
  type metadata accessor for SubscriptionView();
}

void sub_186EB64D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Value;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  Value = AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v5, Value, a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v6, v5, v7);
  v11 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = v2;
  *((_QWORD *)v12 + 3) = v1;
  v13 = *(_QWORD *)(v8 - 216);
  *((_QWORD *)v12 + 4) = v3;
  *((_QWORD *)v12 + 5) = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(&v12[v11], v6, v7);
  *(_QWORD *)(v8 - 112) = partial apply for closure #1 in SubscriptionView.Subscriber.updateValue();
  *(_QWORD *)(v8 - 104) = v12;
  MEMORY[0x18D755D10](v8 - 112);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v7);
  v14 = *(_QWORD *)(v8 - 200);
  v15 = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v8 - 192) = *(_QWORD *)(v14 + 8);
  swift_retain();
  v16 = *(_QWORD *)(v8 - 168);
  CombineIdentifier.init()();
  v17 = *(char **)(v8 - 184);
  v18 = *(_QWORD *)(v8 - 176);
  *(_QWORD *)v17 = v15;
  (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v8 - 160) + 32))(&v17[*(int *)(v18 + 28)], v16, *(_QWORD *)(v8 - 152));
  v19 = *(_QWORD *)(v8 - 120);
  *(_QWORD *)(v8 - 112) = *(_QWORD *)(v8 - 224);
  *(_QWORD *)(v8 - 104) = v19;
  *(_QWORD *)(v8 - 96) = *(_QWORD *)(v8 - 208);
  *(_QWORD *)(v8 - 88) = v13;
  type metadata accessor for SubscriptionView();
}

uint64_t sub_186EB65EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Value;
  uint64_t v10;
  uint64_t v11;

  Value = AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v3, Value, a1);
  v11 = *(_QWORD *)(v7 - 136);
  v10 = *(_QWORD *)(v7 - 128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v11, v3 + *(int *)(v6 + 52), v5);
  v4(v3, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ActionDispatcherSubscriber<A>, v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ActionDispatcherSubscriber<A>, v2);
  SubscriptionLifetime.subscribe<A>(subscriber:to:)();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 144) + 8))(v1, v2);
}

uint64_t type metadata accessor for ActionDispatcherSubscriber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionDispatcherSubscriber);
}

void type metadata accessor for SubscriptionView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t destroy for ActionDispatcherSubscriber(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for CombineIdentifier();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

void protocol witness for View.body.getter in conformance ButtonBehavior<A>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ButtonBehavior.body.getter(a1, a2);
}

void ButtonBehavior.body.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[23];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7[21] = a2;
  type metadata accessor for ButtonActionModifier<<<opaque return type of Gesture.debugLabel(_:)>>.0>(0);
  v7[1] = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v7[3] = (char *)v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1;
  v6 = *(_QWORD *)(a1 + 16);
  v8 = type metadata accessor for VStack();
  v10 = MEMORY[0x1E0CE4C18];
  v11 = v8;
  v12 = v6;
  v13 = MEMORY[0x1E0CE4C08];
  type metadata accessor for StaticIf();
}

void sub_186EB6828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;

  *(_QWORD *)(v9 + 208) = a1;
  v15 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 + 56) = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v9 + 40) = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v9 + 16) = (char *)&a9 - v17;
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _AnimationModifier<ButtonInteractionPhase>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase, (uint64_t)&type metadata for ButtonInteractionPhase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
  v18 = type metadata accessor for ModifiedContent();
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v9 + 48) = v18;
  *(_QWORD *)(v9 + 72) = v19;
  MEMORY[0x1E0C80A78](v18, v20);
  *(_QWORD *)(v9 + 32) = (char *)&a9 - v21;
  *(_QWORD *)(v9 + 64) = type metadata accessor for StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier>();
  v22 = type metadata accessor for ModifiedContent();
  v23 = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v9 + 80) = v22;
  *(_QWORD *)(v9 + 96) = v23;
  MEMORY[0x1E0C80A78](v22, v24);
  *(_QWORD *)(v9 + 224) = (char *)&a9 - v25;
  *(_QWORD *)(v9 + 88) = type metadata accessor for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
  v26 = type metadata accessor for ModifiedContent();
  v27 = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(v9 + 112) = v26;
  *(_QWORD *)(v9 + 152) = v27;
  MEMORY[0x1E0C80A78](v26, v28);
  *(_QWORD *)(v9 + 248) = (char *)&a9 - v29;
  *(_QWORD *)(v9 + 128) = type metadata accessor for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
  v30 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 + 144) = v30;
  *(_QWORD *)(v9 + 160) = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v31);
  *(_QWORD *)(v9 + 104) = (char *)&a9 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  *(_QWORD *)(v9 + 136) = (char *)&a9 - v35;
  *(_QWORD *)(v9 + 120) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v36, v37);
  *(_QWORD *)(v9 + 200) = (char *)&a9 - v38;
  type metadata accessor for <<opaque return type of Gesture.debugLabel(_:)>>.0(0);
  *(_QWORD *)(v9 + 232) = *(_QWORD *)(v39 - 8);
  *(_QWORD *)(v9 + 240) = v39;
  MEMORY[0x1E0C80A78](v39, v40);
  *(_QWORD *)(v9 + 216) = (char *)&a9 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)v12;
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = v11;
  *(_QWORD *)(v43 + 24) = v10;
  v44 = *(_OWORD *)(v12 + 48);
  *(_OWORD *)(v43 + 64) = *(_OWORD *)(v12 + 32);
  *(_OWORD *)(v43 + 80) = v44;
  *(_OWORD *)(v43 + 96) = *(_OWORD *)(v12 + 64);
  *(_QWORD *)(v43 + 112) = *(_QWORD *)(v12 + 80);
  v45 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)(v43 + 32) = *(_OWORD *)v12;
  *(_OWORD *)(v43 + 48) = v45;
  outlined retain of ButtonBehavior<A>(v12);
  v46 = swift_allocObject();
  *(_QWORD *)(v46 + 16) = v11;
  *(_QWORD *)(v46 + 24) = v10;
  *(_QWORD *)(v9 + 256) = v10;
  v47 = *(_OWORD *)(v12 + 48);
  *(_OWORD *)(v46 + 64) = *(_OWORD *)(v12 + 32);
  *(_OWORD *)(v46 + 80) = v47;
  *(_OWORD *)(v46 + 96) = *(_OWORD *)(v12 + 64);
  *(_QWORD *)(v46 + 112) = *(_QWORD *)(v12 + 80);
  v48 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)(v46 + 32) = *(_OWORD *)v12;
  *(_OWORD *)(v46 + 48) = v48;
  outlined retain of ButtonBehavior<A>(v12);
  v49 = swift_allocObject();
  *(_QWORD *)(v9 + 264) = v11;
  *(_QWORD *)(v49 + 16) = v11;
  *(_QWORD *)(v49 + 24) = v10;
  v50 = *(_OWORD *)(v12 + 48);
  *(_OWORD *)(v49 + 64) = *(_OWORD *)(v12 + 32);
  *(_OWORD *)(v49 + 80) = v50;
  *(_OWORD *)(v49 + 96) = *(_OWORD *)(v12 + 64);
  *(_QWORD *)(v49 + 112) = *(_QWORD *)(v12 + 80);
  v51 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)(v49 + 32) = *(_OWORD *)v12;
  *(_OWORD *)(v49 + 48) = v51;
  *(_QWORD *)(v9 + 448) = partial apply for implicit closure #2 in implicit closure #1 in ButtonBehavior.body.getter;
  *(_QWORD *)(v9 + 456) = v43;
  *(_QWORD *)(v9 + 464) = partial apply for implicit closure #4 in implicit closure #3 in ButtonBehavior.body.getter;
  *(_QWORD *)(v9 + 472) = v46;
  *(_QWORD *)(v9 + 480) = v42;
  *(_BYTE *)(v9 + 488) = 0;
  *(_QWORD *)(v9 + 496) = partial apply for closure #1 in ButtonBehavior.body.getter;
  *(_QWORD *)(v9 + 504) = v49;
  *(_QWORD *)(v13 - 192) = 0x3C6E6F74747542;
  *(_QWORD *)(v13 - 184) = 0xE700000000000000;
  outlined retain of ButtonBehavior<A>(v12);
  v52._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = 62;
  v53._object = (void *)0xE100000000000000;
  String.append(_:)(v53);
  type metadata accessor for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>, MEMORY[0x1E0CE2E88]);
  Gesture.debugLabel(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)partial apply for implicit closure #4 in implicit closure #3 in ButtonBehavior.body.getter);
  swift_release();
  v54 = *(_QWORD *)(v9 + 256);
  v55 = *(_QWORD *)(v9 + 264);
  *(_QWORD *)(v9 + 368) = v55;
  *(_QWORD *)(v9 + 376) = v54;
  *(_QWORD *)(v9 + 384) = v12;
  *(_QWORD *)(v9 + 320) = v55;
  *(_QWORD *)(v9 + 328) = v54;
  *(_QWORD *)(v9 + 336) = v12;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], *(_QWORD *)(v9 + 184));
  StaticIf<>.init(_:then:else:)(MEMORY[0x1E0CE4C18], (void (*)(void))partial apply for closure #2 in ButtonBehavior.body.getter);
}

uint64_t sub_186EB6CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  unint64_t HasCustomRepeat;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t HasCustomSpringLoaded;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);

  v7 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 232) + 16))(v7, v3, *(_QWORD *)(v0 + 240));
  v9 = *(_QWORD *)(v5 + 8);
  v8 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v0 + 176) = v9;
  *(_QWORD *)(v0 + 184) = v8;
  v10 = *(_QWORD *)(v0 + 8);
  v11 = (_QWORD *)(v7 + *(int *)(v10 + 36));
  *v11 = v9;
  v11[1] = v8;
  *(_QWORD *)(v6 - 128) = v1;
  *(_QWORD *)(v6 - 120) = v4;
  swift_retain();
  v12 = *(_QWORD *)(v0 + 208);
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v12, v6 - 128);
  v14 = *(_QWORD *)(v0 + 16);
  MEMORY[0x18D75B4AC](v7, v12, v10, v13);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v7, (uint64_t (*)(_QWORD))type metadata accessor for ButtonActionModifier<<<opaque return type of Gesture.debugLabel(_:)>>.0>);
  ButtonBehavior.animation.getter(*(_QWORD *)(v0 + 192), v15, v16, v17);
  *(_OWORD *)(v6 - 112) = *(_OWORD *)(v5 + 72);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v5 + 72);
  v18 = v2;
  v19 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 24) = type metadata accessor for ButtonBehavior.StateType(255, v18, v19, v20);
  *(_QWORD *)(v0 + 192) = type metadata accessor for State();
  State.wrappedValue.getter();
  *(_WORD *)(v0 + 448) = *(_WORD *)(v6 - 192);
  *(_QWORD *)(v6 - 144) = v13;
  *(_QWORD *)(v6 - 136) = &protocol witness table for ButtonActionModifier<A>;
  v21 = *(_QWORD *)(v0 + 40);
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v21, v6 - 144);
  lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase();
  v23 = *(_QWORD *)(v0 + 32);
  View.animation<A>(_:value:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 56) + 8))(v14, v21);
  v24 = swift_allocObject();
  v25 = *(_QWORD *)(v0 + 264);
  *(_QWORD *)(v24 + 16) = v25;
  *(_QWORD *)(v24 + 24) = v19;
  v26 = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(v24 + 64) = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(v24 + 80) = v26;
  *(_OWORD *)(v24 + 96) = *(_OWORD *)(v5 + 64);
  *(_QWORD *)(v24 + 112) = *(_QWORD *)(v5 + 80);
  v27 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v24 + 32) = *(_OWORD *)v5;
  *(_OWORD *)(v24 + 48) = v27;
  v29 = *(_QWORD *)(v0 + 176);
  v28 = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v0 + 448) = v29;
  *(_QWORD *)(v0 + 456) = v28;
  *(_QWORD *)(v0 + 464) = partial apply for closure #4 in ButtonBehavior.body.getter;
  *(_QWORD *)(v0 + 472) = v24;
  outlined retain of ButtonBehavior<A>(v5);
  v30 = lazy protocol witness table accessor for type _AnimationModifier<ButtonInteractionPhase> and conformance _AnimationModifier<A>();
  *(_QWORD *)(v6 - 160) = v22;
  *(_QWORD *)(v6 - 152) = v30;
  v31 = *(_QWORD *)(v0 + 48);
  v32 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v31, v6 - 160);
  MEMORY[0x18D75B4AC](v0 + 448, v31, *(_QWORD *)(v0 + 64), v32);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 8))(v23, v31);
  *(_OWORD *)(v6 - 192) = *(_OWORD *)(v6 - 112);
  State.projectedValue.getter();
  v33 = *(_QWORD *)(v0 + 448);
  v34 = *(_QWORD *)(v0 + 456);
  LOWORD(v12) = *(_WORD *)(v0 + 464);
  LOBYTE(v31) = *(_BYTE *)(v0 + 466);
  *(_QWORD *)(v0 + 288) = v25;
  v35 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 296) = v35;
  swift_getKeyPath();
  *(_QWORD *)(v0 + 448) = v33;
  *(_QWORD *)(v0 + 456) = v34;
  *(_WORD *)(v0 + 464) = v12;
  *(_BYTE *)(v0 + 466) = v31;
  *(_QWORD *)(v0 + 72) = type metadata accessor for Binding();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  v36 = *(_QWORD *)(v6 - 192);
  v37 = *(_QWORD *)(v6 - 184);
  LOWORD(v12) = *(_WORD *)(v6 - 176);
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 448) = v36;
  *(_QWORD *)(v0 + 456) = v37;
  *(_WORD *)(v0 + 464) = v12;
  *(_QWORD *)(v0 + 472) = v29;
  v39 = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v0 + 480) = v39;
  *(_QWORD *)(v0 + 488) = 0;
  *(_BYTE *)(v0 + 496) = 0;
  *(_QWORD *)(v0 + 504) = 0;
  *(_QWORD *)(v0 + 512) = KeyPath;
  *(_BYTE *)(v0 + 520) = 0;
  v40 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v0 + 432) = v32;
  *(_QWORD *)(v0 + 440) = v40;
  swift_retain();
  v41 = *(_QWORD *)(v0 + 80);
  v42 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v41, v0 + 432);
  v43 = *(_QWORD *)(v0 + 224);
  MEMORY[0x18D75B4AC](v0 + 448, v41, *(_QWORD *)(v0 + 88), v42);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ResolvedTableRowIDs.Storage(KeyPath, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 8))(v43, v41);
  *(_OWORD *)(v6 - 192) = *(_OWORD *)(v6 - 112);
  State.projectedValue.getter();
  v44 = *(_QWORD *)(v0 + 448);
  v45 = *(_QWORD *)(v0 + 456);
  LOWORD(v43) = *(_WORD *)(v0 + 464);
  LOBYTE(v37) = *(_BYTE *)(v0 + 466);
  *(_QWORD *)(v0 + 272) = *(_QWORD *)(v0 + 264);
  *(_QWORD *)(v0 + 280) = v35;
  swift_getKeyPath();
  *(_QWORD *)(v0 + 448) = v44;
  *(_QWORD *)(v0 + 456) = v45;
  *(_WORD *)(v0 + 464) = v43;
  *(_BYTE *)(v0 + 466) = v37;
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  v46 = *(_QWORD *)(v6 - 184);
  v47 = *(_WORD *)(v6 - 176);
  *(_QWORD *)(v0 + 448) = *(_QWORD *)(v6 - 192);
  *(_QWORD *)(v0 + 456) = v46;
  *(_WORD *)(v0 + 464) = v47;
  *(_QWORD *)(v0 + 472) = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 480) = v39;
  HasCustomRepeat = lazy protocol witness table accessor for type StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v0 + 416) = v42;
  *(_QWORD *)(v0 + 424) = HasCustomRepeat;
  swift_retain();
  v49 = MEMORY[0x1E0CE2E70];
  v50 = *(_QWORD *)(v0 + 112);
  v51 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v50, v0 + 416);
  v52 = *(_QWORD *)(v0 + 104);
  v53 = *(_QWORD *)(v0 + 248);
  MEMORY[0x18D75B4AC](v0 + 448, v50, *(_QWORD *)(v0 + 128), v51);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 152) + 8))(v53, v50);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
  HasCustomSpringLoaded = lazy protocol witness table accessor for type StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v0 + 400) = v51;
  *(_QWORD *)(v0 + 408) = HasCustomSpringLoaded;
  v55 = *(_QWORD *)(v0 + 144);
  v56 = MEMORY[0x18D75FFDC](v49, v55, v0 + 400);
  v57 = *(_QWORD *)(v0 + 136);
  static ViewBuilder.buildExpression<A>(_:)(v52, v55, v56);
  v58 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 160) + 8);
  v58(v52, v55);
  static ViewBuilder.buildBlock<A>(_:)(v57, v55, *(_QWORD *)(v0 + 168));
  return ((uint64_t (*)(uint64_t, uint64_t))v58)(v57, v55);
}

uint64_t outlined retain of ButtonBehavior<A>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of AppIntentExecutor?(v2);
  swift_retain();
  return a1;
}

void StaticIf<>.init(_:then:else:)(uint64_t a1, void (*a2)(void))
{
  a2();
  type metadata accessor for StaticIf();
}

uint64_t sub_186EB72B8()
{
  uint64_t (*v0)(void);

  return v0();
}

unint64_t lazy protocol witness table accessor for type StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t HasCustomRepeat;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    HasCustomRepeat = type metadata accessor for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
    v2[0] = lazy protocol witness table accessor for type ButtonSpringLoadedInteraction and conformance ButtonSpringLoadedInteraction();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, HasCustomRepeat, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t HasCustomRepeat;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    HasCustomRepeat = type metadata accessor for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
    v2[0] = lazy protocol witness table accessor for type ButtonRepeatModifier and conformance ButtonRepeatModifier();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, HasCustomRepeat, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type ButtonFocusInteractionModifier and conformance ButtonFocusInteractionModifier();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t partial apply for closure #3 in WrappedButtonStyleBody.body.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #3 in WrappedButtonStyleBody.body.getter(*(__int128 **)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t closure #3 in WrappedButtonStyleBody.body.getter@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  uint64_t v27;

  v6 = a1[3];
  v16 = a1[2];
  v17 = v6;
  v18 = a1[4];
  v19 = *((_QWORD *)a1 + 10);
  v7 = a1[1];
  v14 = *a1;
  v15 = v7;
  v8 = type metadata accessor for ResolvedButtonStyleBody(255, a2, a3, a4);
  v10 = type metadata accessor for ButtonBehavior(0, v8, (uint64_t)&protocol witness table for ResolvedButtonStyleBody<A>, v9);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonBehavior<A>, v10);
  static ViewBuilder.buildExpression<A>(_:)(&v14, v10, v11);
  v12 = *((_QWORD *)&v23 + 1);
  v14 = v20;
  v15 = v21;
  v16 = v22;
  v17 = v23;
  *(_QWORD *)&v18 = v24;
  WORD4(v18) = v25;
  BYTE10(v18) = v26;
  v19 = v27;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v14, v10, a5);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v12);
  return swift_release();
}

uint64_t partial apply for closure #2 in WrappedButtonStyleBody.body.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #2 in WrappedButtonStyleBody.body.getter(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t closure #2 in WrappedButtonStyleBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  *(_QWORD *)&v34 = a3;
  v35 = a5;
  v7 = type metadata accessor for WrappedButtonStyleBody(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v33 - v10;
  v12 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v12, v15);
  v16 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1 + *(int *)(v7 + 36), (uint64_t)v16, v17);
  v18 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v19 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v16, v19 + v18, type metadata accessor for PrimitiveButtonStyleConfiguration);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v20 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v21 = swift_allocObject();
  v22 = v34;
  *(_QWORD *)(v21 + 16) = a2;
  *(_QWORD *)(v21 + 24) = v22;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v21 + v20, v11, v7);
  v24 = type metadata accessor for ResolvedButtonStyleBody(0, a2, v22, v23);
  v26 = property wrapper backing initializer of ButtonBehavior.state(2, v24, (uint64_t)&protocol witness table for ResolvedButtonStyleBody<A>, v25);
  *(_QWORD *)&v50 = 0x3FB999999999999ALL;
  *((_QWORD *)&v50 + 1) = partial apply for implicit closure #2 in implicit closure #1 in closure #2 in WrappedButtonStyleBody.body.getter;
  *(_QWORD *)&v51 = v19;
  *((_QWORD *)&v51 + 1) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)&v52 = 0;
  *((_QWORD *)&v52 + 1) = partial apply for closure #1 in WrappedButtonStyleBody.body.getter;
  *(_QWORD *)&v53 = v21;
  *((_QWORD *)&v53 + 1) = closure #2 in closure #2 in WrappedButtonStyleBody.body.getter;
  *(_QWORD *)&v54 = 0;
  WORD4(v54) = v26;
  BYTE10(v54) = BYTE2(v26) & 1;
  v55 = v27;
  v38 = v52;
  v39 = v53;
  v40 = v54;
  v41 = v27;
  v36 = v50;
  v37 = v51;
  v29 = type metadata accessor for ButtonBehavior(0, v24, (uint64_t)&protocol witness table for ResolvedButtonStyleBody<A>, v28);
  v30 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonBehavior<A>, v29);
  static ViewBuilder.buildExpression<A>(_:)(&v36, v29, v30);
  outlined release of ButtonBehavior<ResolvedButtonStyleBody<A>>((uint64_t)&v50);
  v31 = *((_QWORD *)&v45 + 1);
  v36 = v42;
  v33 = v44;
  v34 = v43;
  v37 = v43;
  v38 = v44;
  v39 = v45;
  *(_QWORD *)&v40 = v46;
  WORD4(v40) = v47;
  BYTE10(v40) = v48;
  v41 = v49;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v36, v29, v35);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v31);
  return swift_release();
}

uint64_t initializeWithCopy for ButtonBehavior(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = v5;
  v8 = (_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v7)
  {
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *v8;
  }
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  return a1;
}

uint64_t outlined release of ButtonBehavior<ResolvedButtonStyleBody<A>>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  swift_release();
  return a1;
}

void WrappedButtonStyleBody.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[9];
  __int16 v35;
  char v36;
  uint64_t v37;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7, v10);
  v11 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2 + *(int *)(a1 + 36), (uint64_t)v11, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v11, v13 + v12, type metadata accessor for PrimitiveButtonStyleConfiguration);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
  v14 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v15 = swift_allocObject();
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v15 + 16) = v16;
  *(_QWORD *)(v15 + 24) = v17;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v4 + 32))(v15 + v14, v6, a1);
  v19 = type metadata accessor for ResolvedButtonStyleBody(0, v16, v17, v18);
  v21 = property wrapper backing initializer of ButtonBehavior.state(2, v19, (uint64_t)&protocol witness table for ResolvedButtonStyleBody<A>, v20);
  v34[0] = 0x3FB999999999999ALL;
  v34[1] = partial apply for implicit closure #2 in implicit closure #1 in WrappedButtonStyleBody.body.getter;
  v34[2] = v13;
  v34[3] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v34[4] = 0;
  v34[5] = partial apply for closure #1 in WrappedButtonStyleBody.body.getter;
  v34[7] = 0;
  v34[8] = 0;
  v34[6] = v15;
  v35 = v21;
  v36 = BYTE2(v21) & 1;
  v37 = v22;
  v31 = v16;
  v32 = v17;
  v33 = v2;
  v27 = v16;
  v28 = v17;
  v29 = v34;
  v24 = type metadata accessor for ButtonBehavior(0, v19, (uint64_t)&protocol witness table for ResolvedButtonStyleBody<A>, v23);
  v25 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonBehavior<A>, v24);
  StaticIf<>.init<A>(idiom:then:else:)(v25, (void (*)(void))partial apply for closure #2 in WrappedButtonStyleBody.body.getter, (uint64_t)v30, (uint64_t)partial apply for closure #3 in WrappedButtonStyleBody.body.getter, (uint64_t)v26, v24, v24, MEMORY[0x1E0CE5968]);
}

uint64_t sub_186EB7BB8()
{
  uint64_t v0;

  return outlined release of ButtonBehavior<ResolvedButtonStyleBody<A>>(v0 - 176);
}

uint64_t type metadata accessor for ButtonBehavior(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ButtonBehavior);
}

void StaticIf<>.init<A>(idiom:then:else:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 8))(a1, a8);
  v9 = type metadata accessor for InterfaceIdiomPredicate();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A68], v9);
  a2();
  type metadata accessor for StaticIf();
}

uint64_t sub_186EB7C88()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t WrappedButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v32 = a3;
  v7 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for WrappedButtonStyleBody(0, v11, *(_QWORD *)(a2 + 24), v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v27 = (char *)&v31 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v16, v4, v11, v25);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v10, type metadata accessor for PrimitiveButtonStyleConfiguration);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v22, v16, v11);
  outlined init with take of TableCellFormula((uint64_t)v10, (uint64_t)&v22[*(int *)(v18 + 36)], type metadata accessor for PrimitiveButtonStyleConfiguration);
  v28 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyleBody<A>, v18);
  static ViewBuilder.buildExpression<A>(_:)(v22, v18, v28);
  v29 = *(void (**)(char *, uint64_t))(v19 + 8);
  v29(v22, v18);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v27, v18, v32);
  return ((uint64_t (*)(char *, uint64_t))v29)(v27, v18);
}

uint64_t initializeWithCopy for WrappedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int16 v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_WORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_WORD *)((v10 + a2) & ~(v9 | 7));
  *v11 = *v12;
  v13 = (v9 | 7) + 2;
  v14 = (unint64_t)v11 + v13;
  v15 = v14 & ~(v9 | 7);
  v16 = ((unint64_t)v12 + v13) & ~(v9 | 7);
  v17 = *(_QWORD *)(v8 + 64) + ((v9 + 75) & ~v9);
  if ((unint64_t)(v17 + 1) > 0x30)
    v18 = v17 + 1;
  else
    v18 = 48;
  v19 = *(unsigned __int8 *)(v16 + v18);
  if (v19 >= 3)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  if (v19 == 2)
  {
    v34 = *(_QWORD *)v16;
    v35 = *(_QWORD *)(v16 + 8);
    v36 = *(_BYTE *)(v16 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v16, v35, v36);
    *(_QWORD *)v15 = v34;
    *(_QWORD *)(v15 + 8) = v35;
    *(_BYTE *)(v15 + 16) = v36;
    v37 = *(void **)(v16 + 24);
    *(_QWORD *)(v15 + 24) = v37;
    v38 = *(_QWORD *)(v16 + 40);
    *(_QWORD *)(v15 + 32) = *(_QWORD *)(v16 + 32);
    *(_QWORD *)(v15 + 40) = v38;
    *(_BYTE *)(v15 + v18) = 2;
    v39 = v37;
LABEL_14:
    swift_retain();
    return a1;
  }
  if (v19 != 1)
  {
    v40 = *(_QWORD *)(v16 + 8);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *(_QWORD *)((v14 & ~(v9 | 7)) + 8) = v40;
    *(_BYTE *)(v15 + v18) = 0;
    goto LABEL_14;
  }
  v46 = a1;
  v21 = *(_QWORD *)v16;
  v22 = *(_QWORD *)(v16 + 8);
  v23 = *(_QWORD *)(v16 + 16);
  v24 = *(_QWORD *)(v16 + 24);
  v25 = *(_BYTE *)(v16 + 34);
  v26 = *(_WORD *)(v16 + 32);
  v44 = *(_QWORD *)(v8 + 64);
  v45 = v7;
  v43 = v8;
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v16, v22, v23, v24, v26, v25);
  *(_QWORD *)v15 = v21;
  *(_QWORD *)(v15 + 8) = v22;
  *(_QWORD *)(v15 + 16) = v23;
  *(_QWORD *)(v15 + 24) = v24;
  *(_WORD *)(v15 + 32) = v26;
  *(_BYTE *)(v15 + 34) = v25;
  v27 = (v15 + 42) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v16 + 42) & 0xFFFFFFFFFFFFFFF8;
  v29 = *(_QWORD *)v28;
  v30 = *(_QWORD *)(v28 + 8);
  v31 = *(_QWORD *)(v28 + 16);
  v32 = *(_QWORD *)(v28 + 24);
  v42 = *(_BYTE *)(v28 + 34);
  v33 = *(_WORD *)(v28 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v28, v30, v31, v32, v33, v42);
  *(_QWORD *)v27 = v29;
  *(_QWORD *)(v27 + 8) = v30;
  *(_QWORD *)(v27 + 16) = v31;
  *(_QWORD *)(v27 + 24) = v32;
  a1 = v46;
  *(_WORD *)(v27 + 32) = v33;
  *(_BYTE *)(v27 + 34) = v42;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v43 + 16))((v9 + 35 + v27) & ~v9, (v9 + 35 + v28) & ~v9, v45);
  *(_BYTE *)(((v9 + 35 + v27) & ~v9) + v44) = *(_BYTE *)(((v9 + 35 + v28) & ~v9) + v44);
  *(_BYTE *)(v15 + v18) = 1;
  return a1;
}

void Button.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for ResolvedButtonStyle(0);
  MEMORY[0x1E0C80A78](v1, v0);
  lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

void sub_186EB818C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v12 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 256) = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  *(_QWORD *)(v11 - 312) = (char *)&a9 - v14;
  v15 = lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label();
  *(_QWORD *)(v11 - 272) = v15;
  *(_QWORD *)(v11 - 120) = &type metadata for ButtonStyleConfiguration.Label;
  *(_QWORD *)(v11 - 112) = v9;
  *(_QWORD *)(v11 - 104) = v15;
  *(_QWORD *)(v11 - 96) = v10;
  type metadata accessor for StaticSourceWriter();
}

void sub_186EB81FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  v15 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 264) = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)(v14 - 296) = (char *)&a9 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  *(_QWORD *)(v14 - 288) = (char *)&a9 - v22;
  v23 = *v11;
  v24 = v11[1];
  v25 = (uint64_t)&v11[*(int *)(v9 + 36)];
  v26 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v25, (uint64_t)&v12[*(int *)(v26 + 24)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  *v12 = v23;
  v12[1] = v24;
  *(_QWORD *)(v14 - 176) = v10;
  *(_QWORD *)(v14 - 168) = v13;
  *(_QWORD *)(v14 - 160) = v11;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle, type metadata accessor for ResolvedButtonStyle, (uint64_t)&protocol conformance descriptor for ResolvedButtonStyle);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)partial apply for closure #1 in Button.body.getter);
}

void sub_186EB8334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v3, type metadata accessor for ResolvedButtonStyle);
  *(_QWORD *)(v6 - 224) = v0;
  *(_QWORD *)(v6 - 216) = v5;
  *(_QWORD *)(v6 - 208) = v1;
  *(_QWORD *)(v6 - 136) = v4;
  *(_QWORD *)(v6 - 128) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v6 - 136);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ButtonStyleConfiguration.Label, (uint64_t)partial apply for closure #2 in Button.body.getter);
}

uint64_t sub_186EB83B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 256) + 8))(v0, v4);
  *(_QWORD *)(v7 - 152) = v5;
  *(_QWORD *)(v7 - 144) = v1;
  v8 = MEMORY[0x18D75FFDC](v6, v2, v7 - 152);
  v9 = *(_QWORD *)(v7 - 296);
  ModifiedContent<>.accessibility()(v2, v9);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 264) + 8);
  v10(v3, v2);
  v11 = *(_QWORD *)(v7 - 288);
  static ViewBuilder.buildExpression<A>(_:)(v9, v2, v8);
  v10(v9, v2);
  static ViewBuilder.buildBlock<A>(_:)(v11, v2, *(_QWORD *)(v7 - 248));
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(v11, v2);
}

void View.viewAlias<A, B>(_:_:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_186EB84FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x1E0C80A78]();
  v11 = (char *)&v13 - v10;
  v4(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v11, v5, v2);
  MEMORY[0x18D75B4AC](v11, v3, a1, *(_QWORD *)(v6 - 128));
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a1);
}

void type metadata accessor for StaticSourceWriter()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t partial apply for closure #2 in Button.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in Button.body.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t ButtonStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v20 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v5 + 24))(a1, v6, v5, v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, AssociatedTypeWitness);
}

uint64_t destroy for WrappedButtonStyleBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (((v4 + a1 + (v7 | 7)) | v7 | 7) + 2) & ~(v7 | 7);
  v9 = *(_QWORD *)(v6 + 64) + ((v7 + 75) & ~v7);
  if ((unint64_t)(v9 + 1) > 0x30)
    v10 = v9 + 1;
  else
    v10 = 48;
  v11 = *(unsigned __int8 *)(v8 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  if (v11 == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));

  }
  else if (v11 == 1)
  {
    outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_WORD *)(v8 + 32), *(_BYTE *)(v8 + 34));
    v13 = (v8 + 42) & 0xFFFFFFFFFFFFFFF8;
    outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), *(_WORD *)(v13 + 32), *(_BYTE *)(v13 + 34));
    return (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 8))((v7 + v13 + 35) & ~v7, v5);
  }
  return swift_release();
}

uint64_t closure #1 in closure #2 in ButtonBehavior.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  __int128 v21;
  __int16 v22;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v21 - v13;
  v21 = *(_OWORD *)(v15 + 72);
  type metadata accessor for ButtonBehavior.StateType(255, v16, v17, v18);
  type metadata accessor for State();
  State.wrappedValue.getter();
  (*(void (**)(_QWORD))(a1 + 40))(v22 & 1);
  static ViewBuilder.buildExpression<A>(_:)(v10, a2, a3);
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v10, a2);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v14, a2, a4);
  return ((uint64_t (*)(char *, uint64_t))v19)(v14, a2);
}

uint64_t closure #1 in Button.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Button(0, v11, v12, v13);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 40), a2, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a2);
}

uint64_t static ViewBuilder.buildBlock<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t type metadata accessor for Button(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Button);
}

uint64_t partial apply for closure #1 in WrappedButtonStyleBody.body.getter@<X0>(char a1@<W0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WrappedButtonStyleBody(0, v6, v7, a2) - 8) + 80);
  return closure #1 in WrappedButtonStyleBody.body.getter(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t type metadata accessor for WrappedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WrappedButtonStyleBody);
}

uint64_t closure #1 in WrappedButtonStyleBody.body.getter@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v9;
  char v10;
  _BYTE v12[3];

  v9 = (char *)(a2 + *(int *)(type metadata accessor for WrappedButtonStyleBody(0, a3, a4, a4) + 36));
  v10 = *v9;
  LOBYTE(v9) = v9[1];
  v12[0] = v10;
  v12[1] = (_BYTE)v9;
  v12[2] = a1;
  return ButtonStyle.resolvedBody(configuration:)((uint64_t)v12, a3, a4, a5);
}

uint64_t ButtonStyle.resolvedBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t result;
  _BYTE *v18;
  uint64_t v19;

  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v12;
  v14 = v12[1];
  v15 = v12[2];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, v4, a2, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v11, a2);
  result = type metadata accessor for ResolvedButtonStyleBody(0, a2, a3, v16);
  v18 = (_BYTE *)(a4 + *(int *)(result + 36));
  *v18 = v13;
  v18[1] = v14;
  v18[2] = v15;
  return result;
}

uint64_t type metadata accessor for ResolvedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResolvedButtonStyleBody);
}

uint64_t ModifiedContent<>.accessibility()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t ButtonBehavior.animation.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  unsigned __int16 v8;

  v5 = *(uint64_t (**)(_QWORD))(v4 + 56);
  type metadata accessor for ButtonBehavior.StateType(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  type metadata accessor for State();
  if (v5)
  {
    swift_retain();
    State.wrappedValue.getter();
    v6 = v5(v8);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v5);
  }
  else
  {
    State.wrappedValue.getter();
    State.wrappedValue.getter();
    State.wrappedValue.getter();
    return static Animation.coreAnimationDefault(duration:)();
  }
  return v6;
}

uint64_t partial apply for closure #2 in ButtonBehavior.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #2 in ButtonBehavior.body.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t closure #2 in ButtonBehavior.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = type metadata accessor for VStack();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v20[-v15];
  v21 = a2;
  v22 = a3;
  v23 = a1;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v8);
  static ViewBuilder.buildExpression<A>(_:)(v12, v8, v17);
  v18 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
  v18(v12, v8);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, v8, a4);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v16, v8);
}

uint64_t partial apply for closure #1 in closure #2 in ButtonBehavior.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in closure #2 in ButtonBehavior.body.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t destroy for ToolbarButtonStyle(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 41) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 40) == 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
}

uint64_t initializeWithCopy for ToolbarButtonStyle(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  if ((*(_BYTE *)(a2 + 41) & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 40) == 1)
    {
      v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    *(_BYTE *)(a1 + 41) = 1;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 41) = 0;
    swift_retain();
  }
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = v9;
  return a1;
}

uint64_t destroy for DefaultListButtonStyle.ListButton(uint64_t a1, int *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));

LABEL_6:
      swift_release();
      break;
    case 1:
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_WORD *)(v4 + 32), *(_BYTE *)(v4 + 34));
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(_WORD *)(v4 + 72), *(_BYTE *)(v4 + 74));
      v6 = v4 + *(int *)(type metadata accessor for LinkDestination() + 24);
      v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      break;
    case 0:
      goto LABEL_6;
  }
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + a2[5]), *(_BYTE *)(a1 + a2[5] + 8));
  outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(a1 + a2[6]), *(unsigned __int8 *)(a1 + a2[6] + 8));
  return outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(a1 + a2[7]), *(unsigned __int8 *)(a1 + a2[7] + 8));
}

uint64_t initializeWithCopy for SharingPickerHostModifier(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;

  v4 = (_OWORD *)(a2 + 112);
  v5 = *(_QWORD *)(a2 + 112);
  if (v5 != 1)
  {
    v10 = *(_QWORD *)(a2 + 72);
    if (v10 == 1)
    {
      v11 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v13;
      if (!v5)
        goto LABEL_12;
LABEL_9:
      v26 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v5;
      *(_QWORD *)(a1 + 120) = v26;
      swift_retain();
      goto LABEL_13;
    }
    v14 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v15 = *(_QWORD *)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = *(_QWORD *)(a2 + 32);
    v18 = *(_BYTE *)(a2 + 40);
    outlined copy of AnyShareConfiguration.Storage(v14, v15, v16, v17, v18);
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 32) = v17;
    *(_BYTE *)(a1 + 40) = v18;
    if (v10)
    {
      v19 = *(_QWORD *)(a2 + 48);
      v20 = *(_QWORD *)(a2 + 56);
      v21 = *(_BYTE *)(a2 + 64);
      outlined copy of Text.Storage(v19, v20, v21);
      *(_QWORD *)(a1 + 48) = v19;
      *(_QWORD *)(a1 + 56) = v20;
      *(_BYTE *)(a1 + 64) = v21;
      *(_QWORD *)(a1 + 72) = v10;
      swift_bridgeObjectRetain();
      v22 = *(_QWORD *)(a2 + 104);
      if (v22)
        goto LABEL_8;
    }
    else
    {
      v27 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v27;
      v22 = *(_QWORD *)(a2 + 104);
      if (v22)
      {
LABEL_8:
        v23 = *(_QWORD *)(a2 + 80);
        v24 = *(_QWORD *)(a2 + 88);
        v25 = *(_BYTE *)(a2 + 96);
        outlined copy of Text.Storage(v23, v24, v25);
        *(_QWORD *)(a1 + 80) = v23;
        *(_QWORD *)(a1 + 88) = v24;
        *(_BYTE *)(a1 + 96) = v25;
        *(_QWORD *)(a1 + 104) = v22;
        swift_bridgeObjectRetain();
        if (v5)
          goto LABEL_9;
LABEL_12:
        *(_OWORD *)(a1 + 112) = *v4;
        goto LABEL_13;
      }
    }
    v28 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v28;
    if (v5)
      goto LABEL_9;
    goto LABEL_12;
  }
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
LABEL_13:
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  return a1;
}

_WORD *initializeWithCopy for DefaultListButtonStyle.ListButton(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char v46;
  char v47;
  int *v48;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v24 = *(_QWORD *)v8;
    v25 = *((_QWORD *)v8 + 1);
    v26 = v8[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, v25, v26);
    *(_QWORD *)v7 = v24;
    *((_QWORD *)v7 + 1) = v25;
    v7[16] = v26;
    v27 = *((_QWORD *)v8 + 5);
    v28 = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 24) = v28;
    *((_QWORD *)v7 + 5) = v27;
    v29 = (id)v28;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v30 = *((_QWORD *)v8 + 1);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *((_QWORD *)v7 + 1) = v30;
    goto LABEL_6;
  }
  v48 = a3;
  v10 = *(_QWORD *)v8;
  v11 = *((_QWORD *)v8 + 1);
  v13 = *((_QWORD *)v8 + 2);
  v12 = *((_QWORD *)v8 + 3);
  v46 = v8[34];
  v14 = *((_WORD *)v8 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v8, v11, v13, v12, v14, v46);
  *(_QWORD *)v7 = v10;
  *((_QWORD *)v7 + 1) = v11;
  *((_QWORD *)v7 + 2) = v13;
  *((_QWORD *)v7 + 3) = v12;
  *((_WORD *)v7 + 16) = v14;
  v7[34] = v46;
  v15 = *((_QWORD *)v8 + 5);
  v16 = *((_QWORD *)v8 + 6);
  v17 = *((_QWORD *)v8 + 7);
  v18 = *((_QWORD *)v8 + 8);
  v47 = v8[74];
  LOWORD(v13) = *((_WORD *)v8 + 36);
  outlined copy of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v13, v47);
  *((_QWORD *)v7 + 5) = v15;
  *((_QWORD *)v7 + 6) = v16;
  *((_QWORD *)v7 + 7) = v17;
  *((_QWORD *)v7 + 8) = v18;
  *((_WORD *)v7 + 36) = v13;
  a3 = v48;
  v7[74] = v47;
  v19 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v20 = &v7[v19];
  v21 = &v8[v19];
  v22 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = type metadata accessor for LinkDestination.Configuration();
  v20[*(int *)(v23 + 20)] = v21[*(int *)(v23 + 20)];
LABEL_7:
  swift_storeEnumTagMultiPayload();
  v31 = a3[5];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)v33;
  v35 = v33[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v33, v35);
  *(_QWORD *)v32 = v34;
  v32[8] = v35;
  v36 = a3[6];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(_QWORD *)v38;
  v40 = v38[8];
  outlined copy of Environment<SceneBridge?>.Content(*(_QWORD *)v38, v40);
  *(_QWORD *)v37 = v39;
  v37[8] = v40;
  v41 = a3[7];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = *(_QWORD *)v43;
  LOBYTE(v39) = v43[8];
  outlined copy of Environment<SceneBridge?>.Content(*(_QWORD *)v43, v39);
  *(_QWORD *)v42 = v44;
  v42[8] = v39;
  return a1;
}

uint64_t initializeWithCopy for SearchCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v6 = *(unsigned __int8 *)(a2 + 72);
  if (v6 == 255)
  {
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  else if ((v6 & 1) != 0)
  {
    v10 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
    v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 56) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 32, a2 + 32);
    *(_BYTE *)(a1 + 72) = 1;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 72) = 0;
    swift_bridgeObjectRetain();
  }
  v12 = *(int *)(a3 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    v16 = v15;
    v17 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v38 = v14[1];
      *v13 = *v14;
      v13[1] = v38;
      v19 = *(int *)(v16 + 32);
      v20 = (char *)v13 + v19;
      v39 = a3;
      v21 = (char *)v14 + v19;
      *v20 = *((_BYTE *)v14 + v19);
      v20[1] = *((_BYTE *)v14 + v19 + 1);
      *((_WORD *)v20 + 1) = *(_WORD *)((char *)v14 + v19 + 2);
      v20[8] = *((_BYTE *)v14 + v19 + 8);
      *((_DWORD *)v20 + 1) = *(_DWORD *)((char *)v14 + v19 + 4);
      v22 = (int *)type metadata accessor for SearchFieldState();
      v23 = v22[9];
      v36 = &v21[v23];
      v37 = &v20[v23];
      v24 = type metadata accessor for AttributedString();
      v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
      swift_retain();
      swift_retain();
      v35(v37, v36, v24);
      v20[v22[10]] = v21[v22[10]];
      v25 = v22[11];
      v26 = &v20[v25];
      v27 = &v21[v25];
      a3 = v39;
      v26[4] = v27[4];
      *(_DWORD *)v26 = *(_DWORD *)v27;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    }
  }
  else
  {
    *v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v28 = *(int *)(a3 + 24);
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_QWORD *)v30;
  v32 = *(_QWORD *)(v30 + 8);
  v33 = *(_BYTE *)(v30 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v30, v32, v33);
  *(_QWORD *)v29 = v31;
  *(_QWORD *)(v29 + 8) = v32;
  *(_BYTE *)(v29 + 16) = v33;
  return a1;
}

uint64_t destroy for SearchCompletionButtonStyle(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(a1 + 72);
  if (v4 != 255)
  {
    if ((v4 & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v5 = a1 + *(int *)(a2 + 20);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    v7 = v6;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    {
      swift_release();
      swift_release();
      v8 = v5 + *(int *)(v7 + 32);
      v9 = v8 + *(int *)(type metadata accessor for SearchFieldState() + 36);
      v10 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    }
  }
  else
  {
    swift_release();
  }
  return outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8), *(_BYTE *)(a1 + *(int *)(a2 + 24) + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
}

uint64_t outlined consume of Environment<AppIntentExecutor?>.Content(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  if ((a3 & 1) != 0)
    return a4();
  else
    return swift_release();
}

uint64_t outlined copy of Environment<AppIntentExecutor?>.Content(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return outlined copy of AppIntentExecutor?(result);
  else
    return swift_retain();
}

uint64_t ButtonStyleContainerModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[2];
  _QWORD v76[2];
  _QWORD v77[3];

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 16);
  v73 = a3;
  v74 = v4;
  v6 = type metadata accessor for ButtonStyleAdaptorMenuStyle(255, v5, v4, a2);
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleAdaptorMenuStyle<A>, v6);
  v9 = type metadata accessor for CustomButtonMenuStyleWriter(0, v6, v7, v8);
  v72 = *(_QWORD *)(v9 - 8);
  v62 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v71 = (char *)&v58 - v11;
  v64 = v5;
  v67 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for WrappedButtonStyle(255, v5, v4, v16);
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyle<A>, v17);
  v20 = type metadata accessor for ButtonStyleModifier(0, v17, v18, v19);
  v66 = *(_QWORD *)(v20 - 8);
  v59 = v20;
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v58 - v23;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleContainerModifier<A>, a1, v22);
  v25 = type metadata accessor for _ViewModifier_Content();
  v26 = type metadata accessor for ModifiedContent();
  v63 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v58 - v28;
  v60 = type metadata accessor for ButtonStyleWriter(255, v17, v18, v30);
  v31 = type metadata accessor for ModifiedContent();
  v68 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v32);
  v58 = (char *)&v58 - v33;
  v34 = type metadata accessor for ModifiedContent();
  v69 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v35);
  v61 = (char *)&v58 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x1E0C80A78](v37, v38);
  v65 = (char *)&v58 - v40;
  v67 = *(_QWORD *)(v67 + 16);
  v41 = v70;
  v42 = v64;
  ((void (*)(char *, uint64_t, uint64_t, double))v67)(v15, v70, v64, v39);
  ButtonStyleModifier.init<A>(style:)((uint64_t)v15, v42, v74, v43, (uint64_t)v24);
  v44 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v25);
  v45 = v25;
  v46 = v59;
  MEMORY[0x18D75B4AC](v24, v45, v59, v44);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v24, v46);
  v77[0] = v44;
  v77[1] = &protocol witness table for ButtonStyleModifier<A>;
  v47 = MEMORY[0x1E0CE2E70];
  v48 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v26, v77);
  v49 = v58;
  MEMORY[0x18D75B4AC](v48, v26, v60, v48);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v29, v26);
  ((void (*)(char *, uint64_t, uint64_t))v67)(v15, v41, v42);
  v50 = v71;
  CustomButtonMenuStyleWriter.init<A>(style:)(v15, v42, v74);
  v76[0] = v48;
  v76[1] = &protocol witness table for ButtonStyleWriter<A>;
  v51 = MEMORY[0x18D75FFDC](v47, v31, v76);
  v53 = v61;
  v52 = v62;
  MEMORY[0x18D75B4AC](v50, v31, v62, v51);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v50, v52);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v49, v31);
  v75[0] = v51;
  v75[1] = &protocol witness table for CustomButtonMenuStyleWriter<A>;
  v54 = MEMORY[0x18D75FFDC](v47, v34, v75);
  v55 = (uint64_t)v65;
  static ViewBuilder.buildExpression<A>(_:)(v53, v34, v54);
  v56 = *(void (**)(char *, uint64_t))(v69 + 8);
  v56(v53, v34);
  static ViewBuilder.buildBlock<A>(_:)(v55, v34, v73);
  return ((uint64_t (*)(uint64_t, uint64_t))v56)(v55, v34);
}

uint64_t destroy for SettingsLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)v4, *(_BYTE *)(v4 + 8));
}

uint64_t type metadata accessor for WrappedButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WrappedButtonStyle);
}

uint64_t type metadata accessor for ButtonStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ButtonStyleModifier);
}

uint64_t type metadata accessor for ButtonStyleWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ButtonStyleWriter);
}

uint64_t type metadata accessor for CustomButtonMenuStyleWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomButtonMenuStyleWriter);
}

uint64_t ButtonStyleModifier.init<A>(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v8 = type metadata accessor for WrappedButtonStyle(0, a2, a3, a4);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 32))((char *)&v14 - v11, a1, a2, v10);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyle<A>, v8);
  return FormatInputToString.init(format:)((uint64_t)v12, v8, a5);
}

uint64_t ButtonStyleAdaptorMenuStyle.init(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4, a1, a2);
  v8 = a4 + *(int *)(type metadata accessor for ButtonStyleAdaptorMenuStyle(0, a2, a3, v7) + 36);
  result = swift_getKeyPath();
  *(_QWORD *)v8 = result;
  *(_BYTE *)(v8 + 8) = 0;
  return result;
}

uint64_t type metadata accessor for ButtonStyleAdaptorMenuStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ButtonStyleAdaptorMenuStyle);
}

void View.popover<A, B>(item:attachmentAnchor:arrowEdge:content:)()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Optional();
  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for ItemPopoverPresentationModifier();
}

void sub_186EB9F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&a9 - v15;
  v17 = *(_QWORD *)v11;
  v18 = *(_QWORD *)(v11 + 8);
  v19 = *(_BYTE *)(v11 + 16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v10 + 16))(v9, *(_QWORD *)(v13 - 200), v12, v14);
  *(_QWORD *)(v13 - 112) = v17;
  *(_QWORD *)(v13 - 104) = v18;
  *(_BYTE *)(v13 - 96) = v19;
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v17, v18, v19);
  static Semantics.v6.getter();
  isLinkedOnOrAfter(_:)();
  ItemPopoverPresentationModifier.init(item:popoverContent:attachmentAnchor:arrowEdge:keyType:)(v9, (uint64_t)v16);
}

uint64_t sub_186EBA04C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x18D75B4AC](v1, *(_QWORD *)(v3 - 136), v2, *(_QWORD *)(v3 - 144));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

_QWORD *initializeWithCopy for _TaskModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for TaskPriority();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_retain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t destroy for SharingPickerHostModifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 112);
  if (v2 != 1)
  {
    v3 = *(_QWORD *)(a1 + 72);
    if (v3 != 1)
    {
      outlined consume of AnyShareConfiguration.Storage(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
      if (v3)
      {
        outlined consume of Text.Storage(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
        swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)(a1 + 104))
      {
        outlined consume of Text.Storage(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
        swift_bridgeObjectRelease();
      }
    }
    if (v2)
      swift_release();
  }
  return swift_release();
}

uint64_t outlined consume of HoverCallback()
{
  return swift_release();
}

uint64_t destroy for ButtonAction(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));

    return swift_release();
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    return swift_release();
  }
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD *)(a1 + 32), *(_BYTE *)(a1 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_WORD *)(a1 + 72), *(_BYTE *)(a1 + 74));
  v3 = a1 + *(int *)(type metadata accessor for LinkDestination() + 24);
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

uint64_t destroy for NavigableListModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_DWORD *)(v3 + 80) & 0xF8;
  v6 = v5 + 15;
  v7 = ~(v5 | 7);
  v8 = *(_QWORD *)(v3 + 64);
  v9 = (_QWORD *)((((v5 + 15 + a1) & v7) + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v9 > 0xFFFFFFFEuLL)
  {
    swift_release();
    swift_release();
    if (v4)
      v10 = v8;
    else
      v10 = v8 + 1;
    if (v10 <= v8)
      v10 = v8;
    if (v10 <= 8)
      v11 = 8;
    else
      v11 = v10;
    v12 = *(unsigned __int8 *)((((unint64_t)v9 + v6) & v7) + v11);
    if (v12 >= 3)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 2)
      goto LABEL_19;
    if (v12 != 1)
    {
      swift_bridgeObjectRelease();
      return swift_release();
    }
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(((unint64_t)v9 + v6) & v7, 1, v2))LABEL_19:(*(void (**)(unint64_t, uint64_t))(v3 + 8))(((unint64_t)v9 + v6) & v7, v2);
  }
  return swift_release();
}

uint64_t destroy for List(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v9 = ~v8;
  v10 = (_QWORD *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v10 <= 0xFFFFFFFEuLL)
  {
    if (v7)
      v17 = *(_QWORD *)(v5 + 64);
    else
      v17 = v6 + 1;
    if (v17 <= v6)
      v17 = *(_QWORD *)(v5 + 64);
    if (v17 <= 8)
      v14 = 8;
    else
      v14 = v17;
  }
  else
  {
    swift_release();
    swift_release();
    v11 = v7 == 0;
    v12 = ((unint64_t)v10 + v8 + 8) & v9;
    if (v11)
      v13 = v6 + 1;
    else
      v13 = v6;
    if (v13 <= v6)
      v13 = v6;
    if (v13 <= 8)
      v14 = 8;
    else
      v14 = v13;
    v15 = *(unsigned __int8 *)(v12 + v14);
    if (v15 >= 3)
    {
      if (v14 <= 3)
        v16 = v14;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
      goto LABEL_26;
    if (v15 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4))
LABEL_26:
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v12, v4);
  }
LABEL_28:
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)
                                                                                            + v14
                                                                                            + ((v8 + 16) & v9)
                                                                                            + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
  return outlined consume of HoverCallback();
}

_QWORD *initializeWithCopy for List(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *__dsta;
  uint64_t v37;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_DWORD *)(v7 + 84);
  v10 = *(_DWORD *)(v7 + 80) & 0xF8;
  v11 = v10 | 7;
  v12 = (v10 + 23) & ~(v10 | 7);
  v13 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  if ((unint64_t)*v13 < 0xFFFFFFFF)
  {
    if (v9)
      v22 = *(_QWORD *)(v7 + 64);
    else
      v22 = v8 + 1;
    if (v22 > v8)
      v8 = v22;
    if (v8 <= 8)
      v19 = 8;
    else
      v19 = v8;
    memcpy(__dst, __src, v19 + v12 + 1);
  }
  else
  {
    v15 = v9 == 0;
    *__dst = *__src;
    v16 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v16 = v14;
    __dsta = (_QWORD *)(((unint64_t)v16 + v11 + 8) & ~v11);
    v37 = v12;
    v17 = (_QWORD *)(((unint64_t)v13 + v11 + 8) & ~v11);
    if (v15)
      v18 = v8 + 1;
    else
      v18 = v8;
    if (v18 > v8)
      v8 = v18;
    if (v8 <= 8)
      v19 = 8;
    else
      v19 = v8;
    v20 = *((unsigned __int8 *)v17 + v19);
    swift_retain();
    swift_retain();
    if (v20 >= 3)
    {
      if (v19 <= 3)
        v21 = v19;
      else
        v21 = 4;
      __asm { BR              X11 }
    }
    if (v20 == 2)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(__dsta, v17, v6);
      *((_BYTE *)__dsta + v19) = 2;
    }
    else if (v20 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v17, 1, v6))
      {
        memcpy(__dsta, v17, v18);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(__dsta, v17, v6);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(__dsta, 0, 1, v6);
      }
      *((_BYTE *)__dsta + v19) = 1;
    }
    else
    {
      *__dsta = *v17;
      *((_BYTE *)__dsta + v19) = 0;
      swift_bridgeObjectRetain();
    }
    v12 = v37;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = v19 + v12 + v24 + 1;
  v26 = ((unint64_t)__dst + v25) & ~v24;
  v27 = ((unint64_t)__src + v25) & ~v24;
  (*(void (**)(unint64_t, unint64_t))(v23 + 16))(v26, v27);
  v28 = *(_QWORD *)(v23 + 64) + 7;
  v29 = (_QWORD *)((v28 + v26) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)((v28 + v27) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(_QWORD *)v32;
  v34 = *(_QWORD *)(v32 + 8);
  LOBYTE(v23) = *(_BYTE *)(v32 + 16);
  outlined copy of HoverCallback();
  *(_QWORD *)v31 = v33;
  *(_QWORD *)(v31 + 8) = v34;
  *(_BYTE *)(v31 + 16) = v23;
  return __dst;
}

uint64_t outlined copy of HoverCallback()
{
  return swift_retain();
}

uint64_t assignWithTake for FormatInputToString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t destroy for SearchCustomScopeBarModifier(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t destroy for ResolvedTabView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ~v5;
  v7 = v5 + 16;
  v8 = *(_QWORD *)(v4 + 64);
  v9 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v4 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v9 + v5 + 8) & v6);
    v12 = v7 & ~v5;
    if (!(_DWORD)result)
    {
LABEL_5:
      swift_release();
      swift_release();
      result = (*(uint64_t (**)(unint64_t, uint64_t))(v4 + 8))(((unint64_t)v9 + v5 + 8) & v6, v3);
    }
  }
  else
  {
    v10 = *v9;
    if ((unint64_t)*v9 >= 0xFFFFFFFF)
      LODWORD(v10) = -1;
    result = (v10 + 1);
    v12 = v7 & ~v5;
    if ((_DWORD)v10 == -1)
      goto LABEL_5;
  }
  if (*(_QWORD *)(((a1 + v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

void type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>)
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
    v0 = type metadata accessor for AnimatablePair();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
  }
}

uint64_t destroy for OutsetByRowInsetsIfNecessary(uint64_t a1)
{
  outlined consume of Environment<EdgeInsets>.Content(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
}

uint64_t outlined consume of Environment<EdgeInsets>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) == 0)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for OutsetByRowInsetsIfNecessary(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_BYTE *)(a2 + 64);
  outlined copy of Environment<EdgeInsets>.Content(v5, v6, v7, v8, v9);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  LOBYTE(v6) = *(_BYTE *)(a2 + 80);
  outlined copy of Environment<Bool>.Content(v10, v6);
  *(_QWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

uint64_t outlined copy of Environment<EdgeInsets>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) == 0)
    return swift_retain();
  return result;
}

uint64_t outlined retain of TableColumnCustomizationID.Base(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t destroy for ScrollView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v4 + 48))
    swift_release();
  swift_unknownObjectWeakDestroy();
  if (*(_QWORD *)(v4 + 80))
    swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for NavigableListModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *__dst;
  uint64_t v25;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  v8 = v7 + 15;
  v9 = ~v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)a1 + v7 + 15) & v9;
  v11 = ((unint64_t)a2 + v7 + 15) & v9;
  v12 = *(_QWORD *)(v5 + 64);
  v13 = (v7 + 23) & v9;
  v14 = (_QWORD *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v14 < 0xFFFFFFFFuLL)
  {
    if (v6)
      v22 = *(_QWORD *)(v5 + 64);
    else
      v22 = v12 + 1;
    if (v22 > v12)
      v12 = v22;
    if (v12 <= 8)
      v19 = 8;
    else
      v19 = v12;
    memcpy((void *)v10, (const void *)v11, (v13 | 1) + v19);
  }
  else
  {
    v15 = v6 == 0;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v16 = (_QWORD *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v16 = *v14;
    __dst = (_QWORD *)(((unint64_t)v16 + v8) & v9);
    v25 = v13;
    v17 = (_QWORD *)(((unint64_t)v14 + v8) & v9);
    if (v15)
      v18 = v12 + 1;
    else
      v18 = v12;
    if (v18 > v12)
      v12 = v18;
    if (v12 <= 8)
      v19 = 8;
    else
      v19 = v12;
    v20 = *((unsigned __int8 *)v17 + v19);
    swift_retain();
    swift_retain();
    if (v20 >= 3)
    {
      if (v19 <= 3)
        v21 = v19;
      else
        v21 = 4;
      __asm { BR              X11 }
    }
    if (v20 == 2)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(__dst, v17, v4);
      *((_BYTE *)__dst + v19) = 2;
    }
    else if (v20 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v4))
      {
        memcpy(__dst, v17, v18);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(__dst, v17, v4);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(__dst, 0, 1, v4);
      }
      *((_BYTE *)__dst + v19) = 1;
    }
    else
    {
      *__dst = *v17;
      *((_BYTE *)__dst + v19) = 0;
      swift_bridgeObjectRetain();
    }
    v13 = v25;
  }
  *(_QWORD *)(((v10 | 7) + (v13 | 1) + v19) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v11 | 7) + (v13 | 1) + v19) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t Value;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  unsigned int *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  char *v56;
  unsigned int v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t OutputValue;
  uint64_t v72;
  void *v73;
  char v74;
  id v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, uint64_t, uint64_t);
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t AssociatedTypeWitness;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v7 = type metadata accessor for ViewLeafView(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v133 - v10;
  v165 = type metadata accessor for PlatformViewChild(0, a2, a3, v12);
  v153 = *(_QWORD *)(v165 - 8);
  MEMORY[0x1E0C80A78](v165, v13);
  v141 = (char *)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v134 = (char *)&v133 - v17;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v156 = type metadata accessor for Optional();
  v154 = *(_QWORD *)(v156 - 8);
  MEMORY[0x1E0C80A78](v156, v18);
  v140 = (char *)&v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v145 = (uint64_t *)((char *)&v133 - v22);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v133 - v25;
  v164 = a3;
  v155 = type metadata accessor for PlatformViewRepresentableContext(0, a2, a3, v27);
  v159 = *(_QWORD *)(v155 - 8);
  MEMORY[0x1E0C80A78](v155, v28);
  v142 = (uint64_t)&v133 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v133 = (uint64_t)&v133 - v32;
  MEMORY[0x1E0C80A78](v33, v34);
  v160 = (char *)&v133 - v35;
  v36 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v133 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)&v133 - v43;
  Value = AGGraphGetValue();
  v146 = v46;
  v149 = v36;
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v161 = v44;
  v138 = v47;
  v47(v44, Value, a2);
  v48 = (unsigned int *)AGGraphGetValue();
  v152 = v49;
  v50 = *v48;
  v51 = (uint64_t *)AGGraphGetValue();
  v148 = v52;
  v53 = *v51;
  v162 = v51[1];
  v163 = v53;
  v54 = *(_DWORD *)(a1 + 28);
  LODWORD(v53) = *MEMORY[0x1E0CFED28];
  v136 = v8;
  v135 = v11;
  v139 = v40;
  if (v54 == (_DWORD)v53)
  {
    LODWORD(v144) = 0;
    v143 = 0;
    v147 = 0;
    v158 = 0;
  }
  else
  {
    v55 = v7;
    v56 = v26;
    v57 = v50;
    v58 = AGGraphGetValue();
    v60 = v59;
    v61 = *(_QWORD *)v58;
    v147 = *(unsigned __int8 *)(v58 + 8);
    v62 = *(unsigned int *)(v58 + 12);
    swift_retain();
    v158 = v61;
    if (v61 == 1)
    {
      LODWORD(v144) = 0;
      v143 = 0;
      v147 = 0;
      v158 = 0;
    }
    else
    {
      LODWORD(v144) = v60 & 1;
      v143 = v62 << 32;
    }
    v50 = v57;
    v26 = v56;
    v7 = v55;
  }
  v63 = *(int *)(v165 + 88);
  if (v50 >> 1 == *(_DWORD *)(a1 + v63))
  {
    swift_retain();
    v64 = swift_retain();
  }
  else
  {
    v168 = *(_QWORD *)(a1 + 56);
    v169 = *(_QWORD *)(a1 + 64);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    PlatformViewChild.resetPlatformView()();
    *(_DWORD *)(a1 + v63) = v50 >> 1;
  }
  MEMORY[0x1E0C80A78](v64, v65);
  v66 = v164;
  *(&v133 - 4) = a2;
  *(&v133 - 3) = v66;
  v131 = a1;
  LODWORD(v132) = v50;
  v67 = (uint64_t)v161;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v161, (uint64_t)partial apply for closure #1 in closure #1 in PlatformViewChild.updateValue(), (uint64_t)(&v133 - 6), a2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v68);
  v150 = 0;
  v151 = v50;
  if ((v166 & 1) != 0)
  {
    v69 = 1;
LABEL_12:
    v70 = v152;
    goto LABEL_17;
  }
  OutputValue = AGGraphGetOutputValue();
  v69 = 1;
  if (!OutputValue || (v146 & 1) != 0)
    goto LABEL_12;
  v70 = v152;
  if ((v152 & 1) == 0)
    v69 = AGGraphCurrentAttributeWasModified();
LABEL_17:
  v166 = v69;
  AGGraphClearUpdate();
  closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, v67, a2, v164, &v168);
  AGGraphSetUpdate();
  v72 = v168;
  v171 = v163;
  v172 = v162;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v152 = *(int *)(v165 + 84);
  v73 = *(void **)(a1 + v152);
  v137 = v7;
  if (v73)
  {
    v74 = v148;
    if ((v148 & 1) != 0)
    {
      swift_retain();
      v75 = v73;
      swift_retain();
      v76 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v76 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v166 = 1;
      }
    }
    else
    {
      v91 = v73;
    }
    if (PlatformViewHost.isPlatformFocusContainerHost.getter())
    {
      v168 = 0;
      LOWORD(v169) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v172)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      v74 = v148;
    }
    v92 = v70 & 1;
    v93 = v165;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v94 = v168;
    v95 = v169;
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    closure #3 in closure #1 in PlatformViewChild.updateValue()(v92, v74 & 1, (uint64_t)v73, v94, v95, v151, (char)v144, v158, v147 | v143, (v147 | v143) >> 32);
    AGGraphSetUpdate();
    v96 = a1 + *(int *)(v93 + 80);
    v97 = (uint64_t)v145;
    v144 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v154 + 16);
    v144(v145, v96, v156);
    v147 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 48);
    result = ((uint64_t (*)(uint64_t, uint64_t))v147)(v97, 1);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      goto LABEL_59;
    }

    v98 = *(_QWORD *)(a1 + 40);
    v168 = v94;
    v169 = v95;
    v154 = v95;
    v170 = 0;
    v99 = v142;
    PlatformViewRepresentableContext.init(coordinator:preferenceBridge:transaction:environmentStorage:)(v97, v98, v72, (uint64_t)&v168, a2, v164, v142);
    v84 = v155;
    (*(void (**)(char *, uint64_t, uint64_t))(v159 + 32))(v160, v99, v155);
    swift_retain();
    swift_retain();
LABEL_41:
    if (v166 != 1)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
LABEL_57:
      (*(void (**)(char *, uint64_t))(v159 + 8))(v160, v84);
      swift_release();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v149 + 8))(v161, a2);
    }
    type metadata accessor for ViewGraph();
    v107 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v108 = MEMORY[0x18D760234](v107);
    swift_release();
    v146 = v72;
    v148 = v94;
    if (v108)
    {
      swift_getObjectType();
      v109 = swift_conformsToProtocol2();
      if (v109)
        v110 = v109;
      else
        v110 = 0;
      if (v109)
        v111 = v108;
      else
        v111 = 0;
      if (v111)
      {
LABEL_54:
        v112 = v153;
        v113 = v141;
        v114 = v165;
        v115 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v153 + 16))(v141, a1, v165);
        v117 = MEMORY[0x1E0C80A78](v115, v116);
        v118 = v164;
        *(&v133 - 8) = a2;
        *(&v133 - 7) = v118;
        v164 = v111;
        *(&v133 - 6) = v111;
        *(&v133 - 5) = v110;
        v119 = (uint64_t)v160;
        v120 = (uint64_t)v161;
        *(&v133 - 4) = a1;
        *(&v133 - 3) = v119;
        v131 = v120;
        v121 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewChild<A>, v114, v117);
        StatefulRule.withObservation<A>(do:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v113, v114);
        v122 = *(_QWORD **)(a1 + v152);
        if (v122)
        {
          v123 = (uint64_t)v139;
          v138(v139, v120, a2);
          v124 = (uint64_t)v140;
          v144((uint64_t *)v140, a1 + *(int *)(v114 + 80), v156);
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v147)(v124, 1, AssociatedTypeWitness);
          if ((_DWORD)result != 1)
          {
            v125 = (uint64_t)v135;
            v126 = ViewLeafView.init(content:platformView:coordinator:)(v123, v122, v124, (uint64_t)v135);
            MEMORY[0x1E0C80A78](v126, v127);
            v131 = v114;
            v132 = v121;
            v128 = v122;
            v129 = v137;
            _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v125, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v133 - 4), v137, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v130);
            swift_release();
            swift_release();

            swift_release();
            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v125, v129);
            v84 = v155;
            goto LABEL_57;
          }
          goto LABEL_60;
        }
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      swift_unknownObjectRelease();
    }
    else
    {
      v111 = 0;
    }
    v110 = 0;
    goto LABEL_54;
  }
  v166 = 1;
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  v77 = v165;
  EnvironmentValues.init(_:tracker:)();
  v78 = v168;
  v79 = v169;
  v80 = *(void (**)(char *, uint64_t, uint64_t))(v154 + 16);
  v80(v26, a1 + *(int *)(v77 + 80), v156);
  v147 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 48);
  result = ((uint64_t (*)(char *, uint64_t))v147)(v26, 1);
  if ((_DWORD)result != 1)
  {
    v82 = *(_QWORD *)(a1 + 40);
    v168 = v78;
    v169 = v79;
    v170 = 0;
    v83 = v133;
    PlatformViewRepresentableContext.init(coordinator:preferenceBridge:transaction:environmentStorage:)((uint64_t)v26, v82, v72, (uint64_t)&v168, a2, v164, v133);
    v84 = v155;
    (*(void (**)(char *, uint64_t, uint64_t))(v159 + 32))(v160, v83, v155);
    type metadata accessor for ViewGraph();
    swift_retain();
    swift_retain_n();
    v154 = v79;
    swift_retain_n();
    v85 = swift_retain();
    v86 = MEMORY[0x18D75C5F8](v85) + 200;
    swift_beginAccess();
    v87 = MEMORY[0x18D760234](v86);
    swift_release();
    v146 = v72;
    v144 = (void (*)(uint64_t *, uint64_t, uint64_t))v80;
    if (v87)
    {
      swift_getObjectType();
      v88 = swift_conformsToProtocol2();
      if (v88)
        v89 = v88;
      else
        v89 = 0;
      if (v88)
        v90 = v87;
      else
        v90 = 0;
      if (v90)
        goto LABEL_40;
      swift_unknownObjectRelease();
    }
    else
    {
      v90 = 0;
    }
    v89 = 0;
LABEL_40:
    v100 = v134;
    v101 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v153 + 16))(v134, a1, v77);
    v145 = &v133;
    MEMORY[0x1E0C80A78](v101, v102);
    v103 = v164;
    *(&v133 - 10) = a2;
    *(&v133 - 9) = v103;
    v104 = (uint64_t)v161;
    *(&v133 - 8) = (uint64_t)v160;
    *(&v133 - 7) = v104;
    *(&v133 - 6) = v90;
    *(&v133 - 5) = v89;
    *(&v133 - 4) = v78;
    v148 = v78;
    *(&v133 - 3) = v154;
    LODWORD(v131) = v151;
    v132 = a1;
    type metadata accessor for PlatformViewHost(255, a2, v103, v105);
    type metadata accessor for Optional();
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewChild<A>, v77);
    StatefulRule.withObservation<A>(do:)();
    v94 = v148;
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v153 + 8))(v100, v77);
    swift_unknownObjectRelease();
    v106 = *(void **)(a1 + v152);
    *(_QWORD *)(a1 + v152) = v167;

    v72 = v146;
    goto LABEL_41;
  }
LABEL_61:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PlatformViewChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformViewChild);
}

uint64_t _ScrollViewBoundsModifier.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  AGGraphGetValue();
  swift_retain();
  AGGraphGetValue();
  *(double *)&v6 = MEMORY[0x18D755E9C]();
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v7, v6));
  v9 = type metadata accessor for _ScrollViewBoundsModifier.Child(0, a3, a4, v8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollViewBoundsModifier<A>.Child, v9);
  Rule.withObservation<A>(do:)();
  return swift_release();
}

uint64_t closure #2 in closure #1 in PlatformViewChild.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  v7 = a1;
  v33 = a5;
  v8 = *(_QWORD *)(a3 - 8);
  v30 = a2;
  v31 = v8;
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v28 - v19;
  v22 = *(int *)(type metadata accessor for PlatformViewChild(0, a3, a4, v21) + 80);
  v32 = v7;
  v23 = v7 + v22;
  v24 = *(void (**)(char *))(v13 + 16);
  v29 = v23;
  v24(v20);
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  LODWORD(v7) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v20, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
  if ((_DWORD)v7 == 1)
  {
    v26 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v10, v30, a3);
    (*(void (**)(uint64_t, uint64_t))(a4 + 80))(a3, a4);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, a3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v16, 0, 1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(v29, v16, v12);
  }
  *v33 = *(_QWORD *)AGGraphGetValue();
  return swift_retain();
}

Swift::Void __swiftcall PlatformViewChild.updateValue()()
{
  static Signpost.platformUpdate.getter();
  Signpost.traceInterval<A>(object:_:_:closure:)();
}

uint64_t outlined init with take of CGRect?(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t destroy for _TaskModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for TaskPriority();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t partial apply for closure #3 in Section<>.internalBody.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #3 in Section<>.internalBody.getter);
}

uint64_t closure #3 in Section<>.internalBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Section(0, v12, v13, v14);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v15 + 44), a3, a4);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v11, a3, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a3);
}

uint64_t type metadata accessor for Section(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Section);
}

uint64_t partial apply for closure #2 in Section<>.internalBody.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in Section<>.internalBody.getter);
}

uint64_t closure #2 in Section<>.internalBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Section(0, v12, v13, v14);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v15 + 48), a3, a4);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v11, a3, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a3);
}

uint64_t View.accessibilityConfiguration<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 40))(v5, a3, a5);
}

void View.accessibilityCaptureViewResponders()()
{
  JUMPOUT(0x18D75B4ACLL);
}

void View.accessibilityIgnoreViewResponders()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t destroy for MenuSectionStyle(uint64_t a1)
{
  return outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for MenuSectionStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<ControlSize>.Content(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return a1;
}

uint64_t initializeWithCopy for HostingContentViewRootModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = a2 + 72;
  v6 = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  if (v6 == 1)
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)v7;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(v7 + 8);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = v6;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    swift_retain();
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  return a1;
}

uint64_t initializeWithCopy for _FocusableModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_retain();
  return a1;
}

uint64_t destroy for ResolvedList(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v2 = (_QWORD *)((result + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v2 >= 0xFFFFFFFFuLL)
  {
    v3 = *(_QWORD *)(a2 + 16);
    v4 = *(_QWORD *)(v3 - 8);
    v5 = *(_DWORD *)(v4 + 84);
    v6 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
    v7 = *(_QWORD *)(v4 + 64);
    swift_release();
    swift_release();
    v8 = ((unint64_t)v2 + v6 + 8) & ~v6;
    if (v5)
      v9 = v7;
    else
      v9 = v7 + 1;
    if (v9 <= v7)
      v9 = v7;
    if (v9 <= 8)
      v9 = 8;
    v10 = *(unsigned __int8 *)(v8 + v9);
    if (v10 >= 3)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    if (v10 == 2)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v8, v3);
    if (v10 != 1)
      return swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v8, v3);
  }
  return result;
}

uint64_t destroy for DragGesture(uint64_t result)
{
  if (!*(_BYTE *)(result + 48))
    return __swift_destroy_boxed_opaque_existential_1(result + 8);
  return result;
}

uint64_t destroy for OnCommandModifier(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return swift_release();
}

_BYTE *initializeWithCopy for SearchCustomScopeBarModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *initializeWithCopy for ResolvedTabView(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(uint64_t, unint64_t, uint64_t);
  unint64_t v17;
  unint64_t v18;
  __int128 v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ~v7;
  v9 = (v7 + 16) & ~v7;
  v10 = *(_QWORD *)(v6 + 64);
  v11 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    v13 = v9 + v10;
    if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v11 + v7 + 8) & v8))
    {
LABEL_5:
      memcpy(__dst, __src, v13);
      goto LABEL_8;
    }
  }
  else
  {
    v12 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF)
      LODWORD(v12) = -1;
    v13 = v9 + v10;
    if ((_DWORD)v12 != -1)
      goto LABEL_5;
  }
  *__dst = *__src;
  v14 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v11;
  v15 = ((unint64_t)v14 + v7 + 8) & v8;
  v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
  swift_retain();
  swift_retain();
  v16(v15, ((unint64_t)v11 + v7 + 8) & v8, v5);
LABEL_8:
  v17 = ((unint64_t)__dst + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)__src + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v18 + 8) < 0xFFFFFFFFuLL)
  {
    v19 = *(_OWORD *)v18;
    *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
    *(_OWORD *)v17 = v19;
  }
  else
  {
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
    *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
    swift_retain();
    swift_retain();
  }
  return __dst;
}

uint64_t initializeWithTake for ScrollView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_BYTE *)(v7 + 1) = *(_BYTE *)(v8 + 1);
  v9 = *(_OWORD *)(v8 + 24);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  *(_OWORD *)(v7 + 24) = v9;
  *(_BYTE *)(v7 + 40) = *(_BYTE *)(v8 + 40);
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(v8 + 48);
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(v7 + 72) = *(_QWORD *)(v8 + 72);
  v10 = *(_OWORD *)(v8 + 80);
  *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
  *(_OWORD *)(v7 + 80) = v10;
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(v8 + 104);
  return a1;
}

uint64_t initializeWithCopy for ScrollView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_BYTE *)(v7 + 1) = *(_BYTE *)(v8 + 1);
  v9 = *(_OWORD *)(v8 + 24);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  *(_OWORD *)(v7 + 24) = v9;
  *(_BYTE *)(v7 + 40) = *(_BYTE *)(v8 + 40);
  v10 = *(_QWORD *)(v8 + 48);
  if (v10)
  {
    v11 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(v7 + 48) = v10;
    *(_QWORD *)(v7 + 56) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(v8 + 48);
  }
  swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(v7 + 72) = *(_QWORD *)(v8 + 72);
  v12 = *(_QWORD *)(v8 + 80);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 88);
    *(_QWORD *)(v7 + 80) = v12;
    *(_QWORD *)(v7 + 88) = v13;
    *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
    swift_retain();
  }
  else
  {
    v14 = *(_OWORD *)(v8 + 80);
    *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
    *(_OWORD *)(v7 + 80) = v14;
  }
  *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 + 104);
  *(_QWORD *)(v7 + 112) = *(_QWORD *)(v8 + 112);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v38 = a4;
  v39 = a5;
  v41 = a1;
  v42 = a3;
  v37 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v36 - v13;
  v40 = a7;
  v16 = type metadata accessor for PlatformViewChild(0, a6, a7, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v36 - v19;
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v36 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, v42, v16, v24);
  PlatformViewChild.representedViewProvider.getter(v16, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v14, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(v26, v14, AssociatedTypeWitness);
  MEMORY[0x1E0C80A78](v28, v29);
  v30 = v39;
  v31 = v40;
  *(&v36 - 6) = a6;
  *(&v36 - 5) = v31;
  v32 = v38;
  *(&v36 - 4) = v38;
  *(&v36 - 3) = v30;
  *(&v36 - 2) = (uint64_t)v26;
  v33 = v41;
  if (v41)
  {
    MEMORY[0x1E0C80A78](v32, v30);
    v34 = v37;
    *(&v36 - 4) = v33;
    *(&v36 - 3) = v34;
    *(&v36 - 2) = (uint64_t)partial apply for closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
    *(&v36 - 1) = v35;
    swift_unknownObjectRetain();
    static Update.ensure<A>(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v32, v30, (uint64_t)v26, a6, v31);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v26, AssociatedTypeWitness);
}

uint64_t destroy for PlatformViewChild(uint64_t a1)
{
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = ((((((((((((((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
               + 7) & 0xFFFFFFFFFFFFFFFCLL)
             + 7) & 0xFFFFFFFFFFFFFFFCLL)
           + 7) & 0xFFFFFFFFFFFFFFFCLL)
         + 7) & 0xFFFFFFFFFFFFFFFCLL)
       + 11) & 0xFFFFFFFFFFFFFFF8)
     + 15;
  swift_release();
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = ((((v1 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  if (!*(_DWORD *)(v3 + 84))
    ++v5;

  return swift_release();
}

_DWORD *initializeWithCopy for PlatformViewChild(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  unsigned int (*v30)(const void *, uint64_t, uint64_t);
  int v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  _QWORD *v35;
  void **v36;
  void *v37;
  _DWORD *v38;
  _DWORD *v39;
  id v40;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFCLL);
  v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v13 = *v14;
  v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (_QWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
  *v21 = *v22;
  v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (void *)(((unint64_t)v23 + v27 + 16) & ~v27);
  v29 = (const void *)(((unint64_t)v24 + v27 + 16) & ~v27);
  v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
  swift_retain();
  swift_retain();
  if (v30(v29, 1, AssociatedTypeWitness))
  {
    v31 = *(_DWORD *)(v26 + 84);
    v32 = *(_QWORD *)(v26 + 64);
    if (v31)
      v33 = *(_QWORD *)(v26 + 64);
    else
      v33 = v32 + 1;
    memcpy(v28, v29, v33);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v28, v29, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, AssociatedTypeWitness);
    v31 = *(_DWORD *)(v26 + 84);
    v32 = *(_QWORD *)(v26 + 64);
  }
  if (v31)
    v34 = v32;
  else
    v34 = v32 + 1;
  v35 = (_QWORD *)(((unint64_t)v28 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  v36 = (void **)(((unint64_t)v29 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  v37 = *v36;
  *v35 = *v36;
  v38 = (_DWORD *)(((unint64_t)v35 + 11) & 0xFFFFFFFFFFFFF8);
  v39 = (_DWORD *)(((unint64_t)v36 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v38 = *v39;
  *(_QWORD *)(((unint64_t)v38 + 11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v39 + 11) & 0xFFFFFFFFFFFFF8);
  v40 = v37;
  swift_retain();
  return a1;
}

uint64_t PlatformViewChild.representedViewProvider.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;
  char *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD **)(v2 + *(int *)(a1 + 84));
  if (v4)
  {
    v5 = (char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x78);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(a2, v5, AssociatedTypeWitness);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v9 = a2;
    v10 = 0;
    v11 = AssociatedTypeWitness;
  }
  else
  {
    v11 = swift_getAssociatedTypeWitness();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  return v8(v9, v10, 1, v11);
}

uint64_t (*protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance _UIHostingView<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _UIHostingView.externalUpdateCount.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*_UIHostingView.externalUpdateCount.modify())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t partial apply for closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()()
{
  uint64_t *v0;

  return closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v0[4], v0[5], v0[6], v0[2], v0[3]);
}

uint64_t _UIHostingView.externalUpdateCount.getter()
{
  _QWORD *v0;
  char *v1;

  v1 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98);
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t ViewLeafView.init(content:platformView:coordinator:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;

  v7 = *MEMORY[0x1E0DEEDD8] & *a2;
  v8 = *(_QWORD *)(v7 + 0x50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  v10 = type metadata accessor for ViewLeafView(0, v8, *(_QWORD *)(v7 + 88), v9);
  *(_QWORD *)(a4 + *(int *)(v10 + 36)) = a2;
  v11 = a4 + *(int *)(v10 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v11, a3, AssociatedTypeWitness);
}

__n128 __swift_memcpy44_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

double specialized Environment.wrappedValue.getter(uint64_t a1, char a2)
{
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if ((a2 & 1) != 0)
    return *(double *)&a1;
  swift_retain();
  v3 = static os_log_type_t.fault.getter();
  v4 = static Log.runtimeIssuesLog.getter();
  v5 = v3;
  if (os_log_type_enabled(v4, v3))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v9 = v7;
    *(_DWORD *)v6 = 136315138;
    v10 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x74616F6C464743, 0xE700000000000000, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_186E48000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v7, -1, -1);
    MEMORY[0x18D760108](v6, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  outlined consume of Environment<Bool>.Content(a1, 0);
  swift_release();
  swift_release();
  return *(double *)&v10;
}

_QWORD *initializeWithCopy for ResolvedList(_QWORD *__dst, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v9 = ~v8;
  v10 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  if ((unint64_t)*v10 < 0xFFFFFFFF)
  {
    v20 = (v8 + 16) & v9;
    if (v7)
      v21 = *(_QWORD *)(v5 + 64);
    else
      v21 = v6 + 1;
    if (v21 > v6)
      v6 = v21;
    if (v6 <= 8)
      v6 = 8;
    memcpy(__dst, a2, v6 + v20 + 1);
  }
  else
  {
    v12 = v7 == 0;
    *__dst = *a2;
    v13 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v13 = v11;
    v14 = (_QWORD *)(((unint64_t)v13 + v8 + 8) & v9);
    v15 = (_QWORD *)(((unint64_t)v10 + v8 + 8) & v9);
    if (v12)
      v16 = v6 + 1;
    else
      v16 = v6;
    if (v16 > v6)
      v6 = v16;
    if (v6 <= 8)
      v17 = 8;
    else
      v17 = v6;
    v18 = *((unsigned __int8 *)v15 + v17);
    swift_retain();
    swift_retain();
    if (v18 >= 3)
    {
      if (v17 <= 3)
        v19 = v17;
      else
        v19 = 4;
      __asm { BR              X11 }
    }
    if (v18 == 2)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(v14, v15, v4);
      v22 = 2;
LABEL_31:
      *((_BYTE *)v14 + v17) = v22;
      return __dst;
    }
    if (v18 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v15, 1, v4))
      {
        memcpy(v14, v15, v16);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(v14, v15, v4);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
      }
      v22 = 1;
      goto LABEL_31;
    }
    *v14 = *v15;
    *((_BYTE *)v14 + v17) = 0;
    swift_bridgeObjectRetain();
  }
  return __dst;
}

uint64_t initializeWithCopy for DragGesture(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;

  v5 = *a2;
  v4 = a2 + 1;
  *(_QWORD *)a1 = v5;
  v6 = (_OWORD *)(a1 + 8);
  if (*((_BYTE *)a2 + 48))
  {
    v7 = v4[1];
    *v6 = *v4;
    v6[1] = v7;
    *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v4 + 25);
  }
  else
  {
    v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v4);
    *(_BYTE *)(a1 + 48) = 0;
  }
  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  return a1;
}

uint64_t PrimitiveButtonStyleContainerModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, double);
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  _QWORD v62[2];
  _QWORD v63[2];

  v60 = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v54 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 24);
  v10 = type metadata accessor for ButtonStyleModifier(0, v4, v8, v9);
  v59 = *(_QWORD *)(v10 - 8);
  v51 = v10;
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v53 = (char *)&v49 - v13;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, a2, v12);
  v14 = type metadata accessor for _ViewModifier_Content();
  v15 = type metadata accessor for ModifiedContent();
  v57 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v49 - v17;
  v52 = type metadata accessor for ButtonStyleWriter(255, v4, v8, v19);
  v20 = type metadata accessor for ModifiedContent();
  v56 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v49 = (char *)&v49 - v22;
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic, (uint64_t)&type metadata for ButtonMenuStyle.Automatic, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CustomButtonMenuStyleWriter);
  v50 = v23;
  v24 = type metadata accessor for ModifiedContent();
  v55 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v49 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28, v29);
  v32 = (char *)&v49 - v31;
  v33 = v5;
  v34 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v35 = v54;
  v34(v54, v58, v4, v30);
  v36 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
  v37 = v53;
  v36(v53, v35, v4);
  v38 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v14);
  v39 = v37;
  v40 = v37;
  v41 = v51;
  MEMORY[0x18D75B4AC](v39, v14, v51, v38);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v40, v41);
  v63[0] = v38;
  v63[1] = &protocol witness table for ButtonStyleModifier<A>;
  v42 = MEMORY[0x1E0CE2E70];
  v43 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v15, v63);
  v44 = v49;
  MEMORY[0x18D75B4AC](v43, v15, v52, v43);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v18, v15);
  v62[0] = v43;
  v62[1] = &protocol witness table for ButtonStyleWriter<A>;
  v45 = MEMORY[0x18D75FFDC](v42, v20, v62);
  MEMORY[0x18D75B4AC](v45, v20, v50, v45);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v44, v20);
  v61[0] = v45;
  v61[1] = &protocol witness table for CustomButtonMenuStyleWriter<A>;
  v46 = MEMORY[0x18D75FFDC](v42, v24, v61);
  static ViewBuilder.buildExpression<A>(_:)(v27, v24, v46);
  v47 = *(void (**)(char *, uint64_t))(v55 + 8);
  v47(v27, v24);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v32, v24, v60);
  return ((uint64_t (*)(char *, uint64_t))v47)(v32, v24);
}

uint64_t initializeWithCopy for RootModifier(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  swift_weakCopyInit();
  swift_weakCopyInit();
  swift_weakCopyInit();
  v4 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v6 - 8))(v4, v5);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 40);
    *v4 = *v5;
    *(_OWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v9 = *(unsigned __int8 *)(a2 + 88);
  if (v9 == 255)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  }
  else
  {
    v10 = v9 & 1;
    v11 = *(_QWORD *)(a2 + 72);
    v12 = *(_QWORD *)(a2 + 80);
    outlined copy of SceneID(v11, v12, v9 & 1);
    *(_QWORD *)(a1 + 72) = v11;
    *(_QWORD *)(a1 + 80) = v12;
    *(_BYTE *)(a1 + 88) = v10;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

void storeEnumTagSinglePayload for _ContentShapeModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

double static _HoverRegionModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  unint64_t v29;
  double v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double result;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  double *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 28);
  v11 = *(_DWORD *)(a2 + 32);
  v12 = *(_DWORD *)(a2 + 36);
  v14 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 56);
  v16 = *(_DWORD *)(a2 + 60);
  v18 = *(_DWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 68);
  v19 = *(_DWORD *)(a2 + 72);
  v20 = *(_DWORD *)(a2 + 76);
  v21 = *(_DWORD *)(a2 + 80);
  v62 = *(_QWORD *)a2;
  v54 = v7;
  LODWORD(v63) = v7;
  v64 = v8;
  v47 = v9;
  v65 = v9;
  v66 = v10;
  v53 = v10;
  v52 = v11;
  v67 = v11;
  v68 = v12;
  v51 = v12;
  v69 = v14;
  v70 = v13;
  v55 = v15;
  v71 = v15;
  v72 = v16;
  v50 = v16;
  v73 = v18;
  v74 = v17;
  v22 = v17;
  v49 = v19;
  v75 = v19;
  v76 = v20;
  v46 = v20;
  v45 = v21;
  v77 = v21;
  a3(&v56);
  type metadata accessor for ViewGraph();
  v23 = MEMORY[0x18D75C5F8]() + 200;
  swift_beginAccess();
  v24 = MEMORY[0x18D760234](v23);
  swift_release();
  if (v24)
  {
    v48 = v5;
    swift_getObjectType();
    v25 = swift_conformsToProtocol2();
    if (v25)
      v26 = v25;
    else
      v26 = 0;
    if (v25)
      v27 = v24;
    else
      v27 = 0;
    if (v27)
    {
      v44 = a4;
      ObjectType = swift_getObjectType();
      v29 = type metadata accessor for EventGraphHost();
      (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t))(*(_QWORD *)(v26 + 8)
                                                                                                 + 16))(&v62, v29, v29, ObjectType);
      swift_unknownObjectRelease();
      if (v62)
      {
        v30 = v63;
        v31 = swift_getObjectType();
        (*(void (**)(uint64_t, double))(*(_QWORD *)&v30 + 8))(v31, COERCE_DOUBLE(*(_QWORD *)&v30));
        swift_unknownObjectRelease();
        v62 = v13;
        LODWORD(v63) = v55;
        if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
        {
          v62 = v6;
          LODWORD(v63) = v54;
          v64 = v8;
          v65 = v47;
          v66 = v53;
          v67 = v52;
          v68 = v51;
          v69 = v14;
          v70 = v13;
          v71 = v55;
          v72 = v50;
          v73 = v18;
          v74 = v22;
          v75 = v49;
          v76 = v46;
          v77 = v45;
          type metadata accessor for HoverResponder();
          swift_allocObject();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v43 = HoverResponder.init(inputs:)();
          LODWORD(v62) = v48;
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_HoverRegionModifier>, (uint64_t)&type metadata for _HoverRegionModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
          swift_retain();
          LODWORD(v62) = _GraphValue.value.getter();
          protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
          lazy protocol witness table accessor for type _HoverRegionModifier.Callback and conformance _HoverRegionModifier.Callback();
          v42 = Attribute.init<A>(body:value:flags:update:)();
          v62 = v56;
          v63 = v57;
          v41 = _ViewOutputs.viewResponders()();
          v62 = v6;
          LODWORD(v63) = v54;
          v64 = v8;
          v65 = v47;
          v66 = v53;
          v67 = v52;
          v68 = v51;
          v69 = v14;
          v70 = v13;
          v71 = v55;
          v72 = v50;
          v73 = v18;
          v74 = v22;
          v75 = v49;
          v76 = v46;
          v77 = v45;
          v40 = _ViewInputs.animatedPosition()();
          v62 = v6;
          LODWORD(v63) = v54;
          v64 = v8;
          v65 = v47;
          v66 = v53;
          v67 = v52;
          v68 = v51;
          v69 = v14;
          v70 = v13;
          v71 = v55;
          v72 = v50;
          v73 = v18;
          v74 = v22;
          v75 = v49;
          v76 = v46;
          v77 = v45;
          v39 = _ViewInputs.transform.getter();
          v62 = v6;
          LODWORD(v63) = v54;
          v64 = v8;
          v65 = v47;
          v66 = v53;
          v67 = v52;
          v68 = v51;
          v69 = v14;
          v70 = v13;
          v71 = v55;
          v72 = v50;
          v73 = v18;
          v74 = v22;
          v75 = v49;
          v76 = v46;
          v77 = v45;
          v38 = _ViewInputs.animatedSize()();
          v62 = v6;
          LODWORD(v63) = v54;
          v64 = v8;
          v65 = v47;
          v66 = v53;
          v67 = v52;
          v68 = v51;
          v69 = v14;
          v70 = v13;
          v71 = v55;
          v72 = v50;
          v73 = v18;
          v74 = v22;
          v75 = v49;
          v76 = v46;
          v77 = v45;
          swift_getKeyPath();
          v32 = _ViewInputs.mapEnvironment<A>(_:)();
          swift_release();
          v58 = 1;
          v59 = 0u;
          v60 = 0u;
          v61 = 2;
          v5 = v48;
          outlined init with copy of CoordinateSpace((uint64_t)&v58, (uint64_t)&v63);
          BYTE1(v70) = 0;
          swift_release();
          v62 = v43;
          HIDWORD(v70) = v42;
          v71 = v41;
          v72 = v40;
          v73 = v39;
          v74 = v38;
          v75 = v32;
          outlined destroy of CoordinateSpace((uint64_t)&v58);
          protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
          lazy protocol witness table accessor for type HoverResponderChild and conformance HoverResponderChild();
          Attribute.init<A>(body:value:flags:update:)();
          outlined destroy of HoverResponderChild((uint64_t)&v62);
          static AGAttributeFlags.removable.getter();
          AGGraphGetFlags();
          AGGraphSetFlags();
          LOBYTE(v62) = 0;
          _ViewOutputs.subscript.setter();
          swift_release();
          a4 = v44;
          goto LABEL_16;
        }
        swift_release();
      }
      a4 = v44;
    }
    else
    {
      swift_unknownObjectRelease();
    }
    v5 = v48;
  }
LABEL_16:
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v62 & 1) != 0)
  {
    LODWORD(v62) = v5;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_HoverRegionModifier>, (uint64_t)&type metadata for _HoverRegionModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    v33 = _GraphValue.value.getter();
    MEMORY[0x1E0C80A78](v33, v34);
    v62 = v13;
    LODWORD(v63) = v55;
    MEMORY[0x1E0C80A78](v35, v36);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)a4 = v56;
  result = v57;
  a4[1] = v57;
  return result;
}

Swift::Void __swiftcall HoverResponderChild.updateValue()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *Value;
  char v3;
  char v4;
  uint64_t *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  __int128 *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  char v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v1 = v0;
  v50 = *MEMORY[0x1E0C80C00];
  Value = (uint64_t *)AGGraphGetValue();
  v4 = v3;
  v42 = Value[1];
  v43 = *Value;
  v5 = (uint64_t *)AGGraphGetValue();
  v7 = v6;
  v8 = *v5;
  v9 = v5[1];
  v10 = v5[2];
  v11 = v5[3];
  v12 = v5[4];
  v13 = (uint64_t *)AGGraphGetValue();
  v15 = *v13;
  v16 = v13[1];
  v17 = v13[2];
  v18 = v13[3];
  if ((v4 & 1) != 0
    || (v7 & 1) != 0
    || (v14 & 1) != 0
    || (type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]), !AGGraphGetOutputValue()))
  {
    v44 = v8;
    *(_QWORD *)&v45 = v9;
    *((_QWORD *)&v45 + 1) = v10;
    *(_QWORD *)&v46 = v11;
    *((_QWORD *)&v46 + 1) = v12;
    *(_QWORD *)&v48 = v43;
    *((_QWORD *)&v48 + 1) = v42;
    v19 = swift_retain_n();
    *(double *)&v20 = MEMORY[0x18D755E9C](v19);
    ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v21, v20));
    v22 = *v1;
    *(_QWORD *)&v48 = v15;
    *((_QWORD *)&v48 + 1) = v16;
    *(_QWORD *)&v49 = v17;
    *((_QWORD *)&v49 + 1) = v18;
    *(double *)(v22 + 272) = MEMORY[0x18D75BE3C]();
    *(_QWORD *)(v22 + 280) = v23;
    *(_QWORD *)(v22 + 232) = v44;
    v24 = v46;
    *(_OWORD *)(v22 + 240) = v45;
    *(_OWORD *)(v22 + 256) = v24;
    swift_release();
  }
  else
  {
    swift_retain();
  }
  v25 = AGGraphGetValue();
  v27 = *(_QWORD *)v25;
  v26 = *(_QWORD *)(v25 + 8);
  v28 = *(_BYTE *)(v25 + 16);
  if ((v29 & 1) != 0
    || (type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]), !AGGraphGetOutputValue()))
  {
    v30 = *v1;
    *(_QWORD *)(v30 + 208) = v27;
    *(_QWORD *)(v30 + 216) = v26;
    *(_BYTE *)(v30 + 224) = v28;
    outlined copy of HoverCallback();
    outlined copy of HoverCallback();
    outlined consume of HoverCallback();
  }
  else
  {
    outlined copy of HoverCallback();
  }
  v31 = *v1;
  outlined init with copy of HoverResponderChild.CoordinateSpaceStorage((uint64_t)(v1 + 1), (uint64_t)&v44);
  if ((v47 & 1) != 0)
  {
    v32 = AGGraphGetValue();
    outlined init with copy of CoordinateSpace(v32, (uint64_t)&v48);
  }
  else
  {
    outlined init with take of CoordinateSpace((uint64_t)&v44, (uint64_t)&v48);
  }
  swift_beginAccess();
  outlined assign with take of CoordinateSpace((uint64_t)&v48, v31 + 288);
  swift_endAccess();
  static Semantics.v5.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
  {
    v33 = *v1;
    outlined init with copy of HoverResponderChild((uint64_t)v1, (uint64_t)&v44);
    v34 = *(_BYTE *)AGGraphGetValue();
    outlined destroy of HoverResponderChild((uint64_t)&v44);
    *(_BYTE *)(v33 + 449) = v34;
  }
  v35 = *v1;
  v36 = (__int128 *)AGGraphGetValue();
  v37 = v36[1];
  v48 = *v36;
  v49 = v37;
  AGGraphGetValue();
  v38 = AGGraphGetValue();
  v44 = *(_QWORD *)v38;
  v39 = *(_OWORD *)(v38 + 24);
  v45 = *(_OWORD *)(v38 + 8);
  v46 = v39;
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  AGGraphGetValue();
  if ((v40 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  if (AGGraphGetOutputValue())
  {
    swift_release();
    outlined consume of HoverCallback();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v41 + 32) = v35;
    v44 = v41;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    outlined consume of HoverCallback();
    swift_bridgeObjectRelease();
    swift_release();
  }
}

uint64_t outlined destroy of HoverResponderChild(uint64_t a1)
{
  destroy for HoverResponderChild(a1);
  return a1;
}

uint64_t destroy for HoverResponderChild(uint64_t a1)
{
  uint64_t result;

  result = swift_release();
  if ((*(_BYTE *)(a1 + 49) & 1) == 0 && !*(_BYTE *)(a1 + 48))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return result;
}

uint64_t outlined init with copy of HoverResponderChild(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for HoverResponderChild(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for HoverResponderChild(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 49);
  swift_retain();
  if ((v6 & 1) != 0)
  {
    v7 = v5[1];
    *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 34) = *(_OWORD *)((char *)v5 + 26);
  }
  else if (*(_BYTE *)(a2 + 48))
  {
    v8 = v5[1];
    *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 33) = *(_OWORD *)((char *)v5 + 25);
    *(_BYTE *)(a1 + 49) = 0;
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 32) = v9;
    (**(void (***)(uint64_t, _OWORD *))(v9 - 8))(a1 + 8, v5);
    *(_WORD *)(a1 + 48) = 0;
  }
  *(_OWORD *)(a1 + 52) = *(_OWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 68) = *(_QWORD *)(a2 + 68);
  return a1;
}

void type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  }
}

uint64_t outlined init with take of CoordinateSpace(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE2C98] - 8) + 32))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of HoverResponderChild.CoordinateSpaceStorage(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for HoverResponderChild.CoordinateSpaceStorage(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for HoverResponderChild.CoordinateSpaceStorage(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  char v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;

  v3 = *(unsigned __int8 *)(a2 + 41);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v4 = 1;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v4 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v4 = 0;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t))(v6 - 8))(a1);
      v4 = 0;
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  *(_BYTE *)(a1 + 41) = v4;
  return a1;
}

uint64_t outlined assign with take of CoordinateSpace(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE2C98] - 8) + 40))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type _HoverRegionModifier.Callback and conformance _HoverRegionModifier.Callback()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _HoverRegionModifier.Callback and conformance _HoverRegionModifier.Callback;
  if (!lazy protocol witness table cache variable for type _HoverRegionModifier.Callback and conformance _HoverRegionModifier.Callback)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _HoverRegionModifier.Callback, &type metadata for _HoverRegionModifier.Callback);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _HoverRegionModifier.Callback and conformance _HoverRegionModifier.Callback);
  }
  return result;
}

uint64_t assignWithTake for PlainButtonStyleBase(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

unint64_t lazy protocol witness table accessor for type HoverResponderChild and conformance HoverResponderChild()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HoverResponderChild and conformance HoverResponderChild;
  if (!lazy protocol witness table cache variable for type HoverResponderChild and conformance HoverResponderChild)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HoverResponderChild, &type metadata for HoverResponderChild);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverResponderChild and conformance HoverResponderChild);
  }
  return result;
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance PlainButtonStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PlainButtonStyle.makeBody(configuration:)(a1, a2);
}

uint64_t PlainButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v23 - v15;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v17 = v7[1];
  *v12 = *v7;
  v12[1] = v17;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v7[*(int *)(v4 + 24)], (uint64_t)&v12[*(int *)(v9 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  outlined destroy of PrimitiveButtonStyleConfiguration((uint64_t)v7);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v12, (uint64_t)v16);
  KeyPath = swift_getKeyPath();
  v19 = swift_getKeyPath();
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v16, a2);
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>>();
  v21 = a2 + *(int *)(v20 + 36);
  *(_QWORD *)v21 = KeyPath;
  *(_BYTE *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = v19;
  *(_BYTE *)(v21 + 24) = 0;
  return outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v16);
}

uint64_t outlined destroy of PrimitiveButtonStyleConfiguration(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for ButtonStyleContainerModifier<PlainButtonStyleBase>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>>);
  }
}

uint64_t _UIHostingView.eventBindingManager.getter()
{
  specialized _UIHostingView.eventBindingManager.getter();
  return swift_retain();
}

uint64_t type metadata accessor for HoverResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HoverResponder;
  if (!type metadata singleton initialization cache for HoverResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t HoverResponder.init(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  swift_retain();
  ContentResponderHelper.init()();
  *(_QWORD *)(v0 + 432) = 0;
  *(_QWORD *)(v0 + 440) = 0;
  *(_WORD *)(v0 + 448) = 257;
  *(_QWORD *)(v0 + 208) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)(v0 + 216) = 0;
  *(_BYTE *)(v0 + 224) = 1;
  ViewTransform.init()();
  *(_QWORD *)(v0 + 232) = v4;
  *(_OWORD *)(v0 + 240) = v5;
  *(_OWORD *)(v0 + 256) = v6;
  static CGSize.invalidValue.getter();
  *(_QWORD *)(v0 + 272) = v1;
  *(_QWORD *)(v0 + 280) = v2;
  *(_QWORD *)(v0 + 288) = 1;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_BYTE *)(v0 + 328) = 2;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t IncrementalTransition.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t Value;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = v1;
  v49 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v39 - v9;
  v11 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v39 - v13;
  v15 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v2 + 8);
  if (!v22)
    __break(1u);
  v40 = v19;
  v41 = v18;
  v42 = v10;
  v43 = v7;
  v23 = *(_DWORD *)(v22 + 52);
  v24 = *MEMORY[0x1E0CFED28];
  v44 = AssociatedTypeWitness;
  if (v23 == v24)
  {
    ViewTraitCollection.init()();
    v25 = v46[0];
  }
  else
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    Value = AGGraphGetValue();
    outlined init with copy of TableColumnList(Value, (uint64_t)v46);
    v27 = v47;
    v28 = v48;
    __swift_project_boxed_opaque_existential_1(v46, v47);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v28 + 40))(&v45, v27, v28);
    v25 = v45;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  }
  v45 = v25;
  ViewTraitCollection.transition.getter();
  swift_bridgeObjectRelease();
  AnyTransition.base<A>(as:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v41);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v21, v14, v5);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 40))(v2 + *(int *)(a1 + 40), v21, v5);
  }
  v29 = AGGraphGetValue();
  if (*(_BYTE *)(v29 + 5))
    v30 = *(unsigned __int8 *)(v29 + 4);
  else
    v30 = 1;
  v31 = PlaceholderContentView.init()();
  v32 = (uint64_t)v42;
  v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 24))(v31, v30, v5, v4);
  v35 = MEMORY[0x1E0C80A78](v33, v34);
  *(&v39 - 2) = a1;
  *(&v39 - 1) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalTransition<A>, a1, v35);
  v36 = v44;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v32, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v39 - 4), v44, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v37);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v32, v36);
}

uint64_t initializeWithCopy for SheetPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  v8 = (unint64_t *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v9 = *v8;
  swift_retain();
  swift_retain();
  if (v9 < 0xFFFFFFFF)
  {
    *v6 = *(_OWORD *)v8;
  }
  else
  {
    v10 = v8[1];
    *(_QWORD *)v6 = v9;
    *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = v10;
    swift_retain();
  }
  v11 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_QWORD *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  *(_BYTE *)(v11 + 17) = *(_BYTE *)(v12 + 17);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (v16 + 18 + v11) & ~v16;
  v18 = (v16 + 18 + v12) & ~v16;
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  swift_retain();
  v19(v17, v18, v14);
  *(_BYTE *)(v17 + *(_QWORD *)(v15 + 64)) = *(_BYTE *)(v18 + *(_QWORD *)(v15 + 64));
  return a1;
}

uint64_t InvalidatableLeafLayoutComputer.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t result;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD v43[4];
  char v44;
  _BYTE v45[176];

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for PlatformViewLayoutEngine(0, v6, v7, a4);
  v41 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v39 = v6;
  v40 = (uint64_t)&v37 - v10;
  v38 = v7;
  v12 = type metadata accessor for ViewLeafView(0, v6, v7, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v37 - v19;
  ViewResponderFilter.view.getter(a1, v21, (uint64_t)&v37 - v19);
  v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23 = *(id *)&v20[*(int *)(v12 + 36)];
  v22(v20, v12);
  v24 = (uint64_t)v23 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v23) + 0xC0);
  swift_beginAccess();
  outlined init with copy of SwiftUIAnySortComparator?(v24, (uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for PlatformViewLayoutInvalidator?, (uint64_t)&type metadata for PlatformViewLayoutInvalidator);

  LOBYTE(v23) = v45[16];
  outlined destroy of AccessibilityTableContext?((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for PlatformViewLayoutInvalidator?, (uint64_t)&type metadata for PlatformViewLayoutInvalidator);
  if ((v23 & 1) != 0)
  {
    ViewResponderFilter.view.getter(a1, v25, (uint64_t)v16);
    v26 = *(id *)&v16[*(int *)(v12 + 36)];
    v22(v16, v12);
    swift_weakLoadStrong();
    result = AGGraphGetCurrentAttribute();
    v28 = *MEMORY[0x1E0CFED28];
    if ((_DWORD)result == *MEMORY[0x1E0CFED28])
      goto LABEL_8;
    v29 = AGCreateWeakAttribute();
    v30 = v29;
    v31 = HIDWORD(v29);
    swift_weakInit();
    swift_release();
    v43[2] = v30;
    v43[3] = v31;
    v44 = 0;
    v32 = (uint64_t)v26 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v26) + 0xC0);
    swift_beginAccess();
    outlined assign with take of PlatformViewLayoutInvalidator?((uint64_t)v43, v32);
    swift_endAccess();

  }
  else
  {
    v28 = *MEMORY[0x1E0CFED28];
  }
  ViewResponderFilter.view.getter(a1, v25, (uint64_t)v16);
  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result != v28)
  {
    v33 = result;
    v34 = *(_DWORD *)(v4 + 4);
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    v35 = v40;
    PlatformViewLayoutEngine.init(cache:view:environment:context:)((uint64_t)v43, (uint64_t)v16, v34, v33, v39, v38, v40);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for InvalidatableLeafLayoutComputer<A>, a1);
    v36 = v42;
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewLayoutEngine<A>, v42);
    StatefulRule<>.update<A>(to:)();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v35, v36);
  }
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t PlatformViewLayoutEngine.init(cache:view:environment:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v9;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v9 = a4;
  v13 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a7 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a7 + 144) = v13;
  *(_BYTE *)(a7 + 160) = *(_BYTE *)(a1 + 160);
  v14 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a7 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a7 + 80) = v14;
  v15 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a7 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a7 + 112) = v15;
  v16 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a7 = *(_OWORD *)a1;
  *(_OWORD *)(a7 + 16) = v16;
  v17 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a7 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a7 + 48) = v17;
  v18 = (int *)type metadata accessor for PlatformViewLayoutEngine(0, a5, a6, a4);
  v19 = a7 + v18[9];
  v21 = type metadata accessor for ViewLeafView(0, a5, a6, v20);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, a2, v21);
  *(_DWORD *)(a7 + v18[10]) = a3;
  *(_DWORD *)(a7 + v18[11]) = v9;
  return result;
}

uint64_t type metadata accessor for PlatformViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformViewLayoutEngine);
}

uint64_t PlatformViewDisplayList.updateValue()(uint64_t a1)
{
  uint64_t *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t Value;
  char v16;
  char v17;
  void (*v18)(uint64_t *, char *, uint64_t);
  char *v19;
  unint64_t v20;
  void (*v21)(uint64_t *, char *, uint64_t);
  int v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  char *v32;
  __int16 v33;
  uint64_t v34;
  double v35;
  CGFloat v36;
  double v37;
  double v38;
  double v39;
  CGFloat v40;
  double v41;
  double v42;
  CGFloat v43;
  CGFloat v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD v53[2];
  uint64_t v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  uint64_t AssociatedTypeWitness;
  unint64_t v59;
  __int16 v60;
  char v61;
  int v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int16 v69;
  char v70;
  int v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __int16 v78;
  char v79;
  int v80;
  UIEdgeInsets_optional v81;
  uint64_t v82;

  v2 = (int *)v1;
  v82 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v53[1] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v57 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  v7 = (char *)v53 - v6;
  v9 = type metadata accessor for ViewLeafView(0, v4, v3, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v53 - v12;
  DisplayList.Version.init(forUpdate:)();
  v14 = v72;
  v55 = *((_DWORD *)v1 + 3);
  LODWORD(v56) = *((_DWORD *)v1 + 4);
  Value = AGGraphGetValue();
  v17 = v16;
  v54 = v10;
  v18 = *(void (**)(uint64_t *, char *, uint64_t))(v10 + 16);
  v19 = v13;
  v20 = v14;
  v21 = v18;
  v18((uint64_t *)v19, (char *)Value, v9);
  if ((v17 & 1) != 0)
  {
    v22 = (2 * ((33 * (v20 >> 16)) ^ v20)) | 1;
    if (!v20)
      LOWORD(v22) = 0;
    *((_WORD *)v1 + 16) = v22;
  }
  v72 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v72 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v23 = (__int128 *)AGGraphGetValue();
  v24 = v23[1];
  v72 = *v23;
  v73 = v24;
  MEMORY[0x18D75BE3C]();
  v26 = v25;
  ViewLeafView.representedViewProvider.getter(v9, (uint64_t)v7);
  (*(void (**)(__int128 *__return_ptr, char *, uint64_t, uint64_t))(v3 + 144))(&v72, v7, v4, v3);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v7, AssociatedTypeWitness);
  if ((v72 & 4) != 0)
  {
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E0CFED28])
      __break(1u);
    AssociatedTypeWitness = (uint64_t)v21;
    v28 = *((_DWORD *)v1 + 4);
    v29 = *((_DWORD *)v1 + 5);
    v30 = *((_DWORD *)v1 + 6);
    v31 = *((_DWORD *)v1 + 7);
    v32 = v19;
    v33 = *((_WORD *)v1 + 16);
    v57 = v26;
    v34 = *v1;
    *(_QWORD *)&v27 = v1[1];
    v56 = v27;
    _PositionAwarePlacementContext.init(context:size:environment:transform:position:safeAreaInsets:)();
    _PositionAwarePlacementContext.safeAreaInsets(matching:)();
    v36 = v35;
    v38 = v37;
    v40 = v39;
    v42 = v41;
    *(_QWORD *)&v72 = v34;
    *((_QWORD *)&v72 + 1) = v56;
    *(_QWORD *)&v73 = __PAIR64__(v29, v28);
    *((_QWORD *)&v73 + 1) = __PAIR64__(v31, v30);
    LOWORD(v74) = v33;
    v19 = v32;
    PlatformViewDisplayList.environment.getter(&v63);
    v72 = v63;
    EnvironmentValues.layoutDirection.getter();
    swift_release();
    v21 = (void (*)(uint64_t *, char *, uint64_t))AssociatedTypeWitness;
    swift_release();
    if (LOBYTE(v81.value.top))
      v43 = v38;
    else
      v43 = v42;
    if (LOBYTE(v81.value.top))
      v44 = v42;
    else
      v44 = v38;
    v45 = *(void **)&v32[*(int *)(v9 + 36)];
    v81.value.top = v36;
    v81.value.left = v44;
    v81.value.bottom = v40;
    v81.value.right = v43;
    v81.is_nil = 0;
    v46 = v45;
    PlatformViewHost.updateSafeAreaInsets(_:)(&v81);

  }
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 40) = v9;
  *(_QWORD *)(v47 + 48) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewLeafView<A>, v9);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v47 + 16));
  v21(boxed_opaque_existential_1, v19, v9);
  v49 = *((unsigned __int16 *)v2 + 16);
  *(_QWORD *)&v63 = v47 | 0x6000000000000000;
  *((_QWORD *)&v63 + 1) = v49;
  *(_QWORD *)&v64 = 0;
  BYTE10(v64) = 0;
  WORD4(v64) = 0;
  v62 = *v2;
  v59 = v20;
  DisplayList.Item.init(_:frame:identity:version:)();
  LOBYTE(v63) = 0;
  DisplayList.Item.canonicalize(options:)();
  v50 = v75;
  v51 = v76;
  v63 = v72;
  v64 = v73;
  v65 = v74;
  v66 = v75;
  v67 = v76;
  v68 = v77;
  v70 = v79;
  v69 = v78;
  v71 = v80;
  outlined copy of DisplayList.Item.Value(v75, v76);
  DisplayList.init(_:)();
  *(_QWORD *)&v63 = v59;
  WORD4(v63) = v60;
  BYTE10(v63) = v61;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  outlined consume of DisplayList.Item.Value(v50, v51);
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v19, v9);
}

uint64_t protocol witness for static PlatformViewRepresentable.layoutOptions(_:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2)
{
  return static PlatformViewRepresentableAdaptor.layoutOptions(_:)(*a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t static PlatformViewRepresentableAdaptor.layoutOptions(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

void static UIViewRepresentable._layoutOptions(_:)(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for StyleModifier.styleBody(configuration:) in conformance SectionStyleModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SectionStyleModifier.styleBody(configuration:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), a2, a3);
}

uint64_t SectionStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[4];
  char v33;

  v31 = a5;
  v8 = *(_QWORD *)(a4 + 16);
  v9 = *(_QWORD *)(a4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v13 = (char *)&v28 - v12;
  type metadata accessor for _TraitWritingModifier<IsExpandedTraitKey>();
  v14 = type metadata accessor for ModifiedContent();
  v30 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v28 = (char *)&v28 - v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v9 + 24))(a1, a2, a3, v8, v9, v20);
  v32[2] = a1;
  v32[3] = a2;
  v33 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  View._trait<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v13, AssociatedTypeWitness);
  v23 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _TraitWritingModifier<IsExpandedTraitKey> and conformance _TraitWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _TraitWritingModifier<IsExpandedTraitKey>, MEMORY[0x1E0CE52E0]);
  v32[0] = AssociatedConformanceWitness;
  v32[1] = v23;
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v14, v32);
  v25 = (uint64_t)v28;
  static ViewBuilder.buildExpression<A>(_:)(v17, v14, v24);
  v26 = *(void (**)(char *, uint64_t))(v30 + 8);
  v26(v17, v14);
  static ViewBuilder.buildBlock<A>(_:)(v25, v14, v31);
  return ((uint64_t (*)(uint64_t, uint64_t))v26)(v25, v14);
}

uint64_t protocol witness for View.body.getter in conformance ResolvedSectionStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(v1 + 16);
  return outlined copy of Binding<NavigationSplitViewColumn>?(v2, v3);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout>)
  {
    type metadata accessor for _ViewModifier_Content<OutsetByRowInsetsIfNecessary>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout>);
  }
}

double specialized Environment.wrappedValue.getter()
{
  _BYTE *v0;
  os_log_type_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  double v7;

  if (v0[32] == 1)
    return *(double *)v0;
  swift_retain();
  v2 = static os_log_type_t.fault.getter();
  v3 = static Log.runtimeIssuesLog.getter();
  v4 = v2;
  if (os_log_type_enabled(v3, v2))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v7 = *(double *)&v6;
    *(_DWORD *)v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x65736E4965676445, 0xEA00000000007374, (uint64_t *)&v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_186E48000, v3, v4, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v6, -1, -1);
    MEMORY[0x18D760108](v5, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Environment<EdgeInsets>.Content);
  swift_release();
  swift_release();
  return v7;
}

void storeEnumTagSinglePayload for _ContentShapeKindModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if ((*(_DWORD *)(v5 + 64) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if ((*(_DWORD *)(v5 + 64) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, (*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_186EC0534()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_186EC053C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186EC0544);
}

void sub_186EC0578()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_186EC0580()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_186EC0588(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
LABEL_2:
    JUMPOUT(0x186EC0590);
  if (a3 < 0xFE)
  {
    *(_BYTE *)(v6 + v4) = a2 + 1;
    goto LABEL_2;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v6);
}

uint64_t initializeBufferWithCopyOfBuffer for BaseModifier(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, v7);
  type metadata accessor for PlatformViewHost(0, a3, a4, v8);
  RepresentableContextValues.asCurrent<A>(do:)((void (*)(uint64_t))partial apply for closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue());
  swift_release();
  swift_release();
  result = outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, v7);
  *a2 = v10;
  return result;
}

uint64_t RepresentableContextValues.asCurrent<A>(do:)(void (*a1)(uint64_t))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[3];
  v16 = v1[2];
  v5 = *((_BYTE *)v1 + 32);
  v6 = static RepresentableContextValues.current;
  v7 = qword_1ECE02220;
  v8 = qword_1ECE02228;
  *(_QWORD *)&static RepresentableContextValues.current = v2;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v3;
  qword_1ECE02220 = v16;
  qword_1ECE02228 = v4;
  v9 = byte_1ECE02230;
  byte_1ECE02230 = v5;
  outlined copy of RepresentableContextValues?(v6, *((uint64_t *)&v6 + 1), v7, v8, v9);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v16, v4, v5);
  v10 = outlined consume of RepresentableContextValues?(v6, *((uint64_t *)&v6 + 1), v7, v8, v9);
  a1(v10);
  v11 = static RepresentableContextValues.current;
  v12 = qword_1ECE02220;
  v13 = qword_1ECE02228;
  static RepresentableContextValues.current = v6;
  qword_1ECE02220 = v7;
  qword_1ECE02228 = v8;
  v14 = byte_1ECE02230;
  byte_1ECE02230 = v9;
  return outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v12, v13, v14);
}

uint64_t closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = qword_1ECE02220;
  v18 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v19 = static RepresentableContextValues.current;
  v17 = qword_1ECE02228;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v6;
  qword_1ECE02220 = v7;
  qword_1ECE02228 = v8;
  v11 = byte_1ECE02230;
  byte_1ECE02230 = v9;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  outlined copy of RepresentableContextValues?(v19, v18, v10, v17, v11);
  outlined consume of RepresentableContextValues?(v19, v18, v10, v17, v11);
  closure #1 in closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(a2, a3, a1, a4, a5);
  v12 = static RepresentableContextValues.current;
  v13 = qword_1ECE02220;
  v14 = qword_1ECE02228;
  *(_QWORD *)&static RepresentableContextValues.current = v19;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v18;
  qword_1ECE02220 = v10;
  qword_1ECE02228 = v17;
  v15 = byte_1ECE02230;
  byte_1ECE02230 = v11;
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, v14, v15);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
}

uint64_t outlined consume of RepresentableContextValues?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (result != 1)
  {
    swift_release();
    swift_release();
    return outlined consume of RepresentableContextValues.EnvironmentStorage(a3, a4, a5 & 1);
  }
  return result;
}

uint64_t outlined copy of RepresentableContextValues?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (result != 1)
  {
    swift_retain();
    swift_retain();
    return outlined copy of RepresentableContextValues.EnvironmentStorage(a3, a4, a5 & 1);
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 48))(a2, a3, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a4);
}

uint64_t protocol witness for PlatformViewRepresentable.updateViewProvider(_:context:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PlatformViewRepresentableAdaptor.updateViewProvider(_:context:)(*a1, a2, a3);
}

uint64_t PlatformViewRepresentableAdaptor.updateViewProvider(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v22 = a2;
  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, a3);
  v6 = type metadata accessor for PlatformViewRepresentableContext(0, a3, v4, v5);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(a3 + 24);
  v14 = type metadata accessor for UIViewRepresentableContext(0, v11, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v22, v6, v17);
  UIViewRepresentableContext.init<A>(_:)((uint64_t)v10, v11, a3, v12, v4, (uint64_t)v19);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v12 + 40))(v23, v19, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t partial apply for closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_DWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33[2];

  v28 = a7;
  v29 = a3;
  v27 = a6;
  v30 = a4;
  v31 = a8;
  v26 = a2;
  v12 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v17);
  v19 = (char *)&v25 - v18;
  type metadata accessor for PlatformViewHost(0, a9, a10, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a10 + 40))(v26, a9, a10);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a9);
  v33[0] = a5;
  v33[1] = 0;
  v32 = v27;
  v21 = *(_QWORD *)(v28 + 48);
  swift_retain();
  swift_retain();
  v22 = v29;
  swift_unknownObjectRetain();
  v23 = specialized PlatformViewHost.__allocating_init(_:host:environment:viewPhase:importer:)((uint64_t)v19, v22, v30, v33, &v32, v21);
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, AssociatedTypeWitness);
  *v31 = v23;
  return result;
}

uint64_t type metadata accessor for PlatformViewHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformViewHost);
}

uint64_t destroy for SheetPresentationModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  swift_release();
  swift_release();
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v4 + 24) >= 0xFFFFFFFFuLL)
    swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((((v4 + 47) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t initializeWithCopy for OnPlatformContainerSelectionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<ControlSize>.Content(v5, v6);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_BYTE *)(a2 + 65);
  v11 = *(_BYTE *)(a2 + 64);
  outlined copy of Environment<KeyboardShortcut?>.Content(v7, v8, v9, v11, v10);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 65) = v10;
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(unsigned __int8 *)(a2 + 80);
  outlined copy of Environment<ControlSize>.Content(v12, v13);
  *(_QWORD *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 80) = v13;
  return a1;
}

uint64_t protocol witness for PlatformViewRepresentable.makeViewProvider(context:) in conformance PlatformViewRepresentableAdaptor<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = PlatformViewRepresentableAdaptor.makeViewProvider(context:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t PlatformViewControllerRepresentableAdaptor.makeCoordinator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 64))(*(_QWORD *)(a1 + 16));
}

uint64_t PlatformViewRepresentableAdaptor.makeViewProvider(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;

  v21 = a1;
  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
  v5 = type metadata accessor for PlatformViewRepresentableContext(0, a2, v3, v4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v21 - v8;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v13 = type metadata accessor for UIViewRepresentableContext(0, v10, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v21, v5, v16);
  UIViewRepresentableContext.init<A>(_:)((uint64_t)v9, v10, a2, v11, v3, (uint64_t)v18);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 32))(v18, v10, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  return v19;
}

double static PlatformViewRepresentable._makeView(view:inputs:)@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t AssociatedTypeWitness;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double result;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  unsigned int v142;
  int v143;
  int v144;
  unsigned int v145;
  int v146;
  int v147;
  double v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE v154[12];
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  __int128 v179;
  _OWORD v180[2];
  uint64_t v181;
  __int128 v182;
  _BYTE v183[24];
  __int128 v184;
  _OWORD v185[2];
  uint64_t v186;
  double v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  unint64_t v192;
  unsigned int v193;
  unint64_t v194;
  int v195;
  unsigned int v196;
  uint64_t v197;
  __int128 v198;
  __int128 v199;
  _BYTE v200[28];
  uint64_t v201;

  v201 = *MEMORY[0x1E0C80C00];
  swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v10, v11);
  *(_QWORD *)&v154[4] = (char *)&v138 - v12;
  v178 = a3;
  v176 = a4;
  v14 = type metadata accessor for PlatformViewChild(0, a3, a4, v13);
  v156 = *(_QWORD *)(v14 - 8);
  v157 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v155 = (uint64_t)&v138 - v16;
  LODWORD(v164) = *a1;
  v17 = *(_QWORD *)a2;
  v18 = *(_DWORD *)(a2 + 8);
  v19 = *(_QWORD *)(a2 + 16);
  LODWORD(v174) = *(_DWORD *)(a2 + 24);
  v175 = *(_DWORD *)(a2 + 28);
  v170 = *(_DWORD *)(a2 + 32);
  LODWORD(v171) = v18;
  v20 = *(_DWORD *)(a2 + 36);
  v22 = *(_QWORD *)(a2 + 40);
  v21 = *(_QWORD *)(a2 + 48);
  v23 = *(_DWORD *)(a2 + 60);
  v177 = *(_DWORD *)(a2 + 56);
  v25 = *(_DWORD *)(a2 + 64);
  v24 = *(_DWORD *)(a2 + 68);
  v172 = *(_DWORD *)(a2 + 72);
  LODWORD(v173) = v20;
  LODWORD(v16) = *(_DWORD *)(a2 + 76);
  v26 = *(_DWORD *)(a2 + 80);
  LODWORD(v169) = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v194 & 1) != 0)
  {
    v166 = v23;
    LODWORD(v167) = v26;
    LODWORD(v168) = v25;
    LODWORD(v165) = v24;
    v97 = v173;
    _ViewOutputs.init()();
    v194 = v21;
    v195 = v177;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v159 = a5;
      LODWORD(v163) = v194;
      v194 = v17;
      v162 = v19;
      v197 = v19;
      v195 = v171;
      v98 = v171;
      *(_QWORD *)&v198 = __PAIR64__(v175, v174);
      *((_QWORD *)&v198 + 1) = __PAIR64__(v97, v170);
      *(_QWORD *)&v199 = v22;
      *((_QWORD *)&v199 + 1) = v21;
      v99 = v177;
      v100 = v166;
      *(_DWORD *)v200 = v177;
      *(_DWORD *)&v200[4] = v166;
      *(_DWORD *)&v200[8] = (_DWORD)v168;
      *(_DWORD *)&v200[12] = v165;
      *(_DWORD *)&v200[16] = v172;
      *(_DWORD *)&v200[20] = v169;
      *(_DWORD *)&v200[24] = v167;
      LODWORD(v182) = v163;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v194) = v164;
      type metadata accessor for _GraphValue();
      LODWORD(v164) = _GraphValue.value.getter();
      v194 = v17;
      v101 = v162;
      v197 = v162;
      v195 = v98;
      *(_QWORD *)&v198 = __PAIR64__(v175, v174);
      v102 = v170;
      v158 = v22;
      *(_QWORD *)&v199 = v22;
      *((_QWORD *)&v199 + 1) = v21;
      v103 = v173;
      *((_QWORD *)&v198 + 1) = __PAIR64__(v173, v170);
      *(_DWORD *)v200 = v99;
      *(_DWORD *)&v200[4] = v100;
      v104 = v165;
      *(_DWORD *)&v200[8] = (_DWORD)v168;
      *(_DWORD *)&v200[12] = v165;
      v105 = v169;
      *(_DWORD *)&v200[16] = v172;
      *(_DWORD *)&v200[20] = v169;
      *(_DWORD *)&v200[24] = v167;
      LODWORD(v161) = _ViewInputs.animatedPosition()();
      v194 = v17;
      v197 = v101;
      v195 = v171;
      *(_QWORD *)&v198 = __PAIR64__(v175, v174);
      *((_QWORD *)&v198 + 1) = __PAIR64__(v103, v102);
      *(_QWORD *)&v199 = v22;
      *((_QWORD *)&v199 + 1) = v21;
      v106 = v177;
      v107 = v166;
      LODWORD(v101) = v167;
      *(_DWORD *)v200 = v177;
      *(_DWORD *)&v200[4] = v166;
      *(_DWORD *)&v200[8] = (_DWORD)v168;
      *(_DWORD *)&v200[12] = v104;
      v108 = v172;
      *(_DWORD *)&v200[16] = v172;
      *(_DWORD *)&v200[20] = v105;
      *(_DWORD *)&v200[24] = v167;
      v160 = _ViewInputs.animatedSize()();
      v194 = v17;
      v197 = v162;
      v195 = v171;
      *(_QWORD *)&v198 = __PAIR64__(v175, v174);
      *(_QWORD *)&v199 = v158;
      *((_QWORD *)&v199 + 1) = v21;
      *((_QWORD *)&v198 + 1) = __PAIR64__(v173, v170);
      *(_DWORD *)v200 = v106;
      *(_DWORD *)&v200[4] = v107;
      *(_DWORD *)&v200[8] = (_DWORD)v168;
      *(_DWORD *)&v200[12] = v104;
      *(_DWORD *)&v200[16] = v108;
      *(_DWORD *)&v200[20] = v105;
      *(_DWORD *)&v200[24] = v101;
      v109 = _ViewInputs.containerPosition.getter();
      a5 = v159;
      v194 = __PAIR64__(v164, v163);
      v195 = v161;
      v196 = v160;
      LODWORD(v197) = v109;
      MEMORY[0x1E0C80A78](v109, v110);
      v136 = (unint64_t *)type metadata accessor for PlatformArchivedDisplayList(0, v178, v176, v111);
      v137 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformArchivedDisplayList<A>, v136);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<DisplayList>, MEMORY[0x1E0CE1148], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v194, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_19, (uint64_t)&v134, (uint64_t)v136, MEMORY[0x1E0DEDCE8], v112, MEMORY[0x1E0DEDD18], v113);
      LOBYTE(v194) = 0;
      _ViewOutputs.subscript.setter();
    }
    *a5 = v186;
    result = v187;
    *((double *)a5 + 1) = v187;
  }
  else
  {
    v159 = a5;
    v194 = v17;
    v197 = v19;
    v195 = v171;
    *(_QWORD *)&v198 = __PAIR64__(v175, v174);
    *(_QWORD *)&v199 = v22;
    *((_QWORD *)&v199 + 1) = v21;
    *((_QWORD *)&v198 + 1) = __PAIR64__(v173, v170);
    *(_DWORD *)v200 = v177;
    *(_DWORD *)&v200[4] = v23;
    *(_DWORD *)&v200[8] = v25;
    *(_DWORD *)&v200[12] = v24;
    *(_QWORD *)&v200[16] = __PAIR64__(v169, v172);
    *(_DWORD *)&v200[24] = v26;
    type metadata accessor for PreferenceBridge();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v165 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v158 = swift_allocObject();
    (*(void (**)(uint64_t *__return_ptr))(v176 + 32))(&v186);
    v148 = v187;
    v149 = v186;
    v147 = v188;
    v150 = HIDWORD(v188);
    LODWORD(v180[0]) = v164;
    v27 = v164;
    outlined copy of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.init<A>(fields:container:inputs:)();
    v153 = v182;
    *(_DWORD *)v154 = HIDWORD(v182);
    v145 = DWORD2(v182);
    LODWORD(v186) = v27;
    type metadata accessor for _GraphValue();
    v146 = _GraphValue.value.getter();
    v28 = v194;
    v29 = v195;
    LODWORD(v169) = DWORD1(v198);
    v170 = v198;
    v30 = HIDWORD(v198);
    v171 = *((_QWORD *)&v199 + 1);
    v31 = v199;
    v166 = *(_DWORD *)v200;
    v172 = v195;
    LODWORD(v173) = *(_DWORD *)&v200[4];
    LODWORD(v174) = *(_DWORD *)&v200[12];
    LODWORD(v168) = *(_DWORD *)&v200[16];
    v160 = *(_DWORD *)&v200[24];
    v186 = v194;
    v188 = v197;
    v32 = v197;
    v167 = v197;
    LODWORD(v187) = v195;
    v189 = v198;
    v33 = DWORD2(v198);
    v175 = DWORD2(v198);
    v190 = v199;
    v161 = v199;
    v191 = *(_OWORD *)v200;
    v34 = *(_DWORD *)&v200[8];
    v177 = *(_DWORD *)&v200[8];
    v192 = *(_QWORD *)&v200[16];
    v35 = *(_DWORD *)&v200[20];
    LODWORD(v151) = *(_DWORD *)&v200[20];
    v193 = *(_DWORD *)&v200[24];
    v144 = _ViewInputs.environment.getter();
    v186 = v28;
    v188 = v32;
    LODWORD(v187) = v29;
    LODWORD(v32) = v170;
    *(_QWORD *)&v189 = __PAIR64__(v169, v170);
    v36 = v169;
    *((_QWORD *)&v189 + 1) = __PAIR64__(v30, v33);
    *(_QWORD *)&v190 = v31;
    v37 = v171;
    *((_QWORD *)&v190 + 1) = v171;
    LODWORD(v162) = v30;
    *(_QWORD *)&v191 = __PAIR64__(v173, v166);
    v38 = v173;
    *((_QWORD *)&v191 + 1) = __PAIR64__(v174, v34);
    v39 = v174;
    v192 = __PAIR64__(v35, v168);
    v193 = v160;
    v143 = _ViewInputs.transaction.getter();
    v186 = v28;
    v188 = v167;
    LODWORD(v187) = v172;
    *(_QWORD *)&v189 = __PAIR64__(v36, v32);
    LODWORD(v32) = v175;
    *((_QWORD *)&v189 + 1) = __PAIR64__(v30, v175);
    v40 = v161;
    *(_QWORD *)&v190 = v161;
    *((_QWORD *)&v190 + 1) = v37;
    v41 = v166;
    *(_QWORD *)&v191 = __PAIR64__(v38, v166);
    *((_QWORD *)&v191 + 1) = __PAIR64__(v39, v177);
    v42 = v168;
    v192 = __PAIR64__(v151, v168);
    v43 = v151;
    LODWORD(v37) = v160;
    v193 = v160;
    v142 = _ViewInputs.viewPhase.getter();
    v152 = v28;
    v186 = v28;
    v44 = v167;
    v188 = v167;
    LODWORD(v187) = v172;
    *(_QWORD *)&v189 = __PAIR64__(v169, v170);
    *((_QWORD *)&v189 + 1) = __PAIR64__(v162, v32);
    *(_QWORD *)&v190 = v40;
    *((_QWORD *)&v190 + 1) = v171;
    *(_QWORD *)&v191 = __PAIR64__(v173, v41);
    LODWORD(v40) = v173;
    *((_QWORD *)&v191 + 1) = __PAIR64__(v174, v177);
    v45 = v174;
    v192 = __PAIR64__(v43, v42);
    v193 = v37;
    v141 = _ViewInputs.position.getter();
    v186 = v28;
    v188 = v44;
    v46 = v172;
    LODWORD(v187) = v172;
    LODWORD(v44) = v170;
    *(_QWORD *)&v189 = __PAIR64__(v169, v170);
    LODWORD(v32) = v169;
    *((_QWORD *)&v189 + 1) = __PAIR64__(v162, v175);
    v47 = v171;
    *(_QWORD *)&v190 = v161;
    *((_QWORD *)&v190 + 1) = v171;
    v48 = v162;
    *(_QWORD *)&v191 = __PAIR64__(v40, v166);
    *((_QWORD *)&v191 + 1) = __PAIR64__(v45, v177);
    v49 = v168;
    v192 = __PAIR64__(v151, v168);
    LODWORD(v37) = v151;
    LODWORD(v40) = v160;
    v193 = v160;
    v140 = _ViewInputs.size.getter();
    v186 = v152;
    v188 = v167;
    LODWORD(v187) = v46;
    *(_QWORD *)&v189 = __PAIR64__(v32, v44);
    *((_QWORD *)&v189 + 1) = __PAIR64__(v48, v175);
    v50 = v161;
    *(_QWORD *)&v190 = v161;
    *((_QWORD *)&v190 + 1) = v47;
    v51 = v166;
    *(_QWORD *)&v191 = __PAIR64__(v173, v166);
    *((_QWORD *)&v191 + 1) = __PAIR64__(v174, v177);
    v192 = __PAIR64__(v37, v49);
    v193 = v40;
    v139 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    v52 = v152;
    swift_retain();
    v53 = v167;
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v138 = v186;
    v186 = v52;
    v188 = v53;
    LODWORD(v187) = v172;
    *(_QWORD *)&v189 = __PAIR64__(v169, v170);
    *((_QWORD *)&v189 + 1) = __PAIR64__(v162, v175);
    *(_QWORD *)&v190 = v50;
    *((_QWORD *)&v190 + 1) = v171;
    *(_QWORD *)&v191 = __PAIR64__(v173, v51);
    *((_QWORD *)&v191 + 1) = __PAIR64__(v174, v177);
    v192 = __PAIR64__(v37, v168);
    v193 = v40;
    _ViewInputs.scrapeableParentID.getter();
    v186 = v153;
    LODWORD(v40) = v145;
    v187 = COERCE_DOUBLE(__PAIR64__(*(unsigned int *)v154, v145));
    v54 = v176;
    v55 = v178;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v57 = *(_QWORD *)&v154[4];
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(*(_QWORD *)&v154[4], 1, 1, AssociatedTypeWitness);
    v58 = v165;
    swift_retain();
    v59 = swift_retain();
    v60 = v155;
    v61 = PlatformViewChild.init(view:environment:transaction:phase:position:size:transform:focusedValues:parentID:bridge:importer:links:coordinator:platformView:resetSeed:)(v146, v144, v143, v142, v141, v140, v139, v138, v155, (int *)&v182, v58, v59, &v186, v57, 0, 0, v55, v54);
    MEMORY[0x1E0C80A78](v61, v62);
    v64 = type metadata accessor for ViewLeafView(0, v55, v54, v63);
    v65 = v157;
    v134 = v64;
    v135 = v157;
    v136 = (unint64_t *)MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewChild<A>, v157);
    v66 = type metadata accessor for Attribute();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v60, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)&v133, v65, MEMORY[0x1E0DEDCE8], v66, MEMORY[0x1E0DEDD18], v67);
    v169 = 0;
    (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v60, v65);
    LODWORD(v50) = v186;
    *(_QWORD *)&v182 = v153;
    *((_QWORD *)&v182 + 1) = __PAIR64__(*(unsigned int *)v154, v40);
    LODWORD(v180[0]) = v164;
    v186 = v149;
    v187 = v148;
    LOBYTE(v188) = v147;
    HIDWORD(v188) = v150;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    outlined consume of DynamicPropertyCache.Fields.Layout();
    v175 = v50;
    v174 = v64;
    _GraphValue.init(_:)();
    v177 = v186;
    static AGAttributeFlags.transactional.getter();
    static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    v68 = v194;
    v69 = v197;
    v71 = v198;
    v70 = DWORD1(v198);
    v72 = DWORD2(v198);
    v73 = v199;
    v186 = v194;
    v188 = v197;
    v74 = v195;
    LODWORD(v187) = v195;
    v189 = v198;
    v190 = v199;
    v173 = *((_QWORD *)&v199 + 1);
    LODWORD(v162) = HIDWORD(v198);
    v172 = *(_DWORD *)v200;
    v191 = *(_OWORD *)v200;
    v160 = *(_DWORD *)&v200[16];
    LODWORD(v161) = *(_DWORD *)&v200[4];
    v170 = *(_DWORD *)&v200[12];
    LODWORD(v171) = *(_DWORD *)&v200[8];
    LODWORD(v157) = *(_DWORD *)&v200[20];
    v192 = *(_QWORD *)&v200[16];
    LODWORD(v156) = *(_DWORD *)&v200[24];
    v193 = *(_DWORD *)&v200[24];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    v168 = (char *)&v199 + 8;
    AGGraphSetFlags();
    LODWORD(v186) = v177;
    v164 = type metadata accessor for _GraphValue();
    LODWORD(v167) = _GraphValue.value.getter();
    v186 = v68;
    v188 = v69;
    LODWORD(v155) = v74;
    LODWORD(v187) = v74;
    *(_QWORD *)&v189 = __PAIR64__(v70, v71);
    *((_QWORD *)&v189 + 1) = __PAIR64__(v162, v72);
    *(_QWORD *)v154 = __PAIR64__(v70, v71);
    v151 = v69;
    v152 = v73;
    v75 = v73;
    LODWORD(v153) = v72;
    *(_QWORD *)&v190 = v73;
    *((_QWORD *)&v190 + 1) = v173;
    v76 = v162;
    *(_QWORD *)&v191 = __PAIR64__(v161, v172);
    v77 = v160;
    v78 = v161;
    *((_QWORD *)&v191 + 1) = __PAIR64__(v170, v171);
    v192 = __PAIR64__(v157, v160);
    v79 = v157;
    v80 = v156;
    v193 = v156;
    v166 = _ViewInputs.time.getter();
    v186 = v68;
    v188 = v151;
    LODWORD(v187) = v155;
    *(_QWORD *)&v189 = *(_QWORD *)v154;
    *((_QWORD *)&v189 + 1) = __PAIR64__(v76, v153);
    *(_QWORD *)&v190 = v75;
    v81 = v173;
    *((_QWORD *)&v190 + 1) = v173;
    v82 = v172;
    *(_QWORD *)&v191 = __PAIR64__(v78, v172);
    *((_QWORD *)&v191 + 1) = __PAIR64__(v170, v171);
    v192 = __PAIR64__(v79, v77);
    v193 = v80;
    v83 = v177;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v183[8] = v189;
    LODWORD(v180[0]) = v83;
    *(_QWORD *)&v182 = v186;
    DWORD2(v182) = LODWORD(v187);
    *(_QWORD *)v183 = v188;
    v184 = v190;
    v185[0] = v191;
    *(_QWORD *)&v185[1] = v192;
    DWORD2(v185[1]) = v193;
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v182 = v81;
    DWORD2(v182) = v82;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v182) = 0;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v84 = Attribute.init<A>(body:value:flags:update:)();
      LODWORD(v182) = v83;
      v85 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v182 = __PAIR64__(v84, v85);
      swift_weakInit();
      v86 = swift_release();
      MEMORY[0x1E0C80A78](v86, v87);
      v88 = v178;
      v89 = v176;
      v91 = type metadata accessor for RemoteSheetContainerVCWriter(0, v178, v176, v90);
      v136 = (unint64_t *)v91;
      v137 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>, v91);
      type metadata accessor for Attribute<RemoteSheetContainerVCKey.Storage?>();
      v92 = v169;
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v182, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_32, (uint64_t)&v134, v91, MEMORY[0x1E0DEDCE8], v93, MEMORY[0x1E0DEDD18], v94);
      v169 = v92;
      (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v91 - 8) + 8))(&v182, v91);
      *(_QWORD *)&v182 = *((_QWORD *)&v199 + 1);
      DWORD2(v182) = *(_DWORD *)v200;
      MEMORY[0x1E0C80A78](*((_QWORD *)&v199 + 1), v95);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v182 = *((_QWORD *)&v199 + 1);
      DWORD2(v182) = *(_DWORD *)v200;
      MEMORY[0x1E0C80A78](*((_QWORD *)&v199 + 1), v96);
      LODWORD(v136) = v84;
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v89 = v176;
      v88 = v178;
    }
    v115 = *((_QWORD *)&v199 + 1);
    v116 = *(_DWORD *)v200;
    *(_QWORD *)&v182 = *((_QWORD *)&v199 + 1);
    DWORD2(v182) = *(_DWORD *)v200;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      *(_QWORD *)&v182 = v194;
      DWORD2(v182) = v195;
      *(_QWORD *)v183 = v197;
      *(_OWORD *)&v183[8] = v198;
      *(_QWORD *)&v184 = v199;
      *((_QWORD *)&v184 + 1) = v115;
      LODWORD(v185[0]) = v116;
      *(_OWORD *)((char *)v185 + 4) = *(_OWORD *)&v200[4];
      *(_QWORD *)((char *)&v185[1] + 4) = *(_QWORD *)&v200[20];
      LODWORD(v180[0]) = v177;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v118 = _GraphValue.value.getter();
      v119 = ViewResponderFilter.init(inputs:view:)(v118, (uint64_t)v180);
      v182 = v180[0];
      *(_OWORD *)v183 = v180[1];
      *(_QWORD *)&v183[16] = v181;
      MEMORY[0x1E0C80A78](v119, v120);
      v122 = type metadata accessor for ViewResponderFilter(0, v88, v89, v121);
      v136 = (unint64_t *)v122;
      v137 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewResponderFilter<A>, v122);
      outlined retain of ViewResponderFilter<A>((uint64_t)v180);
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v182, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_15, (uint64_t)&v134, v122, MEMORY[0x1E0DEDCE8], v123, MEMORY[0x1E0DEDD18], v124);
      swift_release();
      LOBYTE(v182) = 0;
      _ViewOutputs.subscript.setter();
      outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v180);
    }
    *(_QWORD *)&v182 = *((_QWORD *)&v199 + 1);
    DWORD2(v182) = *(_DWORD *)v200;
    MEMORY[0x1E0C80A78](*((_QWORD *)&v199 + 1), v117);
    v134 = v88;
    v135 = v89;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v182 = *((_QWORD *)&v199 + 1);
    DWORD2(v182) = *(_DWORD *)v200;
    MEMORY[0x1E0C80A78](*((_QWORD *)&v199 + 1), v125);
    v136 = &v194;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v182 = v194;
    DWORD2(v182) = v195;
    *(_QWORD *)v183 = v197;
    *(_OWORD *)&v183[8] = v198;
    v184 = v199;
    v185[0] = *(_OWORD *)v200;
    *(_QWORD *)&v185[1] = *(_QWORD *)&v200[16];
    DWORD2(v185[1]) = *(_DWORD *)&v200[24];
    static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v182, v175, (uint64_t)&v179, v88, v89);
    PreferenceKeys.remove<A>(_:)();
    (*(void (**)(unint64_t *, uint64_t, uint64_t))(v89 + 120))(&v194, v88, v89);
    v182 = v179;
    v126 = _ViewOutputs.subscript.getter();
    v127 = *((_QWORD *)&v199 + 1);
    v128 = *(_DWORD *)v200;
    *(_QWORD *)&v182 = *((_QWORD *)&v199 + 1);
    DWORD2(v182) = *(_DWORD *)v200;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v182) = 1;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)&v182 = v194;
    v129 = v194;
    DWORD2(v182) = v195;
    *(_QWORD *)v183 = v197;
    *(_OWORD *)&v183[8] = v198;
    *(_QWORD *)&v184 = v199;
    *((_QWORD *)&v184 + 1) = v127;
    LODWORD(v185[0]) = v128;
    *(_OWORD *)((char *)v185 + 4) = *(_OWORD *)&v200[4];
    *(_QWORD *)((char *)&v185[1] + 4) = *(_QWORD *)&v200[20];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)&v182 = v127;
    DWORD2(v182) = v128;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v126 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v182 = v179;
      v130 = _ViewOutputs.subscript.getter();
      v131 = *MEMORY[0x1E0CFED28];
      if ((v130 & 0x100000000) == 0)
        v131 = v130;
      *(_QWORD *)&v182 = __PAIR64__(v131, v126);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v182) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v165 = v129;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v132 = v159;
    *v159 = v179;
    result = *((double *)&v179 + 1);
    v132[1] = *((_QWORD *)&v179 + 1);
  }
  return result;
}

void type metadata accessor for Attribute<AccessibilityPlatformViewModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for AccessibilityPlatformViewModifier);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t type metadata accessor for AccessibilityBridgedPlatformView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityBridgedPlatformView);
}

uint64_t type metadata accessor for PlatformViewIdentifiedViews(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformViewIdentifiedViews);
}

uint64_t type metadata accessor for EmptyPreferenceImporter()
{
  return objc_opt_self();
}

uint64_t outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t outlined retain of ViewResponderFilter<A>(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for ViewResponderFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewResponderFilter);
}

uint64_t ViewResponderFilter.init(inputs:view:)@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v16;

  type metadata accessor for UIViewResponder();
  v2 = swift_allocObject();
  v13 = specialized UIViewResponder.init()(v2);
  swift_release();
  v12 = _ViewInputs.animatedPosition()();
  v11 = _ViewInputs.animatedSize()();
  v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  v9 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  v8 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for RepresentablePreferredFocusableViewInput(0, AssociatedTypeWitness, v4, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for RepresentablePreferredFocusableViewInput<A>, v6);
  _ViewInputs.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_DWORD *)a2 = a1;
  *(_DWORD *)(a2 + 4) = v12;
  *(_DWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 12) = v10;
  *(_DWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v13;
  *(_DWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 36) = v16;
  return result;
}

uint64_t type metadata accessor for UIViewResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UIViewResponder;
  if (!type metadata singleton initialization cache for UIViewResponder)
    return swift_getSingletonMetadata();
  return result;
}

double static ViewLeafView._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  double result;
  _BYTE v55[16];
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  double *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  double v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;

  v73 = a4;
  v72 = a3;
  v69 = a5;
  v71 = 0;
  v105 = *MEMORY[0x1E0C80C00];
  v68 = *a1;
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 24);
  v81 = *(_DWORD *)(a2 + 28);
  v83 = *(_DWORD *)(a2 + 32);
  v85 = *(_DWORD *)(a2 + 36);
  v9 = *(_QWORD *)(a2 + 48);
  v84 = *(_QWORD *)(a2 + 40);
  v10 = *(_DWORD *)(a2 + 56);
  v11 = *(_DWORD *)(a2 + 60);
  v13 = *(_DWORD *)(a2 + 64);
  v12 = *(_DWORD *)(a2 + 68);
  v79 = *(_DWORD *)(a2 + 72);
  v82 = *(_DWORD *)(a2 + 76);
  v78 = *(_DWORD *)(a2 + 80);
  _ViewOutputs.init()();
  v14 = v9;
  v89 = v9;
  v15 = v10;
  LODWORD(v90) = v10;
  v80 = v5;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    _DisplayList_Identity.init()();
    v64 = v89;
    v76 = v6;
    v75 = v7;
    v77 = v14;
    v74 = v10;
    v67 = v11;
    v66 = v13;
    v86 = v89;
    _ViewInputs.pushIdentity(_:)();
    type metadata accessor for ViewLeafView(255, v72, v73, v16);
    type metadata accessor for _GraphValue();
    v63 = _GraphValue.value.getter();
    v70 = v8;
    v65 = v12;
    v62 = _ViewInputs.animatedPosition()();
    v61 = _ViewInputs.containerPosition.getter();
    v60 = _ViewInputs.animatedSize()();
    v17 = v82;
    v59 = _ViewInputs.transform.getter();
    v18 = v11;
    v19 = v13;
    v20 = v78;
    v58 = _ViewInputs.environment.getter();
    HIWORD(v94) = HIWORD(v83);
    v95 = v85;
    v96 = v84;
    v97 = v14;
    v98 = v10;
    v99 = v18;
    v21 = v18;
    v100 = v19;
    v101 = v12;
    v22 = v19;
    v23 = v12;
    v24 = v79;
    v102 = v79;
    v103 = v82;
    v104 = v78;
    v25 = _ViewInputs.safeAreaInsets.getter();
    HIDWORD(v89) = v63;
    v90 = __PAIR64__(v61, v62);
    v91 = __PAIR64__(v59, v60);
    v92 = v58;
    v93 = v25;
    LOWORD(v94) = 0;
    MEMORY[0x1E0C80A78](v25, v26);
    v56 = type metadata accessor for PlatformViewDisplayList(0, v72, v73, v27);
    v57 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewDisplayList<A>, v56);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<DisplayList>, MEMORY[0x1E0CE1148], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    v28 = v71;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v89, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v55, v56, MEMORY[0x1E0DEDCE8], v29, MEMORY[0x1E0DEDD18], v30);
    v71 = v28;
    LOBYTE(v89) = 0;
    _ViewOutputs.subscript.setter();
    v6 = v76;
    v7 = v75;
    v31 = v70;
    v32 = v81;
    v33 = v83;
    v34 = v84;
    v35 = v21;
    v36 = v22;
    v12 = v23;
    v37 = v24;
    v38 = v17;
    v14 = v77;
    v39 = v85;
    v15 = v74;
    if ((v85 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v31 = v8;
  v32 = v81;
  v38 = v82;
  v33 = v83;
  v34 = v84;
  v35 = v11;
  v36 = v13;
  v37 = v79;
  v20 = v78;
  v39 = v85;
  if ((v85 & 2) != 0)
  {
LABEL_5:
    v89 = v80;
    LODWORD(v90) = v6;
    v91 = v7;
    v92 = v31;
    v93 = v32;
    v94 = v33;
    v95 = v39;
    v96 = v34;
    v97 = v14;
    v98 = v15;
    v99 = v35;
    v100 = v36;
    v101 = v12;
    v102 = v37;
    v103 = v38;
    v104 = v20;
    v40 = _ViewInputs.environment.getter();
    type metadata accessor for PropertyList.Tracker();
    v41 = PropertyList.Tracker.__allocating_init()();
    LODWORD(v89) = v40;
    v90 = v41;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type LeafLayoutEnvironment and conformance LeafLayoutEnvironment();
    v42 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LODWORD(v89) = v68;
    v43 = v72;
    v44 = v73;
    type metadata accessor for ViewLeafView(255, v72, v73, v45);
    type metadata accessor for _GraphValue();
    v46 = _GraphValue.value.getter();
    type metadata accessor for GraphHost();
    MEMORY[0x18D75C118]();
    v89 = __PAIR64__(v42, v46);
    swift_weakInit();
    v47 = swift_release();
    MEMORY[0x1E0C80A78](v47, v48);
    v50 = type metadata accessor for InvalidatableLeafLayoutComputer(0, v43, v44, v49);
    v56 = v50;
    v57 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InvalidatableLeafLayoutComputer<A>, v50);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<LayoutComputer>, MEMORY[0x1E0CE27C0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v89, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)v55, v50, MEMORY[0x1E0DEDCE8], v51, MEMORY[0x1E0DEDD18], v52);
    (*(void (**)(unint64_t *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(&v89, v50);
    LOBYTE(v89) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
LABEL_6:
  v53 = v69;
  *(_QWORD *)v69 = v87;
  result = v88;
  v53[1] = v88;
  return result;
}

uint64_t type metadata accessor for InvalidatableLeafLayoutComputer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InvalidatableLeafLayoutComputer);
}

uint64_t type metadata accessor for PlatformViewDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformViewDisplayList);
}

unint64_t lazy protocol witness table accessor for type LeafLayoutEnvironment and conformance LeafLayoutEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LeafLayoutEnvironment and conformance LeafLayoutEnvironment;
  if (!lazy protocol witness table cache variable for type LeafLayoutEnvironment and conformance LeafLayoutEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LeafLayoutEnvironment, &unk_1E1AD7AA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutEnvironment and conformance LeafLayoutEnvironment);
  }
  return result;
}

uint64_t protocol witness for static PlatformViewRepresentable.dynamicProperties.getter in conformance PlatformViewRepresentableAdaptor<A>(uint64_t a1)
{
  return static PlatformViewRepresentableAdaptor.dynamicProperties.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for static PlatformViewRepresentable.modifyBridgedViewInputs(_:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t a1, uint64_t a2)
{
  return static PlatformViewRepresentableAdaptor.modifyBridgedViewInputs(_:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t static PlatformViewRepresentableAdaptor.modifyBridgedViewInputs(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t ViewResponderFilter.updateValue()(uint64_t a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  id v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  __int128 *Value;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)();
  uint64_t v34;
  void *v35;
  uint64_t (*v36)();
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  id v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[40];
  uint64_t v69;

  v2 = v1;
  v69 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v46 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v44 = (uint64_t)&v43 - v8;
  v10 = type metadata accessor for ViewLeafView(0, v5, v4, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v43 - v13;
  v15 = *((_QWORD *)v2 + 3);
  LODWORD(v13) = *((_DWORD *)v2 + 4);
  v64 = *v2;
  v65 = v13;
  v66 = v15;
  v67 = *((_QWORD *)v2 + 4);
  v49 = a1;
  ViewResponderFilter.view.getter(a1, v16, (uint64_t)v14);
  v17 = *(void **)&v14[*(int *)(v10 + 36)];
  v50 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18 = v50;
  v19 = v17;
  v18(v14, v10);
  swift_unknownObjectWeakAssign();

  v20 = *((_QWORD *)v2 + 3);
  v21 = *((_DWORD *)v2 + 4);
  v60 = *v2;
  v61 = v21;
  v62 = v20;
  v63 = *((_QWORD *)v2 + 4);
  ViewResponderFilter.view.getter(a1, v22, (uint64_t)v14);
  v23 = *(id *)&v14[*(int *)(v10 + 36)];
  v18(v14, v10);
  v24 = (void *)PlatformViewHost.representedView.getter();

  swift_unknownObjectWeakAssign();
  v25 = *((_QWORD *)v2 + 3);
  LODWORD(v24) = *((_DWORD *)v2 + 1);
  v26 = *((_DWORD *)v2 + 2);
  v54 = *(_DWORD *)v2;
  v55 = (int)v24;
  v56 = v26;
  *(_QWORD *)&v27 = *(_QWORD *)((char *)v2 + 12);
  v47 = v27;
  v57 = v27;
  v58 = v25;
  v59 = *((_QWORD *)v2 + 4);
  Value = (__int128 *)AGGraphGetValue();
  v48 = v29 & 1;
  v30 = Value[1];
  v52 = *Value;
  v53 = v30;
  v51 = *(_OWORD *)AGGraphGetValue();
  v31 = AGGraphGetValue();
  *(_QWORD *)v68 = *(_QWORD *)v31;
  *(_OWORD *)&v68[8] = *(_OWORD *)(v31 + 8);
  *(_OWORD *)&v68[24] = *(_OWORD *)(v31 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  v32 = v49;
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v25 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = ViewResponderFilter.preferredFocusableView.getter(v32);
  v35 = 0;
  if ((unint64_t)v33 >= 2)
  {
    v36 = v33;
    ViewResponderFilter.view.getter(v32, v34, (uint64_t)v14);
    v37 = v44;
    ViewLeafView.representedViewProvider.getter(v10, v44);
    v50(v14, v10);
    v35 = (void *)((uint64_t (*)(uint64_t))v36)(v37);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v36);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v37, v46);
  }
  swift_unknownObjectWeakAssign();

  v38 = v2[1];
  *(_OWORD *)v68 = *v2;
  *(_OWORD *)&v68[16] = v38;
  *(_QWORD *)&v68[32] = *((_QWORD *)v2 + 4);
  ViewResponderFilter.view.getter(v32, v39, (uint64_t)v14);
  v40 = *(id *)&v14[*(int *)(v10 + 36)];
  v50(v14, v10);
  swift_weakAssign();

  type metadata accessor for [ViewResponder]();
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v42 + 32) = *((_QWORD *)v2 + 3);
    *(_QWORD *)&v52 = v42;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ViewResponderFilter.view.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for ViewLeafView(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

uint64_t outlined copy of SharingPickerSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2 < 0)
  {
    swift_retain();
    swift_retain();
    outlined copy of AnyShareConfiguration.Storage(a5, a6, a7, a8, a9);
    outlined copy of Text?(a10, a11, a12, a13);
    return outlined copy of Text?(a14, a15, a16, a17);
  }
  else
  {
    swift_retain();
    swift_retain();
    return outlined consume of AnyIdentifiableShareConfiguration?(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
  }
}

void ContextMenuModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuModifier<A>);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for ContextMenuModifierCore(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v3);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
  type metadata accessor for StaticIf();
}

void sub_186EC3CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  _BYTE *v33;
  int v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE v54[64];

  *(_QWORD *)(v8 - 296) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v8 - 320) = &v54[-v10];
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  *(_QWORD *)(v8 - 280) = a1;
  v11 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v8 - 256) = v11;
  *(_QWORD *)(v8 - 264) = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  *(_QWORD *)(v8 - 288) = &v54[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14, v15);
  *(_QWORD *)(v8 - 272) = &v54[-v16];
  *(_QWORD *)(v8 - 368) = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = &v54[-v19];
  *(_QWORD *)(v8 - 248) = v2;
  *(_QWORD *)(v8 - 304) = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  *(_QWORD *)(v8 - 328) = &v54[-v23];
  v24 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = &v54[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v8 - 224) = v6;
  *(_QWORD *)(v8 - 352) = *(_QWORD *)(v6 - 8);
  v31 = MEMORY[0x1E0C80A78](v29, v30);
  v33 = &v54[-v32];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v24 + 16))(v28, (uint64_t)v5 + *(int *)(v3 + 44), v4, v31);
  v34 = *v5;
  if (*v5)
  {
    v35 = *((_QWORD *)v5 + 3);
    v36 = *((_BYTE *)v5 + 32);
    outlined copy of Environment<Bool>.Content(v35, v36);
    specialized Environment.wrappedValue.getter(v35, v36, (_BYTE *)(v8 - 120));
    outlined consume of Environment<Bool>.Content(v35, v36);
    LOBYTE(v35) = *(_BYTE *)(v8 - 120);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 32))(v33, v28, v4);
    v38 = type metadata accessor for ContextMenuModifierCore(0, v4, *(_QWORD *)(v8 - 232), v37);
    *(_DWORD *)&v33[*(int *)(v38 + 36)] = v34;
    v33[*(int *)(v38 + 40)] = v35;
    v39 = *(_QWORD *)(v8 - 360);
    v40 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v39);
    MEMORY[0x18D75B4AC](v33, v39, *(_QWORD *)(v8 - 224), v40);
    swift_getKeyPath();
    v41 = *((_QWORD *)v5 + 1);
    LOBYTE(v39) = *((_BYTE *)v5 + 16);
    outlined copy of Environment<Bool>.Content(v41, v39);
    v42 = specialized Environment.wrappedValue.getter(v41, v39);
    outlined consume of Environment<Bool>.Content(v41, v39);
    if (*v5)
    {
      *(_BYTE *)(v8 - 120) = *v5 == v42;
      *(_QWORD *)(v8 - 136) = v40;
      *(_QWORD *)(v8 - 128) = &protocol witness table for ContextMenuModifierCore<A>;
      v43 = MEMORY[0x1E0CE2E70];
      v44 = MEMORY[0x18D75FFDC]();
      View.environment<A>(_:_:)();
      swift_release();
      v45 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v8 - 368) + 8))(v20, v7);
      MEMORY[0x1E0C80A78](v45, v46);
      MEMORY[0x1E0C80A78](v47, v48);
      v49 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
      *(_QWORD *)(v8 - 152) = v44;
      *(_QWORD *)(v8 - 144) = v49;
      v50 = MEMORY[0x18D75FFDC](v43, *(_QWORD *)(v8 - 248), v8 - 152);
      v51 = MEMORY[0x1E0CE5138];
      *(_QWORD *)(v8 - 168) = v50;
      *(_QWORD *)(v8 - 160) = v51;
      v52 = MEMORY[0x18D75FFDC](v43, *(_QWORD *)(v8 - 344), v8 - 168);
      v53 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>();
      *(_QWORD *)(v8 - 184) = v52;
      *(_QWORD *)(v8 - 176) = v53;
      MEMORY[0x18D75FFDC](v43, *(_QWORD *)(v8 - 312), v8 - 184);
      StaticIf<>.init(_:then:else:)((uint64_t)&type metadata for ProvidesContextMenuInteraction, (void (*)(void))partial apply for closure #1 in ContextMenuModifier.body(content:));
    }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t destroy for ContextMenuModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)((a1 + 11) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((a1 + 11) & 0xFFFFFFFFFFFFFFF8) + 8));
  v4 = (a1 + 27) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)v4, *(_BYTE *)(v4 + 8));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_DWORD *initializeWithCopy for ContextMenuModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = (unint64_t)a2 + 27;
  *a1 = *a2;
  v6 = (unint64_t)a1 + 27;
  v7 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v10 = *(_BYTE *)(v8 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v8, v10);
  *(_QWORD *)v7 = v9;
  *(_BYTE *)(v7 + 8) = v10;
  v11 = v6 & 0xFFFFFFFFFFFFFFF8;
  v12 = v5 & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  LOBYTE(v9) = *(_BYTE *)(v12 + 8);
  outlined copy of Environment<Bool>.Content(v13, v9);
  *(_QWORD *)v11 = v13;
  *(_BYTE *)(v11 + 8) = v9;
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 16))((*(unsigned __int8 *)(v14 + 80) + 9 + v11) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (*(unsigned __int8 *)(v14 + 80) + 9 + v12) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

uint64_t type metadata accessor for ContextMenuModifierCore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContextMenuModifierCore);
}

uint64_t specialized Environment.wrappedValue.getter(unint64_t a1, char a2)
{
  uint64_t v2;
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1;
  if ((a2 & 1) != 0)
  {
    v8 = HIDWORD(a1) & 1;
  }
  else
  {
    swift_retain();
    v3 = static os_log_type_t.fault.getter();
    v4 = static Log.runtimeIssuesLog.getter();
    v5 = v3;
    if (os_log_type_enabled(v4, v3))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v13 = v7;
      *(_DWORD *)v6 = 136315138;
      v12 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x8000000187BDF2D0, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v7, -1, -1);
      MEMORY[0x18D760108](v6, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(v2, 0);
    swift_release();
    swift_release();
    LODWORD(v2) = v12;
    LODWORD(v8) = BYTE4(v12);
  }
  v9 = (_DWORD)v8 == 0;
  v10 = 0x100000000;
  if (v9)
    v10 = 0;
  return v10 | v2;
}

{
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;

  if ((a2 & 1) != 0)
  {
    v8 = a1 & 1;
    v9 = (a1 >> 8) & 1;
    v10 = (a1 >> 16) & 1;
  }
  else
  {
    swift_retain();
    v3 = static os_log_type_t.fault.getter();
    v4 = static Log.runtimeIssuesLog.getter();
    v5 = v3;
    if (os_log_type_enabled(v4, v3))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v15 = v7;
      *(_DWORD *)v6 = 136315138;
      v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6C6C65437473694CLL, 0xED00006574617453, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v7, -1, -1);
      MEMORY[0x18D760108](v6, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(a1, 0);
    swift_release();
    swift_release();
    v8 = v14;
    LODWORD(v9) = BYTE1(v14);
    LODWORD(v10) = BYTE2(v14);
  }
  if ((_DWORD)v10)
    v11 = 0x10000;
  else
    v11 = 0;
  if ((_DWORD)v9)
    v12 = 256;
  else
    v12 = 0;
  return v12 | v8 | v11;
}

uint64_t type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>)
  {
    type metadata accessor for InvertedViewInputPredicate<IsSharingPickerHost>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type InvertedViewInputPredicate<IsSharingPickerHost> and conformance InvertedViewInputPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for InvertedViewInputPredicate<IsSharingPickerHost>, MEMORY[0x1E0CE6010]);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t Section<>.collapsible(_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v11[3];
  char v12;

  swift_getKeyPath();
  v12 = a1;
  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, a2, v11);
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, char a2@<W1>, void (*a3)(uint64_t, _QWORD)@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void (*a6)(uint64_t, _QWORD)@<X5>, _BYTE *a7@<X8>)
{
  uint64_t v7;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;

  v7 = result;
  if ((a2 & 1) != 0)
  {
    *a7 = result;
  }
  else
  {
    a3(result, 0);
    v11 = static os_log_type_t.fault.getter();
    v12 = static Log.runtimeIssuesLog.getter();
    v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v16 = v15;
      *(_DWORD *)v14 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v15, -1, -1);
      MEMORY[0x18D760108](v14, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    a6(v7, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

{
  uint64_t v7;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;

  v7 = result;
  if ((a2 & 1) != 0)
  {
    *a7 = result & 1;
  }
  else
  {
    a3(result, 0);
    v11 = static os_log_type_t.fault.getter();
    v12 = static Log.runtimeIssuesLog.getter();
    v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v16 = v15;
      *(_DWORD *)v14 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v15, -1, -1);
      MEMORY[0x18D760108](v14, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    a6(v7, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t IsSharingPicker;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    IsSharingPicker = type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type SharingPickerHostModifier and conformance SharingPickerHostModifier();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, IsSharingPicker, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier>)
    type metadata accessor for StaticIf();
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier>();
    v2[0] = &protocol witness table for LiftPreviewLabelMarkingEffect;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t View.sharingPickerHost()(uint64_t a1, uint64_t a2)
{
  uint64_t IsSharingPicker;
  _OWORD v6[8];
  uint64_t v7;
  _OWORD v8[8];
  _OWORD v9[8];
  uint64_t v10;

  _s7SwiftUI25SharingPickerHostModifier33_16FA549D504C127F429806EC47FAADE4LLV5ModelVSgWOi0_(v8);
  outlined init with take of Image.Resolved?((uint64_t)v8, (uint64_t)v9, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  v10 = 0;
  v6[6] = v9[6];
  v6[7] = v9[7];
  v7 = 0;
  v6[2] = v9[2];
  v6[3] = v9[3];
  v6[4] = v9[4];
  v6[5] = v9[5];
  v6[0] = v9[0];
  v6[1] = v9[1];
  IsSharingPicker = type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  return MEMORY[0x18D75B4AC](v6, a1, IsSharingPicker, a2);
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v5, LiftPreviewMarkingEffect, EmptyModifier>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    type metadata accessor for StaticIf();
  return result;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<ControlSize>.Content, 0x6564724F756E654DLL, 0xE900000000000072, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<ControlSize>.Content, 0xD000000000000015, 0x8000000187BDF650, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<Bool>.Content, 0x5463696D616E7944, 0xEF657A6953657079, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Bool>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<ControlSize>.Content, 0x536C6F72746E6F43, 0xEB00000000657A69, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<Bool>.Content, 0x686353726F6C6F43, 0xEB00000000656D65, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Bool>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<ControlSize>.Content, 0xD000000000000014, 0x8000000187BDF6E0, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<Bool>.Content, 0xD000000000000019, 0x8000000187BDF090, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Bool>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<ControlSize>.Content, 0x6E656E696D6F7250, 0xEA00000000006563, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<ControlSize>.Content, 0xD000000000000018, 0x8000000187BDF120, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<Bool>.Content, 0xD000000000000019, 0x8000000187BDF0D0, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Bool>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<ControlSize>.Content, 0x6F72506567646142, 0xEF65636E656E696DLL, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<ControlSize>.Content, 0x694474756F79614CLL, 0xEF6E6F6974636572, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<ControlSize>.Content, 0x6C7974536E6F6349, 0xE900000000000065, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<ControlSize>.Content, 0xD00000000000001ALL, 0x8000000187BDF310, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<ControlSize>.Content, 0xD000000000000013, 0x8000000187BDF3B0, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<ControlSize>.Content, 0xD000000000000011, 0x8000000187BDF390, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, _QWORD))outlined copy of Environment<ControlSize>.Content, 0xD000000000000019, 0x8000000187BDF3D0, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content, a3);
}

uint64_t destroy for OnPlatformContainerSelectionModifier(uint64_t a1)
{
  if (*(_QWORD *)a1)
    swift_release();
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  outlined consume of Environment<KeyboardShortcut?>.Content(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(_BYTE *)(a1 + 65));
  return outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 80));
}

uint64_t GeometryActionBinder.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t result;
  int v50;
  uint64_t Value;
  uint64_t v52;
  uint64_t v53;
  double v54;
  unsigned int (*v55)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *);
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unsigned int (*v67)(char *, uint64_t, uint64_t);
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  unsigned int (*v70)(_QWORD, _QWORD, _QWORD);
  char *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  char *v76;
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  char *v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int (*v89)(char *, uint64_t, uint64_t);
  void (*v90)(unint64_t, char *, unsigned int (*)(_QWORD, _QWORD, _QWORD));
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  char *v93;
  char *v94;
  unsigned int (*v95)(char *, uint64_t, uint64_t);
  void (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  void (*v110)(char *, char *, uint64_t);
  unsigned int (*v111)(_QWORD, _QWORD, _QWORD);
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t TupleTypeMetadata2;
  unsigned int (*v118)(char *, uint64_t, uint64_t);
  char *v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;

  v3 = *(_QWORD *)(a1 + 16);
  v118 = *(unsigned int (**)(char *, uint64_t, uint64_t))(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v101 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v6);
  v112 = (char *)&v95 - v7;
  v116 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v106 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v100 = (void (*)(char *))((char *)&v95 - v13);
  MEMORY[0x1E0C80A78](v14, v15);
  v114 = (char *)&v95 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v115 = (char *)&v95 - v19;
  v20 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v95 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v95 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v105 = (char *)&v95 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v107 = (char *)&v95 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v109 = (char *)&v95 - v37;
  v99 = v38;
  MEMORY[0x1E0C80A78](v39, v40);
  v119 = (char *)&v95 - v41;
  v120 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v42, v43);
  v98 = (char *)&v95 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = v44;
  MEMORY[0x1E0C80A78](v45, v46);
  v48 = (char *)&v95 - v47;
  if (*(_DWORD *)(v1 + *(int *)(a1 + 68)) != *(_DWORD *)AGGraphGetValue() >> 1)
    specialized GeometryActionBinder.reset(seed:)((int *)a1);
  ++*(_DWORD *)(v1 + *(int *)(a1 + 72));
  result = AGGraphGetCurrentAttribute();
  v50 = *MEMORY[0x1E0CFED28];
  if ((_DWORD)result != *MEMORY[0x1E0CFED28])
  {
    v104 = v28;
    v122 = *(_DWORD *)(v1 + 20) == v50;
    GeometryProxy.init(owner:size:environment:transform:position:safeAreaInsets:seed:)();
    Value = AGGraphGetValue();
    v96 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 16);
    v96(v48, Value, v3);
    v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 16))(v24, v1, a1);
    v54 = MEMORY[0x1E0C80A78](v52, v53);
    v111 = v55;
    v56 = v118;
    *(&v95 - 4) = (unsigned int (*)(char *, uint64_t, uint64_t))v55;
    *(&v95 - 3) = v56;
    v113 = v48;
    *(&v95 - 2) = (unsigned int (*)(char *, uint64_t, uint64_t))v48;
    *(&v95 - 1) = (unsigned int (*)(char *, uint64_t, uint64_t))&v122;
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for GeometryActionBinder<A>, a1, v54);
    v57 = v119;
    StatefulRule.withObservation<A>(do:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v24, a1);
    v58 = v121;
    v59 = v115;
    v110 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
    v110(v115, v57, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, AssociatedTypeWitness);
    v103 = a1;
    v60 = *(int *)(a1 + 76);
    v108 = v1;
    v61 = v116;
    v62 = *(void (**)(char *))(v116 + 16);
    v63 = v114;
    v102 = v1 + v60;
    v62(v114);
    v64 = v112;
    v65 = &v112[*(int *)(TupleTypeMetadata2 + 48)];
    ((void (*)(char *, char *, uint64_t))v62)(v112, v59, v5);
    ((void (*)(char *, char *, uint64_t))v62)(v65, v63, v5);
    v66 = AssociatedTypeWitness;
    v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
    if (v67(v64, 1, v66) == 1)
    {
      v100 = v62;
      v68 = *(void (**)(char *, uint64_t))(v61 + 8);
      v68(v63, v5);
      v68(v59, v5);
      v69 = v66;
      if (v67(v65, 1, v66) == 1)
      {
        v68(v64, v5);
        v70 = v111;
        (*(void (**)(char *, uint64_t))(v121 + 8))(v119, v66);
        return (*(uint64_t (**)(char *, unsigned int (*)(_QWORD, _QWORD, _QWORD)))(v120 + 8))(v113, v70);
      }
      v75 = v67;
      v70 = v111;
      v73 = (uint64_t)v119;
      v74 = v69;
      v62 = v100;
    }
    else
    {
      v71 = (char *)v100;
      ((void (*)(void (*)(char *), char *, uint64_t))v62)(v100, v64, v5);
      v72 = v67(v65, 1, v66);
      v95 = v67;
      if (v72 != 1)
      {
        v92 = v121;
        v93 = v71;
        v94 = v109;
        (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v109, v65, v66);
        v70 = v111;
        swift_getAssociatedConformanceWitness();
        LODWORD(TupleTypeMetadata2) = dispatch thunk of static Equatable.== infix(_:_:)();
        v91 = *(void (**)(char *, uint64_t))(v92 + 8);
        v91(v94, v66);
        v68 = *(void (**)(char *, uint64_t))(v116 + 8);
        v68(v114, v5);
        v68(v115, v5);
        v91(v93, v66);
        v68(v64, v5);
        v73 = (uint64_t)v119;
        v74 = v66;
        v75 = v95;
        if ((TupleTypeMetadata2 & 1) != 0)
        {
LABEL_17:
          v91((char *)v73, v74);
          return (*(uint64_t (**)(char *, unsigned int (*)(_QWORD, _QWORD, _QWORD)))(v120 + 8))(v113, v70);
        }
LABEL_11:
        v76 = v106;
        ((void (*)(char *, uint64_t, uint64_t))v62)(v106, v102, v5);
        v77 = v105;
        v110(v105, (char *)v73, v74);
        if (v75(v76, 1, v74) == 1)
        {
          v78 = *(void (**)(char *, char *, uint64_t))(v121 + 32);
          v79 = v107;
          v78(v107, v77, v74);
          v68(v76, v5);
        }
        else
        {
          v80 = v121;
          (*(void (**)(char *, uint64_t))(v121 + 8))(v77, v74);
          v78 = *(void (**)(char *, char *, uint64_t))(v80 + 32);
          v79 = v107;
          v78(v107, v76, v74);
        }
        if ((GeometryActionBinder.dispatch(value:)(v73, v103) & 1) != 0)
        {
          v81 = v98;
          v96(v98, (uint64_t)v113, (uint64_t)v70);
          v82 = (void (*)(char *, uint64_t, uint64_t))v110;
          v110(v109, v79, v74);
          v82(v104, v73, v74);
          v83 = v120;
          v84 = (*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80);
          v85 = *(unsigned __int8 *)(v121 + 80);
          v86 = (v97 + v85 + v84) & ~v85;
          v87 = (v99 + v85 + v86) & ~v85;
          v88 = swift_allocObject();
          v89 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v118;
          *(_QWORD *)(v88 + 16) = v70;
          *(_QWORD *)(v88 + 24) = v89;
          v90 = *(void (**)(unint64_t, char *, unsigned int (*)(_QWORD, _QWORD, _QWORD)))(v83 + 32);
          v73 = (uint64_t)v119;
          v90(v88 + v84, v81, v70);
          v78((char *)(v88 + v86), v109, v74);
          v78((char *)(v88 + v87), v104, v74);
          static Update.enqueueAction(_:)();
          swift_release();
        }
        v91 = *(void (**)(char *, uint64_t))(v121 + 8);
        v91(v79, v74);
        goto LABEL_17;
      }
      v68 = *(void (**)(char *, uint64_t))(v116 + 8);
      v68(v114, v5);
      v68(v115, v5);
      (*(void (**)(char *, uint64_t))(v121 + 8))(v71, v66);
      v70 = v111;
      v73 = (uint64_t)v119;
      v74 = v66;
      v75 = v95;
    }
    (*(void (**)(char *, uint64_t))(v101 + 8))(v64, TupleTypeMetadata2);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _GeometryActionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _GeometryActionModifier);
}

uint64_t partial apply for closure #1 in _ScrollViewBoundsModifier.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for _ScrollViewBoundsModifier(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return Attribute.syncMainIfReferences<A>(do:)();
}

uint64_t type metadata accessor for _ScrollViewBoundsModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ScrollViewBoundsModifier);
}

uint64_t static PubliclyPrimitiveView.defaultMakeViewList(view:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t Body;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char v31;
  _BYTE v32[4];

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v21 = *(_OWORD *)(a2 + 5);
  v20 = a2[7];
  v10 = *((_DWORD *)a2 + 16);
  v11 = a2[9];
  v12 = *((_BYTE *)a2 + 80);
  LODWORD(v22) = *a1;
  type metadata accessor for _GraphValue();
  v13 = a2[3];
  v14 = a2[4];
  _GraphValue.value.getter();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Body = type metadata accessor for MakeBody(0, a3, a4, v16);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeBody<A>, Body);
  _GraphValue.init<A>(_:)();
  v22 = v7;
  v23 = v8;
  v24 = v9;
  v25 = v13;
  v26 = v14;
  v27 = v21;
  v28 = v20;
  v29 = v10;
  v30 = v11;
  v31 = v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v32, &v22, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t type metadata accessor for MakeBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MakeBody);
}

uint64_t partial apply for closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = v1[3];
  v5 = v1[2];
  v3 = v1[4];
  AGGraphClearUpdate();
  closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(v3, a1, v5, v2);
  return AGGraphSetUpdate();
}

uint64_t partial apply for closure #1 in _ScrollViewBoundsModifier2.Child.value.getter()
{
  uint64_t *v0;

  return closure #1 in _ScrollViewBoundsModifier2.Child.value.getter(v0[4], v0[5], v0[6], v0[2], v0[3]);
}

uint64_t closure #1 in _ScrollViewBoundsModifier2.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for _ScrollViewBoundsModifier2(0, a4, a5, a4);
  return Attribute.syncMainIfReferences<A>(do:)();
}

uint64_t type metadata accessor for _ScrollViewBoundsModifier2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ScrollViewBoundsModifier2);
}

uint64_t destroy for InsettableGroupedListBody.TableViewRoot(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;

  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_BYTE *)(a1 + 9));
  v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)v4, *(unsigned __int8 *)(v4 + 8), *(_BYTE *)(v4 + 9));
  v5 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<ListPadding>.Content(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_BYTE *)(v5 + 64), *(_BYTE *)(v5 + 65));
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + (v8 | 7) + 66) & ~(v8 | 7);
  v10 = ~v8;
  v11 = (uint64_t *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v11 + v8 + 8) & v10);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v11 + v8 + 8) & v10, v6);
  }
  v12 = *v11;
  if ((unint64_t)*v11 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  result = (v12 + 1);
  if ((_DWORD)v12 == -1)
    goto LABEL_7;
  return result;
}

uint64_t destroy for InsettableGroupedListBody.CollectionViewBody(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_BYTE *)(a1 + 9));
  v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)v4, *(unsigned __int8 *)(v4 + 8), *(_BYTE *)(v4 + 9));
  v5 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<ListPadding>.Content(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_BYTE *)(v5 + 64), *(_BYTE *)(v5 + 65));
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + (v8 | 7) + 66) & ~(v8 | 7);
  v10 = ~v8;
  v11 = *(_QWORD *)(v7 + 64);
  v12 = (uint64_t *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    if ((*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v10))
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((v11 + ((v8 + 16) & v10) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 34) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
    goto LABEL_5;
  }
  v13 = *v12;
  if ((unint64_t)*v12 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  if ((_DWORD)v13 == -1)
  {
LABEL_5:
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v12 + v8 + 8) & v10, v6);
  }
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((v11 + ((v8 + 16) & v10) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 34) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t outlined consume of Environment<ListPadding>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  uint64_t result;

  if ((a10 & 1) == 0)
    return swift_release();
  return result;
}

double static _ContentShapeKindModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  double result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  double *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  unint64_t v78;
  double v79;
  unint64_t v80;
  double v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;

  v69 = a5;
  v75 = a4;
  v97 = *MEMORY[0x1E0C80C00];
  v59 = *a1;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v13 = *(_DWORD *)(a2 + 32);
  v14 = *(_DWORD *)(a2 + 36);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v18 = *(_DWORD *)(a2 + 56);
  v17 = *(_DWORD *)(a2 + 60);
  v19 = *(_DWORD *)(a2 + 64);
  v20 = *(_DWORD *)(a2 + 68);
  v21 = *(_DWORD *)(a2 + 72);
  v22 = *(_DWORD *)(a2 + 76);
  v23 = *(_DWORD *)(a2 + 80);
  v82 = *(_QWORD *)a2;
  v8 = v82;
  v24 = v9;
  LODWORD(v83) = v9;
  v84 = v10;
  v68 = v12;
  v85 = __PAIR64__(v11, v12);
  v67 = v11;
  v66 = v13;
  v86 = v13;
  v87 = v14;
  v65 = v14;
  v88 = v15;
  v89 = v16;
  v90 = v18;
  v91 = v17;
  v64 = v19;
  v92 = v19;
  v93 = v20;
  v63 = v20;
  v62 = v21;
  v94 = v21;
  v95 = v22;
  v61 = v22;
  v60 = v23;
  v96 = v23;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v25 = swift_bridgeObjectRetain();
  a3(&v80, v25, &v82);
  v82 = v16;
  LODWORD(v83) = v18;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v58 = a6;
    LODWORD(v82) = v59;
    v51 = type metadata accessor for _ContentShapeKindModifier(255, v75, v69, v26);
    v50 = type metadata accessor for _GraphValue();
    v57 = _GraphValue.value.getter();
    v82 = v8;
    LODWORD(v83) = v24;
    v84 = v10;
    v85 = __PAIR64__(v67, v68);
    v86 = v66;
    v76 = v17;
    v74 = v16;
    v72 = v15;
    v73 = v18;
    v70 = v10;
    v71 = v8;
    v87 = v65;
    v88 = v15;
    v89 = v16;
    v90 = v18;
    v91 = v17;
    v92 = v64;
    v93 = v63;
    v94 = v62;
    v95 = v61;
    v96 = v60;
    v56 = _ViewInputs.animatedPosition()();
    v82 = v8;
    LODWORD(v83) = v24;
    v84 = v10;
    v85 = __PAIR64__(v67, v68);
    v86 = v66;
    v87 = v65;
    v88 = v15;
    v89 = v16;
    v90 = v18;
    v91 = v17;
    v92 = v64;
    v93 = v63;
    v94 = v62;
    v95 = v61;
    v96 = v60;
    v55 = _ViewInputs.animatedSize()();
    v82 = v8;
    LODWORD(v83) = v24;
    v84 = v10;
    v85 = __PAIR64__(v67, v68);
    v86 = v66;
    v87 = v65;
    v88 = v15;
    v89 = v16;
    v90 = v18;
    v91 = v17;
    v92 = v64;
    v93 = v63;
    v94 = v62;
    v95 = v61;
    v96 = v60;
    v54 = _ViewInputs.transform.getter();
    v82 = v80;
    v83 = *(_QWORD *)&v81;
    v53 = _ViewOutputs.viewResponders()();
    type metadata accessor for ContentShapeKindResponder(0, v75, v69, v27);
    v82 = v8;
    v52 = v24;
    LODWORD(v83) = v24;
    v84 = v10;
    v85 = __PAIR64__(v67, v68);
    v86 = v66;
    v87 = v65;
    v28 = v16;
    v88 = v15;
    v89 = v16;
    v90 = v18;
    v91 = v17;
    v92 = v64;
    v93 = v63;
    v29 = v18;
    v94 = v62;
    v95 = v61;
    v30 = v10;
    v96 = v60;
    swift_allocObject();
    v31 = v71;
    swift_retain();
    swift_retain();
    v32 = v72;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36 = ContentShapeKindResponder.init(inputs:)((uint64_t)&v82, v33, v34, v35);
    v82 = __PAIR64__(v56, v57);
    v83 = __PAIR64__(v54, v55);
    LODWORD(v84) = v53;
    v85 = v36;
    MEMORY[0x1E0C80A78](v36, v37);
    v38 = v69;
    v48 = type metadata accessor for ContentShapeKindResponderFilter(0, v75, v69, v39);
    v49 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContentShapeKindResponderFilter<A>, v48);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v82, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_15, (uint64_t)&v47, v48, MEMORY[0x1E0DEDCE8], v40, MEMORY[0x1E0DEDD18], v41);
    swift_release();
    LOBYTE(v82) = 0;
    _ViewOutputs.subscript.setter();
    v82 = v28;
    LODWORD(v83) = v29;
    v42 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((v42 & 1) != 0)
    {
      MEMORY[0x1E0C80A78](v42, v43);
      v48 = v75;
      v49 = v38;
      LODWORD(v82) = v59;
      v44 = MEMORY[0x1E0CE37D8];
      _GraphValue.subscript.getter();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ContentShapeKinds>, v44, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v45 = _GraphValue.value.getter();
      v82 = v31;
      LODWORD(v83) = v52;
      v84 = v30;
      v85 = __PAIR64__(v67, v68);
      v86 = v66;
      v87 = v65;
      v88 = v32;
      v89 = v28;
      v90 = v29;
      v91 = v76;
      v92 = v64;
      v93 = v63;
      v94 = v62;
      v95 = v61;
      v96 = v60;
      v78 = v80;
      v77 = 0;
      v79 = v81;
      static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(0x100000000, v45, (uint64_t)&v82);
      LOBYTE(v82) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    a6 = v58;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  *(_QWORD *)a6 = v80;
  result = v81;
  a6[1] = v81;
  return result;
}

id static _ContentShapeModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(__int128 *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _OWORD *a6@<X8>)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  id result;
  uint64_t v29;
  unsigned int v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  __int128 v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[32];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v46 = a4;
  v47 = a5;
  v80 = *MEMORY[0x1E0C80C00];
  DWORD2(v52) = *a1;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a2 + 32);
  v13 = *(_DWORD *)(a2 + 36);
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v17 = *(_DWORD *)(a2 + 56);
  v16 = *(_DWORD *)(a2 + 60);
  v18 = *(_DWORD *)(a2 + 64);
  v19 = *(_DWORD *)(a2 + 68);
  v20 = *(_DWORD *)(a2 + 72);
  v21 = *(_DWORD *)(a2 + 76);
  v22 = *(_DWORD *)(a2 + 80);
  *(_QWORD *)&v72 = *(_QWORD *)a2;
  *(_QWORD *)&v73 = v9;
  v58 = v10;
  v59 = v8;
  DWORD2(v72) = v8;
  *((_QWORD *)&v73 + 1) = __PAIR64__(v11, v10);
  v48 = v16;
  v49 = v11;
  v60 = v12;
  *(_QWORD *)&v74 = __PAIR64__(v13, v12);
  *((_QWORD *)&v74 + 1) = v15;
  *(_QWORD *)&v75 = v14;
  *((_QWORD *)&v75 + 1) = __PAIR64__(v16, v17);
  v50 = v18;
  *(_QWORD *)&v76 = __PAIR64__(v19, v18);
  v55 = v20;
  v56 = v19;
  *((_QWORD *)&v76 + 1) = __PAIR64__(v21, v20);
  v53 = v22;
  v54 = v21;
  LODWORD(v77) = v22;
  v61 = v72;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v23 = swift_bridgeObjectRetain();
  a3(&v64, v23, &v72);
  *(_QWORD *)&v72 = v14;
  v57 = v17;
  DWORD2(v72) = v17;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = (id)swift_release();
LABEL_7:
    *a6 = v64;
    return result;
  }
  v44 = a6;
  LODWORD(v72) = DWORD2(v52);
  v40[1] = type metadata accessor for _ContentShapeModifier(255, v46, v47, v24);
  type metadata accessor for _GraphValue();
  v43 = _GraphValue.value.getter();
  *(_QWORD *)&v72 = v61;
  *(_QWORD *)&v73 = v9;
  DWORD2(v72) = v59;
  v45 = v9;
  v51 = v13;
  *(_QWORD *)&v52 = v15;
  *((_QWORD *)&v52 + 1) = v14;
  *((_QWORD *)&v73 + 1) = __PAIR64__(v49, v58);
  *((_QWORD *)&v74 + 1) = v15;
  *(_QWORD *)&v75 = v14;
  *(_QWORD *)&v74 = __PAIR64__(v13, v60);
  *((_QWORD *)&v75 + 1) = __PAIR64__(v48, v57);
  *(_QWORD *)&v76 = __PAIR64__(v56, v50);
  *((_QWORD *)&v76 + 1) = __PAIR64__(v54, v55);
  LODWORD(v77) = v53;
  v42 = _ViewInputs.animatedPosition()();
  *(_QWORD *)&v72 = v61;
  *(_QWORD *)&v73 = v9;
  DWORD2(v72) = v59;
  *((_QWORD *)&v73 + 1) = __PAIR64__(v49, v58);
  *((_QWORD *)&v74 + 1) = v15;
  *(_QWORD *)&v75 = v14;
  *(_QWORD *)&v74 = __PAIR64__(v13, v60);
  *((_QWORD *)&v75 + 1) = __PAIR64__(v48, v57);
  *(_QWORD *)&v76 = __PAIR64__(v56, v50);
  *((_QWORD *)&v76 + 1) = __PAIR64__(v54, v55);
  LODWORD(v77) = v53;
  v41 = _ViewInputs.animatedSize()();
  *(_QWORD *)&v72 = v61;
  *(_QWORD *)&v73 = v9;
  DWORD2(v72) = v59;
  *((_QWORD *)&v73 + 1) = __PAIR64__(v49, v58);
  v25 = v13;
  *(_QWORD *)&v74 = __PAIR64__(v13, v60);
  *((_QWORD *)&v74 + 1) = v15;
  *(_QWORD *)&v75 = v14;
  *((_QWORD *)&v75 + 1) = __PAIR64__(v48, v57);
  *(_QWORD *)&v76 = __PAIR64__(v56, v50);
  *((_QWORD *)&v76 + 1) = __PAIR64__(v54, v55);
  LODWORD(v77) = v53;
  v26 = _ViewInputs.transform.getter();
  v72 = v64;
  v27 = _ViewOutputs.viewResponders()();
  result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    v40[2] = v40;
    *(_QWORD *)&v65 = __PAIR64__(v42, v43);
    *((_QWORD *)&v65 + 1) = __PAIR64__(v26, v41);
    LODWORD(v66) = v27;
    *((_QWORD *)&v66 + 1) = v61;
    *(_DWORD *)v67 = v59;
    *(_QWORD *)&v67[8] = v45;
    v30 = v57;
    *(_QWORD *)&v67[16] = __PAIR64__(v49, v58);
    *(_QWORD *)&v67[24] = __PAIR64__(v25, v60);
    v31 = v52;
    v68 = v52;
    *(_QWORD *)&v69 = __PAIR64__(v48, v57);
    *((_QWORD *)&v69 + 1) = __PAIR64__(v56, v50);
    v32 = v45;
    *(_QWORD *)&v70 = __PAIR64__(v54, v55);
    DWORD2(v70) = v53;
    v71 = (unint64_t)result;
    MEMORY[0x1E0C80A78](result, v29);
    v38 = type metadata accessor for ContentShapeResponderFilter(0, v46, v47, v33);
    v39 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContentShapeResponderFilter<A>, v38);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
    v35 = v34;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v65, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_15, (uint64_t)&v37, v38, MEMORY[0x1E0DEDCE8], v35, MEMORY[0x1E0DEDD18], v36);
    v76 = v68;
    v77 = v69;
    v78 = v70;
    v79 = v71;
    v72 = v65;
    v73 = v66;
    v74 = *(_OWORD *)v67;
    v75 = *(_OWORD *)&v67[16];
    outlined release of ContentShapeResponderFilter<A>((uint64_t)&v72);
    LOBYTE(v65) = 0;
    _ViewOutputs.subscript.setter();
    *(_QWORD *)&v65 = *((_QWORD *)&v31 + 1);
    DWORD2(v65) = v30;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      *(_QWORD *)&v65 = v61;
      DWORD2(v65) = v59;
      *(_QWORD *)&v66 = v32;
      *((_QWORD *)&v66 + 1) = __PAIR64__(v49, v58);
      *(_QWORD *)v67 = __PAIR64__(v51, v60);
      *(_OWORD *)&v67[8] = v31;
      *(_QWORD *)&v67[24] = __PAIR64__(v48, v57);
      *(_QWORD *)&v68 = __PAIR64__(v56, v50);
      *((_QWORD *)&v68 + 1) = __PAIR64__(v54, v55);
      LODWORD(v69) = v53;
      v63 = v64;
      v62 = 1;
      static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(0x100000000, 0x100000000, (uint64_t)&v65);
      LOBYTE(v65) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = (id)swift_release();
    a6 = v44;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _ContentShapeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ContentShapeModifier);
}

uint64_t static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;

  v4 = *(_DWORD *)(a3 + 36);
  v5 = a1;
  if ((a1 & 0x100000000) != 0)
  {
    v5 = _ViewOutputs.subscript.getter();
    if ((v5 & 0x100000000) != 0)
    {
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityNodeList>, (uint64_t)&type metadata for AccessibilityNodeList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<AccessibilityNodeList> and conformance External<A>();
      swift_bridgeObjectRetain();
      v5 = Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
    }
  }
  if ((v4 & 0x20) != 0)
  {
    if ((v4 & 0x80) != 0)
    {
      swift_getKeyPath();
      _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      _ViewOutputs.subscript.getter();
      if ((a1 & 0x100000000) == 0)
        AccessibilityAttachmentToken.init<A>(_:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type ViewResponderTransform and conformance ViewResponderTransform();
      v5 = Attribute.init<A>(body:value:flags:update:)();
      static AGAttributeFlags.removable.getter();
      AGGraphSetFlags();
    }
    if ((v4 & 0x40) != 0)
    {
      swift_getKeyPath();
      _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      _ViewInputs.size.getter();
      _ViewInputs.position.getter();
      _ViewInputs.transform.getter();
      if ((a1 & 0x100000000) == 0)
        AccessibilityAttachmentToken.init<A>(_:)();
      UniqueID.init()();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type GeometryTransform and conformance GeometryTransform();
      v5 = Attribute.init<A>(body:value:flags:update:)();
      static AGAttributeFlags.removable.getter();
      AGGraphSetFlags();
    }
  }
  return v5;
}

void type metadata accessor for _AnyPreferenceKey<AccessibilityNodesKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityNodesKey>)
  {
    v0 = type metadata accessor for _AnyPreferenceKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityNodesKey>);
  }
}

uint64_t closure #1 in static _ContentShapeKindModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v5 = type metadata accessor for _ContentShapeKindModifier(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 40);
  v11[2] = v5;
  v7 = MEMORY[0x1E0CE37D8];
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_8, (uint64_t)v11, v7, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t type metadata accessor for _ContentShapeKindModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ContentShapeKindModifier);
}

uint64_t DefaultSectionStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v8;
  uint64_t result;
  uint64_t v10;

  v8 = 0;
  if (a2)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
    outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v10);
    swift_release();
    swift_release();
    if (v10 != 1)
      v8 = 1;
  }
  result = swift_getKeyPath();
  *(_BYTE *)a4 = v8;
  *(_QWORD *)(a4 + 8) = a1;
  *(_QWORD *)(a4 + 16) = a2;
  *(_BYTE *)(a4 + 24) = a3;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = result;
  *(_BYTE *)(a4 + 48) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID;
  if (!lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7DD8], MEMORY[0x1E0CE7DD0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID);
  }
  return result;
}

uint64_t protocol witness for SectionStyle.makeBody(configuration:) in conformance PlainSectionStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3;
  return outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
}

uint64_t destroy for RootModifier(uint64_t a1)
{
  uint64_t result;
  int v3;

  swift_weakDestroy();
  swift_weakDestroy();
  result = swift_weakDestroy();
  if (*(_QWORD *)(a1 + 48))
    result = __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  v3 = *(unsigned __int8 *)(a1 + 88);
  if (v3 != 255)
    return outlined consume of SceneID(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v3 & 1);
  return result;
}

uint64_t _UIHostingView.rootTransform()()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  char v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[3];

  v1 = v0;
  v29[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100);
  if ((*((_BYTE *)v0 + v2) & 1) == 0)
  {
    *((_BYTE *)v0 + v2) = 1;
    objc_msgSend(v0, sel__registerForGeometryChanges);
  }
  v29[0] = 0;
  v29[1] = 0;
  closure #1 in _UIHostingView.rootTransform()((int)v29, v0);
  v3 = static SemanticFeature.isEnabled.getter();
  objc_msgSend(v1, sel_bounds);
  if ((v3 & 1) != 0)
  {
    v8 = v4;
    v9 = v5;
    v10 = v6;
    v11 = v7;
    v12 = objc_msgSend(v1, sel_window);
    if (v12)
    {
      v13 = v12;
      objc_msgSend(v1, sel_convertRect_toCoordinateSpace_, v12, v8, v9, v10, v11);
      static ScrollGeometry.rootViewTransform(contentOffset:containerSize:)();
      v15 = v22;
      v16 = v23;
      v17 = v24;
      v18 = v25;
      v19 = v26;
      v20 = v27;
      v21 = v28;
      ViewTransform.UnsafeBuffer.appendScrollGeometry(_:isClipped:)();

    }
    objc_msgSend(v1, sel_clipsToBounds, v15, v16, v17, v18, v19, v20, v21);
    static ScrollGeometry.rootViewTransform(contentOffset:containerSize:)();
    ViewTransform.UnsafeBuffer.appendScrollGeometry(_:isClipped:)();
  }
  else
  {
    objc_msgSend(v1, sel_clipsToBounds);
  }
  hostingViewCoordinateSpace.getter();
  ViewTransform.UnsafeBuffer.appendCoordinateSpace(id:)();
  if (one-time initialization token for UIKitHostContainerCoordinateSpace != -1)
    swift_once();
  ViewTransform.UnsafeBuffer.appendCoordinateSpace(id:)();
  ViewTransform.init()();
  return ViewTransform.append(movingContentsOf:)();
}

unint64_t ScrollViewAdjustedState.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  unsigned __int8 v2;
  unsigned __int8 v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  double v20;
  double v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  v3 = v2;
  v5 = *(double *)Value;
  v4 = *(double *)(Value + 8);
  v6 = *(_QWORD *)(Value + 16);
  v7 = *(_QWORD *)(Value + 24);
  v8 = *(_QWORD *)(Value + 32);
  v9 = *(_QWORD *)(Value + 40);
  v10 = *(_QWORD *)(Value + 48);
  v11 = *(_QWORD *)(Value + 56);
  v12 = *(_QWORD *)(Value + 64);
  v13 = *(_QWORD *)(Value + 72);
  v14 = *(_QWORD *)(Value + 80);
  v15 = *(_QWORD *)(Value + 88);
  v16 = *(_QWORD *)(Value + 96);
  v17 = *(unsigned int *)(Value + 104);
  v49 = *(double *)Value;
  v50 = v4;
  v32 = v7;
  v33 = v6;
  v51 = v6;
  v52 = v7;
  v30 = v9;
  v31 = v8;
  v53 = v8;
  v54 = v9;
  v55 = v10;
  v56 = v11;
  v57 = v12;
  v58 = v13;
  v28 = v15;
  v29 = v14;
  v59 = v14;
  v60 = v15;
  v61 = v16;
  v62 = v17;
  v18 = v2 & (v16 == 0x8000000000000000);
  v34 = 3;
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(v16);
  v19 = ScrollViewAdjustedState.resetIfNeeded(state:reason:)((uint64_t)&v49, &v34);
  if ((ScrollViewAdjustedState.adjustOffsetIfNeeded(state:reason:)(&v49, &v34) & 1) != 0)
  {
    v20 = v49;
    v21 = v50;
    v22 = 1;
    if (v49 == v5 && v50 == v4)
      goto LABEL_8;
  }
  else
  {
    v22 = v3 | v19;
    v20 = v49;
    v21 = v50;
    if (v49 == v5 && v50 == v4)
      goto LABEL_8;
  }
  v23 = v34;
  if (v34 == 3)
  {
LABEL_8:
    v23 = v16;
    goto LABEL_9;
  }
  v26 = *(_QWORD *)(v0 + 112);
  v18 = 1;
  swift_beginAccess();
  v27 = (*(_DWORD *)(v26 + 16) + 1);
  *(_DWORD *)(v26 + 16) = v27;
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v16);
  if ((_DWORD)v17 != -1)
  {
    if ((_DWORD)v17)
      v27 = merge32(_:_:)(v17, v27);
    if ((_DWORD)v27 == -1)
    {
      LODWORD(v17) = -1;
    }
    else
    {
      LODWORD(v17) = v23 + 1;
      if ((_DWORD)v27)
        LODWORD(v17) = merge32(_:_:)(v27, (int)v23 + 1);
    }
    v18 = 1;
  }
LABEL_9:
  v24 = *(double *)(v0 + 96) == v21 && *(double *)(v0 + 88) == v20;
  if (!v24 && v18)
  {
    *(double *)(v0 + 88) = v20;
    *(double *)(v0 + 96) = v21;
  }
  if ((AGGraphGetOutputValue() == 0) | v22 & 1)
  {
    v35 = v20;
    v36 = v21;
    v37 = v33;
    v38 = v32;
    v39 = v31;
    v40 = v30;
    v41 = v10;
    v42 = v11;
    v43 = v12;
    v44 = v13;
    v45 = v29;
    v46 = v28;
    v47 = v23;
    v48 = v17;
    AGGraphSetOutputValue();
  }
  return outlined consume of SystemScrollLayoutState.ContentOffsetMode(v23);
}

uint64_t UpdatedHostingScrollView.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  int v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int *v8;
  int v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  double *v16;
  int v17;
  double v18;
  char v19;
  unint64_t v20;
  __int128 v21;
  _BYTE *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  char *v39;
  char v40;
  void *v41;
  id v42;
  char *v43;
  void *v44;
  id v45;
  char v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  void *v56;
  double v57;
  double v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  unsigned __int8 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _OWORD v111[18];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _OWORD v126[2];
  int v127[20];
  unsigned __int8 v128;
  _BYTE v129[120];
  _QWORD v130[4];
  char v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _OWORD v146[2];
  uint64_t v147;

  v1 = v0;
  v147 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  v91 = v3;
  v86 = *(_QWORD *)(Value + 8);
  v87 = *(_QWORD *)Value;
  v4 = *(_QWORD *)(Value + 96);
  v5 = *(_DWORD *)(Value + 104);
  v6 = AGGraphGetValue();
  v93 = v7;
  outlined init with copy of ScrollViewConfiguration(v6, (uint64_t)v129);
  v8 = (int *)AGGraphGetValue();
  v95 = v9;
  outlined init with copy of ScrollEnvironmentProperties(v8, (uint64_t)v127);
  v10 = (uint64_t *)AGGraphGetValue();
  v94 = v11;
  v12 = *v10;
  v13 = v10[1];
  v14 = v10[3];
  v84 = v10[4];
  v85 = v10[2];
  v83 = v10[5];
  AGGraphGetValue();
  v96 = v15;
  type metadata accessor for CGSize(0);
  v16 = (double *)AGGraphGetValue();
  v90 = v17;
  v18 = *v16;
  AGGraphGetValue();
  v82 = v19;
  v20 = v4 >> 62;
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(v4);
  swift_retain();
  swift_retain_n();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v21 = v97;
  v92 = v128;
  v89 = *(unsigned __int8 *)(v0 + 153);
  if (*(_DWORD *)v0 != *MEMORY[0x1E0CFED28])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Axis.Set?, MEMORY[0x1E0CE6900], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v22 = (_BYTE *)AGGraphGetValue();
    if ((v22[1] & 1) == 0)
      *(_BYTE *)(*(_QWORD *)(v0 + 8) + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_descendantScrollableAxes) = *v22;
  }
  EnvironmentValues.contentMarginProxy.getter((uint64_t)&v132);
  v109 = v144;
  v110 = v145;
  v111[0] = v146[0];
  *(_OWORD *)((char *)v111 + 9) = *(_OWORD *)((char *)v146 + 9);
  v105 = v140;
  v106 = v141;
  v107 = v142;
  v108 = v143;
  v101 = v136;
  v102 = v137;
  v103 = v138;
  v104 = v139;
  v97 = v132;
  v98 = v133;
  v99 = v134;
  v100 = v135;
  v23 = *(_OWORD *)(v0 + 488);
  v124 = *(_OWORD *)(v0 + 472);
  v125 = v23;
  v126[0] = *(_OWORD *)(v0 + 504);
  *(_OWORD *)((char *)v126 + 9) = *(_OWORD *)(v0 + 513);
  v24 = *(_OWORD *)(v0 + 424);
  v120 = *(_OWORD *)(v0 + 408);
  v121 = v24;
  v25 = *(_OWORD *)(v0 + 456);
  v122 = *(_OWORD *)(v0 + 440);
  v123 = v25;
  v26 = *(_OWORD *)(v0 + 360);
  v116 = *(_OWORD *)(v0 + 344);
  v117 = v26;
  v27 = *(_OWORD *)(v0 + 392);
  v118 = *(_OWORD *)(v0 + 376);
  v119 = v27;
  v28 = *(_OWORD *)(v0 + 296);
  v112 = *(_OWORD *)(v0 + 280);
  v113 = v28;
  v29 = *(_OWORD *)(v0 + 328);
  v114 = *(_OWORD *)(v0 + 312);
  v115 = v29;
  v30 = specialized static ContentMarginProxy.== infix(_:_:)((uint64_t *)&v97, (uint64_t *)&v112);
  v31 = *(_DWORD *)(v0 + 56);
  v88 = v31;
  if ((_DWORD)v20)
  {
    v32 = v4;
    if ((_DWORD)v20 != 1)
      goto LABEL_12;
    swift_retain();
    v31 = v88;
  }
  if (v5 == -1 || v31 == -1 || v5 != v31)
  {
    *(_DWORD *)(v0 + 56) = v5;
    v32 = v4;
  }
  else
  {
    outlined consume of SystemScrollLayoutState.ContentOffsetMode(v4);
    v32 = 0x8000000000000000;
  }
LABEL_12:
  if ((v93 & 1) != 0)
  {
    v34 = *(char **)(v0 + 8);
    *(_BYTE *)(*(_QWORD *)&v34[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper]
             + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes) = v129[0];
    outlined init with copy of ScrollViewConfiguration((uint64_t)v129, (uint64_t)&v97);
    v35 = (uint64_t)&v34[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_configuration];
    swift_beginAccess();
    outlined init with copy of ScrollViewConfiguration(v35, (uint64_t)&v112);
    swift_beginAccess();
    v36 = v34;
    outlined assign with copy of ScrollViewConfiguration((uint64_t)&v97, v35);
    swift_endAccess();
    HostingScrollView.updateForConfiguration(oldValue:)();
    outlined destroy of ScrollViewConfiguration((uint64_t)&v97);
    outlined destroy of ScrollViewConfiguration((uint64_t)&v112);

    if ((v95 & 1) == 0)
    {
LABEL_14:
      v33 = v30 ^ 1;
      if ((v33 & 1) != 0)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else if ((v95 & 1) == 0)
  {
    goto LABEL_14;
  }
  AGGraphClearUpdate();
  v37 = *(char **)(*(_QWORD *)(v1 + 8) + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper);
  outlined init with copy of ScrollEnvironmentProperties(v127, (uint64_t)&v97);
  v38 = (int *)&v37[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties];
  swift_beginAccess();
  outlined init with copy of ScrollEnvironmentProperties(v38, (uint64_t)&v112);
  swift_beginAccess();
  v39 = v37;
  outlined assign with copy of ScrollEnvironmentProperties((uint64_t)&v97, (uint64_t)v38);
  swift_endAccess();
  ScrollViewHelper.didChangeProperties(from:)((uint64_t)&v112);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v97);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v112);

  AGGraphSetUpdate();
  v33 = v30 ^ 1;
  if ((v33 & 1) != 0)
  {
LABEL_19:
    AGGraphClearUpdate();
    closure #3 in UpdatedHostingScrollView.updateValue()(v1, &v132, (uint64_t)v127);
    AGGraphSetUpdate();
    goto LABEL_20;
  }
LABEL_18:
  if ((v96 & 1) != 0)
    goto LABEL_19;
LABEL_20:
  static Semantics.v5.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
  {
    type metadata accessor for HostingScrollView();
    if (!AGGraphGetOutputValue()
      || (v82 & 1) != 0
      && (swift_retain(),
          swift_retain(),
          v40 = PropertyList.Tracker.hasDifferentUsedValues(_:)(),
          swift_release(),
          swift_release(),
          (v40 & 1) != 0))
    {
      AGGraphClearUpdate();
      swift_retain();
      PropertyList.Tracker.reset()();
      swift_release();
      v97 = v21;
      v41 = *(void **)(v1 + 8);
      v42 = *(id *)(v1 + 16);
      v43 = v41;
      UIView.adoptEnvironment(_:hostedSubview:)((uint64_t)&v97, v43);

      v44 = *(void **)&v43[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper];
      v97 = v21;
      v45 = v44;
      ScrollViewHelper.adoptEnvironment(_:)((uint64_t *)&v97);

      AGGraphSetUpdate();
    }
  }
  if ((v90 & 1) != 0)
    *(double *)(*(_QWORD *)(v1 + 8) + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_rtlAdjustment) = v18;
  if ((v96 & 1) != 0 || ((v94 | v93 | v90) & 1) != 0 || v92 != v89)
  {
    v46 = v129[0];
    if ((v129[0] & 1) != 0)
    {
      static Edge.Set.horizontal.getter();
      if ((v46 & 2) == 0)
      {
LABEL_35:
        EdgeInsets.in(_:)();
        v49 = v48;
        v51 = v50;
        v53 = v52;
        v54 = -0.0;
        if (v18 != 0.0)
          v54 = v18;
        v55 = v54 + v47;
        AGGraphClearUpdate();
        v56 = *(void **)(v1 + 16);
        if (v92)
          v57 = v51;
        else
          v57 = v55;
        if (v92)
          v58 = v55;
        else
          v58 = v51;
        v130[0] = v49;
        *(double *)&v130[1] = v58;
        v130[2] = v53;
        *(double *)&v130[3] = v57;
        v131 = 0;
        v59 = v56;
        specialized UIView.SafeAreaHelper.updateSafeAreaInsets<A>(_:delegate:)((uint64_t)v130, v59);

        AGGraphSetUpdate();
        goto LABEL_44;
      }
    }
    else if ((v129[0] & 2) == 0)
    {
      goto LABEL_35;
    }
    static Edge.Set.vertical.getter();
    goto LABEL_35;
  }
LABEL_44:
  if (((v91 | v33 | v94 | v95) & 1) != 0 || (v96 & 1) != 0)
  {
    AGGraphClearUpdate();
    *(_QWORD *)&v97 = v12;
    *((_QWORD *)&v97 + 1) = v13;
    *(_QWORD *)&v98 = v85;
    *((_QWORD *)&v98 + 1) = v14;
    *(_QWORD *)&v99 = v84;
    *((_QWORD *)&v99 + 1) = v83;
    CGRect.init(_:)();
    v61 = v60;
    v63 = v62;
    v65 = v64;
    v67 = v66;
    outlined init with copy of UpdatedHostingScrollView(v1, (uint64_t)&v97);
    v68 = (uint64_t *)AGGraphGetValue();
    v69 = *v68;
    v70 = v68[1];
    outlined destroy of UpdatedHostingScrollView((uint64_t)&v97);
    *(_QWORD *)&v112 = v87;
    *((_QWORD *)&v112 + 1) = v86;
    *(_QWORD *)&v113 = v61;
    *((_QWORD *)&v113 + 1) = v63;
    *(_QWORD *)&v114 = v65;
    *((_QWORD *)&v114 + 1) = v67;
    *(_QWORD *)&v115 = v69;
    *((_QWORD *)&v115 + 1) = v70;
    *(_QWORD *)&v116 = v32;
    v71 = *(void **)(v1 + 8);
    outlined copy of SystemScrollLayoutState.ContentOffsetMode(v32);
    v72 = v71;
    v73 = HostingScrollView.updateContext(_:)(&v112);
    outlined consume of SystemScrollLayoutState.ContentOffsetMode(v32);

    AGGraphSetUpdate();
    if ((v73 & 1) == 0)
      *(_DWORD *)(v1 + 56) = v88;
  }
  *(_QWORD *)&v97 = *(_QWORD *)(v1 + 8);
  type metadata accessor for HostingScrollView();
  AGGraphSetOutputValue();
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v32);
  v74 = v145;
  *(_OWORD *)(v1 + 472) = v144;
  *(_OWORD *)(v1 + 488) = v74;
  *(_OWORD *)(v1 + 504) = v146[0];
  *(_OWORD *)(v1 + 513) = *(_OWORD *)((char *)v146 + 9);
  v75 = v141;
  *(_OWORD *)(v1 + 408) = v140;
  *(_OWORD *)(v1 + 424) = v75;
  v76 = v143;
  *(_OWORD *)(v1 + 440) = v142;
  *(_OWORD *)(v1 + 456) = v76;
  v77 = v137;
  *(_OWORD *)(v1 + 344) = v136;
  *(_OWORD *)(v1 + 360) = v77;
  v78 = v139;
  *(_OWORD *)(v1 + 376) = v138;
  *(_OWORD *)(v1 + 392) = v78;
  v79 = v133;
  *(_OWORD *)(v1 + 280) = v132;
  *(_OWORD *)(v1 + 296) = v79;
  v80 = v135;
  *(_OWORD *)(v1 + 312) = v134;
  *(_OWORD *)(v1 + 328) = v80;
  outlined assign with copy of ScrollEnvironmentProperties((uint64_t)v127, v1 + 72);
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of ScrollViewConfiguration((uint64_t)v129);
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v127);
}

unint64_t outlined consume of SystemScrollLayoutState.ContentOffsetMode(unint64_t result)
{
  if (result >> 62 == 1)
    return swift_release();
  return result;
}

unint64_t outlined copy of SystemScrollLayoutState.ContentOffsetMode(unint64_t result)
{
  if (result >> 62 == 1)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for HostingScrollView()
{
  return objc_opt_self();
}

uint64_t outlined init with copy of ScrollViewConfiguration(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ScrollViewConfiguration(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for ScrollViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  swift_unknownObjectWeakCopyInit();
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 80) = v6;
    *(_QWORD *)(a1 + 88) = v7;
    *(_QWORD *)(a1 + 96) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined destroy of ScrollViewConfiguration(uint64_t a1)
{
  destroy for ScrollViewConfiguration(a1);
  return a1;
}

uint64_t destroy for ScrollViewConfiguration(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 48))
    swift_release();
  swift_unknownObjectWeakDestroy();
  if (*(_QWORD *)(a1 + 80))
    swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t outlined assign with copy of ScrollEnvironmentProperties(uint64_t a1, uint64_t a2)
{
  assignWithCopy for ScrollEnvironmentProperties(a2, a1);
  return a2;
}

uint64_t assignWithCopy for ScrollEnvironmentProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  v4 = a1 + 8;
  v5 = a2 + 8;
  v6 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    }
    else
    {
      outlined destroy of AccessibilityRelationshipScope.Key(a1 + 8);
      *(_OWORD *)v4 = *(_OWORD *)v5;
      v8 = *(_OWORD *)(v5 + 32);
      v7 = *(_OWORD *)(v5 + 48);
      v9 = *(_OWORD *)(v5 + 16);
      *(_QWORD *)(v4 + 64) = *(_QWORD *)(v5 + 64);
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)(v4 + 48) = v7;
      *(_OWORD *)(v4 + 16) = v9;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 8, a2 + 8);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)v5;
    v10 = *(_OWORD *)(a2 + 24);
    v11 = *(_OWORD *)(a2 + 40);
    v12 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 40) = v11;
    *(_OWORD *)(a1 + 56) = v12;
    *(_OWORD *)(a1 + 24) = v10;
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  return a1;
}

uint64_t ScrollViewAdjustedState.adjustOffsetIfNeeded(state:reason:)(double *a1, _BYTE *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  int v6;
  unsigned int v7;
  __int128 *Value;
  __int128 v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  unsigned int v14;
  __int128 *v15;
  __int128 v16;
  double v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  BOOL v22;
  double v23;
  double v24;
  CGFloat v25;
  double v26;
  BOOL v27;
  unsigned int v28;
  unsigned __int8 *v29;
  CGFloat v30;
  double v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  CGFloat v35;
  int v36;
  int v37;
  char *v38;
  uint64_t result;
  char v40;
  BOOL v41;
  int v42;
  double x;
  _BOOL4 v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  BOOL v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  __int128 v57;
  BOOL v58;
  _BYTE *v59;
  CGFloat v60;
  unsigned int v61;
  char v62;
  int v63;
  BOOL v64;
  BOOL v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  unsigned int v70;
  int v71;
  CGRect rect1;
  char v73;
  unint64_t v74;
  CGFloat v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  __int128 v80;
  __int128 v81;
  double v82;
  uint64_t v83;
  double v84;
  double v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  _BYTE v91[24];
  __int128 v92;
  double v93;
  uint64_t v94;
  double v95;
  double v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;

  v3 = v2;
  AGGraphClearUpdate();
  v70 = v2[8];
  AGGraphGetValue();
  swift_retain();
  Transaction.subscript.getter();
  swift_release();
  AGGraphSetUpdate();
  v6 = v89;
  v7 = *v2;
  Value = (__int128 *)AGGraphGetValue();
  v9 = Value[1];
  v89 = *Value;
  v90 = v9;
  MEMORY[0x18D75BE3C]();
  CGSize.inset(by:)();
  v11 = v10;
  v13 = v12;
  v14 = v2[5];
  v15 = (__int128 *)AGGraphGetValue();
  v16 = v15[1];
  v89 = *v15;
  v90 = v16;
  *(_OWORD *)v91 = v15[2];
  CGRect.init(_:)();
  rect1.origin.x = v19;
  v21 = v20;
  v68 = *((double *)v2 + 12);
  v69 = *((double *)v2 + 11);
  v22 = a1[1] != v68 || *a1 != v69;
  v23 = *((double *)v3 + 7);
  v24 = *((double *)v3 + 8);
  v25 = v17;
  v26 = v18;
  v27 = v18 == v24 && v17 == v23;
  v28 = v3[4];
  v29 = (unsigned __int8 *)AGGraphGetValue();
  v30 = v11;
  v66 = *((_QWORD *)v3 + 10);
  v67 = *((double *)v3 + 9);
  v71 = *v29;
  if (v11 == v67 && v13 == *((double *)v3 + 10))
  {
    v102.origin.x = *((CGFloat *)v3 + 5);
    v102.origin.y = *((CGFloat *)v3 + 6);
    v100.origin.x = rect1.origin.x;
    v31 = v21;
    v100.origin.y = v21;
    v100.size.width = v25;
    v100.size.height = v26;
    v102.size.width = v23;
    v102.size.height = v24;
    if (!CGRectEqualToRect(v100, v102) && v6 != 2)
    {
LABEL_11:
      v64 = v27;
      v65 = v22;
      v61 = v3[1];
      v32 = *(unsigned __int8 *)AGGraphGetValue();
      v33 = v3[2];
      v34 = AGGraphGetValue();
      v35 = *(double *)v34;
      v36 = *(unsigned __int8 *)(v34 + 24);
      v62 = *(_BYTE *)(v34 + 24);
      if (v32 == 2)
      {
        v42 = v36 ^ 1;
        if (*(_QWORD *)(*(_QWORD *)&v35 + 16))
          v42 = 1;
      }
      else
      {
        if (v32 == 1)
        {
          if (*(_QWORD *)(*(_QWORD *)&v35 + 16))
            v37 = 1;
          else
            v37 = v36 ^ 1;
          v63 = 1;
LABEL_25:
          x = rect1.origin.x;
          rect1.origin.x = *(CGFloat *)(v34 + 8);
          v60 = *(double *)(v34 + 16);
          swift_bridgeObjectRetain();
          v103.origin.x = 0.0;
          v103.origin.y = 0.0;
          v103.size.width = 0.0;
          v103.size.height = 0.0;
          v101.origin.x = x;
          v101.origin.y = v31;
          v101.size.width = v25;
          v101.size.height = v26;
          v44 = CGRectEqualToRect(v101, v103);
          if (v37)
          {
            if (!v44)
            {
              v59 = a2;
              v45 = v3[3];
              v46 = v3[9];
              v47 = *((_BYTE *)v3 + 104);
              v48 = v3[27];
              v49 = *((_QWORD *)v3 + 14);
              *(_QWORD *)&v89 = __PAIR64__(v61, v7);
              *((_QWORD *)&v89 + 1) = __PAIR64__(v45, v33);
              *(_QWORD *)&v90 = __PAIR64__(v14, v28);
              *((_QWORD *)&v90 + 1) = *((_QWORD *)v3 + 3);
              *(_DWORD *)v91 = v70;
              *(_DWORD *)&v91[4] = v46;
              *(_OWORD *)&v91[8] = *(_OWORD *)(v3 + 10);
              v92 = *(_OWORD *)(v3 + 14);
              v93 = v67;
              v94 = v66;
              v95 = v69;
              v96 = v68;
              v97 = v47;
              v98 = v48;
              v99 = v49;
              v74 = *(_QWORD *)&v35;
              v75 = rect1.origin.x;
              v76 = *(_QWORD *)&v60;
              LOBYTE(v77) = v62;
              swift_retain();
              v50 = ScrollViewAdjustedState.alignIfNeeded(_:axis:newSize:newContentFrame:anchors:)(a1, 0, (uint64_t)&v74, v30, v13, x, v31, v25, v26);
              swift_release();
              if (v50)
              {
                if ((v63 & 1) == 0)
                {
                  swift_bridgeObjectRelease();
LABEL_47:
                  result = 1;
                  *v59 = 1;
                  goto LABEL_40;
                }
                v51 = 1;
                goto LABEL_35;
              }
              if ((v63 & 1) != 0)
              {
LABEL_34:
                v51 = 0;
LABEL_35:
                v52 = v3[3];
                v53 = v3[9];
                v54 = *((_BYTE *)v3 + 104);
                v55 = v3[27];
                v56 = *((_QWORD *)v3 + 14);
                v74 = __PAIR64__(v61, v7);
                v75 = COERCE_DOUBLE(__PAIR64__(v52, v33));
                v76 = __PAIR64__(v14, v28);
                v77 = *((_QWORD *)v3 + 3);
                v78 = v70;
                v79 = v53;
                v57 = *(_OWORD *)(v3 + 14);
                v80 = *(_OWORD *)(v3 + 10);
                v81 = v57;
                v82 = v67;
                v83 = v66;
                v84 = v69;
                v85 = v68;
                v86 = v54;
                v87 = v55;
                v88 = v56;
                rect1.origin.y = v35;
                rect1.size.width = rect1.origin.x;
                rect1.size.height = v60;
                v73 = v62;
                swift_retain();
                v58 = ScrollViewAdjustedState.alignIfNeeded(_:axis:newSize:newContentFrame:anchors:)(a1, 1, (uint64_t)&rect1.origin.y, v30, v13, x, v31, v25, v26);
                swift_bridgeObjectRelease();
                swift_release();
                if ((v51 & 1) != 0 || v58)
                  goto LABEL_47;
LABEL_39:
                result = 0;
LABEL_40:
                *((CGFloat *)v3 + 9) = v30;
                *((CGFloat *)v3 + 10) = v13;
                *((double *)v3 + 5) = x;
                *((double *)v3 + 6) = v31;
                *((CGFloat *)v3 + 7) = v25;
                *((double *)v3 + 8) = v26;
                v38 = (char *)(v3 + 26);
                if ((v3[26] & 1) != 0)
                {
                  v40 = 1;
                  goto LABEL_45;
                }
                v41 = v71 == 0;
                v40 = v65 && v64;
                goto LABEL_43;
              }
            }
          }
          else if (v63 && !v44)
          {
            v59 = a2;
            goto LABEL_34;
          }
          swift_bridgeObjectRelease();
          goto LABEL_39;
        }
        v42 = 1;
      }
      v63 = v42;
      v37 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v31 = v21;
    if (v6 != 2)
      goto LABEL_11;
  }
  *((CGFloat *)v3 + 9) = v30;
  *((CGFloat *)v3 + 10) = v13;
  *((_QWORD *)v3 + 5) = *(_QWORD *)&rect1.origin.x;
  *((double *)v3 + 6) = v31;
  *((CGFloat *)v3 + 7) = v25;
  *((double *)v3 + 8) = v26;
  v38 = (char *)(v3 + 26);
  if ((v3[26] & 1) != 0)
  {
    result = 0;
    v40 = 1;
    goto LABEL_45;
  }
  result = 0;
  v41 = v71 == 0;
  v40 = v22 && v27;
LABEL_43:
  if (!v41)
    v40 = 1;
LABEL_45:
  *v38 = v40;
  return result;
}

uint64_t ScrollViewAdjustedState.resetIfNeeded(state:reason:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  int v5;
  int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(v2 + 108);
  v6 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v5 == v6 && AGGraphGetOutputValue())
    return 0;
  *(double *)a1 = ScrollViewAdjustedState.initialOffset()();
  *(_QWORD *)(a1 + 8) = v8;
  *a2 = 2;
  if (v5 != v6)
  {
    *(_DWORD *)(v2 + 108) = *(_DWORD *)AGGraphGetValue() >> 1;
    *(_BYTE *)(v2 + 104) = 0;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
  }
  return 1;
}

uint64_t type metadata accessor for ScrollEventStateReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollEventStateReader);
}

uint64_t destroy for SceneBridgeReader(uint64_t a1)
{
  outlined consume of Environment<Color?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  return swift_release();
}

uint64_t initializeWithCopy for SceneBridgeReader(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<SceneBridge?>.Content(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v6;
  swift_retain();
  return a1;
}

uint64_t initializeWithTake for SystemScrollViewContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))((*(unsigned __int8 *)(v6 + 80) + 120 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 120 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void PlatformViewHost.contentCompressionResistancePriority(for:)(uint64_t a1, SEL *a2)
{
  _QWORD *v2;
  objc_class *ObjectType;
  _QWORD *v6;
  void *v7;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (((*(uint64_t (**)(void))(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x58) + 128))() & 1) != 0)
  {
    v8.receiver = v2;
    v8.super_class = ObjectType;
    objc_msgSendSuper2(&v8, *a2, a1);
  }
  else
  {
    v7 = (void *)(*(uint64_t (**)(char *))(*(_QWORD *)((*v6 & *v2) + 0x58) + 72))((char *)v2 + *(_QWORD *)((*v6 & *v2) + 0x78));
    objc_msgSend(v7, *a2, a1);

  }
}

_QWORD *@objc PlatformViewHost._traitCollection(forChildEnvironment:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;

  swift_unknownObjectRetain();
  v5 = a1;
  v6 = PlatformViewHost._traitCollection(forChildEnvironment:)(a3);
  swift_unknownObjectRelease();

  return v6;
}

_QWORD *PlatformViewHost._traitCollection(forChildEnvironment:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  objc_class *ObjectType;
  _QWORD *v5;
  id v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  int v14;
  objc_class *v15;
  char *v16;
  char *v17;
  char *v18;
  id v19;
  uint64_t v20;
  objc_super v22;
  objc_super v23;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (((*(uint64_t (**)(void))(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x58) + 128))() & 1) == 0)
    goto LABEL_4;
  v22.receiver = v1;
  v22.super_class = ObjectType;
  v5 = objc_msgSendSuper2(&v22, sel__traitCollectionForChildEnvironment_, a1);
  if (!v5)
  {
    __break(1u);
LABEL_4:
    v6 = objc_msgSend(v1, sel_traitCollection);
    v7 = (_QWORD *)((char *)v2 + *(_QWORD *)((*v5 & *v2) + 0x68));
    swift_beginAccess();
    v8 = *(_DWORD *)((char *)v2 + *(_QWORD *)((*v5 & *v2) + 0x70));
    v9 = *v7;
    v10 = v7[1];
    v11 = (char *)v2 + *(_QWORD *)((*v5 & *v2) + 0x90);
    v12 = *(_QWORD *)v11;
    v13 = v11[8];
    v14 = *((_DWORD *)v11 + 3);
    v15 = (objc_class *)type metadata accessor for EnvironmentWrapper();
    v16 = (char *)objc_allocWithZone(v15);
    v17 = &v16[OBJC_IVAR___SwiftUIEnvironmentWrapper_environment];
    *(_QWORD *)v17 = v9;
    *((_QWORD *)v17 + 1) = v10;
    *(_DWORD *)&v16[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase] = v8;
    v18 = &v16[OBJC_IVAR___SwiftUIEnvironmentWrapper_focusedValues];
    *(_QWORD *)v18 = v12;
    v18[8] = v13;
    *((_DWORD *)v18 + 3) = v14;
    v23.receiver = v16;
    v23.super_class = v15;
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    v19 = objc_msgSendSuper2(&v23, sel_init);
    MEMORY[0x1E0C80A78](v19, v20);
    v5 = (_QWORD *)UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();
    swift_release();
    swift_release();
    swift_release();

  }
  return v5;
}

void PlatformViewHost.hostedView.setter(void *a1)
{
  _QWORD *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v3, sel_setHostedView_, a1);

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xB8)) = 2;
}

void PlatformViewHost.updateEnvironment(_:viewPhase:)(uint64_t *a1, int *a2)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  char v8;
  void *v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = &v2[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v2) + 0x68)];
  swift_beginAccess();
  v10 = *(_OWORD *)v7;
  EnvironmentValues.colorScheme.getter();
  swift_endAccess();
  v12 = v4;
  v13 = v5;
  EnvironmentValues.colorScheme.getter();
  v8 = v11 ^ v10;
  swift_beginAccess();
  *(_QWORD *)v7 = v4;
  *((_QWORD *)v7 + 1) = v5;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  *(_DWORD *)&v2[*(_QWORD *)((*v3 & *(_QWORD *)v2) + 0x70)] = v6;
  PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)((uint64_t)&v10, v8 & 1);
  *(_QWORD *)&v10 = v4;
  *((_QWORD *)&v10 + 1) = v5;
  v9 = (void *)(*(uint64_t (**)(char *))(*(_QWORD *)((*v3 & *(_QWORD *)v2) + 0x58) + 72))(&v2[*(_QWORD *)((*v3 & *(_QWORD *)v2) + 0x78)]);
  UIView.adoptEnvironment(_:hostedSubview:)((uint64_t)&v10, v9);

}

uint64_t PlatformViewHost.representedView.getter()
{
  char *v0;

  return (*(uint64_t (**)(char *))(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x58) + 72))(&v0[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x78)]);
}

id protocol witness for static PlatformViewRepresentable.platformView(for:) in conformance ListRepresentable<A, B>(_QWORD *a1)
{
  return (id)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*a1);
}

void UIView.adoptEnvironment(_:hostedSubview:)(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  char v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;

  v3 = v2;
  v5 = EnvironmentValues.isEnabled.getter();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  *(_BYTE *)(v6 + 24) = v5 & 1;
  *(_QWORD *)(v6 + 32) = a2;
  v7 = v3;
  v8 = a2;
  static Update.enqueueAction(_:)();
  swift_release();
  EnvironmentValues.layoutDirection.getter();
  if (v12)
    v9 = 4;
  else
    v9 = 3;
  if (objc_msgSend(v8, sel_semanticContentAttribute) != (id)v9)
    objc_msgSend(v8, sel_setSemanticContentAttribute_, v9);
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
  {
    if (EnvironmentValues.accentColor.getter())
    {
      dispatch thunk of AnyColorBox.resolve(in:)();
      goto LABEL_12;
    }
LABEL_14:
    v10 = 0;
    goto LABEL_15;
  }
  swift_retain();
  swift_retain();
  if (!EnvironmentValues.tintColor.getter() && !EnvironmentValues.accentColor.getter())
  {
    swift_release();
    swift_release();
    goto LABEL_14;
  }
  dispatch thunk of AnyColorBox.resolve(in:)();
  swift_release();
  swift_release();
LABEL_12:
  swift_release();
  Color.Resolved.kitColor.getter();
  objc_opt_self();
  v10 = swift_dynamicCastObjCClassUnconditional();
LABEL_15:
  objc_msgSend(v7, sel_setTintColor_, v10);

}

void PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(uint64_t a1, int a2)
{
  char *v2;
  char *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t ObjectType;
  void *v16;
  id v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  int v26;
  objc_class *v27;
  char *v28;
  char *v29;
  char *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  _BYTE v38[4];
  int v39;
  objc_super v40;
  void *v41;

  v3 = v2;
  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = *MEMORY[0x1E0DEEDD8] & *(_QWORD *)v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  (*(void (**)(_BYTE *, char *, uint64_t, double))(v10 + 16))(&v38[-v11], &v3[*(_QWORD *)(v6 + 120)], AssociatedTypeWitness, v9);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  if (swift_dynamicCast())
  {
    v12 = v41;
    v13 = &v3[*(_QWORD *)((*v5 & *(_QWORD *)v3) + 0x80)];
    if (MEMORY[0x18D760234](v13)
      && (v14 = *((_QWORD *)v13 + 1),
          ObjectType = swift_getObjectType(),
          v16 = (void *)ViewRendererHost.uiViewController.getter(ObjectType, v14),
          swift_unknownObjectRelease(),
          v16))
    {
      v17 = objc_msgSend(v3, sel_traitCollection);
      v18 = &v3[*(_QWORD *)((*v5 & *(_QWORD *)v3) + 0x68)];
      swift_beginAccess();
      v19 = *v5 & *(_QWORD *)v3;
      v20 = *(_DWORD *)&v3[*(_QWORD *)(v19 + 0x70)];
      v21 = *(_QWORD *)v18;
      v22 = *((_QWORD *)v18 + 1);
      v23 = &v3[*(_QWORD *)(v19 + 144)];
      v24 = *(_QWORD *)v23;
      v25 = v23[8];
      v39 = a2;
      v26 = *((_DWORD *)v23 + 3);
      v27 = (objc_class *)type metadata accessor for EnvironmentWrapper();
      v28 = (char *)objc_allocWithZone(v27);
      v29 = &v28[OBJC_IVAR___SwiftUIEnvironmentWrapper_environment];
      *(_QWORD *)v29 = v21;
      *((_QWORD *)v29 + 1) = v22;
      *(_DWORD *)&v28[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase] = v20;
      v30 = &v28[OBJC_IVAR___SwiftUIEnvironmentWrapper_focusedValues];
      *(_QWORD *)v30 = v24;
      v30[8] = v25;
      *((_DWORD *)v30 + 3) = v26;
      v40.receiver = v28;
      v40.super_class = v27;
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      v31 = objc_msgSendSuper2(&v40, sel_init);
      MEMORY[0x1E0C80A78](v31, v32);
      *(_QWORD *)&v38[-32] = v21;
      *(_QWORD *)&v38[-24] = v22;
      v38[-16] = 0;
      v33 = (void *)UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();
      swift_release();
      swift_release();
      swift_release();

      v34 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v35 = swift_allocObject();
      *(_QWORD *)(v35 + 16) = v34;
      *(_QWORD *)(v35 + 24) = v33;
      *(_QWORD *)(v35 + 32) = v12;
      *(_BYTE *)(v35 + 40) = v39 & 1;
      swift_retain();
      v36 = v33;
      v37 = v12;
      static Update.enqueueAction(_:)();

      swift_release();
      swift_release();

    }
    else
    {

    }
  }
  else
  {
    objc_msgSend(v3, sel__noteTraitsDidChangeRecursively);
  }
}

uint64_t type metadata accessor for UIView.SafeAreaHelper()
{
  return objc_opt_self();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ())(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()(a1, *(uint64_t (**)(void))(v1 + 32));
}

{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 24);
  v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> (@out ())()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

void closure #3 in closure #1 in PlatformViewChild.updateValue()(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, uint64_t a8, char a9, int a10)
{
  int v12;
  uint64_t v13;
  uint64_t v14;

  if ((a1 & 1) != 0 || (a2 & 1) != 0)
  {
    v13 = a4;
    v14 = 0;
    v12 = a6;
    swift_retain();
    PlatformViewHost.updateEnvironment(_:viewPhase:)(&v13, &v12);
    swift_release();
  }
  if ((a7 & 1) != 0)
  {
    v13 = a8;
    LOBYTE(v14) = a9;
    HIDWORD(v14) = a10;
    swift_retain();
    PlatformViewHost.focusedValues.setter((uint64_t)&v13);
  }
}

BOOL PlatformViewHost.isPlatformFocusContainerHost.getter()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _BYTE v7[8];
  id v8;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  v2 = v0;
  swift_unknownObjectWeakInit();

  v4 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewHost<A>.UnarySubtreeSequence, v4);
  Sequence.first(where:)();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v7, v4);
  v5 = v8;
  if (v8)

  return v5 != 0;
}

uint64_t type metadata accessor for PlatformViewHost.UnarySubtreeSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformViewHost.UnarySubtreeSequence);
}

_BYTE *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance MenuOrderPreferenceKey(_BYTE *result, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  _BYTE *v2;
  char v3;
  uint64_t v4;

  v2 = result;
  v3 = *result;
  if (!*result)
  {
    result = a2(&v4);
    v3 = v4;
  }
  *v2 = v3;
  return result;
}

char *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance HasContextMenuKey(char *result, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  char *v2;
  char v3;
  uint64_t v4;

  v2 = result;
  if ((*result & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    result = (char *)a2(&v4);
    v3 = v4;
  }
  *v2 = v3;
  return result;
}

uint64_t destroy for AccessibilityOptionalRotorContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

uint64_t outlined destroy of ScrollEnvironmentProperties(uint64_t a1)
{
  destroy for _NavigationTransitionStyleOutputs(a1);
  return a1;
}

uint64_t destroy for _NavigationTransitionStyleOutputs(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
    return __swift_destroy_boxed_opaque_existential_1(result + 8);
  return result;
}

uint64_t outlined init with copy of ScrollEnvironmentProperties(int *a1, uint64_t a2)
{
  initializeWithCopy for ScrollEnvironmentProperties(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for ScrollEnvironmentProperties(uint64_t a1, int *a2)
{
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v5 = *a2;
  v4 = a2 + 2;
  *(_DWORD *)a1 = v5;
  v6 = a1 + 8;
  v7 = *((_QWORD *)a2 + 4);
  if (v7)
  {
    v8 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(v6, (uint64_t)v4);
    *(_DWORD *)(a1 + 48) = a2[12];
    *(_WORD *)(a1 + 52) = *((_WORD *)a2 + 26);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 14);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  }
  else
  {
    v9 = *((_OWORD *)v4 + 3);
    *(_OWORD *)(v6 + 32) = *((_OWORD *)v4 + 2);
    *(_OWORD *)(v6 + 48) = v9;
    *(_QWORD *)(v6 + 64) = *((_QWORD *)v4 + 8);
    v10 = *((_OWORD *)v4 + 1);
    *(_OWORD *)v6 = *(_OWORD *)v4;
    *(_OWORD *)(v6 + 16) = v10;
  }
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
  *(_BYTE *)(a1 + 82) = *((_BYTE *)a2 + 82);
  *(_DWORD *)(a1 + 84) = a2[21];
  *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 56);
  *(_WORD *)(a1 + 136) = *((_WORD *)a2 + 68);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 30);
  v11 = *((_OWORD *)a2 + 10);
  *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
  *(_OWORD *)(a1 + 160) = v11;
  v12 = *((_OWORD *)a2 + 12);
  *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
  *(_OWORD *)(a1 + 192) = v12;
  return a1;
}

uint64_t assignWithTake for BorderlessButtonStyleBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 25);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 25);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  v11 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 25) = v6;
  outlined consume of Environment<KeyboardShortcut?>.Content(v7, v8, v9, v11, v10);
  v12 = *(_BYTE *)(a2 + 40);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  v15 = *(_BYTE *)(a2 + 56);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v15;
  outlined consume of Environment<Bool>.Content(v16, v17);
  return a1;
}

uint64_t *assignWithTake for BorderlessButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 24);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t BorderlessButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v40 = a1;
  v43 = a2;
  v39 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v39, v3);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v7 = v6;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v38 - v13;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>();
  v41 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>();
  v44 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v42 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)v2;
  v23 = *(unsigned __int8 *)(v2 + 8);
  v24 = *(_QWORD *)(v2 + 16);
  v25 = *(_BYTE *)(v2 + 24);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v40, (uint64_t)v5, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v26 = v5[1];
  *v10 = *v5;
  v10[1] = v26;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v5[*(int *)(v39 + 24)], (uint64_t)&v10[*(int *)(v7 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v10, (uint64_t)v14);
  KeyPath = swift_getKeyPath();
  v28 = swift_getKeyPath();
  v29 = swift_getKeyPath();
  v30 = swift_getKeyPath();
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v14, (uint64_t)v18);
  v31 = &v18[*(int *)(v41 + 36)];
  *(_QWORD *)v31 = KeyPath;
  v31[8] = 0;
  *((_QWORD *)v31 + 2) = v28;
  v31[24] = 0;
  *((_QWORD *)v31 + 4) = v29;
  v31[40] = 0;
  *((_QWORD *)v31 + 6) = v30;
  v31[56] = 0;
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v14);
  v32 = swift_getKeyPath();
  v33 = swift_getKeyPath();
  v34 = swift_getKeyPath();
  v35 = v42;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, v42, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>);
  v36 = v35 + *(int *)(v44 + 36);
  *(_QWORD *)(v36 + 8) = 0;
  *(_QWORD *)(v36 + 16) = 0;
  *(_QWORD *)v36 = v32;
  *(_WORD *)(v36 + 24) = 0;
  *(_QWORD *)(v36 + 32) = v33;
  *(_BYTE *)(v36 + 40) = 0;
  *(_QWORD *)(v36 + 48) = v34;
  *(_BYTE *)(v36 + 56) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>);
  outlined copy of Environment<Color?>.Content(v22, v23);
  outlined copy of Environment<Bool>.Content(v24, v25);
  outlined copy of Environment<Bool>.Content(v24, v25);
  specialized Environment.wrappedValue.getter(v24, v25);
  outlined consume of Environment<Bool>.Content(v24, v25);
  outlined copy of Environment<Color?>.Content(v22, v23);
  specialized Environment.wrappedValue.getter(v22, v23);
  outlined consume of Environment<Color?>.Content(v22, v23);
  outlined consume of Environment<Color?>.Content(v22, v23);
  outlined consume of Environment<Bool>.Content(v24, v25);
  static Text.LineStyle.Pattern.solid.getter();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<BorderlessButtonStyleBase> and conformance ButtonStyleContainerModifier<A>);
  View.underline(_:pattern:color:)();
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v35, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<BorderlessButtonStyleBase>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase, (uint64_t)&type metadata for BorderlessButtonStyleBase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>);
  }
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.LineStyle?>, &lazy cache variable for type metadata for Text.LineStyle?, MEMORY[0x1E0CE6C50]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>);
  }
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, char a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, _QWORD))
{
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  swift_retain();
  if ((a2 & 1) == 0)
  {
    v10 = static os_log_type_t.fault.getter();
    v11 = static Log.runtimeIssuesLog.getter();
    v12 = v10;
    if (os_log_type_enabled(v11, v10))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v16 = v14;
      *(_DWORD *)v13 = 136315138;
      v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v14, -1, -1);
      MEMORY[0x18D760108](v13, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    a5(a1, 0);
    swift_release();
    swift_release();
    return v17;
  }
  return a1;
}

{
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  unsigned __int8 v15;
  uint64_t v16;

  if ((a2 & 1) == 0)
  {
    swift_retain();
    v9 = static os_log_type_t.fault.getter();
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v16 = v13;
      *(_DWORD *)v12 = 136315138;
      v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v13, -1, -1);
      MEMORY[0x18D760108](v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    a5(a1, 0);
    swift_release();
    swift_release();
    return v15;
  }
  return a1;
}

uint64_t DividerStyleModifier.styleBody(configuration:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v20[15];
  char v21;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = &v20[-v15];
  v21 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 24))(&v21, v6, v5, v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v16, AssociatedTypeWitness);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AccessibilityLargeContentViewBehavior(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void List.body.getter(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t refreshed;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  ValueMetadata *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD v80[2];
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD v83[2];
  _QWORD v84[3];

  v70 = a3;
  v3 = a1[2];
  v4 = a1[4];
  v73 = type metadata accessor for NavigableListModifier(0, v3, v4, a2);
  v68 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73, v6);
  v66 = (char *)v44 - v7;
  v71 = v4;
  v72 = v3;
  v9 = type metadata accessor for SelectionManagerBox(255, v3, v4, v8);
  v48 = v9;
  v67 = type metadata accessor for Binding();
  v75 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v75, v10);
  v69 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v74 = (char *)v44 - v15;
  v65 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v9, v14);
  v17 = type metadata accessor for _ListStyleConfiguration(0, v9, v65, v16);
  MEMORY[0x1E0C80A78](v17, v18);
  v63 = (char *)v44 - v19;
  v21 = type metadata accessor for ResolvedList(0, v3, v4, v20);
  v64 = *(_QWORD *)(v21 - 8);
  v59 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TextFieldLabelDisplayModeModifier<AutomaticTextFieldLabelDisplayMode>, (uint64_t)&type metadata for AutomaticTextFieldLabelDisplayMode, (uint64_t)&protocol witness table for AutomaticTextFieldLabelDisplayMode, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextFieldLabelDisplayModeModifier);
  v23 = type metadata accessor for ModifiedContent();
  v62 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v58 = (char *)v44 - v25;
  v55 = v23;
  v26 = type metadata accessor for ModifiedContent();
  v27 = *(_QWORD *)(v26 - 8);
  v56 = v26;
  v61 = v27;
  v29 = MEMORY[0x1E0C80A78](v26, v28);
  v57 = (char *)v44 - v30;
  v84[0] = &protocol witness table for ResolvedList<A>;
  v84[1] = &protocol witness table for TextFieldLabelDisplayModeModifier<A>;
  v31 = MEMORY[0x1E0CE2E70];
  v53 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v23, v84, v29);
  v83[0] = v53;
  v83[1] = &protocol witness table for Fix_53164375;
  v54 = MEMORY[0x18D75FFDC](v31, v26, v83);
  v76 = (ValueMetadata *)v26;
  v77 = v54;
  v32 = MEMORY[0x18D75FF88](0, &v76, MEMORY[0x1E0CE6F48], 0);
  v60 = *(_QWORD *)(v32 - 8);
  v44[2] = v32;
  MEMORY[0x1E0C80A78](v32, v33);
  v51 = (char *)v44 - v34;
  v52 = a1;
  v50 = a1[3];
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>);
  v35 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier>);
  v36 = type metadata accessor for ModifiedContent();
  v37 = a1[5];
  v49 = v37;
  refreshed = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v82[0] = v37;
  v82[1] = refreshed;
  v39 = MEMORY[0x18D75FFDC](v31, v35, v82);
  v40 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v81[0] = v39;
  v81[1] = v40;
  v41 = MEMORY[0x18D75FFDC](v31, v36, v81);
  v76 = (ValueMetadata *)v36;
  v77 = v41;
  MEMORY[0x18D75FF88](255, &v76, MEMORY[0x1E0CE6EC0], 0);
  v42 = type metadata accessor for ModifiedContent();
  v43 = lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent();
  v47 = v43;
  v76 = (ValueMetadata *)v36;
  v77 = v41;
  v80[0] = swift_getOpaqueTypeConformance2();
  v80[1] = &protocol witness table for ResetContentMarginModifier;
  v46 = v42;
  v45 = MEMORY[0x18D75FFDC](v31, v42, v80);
  v76 = &type metadata for ListStyleContent;
  v77 = v42;
  v78 = v43;
  v79 = v45;
  type metadata accessor for StaticSourceWriter();
}

void sub_186ECA50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  void (*v36)(uint64_t, _QWORD, _QWORD, double);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v12 = type metadata accessor for ModifiedContent();
  v13 = *(_QWORD *)(v12 - 8);
  v9[7] = v12;
  v9[14] = v13;
  MEMORY[0x1E0C80A78](v12, v12);
  v9[1] = (char *)&a9 - v14;
  v15 = type metadata accessor for ModifiedContent();
  v16 = *(_QWORD *)(v15 - 8);
  v9[13] = v15;
  v9[16] = v16;
  MEMORY[0x1E0C80A78](v15, v15);
  v9[6] = (char *)&a9 - v17;
  v18 = type metadata accessor for ModifiedContent();
  v9[17] = *(_QWORD *)(v18 - 8);
  v9[10] = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v9[9] = (char *)&a9 - v20;
  type metadata accessor for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<ProvidesContextMenuInteraction>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction, (uint64_t)&type metadata for ProvidesContextMenuInteraction);
  v21 = type metadata accessor for ModifiedContent();
  v9[18] = *(_QWORD *)(v21 - 8);
  v9[11] = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v9[8] = (char *)&a9 - v23;
  type metadata accessor for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ProvidesEditMenuInteraction>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction, (uint64_t)&type metadata for ProvidesEditMenuInteraction);
  v24 = type metadata accessor for ModifiedContent();
  v9[36] = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v9[53] = (char *)&a9 - v26;
  v27 = type metadata accessor for ModifiedContent();
  v9[39] = v24;
  v28 = type metadata accessor for ModifiedContent();
  v9[33] = v27;
  v9[34] = v28;
  v29 = type metadata accessor for _ConditionalContent();
  v9[41] = *(_QWORD *)(v29 - 8);
  v9[42] = v29;
  MEMORY[0x1E0C80A78](v29, v30);
  v9[37] = (char *)&a9 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32, v33);
  v9[40] = (char *)&a9 - v35;
  *v9 = v11;
  v36 = *(void (**)(uint64_t, _QWORD, _QWORD, double))(v11 + 16);
  v9[51] = v36;
  v37 = v9[54];
  v36(v37, v9[43], v9[55], v34);
  v38 = v9[32];
  _ListStyleConfiguration.init(selection:)(v37, v38);
  v40 = ResolvedList.init(configuration:)(v38, v9[50], v9[49], v39, v10);
  View.textFieldLabelDisplayMode<A>(_:)(v40, v9[28], (uint64_t)&type metadata for AutomaticTextFieldLabelDisplayMode, (uint64_t)&protocol witness table for ResolvedList<A>, (uint64_t)&protocol witness table for AutomaticTextFieldLabelDisplayMode);
}

void sub_186ECA7BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v0[35] + 8))(v1, v6);
  v9 = v0[26];
  v10 = v0[24];
  MEMORY[0x18D75B4AC](v8, v10, &unk_1E1AB2228, v0[22]);
  (*(void (**)(uint64_t, uint64_t))(v0[31] + 8))(v4, v10);
  v11 = v0[25];
  v12 = v0[23];
  View.configuresScrollPhaseState()();
  (*(void (**)(uint64_t, uint64_t))(v0[30] + 8))(v9, v11);
  v13 = v0[19];
  v0[58] = v5;
  v0[59] = v13;
  v14 = v0[15];
  v0[60] = v2;
  v0[61] = v14;
  v0[62] = v3;
  *(_QWORD *)(v7 - 200) = v11;
  *(_QWORD *)(v7 - 192) = v12;
  swift_getOpaqueTypeConformance2();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ListStyleContent, (uint64_t)partial apply for closure #1 in List.body.getter);
}

void sub_186ECA8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 232) + 8))(v1, v3);
  v9 = Namespace.wrappedValue.getter();
  v10 = *(_QWORD *)(v0 + 432);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v0 + 408))(v10, v7, *(_QWORD *)(v0 + 440));
  v11 = List.stateHost.getter();
  v12 = *(_QWORD **)(v0 + 352);
  NavigableListModifier.init(id:selection:stateHost:)(v9, v10, v11, v6, v2, v12);
  *(_QWORD *)(v8 - 216) = v5;
  *(_QWORD *)(v8 - 208) = &protocol witness table for StaticSourceWriter<A, B>;
  v13 = MEMORY[0x1E0CE2E70];
  v14 = *(_QWORD *)(v0 + 56);
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v14, v8 - 216);
  v16 = *(_QWORD *)(v0 + 416);
  MEMORY[0x18D75B4AC](v12, v14, v16, v15);
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v0 + 368) + 8))(v12, v16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 112) + 8))(v4, v14);
  *(_QWORD *)(v8 - 232) = v15;
  *(_QWORD *)(v8 - 224) = &protocol witness table for NavigableListModifier<A>;
  MEMORY[0x18D75FFDC](v13, *(_QWORD *)(v0 + 104), v8 - 232);
  View.configuredForLazyContainer()();
}

uint64_t sub_186ECA9D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 128) + 8))(v6, v2);
  *(_QWORD *)(v8 - 248) = v3;
  *(_QWORD *)(v8 - 240) = &protocol witness table for LazyContainerModifier;
  v9 = v1;
  v10 = *(_QWORD *)(v0 + 80);
  v11 = MEMORY[0x18D75FFDC](v1, v10, v8 - 248);
  v12 = lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
  v13 = *(_QWORD *)(v0 + 64);
  View.input<A>(_:)((uint64_t)&type metadata for ProvidesContextMenuInteraction, v10, (uint64_t)&type metadata for ProvidesContextMenuInteraction, v11, v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 136) + 8))(v5, v10);
  *(_QWORD *)(v0 + 568) = v11;
  *(_QWORD *)(v0 + 576) = &protocol witness table for ViewInputFlagModifier<A>;
  v14 = v9;
  v15 = *(_QWORD *)(v0 + 88);
  v16 = MEMORY[0x18D75FFDC](v14, v15, v0 + 568);
  v17 = lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction();
  View.input<A>(_:)((uint64_t)&type metadata for ProvidesEditMenuInteraction, v15, (uint64_t)&type metadata for ProvidesEditMenuInteraction, v16, v17);
  v18 = *(_QWORD *)(v0 + 440);
  v19 = v13;
  v20 = *(_QWORD *)(v0 + 376);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 144) + 8))(v19, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408))(v20, v7, v18);
  v21 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v20, 1, v4) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 8))(v20, v18);
    v22 = 0;
    v23 = 0;
    v24 = 0;
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 392);
    v25 = *(_QWORD *)(v0 + 400);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v25);
    v28 = type metadata accessor for ToAnyListSelection(0, v25, v26, v27);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToAnyListSelection<A>, v28);
    Binding.projecting<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v4);
    v22 = *(_QWORD *)(v8 - 200);
    v23 = *(_QWORD *)(v8 - 192);
    v24 = *(_QWORD *)(v8 - 184);
  }
  *(_QWORD *)(v8 - 200) = v22;
  *(_QWORD *)(v8 - 192) = v23;
  *(_QWORD *)(v8 - 184) = v24;
  *(_QWORD *)(v0 + 552) = v16;
  *(_QWORD *)(v0 + 560) = &protocol witness table for ViewInputFlagModifier<A>;
  v29 = MEMORY[0x1E0CE2E70];
  v30 = *(_QWORD *)(v0 + 312);
  v31 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v30, v0 + 552);
  v32 = *(_QWORD *)(v0 + 296);
  v33 = *(_QWORD *)(v0 + 424);
  View.optionalSelectionContainer<A>(_:)(v8 - 200, v30, (uint64_t)&type metadata for AnyListSelection, v31, (uint64_t)&protocol witness table for AnyListSelection, v32);
  outlined consume of Binding<Set<A>>?<A, B>(v22, v23, v24, (void (*)(uint64_t))MEMORY[0x1E0DEEE30]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 288) + 8))(v33, v30);
  v34 = lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier();
  *(_QWORD *)(v0 + 536) = v31;
  *(_QWORD *)(v0 + 544) = v34;
  v35 = MEMORY[0x18D75FFDC](v29, *(_QWORD *)(v0 + 264), v0 + 536);
  v36 = MEMORY[0x1E0CE1E88];
  *(_QWORD *)(v0 + 520) = v31;
  *(_QWORD *)(v0 + 528) = v36;
  v37 = MEMORY[0x18D75FFDC](v29, *(_QWORD *)(v0 + 272), v0 + 520);
  *(_QWORD *)(v0 + 504) = v35;
  *(_QWORD *)(v0 + 512) = v37;
  v38 = *(_QWORD *)(v0 + 336);
  v39 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v38, v0 + 504);
  v40 = *(_QWORD *)(v0 + 320);
  static ViewBuilder.buildExpression<A>(_:)(v32, v38, v39);
  v41 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 328) + 8);
  v41(v32, v38);
  static ViewBuilder.buildBlock<A>(_:)(v40, v38, *(_QWORD *)(v0 + 384));
  return ((uint64_t (*)(uint64_t, uint64_t))v41)(v40, v38);
}

uint64_t View.input<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ViewInputFlagModifier(0, v12, v14, v13);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v22 - v19;
  (*(void (**)(uint64_t, uint64_t, double))(a5 + 56))(a3, a5, v18);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v20, v11, a3);
  MEMORY[0x18D75B4AC](v20, a2, v15, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v15);
}

void View.textFieldLabelDisplayMode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for TextFieldLabelDisplayModeModifier(0, a3, a5, a4);
  JUMPOUT(0x18D75B4ACLL);
}

void type metadata accessor for List()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for NavigableListModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigableListModifier);
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t refreshed;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    refreshed = type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>);
    v2[0] = lazy protocol witness table accessor for type RefreshScopeModifier and conformance RefreshScopeModifier();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, refreshed, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t View.resetContentMargin(placements:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v5;
  uint64_t v6;
  char *v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v14;
    v8 = (char *)(a1 + 32);
    v9 = *(_QWORD *)(v14 + 16);
    do
    {
      v11 = *v8++;
      v10 = v11;
      v14 = v6;
      v12 = *(_QWORD *)(v6 + 24);
      if (v9 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v9 + 1, 1);
        v6 = v14;
      }
      *(_QWORD *)(v6 + 16) = v9 + 1;
      *(_BYTE *)(v6 + v9++ + 32) = v10;
      --v5;
    }
    while (v5);
  }
  v14 = v6;
  MEMORY[0x18D75B4AC](&v14, a2, &type metadata for ResetContentMarginModifier, a3);
  return swift_bridgeObjectRelease();
}

void View.refreshScope<A>(if:)()
{
  uint64_t v0;
  uint64_t v1;

  lazy protocol witness table accessor for type RefreshScopeModifier and conformance RefreshScopeModifier();
  StaticIf<>.init<>(_:then:)(v0, (uint64_t)&type metadata for RefreshScopeModifier, v1);
  type metadata accessor for StaticIf();
}

uint64_t sub_186ECB048(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return MEMORY[0x18D75B4AC](a1, v2, a1, v1);
}

uint64_t StaticIf<>.init<>(_:then:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t List.stateHost.getter()
{
  type metadata accessor for NavigationStateHost();
  lazy protocol witness table accessor for type NavigationStateHost and conformance NavigationStateHost();
  return StateObject.wrappedValue.getter();
}

Swift::Void __swiftcall UpdateCollectionViewListCoordinator.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t Value;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[9];
  uint64_t AssociatedConformanceWitness;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[40];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(v0 + 16);
  v48 = *(_QWORD *)(v0 + 24);
  v59 = v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v45 = AssociatedTypeWitness;
  v4 = type metadata accessor for CollectionViewListDataSource(255, AssociatedTypeWitness, AssociatedConformanceWitness, v3);
  v5 = type metadata accessor for Optional();
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v43[5] = (char *)v43 - v7;
  v43[3] = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v43[2] = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Binding();
  v43[6] = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v11);
  v43[1] = (char *)v43 - v12;
  v43[7] = v13;
  v14 = type metadata accessor for Optional();
  v54 = *(_QWORD *)(v14 - 8);
  v55 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v49 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v43[4] = (char *)v43 - v19;
  v57 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  MEMORY[0x1E0C80A78](v22, v23);
  v46 = (char *)v43 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v56 = (char *)v43 - v27;
  v28 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v30);
  v43[8] = (char *)v43 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)v43 - v34;
  type metadata accessor for ViewList();
  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)v64);
  v37 = AGGraphGetValue();
  v47 = v29;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v50 = v35;
  v51 = v28;
  v39 = v28;
  v40 = v1;
  v41 = v48;
  v38(v35, v37, v39);
  v42 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewListDataSource<A>, v4);
  v58 = v4;
  v60 = v4;
  v61 = v40;
  v62 = v42;
  v63 = v41;
  type metadata accessor for UICollectionViewListCoordinator();
}

id *sub_186ECB3F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(uint64_t, _QWORD, _QWORD);
  char v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id *result;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Value;
  uint64_t v30;
  char v31;
  double v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t OutputValue;
  uint64_t v38;
  char v39;
  uint64_t *v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  int v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  char *v73;
  _QWORD **v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t, _QWORD);
  _QWORD *v79;
  _QWORD **v80;
  _QWORD *v81;
  char v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD **v86;
  _QWORD *v87;
  uint64_t v88;
  char v89;
  char v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  double v96;
  char v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  double v103;
  double v104;
  uint64_t v105;
  double v106;
  BOOL v107;
  double v108;
  _QWORD *v109;
  uint64_t v110;
  char v111;
  char v112;
  char *v113;
  _QWORD **v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD **v120;
  _QWORD *v121;
  _QWORD **v122;
  _QWORD *v123;
  void *v124;
  void *v125;
  id v126;
  id v127;
  uint64_t v128;
  char *v129;

  *(_QWORD *)(v1 + 192) = a1;
  if (!AGGraphGetOutputValue() || (v6 & 1) != 0 || (v8 & 1) != 0)
  {
    outlined init with copy of TableColumnList(v9 - 160, v1 + 272);
    v10 = v2;
    v20 = *(unsigned int *)v2;
    v21 = *(id *)((char *)v10 + *(int *)(*(_QWORD *)(v1 + 200) + 104));
    *(_BYTE *)(v1 + 224) = 0;
    ListSectionInfo.init(list:listAttribute:contentSubgraph:)((_QWORD *)(v1 + 272), v20, v21, (_OWORD *)(v9 - 240));
    v22 = *(_QWORD *)(v1 + 32);
    UpdateCollectionViewListCoordinator.selection.getter(v22);
    v24 = *(_QWORD *)(v1 + 48);
    v23 = *(_QWORD *)(v1 + 56);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 152) + 8))(v22, *(_QWORD *)(v1 + 160));
      v25 = 0;
    }
    else
    {
      v26 = *(_QWORD *)(v1 + 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v26, v22, v23);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 152) + 8))(v22, *(_QWORD *)(v1 + 160));
      v27 = *(_QWORD *)(v1 + 16);
      MEMORY[0x18D75B9C8](v23);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v23);
      v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 64))(v4, v5);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 24) + 8))(v27, v4);
    }
    outlined init with copy of ListSectionInfo(v9 - 240, v1 + 272);
    v28 = *(_QWORD *)(v1 + 64);
    v7(v28, *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128));
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    Value = AGGraphGetValue();
    v30 = *(_QWORD *)Value;
    v31 = *(_BYTE *)(Value + 8);
    v32 = *(double *)AGGraphGetValue();
    UpdateCollectionViewListCoordinator.environment.getter((_QWORD *)(v1 + 224));
    *(_OWORD *)(v1 + 256) = *(_OWORD *)(v1 + 224);
    v33 = *(_OWORD **)(v1 + 88);
    CollectionViewListDataSource.init(sectionInfo:style:allowsMultipleSelection:minRowHeight:minHeaderHeight:environment:)((_OWORD *)(v1 + 272), v28, v25 & 1, v30, v31, (uint64_t *)(v1 + 256), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 72), v33, v32);
    v34 = *(_QWORD *)(v1 + 168);
    v35 = *(_QWORD *)(v1 + 176);
    v36 = *(_QWORD *)(v1 + 184);
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v35 + 16))(v34, v33, v36);
    OutputValue = AGGraphGetOutputValue();
    *(_DWORD *)(v1 + 104) = OutputValue != 0;
    if (!OutputValue)
    {
      v38 = *(_QWORD *)(v1 + 112);
      UpdateCollectionViewListCoordinator.selection.getter(v38);
      UpdateCollectionViewListCoordinator.editMode.getter(v1 + 272);
      v39 = *(_BYTE *)(v1 + 288);
      *(_OWORD *)(v1 + 224) = *(_OWORD *)(v1 + 272);
      *(_BYTE *)(v1 + 240) = v39;
      specialized UICollectionViewListCoordinator.__allocating_init(dataSource:selection:editMode:transaction:)(v34, v38, (__int128 *)(v1 + 224), 1);
    }
    (*(void (**)(_OWORD *, uint64_t))(v35 + 8))(v33, v36);
    outlined destroy of ListSectionInfo(v9 - 240);
LABEL_12:
    v40 = v10;
    v41 = (_QWORD *)AGGraphGetOutputValue();
    if (v41)
    {
      v42 = (unsigned __int8 *)(*v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)*v41) + 0x108));
      v43 = *v42;
      v44 = *((_QWORD *)v42 + 1);
      v45 = v42[16];
      v46 = *((_QWORD *)v42 + 3);
      v47 = v42[32];
      v48 = *((_QWORD *)v42 + 5);
      v49 = v42[48];
      v50 = *((_QWORD *)v42 + 7);
      *(_DWORD *)(v1 + 88) = v42[64];
      v51 = (unsigned __int8 *)AGGraphGetValue();
      if (v43 != *v51)
        goto LABEL_16;
      v52 = v51[64];
      v53 = *((_QWORD *)v51 + 7);
      v54 = v51[48];
      v55 = *((_QWORD *)v51 + 5);
      v56 = v51[32];
      v57 = *((_QWORD *)v51 + 3);
      v58 = v51[16];
      v59 = *((_QWORD *)v51 + 1);
      v60 = (_QWORD *)(v9 - 240);
      *v60 = v44;
      *(_BYTE *)(v9 - 232) = v45;
      v60[2] = v46;
      *(_BYTE *)(v9 - 216) = v47;
      v60[4] = v48;
      *(_BYTE *)(v9 - 200) = v49;
      v60[6] = v50;
      *(_BYTE *)(v9 - 184) = *(_DWORD *)(v1 + 88);
      *(_QWORD *)(v1 + 272) = v59;
      *(_BYTE *)(v1 + 280) = v58;
      *(_QWORD *)(v1 + 288) = v57;
      *(_BYTE *)(v1 + 296) = v56;
      *(_QWORD *)(v1 + 304) = v55;
      *(_BYTE *)(v1 + 312) = v54;
      *(_QWORD *)(v1 + 320) = v53;
      *(_BYTE *)(v1 + 328) = v52;
      if ((MEMORY[0x18D7593E8](v9 - 240, v1 + 272) & 1) != 0)
      {
        v61 = 0;
        v62 = (uint64_t *)MEMORY[0x1E0DEEDD8];
      }
      else
      {
LABEL_16:
        result = (id *)AGGraphGetOutputValue();
        if (!result)
        {
          __break(1u);
          goto LABEL_74;
        }
        v63 = *result;
        v64 = AGGraphGetValue();
        v65 = *(_QWORD *)(v64 + 8);
        v66 = *(_BYTE *)(v64 + 16);
        v67 = *(_QWORD *)(v64 + 24);
        v68 = *(_BYTE *)(v64 + 32);
        v69 = *(_QWORD *)(v64 + 40);
        v70 = *(_BYTE *)(v64 + 48);
        v71 = *(_QWORD *)(v64 + 56);
        v72 = *(_BYTE *)(v64 + 64);
        v62 = (uint64_t *)MEMORY[0x1E0DEEDD8];
        v73 = (char *)v63 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v63) + 0x108);
        *v73 = *(_BYTE *)v64;
        *((_QWORD *)v73 + 1) = v65;
        v73[16] = v66;
        *((_QWORD *)v73 + 3) = v67;
        v73[32] = v68;
        *((_QWORD *)v73 + 5) = v69;
        v73[48] = v70;
        *((_QWORD *)v73 + 7) = v71;
        v73[64] = v72;
        v61 = 1;
      }
      v74 = (_QWORD **)AGGraphGetOutputValue();
      if (v74)
      {
        v75 = *v74;
        v76 = *(_QWORD *)(v1 + 112);
        UpdateCollectionViewListCoordinator.selection.getter(v76);
        v77 = (char *)v75 + *(_QWORD *)((*v62 & *v75) + 0x100);
        swift_beginAccess();
        v78 = *(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v1 + 152) + 40);
        v79 = v75;
        v78(v77, v76, *(_QWORD *)(v1 + 160));
        swift_endAccess();

        v80 = (_QWORD **)AGGraphGetOutputValue();
        if (v80)
        {
          v81 = *v80;
          UpdateCollectionViewListCoordinator.editMode.getter(v9 - 240);
          v82 = *(_BYTE *)(v9 - 224);
          v83 = (char *)v81 + *(_QWORD *)((*v62 & *v81) + 0x110);
          v84 = *(_QWORD *)v83;
          v85 = *((_QWORD *)v83 + 1);
          *(_OWORD *)v83 = *(_OWORD *)(v9 - 240);
          v83[16] = v82;
          outlined consume of Binding<NavigationSplitViewColumn>?(v84, v85);
          v86 = (_QWORD **)AGGraphGetOutputValue();
          if (v86)
          {
            v87 = *v86;
            v88 = AGGraphGetValue();
            v89 = *(_BYTE *)(v88 + 8);
            v90 = *(_BYTE *)(v88 + 9);
            v91 = (char *)v87 + *(_QWORD *)((*v62 & *v87) + 0xF0);
            *(_QWORD *)v91 = *(_QWORD *)v88;
            v91[8] = v89;
            v91[9] = v90;
            v92 = (_QWORD *)AGGraphGetOutputValue();
            if (v92)
            {
              v93 = *v92 + *(_QWORD *)((*v62 & *(_QWORD *)*v92) + 0x138);
              v94 = *(_BYTE *)(v93 + 8);
              type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
              v95 = AGGraphGetValue();
              v96 = *(double *)v95;
              v97 = *(_BYTE *)(v95 + 8);
              if ((v94 & 1) != 0)
              {
                if ((*(_BYTE *)(v95 + 8) & 1) != 0)
                  goto LABEL_30;
              }
              else
              {
                if (*(double *)v93 == v96)
                  v98 = *(_BYTE *)(v95 + 8);
                else
                  v98 = 1;
                if ((v98 & 1) == 0)
                {
LABEL_30:
                  v99 = (_QWORD *)AGGraphGetOutputValue();
                  if (v99)
                  {
                    v100 = *v62;
                    v101 = *v99 + *(_QWORD *)((*v62 & *(_QWORD *)*v99) + 0x130);
                    if ((*(_BYTE *)(v101 + 9) & 1) != 0)
                    {
                      v102 = 1;
                      v103 = 0.0;
                    }
                    else
                    {
                      v104 = *(double *)v101;
                      if ((*(_BYTE *)(v101 + 8) & 1) != 0)
                      {
                        v102 = *(_QWORD *)&v104 == 0;
                        if (v104 == 0.0)
                          v103 = 0.0;
                        else
                          v103 = 12.0;
                      }
                      else
                      {
                        v102 = 0;
                        v103 = *(double *)v101;
                      }
                    }
                    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for ListSectionSpacing?, (uint64_t)&type metadata for ListSectionSpacing, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                    v105 = AGGraphGetValue();
                    if ((*(_BYTE *)(v105 + 9) & 1) != 0)
                    {
                      if (v102)
                        goto LABEL_53;
                      goto LABEL_51;
                    }
                    v106 = *(double *)v105;
                    if ((*(_BYTE *)(v105 + 8) & 1) != 0)
                    {
                      v107 = *(_QWORD *)&v106 == 0;
                      v108 = 12.0;
                      if (v106 == 0.0)
                        v108 = 0.0;
                      if (v102)
                      {
                        if (v106 != 0.0)
                          goto LABEL_51;
                        goto LABEL_53;
                      }
                    }
                    else
                    {
                      if (v102)
                        goto LABEL_51;
                      v107 = 0;
                      v108 = *(double *)v105;
                    }
                    if (v107 || v103 != v108)
                    {
LABEL_51:
                      result = (id *)AGGraphGetOutputValue();
                      if (result)
                      {
                        v109 = *result;
                        v110 = AGGraphGetValue();
                        v111 = *(_BYTE *)(v110 + 8);
                        v112 = *(_BYTE *)(v110 + 9);
                        v113 = (char *)v109 + *(_QWORD *)((*v109 & v100) + 0x130);
                        *(_QWORD *)v113 = *(_QWORD *)v110;
                        v113[8] = v111;
                        v113[9] = v112;
                        v61 = 1;
                        goto LABEL_53;
                      }
LABEL_74:
                      __break(1u);
LABEL_75:
                      __break(1u);
                      goto LABEL_76;
                    }
LABEL_53:
                    v114 = (_QWORD **)AGGraphGetOutputValue();
                    if (v114)
                    {
                      v115 = *v114;
                      *((_BYTE *)v115 + *(_QWORD *)((*v62 & *v115) + 0x120)) = *(_BYTE *)AGGraphGetValue();
                      v116 = AGGraphGetOutputValue();
                      v118 = *(_QWORD *)(v1 + 176);
                      v117 = *(_QWORD *)(v1 + 184);
                      v119 = *(_QWORD *)(v1 + 168);
                      if (v116)
                      {
                        UICollectionViewListCoordinatorBase.selectionStorage.setter(v40[6], v40[7], v40[8], v40[9]);
                        v120 = (_QWORD **)AGGraphGetOutputValue();
                        if (v120)
                        {
                          v121 = *v120;
                          *((_BYTE *)v121 + *(_QWORD *)((*v62 & *v121) + 0x140)) = *(_BYTE *)AGGraphGetValue();
                          v122 = (_QWORD **)AGGraphGetOutputValue();
                          if (v122)
                          {
                            v123 = *v122;
                            *((_BYTE *)v123 + *(_QWORD *)((*v62 & *v123) + 0x148)) = *(_BYTE *)AGGraphGetValue();
                            v124 = (void *)MEMORY[0x18D760234](v40 + 12);
                            if (!v124)
                            {
LABEL_62:
                              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 96) + 8))(*(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128));
                              __swift_destroy_boxed_opaque_existential_1(v9 - 160);
                              v129 = (char *)v40 + *(int *)(*(_QWORD *)(v1 + 200) + 100);
                              (*(void (**)(char *, _QWORD))(*(_QWORD *)(v1 + 136) + 8))(v129, *(_QWORD *)(v1 + 144));
                              (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v129, v119, v117);
                              return (id *)(*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v129, 0, 1, v117);
                            }
                            v125 = v124;
                            if (v61)
                            {
                              v126 = objc_msgSend(v124, sel_collectionViewLayout);
                              objc_msgSend(v126, sel_invalidateLayout);

                            }
                            result = (id *)AGGraphGetOutputValue();
                            if (result)
                            {
                              v127 = *result;
                              AGGraphClearUpdate();
                              v128 = *(_QWORD *)AGGraphGetValue();
                              swift_retain();
                              AGGraphSetUpdate();
                              UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)((uint64_t)v125, v119, v128, *(_DWORD *)(v1 + 104));

                              swift_release();
                              goto LABEL_62;
                            }
                            goto LABEL_75;
                          }
LABEL_72:
                          __break(1u);
                        }
LABEL_71:
                        __break(1u);
                        goto LABEL_72;
                      }
LABEL_70:
                      __break(1u);
                      goto LABEL_71;
                    }
LABEL_69:
                    __break(1u);
                    goto LABEL_70;
                  }
LABEL_68:
                  __break(1u);
                  goto LABEL_69;
                }
              }
              *(double *)v93 = v96;
              *(_BYTE *)(v93 + 8) = v97;
              v61 = 1;
              goto LABEL_30;
            }
LABEL_67:
            __break(1u);
            goto LABEL_68;
          }
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_65;
  }
  v10 = v2;
  v11 = (char *)v2 + *(int *)(*(_QWORD *)(v1 + 200) + 100);
  v12 = *(_QWORD *)(v1 + 40);
  (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)(v1 + 136) + 16))(v12, v11, *(_QWORD *)(v1 + 144));
  v13 = *(_QWORD *)(v1 + 176);
  v14 = *(_QWORD *)(v1 + 184);
  result = (id *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v12, 1, v14);
  if ((_DWORD)result != 1)
  {
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
    v16(v3, v12, v14);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v17 = AGGraphGetValue();
    v18 = *(_BYTE *)(v17 + 8);
    v19 = v3 + *(int *)(v14 + 52);
    *(_QWORD *)v19 = *(_QWORD *)v17;
    *(_BYTE *)(v19 + 8) = v18;
    *(_QWORD *)(v3 + *(int *)(v14 + 56)) = *(_QWORD *)AGGraphGetValue();
    v16(*(_QWORD *)(v1 + 168), v3, v14);
    *(_DWORD *)(v1 + 104) = 0;
    goto LABEL_12;
  }
LABEL_76:
  __break(1u);
  return result;
}

void type metadata accessor for UICollectionViewListCoordinator()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t UpdateCollectionViewListCoordinator.selection.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  type metadata accessor for Binding();
  v2 = type metadata accessor for Optional();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t UpdateCollectionViewListCoordinator.editMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for Binding<EditMode>?();
  Value = AGGraphGetValue();
  v4 = *(_QWORD *)Value;
  v3 = *(_QWORD *)(Value + 8);
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(Value + 16);
  return outlined copy of Binding<NavigationSplitViewColumn>?(v4, v3);
}

void type metadata accessor for Binding<EditMode>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<EditMode>?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>?);
  }
}

uint64_t UICollectionViewListCoordinatorBase.selectionStorage.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)((char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x118));
  *v5 = result;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
  return result;
}

uint64_t type metadata accessor for TextFieldLabelDisplayModeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextFieldLabelDisplayModeModifier);
}

void *initializeWithCopy for AccessibilityOptionalRotorContent(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void storeEnumTagSinglePayload for BorderlessButtonLabelShapeStyle(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 3) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void *assignWithCopy for AccessibilityOptionalRotorContent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for BorderlessButtonLabelShapeStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 3) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 3) & ~v7);
      v15 = *(unsigned __int8 *)(a1 + 2);
      v16 = v15 >= 2;
      v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16)
        return (v17 + 1);
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186ECC474 + 4 * byte_187C041D0[(v9 - 1)]))();
}

void UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD v57[2];
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t AssociatedTypeWitness;
  _QWORD *v73;
  int v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;

  v79 = a4;
  v90 = a3;
  v96 = a2;
  v94 = a1;
  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v66 = type metadata accessor for DispatchWorkItemFlags();
  v65 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66, v6);
  v64 = (char *)v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for DispatchQoS();
  v62 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63, v8);
  v61 = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78, v10);
  v76 = (char *)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v75 = (char *)v57 - v14;
  v80 = v5[94];
  v15 = *(_QWORD *)(v80 + 8);
  v16 = *(_QWORD *)(v15 + 8);
  v17 = v5[92];
  swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v71 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v19);
  v70 = (char *)v57 - v20;
  v21 = swift_checkMetadataState();
  v68 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v67 = (char *)v57 - v23;
  v95 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v89 = (char *)v57 - v26;
  v28 = type metadata accessor for ShadowSectionCollection(255, v17, v16, v27);
  v84 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowSectionCollection<A>, v28);
  v29 = type metadata accessor for DefaultIndices();
  v87 = *(_QWORD *)(v29 - 8);
  v88 = v29;
  MEMORY[0x1E0C80A78](v29, v30);
  v86 = (char *)v57 - v31;
  v82 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v32, v33);
  v81 = (char *)v57 - v34;
  v69 = v18;
  v92 = swift_getAssociatedTypeWitness();
  v93 = type metadata accessor for Optional();
  v85 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93, v35);
  v37 = (char *)v57 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v83 = (char *)v57 - v40;
  v91 = v17;
  v42 = type metadata accessor for ShadowListDataSource(0, v17, v15, v41);
  v43 = *(_QWORD *)(v42 - 8);
  v45 = MEMORY[0x1E0C80A78](v42, v44);
  v47 = (char *)v57 - v46;
  v73 = v5;
  v48 = v5[24];
  v49 = v97;
  if ((*((_BYTE *)v97 + v48) & 1) == 0)
  {
    v58 = v37;
    v59 = v21;
    v60 = v16;
    v50 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v15 + 72))(v91, v15, v45);
    v51 = (char *)v49 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v49) + 0x88);
    swift_beginAccess();
    v52 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v52(v47, v51, v42);
    v53 = ShadowListDataSource.hasGlobalHeader.getter(v42);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v47, v42);
    v57[1] = v50;
    v74 = v50 ^ v53;
    v52(v47, v51, v42);
    ShadowListDataSource.sectionIDs.getter(v42, v54, v55, v56);
  }
}

unint64_t static UICollectionViewListCoordinatorBase.globalHeaderKind.getter()
{
  return 0xD000000000000011;
}

uint64_t assignWithCopy for BorderlessButtonLabelShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((*(unsigned __int8 *)(v4 + 80) + 3 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 3 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t storeEnumTagSinglePayload for CollectionViewListDataSource()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t partial apply for closure #1 in SidebarListBody.body.getter(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t _ListStyleConfiguration.init(selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
}

uint64_t NavigableListModifier.init(id:selection:stateHost:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  *a6 = a1;
  v11 = type metadata accessor for NavigableListModifier(0, a4, a5, a4);
  v12 = (char *)a6 + *(int *)(v11 + 36);
  type metadata accessor for SelectionManagerBox(255, a4, a5, v13);
  type metadata accessor for Binding();
  v14 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, a2, v14);
  *(_QWORD *)((char *)a6 + *(int *)(v11 + 40)) = a3;
  return result;
}

unint64_t lazy protocol witness table accessor for type RefreshScopeModifier and conformance RefreshScopeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RefreshScopeModifier and conformance RefreshScopeModifier;
  if (!lazy protocol witness table cache variable for type RefreshScopeModifier and conformance RefreshScopeModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RefreshScopeModifier, &type metadata for RefreshScopeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RefreshScopeModifier and conformance RefreshScopeModifier);
  }
  return result;
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance DefaultButtonStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultButtonStyle.makeBody(configuration:)(a1, a2);
}

uint64_t DefaultButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t KeyPath;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE v141[56];
  _OWORD v142[3];
  _BYTE v143[25];
  char v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  char v150;

  v125 = a1;
  v140 = a2;
  type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v139 = (uint64_t)&v115 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>();
  MEMORY[0x1E0C80A78](v5, v6);
  v138 = (uint64_t)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for SearchCompletionButtonStyle();
  MEMORY[0x1E0C80A78](v136, v8);
  v116 = (char *)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v137 = (uint64_t)&v115 - v12;
  v120 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v120, v13);
  v15 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v117 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v115 - v22;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v115 - v26;
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>);
  v29 = v28;
  MEMORY[0x1E0C80A78](v28, v30);
  v32 = (char *)&v115 - v31;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>();
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v115 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>(0);
  v118 = v37;
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v115 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>(0);
  v119 = v41;
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)&v115 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>(0);
  v122 = v45;
  MEMORY[0x1E0C80A78](v45, v46);
  v121 = (uint64_t)&v115 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyMo(0);
  v124 = v48;
  MEMORY[0x1E0C80A78](v48, v49);
  v123 = (uint64_t)&v115 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButto(0);
  v127 = v51;
  MEMORY[0x1E0C80A78](v51, v52);
  v126 = (uint64_t)&v115 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Platf(0);
  v130 = v54;
  MEMORY[0x1E0C80A78](v54, v55);
  v128 = (uint64_t)&v115 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContain(0);
  MEMORY[0x1E0C80A78](v57, v58);
  v129 = (uint64_t)&v115 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveBu(0);
  v135 = v60;
  MEMORY[0x1E0C80A78](v60, v61);
  v132 = (uint64_t)&v115 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleConte(0);
  MEMORY[0x1E0C80A78](v63, v64);
  v133 = (uint64_t)&v115 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0);
  v134 = v66;
  MEMORY[0x1E0C80A78](v66, v67);
  v131 = (uint64_t)&v115 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v125, (uint64_t)v15, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v69 = v15[1];
  *v19 = *v15;
  v19[1] = v69;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v15[*(int *)(v120 + 24)], (uint64_t)&v19[*(int *)(v117 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v19, (uint64_t)v23);
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v23, (uint64_t)v27);
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v23);
  KeyPath = swift_getKeyPath();
  outlined init with copy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>((uint64_t)v27, (uint64_t)v32, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>);
  v71 = &v32[*(int *)(v29 + 36)];
  *(_QWORD *)v71 = KeyPath;
  v71[8] = 0;
  outlined destroy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>((uint64_t)v27, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>);
  outlined init with copy of ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>((uint64_t)v32, (uint64_t)v36, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>);
  outlined destroy of ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>((uint64_t)v32, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>);
  v72 = swift_getKeyPath();
  v73 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v36, (uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>);
  v74 = &v40[*(int *)(v118 + 36)];
  *(_QWORD *)v74 = v72;
  v74[8] = 0;
  *((_QWORD *)v74 + 2) = v73;
  v74[24] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>);
  v75 = swift_getKeyPath();
  v76 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v40, (uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>);
  v77 = &v44[*(int *)(v119 + 36)];
  *(_QWORD *)v77 = v75;
  v77[8] = 0;
  *((_QWORD *)v77 + 2) = v76;
  v77[24] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>);
  v78 = swift_getKeyPath();
  v79 = swift_getKeyPath();
  v80 = swift_getKeyPath();
  v81 = swift_getKeyPath();
  v82 = v121;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v44, v121, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>);
  v83 = v82 + *(int *)(v122 + 36);
  *(_QWORD *)v83 = v78;
  *(_BYTE *)(v83 + 8) = 0;
  *(_QWORD *)(v83 + 16) = v79;
  *(_BYTE *)(v83 + 24) = 0;
  *(_QWORD *)(v83 + 32) = v80;
  *(_BYTE *)(v83 + 40) = 0;
  *(_QWORD *)(v83 + 48) = v81;
  *(_BYTE *)(v83 + 56) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>);
  v84 = swift_getKeyPath();
  v85 = swift_getKeyPath();
  v86 = swift_getKeyPath();
  v87 = swift_getKeyPath();
  v88 = v123;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v82, v123, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>);
  v89 = v88 + *(int *)(v124 + 36);
  *(_QWORD *)v89 = v84;
  *(_BYTE *)(v89 + 8) = 0;
  *(_QWORD *)(v89 + 16) = v85;
  *(_BYTE *)(v89 + 24) = 0;
  *(_QWORD *)(v89 + 32) = v86;
  *(_BYTE *)(v89 + 40) = 0;
  *(_QWORD *)(v89 + 48) = v87;
  *(_BYTE *)(v89 + 56) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v82, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>);
  v90 = swift_getKeyPath();
  LOBYTE(v142[0]) = 0;
  v91 = swift_getKeyPath();
  v141[0] = 0;
  v92 = swift_getKeyPath();
  v144 = 0;
  v145 = v90;
  v146 = v142[0];
  v147 = v91;
  v148 = v141[0];
  v149 = v92;
  v150 = 0;
  outlined init with copy of ToolbarButtonStyle((uint64_t)&v145, (uint64_t)v141);
  outlined init with copy of PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>((uint64_t)v141, (uint64_t)v142);
  outlined destroy of PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>((uint64_t)v141);
  v93 = v126;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v88, v126, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyMo);
  v94 = (_OWORD *)(v93 + *(int *)(v127 + 36));
  v95 = *(_OWORD *)v143;
  v94[2] = v142[2];
  v94[3] = v95;
  *(_OWORD *)((char *)v94 + 57) = *(_OWORD *)&v143[9];
  v96 = v142[1];
  *v94 = v142[0];
  v94[1] = v96;
  outlined destroy of ToolbarButtonStyle((uint64_t)&v145);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v88, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyMo);
  v97 = (uint64_t)v116;
  *((_OWORD *)v116 + 2) = 0u;
  *(_OWORD *)(v97 + 48) = 0u;
  *(_QWORD *)(v97 + 64) = 0;
  *(_OWORD *)v97 = 0u;
  *(_OWORD *)(v97 + 16) = 0u;
  *(_BYTE *)(v97 + 72) = -1;
  v98 = v136;
  v99 = (uint64_t *)(v97 + *(int *)(v136 + 20));
  *v99 = swift_getKeyPath();
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  swift_storeEnumTagMultiPayload();
  v100 = v97 + *(int *)(v98 + 24);
  *(_QWORD *)v100 = swift_getKeyPath();
  *(_QWORD *)(v100 + 8) = 0;
  *(_BYTE *)(v100 + 16) = 0;
  v101 = v137;
  outlined init with take of TableCellFormula(v97, v137, (uint64_t (*)(_QWORD))type metadata accessor for SearchCompletionButtonStyle);
  v102 = v139;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v101, v139, (uint64_t (*)(_QWORD))type metadata accessor for SearchCompletionButtonStyle);
  v103 = v138;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v102, v138, (uint64_t (*)(_QWORD))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v102, (uint64_t (*)(_QWORD))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>);
  v104 = v128;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v93, v128, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButto);
  outlined init with take of TableCellFormula(v103, v104 + *(int *)(v130 + 36), (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v101, (uint64_t (*)(_QWORD))type metadata accessor for SearchCompletionButtonStyle);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v93, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButto);
  v105 = v129;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v104, v129, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Platf);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v104, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Platf);
  v106 = swift_getKeyPath();
  v107 = swift_getKeyPath();
  v108 = swift_getKeyPath();
  v109 = swift_getKeyPath();
  v110 = v132;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v105, v132, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContain);
  v111 = v110 + *(int *)(v135 + 36);
  *(_QWORD *)v111 = v106;
  *(_BYTE *)(v111 + 8) = 0;
  *(_QWORD *)(v111 + 16) = v107;
  *(_BYTE *)(v111 + 24) = 0;
  *(_QWORD *)(v111 + 32) = v108;
  *(_BYTE *)(v111 + 40) = 0;
  *(_QWORD *)(v111 + 48) = v109;
  *(_BYTE *)(v111 + 56) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v105, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContain);
  v112 = v133;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v110, v133, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveBu);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v110, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveBu);
  v113 = v131;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v112, v131, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleConte);
  *(_BYTE *)(v113 + *(int *)(v134 + 36)) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v112, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleConte);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v113, v140, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v113, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat);
}

uint64_t type metadata accessor for SearchCompletionButtonStyle()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SearchCompletionButtonStyle;
  if (!type metadata singleton initialization cache for SearchCompletionButtonStyle)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>)
  {
    v2 = type metadata accessor for SearchCompletionButtonStyle();
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SearchCompletionButtonStyle and conformance SearchCompletionButtonStyle, (uint64_t (*)(uint64_t))type metadata accessor for SearchCompletionButtonStyle, (uint64_t)&protocol conformance descriptor for SearchCompletionButtonStyle);
    v5 = type metadata accessor for PrimitiveButtonStyleContainerModifier(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>);
  }
}

uint64_t outlined destroy of PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonStyle and conformance ToolbarButtonStyle, (uint64_t)&type metadata for ToolbarButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonStyle and conformance ToolbarButtonStyle, (uint64_t)&type metadata for ToolbarButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ToolbarButtonStyle(uint64_t a1)
{
  destroy for ToolbarButtonStyle(a1);
  return a1;
}

uint64_t outlined init with copy of ToolbarButtonStyle(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ToolbarButtonStyle(a2, a1);
  return a2;
}

void protocol witness for PlatformViewRepresentable.updateViewProvider(_:context:) in conformance ListRepresentable<A, B>()
{
  ListRepresentable.updateViewProvider(_:context:)();
}

uint64_t protocol witness for View.body.getter in conformance ScrollViewReader<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return ScrollViewReader.body.getter(*v2, v2[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t ScrollViewReader.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a1;
  v10[5] = a2;
  swift_retain();
  v11 = MEMORY[0x1E0CE5B48];
  static PreferenceKey._delay<A>(_:)();
  swift_release();
  v16[0] = v17;
  v16[1] = v18;
  v15 = v11;
  v12 = type metadata accessor for _DelayedPreferenceView();
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5558], v12);
  static ViewBuilder.buildExpression<A>(_:)(v16, v12, v13);
  swift_release();
  v17 = v15;
  v18 = a3;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v17, v12, a5);
  return swift_release();
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(255, a3, a4);
    a5(255);
    v7 = type metadata accessor for ModifiedContent();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    a3(255);
    v5 = type metadata accessor for ModifiedContent();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t outlined destroy of ListSectionInfo(uint64_t a1)
{
  destroy for ListSectionInfo(a1);
  return a1;
}

uint64_t destroy for ListSectionInfo(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of ListSectionInfo(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ListSectionInfo(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for ListSectionInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  id v7;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void ListSectionInfo.init(list:listAttribute:contentSubgraph:)(_QWORD *a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, uint64_t, uint64_t);
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  _OWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  id v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[2];
  __int128 v48;
  _BYTE v49[25];

  v8 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v49[16] = MEMORY[0x1E0DEE9D8];
  v49[24] = 0;
  outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)v47);
  *((_QWORD *)&v48 + 1) = AGCreateWeakAttribute();
  *(_QWORD *)v49 = a3;
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 24);
  v38 = a3;
  v11(&v39, v9, v10);
  if (v39 && (v12 = specialized Set.contains(_:)(MEMORY[0x1E0CE4818], v39), swift_bridgeObjectRelease(), !v12))
  {
    v22 = a1[3];
    v23 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v22);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v23 + 32))(v22, v23)
      && (v24 = dispatch thunk of _ViewList_ID_Views.endIndex.getter(), swift_release(), !v24))
    {
      v25 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      type metadata accessor for _ContiguousArrayStorage<SectionAccumulator.Item>();
      v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_187BF9830;
      static SectionAccumulator.Item.implicitSentinel(_:)((uint64_t)a1, v25 + 32);
    }
    v26 = 0;
    *(_QWORD *)&v49[8] = v25;
    v27 = *(_QWORD *)(v25 + 16);
    v8 = MEMORY[0x1E0DEE9D8];
LABEL_23:
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    v29 = (unint64_t *)(v25 + 184 + 184 * v26);
    while (v27 != v26)
    {
      if (v28 == v26)
        goto LABEL_39;
      if (v26 >= *(_QWORD *)(v25 + 16))
        goto LABEL_40;
      ++v26;
      v30 = *v29;
      v29 += 23;
      if (v30 >> 1 != 0xFFFFFFFF)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v39 = v8;
        v32 = a4;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
          v8 = v39;
        }
        v34 = *(_QWORD *)(v8 + 16);
        v33 = *(_QWORD *)(v8 + 24);
        if (v34 >= v33 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1);
          v8 = v39;
        }
        *(_QWORD *)(v8 + 16) = v34 + 1;
        *(_QWORD *)(v8 + 8 * v34 + 32) = v26 - 1;
        a4 = v32;
        goto LABEL_23;
      }
    }
LABEL_36:
    *(_QWORD *)&v49[16] = v8;
    v35 = *(_QWORD *)(v8 + 16);

    v49[24] = v35 != 0;
    v36 = *(_OWORD *)v49;
    a4[2] = v48;
    a4[3] = v36;
    v37 = v47[1];
    *a4 = v47[0];
    a4[1] = v37;
    *(_OWORD *)((char *)a4 + 57) = *(_OWORD *)&v49[9];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v39 = v8;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    v44 = 0;
    v45 = v8;
    v46 = 0;
    SectionAccumulator.formResult(from:listAttribute:)(a1, a2 | ((HIDWORD(a2) & 1) << 32));
    v13 = v45;
    swift_bridgeObjectRetain();
    outlined destroy of SectionAccumulator((uint64_t)&v39);
    v14 = 0;
    *(_QWORD *)&v49[8] = v13;
    v15 = *(_QWORD *)(v13 + 16);
LABEL_4:
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    v17 = (unint64_t *)(v13 + 184 + 184 * v14);
    while (1)
    {
      if (v15 == v14)
      {
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
      if (v16 == v14)
        break;
      if (v14 >= *(_QWORD *)(v13 + 16))
        goto LABEL_38;
      ++v14;
      v18 = *v17;
      v17 += 23;
      if (v18 >> 1 != 0xFFFFFFFF)
      {
        v19 = swift_isUniquelyReferenced_nonNull_native();
        v39 = v8;
        if ((v19 & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
          v8 = v39;
        }
        v21 = *(_QWORD *)(v8 + 16);
        v20 = *(_QWORD *)(v8 + 24);
        if (v21 >= v20 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1);
          v8 = v39;
        }
        *(_QWORD *)(v8 + 16) = v21 + 1;
        *(_QWORD *)(v8 + 8 * v21 + 32) = v14 - 1;
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
  }
}

uint64_t _CALayerView.content()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = *v2;
  v5 = v2[1];
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 40) = a1;
  *(_QWORD *)(v7 + 48) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CALayerView<A>, a1);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  *a2 = v7 | 0x7000000000000000;
  return swift_retain();
}

uint64_t initializeWithTake for RootModifier(uint64_t a1, uint64_t a2)
{
  swift_weakTakeInit();
  swift_weakTakeInit();
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t type metadata accessor for ResolvedList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResolvedList);
}

uint64_t ResolvedList.init(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = type metadata accessor for SelectionManagerBox(255, a2, a3, a4);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v7);
  v10 = type metadata accessor for _ListStyleConfiguration(0, v7, v8, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
}

uint64_t type metadata accessor for _ListStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ListStyleConfiguration);
}

double _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.value.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t Value;
  uint64_t v17;
  double result;
  uint64_t v19;
  _OWORD *v20;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;

  v20 = a3;
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v19 - v8;
  v11 = type metadata accessor for _DefaultForegroundStyleModifier(0, a1, a2, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v19 - v14;
  _DiscreteSymbolEffectModifier.EffectEnvironment.environment.getter(&v26);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, Value, v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v15, v5);
  v22 = a1;
  v23 = a2;
  v24 = &v26;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.value.getter, (uint64_t)v21, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE1D58], v17, (uint64_t)&v25);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  EnvironmentValues.defaultForegroundStyle.setter();
  result = *(double *)&v26;
  *v20 = v26;
  return result;
}

uint64_t destroy for BorderlessButtonLabelShapeStyle(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 3) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

void SystemScrollViewContainer.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<ScrollViewStyleContext>, MEMORY[0x1E0CE54F8], MEMORY[0x1E0CE54E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for SystemScrollViewContainer.InertPaddingLayoutRequired(255, v2, *(_QWORD *)(a1 + 24), v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemScrollViewContainer<A>.InertPaddingLayoutRequired, v4);
  type metadata accessor for StaticIf();
}

uint64_t sub_186ECEBBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t refreshed;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  void (*v40)(_BYTE *, uint64_t);
  _BYTE v42[96];

  v10 = type metadata accessor for ModifiedContent();
  v11 = lazy protocol witness table accessor for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>();
  *(_QWORD *)(v8 - 136) = v4;
  *(_QWORD *)(v8 - 128) = v11;
  v12 = MEMORY[0x1E0CE2E70];
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v8 - 136);
  refreshed = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v8 - 152) = v13;
  *(_QWORD *)(v8 - 144) = refreshed;
  v15 = MEMORY[0x18D75FFDC](v12, v6, v8 - 152);
  v16 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v8 - 168) = v15;
  *(_QWORD *)(v8 - 160) = v16;
  v17 = MEMORY[0x18D75FFDC](v12, v7, v8 - 168);
  v18 = MEMORY[0x1E0CE1E88];
  *(_QWORD *)(v8 - 184) = MEMORY[0x1E0CE2BC0];
  *(_QWORD *)(v8 - 176) = v18;
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v8 - 184);
  *(_QWORD *)(v8 - 200) = v17;
  *(_QWORD *)(v8 - 192) = v19;
  v20 = MEMORY[0x18D75FFDC](v12, v10, v8 - 200);
  *(_QWORD *)(v8 - 120) = v10;
  *(_QWORD *)(v8 - 112) = v20;
  MEMORY[0x18D75FF88](255, v8 - 120, MEMORY[0x1E0CE6EC0], 0);
  v21 = type metadata accessor for ModifiedContent();
  type metadata accessor for SystemScrollViewContainer.EnvironmentAxesModifier(255, v3, v4, v22);
  v23 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v8 - 120) = v10;
  *(_QWORD *)(v8 - 112) = v20;
  *(_QWORD *)(v8 - 216) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v8 - 208) = &protocol witness table for ResetContentMarginModifier;
  *(_QWORD *)(v8 - 232) = MEMORY[0x18D75FFDC](v12, v21, v8 - 216);
  *(_QWORD *)(v8 - 224) = &protocol witness table for SystemScrollViewContainer<A>.EnvironmentAxesModifier;
  v24 = MEMORY[0x18D75FFDC](v12, v23, v8 - 232);
  type metadata accessor for SystemScrollView(255, v23, v24, v25);
  type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>();
  v26 = type metadata accessor for ModifiedContent();
  v27 = type metadata accessor for ModifiedContent();
  v28 = lazy protocol witness table accessor for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v8 - 248) = &protocol witness table for SystemScrollView<A>;
  *(_QWORD *)(v8 - 240) = v28;
  *(_QWORD *)(v8 - 264) = MEMORY[0x18D75FFDC](v12, v26, v8 - 248);
  *(_QWORD *)(v8 - 256) = &protocol witness table for ResolvedScrollBehaviorModifier;
  v29 = MEMORY[0x18D75FFDC](v12, v27, v8 - 264);
  *(_QWORD *)(v8 - 120) = v27;
  *(_QWORD *)(v8 - 112) = v29;
  MEMORY[0x18D75FF88](255, v8 - 120, MEMORY[0x1E0CE6F48], 0);
  *(_QWORD *)(v8 - 120) = v27;
  *(_QWORD *)(v8 - 112) = v29;
  swift_getOpaqueTypeConformance2();
  v30 = type metadata accessor for _UnaryViewAdaptor();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v32);
  v34 = &v42[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = &v42[-v37];
  *(_QWORD *)(v8 - 288) = v3;
  *(_QWORD *)(v8 - 280) = v4;
  *(_QWORD *)(v8 - 272) = v2;
  _UnaryViewAdaptor.init(content:)();
  v39 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4108], v30);
  static ViewBuilder.buildExpression<A>(_:)(v34, v30, v39);
  v40 = *(void (**)(_BYTE *, uint64_t))(v31 + 8);
  v40(v34, v30);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v38, v30, v1);
  return ((uint64_t (*)(_BYTE *, uint64_t))v40)(v38, v30);
}

void SystemScrollViewContainer.adjustedContent.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[49];

  v16[26] = a2;
  v2 = *(_QWORD *)(a1 + 16);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<ScrollViewStyleContext>, MEMORY[0x1E0CE54F8], MEMORY[0x1E0CE54E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v4 = type metadata accessor for ModifiedContent();
  v16[25] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v16[17] = (char *)v16 - v6;
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier>);
  v16[4] = v4;
  v7 = type metadata accessor for ModifiedContent();
  v16[24] = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v16[20] = (char *)v16 - v9;
  v16[22] = type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier>);
  v16[6] = v7;
  v10 = type metadata accessor for ModifiedContent();
  v16[23] = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v16[19] = (char *)v16 - v12;
  v14 = type metadata accessor for SystemScrollViewContainer.InertPaddingLayoutRequired(255, v2, *(_QWORD *)(a1 + 24), v13);
  v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemScrollViewContainer<A>.InertPaddingLayoutRequired, v14);
  v16[37] = v14;
  v16[38] = MEMORY[0x1E0CE2BD0];
  v16[39] = MEMORY[0x1E0CE1E98];
  v16[40] = v15;
  type metadata accessor for StaticIf();
}

void sub_186ECF0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t refreshed;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v15 = v9;
  *(_QWORD *)(v14 - 408) = v9;
  *(_QWORD *)(v14 - 432) = a1;
  v17 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 344) = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)(v14 - 368) = (char *)&a9 - v19;
  v20 = lazy protocol witness table accessor for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>();
  *(_QWORD *)(v14 - 104) = v11;
  *(_QWORD *)(v14 - 96) = v20;
  v21 = MEMORY[0x1E0CE2E70];
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v14 - 104);
  *(_QWORD *)(v14 - 496) = v22;
  refreshed = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v14 - 120) = v22;
  *(_QWORD *)(v14 - 112) = refreshed;
  v24 = MEMORY[0x18D75FFDC](v21, v12, v14 - 120);
  *(_QWORD *)(v14 - 472) = v24;
  v25 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v14 - 136) = v24;
  *(_QWORD *)(v14 - 128) = v25;
  v26 = MEMORY[0x18D75FFDC](v21, v15, v14 - 136);
  *(_QWORD *)(v14 - 456) = v26;
  v27 = MEMORY[0x1E0CE1E88];
  *(_QWORD *)(v14 - 152) = MEMORY[0x1E0CE2BC0];
  *(_QWORD *)(v14 - 144) = v27;
  v28 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v14 - 152);
  *(_QWORD *)(v14 - 168) = v26;
  *(_QWORD *)(v14 - 160) = v28;
  v29 = MEMORY[0x18D75FFDC](v21, v17, v14 - 168);
  *(_QWORD *)(v14 - 448) = v29;
  *(_QWORD *)(v14 - 216) = v17;
  *(_QWORD *)(v14 - 208) = v29;
  v30 = MEMORY[0x18D75FF88](0, v14 - 216, MEMORY[0x1E0CE6EC0], 0);
  *(_QWORD *)(v14 - 400) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(v14 - 440) = v30;
  MEMORY[0x1E0C80A78](v30, v30);
  v31 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 384) = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v32);
  *(_QWORD *)(v14 - 504) = (char *)&a9 - v33;
  *(_QWORD *)(v14 - 424) = type metadata accessor for SystemScrollViewContainer.EnvironmentAxesModifier(255, v10, v11, v34);
  v35 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 392) = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v36);
  *(_QWORD *)(v14 - 488) = (char *)&a9 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  *(_QWORD *)(v14 - 416) = (char *)&a9 - v40;
  View.styleContext<A>(_:)();
  View.refreshScope<A>(if:)();
}

uint64_t sub_186ECF3A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t OpaqueTypeConformance2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 312) + 8))(v4, v5);
  *(_BYTE *)(v9 - 216) = *v8;
  v10 = *(_QWORD *)(v9 - 360);
  v11 = *(_QWORD *)(v9 - 464);
  MEMORY[0x18D75B4AC](v9 - 216, v11, *(_QWORD *)(v9 - 336), *(_QWORD *)(v9 - 472));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 320) + 8))(v6, v11);
  SystemScrollViewContainer.inertPaddingModifier.getter(v1, v12, v9 - 216);
  v13 = *(_BYTE *)(v9 - 176);
  *(_BYTE *)(v9 - 264) = *(_BYTE *)(v9 - 216);
  v14 = *(_OWORD *)(v9 - 192);
  *(_OWORD *)(v9 - 256) = *(_OWORD *)(v9 - 208);
  *(_OWORD *)(v9 - 240) = v14;
  *(_BYTE *)(v9 - 224) = v13;
  v15 = *(_QWORD *)(v9 - 368);
  v16 = *(_QWORD *)(v9 - 408);
  MEMORY[0x18D75B4AC](v9 - 264, v16, *(_QWORD *)(v9 - 432), *(_QWORD *)(v9 - 456));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 328) + 8))(v10, v16);
  v17 = *(_QWORD *)(v9 - 448);
  View.resetScrollInputs()();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 344) + 8))(v15, v3);
  *(_QWORD *)(v9 - 216) = v3;
  *(_QWORD *)(v9 - 208) = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v19 = *(_QWORD *)(v9 - 504);
  v20 = *(_QWORD *)(v9 - 440);
  View.resetContentMargin(placements:)((uint64_t)&outlined read-only object #0 of SystemScrollViewContainer.placementsToReset.getter, v20, OpaqueTypeConformance2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 400) + 8))(v0, v20);
  *(_BYTE *)(v9 - 216) = *v8;
  *(_QWORD *)(v9 - 280) = OpaqueTypeConformance2;
  *(_QWORD *)(v9 - 272) = &protocol witness table for ResetContentMarginModifier;
  v21 = MEMORY[0x1E0CE2E70];
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v9 - 280);
  v23 = *(_QWORD *)(v9 - 488);
  MEMORY[0x18D75B4AC](v9 - 216, v7, *(_QWORD *)(v9 - 424), v22);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 384) + 8))(v19, v7);
  *(_QWORD *)(v9 - 296) = v22;
  *(_QWORD *)(v9 - 288) = &protocol witness table for SystemScrollViewContainer<A>.EnvironmentAxesModifier;
  v24 = MEMORY[0x18D75FFDC](v21, v2, v9 - 296);
  v25 = *(_QWORD *)(v9 - 416);
  static ViewBuilder.buildExpression<A>(_:)(v23, v2, v24);
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 392) + 8);
  v26(v23, v2);
  static ViewBuilder.buildBlock<A>(_:)(v25, v2, *(_QWORD *)(v9 - 304));
  return v26(v25, v2);
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    type metadata accessor for StaticIf();
  return result;
}

void static CollectionViewListRoot._makeView(view:inputs:)(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  uint64_t updated;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;

  v29 = a5;
  v30 = a3;
  v27 = a7;
  v47 = *MEMORY[0x1E0C80C00];
  updated = type metadata accessor for UpdateCollectionViewListCoordinator(0, a4, a6, a4);
  v31 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated, v11);
  v25[4] = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v32 = (char *)v25 - v15;
  v28 = *a1;
  v16 = *((_DWORD *)a2 + 2);
  v17 = a2[2];
  v19 = a2[5];
  v18 = a2[6];
  v20 = *((_DWORD *)a2 + 20);
  v38 = *a2;
  v39 = v16;
  v41 = *(_OWORD *)(a2 + 3);
  v40 = v17;
  v42 = v19;
  v43 = v18;
  v44 = *(_OWORD *)(a2 + 7);
  v45 = a2[9];
  v46 = v20;
  LOBYTE(v33) = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type DisableListSections and conformance DisableListSections();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type ListConcatenatesFooters and conformance ListConcatenatesFooters();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v21 = swift_release();
  v25[1] = v25;
  MEMORY[0x1E0C80A78](v21, v22);
  v23 = v29;
  v24 = v30;
  v25[-4] = v30;
  v25[-3] = a4;
  v25[-2] = v23;
  v25[-1] = a6;
  v37 = v28;
  v33 = v24;
  v34 = a4;
  v35 = v23;
  v36 = a6;
  type metadata accessor for CollectionViewListRoot();
}

void sub_186ECF954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;

  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v5 = *(_QWORD *)(v4 - 184);
  v6 = *(_DWORD *)(v4 - 176);
  v7 = *(_QWORD *)(v4 - 168);
  v8 = *(_DWORD *)(v4 - 160);
  v9 = *(_DWORD *)(v4 - 156);
  *(_DWORD *)(v0 + 4) = v8;
  *(_DWORD *)(v0 + 68) = v9;
  *(_DWORD *)(v0 + 72) = v6;
  v10 = *(_DWORD *)(v4 - 152);
  v11 = *(_DWORD *)(v4 - 148);
  *(_DWORD *)(v0 + 60) = v11;
  *(_DWORD *)(v0 + 64) = v10;
  v12 = *(_QWORD *)(v4 - 144);
  *(_QWORD *)(v0 + 216) = v5;
  *(_DWORD *)(v0 + 224) = v6;
  *(_QWORD *)(v0 + 232) = v7;
  *(_DWORD *)(v0 + 240) = v8;
  *(_DWORD *)(v0 + 244) = v9;
  *(_DWORD *)(v0 + 248) = v10;
  *(_DWORD *)(v0 + 252) = v11;
  *(_QWORD *)(v0 + 256) = v12;
  *(_QWORD *)(v4 - 256) = v1;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListInputs.init(_:options:)();
  v13 = *(_QWORD *)(v0 + 128);
  v14 = *(_DWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v3;
  v15 = *(_QWORD *)(v0 + 144);
  v16 = *(_QWORD *)(v0 + 168);
  v17 = *(_DWORD *)(v0 + 192);
  v18 = *(_QWORD *)(v0 + 200);
  v19 = *(_BYTE *)(v0 + 208);
  *(_QWORD *)(v0 + 216) = v13;
  *(_DWORD *)(v0 + 224) = v14;
  *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 232) = v15;
  *(_QWORD *)(v0 + 256) = v16;
  *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 176);
  *(_DWORD *)(v0 + 280) = v17;
  *(_QWORD *)(v0 + 288) = v18;
  *(_BYTE *)(v0 + 296) = v19;
  static View.makeDebuggableViewList(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 216) = v5;
  *(_DWORD *)(v0 + 224) = *(_DWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 232) = v7;
  v20 = *(_DWORD *)(v0 + 4);
  v21 = *(_DWORD *)(v0 + 68);
  *(_DWORD *)(v0 + 240) = v20;
  *(_DWORD *)(v0 + 244) = v21;
  v22 = *(_DWORD *)(v0 + 60);
  *(_DWORD *)(v0 + 248) = *(_DWORD *)(v0 + 64);
  *(_DWORD *)(v0 + 252) = v22;
  *(_QWORD *)(v0 + 256) = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListInputs.init(_:)();
  v23 = *(_DWORD *)(v0 + 136);
  v24 = *(_QWORD *)(v0 + 144);
  v25 = *(_QWORD *)(v0 + 168);
  v26 = *(_DWORD *)(v0 + 192);
  v27 = *(_QWORD *)(v0 + 200);
  v28 = *(_BYTE *)(v0 + 208);
  *(_QWORD *)(v0 + 216) = *(_QWORD *)(v0 + 128);
  *(_DWORD *)(v0 + 224) = v23;
  *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 232) = v24;
  *(_QWORD *)(v0 + 256) = v25;
  *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 176);
  *(_DWORD *)(v0 + 280) = v26;
  *(_QWORD *)(v0 + 288) = v27;
  *(_BYTE *)(v0 + 296) = v28;
  v29 = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v30 = *(_DWORD *)(v0 + 72);
  *(_DWORD *)(v0 + 216) = *(_DWORD *)(v0 + 76);
  v31 = *(_QWORD *)(v4 - 136);
  v32 = *(_DWORD *)(v4 - 104);
  *(_QWORD *)(v0 + 128) = v5;
  *(_DWORD *)(v0 + 136) = v30;
  *(_QWORD *)(v0 + 144) = v7;
  v33 = *(_DWORD *)(v0 + 68);
  *(_DWORD *)(v0 + 152) = v20;
  *(_DWORD *)(v0 + 156) = v33;
  v34 = *(_DWORD *)(v0 + 60);
  *(_DWORD *)(v0 + 160) = *(_DWORD *)(v0 + 64);
  *(_DWORD *)(v0 + 164) = v34;
  *(_QWORD *)(v0 + 168) = v12;
  *(_QWORD *)(v0 + 176) = v31;
  *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 432);
  *(_QWORD *)(v0 + 200) = *(_QWORD *)(v4 - 112);
  *(_DWORD *)(v0 + 208) = v32;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(v29, (int *)(v0 + 216), (uint64_t *)(v0 + 128), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 80), *(_DWORD **)(v0 + 104));
}

void sub_186ECFBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v13 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v9[12] + 16))(v9[4], v10, v9[5]);
  v9[11] = &a9;
  MEMORY[0x1E0C80A78](v13, v14);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18 = type metadata accessor for CollectionViewListDataSource(255, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewListDataSource<A>, v18);
  v9[16] = v18;
  v9[17] = v11;
  v9[18] = v19;
  v9[19] = v12;
  type metadata accessor for UICollectionViewListCoordinator();
}

void sub_186ECFCA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;

  *(_QWORD *)(v6 - 32) = a1;
  *(_QWORD *)(v6 - 24) = v7;
  *(_QWORD *)(v6 - 16) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateCollectionViewListCoordinator<A>, v7);
  v11 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, v3, v7, MEMORY[0x1E0DEDCE8], v11, MEMORY[0x1E0DEDD18], v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 96) + 8))(v4, v7);
  v13 = *(_DWORD *)(v1 + 128);
  static AGAttributeFlags.transactional.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  v14 = *(_DWORD *)(v10 - 176);
  v15 = *(_QWORD *)(v10 - 168);
  v16 = *(_DWORD *)(v10 - 104);
  *(_QWORD *)(v1 + 128) = *(_QWORD *)(v10 - 184);
  *(_DWORD *)(v1 + 136) = v14;
  *(_QWORD *)(v1 + 144) = v15;
  *(_OWORD *)(v1 + 152) = *(_OWORD *)(v1 + 400);
  *(_OWORD *)(v1 + 168) = *(_OWORD *)(v1 + 416);
  *(_OWORD *)(v1 + 184) = *(_OWORD *)(v1 + 432);
  *(_QWORD *)(v1 + 200) = *(_QWORD *)(v10 - 112);
  *(_DWORD *)(v1 + 208) = v16;
  static CollectionViewListUtilities.makeOutputs<A, B>(inputs:coordinator:coordinatorKind:)((__int128 *)(v1 + 128), v13, 1, v2, v5, v9, v8, *(_QWORD *)(v1 + 48));
}

void destroy for UpdateCollectionViewListCoordinator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_unknownObjectWeakDestroy();
  v4 = a1 + *(int *)(a2 + 100);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for CollectionViewListDataSource(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8))
  {
    __swift_destroy_boxed_opaque_existential_1(v4);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v4 + *(int *)(v8 + 36);
    v10 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    v11 = v4 + *(int *)(v8 + 40);
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      if (v12 == 1)
      {
LABEL_8:
        swift_release();
        swift_release();
        goto LABEL_9;
      }
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    if ((*(_BYTE *)(v11 + 64) & 1) != 0)
      swift_bridgeObjectRelease();
    else
      __swift_destroy_boxed_opaque_existential_1(v11 + 24);
    goto LABEL_8;
  }
LABEL_9:

}

uint64_t type metadata accessor for CollectionViewListDataSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CollectionViewListDataSource);
}

uint64_t initializeWithCopy for UpdateCollectionViewListCoordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v8;
  swift_unknownObjectWeakCopyInit();
  v9 = *(int *)(a3 + 100);
  v10 = a1 + v9;
  v11 = a2 + v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = (int *)type metadata accessor for CollectionViewListDataSource(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v16 = *((_QWORD *)v15 - 1);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(v16 + 48))(v11, 1, v15))
  {
    v49 = v16;
    v50 = a3;
    v18 = *(_OWORD *)(v11 + 24);
    *(_OWORD *)(v10 + 24) = v18;
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))(v10, v11);
    v19 = *(void **)(v11 + 48);
    *(_QWORD *)(v10 + 40) = *(_QWORD *)(v11 + 40);
    *(_QWORD *)(v10 + 48) = v19;
    v20 = *(_QWORD *)(v11 + 64);
    *(_QWORD *)(v10 + 56) = *(_QWORD *)(v11 + 56);
    *(_QWORD *)(v10 + 64) = v20;
    *(_BYTE *)(v10 + 72) = *(_BYTE *)(v11 + 72);
    v21 = v15[9];
    v47 = v11 + v21;
    v48 = v10 + v21;
    v22 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    v24 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(v48, v47, v22);
    v25 = v15[10];
    v26 = v10 + v25;
    v27 = v11 + v25;
    v28 = *(_QWORD *)(v11 + v25 + 8);
    if (v28)
    {
      if (v28 == 1)
      {
        v29 = *(_OWORD *)(v27 + 48);
        *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
        *(_OWORD *)(v26 + 48) = v29;
        *(_DWORD *)(v26 + 63) = *(_DWORD *)(v27 + 63);
        v30 = *(_OWORD *)(v27 + 16);
        *(_OWORD *)v26 = *(_OWORD *)v27;
        *(_OWORD *)(v26 + 16) = v30;
LABEL_12:
        v35 = v15[11];
        v36 = (_QWORD *)(v10 + v35);
        v37 = (_QWORD *)(v11 + v35);
        v38 = v37[1];
        *v36 = *v37;
        v36[1] = v38;
        *(_BYTE *)(v10 + v15[12]) = *(_BYTE *)(v11 + v15[12]);
        v39 = v15[13];
        v40 = v10 + v39;
        v41 = v11 + v39;
        *(_QWORD *)v40 = *(_QWORD *)v41;
        *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
        *(_QWORD *)(v10 + v15[14]) = *(_QWORD *)(v11 + v15[14]);
        v42 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v49 + 56);
        swift_retain();
        swift_retain();
        v42(v10, 0, 1, v15);
        a3 = v50;
        goto LABEL_13;
      }
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_QWORD *)(v26 + 8) = v28;
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
    }
    v31 = (_QWORD *)(v26 + 24);
    v32 = (_QWORD *)(v27 + 24);
    v33 = *(_BYTE *)(v27 + 64);
    if ((v33 & 1) != 0)
    {
      *v31 = *v32;
      swift_bridgeObjectRetain();
    }
    else
    {
      v34 = *(_OWORD *)(v27 + 48);
      *(_OWORD *)(v26 + 48) = v34;
      (**(void (***)(_QWORD *, _QWORD *))(v34 - 8))(v31, v32);
    }
    *(_BYTE *)(v26 + 64) = v33;
    *(_WORD *)(v26 + 65) = *(_WORD *)(v27 + 65);
    goto LABEL_12;
  }
  v17 = type metadata accessor for Optional();
  memcpy((void *)v10, (const void *)v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
LABEL_13:
  v43 = *(int *)(a3 + 104);
  v44 = *(void **)(a2 + v43);
  *(_QWORD *)(a1 + v43) = v44;
  v45 = v44;
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionViewListDataSource()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

char *ListRepresentable.makeViewProvider(context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char *v16;
  void *v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t Attribute;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t updated;
  uint64_t v58;
  uint64_t v59;
  char v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;

  v5 = v4;
  v65 = *(_QWORD *)(a1 + 8);
  v66 = *(_QWORD *)a1;
  v6 = v66;
  v7 = *(_QWORD *)(a1 + 24);
  v62 = *(_BYTE *)(a1 + 32);
  v9 = *v4;
  v68 = *(_QWORD *)(a1 + 16);
  v8 = v68;
  v69 = v7;
  v70 = v62;
  v10 = type metadata accessor for PlatformViewRepresentableContext(0, a2, (uint64_t)&protocol witness table for ListRepresentable<A, B>, a4);
  PlatformViewRepresentableContext.environment.getter(v10, v11, &v71);
  v66 = v71;
  v67 = v72;
  v15 = UICollectionViewListCoordinator.createLayout(_:)(&v66, v12, v13, v14);
  swift_release();
  swift_release();
  v64 = v15;
  v16 = (char *)UICollectionViewListCoordinator.createCollectionView(_:)((uint64_t)v15);
  v17 = *(void **)((char *)v9 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v9) + 0x90));
  v18 = *(void **)&v16[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper];
  *(_QWORD *)&v16[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper] = v17;
  v19 = v17;

  swift_unknownObjectWeakAssign();
  v20 = *(uint64_t *)((char *)v5 + 28);
  *(_QWORD *)&v19[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__phaseState] = v20;
  specialized UICollectionViewListCoordinatorBase.collectionView.setter();
  UICollectionViewListCoordinatorBase.setupSizeThatFitsCallback(in:)();
  objc_msgSend(v16, sel_setDelegate_, v9);
  objc_msgSend(v16, sel_setDataSource_, v9);
  v66 = v6;
  v67 = v65;
  v68 = v8;
  v69 = v7;
  v70 = v62;
  specialized ReferenceFileDocumentConfiguration.document.getter();
  v21 = swift_retain();
  UICollectionViewListCoordinatorBase.recordInitialTransactionIfNeeded(_:)(v21, v22, v23, v24);
  swift_release();
  *(_QWORD *)&v16[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_phaseState] = v20;
  objc_msgSend(v16, sel_setAllowsSelectionDuringEditing_, 1);
  objc_msgSend(v16, sel_setAllowsFocus_, 1);
  objc_msgSend(v16, sel_setSelectionFollowsFocus_, 1);
  v25 = v16;
  v29 = UICollectionViewListCoordinatorBase.dragAndDropController.getter((uint64_t)v25, v26, v27, v28);
  objc_msgSend(v25, sel_setDragDelegate_, v29);

  v34 = UICollectionViewListCoordinatorBase.dragAndDropController.getter(v30, v31, v32, v33);
  objc_msgSend(v25, sel_setDropDelegate_, v34);

  v66 = v6;
  v67 = v65;
  v63 = v8;
  v68 = v8;
  v69 = v7;
  v70 = v62;
  PlatformViewRepresentableContext.environment.getter(v10, v35, &v71);
  if (v72)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v36 = v66;
  v37 = v67;
  v38 = v68;
  v39 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v40 = (_QWORD *)swift_allocObject();
  v40[2] = v39;
  v40[3] = v36;
  v40[4] = v37;
  v40[5] = v38;
  swift_retain();
  outlined copy of AppIntentExecutor?(v36);
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v36);
  Attribute = AGWeakAttributeGetAttribute();
  v43 = *MEMORY[0x1E0CFED28];
  if ((_DWORD)Attribute != *MEMORY[0x1E0CFED28])
  {
    MEMORY[0x1E0C80A78](Attribute, v42);
    MEMORY[0x1E0C80A78](v44, v45);
    AGGraphMutateAttribute();
  }
  v46 = AGWeakAttributeGetAttribute();
  if ((_DWORD)v46 != v43)
  {
    MEMORY[0x1E0C80A78](v46, v47);
    MEMORY[0x1E0C80A78](v48, v49);
    AGGraphMutateAttribute();
  }
  v66 = v6;
  v67 = v65;
  v68 = v63;
  v69 = v7;
  v70 = v62;
  v50 = v25;
  PlatformViewRepresentableContext.environment.getter(v10, v51, &v71);
  if (v72)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UserInteractionActivityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UserInteractionActivityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UserInteractionActivityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UserInteractionActivityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UserInteractionActivityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UserInteractionActivityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v67)
  {
    v52 = (void *)MEMORY[0x18D75CC88](v66, v67);
    swift_bridgeObjectRelease();
  }
  else
  {
    v52 = 0;
  }
  objc_msgSend(v50, sel_setInteractionActivityTrackingBaseName_, v52);

  v53 = *((unsigned __int8 *)v5 + 8);
  v54 = AGWeakAttributeGetAttribute();
  if (v53 == 1)
  {
    if ((_DWORD)v54 != v43)
    {
      MEMORY[0x1E0C80A78](v54, v55);
      updated = type metadata accessor for UpdateCollectionViewListCoordinator(0, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 40), v56);
      MEMORY[0x1E0C80A78](updated, updated);
LABEL_20:
      AGGraphMutateAttribute();

      return v50;
    }
  }
  else if ((_DWORD)v54 != v43)
  {
    MEMORY[0x1E0C80A78](v54, v55);
    MEMORY[0x1E0C80A78](v58, v59);
    goto LABEL_20;
  }

  return v50;
}

id UICollectionViewListCoordinatorBase.dragAndDropController.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x150);
  v6 = *(void **)((char *)v4 + v5);
  if (v6)
  {
    v7 = *(id *)((char *)v4 + v5);
  }
  else
  {
    v8 = (void *)closure #1 in UICollectionViewListCoordinatorBase.dragAndDropController.getter(v4, a2, a3, a4);
    v9 = *(void **)((char *)v4 + v5);
    *(_QWORD *)((char *)v4 + v5) = v8;
    v7 = v8;

    v6 = 0;
  }
  v10 = v6;
  return v7;
}

void ListRepresentable.updateViewProvider(_:context:)()
{
  _QWORD *v0;
  id v1;

  v1 = *(id *)(*v0 + OBJC_IVAR____TtC7SwiftUI39UICollectionViewListCoordinatorBaseBase_backgroundColor);
  closure #1 in ListRepresentable.updateViewProvider(_:context:)();
}

void sub_186ED0B40(uint64_t a1)
{
  void *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  char v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  int *v24;
  __int128 v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD v28[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[25];

  v8 = *(void **)((char *)v6 + v4);
  *(_QWORD *)((char *)v6 + v4) = a1;

  v10 = *(void **)((char *)v6 + v4);
  if (v5)
  {
    if (v10)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      v11 = v1;
      v12 = v10;
      v13 = static NSObject.== infix(_:_:)();

      if ((v13 & 1) != 0)
        goto LABEL_7;
    }
  }
  else if (!v10)
  {
    goto LABEL_7;
  }
  v14 = objc_msgSend(v2, sel_collectionViewLayout);
  objc_msgSend(v14, sel_invalidateLayout);

  objc_msgSend(v2, sel_setBackgroundColor_, *(_QWORD *)((char *)v6 + v4));
LABEL_7:
  v15 = *(_OWORD *)(v7 - 112);
  v31 = *(_OWORD *)(v7 - 128);
  v32 = v15;
  LOBYTE(v33) = *(_BYTE *)(v7 - 96);
  v16 = type metadata accessor for PlatformViewRepresentableContext(0, v3, (uint64_t)&protocol witness table for ListRepresentable<A, B>, v9);
  PlatformViewRepresentableContext.environment.getter(v16, v17, (uint64_t *)(v7 - 144));
  if (*(_QWORD *)(v7 - 136))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v18 = MEMORY[0x18D760234](&v31);
  v19 = *((_QWORD *)&v31 + 1);
  outlined destroy of weak FallbackResponderProvider?((uint64_t)&v31);
  swift_release();
  swift_release();
  if (v18)
  {
    v21 = (uint64_t *)&v2[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_safeAreaTransitionState];
    *v21 = v18;
    v21[1] = v19;
    swift_unknownObjectRelease();
  }
  v22 = *(_QWORD *)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x90));
  v23 = *(_OWORD *)(v7 - 112);
  v31 = *(_OWORD *)(v7 - 128);
  v32 = v23;
  LOBYTE(v33) = *(_BYTE *)(v7 - 96);
  PlatformViewRepresentableContext.environment.getter(v16, v20, (uint64_t *)v28);
  v30 = v28[0];
  ScrollEnvironmentProperties.init(environment:)((uint64_t)&v30, (uint64_t)&v31);
  v24 = (int *)(v22 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties);
  swift_beginAccess();
  outlined init with copy of ScrollEnvironmentProperties(v24, (uint64_t)v28);
  swift_beginAccess();
  outlined assign with copy of ScrollEnvironmentProperties((uint64_t)&v31, (uint64_t)v24);
  swift_endAccess();
  ScrollViewHelper.didChangeProperties(from:)((uint64_t)v28);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v31);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v28);
  v25 = *(_OWORD *)(v7 - 112);
  v31 = *(_OWORD *)(v7 - 128);
  v32 = v25;
  LOBYTE(v33) = *(_BYTE *)(v7 - 96);
  PlatformViewRepresentableContext.environment.getter(v16, v26, (uint64_t *)&v29);
  v28[0] = v29;
  EnvironmentValues.contentMarginProxy.getter((uint64_t)&v31);
  swift_release();
  swift_release();
  v27 = (_OWORD *)(v22 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
  v27[12] = v43;
  v27[13] = v44;
  v27[14] = *(_OWORD *)v45;
  *(_OWORD *)((char *)v27 + 233) = *(_OWORD *)&v45[9];
  v27[8] = v39;
  v27[9] = v40;
  v27[10] = v41;
  v27[11] = v42;
  v27[4] = v35;
  v27[5] = v36;
  v27[6] = v37;
  v27[7] = v38;
  *v27 = v31;
  v27[1] = v32;
  v27[2] = v33;
  v27[3] = v34;
  ScrollViewHelper.didChangeMargins(from:)();

}

uint64_t PlatformViewRepresentableContext.environment.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v3 + 32) == 1)
  {
    MEMORY[0x1E0C80A78](a1, a2);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    return outlined consume of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
  }
  else
  {
    *a3 = v4;
    a3[1] = v5;
    swift_retain();
    return swift_retain();
  }
}

uint64_t EnvironmentValues.contentMarginProxy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;

  v3 = *(_QWORD *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v4 = v16;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    v4 = v16;
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *(_QWORD *)a1 = v30;
  *(_BYTE *)(a1 + 8) = v31;
  *(_QWORD *)(a1 + 16) = v32;
  *(_BYTE *)(a1 + 24) = v33;
  *(_QWORD *)(a1 + 32) = v34;
  *(_BYTE *)(a1 + 40) = v35;
  *(_QWORD *)(a1 + 48) = v36;
  *(_BYTE *)(a1 + 56) = v37;
  *(_QWORD *)(a1 + 64) = v22;
  *(_BYTE *)(a1 + 72) = v23;
  *(_QWORD *)(a1 + 80) = v24;
  *(_BYTE *)(a1 + 88) = v25;
  *(_QWORD *)(a1 + 96) = v26;
  *(_BYTE *)(a1 + 104) = v27;
  *(_QWORD *)(a1 + 112) = v28;
  *(_BYTE *)(a1 + 120) = v29;
  *(_QWORD *)(a1 + 128) = v14;
  *(_BYTE *)(a1 + 136) = v15;
  *(_QWORD *)(a1 + 144) = v4;
  *(_BYTE *)(a1 + 152) = v17;
  *(_QWORD *)(a1 + 160) = v18;
  *(_BYTE *)(a1 + 168) = v19;
  *(_QWORD *)(a1 + 176) = v20;
  *(_BYTE *)(a1 + 184) = v21;
  *(_QWORD *)(a1 + 192) = v6;
  *(_BYTE *)(a1 + 200) = v7;
  *(_QWORD *)(a1 + 208) = v8;
  *(_BYTE *)(a1 + 216) = v9;
  *(_QWORD *)(a1 + 224) = v10;
  *(_BYTE *)(a1 + 232) = v11;
  *(_QWORD *)(a1 + 240) = v12;
  *(_BYTE *)(a1 + 248) = v13;
  return result;
}

uint64_t ScrollEnvironmentProperties.init(environment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)a2 = 257;
  *(_DWORD *)(a2 + 84) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 67) = 0u;
  *(_WORD *)(a2 + 88) = 1;
  *(_BYTE *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_WORD *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_WORD *)(a2 + 136) = 0;
  static EdgeInsets.zero.getter();
  *(_QWORD *)(a2 + 144) = v4;
  *(_QWORD *)(a2 + 152) = v5;
  *(_QWORD *)(a2 + 160) = v6;
  *(_QWORD *)(a2 + 168) = v7;
  static EdgeInsets.zero.getter();
  *(_QWORD *)(a2 + 176) = v8;
  *(_QWORD *)(a2 + 184) = v9;
  *(_QWORD *)(a2 + 192) = v10;
  *(_QWORD *)(a2 + 200) = v11;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  outlined destroy of ScrollEnvironmentProperties(a2);
  *(_OWORD *)(a2 + 160) = v24;
  *(_OWORD *)(a2 + 176) = v25;
  *(_OWORD *)(a2 + 192) = v26;
  *(_OWORD *)(a2 + 96) = v20;
  *(_OWORD *)(a2 + 112) = v21;
  *(_OWORD *)(a2 + 128) = v22;
  *(_OWORD *)(a2 + 144) = v23;
  *(_OWORD *)(a2 + 32) = v16;
  *(_OWORD *)(a2 + 48) = v17;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = v19;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v15;
  EnvironmentValues.layoutDirection.getter();
  swift_release();
  result = swift_release();
  *(_BYTE *)(a2 + 81) = v13;
  if ((*(_BYTE *)a2 & 1) == 0)
  {
    *(_BYTE *)(a2 + 96) = 3;
    *(_BYTE *)(a2 + 120) = 3;
  }
  return result;
}

void closure #1 in ListRepresentable.updateViewProvider(_:context:)()
{
  type metadata accessor for ListRepresentable();
}

id sub_186ED1854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  id v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;

  v5 = type metadata accessor for PlatformViewRepresentableContext(0, a1, (uint64_t)&protocol witness table for ListRepresentable<A, B>, a4);
  PlatformViewRepresentableContext.environment.getter(v5, v6, (uint64_t *)&v17);
  v14 = v17;
  v7 = EnvironmentValues.scrollContentBackgroundColor.getter();
  swift_release();
  swift_release();
  if (!v7)
    return 0;
  v9 = v4[1];
  v14 = *v4;
  v15 = v9;
  v16 = *((_BYTE *)v4 + 32);
  PlatformViewRepresentableContext.environment.getter(v5, v8, (uint64_t *)&v13);
  v14 = v13;
  dispatch thunk of AnyColorBox.resolve(in:)();
  swift_release();
  swift_release();
  v10 = (void *)Color.Resolved.cgColor.getter();
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v10);
  swift_release();

  return v11;
}

void type metadata accessor for ListRepresentable()
{
  JUMPOUT(0x18D75FF28);
}

{
  JUMPOUT(0x18D75FF28);
}

uint64_t EnvironmentValues.scrollContentBackgroundColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  char v4;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v4 == 2)
  {
    static Color.clear.getter();
    AnyShapeStyle.init<A>(_:)();
    swift_release();
  }
  else if (!v3)
  {
    return 0;
  }
  v1 = ShapeStyle.fallbackColor(in:level:)();
  swift_release();
  return v1;
}

void ScrollViewHelper.didChangeMargins(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int *v21;
  unsigned __int8 v22;
  _BYTE v23[208];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[2];
  _OWORD v39[2];
  char v40;
  _OWORD v41[2];
  char v42;

  v1 = v0;
  v2 = MEMORY[0x18D760234](v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options;
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options);
    if ((v5 & 2) != 0)
    {
      v6 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 208);
      v36 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 192);
      v37 = v6;
      v38[0] = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 224);
      *(_OWORD *)((char *)v38 + 9) = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 233);
      v7 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 144);
      v32 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 128);
      v33 = v7;
      v8 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 176);
      v34 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 160);
      v35 = v8;
      v9 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 80);
      v28 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 64);
      v29 = v9;
      v10 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 112);
      v30 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 96);
      v31 = v10;
      v11 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 16);
      v24 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
      v25 = v11;
      v12 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 48);
      v13 = (int *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties);
      v26 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 32);
      v27 = v12;
      swift_beginAccess();
      outlined init with copy of ScrollEnvironmentProperties(v13, (uint64_t)v23);
      memset(v41, 0, sizeof(v41));
      v42 = 1;
      specialized UIScrollView.updateContentInsets(margins:axes:properties:safeArea:)((uint64_t *)&v24, (uint64_t)v23, (uint64_t)v41);
      outlined destroy of ScrollEnvironmentProperties((uint64_t)v23);
      v5 = *(_QWORD *)(v1 + v4);
    }
    if ((v5 & 4) != 0)
    {
      v14 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 208);
      v36 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 192);
      v37 = v14;
      v38[0] = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 224);
      *(_OWORD *)((char *)v38 + 9) = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 233);
      v15 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 144);
      v32 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 128);
      v33 = v15;
      v16 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 176);
      v34 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 160);
      v35 = v16;
      v17 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 80);
      v28 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 64);
      v29 = v17;
      v18 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 112);
      v30 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 96);
      v31 = v18;
      v19 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 16);
      v24 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
      v25 = v19;
      v20 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 48);
      v26 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 32);
      v27 = v20;
      v21 = (int *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties);
      v22 = *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes);
      swift_beginAccess();
      outlined init with copy of ScrollEnvironmentProperties(v21, (uint64_t)v23);
      memset(v39, 0, sizeof(v39));
      v40 = 1;
      UIScrollView.updateIndicatorInsets(margins:axes:properties:safeArea:)((uint64_t *)&v24, v22, (uint64_t)v23, (uint64_t)v39);

      outlined destroy of ScrollEnvironmentProperties((uint64_t)v23);
    }
    else
    {

    }
  }
}

void ScrollViewHelper.didChangeProperties(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 *v6;
  char v7;
  int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char v12;

  v3 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView;
  v4 = MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties);
    swift_beginAccess();
    objc_msgSend(v5, sel_setScrollEnabled_, *v6);
    objc_msgSend(v5, sel_setClipsToBounds_, v6[1]);
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options) & 1) != 0
      && *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes))
    {
      v7 = v6[80];
    }
    else
    {
      v7 = 4;
    }
    v12 = v7;
    UIScrollView.updateDeceleration(_:)((SwiftUI::ScrollDecelerationRate)&v12);
    ScrollViewHelper.updateAxesConfiguration()();
    v8 = *(_DWORD *)(a1 + 84);
    v9 = (void *)MEMORY[0x18D760234](v3);
    if (v9)
    {
      v10 = v9;
      if (v8 != *((_DWORD *)v6 + 21))
        objc_msgSend(v9, sel_flashScrollIndicators);

    }
    v12 = v6[3];
    specialized UIScrollViewKeyboardDismissMode.init(_:defaultValue:)((uint64_t)&v12);
    objc_msgSend(v5, sel_setKeyboardDismissMode_, v11);

  }
}

Swift::Void __swiftcall UIScrollView.updateDeceleration(_:)(SwiftUI::ScrollDecelerationRate a1)
{
  __asm { BR              X11 }
}

id sub_186ED1E48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  objc_msgSend(v12, sel_setDecelerationRate_, *MEMORY[0x1E0DC5360]);
  return objc_msgSend(v12, sel_setPagingEnabled_, 0);
}

void ScrollViewHelper.updateAxesConfiguration()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL8 v8;

  v1 = v0;
  v2 = MEMORY[0x18D760234](v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
  if (v2)
  {
    v3 = (void *)v2;
    UIScrollView.updateAxesConfiguration(axes:)(*(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes));
    if ((Axis.Set.contains(_:)() & 1) != 0)
    {
      v4 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
      swift_beginAccess();
      v5 = *(unsigned __int8 *)(v4 + 96);
      LODWORD(v4) = *(unsigned __int8 *)(v4 + 113);
      objc_msgSend(v3, sel_setShowsVerticalScrollIndicator_, v5 < 2);
      objc_msgSend(v3, sel_setAlwaysBounceVertical_, (_DWORD)v4 != 2);
    }
    else
    {
      objc_msgSend(v3, sel_setShowsVerticalScrollIndicator_, 0);
      objc_msgSend(v3, sel_setAlwaysBounceVertical_, 0);
    }
    if ((Axis.Set.contains(_:)() & 1) != 0)
    {
      v6 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
      swift_beginAccess();
      v7 = *(unsigned __int8 *)(v6 + 120);
      LODWORD(v6) = *(unsigned __int8 *)(v6 + 137);
      objc_msgSend(v3, sel_setShowsHorizontalScrollIndicator_, v7 < 2);
      v8 = (_DWORD)v6 != 2;
    }
    else
    {
      objc_msgSend(v3, sel_setShowsHorizontalScrollIndicator_, 0);
      v8 = 0;
    }
    objc_msgSend(v3, sel_setAlwaysBounceHorizontal_, v8);

  }
}

id UIScrollView.updateAxesConfiguration(axes:)(char a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  id result;

  if ((a1 != 0) != objc_msgSend(v1, sel__adjustsContentInsetWhenScrollDisabled))
    objc_msgSend(v1, sel__setAdjustsContentInsetWhenScrollDisabled_, a1 != 0);
  v3 = Axis.Set.contains(_:)() & 1;
  if ((_DWORD)v3 != objc_msgSend(v1, sel__contentScrollsAlongYAxis))
    objc_msgSend(v1, sel__setContentScrollsAlongYAxis_, v3);
  v4 = Axis.Set.contains(_:)() & 1;
  result = objc_msgSend(v1, sel__contentScrollsAlongXAxis);
  if ((_DWORD)v4 != (_DWORD)result)
    return objc_msgSend(v1, sel__setContentScrollsAlongXAxis_, v4);
  return result;
}

uint64_t UIScrollView.updateIndicatorInsets(margins:axes:properties:safeArea:)(uint64_t *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  id v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  _BYTE *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  _BOOL4 v42;
  _BOOL4 v43;
  char **v44;
  double v45;
  double v46;
  double v47;
  double v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  double v52;
  double v53;
  double v54;
  double v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char v104[32];

  v5 = v4;
  outlined init with take of EdgeInsets?(a4, (uint64_t)&v103);
  v62 = *a1;
  v69 = *((_BYTE *)a1 + 8);
  v68 = a1[2];
  v67 = *((_BYTE *)a1 + 24);
  v66 = a1[4];
  v65 = *((_BYTE *)a1 + 40);
  v64 = a1[6];
  v63 = *((_BYTE *)a1 + 56);
  v8 = a1[16];
  v61 = *((_BYTE *)a1 + 136);
  v9 = a1[18];
  v10 = *((_BYTE *)a1 + 152);
  v11 = a1[20];
  v12 = *((_BYTE *)a1 + 168);
  v13 = a1[22];
  v14 = *((_BYTE *)a1 + 184);
  v15 = objc_msgSend(v5, sel_traitCollection);
  objc_msgSend(v15, sel_displayScale);

  static EdgeInsets.zero.getter();
  outlined init with take of EdgeInsets?(a4, (uint64_t)v104);
  EdgeInsets.rounded(toMultipleOf:)();
  static Edge.Set.all.getter();
  OptionalEdgeInsets.init()();
  v87 = v8;
  v88 = v61;
  v89 = v9;
  v90 = v10;
  v91 = v11;
  v92 = v12;
  v93 = v13;
  v94 = v14;
  static OptionalEdgeInsets.none.getter();
  v71 = v79;
  v72 = v80;
  v73 = v81;
  v74 = v82;
  v75 = v83;
  v76 = v84;
  v77 = v85;
  v78 = v86;
  v16 = MEMORY[0x18D7593E8](&v87, &v71);
  v17 = v62;
  if ((v16 & 1) == 0)
    v17 = v8;
  v95 = v17;
  v18 = v69;
  if ((v16 & 1) == 0)
    v18 = v61;
  v96 = v18;
  v19 = v68;
  if ((v16 & 1) == 0)
    v19 = v9;
  v97 = v19;
  v20 = v67;
  if ((v16 & 1) == 0)
    v20 = v10;
  v21 = v66;
  if ((v16 & 1) == 0)
    v21 = v11;
  v98 = v20;
  v22 = v65;
  if ((v16 & 1) == 0)
    v22 = v12;
  v23 = v64;
  if ((v16 & 1) == 0)
    v23 = v13;
  v99 = v21;
  v24 = v63;
  if ((v16 & 1) == 0)
    v24 = v14;
  v100 = v22;
  v101 = v23;
  v102 = v24;
  OptionalEdgeInsets.in(edges:)();
  EdgeInsets.rounded(toMultipleOf:)();
  EdgeInsets.adding(_:)();
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v33 = *(unsigned __int8 *)(a3 + 81);
  v34 = static Axis.allCases.getter();
  v35 = *(_QWORD *)(v34 + 16);
  if (v35)
  {
    if (v33)
      v36 = v32;
    else
      v36 = v28;
    if (!v33)
      v28 = v32;
    v37 = (_BYTE *)(v34 + 32);
    v38 = *MEMORY[0x1E0DC49E8];
    v39 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
    v40 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
    v41 = *(double *)(MEMORY[0x1E0DC49E8] + 24);
    v42 = v26 == *MEMORY[0x1E0DC49E8];
    if (v36 != v39)
      v42 = 0;
    if (v30 != v40)
      v42 = 0;
    v43 = v28 == v41 && v42;
    do
    {
      if (((a2 >> *v37) & 1) != 0)
      {
        if (*v37)
        {
          v44 = &selRef_setVerticalScrollIndicatorInsets_;
          if (v43)
          {
            objc_msgSend(v5, sel_verticalScrollIndicatorInsets);
            v49 = v48 == v38 && v45 == v39;
            v50 = v49 && v46 == v40;
            v51 = v50 && v47 == v41;
            v44 = &selRef_setVerticalScrollIndicatorInsets_;
            if (v51)
              goto LABEL_31;
          }
        }
        else
        {
          v44 = &selRef_setHorizontalScrollIndicatorInsets_;
          if (v43)
          {
            objc_msgSend(v5, sel_horizontalScrollIndicatorInsets);
            v56 = v55 == v38 && v52 == v39;
            v57 = v56 && v53 == v40;
            v58 = v57 && v54 == v41;
            v44 = &selRef_setHorizontalScrollIndicatorInsets_;
            if (v58)
              goto LABEL_31;
          }
        }
        objc_msgSend(v5, *v44, v26, v36, v30, v28);
      }
LABEL_31:
      ++v37;
      --v35;
    }
    while (v35);
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with take of EdgeInsets?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  uint64_t v6;

  type metadata accessor for EdgeInsets?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with take of PlatformItem.PrimaryContent?(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;

  type metadata accessor for AccessibilityValueStorage?(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t LazyPageTabView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  _QWORD v36[2];
  _QWORD v37[3];
  char v38;
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](a1, v3);
  v9 = (char *)&v36[-2] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v6 + 16))(v9, v8);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(a1 + 16);
  v35 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v11 + 24) = v35;
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v11 + 40) = v12;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, v9, a1);
  v13 = type metadata accessor for ModifiedContent();
  v14 = type metadata accessor for ModifiedContent();
  v43[0] = v12;
  v43[1] = &protocol witness table for ContainerRelativeFrameModifier;
  v15 = MEMORY[0x1E0CE2E70];
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v43);
  v17 = lazy protocol witness table accessor for type LazyPageTabModifier and conformance LazyPageTabModifier();
  v42[0] = v16;
  v42[1] = v17;
  v18 = MEMORY[0x18D75FFDC](v15, v14, v42);
  type metadata accessor for LazyHStack(255, v14, v18, v19);
  v20 = type metadata accessor for ModifiedContent();
  v41[0] = &protocol witness table for LazyHStack<A>;
  v41[1] = &protocol witness table for TransformScrollIndicators;
  v21 = MEMORY[0x18D75FFDC](v15, v20, v41);
  v23 = type metadata accessor for PagingScrollView(255, v20, v21, v22);
  v24 = type metadata accessor for ModifiedContent();
  v25 = type metadata accessor for ModifiedContent();
  v40[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PagingScrollView<A>, v23);
  v40[1] = &protocol witness table for TransformScrollIndicators;
  v39[0] = MEMORY[0x18D75FFDC](v15, v24, v40);
  v39[1] = MEMORY[0x1E0CE6460];
  v26 = MEMORY[0x18D75FFDC](v15, v25, v39);
  v48 = ScrollViewReader.init(content:)(partial apply for closure #1 in LazyPageTabView.body.getter, v11, v25, v26);
  v49 = v27;
  swift_getKeyPath();
  LOBYTE(v37[0]) = 4;
  v29 = type metadata accessor for ScrollViewReader(0, v25, v26, v28);
  v30 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewReader<A>, v29);
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  v37[0] = v44;
  v37[1] = v45;
  v37[2] = v46;
  v38 = v47;
  type metadata accessor for _EnvironmentKeyWritingModifier<TabBarPlacement?>();
  v31 = type metadata accessor for ModifiedContent();
  v32 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TabBarPlacement?>, MEMORY[0x1E0CE65C0]);
  v36[0] = v30;
  v36[1] = v32;
  v33 = MEMORY[0x18D75FFDC](v15, v31, v36);
  static ViewBuilder.buildExpression<A>(_:)(v37, v31, v33);
  swift_release();
  swift_release();
  v44 = v48;
  v45 = v49;
  v46 = v50;
  v47 = v51;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v44, v31, a2);
  swift_release();
  return swift_release();
}

uint64_t outlined init with take of CGFloat?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CGFloat?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CGFloat?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?);
  }
}

uint64_t outlined destroy of TableRowID?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v5;

  v5 = a4(0, a2, a3, MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined init with take of Binding<SearchFieldState>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t outlined init with copy of ObservationTracking._AccessList?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x1E0DEFD28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Any?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Any?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance PlatformViewLayoutEngine<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PlatformViewLayoutEngine.explicitAlignment(_:at:)(a1, a2, a3);
}

uint64_t PlatformViewLayoutEngine.explicitAlignment(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v26;
  double v27;

  if (static VerticalAlignment.firstTextBaseline.getter() == a1)
  {
    v7 = v3 + *(int *)(a3 + 36);
    v8 = type metadata accessor for ViewLeafView(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v6);
    v9 = *(void **)(v7 + *(int *)(v8 + 36));
    MEMORY[0x18D75BE3C](v8, v10, v11, v12);
    objc_msgSend(v9, sel__baselineOffsetsAtSize_);
    if ((v13 & 0xFFFFFFFFFFFFFLL) != 0 && (~v13 & 0x7FF0000000000000) == 0)
      return 0;
    else
      return v13;
  }
  else if (static VerticalAlignment.lastTextBaseline.getter() == a1)
  {
    v17 = v3 + *(int *)(a3 + 36);
    v18 = type metadata accessor for ViewLeafView(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v16);
    v19 = *(void **)(v17 + *(int *)(v18 + 36));
    MEMORY[0x18D75BE3C](v18, v20, v21, v22);
    objc_msgSend(v19, sel__baselineOffsetsAtSize_);
    v24 = v23;
    if ((~*(_QWORD *)&v23 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v23 & 0xFFFFFFFFFFFFFLL) == 0)
    {
      ViewSize.height.getter();
      v27 = v26 - v24;
    }
    else
    {
      ViewSize.height.getter();
    }
    return *(_QWORD *)&v27;
  }
  else
  {
    return 0;
  }
}

double PlatformViewLayoutEngine.sizeThatFits(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  int v18;
  double v19;
  double v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  int v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;

  v23 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = type metadata accessor for ViewLeafView(0, v23, v7, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v22 - v12;
  v14 = *a1;
  v15 = *((_BYTE *)a1 + 8);
  v16 = a1[2];
  LOBYTE(a1) = *((_BYTE *)a1 + 24);
  v33 = v14;
  v34 = v15;
  v35 = v16;
  v36 = (char)a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v22 - v12, v4 + *(int *)(a2 + 36), v8, v11);
  v17 = *(_DWORD *)(v4 + *(int *)(a2 + 40));
  v18 = *(_DWORD *)(v4 + *(int *)(a2 + 44));
  v24 = v23;
  v25 = v7;
  v26 = v13;
  v27 = v14;
  v28 = v15;
  v29 = v16;
  v30 = (char)a1;
  v31 = v17;
  v32 = v18;
  ViewSizeCache.get(_:makeValue:)();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  return v20;
}

uint64_t type metadata accessor for ViewLeafView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewLeafView);
}

uint64_t destroy for ViewLeafView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id *v4;
  uint64_t AssociatedTypeWitness;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = (id *)((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(((unint64_t)v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t initializeWithCopy for ViewLeafView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  void *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  id v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  *v7 = *v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((unint64_t)v7 + v12 + 8) & ~v12;
  v14 = ((unint64_t)v8 + v12 + 8) & ~v12;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v16 = v9;
  v15(v13, v14, AssociatedTypeWitness);
  return a1;
}

uint64_t specialized FloatingPoint.round(_:toMultipleOf:)(uint64_t a1, double a2)
{
  double *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;

  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v20 - v12;
  if (a2 != 1.0)
  {
    v16 = *v2 / a2;
    *v2 = v16;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
    if ((_DWORD)result == *MEMORY[0x1E0DED4F0])
    {
      v17 = round(v16);
    }
    else if ((_DWORD)result == *MEMORY[0x1E0DED4E8])
    {
      v17 = rint(v16);
    }
    else if ((_DWORD)result == *MEMORY[0x1E0DED500])
    {
      v17 = ceil(v16);
    }
    else if ((_DWORD)result == *MEMORY[0x1E0DED508])
    {
      v17 = floor(v16);
    }
    else if ((_DWORD)result == *MEMORY[0x1E0DED4D8])
    {
      v17 = trunc(v16);
    }
    else if ((_DWORD)result == *MEMORY[0x1E0DED4E0])
    {
      v17 = ceil(v16);
      v19 = floor(v16);
      if (v16 < 0.0)
        v17 = v19;
    }
    else
    {
      Double._roundSlowPath(_:)();
      result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      v17 = *v2;
    }
    v15 = v17 * a2;
    goto LABEL_34;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v20 - v12, a1, v5);
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v13, v5);
  if ((_DWORD)result != *MEMORY[0x1E0DED4F0])
  {
    if ((_DWORD)result == *MEMORY[0x1E0DED4E8])
    {
      v15 = rint(*v2);
      goto LABEL_34;
    }
    if ((_DWORD)result == *MEMORY[0x1E0DED500])
    {
      v18 = *v2;
LABEL_12:
      v15 = ceil(v18);
      goto LABEL_34;
    }
    if ((_DWORD)result == *MEMORY[0x1E0DED508])
    {
      v18 = *v2;
    }
    else
    {
      if ((_DWORD)result == *MEMORY[0x1E0DED4D8])
      {
        v15 = trunc(*v2);
        goto LABEL_34;
      }
      if ((_DWORD)result != *MEMORY[0x1E0DED4E0])
      {
        Double._roundSlowPath(_:)();
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v13, v5);
      }
      v18 = *v2;
      if ((*(_QWORD *)v2 & 0x8000000000000000) == 0)
        goto LABEL_12;
    }
    v15 = floor(v18);
    goto LABEL_34;
  }
  v15 = round(*v2);
LABEL_34:
  *v2 = v15;
  return result;
}

{
  double *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;

  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v20 - v12;
  if (a2 != 1.0)
  {
    v16 = *v2 / a2;
    *v2 = v16;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v20 - v12, a1, v5);
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v13, v5);
    if ((_DWORD)result == *MEMORY[0x1E0DED4F0])
    {
      v17 = round(v16);
    }
    else if ((_DWORD)result == *MEMORY[0x1E0DED4E8])
    {
      v17 = rint(v16);
    }
    else if ((_DWORD)result == *MEMORY[0x1E0DED500])
    {
      v17 = ceil(v16);
    }
    else if ((_DWORD)result == *MEMORY[0x1E0DED508])
    {
      v17 = floor(v16);
    }
    else if ((_DWORD)result == *MEMORY[0x1E0DED4D8])
    {
      v17 = trunc(v16);
    }
    else if ((_DWORD)result == *MEMORY[0x1E0DED4E0])
    {
      v17 = ceil(v16);
      v19 = floor(v16);
      if (v16 < 0.0)
        v17 = v19;
    }
    else
    {
      Double._roundSlowPath(_:)();
      result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v13, v5);
      v17 = *v2;
    }
    v15 = v17 * a2;
    goto LABEL_33;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
  if ((_DWORD)result == *MEMORY[0x1E0DED4F0])
  {
    v15 = round(*v2);
  }
  else if ((_DWORD)result == *MEMORY[0x1E0DED4E8])
  {
    v15 = rint(*v2);
  }
  else
  {
    if ((_DWORD)result == *MEMORY[0x1E0DED500])
    {
      v18 = *v2;
    }
    else
    {
      if ((_DWORD)result == *MEMORY[0x1E0DED508])
      {
        v15 = floor(*v2);
        goto LABEL_33;
      }
      if ((_DWORD)result == *MEMORY[0x1E0DED4D8])
      {
        v15 = trunc(*v2);
        goto LABEL_33;
      }
      if ((_DWORD)result != *MEMORY[0x1E0DED4E0])
      {
        Double._roundSlowPath(_:)();
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      }
      v18 = *v2;
      if ((*(_QWORD *)v2 & 0x8000000000000000) != 0)
      {
        v15 = floor(v18);
        goto LABEL_33;
      }
    }
    v15 = ceil(v18);
  }
LABEL_33:
  *v2 = v15;
  return result;
}

uint64_t destroy for ButtonBehavior(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 56))
    swift_release();
  return swift_release();
}

double ViewLeafView.sizeThatFits(in:environment:context:)(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  _QWORD v17[2];

  v4 = *a1;
  v5 = *((_BYTE *)a1 + 8);
  v6 = a1[2];
  v7 = *((_BYTE *)a1 + 24);
  v17[0] = 0;
  v17[1] = 0;
  v9[1] = *(_OWORD *)(a4 + 16);
  v10 = a2;
  v11 = a3;
  v12 = v4;
  v13 = v5;
  v14 = v6;
  v15 = v7;
  v16 = v17;
  MEMORY[0x18D75B938](partial apply for closure #1 in ViewLeafView.sizeThatFits(in:environment:context:), v9);
  return *(double *)v17;
}

uint64_t closure #1 in ViewLeafView.sizeThatFits(in:environment:context:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t result;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t AssociatedTypeWitness;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  unsigned __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v58 = a8;
  v65 = a7;
  v64 = a6;
  v63 = a5;
  v59 = a3;
  LODWORD(v56) = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v57 = *(char **)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v14 = (char *)&v53 - v13;
  v15 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (uint64_t)&v53 - v18;
  v61 = type metadata accessor for PlatformViewRepresentableContext(0, a9, a10, v20);
  v60 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61, v21);
  v23 = (char *)&v53 - v22;
  v25 = type metadata accessor for ViewLeafView(0, a9, a10, v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v19, a1 + *(int *)(v25 + 40), v15);
  v70 = v56 | (unsigned __int128)(unint64_t)(v59 << 32);
  LOBYTE(v71) = 1;
  PlatformViewRepresentableContext.init(coordinator:preferenceBridge:transaction:environmentStorage:)(v19, 0, 0, (uint64_t)&v70, a9, a10, (uint64_t)v23);
  v56 = a4;
  *(_QWORD *)&v70 = a4;
  BYTE8(v70) = v63 & 1;
  v71 = v64;
  LOBYTE(v72) = v65 & 1;
  v26 = ProposedViewSize.init(_:)();
  LOBYTE(v19) = v27;
  LOBYTE(v16) = v28;
  v59 = v25;
  ViewLeafView.representedViewProvider.getter(v25, (uint64_t)v14);
  v29 = *(uint64_t (**)(uint64_t))(a10 + 96);
  LOBYTE(v70) = v19 & 1;
  LOBYTE(v66) = v16 & 1;
  v30 = v29(v26);
  v32 = v31;
  LOBYTE(v19) = v33;
  v34 = (void (*)(char *, uint64_t))*((_QWORD *)v57 + 1);
  v57 = v14;
  v34(v14, AssociatedTypeWitness);
  if ((v19 & 1) != 0)
  {
    v54 = (void (*)(uint64_t, uint64_t))v34;
    v55 = v23;
    v37 = v58;
    LODWORD(v70) = -1;
    if ((isLinkedOnOrAfter(_:)() & 1) != 0
      || (lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature(),
          (static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0))
    {
      v38 = v56;
      *(_QWORD *)&v70 = v56;
      v39 = v63;
      BYTE8(v70) = v63 & 1;
      v40 = v64;
      v71 = v64;
      v41 = v65;
      LOBYTE(v72) = v65 & 1;
      ViewLeafView.unifiedLayoutSize(in:)((uint64_t *)&v70, v59);
    }
    else
    {
      ViewLeafView.layoutTraits()(v59, &v70);
      v44 = v70;
      v45 = v71;
      v46 = v72;
      v47 = v73;
      v48 = v74;
      v38 = v56;
      v66 = v56;
      v39 = v63;
      v67 = v63 & 1;
      v40 = v64;
      v68 = v64;
      v41 = v65;
      v69 = v65 & 1;
      _LayoutTraits.idealSize.getter();
      _ProposedSize.fixingUnspecifiedDimensions(at:)((CGSize)__PAIR128__(v50, v49));
      v70 = v44;
      v71 = v45;
      v72 = v46;
      v73 = v47;
      v74 = v48;
      CGSize.clamped(to:)();
    }
    v51 = v60;
    *v37 = v42;
    v37[1] = v43;
    *(_QWORD *)&v70 = v38;
    BYTE8(v70) = v39 & 1;
    v71 = v40;
    LOBYTE(v72) = v41 & 1;
    v52 = (uint64_t)v57;
    ViewLeafView.representedViewProvider.getter(v59, (uint64_t)v57);
    (*(void (**)(uint64_t *, unsigned __int128 *, uint64_t, uint64_t, uint64_t))(a10 + 104))(v37, &v70, v52, a9, a10);
    v54(v52, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v55, v61);
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v23, v61);
    v36 = v58;
    *v58 = v30;
    v36[1] = v32;
  }
  return result;
}

uint64_t ViewLeafView.representedViewProvider.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;
  char *v5;
  uint64_t AssociatedTypeWitness;

  v4 = *(_QWORD **)(v2 + *(int *)(a1 + 36));
  v5 = (char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x78);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v5, AssociatedTypeWitness);
}

uint64_t PlatformViewRepresentableContext.init(coordinator:preferenceBridge:transaction:environmentStorage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t result;

  v11 = *(_QWORD *)a4;
  v12 = *(_QWORD *)(a4 + 8);
  v13 = *(_BYTE *)(a4 + 16);
  v14 = a7 + *(int *)(type metadata accessor for PlatformViewRepresentableContext(0, a5, a6, a4) + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v14, a1, AssociatedTypeWitness);
  *(_QWORD *)a7 = a2;
  *(_QWORD *)(a7 + 8) = a3;
  *(_QWORD *)(a7 + 16) = v11;
  *(_QWORD *)(a7 + 24) = v12;
  *(_BYTE *)(a7 + 32) = v13;
  return result;
}

uint64_t protocol witness for PlatformViewRepresentable.sizeThatFits(_:provider:context:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  return PlatformViewRepresentableAdaptor.sizeThatFits(_:provider:context:)(a1, a2 & 1, a3, a4 & 1, *a5, a6, a7);
}

uint64_t PlatformViewRepresentableAdaptor.sizeThatFits(_:provider:context:)(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;

  v32 = a5;
  v27 = a6;
  v28 = a2;
  v29 = a4;
  v30 = a1;
  v31 = a3;
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, a7);
  v10 = type metadata accessor for PlatformViewRepresentableContext(0, a7, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v27 - v13;
  v15 = *(_QWORD *)(a7 + 16);
  v16 = *(_QWORD *)(a7 + 24);
  v18 = type metadata accessor for UIViewRepresentableContext(0, v15, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v27 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, v27, v10, v21);
  UIViewRepresentableContext.init<A>(_:)((uint64_t)v14, v15, a7, v16, v8, (uint64_t)v23);
  v24 = *(uint64_t (**)(uint64_t))(v16 + 80);
  v34 = v28 & 1;
  v33 = v29 & 1;
  v25 = v24(v30);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
  return v25;
}

uint64_t UIViewRepresentableContext.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t result;

  v10 = type metadata accessor for PlatformViewRepresentableContext(0, a3, a5, a4);
  v11 = a1 + *(int *)(v10 + 36);
  v13 = a6 + *(int *)(type metadata accessor for UIViewRepresentableContext(0, a2, a4, v12) + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v13, v11, AssociatedTypeWitness);
  v15 = protocol witness for ArchivedViewHostStates.count.getter in conformance _ArchivedViewHost<A, B>.LegacyStates();
  v16 = specialized ReferenceFileDocumentConfiguration.document.getter();
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 24);
  v19 = *(_BYTE *)(a1 + 32);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v17, v18, v19);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  *(_QWORD *)a6 = v15;
  *(_QWORD *)(a6 + 8) = v16;
  *(_QWORD *)(a6 + 16) = v17;
  *(_QWORD *)(a6 + 24) = v18;
  *(_BYTE *)(a6 + 32) = v19;
  return result;
}

uint64_t type metadata accessor for PlatformViewRepresentableContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformViewRepresentableContext);
}

uint64_t type metadata accessor for UIViewRepresentableContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIViewRepresentableContext);
}

uint64_t destroy for PlatformViewRepresentableContext(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t outlined consume of RepresentableContextValues.EnvironmentStorage(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for PlatformViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, v7);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((*(unsigned __int8 *)(v9 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t outlined copy of RepresentableContextValues.EnvironmentStorage(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t destroy for UIViewRepresentableContext(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance ScrollableItemLayoutComputer._LayoutEngine()
{
  return LayoutEngine.explicitAlignment(_:at:)();
}

uint64_t key path getter for EnvironmentValues.layoutDirection : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.layoutDirection.getter();
  *a1 = v3;
  return result;
}

uint64_t EnvironmentValues.effectiveForegroundStyle.getter()
{
  return EnvironmentValues._effectiveForegroundStyle.getter();
}

double IncrementalLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *((_BYTE *)v10 + 8);
  v12 = v10[2];
  v13 = *((_BYTE *)v10 + 24);
  v30 = *v10;
  v9 = v30;
  v31 = v11;
  v32 = v12;
  v33 = v13;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v5 + 16))(v8, v2, v4, v6);
  v14 = *(int *)(a2 + 36);
  v15 = *(_QWORD *)(v2 + *(int *)(a2 + 40));
  v16 = *(_QWORD *)(a2 + 24);
  v21 = v4;
  v22 = v16;
  v23 = *(_OWORD *)(v2 + v14);
  v24 = v15;
  v25 = v8;
  v26 = v9;
  v27 = v11;
  v28 = v12;
  v29 = v13;
  swift_retain();
  ViewSizeCache.get(_:makeValue:)();
  v18 = v17;
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  return v18;
}

uint64_t outlined consume of ContentTransition.Storage(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined copy of ContentTransition.Storage(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRetain();
  return result;
}

void protocol witness for GraphDelegate.graphDidChange() in conformance _UIHostingView<A1>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, a1);
  ViewRendererHost.graphDidChange()();
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance _UIHostingView<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, a4);
  return ViewGraphDelegate.updateGraph<A>(body:)();
}

void type metadata accessor for CGSize(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for CGSize);
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance _UIHostingView<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, a4);
  return ViewRendererHost.updateViewGraph<A>(body:)();
}

Swift::Void __swiftcall _UIHostingView.layoutSubviews()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  objc_class *v3;
  id v4;
  uint64_t v5;
  double v6;
  __n128 v7;
  double v8;
  char v9;
  objc_super v10;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x58), v0);
  v10.receiver = v1;
  v10.super_class = v3;
  objc_msgSendSuper2(&v10, sel_layoutSubviews);
  v4 = objc_msgSend(v1, sel_window);
  if (v4)
  {

    if (*((_BYTE *)v1 + *(_QWORD *)((*v2 & *v1) + 0x158)) == 1)
    {
      static Update.lock()();
      _UIHostingView.cancelAsyncRendering()();
      v5 = *(_QWORD *)((char *)v1 + *(_QWORD *)((*v2 & *v1) + 0x148));
      if (!v5
        || (v6 = *(double *)(v5 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate),
            static Time.infinity.getter(),
            v7.n128_f64[0] = v8,
            v6 >= v8))
      {
        v8 = CACurrentMediaTime();
        _UIHostingView.renderInterval(timestamp:)(&v8);
        UIAnimationDragCoefficient();
        v7.n128_f64[0] = v7.n128_f32[0];
      }
      v8 = 0.0;
      v9 = 1;
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v3, v7);
      ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
      static Update.unlock()();
    }
  }
}

double _UIHostingView.renderInterval(timestamp:)(double *a1)
{
  _QWORD *v1;
  double v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v8;
  double result;

  v2 = *a1;
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *MEMORY[0x1E0DEEDD8] & *v1;
  v5 = *(_QWORD *)(v4 + 0x150);
  v6 = *(double *)((char *)v1 + v5);
  if (v6 == 0.0 || v2 < v6)
  {
    *(double *)((char *)v1 + v5) = v2 + -0.000001;
    v4 = *v3 & *v1;
  }
  v8 = *(_QWORD *)(v4 + 336);
  result = v2 - *(double *)((char *)v1 + v8);
  *(double *)((char *)v1 + v8) = v2;
  return result;
}

uint64_t _UIHostingView.renderingPhase.getter@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x90);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

Swift::Void __swiftcall _UIHostingView.requestUpdate(after:)(Swift::Double after)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  float v20;
  double v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t (*v27)(uint64_t);
  double aBlock[6];

  v2 = v1;
  v4 = *v1;
  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = *MEMORY[0x1E0DEEDD8];
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&aBlock[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Update.lock()();
  if (after != 0.0
    || (v17 = *(_QWORD *)((char *)v2 + *(_QWORD *)((*v5 & *v2) + 0x68)),
        swift_beginAccess(),
        *(_BYTE *)(v17 + 168) == 1)
    && (v18 = specialized _UIHostingView.displayLink.getter()) != 0
    && (v19 = *(double *)(v18 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate),
        static Time.infinity.getter(),
        v19 < aBlock[0]))
  {
    UIAnimationDragCoefficient();
    v21 = v20 * after;
    if (v21 >= 0.25)
      _UIHostingView.startUpdateTimer(delay:)(v21);
    else
      _UIHostingView.startDisplayLink(delay:)(v21);
  }
  else if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
  {
    _UIHostingView.requestImmediateUpdate()();
  }
  else
  {
    v22 = v6 & v4;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v23 = (void *)static OS_dispatch_queue.main.getter();
    v24 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = *(_QWORD *)(v22 + 80);
    v25[3] = *(_QWORD *)(v22 + 88);
    v25[4] = v24;
    *(_QWORD *)&aBlock[4] = partial apply for closure #1 in _UIHostingView.requestUpdate(after:);
    *(_QWORD *)&aBlock[5] = v25;
    *(_QWORD *)&aBlock[0] = MEMORY[0x1E0C809B0];
    *(_QWORD *)&aBlock[1] = 1107296256;
    *(_QWORD *)&aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    *(_QWORD *)&aBlock[3] = &block_descriptor_9;
    v26 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    *(_QWORD *)&aBlock[0] = MEMORY[0x1E0DEE9D8];
    v27 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], v27, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x18D75D930](0, v16, v11, v26);
    _Block_release(v26);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  static Update.unlock()();
}

Swift::Void __swiftcall _UIHostingView.requestImmediateUpdate()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t (*v18)(uint64_t);
  _QWORD aBlock[6];

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  _UIHostingView.cancelAsyncRendering()();
  if ((_UIHostingView.updatesWillBeVisible.getter() & 1) != 0)
  {
    objc_msgSend(v0, sel_setNeedsLayout);
    static CoreTesting.needsRender.setter();
  }
  else if ((_UIHostingView.pendingPreferencesUpdate.getter() & 1) == 0)
  {
    v13 = v2 & v1;
    _UIHostingView.pendingPreferencesUpdate.setter(1);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v14 = (void *)static OS_dispatch_queue.main.getter();
    v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v16 = (_QWORD *)swift_allocObject();
    v16[2] = *(_QWORD *)(v13 + 80);
    v16[3] = *(_QWORD *)(v13 + 88);
    v16[4] = v15;
    aBlock[4] = partial apply for closure #1 in _UIHostingView.requestImmediateUpdate();
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_31;
    v17 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    v18 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], v18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x18D75D930](0, v12, v7, v17);
    _Block_release(v17);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

Swift::Void __swiftcall _UIHostingView.cancelAsyncRendering()()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for ()?, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  static Update.locked<A>(_:)();
}

uint64_t _UIHostingView.updatesWillBeVisible.getter()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  unint64_t v3;
  _QWORD *v4;
  _BYTE *v5;

  v1 = _UIHostingView.sceneActivationState.getter();
  if ((v2 & 1) != 0)
    return 0;
  v3 = v1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8);
  swift_beginAccess();
  if ((*v5 & 1) != 0)
    return 0;
  if (v3 < 2 || (*((_BYTE *)v0 + *(_QWORD *)((*v4 & *v0) + 0x278)) & 1) != 0)
    return 1;
  return *((unsigned __int8 *)v0 + *(_QWORD *)((*v4 & *v0) + 0x288));
}

uint64_t _UIHostingView.sceneActivationState.getter()
{
  _QWORD *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, sel_window);
  v2 = objc_msgSend(v1, sel__windowHostingScene);

  if (v2)
    return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270));
  else
    return 0;
}

uint64_t _UIHostingView._sceneActivationState.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270));
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.setter in conformance _UIHostingView<A>(char *a1)
{
  char v2;

  v2 = *a1;
  return _UIHostingView.renderingPhase.setter(&v2);
}

uint64_t _UIHostingView.renderingPhase.setter(char *a1)
{
  _QWORD *v1;
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x90);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t protocol witness for ViewRendererHost.viewGraph.getter in conformance _UIHostingView<A>()
{
  specialized _UIHostingView.viewGraph.getter();
  return swift_retain();
}

uint64_t _UIHostingView.viewGraph.getter()
{
  specialized _UIHostingView.viewGraph.getter();
  return swift_retain();
}

uint64_t _UIHostingView.propertiesNeedingUpdate.getter@<X0>(_WORD *a1@<X8>)
{
  _QWORD *v1;
  _WORD *v3;
  uint64_t result;

  v3 = (_WORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88));
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

double _UIHostingView.currentTimestamp.getter@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  double *v3;
  double result;

  v3 = (double *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x80));
  swift_beginAccess();
  result = *v3;
  *a1 = *(_QWORD *)v3;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _UIHostingView.currentTimestamp.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*_UIHostingView.currentTimestamp.modify())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

void type metadata accessor for (DisplayList, DisplayList.Version)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (DisplayList, DisplayList.Version))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (DisplayList, DisplayList.Version));
  }
}

uint64_t _UIHostingView.shouldDisableUIKitAnimations.getter()
{
  _QWORD *v0;

  if (!*(_DWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))
    && (*((_BYTE *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8)) & 1) == 0)
  {
    _UIHostingView.isResizingSheet.getter();
  }
  return 0;
}

void sub_186ED4DB4()
{
  JUMPOUT(0x186ED4DA0);
}

void _UIHostingView.isResizingSheet.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, sel_window);
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, sel__rootSheetPresentationController);

    if (!v3)
      _UIHostingView.containingViewController.getter();
    objc_msgSend(v3, sel__isGeneratingAnimations);

  }
  _UIHostingView.containingViewController.getter();
}

void _UIHostingView.containingViewController.getter()
{
  _UIHostingView.viewController.getter();
}

id sub_186ED4ED0(id result, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (!result)
    return objc_msgSend(v10, sel__viewControllerForAncestor);
  return result;
}

void _UIHostingView.viewController.getter()
{
  JUMPOUT(0x18D760234);
}

uint64_t _UIHostingView.pendingPreferencesUpdate.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160));
}

uint64_t (*protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance _UIHostingView<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _UIHostingView.propertiesNeedingUpdate.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*_UIHostingView.propertiesNeedingUpdate.modify())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

void outlined consume of GraphicsImage.Contents(void *a1, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:

      break;
    case 2:
    case 3:
    case 4:
    case 5:
      swift_release();
      break;
    default:
      return;
  }
}

uint64_t outlined copy of AccessibilityImageLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
    outlined copy of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

void outlined consume of GraphicsImage.Contents?(void *a1, char a2)
{
  if (a2 != -1)
    outlined consume of GraphicsImage.Contents(a1, a2);
}

uint64_t outlined consume of AccessibilityImageLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
    outlined consume of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t outlined copy of AccessibilityImageLabel?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF)
    return outlined copy of AccessibilityImageLabel(a1, a2, a3);
  return a1;
}

uint64_t outlined consume of AccessibilityImageLabel?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF)
    return outlined consume of AccessibilityImageLabel(a1, a2, a3);
  return a1;
}

id outlined copy of GraphicsImage.Contents(id result, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:
      result = result;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      result = (id)swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

id outlined copy of GraphicsImage.Contents?(id result, char a2)
{
  if (a2 != -1)
    return outlined copy of GraphicsImage.Contents(result, a2);
  return result;
}

id outlined copy of Image.Location(id result)
{
  if ((unint64_t)result >= 2)
    return result;
  return result;
}

void outlined consume of Image.Location(id a1)
{
  if ((unint64_t)a1 >= 2)

}

void outlined consume of _ShapeStyle_Pack.Fill(unint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  switch(a11)
  {
    case 1:
      swift_release();
      break;
    case 2:
      a1 = a3;
      goto LABEL_4;
    case 3:
LABEL_4:
      outlined consume of Material.ID(a1);
      break;
    case 6:

      break;
    default:
      return;
  }
}

id outlined copy of _ShapeStyle_Pack.Fill(id result, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  switch(a11)
  {
    case 1:
      result = (id)swift_retain();
      break;
    case 2:
      result = a3;
      goto LABEL_4;
    case 3:
LABEL_4:
      result = (id)outlined copy of Material.ID((unint64_t)result);
      break;
    case 6:
      result = a4;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t type metadata accessor for ()()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ();
  if (!lazy cache variable for type metadata for ())
  {
    result = swift_getFunctionTypeMetadata0();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ());
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for ();
  if (!lazy cache variable for type metadata for ())
  {
    result = swift_getFunctionTypeMetadata0();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ());
  }
  return result;
}

uint64_t outlined copy of DisplayList.Item.Value(uint64_t result, unint64_t a2)
{
  unint64_t v2;

  v2 = a2 >> 62;
  if (a2 >> 62 == 2)
    return swift_bridgeObjectRetain();
  if ((_DWORD)v2 == 1)
  {
    outlined copy of DisplayList.Effect(result, a2, SBYTE4(a2));
    return swift_bridgeObjectRetain();
  }
  if (!(_DWORD)v2)
    return outlined copy of DisplayList.Content.Value(result);
  return result;
}

uint64_t outlined copy of DisplayList.Effect(uint64_t result, char a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      result = swift_retain();
      break;
    case 5:
      result = outlined copy of GraphicsBlendMode(result, a2 & 1);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t outlined copy of DisplayList.Content.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of DisplayList.Item.Value(uint64_t result, unint64_t a2)
{
  unint64_t v2;

  v2 = a2 >> 62;
  if (a2 >> 62 == 2)
    return swift_bridgeObjectRelease();
  if ((_DWORD)v2 == 1)
  {
    outlined consume of DisplayList.Effect(result, a2, SBYTE4(a2));
    return swift_bridgeObjectRelease();
  }
  if (!(_DWORD)v2)
    return outlined consume of DisplayList.Content.Value(result);
  return result;
}

uint64_t outlined consume of DisplayList.Effect(uint64_t result, char a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      result = swift_release();
      break;
    case 5:
      result = outlined consume of GraphicsBlendMode(result, a2 & 1);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t outlined consume of DisplayList.Content.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined copy of GraphicsBlendMode(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_unknownObjectRetain();
  return result;
}

uint64_t outlined consume of GraphicsBlendMode(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_unknownObjectRelease();
  return result;
}

uint64_t outlined consume of Path.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 2 <= 3)
    return swift_release();
  return result;
}

unint64_t type metadata accessor for UIView()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIView;
  if (!lazy cache variable for type metadata for UIView)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIView);
  }
  return result;
}

uint64_t outlined copy of Path.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 2 <= 3)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for _UIShapeHitTestingView()
{
  return objc_opt_self();
}

uint64_t outlined init with take of Path.Storage(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE6AD8] - 8) + 32))(a2, a1);
  return a2;
}

unint64_t outlined copy of Material.ID(unint64_t result)
{
  if (result >= 8)
    return swift_retain();
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Any?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t EnvironmentWrapper.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  char v5;
  char *v6;
  _BYTE v7[24];
  uint64_t v8;

  outlined init with copy of Any?(a1, (uint64_t)v7);
  if (v8)
  {
    type metadata accessor for EnvironmentWrapper();
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*(_DWORD *)(v1 + OBJC_IVAR___SwiftUIEnvironmentWrapper_phase) == *(_DWORD *)&v6[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase])
      {
        swift_retain();
        swift_retain();
        v2 = PropertyList.mayNotBeEqual(to:)();
        swift_release();
        swift_release();
        if ((v2 & 1) == 0)
        {
          swift_retain();
          v5 = PropertyList.mayNotBeEqual(to:)();

          swift_release();
          v3 = v5 ^ 1;
          return v3 & 1;
        }
      }

    }
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
  }
  v3 = 0;
  return v3 & 1;
}

uint64_t type metadata accessor for EnvironmentWrapper()
{
  return objc_opt_self();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t outlined consume of Material.ID(unint64_t result)
{
  if (result >= 8)
    return swift_release();
  return result;
}

uint64_t protocol witness for LayoutEngine.lengthThatFits(_:in:) in conformance ScrollableItemLayoutComputer._LayoutEngine()
{
  return LayoutEngine.lengthThatFits(_:in:)();
}

void type metadata accessor for AccessibilityPropertiesEntry<[Image]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Image]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for [Image], MEMORY[0x1E0CE7298], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Image]>);
  }
}

void type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityTraitSet>)
  {
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    v0 = type metadata accessor for AccessibilityNullableOptionSet();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityTraitSet>);
  }
}

void type metadata accessor for IntelligenceAppIntentsPayloadProviding?(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for CVarArg(255, a3);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityVisibility>)
  {
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v0 = type metadata accessor for AccessibilityNullableOptionSet();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityVisibility>);
  }
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  v7 = result;
  *v1 = v3;
  if ((_DWORD)result)
  {
    v8 = *(_QWORD *)(v3 + 24) >> 1;
    if (v8 >= v5)
    {
      if (*(_QWORD *)(v6 + 16))
        goto LABEL_5;
      goto LABEL_12;
    }
  }
  if (v4 <= v5)
    v4 += v2;
  swift_bridgeObjectRetain();
  v3 = MEMORY[0x18D75E3C8](v7, v4, 1, v3);
  result = swift_bridgeObjectRelease();
  *v1 = v3;
  v8 = *(_QWORD *)(v3 + 24) >> 1;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_12:
    if (!v2)
      goto LABEL_13;
    goto LABEL_15;
  }
LABEL_5:
  if (v8 - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  v9 = *(_QWORD *)(*v1 + 16);
  v10 = __OFADD__(v9, v2);
  v11 = v9 + v2;
  if (!v10)
  {
    *(_QWORD *)(*v1 + 16) = v11;
    goto LABEL_13;
  }
LABEL_17:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 4 * v7 + 32), (const void *)(v6 + 32), 4 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 40 * v7 + 32), (const void *)(v6 + 32), 40 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 112 * v7 + 32), (const void *)(v6 + 32), 112 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 32 * v7 + 32), (const void *)(v6 + 32), 32 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 96 * v7 + 32), (const void *)(v6 + 32), 96 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 24 * v7 + 32), (const void *)(v6 + 32), 24 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

double protocol witness for LayoutEngine.sizeThatFits(_:) in conformance ScrollViewLayoutComputer.Engine()
{
  double v0;
  double v1;

  swift_retain();
  ViewSizeCache.get(_:makeValue:)();
  v1 = v0;
  swift_release();
  return v1;
}

unint64_t lazy protocol witness table accessor for type Spacing.Key and conformance Spacing.Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key;
  if (!lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE77A0], MEMORY[0x1E0CE7798]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  _QWORD *v8;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * result);
      if (v8[1] == a2 && *v8 == a1)
        break;
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a2;
  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v5);
      v8 = v7[1];
      v10[0] = *v7;
      v10[1] = v8;
      if ((MEMORY[0x18D756E68](v10, v11) & 1) != 0)
        break;
      v5 = (v5 + 1) & v6;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
        break;
      v5 = (v5 + 1) & v6;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  int32x4_t v7;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7.i64[0] = a1;
    v7.i64[1] = a2;
    do
    {
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*(int32x4_t *)(*(_QWORD *)(v3 + 48) + 16 * result), v7)), 0xFuLL))) & 1) != 0)break;
      result = (result + 1) & ~v5;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;

  Hasher.init(_seed:)();
  _ViewList_ID.Canonical.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>);
  }
}

uint64_t outlined destroy of ImageResolutionContext(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ImageResolutionContext();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined release of TextLayoutProperties(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of TextLayoutProperties(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.setter in conformance _UIHostingView<A>(__int16 *a1)
{
  __int16 v2;

  v2 = *a1;
  return _UIHostingView.propertiesNeedingUpdate.setter(&v2);
}

uint64_t _UIHostingView.propertiesNeedingUpdate.setter(__int16 *a1)
{
  _QWORD *v1;
  __int16 v2;
  _WORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_WORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88));
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t destroy for PlatformViewLayoutEngine(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id *v10;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (a1 + (v5 | v8 | 7) + 161) & ~(unint64_t)(v5 | v8 | 7);
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v9, v3);
  v10 = (id *)((*(_QWORD *)(v4 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);

  return (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v10 + v8 + 8) & ~v8, AssociatedTypeWitness);
}

Swift::Void __swiftcall _UIHostingView.updateTransform()()
{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (!ViewGraph.invalidateTransform()())
  {
    v3 = *(_QWORD *)((*v2 & *v0) + 0x100);
    if (*((_BYTE *)v1 + v3) == 1)
    {
      objc_msgSend(v1, sel__unregisterForGeometryChanges);
      *((_BYTE *)v1 + v3) = 0;
    }
  }
  v4 = (void *)specialized _UIHostingView.inspectorBridge.getter();
  if (v4)
  {
    v5 = v4;
    UIKitInspectorV3Bridge.updateTransform()();

  }
  v6 = (id)specialized _UIHostingView.editMenuBridge.getter();
  EditMenuBridge.transformDidChange()();

  _UIHostingView.viewController.getter();
}

uint64_t sub_186ED60B8(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (a1)
  {
    swift_retain();

    UIKitDialogBridge.transformDidChange()();
    swift_release();
  }
  result = specialized _UIHostingView.sharingActivityPickerBridge.getter();
  if (result)
  {
    swift_retain();
    SharingActivityPickerBridge.transformDidChange()();
    result = swift_release();
  }
  if ((*((_BYTE *)v1 + *(_QWORD *)((*v3 & *v1) + 0xE0) + 32) & 1) == 0)
  {
    v7 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v6);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v7);
    return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  return result;
}

Swift::Void __swiftcall _UIHostingView.updateRootView()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for ModifiedContent();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v13 - v6;
  _UIHostingView.makeRootView()(v8, v9, (uint64_t)v13 - v6);
  v10 = *(_QWORD *)(v1 + 88);
  v11 = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
  v14[0] = v10;
  v14[1] = v11;
  v12 = MEMORY[0x1E0CE2E70];
  v13[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v14);
  v13[1] = MEMORY[0x1E0CE5420];
  MEMORY[0x18D75FFDC](v12, v3, v13);
  ViewGraph.setRootView<A>(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

unint64_t lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EditModeScopeModifier and conformance EditModeScopeModifier;
  if (!lazy protocol witness table cache variable for type EditModeScopeModifier and conformance EditModeScopeModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditModeScopeModifier, &type metadata for EditModeScopeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EditModeScopeModifier and conformance EditModeScopeModifier);
  }
  return result;
}

uint64_t _UIHostingView.makeRootView()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  _QWORD v27[2];
  _BYTE v28[16];
  uint64_t v29;

  v26[1] = a3;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v3);
  v6 = v5[10];
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)v26 - v8;
  v10 = type metadata accessor for ModifiedContent();
  v26[0] = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)v26 - v13;
  v15 = (void *)MEMORY[0x18D760234]((char *)v3 + v5[38], v12);
  v17 = v15;
  if (v15)

  v18 = v17 != 0;
  v19 = v5[11];
  v20 = type metadata accessor for _UIHostingView(0, v6, v19, v16);
  v21 = *v4 & *v3;
  v22 = (char *)v3 + *(_QWORD *)(v21 + 96);
  swift_beginAccess();
  (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(v21 + 80) - 8) + 16))(v9, v22);
  v28[0] = v18;
  v28[8] = 0;
  v29 = 0;
  MEMORY[0x18D75B4AC](v28, v6, &type metadata for EditModeScopeModifier, v19);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v20);
  v23 = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
  v27[0] = v19;
  v27[1] = v23;
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v27);
  MEMORY[0x18D75B4AC](v24, v10, MEMORY[0x1E0CE5428], v24);
  return (*(uint64_t (**)(char *, uint64_t))(v26[0] + 8))(v14, v10);
}

uint64_t initializeWithCopy for ScrollViewLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_retain();
  return a1;
}

double protocol witness for LayoutEngine.layoutPriority() in conformance ScrollableItemLayoutComputer._LayoutEngine()
{
  return 0.0;
}

uint64_t destroy for MultimodalNavigationStackViewHost()
{
  return swift_release();
}

Swift::Void __swiftcall _UIHostingView.updateScrollableContainerSize()()
{
  void *v0;

  objc_msgSend(v0, sel_safeAreaInsets);
  objc_msgSend(v0, sel_bounds);
  CGSize.inset(by:)();
  static ViewSize.fixed(_:)();
  ViewGraph.setScrollableContainerSize(_:)();
}

Swift::Void __swiftcall _UIHostingView.updateSafeArea()()
{
  _QWORD *v0;
  void *v1;
  Swift::OpaquePointer v2;
  Swift::Bool v3;

  v1 = v0;
  v2._rawValue = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x8E0))();
  v3 = ViewGraph.setSafeAreaInsets(_:)(v2);
  swift_bridgeObjectRelease();
  if (v3)
    objc_msgSend(v1, sel_invalidateIntrinsicContentSize);
}

Swift::Void __swiftcall _UIHostingView.updateSize()()
{
  void *v0;
  unint64_t v1;
  unint64_t v2;

  objc_msgSend(v0, sel_bounds);
  ViewGraph.setProposedSize(_:)((CGSize)__PAIR128__(v2, v1));
}

uint64_t initializeWithCopy for PlatformViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void **v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  id v25;
  unint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t AssociatedTypeWitness;

  v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80) & 0xF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 | v14 | 7;
  v16 = (v15 + 161 + a1) & ~v15;
  v17 = (v15 + 161 + a2) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v16, v17, v10);
  v18 = *(_QWORD *)(v11 + 64) + 7;
  v19 = (_QWORD *)((v18 + v16) & 0xFFFFFFFFFFFFFFF8);
  v20 = (void **)((v18 + v17) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  *v19 = *v20;
  v22 = ((unint64_t)v19 + v14 + 8) & ~v14;
  v23 = ((unint64_t)v20 + v14 + 8) & ~v14;
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v25 = v21;
  v24(v22, v23, AssociatedTypeWitness);
  v26 = *(_QWORD *)(v13 + 64) + ((v14 + 8 + (v18 & 0xFFFFFFFFFFFFFFF8)) & ~v14) + 3;
  v27 = (_DWORD *)((v26 + v16) & 0xFFFFFFFFFFFFFFFCLL);
  v28 = (_DWORD *)((v26 + v17) & 0xFFFFFFFFFFFFFFFCLL);
  *v27 = *v28;
  *(_DWORD *)(((unint64_t)v27 + 7) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v28 + 7) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

Swift::Void __swiftcall _UIHostingView.updateFocusStore()()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68));
  swift_beginAccess();
  if ((*(_BYTE *)(v1 + 361) & 0x20) != 0)
  {
    specialized _UIHostingView.focusBridge.getter();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ViewGraph.setFocusStore(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void _UIHostingView.startDisplayLink(delay:)(double a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  double v18;
  id v19;
  uint64_t v20;

  v2 = v1;
  v4 = *v1;
  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = *MEMORY[0x1E0DEEDD8];
  if (!specialized _UIHostingView.displayLink.getter() && (_UIHostingView.updatesAtFullFidelity.getter() & 1) != 0)
  {
    v7 = objc_msgSend(v1, sel_window);
    if (v7)
    {
      v8 = v7;
      v9 = v6 & v4;
      v10 = (char *)objc_allocWithZone((Class)type metadata accessor for DisplayLink());
      v12 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v9 + 80), *(_QWORD *)(v9 + 88), v11);
      v13 = v8;
      specialized DisplayLink.init(host:window:)(v2, v13, v10, v12, (uint64_t)&protocol witness table for _UIHostingView<A>);
      _UIHostingView.displayLink.setter(v14);

    }
  }
  v15 = specialized _UIHostingView.displayLink.getter();
  if (v15)
  {
    v16 = (void *)v15;
    v17 = *(_QWORD *)((char *)v2 + *(_QWORD *)((*v5 & *v2) + 0x68));
    swift_beginAccess();
    v18 = *(double *)(v17 + 384);
    v19 = v16;
    if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) == 0)
      v18 = 0.0;
    v20 = swift_bridgeObjectRetain();
    DisplayLink.setNextUpdate(delay:interval:reasons:)(v20, a1, v18);
    swift_bridgeObjectRelease();
    _UIHostingView.clearUpdateTimer()();

  }
  else
  {
    _UIHostingView.startUpdateTimer(delay:)(a1);
  }
}

Swift::Void __swiftcall _UIHostingView.clearUpdateTimer()()
{
  uint64_t v0;
  char v1;

  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
  {
    objc_msgSend((id)specialized _UIHostingView.updateTimer.getter(), sel_invalidate);
    _UIHostingView.updateTimer.setter(0);
    v0 = 0;
    v1 = 1;
    _UIHostingView.nextTimerTime.setter((uint64_t)&v0);
  }
}

void _UIHostingView.updateTimer.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x178);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

uint64_t _UIHostingView.nextTimerTime.setter(uint64_t result)
{
  _QWORD *v1;
  char v2;
  char *v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x170);
  *(_QWORD *)v3 = *(_QWORD *)result;
  v3[8] = v2;
  return result;
}

uint64_t DisplayLink.setFrameInterval(_:reasons:)(uint64_t a1, Swift::Double a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  CAFrameRateRange v8;

  if (*(double *)(v2 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_interval) != a2)
  {
    *(Swift::Double *)(v2 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_interval) = a2;
    v8 = CAFrameRateRange.init(interval:)(a2);
    v4 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_link);
    if (v4)
      objc_msgSend(v4, sel_setPreferredFrameRateRange_, *(double *)&v8.minimum, *(double *)&v8.maximum, *(double *)&v8.preferred);
  }
  v5 = OBJC_IVAR____TtC7SwiftUI11DisplayLink_reasons;
  result = specialized static Set.== infix(_:_:)(*(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_reasons), a1);
  if ((result & 1) == 0)
  {
    *(_QWORD *)(v2 + v5) = a1;
    swift_bridgeObjectRetain();
    v7 = swift_bridgeObjectRelease();
    MEMORY[0x1E0C80A78](v7, *(_QWORD *)(a1 + 16));
    return AGTupleWithBuffer();
  }
  return result;
}

uint64_t DisplayLink.setNextUpdate(delay:interval:reasons:)(uint64_t a1, double a2, Swift::Double a3)
{
  uint64_t v3;
  double v7;
  double v8;
  void *v9;

  v7 = 0.0;
  if (a2 >= 0.001)
  {
    if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_currentUpdate + 8) & 1) != 0)
      v8 = CACurrentMediaTime();
    else
      v8 = *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_currentUpdate);
    v7 = v8 + a2;
  }
  if (v7 < *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate))
  {
    *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate) = v7;
    v9 = *(void **)(v3 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_link);
    if (v9)
      objc_msgSend(v9, sel_setPaused_, 0);
  }
  return DisplayLink.setFrameInterval(_:reasons:)(a1, a3);
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for CGColorRef);
}

void outlined consume of GraphicsFilter(void *a1, int a2, id a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, char a16)
{
  if (a16 == 15)
  {

  }
  else if (a16 == 1)
  {
    outlined consume of VariableBlurStyle.Mask(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, HIBYTE(a15));
  }
}

Swift::Void __swiftcall _UIHostingView.updateAccessibilityFocusStore()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  _QWORD v7[7];

  v7[6] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68));
  _UIHostingView.currentAccessibilityFocusStore.getter(v7);
  v3 = v7[0];
  v2 = v7[1];
  v4 = v7[2];
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  if (ViewGraph.subscript.getter())
  {
    v7[3] = v3;
    v7[4] = v2;
    v7[5] = v4;
    if ((AGGraphSetValue() & 1) != 0 && (swift_beginAccess(), MEMORY[0x18D760234](v1 + 200)))
    {
      v5 = *(_QWORD *)(v1 + 208);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 16))(ObjectType);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t _UIHostingView.currentAccessibilityFocusStore.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x258));
  v3 = v2[1];
  v4 = v2[2];
  *a1 = *v2;
  a1[1] = v3;
  a1[2] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall _UIHostingView.updateAccessibilityFocus()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;

  v1 = *v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *MEMORY[0x1E0DEEDD8];
  if ((_UIHostingView.accessibilityEnabled.getter() & 1) != 0)
  {
    v5 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v3 & v1) + 0x50), *(_QWORD *)((v3 & v1) + 0x58), v4);
    v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
    specialized static AccessibilityFocus.resolve(within:)((uint64_t)v0, v5, v6);
    v7 = *(uint64_t *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x68));
  }
  else
  {
    v7 = *(uint64_t *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x68));
    v8 = MEMORY[0x1E0DEE9D8];
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
    specialized Dictionary.init(dictionaryLiteral:)(v8);
  }
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  if (ViewGraph.subscript.getter())
  {
    if ((AGGraphSetValue() & 1) != 0 && (swift_beginAccess(), MEMORY[0x18D760234](v7 + 200)))
    {
      v9 = *(_QWORD *)(v7 + 208);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 16))(ObjectType);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTechnology and conformance AccessibilityTechnology;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnology and conformance AccessibilityTechnology)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTechnology, &type metadata for AccessibilityTechnology);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnology and conformance AccessibilityTechnology);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTechnology and conformance AccessibilityTechnology;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnology and conformance AccessibilityTechnology)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTechnology, &type metadata for AccessibilityTechnology);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnology and conformance AccessibilityTechnology);
  }
  return result;
}

Swift::Void __swiftcall _UIHostingView.preferencesDidChange()()
{
  GraphHost.preferenceValues()();
  _UIHostingView.viewController.getter();
}

uint64_t _UIHostingView.sceneBridge.getter()
{
  return swift_weakLoadStrong();
}

Swift::Void __swiftcall _UIHostingView.updateEnvironment()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v1 = v0;
  v2 = *v0;
  v3 = *MEMORY[0x1E0DEEDD8];
  v4 = (void *)specialized _UIHostingView.traitCollectionOverride.getter();
  if (v4)
  {
    v5 = v4;
  }
  else
  {
    v5 = objc_msgSend(v0, sel_traitCollection);
    v4 = 0;
  }
  v6 = v4;
  v7 = objc_msgSend(v5, sel__environmentWrapper);
  if (v7)
  {

    _UIHostingView.inheritedEnvironment.getter(&v18);
    v8 = v18;
    if (v18 == 1)
    {
      UITraitCollection.baseEnvironment.getter(&v19);
      v8 = v19;
    }
  }
  else
  {
    _UIHostingView.inheritedEnvironment.getter(&v18);
    v8 = v18;
    if (v18 == 1)
    {
      _UIHostingView.initialInheritedEnvironment.getter((uint64_t *)&v20);
      v8 = v20;
      if ((_QWORD)v20 == 1)
      {
        UITraitCollection.baseEnvironment.getter(&v19);
        v8 = v19;
      }
      else
      {
        *(_QWORD *)&v19 = v20;
      }
    }
  }
  swift_release();
  v21 = v8;
  _UIHostingView.environmentOverride.getter((uint64_t *)&v19);
  v9 = v19;
  if ((_QWORD)v19 != 1)
  {
    swift_retain();
    PropertyList.override(with:)();
    swift_release();
    outlined consume of EnvironmentValues?(v9);
    v8 = v21;
  }
  v19 = (unint64_t)v8;
  swift_retain();
  UITraitCollection.resolvedEnvironment(base:)(&v19, &v20);
  swift_release();
  v10 = v20;
  v11 = one-time initialization token for configuredForPlatform;
  v12 = v5;
  swift_retain();
  if (v11 != -1)
    swift_once();
  v13 = static EnvironmentValues.configuredForPlatform;
  if (v10)
  {
    swift_release();
    if (v13 && v10 == v13)
      goto LABEL_20;
  }
  else if (!static EnvironmentValues.configuredForPlatform)
  {
LABEL_20:
    EnvironmentValues.plist.setter();
  }
  EnvironmentValues._configureForPlatform(traitCollection:)(v5);

  v14 = *((_QWORD *)&v20 + 1);
  v19 = v20;
  if ((EnvironmentValues.accessibilityInvertColors.getter() & 1) != 0)
  {
    LOBYTE(v19) = _UIHostingView.ancestorHasInvertFilterApplied.getter() & 1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>, (uint64_t)&type metadata for IgnoreInvertColorsFilterActiveKey, (uint64_t)&protocol witness table for IgnoreInvertColorsFilterActiveKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v14)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  if (_UIHostingView.delegate.getter())
  {
    v16 = v15;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, __int128 *, _QWORD, _QWORD, uint64_t, uint64_t))(v16 + 16))(v1, &v20, *(_QWORD *)((v3 & v2) + 0x50), *(_QWORD *)((v3 & v2) + 0x58), ObjectType, v16);
    swift_unknownObjectRelease();
  }
  _UIHostingView.viewController.getter();
}

uint64_t _UIHostingView.delegate.getter()
{
  _QWORD *v0;

  return MEMORY[0x18D760234]((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x240));
}

uint64_t outlined copy of EnvironmentValues?(uint64_t result)
{
  if (result != 1)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t _UIHostingView.accessibilityEnabled.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68));
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 360);
}

uint64_t DeprecatedAlertBridge.update(environment:)(unint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25[2];

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = *(_QWORD *)(v3 + 0x58);
  v5 = type metadata accessor for Optional();
  v23 = *(_QWORD *)(v5 - 8);
  v24 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v23 - v7;
  v9 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v23 - v12;
  v14 = *a1;
  v15 = a1[1];
  v16 = (_QWORD *)((char *)v1 + *(_QWORD *)(v3 + 144));
  *v16 = v14;
  v16[1] = v15;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  DeprecatedAlertBridge.lastPresentation.getter((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v8, v24);
  v18 = v3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v8, v4);
  v19 = (uint64_t)v13;
  if ((*((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xA0)) & 1) == 0)
  {
    v20 = *(void **)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88));
    if (v20)
    {
      v25[0] = v14;
      v25[1] = v15;
      v21 = *(_QWORD *)(v18 + 104);
      v22 = v20;
      PlatformAlertController.update<A>(for:with:environmentChanged:)(v19, v25, 1, v4, v21);

    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v19, v4);
}

uint64_t getEnumTagSinglePayload for Alert.Presentation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 280))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for ActionSheet.Presentation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t DeprecatedAlertBridge.lastPresentation.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  char *v3;
  uint64_t v4;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x98);
  swift_beginAccess();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DeprecatedAlertBridge.lastEnvironment.setter(_OWORD *a1)
{
  _QWORD *v1;

  *(_OWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x90)) = *a1;
  swift_release();
  return swift_release();
}

uint64_t _UIHostingView.inheritedEnvironment.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x118));
  v3 = *v2;
  v4 = v2[1];
  *a1 = *v2;
  a1[1] = v4;
  return outlined copy of EnvironmentValues?(v3);
}

uint64_t outlined destroy of WeakBox<AnyUIKitSensoryFeedbackCache>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for WeakBox<AnyUIKitSensoryFeedbackCache>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of WeakBox<AnyUIKitSensoryFeedbackCache>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakBox<AnyUIKitSensoryFeedbackCache>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of WeakBox<Swift.AnyObject>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakBox<Swift.AnyObject>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void EnvironmentValues.sceneSession.setter(void *a1)
{
  specialized EnvironmentValues.sceneSession.setter((uint64_t)a1);

}

uint64_t ContextMenuBridge.update(environment:)(uint64_t a1)
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ActiveContextMenuKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ActiveContextMenuKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ActiveContextMenuKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.activeContextMenu.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<ActiveContextMenuKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ActiveContextMenuKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ActiveContextMenuKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void _UIHostingView.isPresentedInNavigationController.getter()
{
  _UIHostingView.viewController.getter();
}

uint64_t sub_186ED92E8(void *a1)
{
  id v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  id v6;

  if (a1)
  {
    v2 = objc_msgSend(a1, sel_navigationController);

    if (v2)
    {
      v3 = objc_msgSend(v2, sel_viewControllers);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v4 >> 62)
      {
        swift_bridgeObjectRetain();
        v5 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v5 >= 2)
      {
        v6 = objc_msgSend(v2, sel_topViewController);
        _UIHostingView.viewController.getter();
      }

    }
  }
  return 0;
}

uint64_t _UIHostingView.scenePresentationModeLocation.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230);
  if (*(_QWORD *)((char *)v0 + v1))
  {
    v2 = *(_QWORD *)((char *)v0 + v1);
  }
  else
  {
    v2 = closure #1 in _UIHostingView.presentationModeLocation.getter(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitScenePresentationModeLocation, (uint64_t)&protocol conformance descriptor for UIKitScenePresentationModeLocation<A>, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))UIKitScenePresentationModeLocation.init(host:));
    *(_QWORD *)((char *)v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t _UIHostingView.presentationModeLocation.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228);
  if (*(_QWORD *)((char *)v0 + v1))
  {
    v2 = *(_QWORD *)((char *)v0 + v1);
  }
  else
  {
    v2 = closure #1 in _UIHostingView.presentationModeLocation.getter(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitPresentationModeLocation, (uint64_t)&protocol conformance descriptor for UIKitPresentationModeLocation<A>, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))UIKitPresentationModeLocation.init(host:));
    *(_QWORD *)((char *)v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t _UIHostingView.environmentOverride.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x120));
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return outlined copy of EnvironmentValues?(v4);
}

void _UIHostingView.isPresentedInModalViewController.getter()
{
  _UIHostingView.viewController.getter();
}

uint64_t sub_186ED95A0(uint64_t result)
{
  void *v1;
  id v2;

  if (result)
  {
    v1 = (void *)result;
    v2 = objc_msgSend((id)result, sel_presentingViewController);

    if (v2)
    {

      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t FocusBridge.updateEnvironment(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[3];

  v2 = v1;
  result = FocusBridge.host.getter();
  if (result)
  {
    v5 = (void *)result;
    if (a1[1])
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    swift_weakLoadStrong();
    outlined destroy of WeakBox<FocusBridge>((uint64_t)v26, &lazy cache variable for type metadata for WeakBox<FocusBridge>, v6, (uint64_t (*)(uint64_t))type metadata accessor for FocusBridge, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
    swift_weakAssign();
    swift_release();
    swift_retain();
    specialized EnvironmentValues.focusBridge.setter();
    swift_release();
    v7 = a1[1];
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
    swift_retain_n();
    if (v7)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if ((v26[0] & 1) == 0)
    {
      LOBYTE(v26[0]) = FocusBridge.isHostContainedInFocusedItem.getter() & 1;
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
      swift_retain();
      PropertyList.subscript.setter();
      if (v7)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v8 = objc_msgSend(v5, sel_window);
    if (v8)
    {
      v9 = v8;
      type metadata accessor for UIFocusSystem();
      v10 = v9;
      v11 = (void *)static UIFocusSystem.focusSystem(for:)();

      LOBYTE(v26[0]) = v11 != 0;
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>);
      swift_retain();
      PropertyList.subscript.setter();
      if (v7)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

        swift_release();
        swift_release();
      }
      else
      {

      }
      swift_release();

    }
    swift_weakInit();
    outlined init with copy of _ResetFocusAction((uint64_t)v26, (uint64_t)&v25);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ResetFocusKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    swift_retain();
    PropertyList.subscript.setter();
    if (a1[1])
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined destroy of _ResetFocusAction((uint64_t)v26);
    swift_beginAccess();
    v25 = *(_OWORD *)(v2 + 72);
    v12 = EnvironmentValues.preferenceBridge.getter();
    swift_endAccess();
    if (v12)
      swift_release();
    v14 = *a1;
    v13 = a1[1];
    v26[0] = v14;
    v26[1] = v13;
    if (EnvironmentValues.preferenceBridge.getter())
    {
      swift_release();
      if (v12)
        goto LABEL_29;
      v15 = FocusBridge.host.getter();
      if (!v15)
        goto LABEL_29;
      v17 = (void *)v15;
      v18 = v16;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v18 + 8) + 16))(ObjectType);

      GraphHost.removePreference<A>(_:)();
      GraphHost.removePreference<A>(_:)();
      GraphHost.removePreference<A>(_:)();
    }
    else
    {
      if (!v12)
        goto LABEL_29;
      v20 = FocusBridge.host.getter();
      if (!v20)
        goto LABEL_29;
      v22 = (void *)v20;
      v23 = v21;
      v24 = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v23 + 8) + 16))(v24);

      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();
    }
    swift_release();
LABEL_29:
    swift_beginAccess();
    *(_QWORD *)(v2 + 72) = v14;
    *(_QWORD *)(v2 + 80) = v13;
    swift_retain();
    swift_retain();

    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined destroy of _ResetFocusAction(uint64_t a1)
{
  destroy for ResetFocusAction();
  return a1;
}

uint64_t EnvironmentValues.isFocused.setter(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(a5, a2, a3, a4);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t outlined destroy of WeakBox<FocusBridge>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for WeakBox<FocusBridge>, (uint64_t (*)(uint64_t))type metadata accessor for FocusBridge, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t EnvironmentValues.isFocused.setter(uint64_t a1)
{
  return EnvironmentValues.isFocused.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>, (uint64_t)&type metadata for EnvironmentValues.IsFocusedKey, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusedKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t outlined init with copy of _ResetFocusAction(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TimelineInvalidationAction(a2, a1);
  return a2;
}

uint64_t FocusBridge.isHostContainedInFocusedItem.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;

  v0 = FocusBridge.host.getter();
  if (v0)
  {
    v1 = (void *)v0;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
    v2 = v1;
    v3 = static UIFocusSystem.focusSystem(for:)();

    if (v3)
    {
      v4 = objc_msgSend((id)v3, sel_focusedItem);

      if (v4)
      {
        swift_getObjectType();
        v5 = v2;
        LOBYTE(v3) = UIFocusEnvironment.contains(_:)();
        swift_unknownObjectRelease();

      }
      else
      {
        LOBYTE(v3) = 0;
      }
    }

  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3 & 1;
}

void UITraitCollection.baseEnvironment.getter(_QWORD *a1@<X8>)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = objc_msgSend(v1, sel__environmentWrapper);
  if (!v4)
  {
LABEL_5:
    EnvironmentValues.init()();
    EnvironmentValues.configureForRoot()();
    v9 = one-time initialization token for configuredForPlatform;
    swift_retain();
    if (v9 != -1)
      swift_once();
    v10 = static EnvironmentValues.configuredForPlatform;
    if (v11)
    {
      swift_release();
      if (!v10 || v11 != v10)
        goto LABEL_11;
    }
    else if (static EnvironmentValues.configuredForPlatform)
    {
      goto LABEL_11;
    }
    EnvironmentValues.plist.setter();
LABEL_11:
    EnvironmentValues._configureForPlatform(traitCollection:)(v2);
    v8 = v12;
    v7 = v11;
    goto LABEL_12;
  }
  v5 = v4;
  type metadata accessor for EnvironmentWrapper();
  v6 = swift_dynamicCastClass();
  if (!v6)
  {

    goto LABEL_5;
  }
  v7 = *(_QWORD *)(v6 + OBJC_IVAR___SwiftUIEnvironmentWrapper_environment);
  v8 = *(_QWORD *)(v6 + OBJC_IVAR___SwiftUIEnvironmentWrapper_environment + 8);
  swift_retain();
  swift_retain();

LABEL_12:
  *a1 = v7;
  a1[1] = v8;
}

void closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37[2];
  uint64_t v38;
  uint64_t v39;

  v8 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>);
  swift_retain_n();
  if (a3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v12 = *(_QWORD *)(v38 + 16);
  if (v12)
  {
    v13 = (uint64_t *)(v38 + 40);
    do
    {
      copyValueToMutableTraits #1 <A>(for:) in closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)(*(v13 - 1), (uint64_t)a1, a2, a3, *(v13 - 1), *v13);
      v13 += 2;
      --v12;
    }
    while (v12);
  }
  swift_bridgeObjectRelease();
  v38 = a2;
  v39 = a3;
  EnvironmentValues.layoutDirection.getter();
  v14 = LOBYTE(v37[0]);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (UIMutableTraits.layoutDirection.getter() != v14)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    UIMutableTraits.layoutDirection.setter();
  }
  v38 = a2;
  v39 = a3;
  EnvironmentValues.displayScale.getter();
  v16 = v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  UIMutableTraits.displayScale.getter();
  if (v16 != v17)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    UIMutableTraits.displayScale.setter();
  }
  v38 = a2;
  v39 = a3;
  EnvironmentValues.dynamicTypeSize.getter();
  v18 = (void *)**((_QWORD **)&unk_1E1B5A7E8 + SLOBYTE(v37[0]));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v19 = v18;
  v20 = (void *)UIMutableTraits.preferredContentSizeCategory.getter();
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = v22;
  if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v24)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
      v27 = v19;
      UIMutableTraits.preferredContentSizeCategory.setter();
    }
  }
  v38 = a2;
  v39 = a3;
  EnvironmentValues.colorScheme.getter();
  if (LOBYTE(v37[0]))
    v28 = 2;
  else
    v28 = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (v28 != UIMutableTraits.userInterfaceStyle.getter())
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    UIMutableTraits.userInterfaceStyle.setter();
  }
  v38 = a2;
  v39 = a3;
  EnvironmentValues.displayGamut.getter();
  v29 = LOBYTE(v37[0]);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (UIMutableTraits.displayGamut.getter() != v29)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    UIMutableTraits.displayGamut.setter();
  }
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v38 = a2;
    v39 = a3;
    EnvironmentValues.backgroundMaterial.getter();
    v30 = v37[0];
    outlined consume of Material?(v37[0]);
    if (v30 != 8)
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      if (UIMutableTraits._vibrancy.getter() == -1
        || (__swift_project_boxed_opaque_existential_1(a1, a1[3]), !UIMutableTraits._vibrancy.getter()))
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
        UIMutableTraits._vibrancy.setter();
      }
    }
  }
  v38 = a2;
  v39 = a3;
  EnvironmentValues._colorSchemeContrast.getter();
  v31 = LOBYTE(v37[0]);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (UIMutableTraits.accessibilityContrast.getter() != v31)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    UIMutableTraits.accessibilityContrast.setter();
  }
  v38 = a2;
  v39 = a3;
  EnvironmentValues.horizontalSizeClass.getter();
  v32 = 1;
  if ((v37[0] & 1) != 0)
    v32 = 2;
  if (LOBYTE(v37[0]) == 2)
    v33 = 0;
  else
    v33 = v32;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (v33 != UIMutableTraits.horizontalSizeClass.getter())
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    UIMutableTraits.horizontalSizeClass.setter();
  }
  v38 = a2;
  v39 = a3;
  EnvironmentValues.verticalSizeClass.getter();
  v34 = 1;
  if ((v37[0] & 1) != 0)
    v34 = 2;
  if (LOBYTE(v37[0]) == 2)
    v35 = 0;
  else
    v35 = v34;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (v35 != UIMutableTraits.verticalSizeClass.getter())
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    UIMutableTraits.verticalSizeClass.setter();
  }
  if ((a4 & 1) == 0)
  {
    v37[0] = a2;
    v37[1] = a3;
    EnvironmentValues.backgroundInfo.getter();
    v36 = v38;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    if (v36 != UIMutableTraits.userInterfaceLevel.getter())
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
      UIMutableTraits.userInterfaceLevel.setter();
    }
  }
  v38 = a2;
  v39 = a3;
  EnvironmentValues.typesettingConfiguration.getter();
  specialized static TypesettingConfigurationKey.write(to:value:)((uint64_t)a1, (uint64_t)v11);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE5CF8]);
  v38 = a2;
  v39 = a3;
  EnvironmentValues.appearsActive.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
  UIMutableTraits.activeAppearance.setter();

}

unint64_t outlined copy of Material?(unint64_t result)
{
  if (result != 8)
    return outlined copy of Material.ID(result);
  return result;
}

double UITraitCollection.resolvedEnvironment(base:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  char v9;
  id v10;
  char v11;
  id v12;
  char v13;
  id v14;
  void (*v15)(_OWORD *, _QWORD);
  _QWORD *v16;
  id v17;
  char v18;
  id v19;
  char v20;
  id v21;
  char v22;
  id v23;
  void (*v24)(_OWORD *, _QWORD);
  _QWORD *v25;
  double result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;

  v3 = v2;
  v5 = a1[1];
  *(_QWORD *)&v31 = *a1;
  *((_QWORD *)&v31 + 1) = v5;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>);
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)&v30[0] + 16);
  swift_bridgeObjectRelease();
  if (v6)
  {
    *(_QWORD *)&v30[0] = MEMORY[0x1E0DEE9D8];
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>);
    swift_retain();
    PropertyList.subscript.setter();
    if (*((_QWORD *)&v31 + 1))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  *(_QWORD *)&v30[0] = objc_msgSend(v3, sel__traitCollectionByRemovingEnvironmentWrapper);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InheritedTraitCollectionKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InheritedTraitCollectionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<InheritedTraitCollectionKey>);
  v7 = *(id *)&v30[0];
  swift_retain();
  PropertyList.subscript.setter();
  if (*((_QWORD *)&v31 + 1))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  v8 = objc_msgSend(v3, sel_layoutDirection);
  if (v8 == (id)1)
  {
    v9 = 1;
  }
  else
  {
    if (v8)
      goto LABEL_15;
    v9 = 0;
  }
  LOBYTE(v30[0]) = v9;
  EnvironmentValues.layoutDirection.setter();
LABEL_15:
  DynamicTypeSize.init(uiSizeCategory:)(objc_msgSend(v3, sel_preferredContentSizeCategory), (char *)v30);
  if (LOBYTE(v30[0]) != 12)
    EnvironmentValues.dynamicTypeSize.setter();
  v10 = objc_msgSend(v3, sel_legibilityWeight);
  if (v10 == (id)1)
  {
    v11 = 1;
  }
  else
  {
    if (v10)
      goto LABEL_22;
    v11 = 0;
  }
  LOBYTE(v30[0]) = v11;
  EnvironmentValues.legibilityWeight.setter();
LABEL_22:
  v12 = objc_msgSend(v3, sel_displayGamut);
  if (v12)
  {
    if (v12 != (id)1)
      goto LABEL_27;
    v13 = 1;
  }
  else
  {
    v13 = 0;
  }
  LOBYTE(v30[0]) = v13;
  EnvironmentValues.displayGamut.setter();
LABEL_27:
  v14 = objc_msgSend(v3, sel__backlightLuminance);
  EnvironmentValues.isLuminanceReduced.setter();
  if (v14 == (id)1)
  {
    v15 = (void (*)(_OWORD *, _QWORD))EnvironmentValues.redactionReasons.modify();
    *v16 |= 2uLL;
    v15(v30, 0);
  }
  *(_QWORD *)&v30[0] = objc_msgSend(v3, sel__updateFidelity);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UpdateFidelityKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UpdateFidelityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UpdateFidelityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*((_QWORD *)&v31 + 1))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  v17 = objc_msgSend(v3, sel_accessibilityContrast);
  if (v17 == (id)1)
  {
    v18 = 1;
  }
  else
  {
    if (v17)
      goto LABEL_36;
    v18 = 0;
  }
  LOBYTE(v30[0]) = v18;
  EnvironmentValues._colorSchemeContrast.setter();
LABEL_36:
  LOBYTE(v30[0]) = objc_msgSend(v3, sel_userInterfaceStyle) == (id)2;
  EnvironmentValues.colorScheme.setter();
  objc_msgSend(v3, sel_displayScale);
  EnvironmentValues.displayScale.setter();
  v19 = objc_msgSend(v3, sel_horizontalSizeClass);
  v20 = 2 * (v19 != (id)1);
  if (v19 == (id)2)
    v20 = 1;
  LOBYTE(v30[0]) = v20;
  EnvironmentValues.horizontalSizeClass.setter();
  v21 = objc_msgSend(v3, sel_verticalSizeClass);
  v22 = 2 * (v21 != (id)1);
  if (v21 == (id)2)
    v22 = 1;
  LOBYTE(v30[0]) = v22;
  EnvironmentValues.verticalSizeClass.setter();
  v23 = objc_msgSend(v3, sel_userInterfaceLevel);
  v24 = (void (*)(_OWORD *, _QWORD))EnvironmentValues.backgroundInfo.modify();
  *v25 = v23;
  v24(v30, 0);
  objc_msgSend(v3, sel_displayCornerRadius);
  EnvironmentValues.displayCornerRadius.setter();
  if (objc_msgSend(v3, sel__userInterfaceRenderingMode) == (id)2)
  {
    static Material.thick.getter();
    v27 = *(_QWORD *)&v30[0];
    LODWORD(v29) = DWORD2(v30[0]);
    EnvironmentValues.backgroundMaterial.setter();
    EnvironmentValues.vibrantColorStyle.setter();
  }
  if (objc_msgSend(v3, sel__vibrancy, v27, v29) == (id)1 && (static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v30[0] = v31;
    EnvironmentValues.backgroundMaterial.getter();
    outlined consume of Material?(v28);
    if (v28 == 8)
    {
      static Material.thick.getter();
      EnvironmentValues.backgroundMaterial.setter();
    }
  }
  specialized static AccessibilityCore.UserSettings.resolve(into:)((uint64_t)&v31);

  result = *(double *)&v31;
  *a2 = v31;
  return result;
}

void DynamicTypeSize.init(uiSizeCategory:)(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  char v67;
  id v68;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
LABEL_15:

    v20 = 0;
    goto LABEL_16;
  }
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
  {
LABEL_18:

    v20 = 1;
    goto LABEL_16;
  }
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;
  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_20:

    v20 = 2;
    goto LABEL_16;
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
    goto LABEL_20;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = v23;
  if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
  {
    swift_bridgeObjectRelease_n();
LABEL_25:

    v20 = 3;
    goto LABEL_16;
  }
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
    goto LABEL_25;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v29 = v28;
  if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v29 == v30)
  {
    swift_bridgeObjectRelease_n();
LABEL_30:

    v20 = 4;
    goto LABEL_16;
  }
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v31 & 1) != 0)
    goto LABEL_30;
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v34 = v33;
  if (v32 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v34 == v35)
  {
    swift_bridgeObjectRelease_n();
LABEL_35:

    v20 = 5;
    goto LABEL_16;
  }
  v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v36 & 1) != 0)
    goto LABEL_35;
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v39 = v38;
  if (v37 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v39 == v40)
  {
    swift_bridgeObjectRelease_n();
LABEL_40:

    v20 = 6;
    goto LABEL_16;
  }
  v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) != 0)
    goto LABEL_40;
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v44 = v43;
  if (v42 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v44 == v45)
  {
    swift_bridgeObjectRelease_n();
LABEL_45:

    v20 = 7;
    goto LABEL_16;
  }
  v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v46 & 1) != 0)
    goto LABEL_45;
  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v49 = v48;
  if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v49 == v50)
  {
    swift_bridgeObjectRelease_n();
LABEL_50:

    v20 = 8;
    goto LABEL_16;
  }
  v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v51 & 1) != 0)
    goto LABEL_50;
  v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v54 = v53;
  if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v54 == v55)
  {
    swift_bridgeObjectRelease_n();
LABEL_55:

    v20 = 9;
    goto LABEL_16;
  }
  v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v56 & 1) != 0)
    goto LABEL_55;
  v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v59 = v58;
  if (v57 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v59 == v60)
  {
    swift_bridgeObjectRelease_n();
LABEL_60:

    v20 = 10;
    goto LABEL_16;
  }
  v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v61 & 1) != 0)
    goto LABEL_60;
  v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v64 = v63;
  if (v62 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v64 == v65)
  {
    v66 = a1;

    swift_bridgeObjectRelease_n();
    v20 = 11;
  }
  else
  {
    v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v68 = a1;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v67 & 1) != 0)
      v20 = 11;
    else
      v20 = 12;
  }
LABEL_16:
  *a2 = v20;
}

uint64_t EnvironmentValues.accessibilityLargeContentViewerEnabled.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.accessibilityQuickActionsEnabled.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path setter for EnvironmentValues.font : EnvironmentValues()
{
  swift_retain();
  return EnvironmentValues.font.setter();
}

unint64_t type metadata accessor for UIFocusSystem()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIFocusSystem;
  if (!lazy cache variable for type metadata for UIFocusSystem)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
  }
  return result;
}

uint64_t outlined init with take of WeakBox<UISceneSession>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FallbackDelegateBox<NSObject>(0, &lazy cache variable for type metadata for WeakBox<UISceneSession>, &lazy cache variable for type metadata for UISceneSession, 0x1E0DC3BF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ClarityUIApplicationSceneSettings()
{
  return objc_opt_self();
}

uint64_t SheetBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  __int128 *v30;
  uint64_t (*v31)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t (*v36)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(void);
  uint64_t (*v40)(void);
  __int128 *v41;
  unint64_t *v42;
  ValueMetadata *v43;
  uint64_t (*v44)(void);
  uint64_t v45;
  void *v46;
  uint64_t (*v47)(void);
  uint64_t (*v48)(void);
  uint64_t (*v49)(void);
  _QWORD v50[5];
  int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[25];
  char v60;
  id v61;
  unsigned __int8 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[10];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _OWORD v74[2];
  _BYTE v75[112];
  _BYTE v76[144];
  _BYTE v77[108];
  int v78;

  v2 = v1;
  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v1);
  v4 = *a1;
  v5 = v3[11];
  *(_QWORD *)&v63 = *a1;
  v6 = v3[13];
  PreferenceList.subscript.getter();
  v7 = *(_QWORD *)((char *)v1 + direct field offset for SheetBridge.lastEnvironment + 8);
  swift_retain();
  swift_retain();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>, (uint64_t)&type metadata for ContainerBackgroundKeys.TransparentPresentation, (uint64_t)&protocol witness table for ContainerBackgroundKeys.TransparentPresentation, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  if (v7)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v53 = v6;
  if ((v63 & 1) == 0)
  {
    *(_QWORD *)&v54 = v4;
    PreferenceList.subscript.getter();
  }
  *(_QWORD *)&v63 = v4;
  v8 = PreferenceList.subscript.getter();
  MEMORY[0x1E0C80A78](v8, v9);
  v50[2] = v2;
  swift_beginAccess();
  specialized VersionSeedTracker.didChange(_:action:)(v4, (void (*)(_QWORD *))partial apply for closure #1 in SheetBridge.preferencesDidChange(_:), (uint64_t)v50);
  swift_endAccess();
  v10 = *(_DWORD *)((char *)v2 + direct field offset for SheetBridge.seed);
  if (v10 != -1 && v78 != -1 && v10 == v78)
    SheetBridge.isParentPresentationFromLikeKindBridge.getter();
  *(_DWORD *)((char *)v2 + direct field offset for SheetBridge.seed) = v78;
  outlined init with copy of SheetPreference.Value((uint64_t)v77, (uint64_t)&v63);
  outlined init with copy of SheetPreference.Value((uint64_t)&v63, (uint64_t)&v54);
  if (v60)
  {
    if (v60 == 1)
    {
      v73 = v58;
      v74[0] = *(_OWORD *)v59;
      *(_OWORD *)((char *)v74 + 9) = *(_OWORD *)&v59[9];
      v69 = v54;
      v70 = v55;
      v71 = v56;
      v72 = v57;
      goto LABEL_15;
    }
  }
  else
  {
    outlined destroy of SheetPreference.Value((uint64_t)&v54);
  }
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  memset(v74, 0, 25);
LABEL_15:
  outlined init with take of SheetPreference?((uint64_t)&v69, (uint64_t)v75);
  outlined destroy of SheetPreference.Value((uint64_t)&v63);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v75, (uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  if ((_QWORD)v54)
  {
    v67 = v58;
    v68[0] = *(_OWORD *)v59;
    *(_OWORD *)((char *)v68 + 9) = *(_OWORD *)&v59[9];
    v63 = v54;
    v64 = v55;
    v65 = v56;
    v66 = v57;
    v11 = *(_QWORD *)v59;
    swift_retain();
    outlined destroy of SheetPreference((uint64_t)&v63);
  }
  else
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v12 = (uint64_t)v2 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v12, (uint64_t)&v63);
    v13 = PresentationState.presentingViewID.getter();
    LOBYTE(v12) = v14;
    outlined destroy of PresentationState((uint64_t)&v63);
    if ((v12 & 1) != 0)
      v11 = 1;
    else
      v11 = SheetPreference.Value.dismissalTransaction(for:)(v13);
  }
  v15 = (uint64_t)v2 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v15, (uint64_t)&v63);
  v16 = PresentationState.presentingViewID.getter();
  LOBYTE(v15) = v17;
  outlined destroy of PresentationState((uint64_t)&v63);
  if ((v15 & 1) != 0
    || (v18 = SheetPreference.Value.viewIDs.getter(),
        v19 = specialized Set.contains(_:)(v16, v18),
        swift_bridgeObjectRelease(),
        (v19 & 1) == 0))
  {
    v20 = 1;
    if (v11 == 1)
    {
      v21 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    if (v11 == 1)
      goto LABEL_27;
  }
  v21 = Transaction.disablesAnimations.getter() ^ 1;
LABEL_27:
  v52 = v11;
  swift_beginAccess();
  PresentationState.presentationDidChange(_:animated:hasNoModifier:)((uint64_t)v75, v21 & 1, v20);
  swift_endAccess();
  v22 = (uint64_t)v2 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v22, (uint64_t)&v63);
  outlined init with copy of PresentationState.Base((uint64_t)&v63, (uint64_t)&v54);
  if (v62 >= 2u)
  {
    outlined destroy of PresentationState.Base((uint64_t)&v54);
    outlined destroy of PresentationState((uint64_t)&v63);
    v28 = SheetBridge.presenter.getter();
    if (!v28)
    {
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v75, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v31 = MEMORY[0x1E0CE28C0];
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v76, &lazy cache variable for type metadata for PreferenceList.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE28C0]);
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v77, (unint64_t *)&lazy cache variable for type metadata for PreferenceList.Value<SheetPreference.Value>, (uint64_t)&type metadata for SheetPreference.Value, (uint64_t (*)(_QWORD, uint64_t))v31);
LABEL_40:
      v37 = v52;
      return outlined consume of Transaction?(v37);
    }
    v29 = (void *)v28;
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v75, (uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    v27 = v52;
    if (!(_QWORD)v54)
    {

      v39 = MEMORY[0x1E0DEB940];
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v75, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v40 = MEMORY[0x1E0CE28C0];
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v76, &lazy cache variable for type metadata for PreferenceList.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE28C0]);
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v77, (unint64_t *)&lazy cache variable for type metadata for PreferenceList.Value<SheetPreference.Value>, (uint64_t)&type metadata for SheetPreference.Value, (uint64_t (*)(_QWORD, uint64_t))v40);
      v41 = &v54;
      v42 = (unint64_t *)&lazy cache variable for type metadata for SheetPreference?;
      v43 = &type metadata for SheetPreference;
      v44 = v39;
LABEL_49:
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v41, v42, (uint64_t)v43, (uint64_t (*)(_QWORD, uint64_t))v44);
      v37 = v27;
      return outlined consume of Transaction?(v37);
    }
    v67 = v58;
    v68[0] = *(_OWORD *)v59;
    *(_OWORD *)((char *)v68 + 9) = *(_OWORD *)&v59[9];
    v63 = v54;
    v64 = v55;
    v65 = v56;
    v66 = v57;
    (*(void (**)(__int128 *, void *, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x208))(&v63, v29, v21 & 1);

    v30 = &v63;
    goto LABEL_47;
  }
  v51 = v21;

  outlined destroy of SheetPreference((uint64_t)&v54);
  outlined destroy of PresentationState((uint64_t)&v63);
  v23 = (uint64_t)v2 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v23, (uint64_t)&v63);
  PresentationState.Base.presentedVC.getter();
  v25 = v24;
  result = outlined destroy of PresentationState((uint64_t)&v63);
  if (v25)
  {
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v75, (uint64_t)&v63, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    if (!(_QWORD)v63)
    {
      outlined destroy of AccessibilityScrollableContext?((uint64_t)&v63, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      goto LABEL_37;
    }
    v58 = v67;
    *(_OWORD *)v59 = v68[0];
    *(_OWORD *)&v59[9] = *(_OWORD *)((char *)v68 + 9);
    v54 = v63;
    v55 = v64;
    v56 = v65;
    v57 = v66;
    v27 = v52;
    if (v52 == 1)
    {
      outlined destroy of SheetPreference((uint64_t)&v54);
LABEL_37:
      swift_beginAccess();
      PresentationState.dismiss(willPresentAgain:hasNoModifier:)(0, v20);
      swift_endAccess();
      v32 = v53;
      if (v20)
        v25[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively] = 1;
      v33 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v34 = swift_allocObject();
      *(_QWORD *)(v34 + 16) = v3[10];
      *(_QWORD *)(v34 + 24) = v5;
      *(_QWORD *)(v34 + 32) = v3[12];
      *(_QWORD *)(v34 + 40) = v32;
      *(_QWORD *)(v34 + 48) = v25;
      *(_BYTE *)(v34 + 56) = v51 & 1;
      *(_QWORD *)(v34 + 64) = v33;
      v35 = v25;
      swift_retain();
      onNextMainRunLoop(do:)();

      swift_release();
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v75, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v36 = MEMORY[0x1E0CE28C0];
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v76, &lazy cache variable for type metadata for PreferenceList.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE28C0]);
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v77, (unint64_t *)&lazy cache variable for type metadata for PreferenceList.Value<SheetPreference.Value>, (uint64_t)&type metadata for SheetPreference.Value, (uint64_t (*)(_QWORD, uint64_t))v36);
      swift_release();
      goto LABEL_40;
    }
    v38 = (uint64_t)v2 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v38, (uint64_t)&v63);
    outlined init with copy of SheetPreference((uint64_t)&v54, (uint64_t)&v69);
    swift_retain();
    LOBYTE(v38) = PresentationState.hasIdentityMatching(_:)((uint64_t)&v69);
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v69, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of PresentationState((uint64_t)&v63);
    if ((v38 & 1) != 0)
    {
      (*(void (**)(__int128 *, _BYTE *, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x200))(&v54, v25, v27);
    }
    else
    {
      v45 = SheetBridge.presenter.getter();
      if (v45)
      {
        v46 = (void *)v45;
        outlined init with copy of SheetPreference((uint64_t)&v54, (uint64_t)&v63);
        SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(&v63, v25, v51 & 1, 1, v46);
        outlined consume of Transaction?(v27);

        v47 = MEMORY[0x1E0DEB940];
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v63, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined destroy of SheetPreference((uint64_t)&v54);
        v48 = v47;
LABEL_48:
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v75, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))v48);
        v49 = MEMORY[0x1E0CE28C0];
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v76, &lazy cache variable for type metadata for PreferenceList.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE28C0]);
        v42 = (unint64_t *)&lazy cache variable for type metadata for PreferenceList.Value<SheetPreference.Value>;
        v43 = &type metadata for SheetPreference.Value;
        v41 = (__int128 *)v77;
        v44 = v49;
        goto LABEL_49;
      }
    }
    outlined consume of Transaction?(v27);

    v30 = &v54;
LABEL_47:
    outlined destroy of SheetPreference((uint64_t)v30);
    v48 = MEMORY[0x1E0DEB940];
    goto LABEL_48;
  }
  __break(1u);
  return result;
}

uint64_t destroy for SheetPreference.Value(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 105);
  if (v2 >= 2)
    v2 = *(_DWORD *)result + 2;
  if (v2 == 1)
  {
    swift_release();
    if (*(_QWORD *)(v1 + 8))
      swift_release();
    if (*(_QWORD *)(v1 + 56))
      __swift_destroy_boxed_opaque_existential_1(v1 + 32);
    swift_release();
    swift_release();
    return swift_release();
  }
  else if (!v2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t SheetBridge.update(environment:)(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  void *v10;
  _QWORD *v11;
  char v12;
  char v13;
  char v14;

  v2 = v1;
  v4 = *(_QWORD *)((char *)v1 + direct field offset for SheetBridge.lastEnvironment + 8);
  swift_retain();
  swift_retain();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>, (uint64_t)&type metadata for ContainerBackgroundKeys.TransparentPresentation, (uint64_t)&protocol witness table for ContainerBackgroundKeys.TransparentPresentation, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  if (v4)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v6 = *a1;
  v5 = a1[1];
  if (!v5)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>, (uint64_t)&type metadata for ContainerBackgroundKeys.TransparentPresentation, (uint64_t)&protocol witness table for ContainerBackgroundKeys.TransparentPresentation, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    if (v14 != v13)
    {
      swift_retain_n();
      PropertyList.subscript.getter();
      goto LABEL_9;
    }
LABEL_16:
    v11 = (_QWORD *)((char *)v2 + direct field offset for SheetBridge.lastEnvironment);
    *v11 = v6;
    v11[1] = v5;
    swift_retain();
    swift_retain();
    swift_release();
    return swift_release();
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>, (uint64_t)&type metadata for ContainerBackgroundKeys.TransparentPresentation, (uint64_t)&protocol witness table for ContainerBackgroundKeys.TransparentPresentation, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  swift_retain_n();
  swift_retain_n();
  PropertyList.Tracker.value<A>(_:for:)();
  swift_release_n();
  swift_release_n();
  if (v14 == v13)
    goto LABEL_16;
  swift_retain_n();
  swift_retain_n();
  PropertyList.Tracker.value<A>(_:for:)();
  swift_release_n();
LABEL_9:
  v7 = swift_release_n();
  if (v12 == 1 && ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x1E0))(v7) & 1) == 0)
  {
    result = MEMORY[0x18D760234]((char *)v2 + direct field offset for SheetBridge.host);
    if (result)
    {
      v10 = (void *)result;
      swift_retain();

      GraphHost.removePreference<A>(_:)();
      goto LABEL_15;
    }
  }
  else
  {
    result = MEMORY[0x18D760234]((char *)v2 + direct field offset for SheetBridge.host);
    if (result)
    {
      v9 = (void *)result;
      swift_retain();

      GraphHost.addPreference<A>(_:)();
LABEL_15:
      swift_release();
      goto LABEL_16;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SheetBridge.lastEnvironment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + direct field offset for SheetBridge.lastEnvironment + 8);
  *a1 = *(_QWORD *)(v1 + direct field offset for SheetBridge.lastEnvironment);
  a1[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t SheetBridge.lastEnvironment.setter(_OWORD *a1)
{
  uint64_t v1;

  *(_OWORD *)(v1 + direct field offset for SheetBridge.lastEnvironment) = *a1;
  swift_release();
  return swift_release();
}

id outlined copy of PresentationDimmingBehavior?(id result)
{
  if (result != (id)2)
    return outlined copy of Image.Location(result);
  return result;
}

void outlined consume of PresentationDimmingBehavior?(id a1)
{
  if (a1 != (id)2)
    outlined consume of Image.Location(a1);
}

uint64_t outlined init with take of SwipeActions.Value?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;

  v7 = a5(0, a3, a4, MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t _UIHostingView.prefersStatusBarHidden.getter()
{
  return *(unsigned __int8 *)(specialized _UIHostingView.statusBarBridge.getter() + 16);
}

void *UILargeContentViewerInteractionBridge.preferencesDidChange(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  __int128 *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  _OWORD v19[15];
  _OWORD v20[15];
  __int128 v21[15];
  __int128 v22[14];
  int v23;

  v2 = v1;
  *(_QWORD *)&v21[0] = *a1;
  PreferenceList.subscript.getter();
  v3 = v23;
  v4 = OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_largeContentViewTreeSeed;
  if (v23 != -1)
  {
    v5 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_largeContentViewTreeSeed);
    if (v5 != -1 && v23 == v5)
      return (void *)outlined release of AccessibilityLargeContentViewTree((uint64_t)v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
  }
  v7 = (__int128 *)(v1 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_largeContentViewTree);
  outlined init with take of AccessibilityLargeContentViewTree((__int128 *)(v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_largeContentViewTree), v20);
  outlined init with take of AccessibilityLargeContentViewTree(v22, v7);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
  outlined init with take of AccessibilityLargeContentViewTree(v7, v21);
  outlined init with take of AccessibilityLargeContentViewTree(v21, v19);
  v8 = AccessibilityLargeContentViewTree.hasValue.getter();
  v9 = OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_interaction;
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_interaction);
  if (v10)
  {
    if (v8)
    {
LABEL_13:
      *(_DWORD *)(v2 + v4) = v3;
      return (void *)outlined release of AccessibilityLargeContentViewTree((uint64_t)v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
    }
    result = (void *)MEMORY[0x18D760234](v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host);
    if (result)
    {
      v12 = result;
      objc_msgSend(result, sel_removeInteraction_, v10);

      v13 = *(void **)(v2 + v9);
      *(_QWORD *)(v2 + v9) = 0;

      swift_unknownObjectWeakAssign();
      goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
    if (!v8)
      goto LABEL_13;
    v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3998]), sel_initWithDelegate_, v2);
    result = (void *)MEMORY[0x18D760234](v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host);
    if (result)
    {
      v15 = result;
      objc_msgSend(result, sel_addInteraction_, v14);

      v16 = *(void **)(v2 + v9);
      *(_QWORD *)(v2 + v9) = v14;
      v17 = v14;

      v18 = objc_msgSend(v17, sel_gestureRecognizerForExclusionRelationship);
      objc_msgSend(v18, sel_setDelegate_, v2);
      objc_msgSend(v18, sel_setDelaysTouchesEnded_, 0);
      objc_msgSend(v18, sel_setCancelsTouchesInView_, 0);

      swift_unknownObjectWeakAssign();
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

void outlined consume of AccessibilityLargeContentViewTree(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned __int8 a30)
{
  int v30;

  v30 = a30 >> 6;
  if (v30 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!v30)
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Resolved?(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
      a22,
      a23,
      a24);
  }
}

uint64_t AVKitCaptureButtonBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD v5[7];
  int v6;

  v2 = *a1;
  v5[4] = *a1;
  result = PreferenceList.seed.getter();
  if (v6)
  {
    MEMORY[0x1E0C80A78](result, v4);
    v5[2] = v1;
    swift_beginAccess();
    specialized VersionSeedTracker.didChange(_:action:)(v2, partial apply for closure #1 in AVKitCaptureButtonBridge.preferencesDidChange(_:), (uint64_t)v5);
    return swift_endAccess();
  }
  return result;
}

uint64_t UIKitStatusBarBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  int v7;
  int v8;
  Swift::Bool v9;
  char v10;
  uint64_t v12;

  v2 = v1;
  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 24);
  v12 = v3;
  swift_bridgeObjectRetain();
  v5 = VersionSeedSetTracker.hasChanges(in:)(&v12, v4);
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    PreferenceList.subscript.getter();
    v6 = v12;
    v7 = v12;
    v8 = BYTE1(v12) & 1;
    PreferenceList.subscript.getter();
    if (v7 == 2)
      v9 = 0;
    else
      v9 = v8;
    *(_BYTE *)(v2 + 17) = v12;
    v10 = v6 & 1;
    if (v7 == 2)
      v10 = 2;
    *(_BYTE *)(v2 + 16) = v10;
    UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)(v9, 0);
  }
  return $defer #1 <A>() in UIKitStatusBarBridge.preferencesDidChange(_:)(v2, v3);
}

uint64_t $defer #1 <A>() in UIKitStatusBarBridge.preferencesDidChange(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  swift_beginAccess();
  VersionSeedSetTracker.updateSeeds(to:)(&v3);
  return swift_endAccess();
}

uint64_t VersionSeedSetTracker.updateSeeds(to:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t updated;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v10;
  int v11;
  char v12;

  v10 = *a1;
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  swift_retain();
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = (char *)v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_13:
      v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    *v1 = (uint64_t)v4;
    updated = lazy protocol witness table accessor for type VersionSeedSetTracker.UpdateSeedVisitor and conformance VersionSeedSetTracker.UpdateSeedVisitor();
    v6 = 0;
    for (i = 0; i != v3; ++i)
    {
      v8 = *(_QWORD *)(v2 + v6 + 40);
      v11 = 0;
      v12 = 1;
      (*(void (**)(uint64_t *, void *, unint64_t))(v8 + 16))(&v10, &unk_1E1B1AD98, updated);
      if ((v12 & 1) == 0)
      {
        if ((i & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_12:
          __break(1u);
          goto LABEL_13;
        }
        if (i >= *((_QWORD *)v4 + 2))
          goto LABEL_12;
        *(_DWORD *)&v4[v6 + 48] = v11;
      }
      v6 += 24;
    }
    swift_bridgeObjectRelease();
    *v1 = (uint64_t)v4;
  }
  return swift_release();
}

Swift::Void __swiftcall UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)(Swift::Bool isAnimated, Swift::Bool shouldDefer)
{
  uint64_t v2;

  if (MEMORY[0x18D760234](v2 + 40))
  {
    swift_allocObject();
    _UIHostingView.viewController.getter();
  }
  __break(1u);
}

BOOL closure #1 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (void *)MEMORY[0x18D760234](v1);
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, sel_setNeedsStatusBarAppearanceUpdate);

  }
  return v3 == 0;
}

void PencilEventsBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  int v3;

  v1 = *a1;
  PreferenceList.subscript.getter();
  LOBYTE(v1) = v2;
  HIDWORD(v1) = v3;
  PencilEventsBridge.updateState(wantsPencilEvents:)((uint64_t)&v1);
}

void PencilEventsBridge.updateState(wantsPencilEvents:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  v2 = *(_DWORD *)(a1 + 4);
  if (v2 == -1
    || ((v3 = *(_DWORD *)(v1 + direct field offset for PencilEventsBridge.wantsPencilEventsSeed), v3 != -1)
      ? (v4 = v2 == v3)
      : (v4 = 0),
        !v4))
  {
    if (*(_BYTE *)a1)
    {
      v5 = MEMORY[0x18D760234](v1 + direct field offset for PencilEventsBridge.host);
      if (v5)
      {
        v6 = (id)v5;
        v7 = direct field offset for PencilEventsBridge.pencilInteraction;
        if (!*(_QWORD *)(v1 + direct field offset for PencilEventsBridge.pencilInteraction))
        {
          v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3AC8]), sel_init);
          objc_msgSend(v8, sel_setDelegate_, v1);
          objc_msgSend(v6, sel_addInteraction_, v8);
          v9 = *(void **)(v1 + v7);
          *(_QWORD *)(v1 + v7) = v8;
          v10 = v8;

          PencilEventsBridge.startObservingPreferredActions()();
          v6 = v10;
        }
LABEL_14:

      }
    }
    else
    {
      v11 = direct field offset for PencilEventsBridge.pencilInteraction;
      v12 = *(void **)(v1 + direct field offset for PencilEventsBridge.pencilInteraction);
      if (v12)
      {
        v13 = (void *)MEMORY[0x18D760234](v1 + direct field offset for PencilEventsBridge.host);
        v6 = v12;
        if (v13)
        {
          objc_msgSend(v13, sel_removeInteraction_, v6);

        }
        v14 = *(void **)(v1 + v11);
        *(_QWORD *)(v1 + v11) = 0;

        PencilEventsBridge.stopObservingPreferredActions()();
        goto LABEL_14;
      }
    }
    *(_DWORD *)(v1 + direct field offset for PencilEventsBridge.wantsPencilEventsSeed) = v2;
  }
}

void DragAndDropBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  int v36;
  _BYTE v37[4];
  int v38;
  char v39;
  int v40;

  v2 = *a1;
  v3 = MEMORY[0x18D760234](v1 + direct field offset for DragAndDropBridge.host);
  if (v3)
  {
    v4 = (void *)v3;
    ObjectType = swift_getObjectType();

    if (((*(uint64_t (**)(void))(ObjectType + 1784))() & 1) != 0)
    {
      v23 = v2;
      PreferenceList.subscript.getter();
      v37[0] = v39;
      v38 = v40;
      PreferenceList.subscript.getter();
      v9 = v2;
      v10 = v24;
      v11 = v25;
      v12 = v26;
      v13 = v27;
      v14 = v28;
      v15 = v29;
      v16 = v30;
      v17 = v31;
      v18 = v32;
      v19 = v33;
      v20 = v34;
      v21 = v35;
      v22 = v36;
      DragAndDropBridge.updateDragInteraction(_:_:)((uint64_t)v37, (uint64_t)&v9);
      v9 = v2;
      PreferenceList.subscript.getter();
      LOBYTE(v9) = v23;
      HIDWORD(v9) = HIDWORD(v23);
      DragAndDropBridge.updateDropInteraction(_:)((uint64_t)&v9);
      v9 = v2;
      PreferenceList.subscript.getter();
      LOBYTE(v9) = v23;
      HIDWORD(v9) = HIDWORD(v23);
      DragAndDropBridge.updateSpringLoadedInteraction(_:)((uint64_t)&v9, v6, v7, v8);
    }
  }
  else
  {
    __break(1u);
  }
}

void ContextMenuBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t ObjectType;
  int v8;
  BOOL v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  char v22;
  int v23;

  v2 = v1;
  v3 = *a1;
  v4 = v1 + direct field offset for ContextMenuBridge.host;
  v5 = MEMORY[0x18D760234](v1 + direct field offset for ContextMenuBridge.host);
  if (!v5)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v6 = (void *)v5;
  ObjectType = swift_getObjectType();

  if (((*(uint64_t (**)(void))(ObjectType + 1784))() & 1) != 0)
  {
    PreferenceList.subscript.getter();
    PreferenceList.subscript.getter();
    if (v23 == -1
      || ((v8 = *(_DWORD *)(v2 + direct field offset for ContextMenuBridge.hasContextMenuSeed), v8 != -1)
        ? (v9 = v23 == v8)
        : (v9 = 0),
          v9 ? (v10 = v23 == -1) : (v10 = 1),
          v10
       || ((v11 = *(_DWORD *)(v2 + direct field offset for ContextMenuBridge.menuOrderSeed), v11 != -1)
         ? (v12 = v23 == v11)
         : (v12 = 0),
           !v12)))
    {
      v13 = direct field offset for ContextMenuBridge.interaction;
      v14 = *(void **)(v2 + direct field offset for ContextMenuBridge.interaction);
      if (v14)
      {
        if ((v22 & 1) == 0)
        {
          v15 = v14;
          objc_msgSend(v15, sel_dismissMenu, v3);
          v16 = (void *)MEMORY[0x18D760234](v4);
          if (v16)
          {
            v17 = v16;
            objc_msgSend(v16, sel_removeInteraction_, v15);

            v18 = 0;
LABEL_22:
            v21 = *(void **)(v2 + v13);
            *(_QWORD *)(v2 + v13) = v18;

            goto LABEL_23;
          }
          goto LABEL_26;
        }
      }
      else if (v22)
      {
        v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC36C0]), sel_initWithDelegate_, v2, v3);
        v19 = (void *)MEMORY[0x18D760234](v4);
        if (v19)
        {
          v20 = v19;
          objc_msgSend(v19, sel_addInteraction_, v18);

          goto LABEL_22;
        }
LABEL_27:
        __break(1u);
        return;
      }
LABEL_23:
      *(_BYTE *)(v2 + direct field offset for ContextMenuBridge.menuOrder) = v22;
      *(_DWORD *)(v2 + direct field offset for ContextMenuBridge.hasContextMenuSeed) = v23;
      *(_DWORD *)(v2 + direct field offset for ContextMenuBridge.menuOrderSeed) = v23;
    }
  }
}

Swift::Void __swiftcall _UIHostingView.updateFocusedValues()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68));
  swift_beginAccess();
  if ((*(_BYTE *)(v1 + 361) & 0x20) != 0)
  {
    _UIHostingView.focusedValues.getter((uint64_t)&v2);
    ViewGraph.setFocusedValues(_:)();
    swift_release();
  }
}

Swift::Void __swiftcall _UIHostingView.updateFocusedItem()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v2[12];

  v2[11] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68));
  swift_beginAccess();
  if ((*(_BYTE *)(v1 + 361) & 0x20) != 0)
  {
    _UIHostingView.focusedItem.getter((uint64_t)v2);
    ViewGraph.setFocusedItem(_:)();
    outlined destroy of AccessibilityTableContext?((uint64_t)v2, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem);
  }
}

uint64_t _UIHostingView.focusedItem.getter@<X0>(uint64_t a1@<X8>)
{
  specialized _UIHostingView.focusBridge.getter();
  swift_retain();
  FocusBridge.focusedItem.getter(a1);
  return swift_release();
}

id @objc _UIHostingView.next.getter(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v1 = a1;
  v5 = _UIHostingView.next.getter((uint64_t)v1, v2, v3, v4);

  return v5;
}

id _UIHostingView.next.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;

  v5 = *(void **)(*(_QWORD *)((char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x140)) + 64);
  v6 = v5;
  if (!v5)
    v6 = _UIHostingView.defaultNextResponder.getter(a1, a2, a3, a4);
  v7 = v5;
  return v6;
}

uint64_t FocusBridge.focusedItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  BOOL v4;
  _BYTE v6[64];
  _BYTE v7[64];
  _OWORD v8[2];
  __int128 v9;
  uint64_t v10;
  int v11;
  _BYTE v12[64];

  v3 = v1 + 88;
  swift_beginAccess();
  outlined init with copy of FocusItem?(v1 + 88, (uint64_t)v8);
  if (*((_QWORD *)&v9 + 1))
    v4 = 0;
  else
    v4 = v10 == 1;
  if (v4)
  {
    outlined destroy of FocusItem?((uint64_t)v8);
  }
  else
  {
    outlined init with take of FocusItem((uint64_t)v8, (uint64_t)v12);
    if (FocusItem.isExpired.getter())
    {
      v9 = 0u;
      memset(v8, 0, sizeof(v8));
      v10 = 1;
      v11 = 0;
      outlined init with copy of FocusItem?(v3, (uint64_t)v7);
      swift_beginAccess();
      outlined assign with copy of FocusItem?((uint64_t)v8, v3);
      swift_endAccess();
      outlined init with copy of FocusItem?(v3, (uint64_t)v6);
      FocusBridge.didChangeFocusItem(from:to:)((uint64_t)v7, (uint64_t)v6);
      outlined destroy of FocusItem?((uint64_t)v6);
      outlined destroy of FocusItem?((uint64_t)v8);
      outlined destroy of FocusItem?((uint64_t)v7);
    }
    outlined destroy of FocusItem((uint64_t)v12);
  }
  return outlined init with copy of FocusItem?(v3, a1);
}

