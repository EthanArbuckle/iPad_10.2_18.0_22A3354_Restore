_QWORD *assignWithCopy for SearchFieldTokenControl(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 32;
  v10 = (_QWORD *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  v11 = (_QWORD *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  *v10 = *v11;
  swift_retain();
  swift_release();
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)v12 + v8 + 8) & ~v8, ((unint64_t)v13 + v8 + 8) & ~v8, v6);
  v14 = *(_QWORD *)(v7 + 64) + ((v8 + 16) & ~v8) + 7;
  v15 = (_QWORD *)(((unint64_t)v10 + v14) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v11 + v14) & 0xFFFFFFFFFFFFFFF8);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  v18 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)(v19 + 24);
  if (*(_QWORD *)(v18 + 24) < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      v27 = *(_QWORD *)v19;
      v28 = *(_QWORD *)(v19 + 8);
      v29 = *(_BYTE *)(v19 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v19, v28, v29);
      *(_QWORD *)v18 = v27;
      *(_QWORD *)(v18 + 8) = v28;
      *(_BYTE *)(v18 + 16) = v29;
      *(_QWORD *)(v18 + 24) = *(_QWORD *)(v19 + 24);
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v30 = *(_OWORD *)(v19 + 16);
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *(_OWORD *)(v18 + 16) = v30;
    return a1;
  }
  if (v20 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(_BYTE *)(v18 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v21 = *(_QWORD *)v19;
  v22 = *(_QWORD *)(v19 + 8);
  v23 = *(_BYTE *)(v19 + 16);
  outlined copy of Text.Storage(*(_QWORD *)v19, v22, v23);
  v24 = *(_QWORD *)v18;
  v25 = *(_QWORD *)(v18 + 8);
  v26 = *(_BYTE *)(v18 + 16);
  *(_QWORD *)v18 = v21;
  *(_QWORD *)(v18 + 8) = v22;
  *(_BYTE *)(v18 + 16) = v23;
  outlined consume of Text.Storage(v24, v25, v26);
  *(_QWORD *)(v18 + 24) = *(_QWORD *)(v19 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for SearchFieldTokenControl(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 32;
  v8 = (_QWORD *)(((unint64_t)a1 + v7) & ~(v6 | 7));
  v9 = (_QWORD *)(((unint64_t)a2 + v7) & ~(v6 | 7));
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)v10 + v6 + 8) & ~v6, ((unint64_t)v11 + v6 + 8) & ~v6);
  v12 = *(_QWORD *)(v5 + 64) + ((v6 + 16) & ~v6) + 7;
  v13 = (_OWORD *)(((unint64_t)v8 + v12) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_OWORD *)(((unint64_t)v9 + v12) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = (__int128 *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v17 = *v15;
  v16 = v15[1];
  v18 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v18 = v17;
  v18[1] = v16;
  return a1;
}

_QWORD *assignWithTake for SearchFieldTokenControl(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + 32;
  v11 = (_QWORD *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  v12 = (_QWORD *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  *v11 = *v12;
  swift_release();
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v13 + v9 + 8) & ~v9, ((unint64_t)v14 + v9 + 8) & ~v9, v7);
  v15 = *(_QWORD *)(v8 + 64) + ((v9 + 16) & ~v9) + 7;
  v16 = (_OWORD *)(((unint64_t)v11 + v15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (unint64_t)v12 + v15;
  v18 = (v17 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v16 = *(_OWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v19 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = v18 & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v19 + 24) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)(v20 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
    swift_bridgeObjectRelease();
LABEL_5:
    v25 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *(_OWORD *)(v19 + 16) = v25;
    return a1;
  }
  v21 = *(_BYTE *)(v20 + 16);
  v22 = *(_QWORD *)v19;
  v23 = *(_QWORD *)(v19 + 8);
  v24 = *(_BYTE *)(v19 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = v21;
  outlined consume of Text.Storage(v22, v23, v24);
  *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchFieldTokenControl(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (v5 >= 0)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = v8 | 7;
  if (v7 >= a2)
  {
    if (v7 == 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)(a1 + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((v8
                                                                    + ((((a1 + v9 + 32) & ~v9) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                    + 8) & ~v8);
    }
  }
  else
  {
    if (((((((*(_QWORD *)(v4 + 64) + ((v8 + 16) & ~v8) + ((v8 + 32) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 32) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1878DE8D0 + 4 * byte_187C6A0DA[v12]))();
  }
}

void storeEnumTagSinglePayload for SearchFieldTokenControl(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v7 >= 0)
    v8 = 0x7FFFFFFF;
  v9 = *(unsigned __int8 *)(v6 + 80);
  if (v8 >= a3)
  {
    v13 = 0u;
    if (a2 <= v8)
      goto LABEL_19;
  }
  else
  {
    v10 = a3 - v8;
    if (((((*(_DWORD *)(v6 + 64) + (((_DWORD)v9 + 32) & ~(v9 | 7)) + (((_DWORD)v9 + 16) & ~(_DWORD)v9) + 7) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v11 = v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    if (a2 <= v8)
LABEL_19:
      __asm { BR              X16 }
  }
  if (((((*(_DWORD *)(v6 + 64) + (((_DWORD)v9 + 32) & ~(v9 | 7)) + (((_DWORD)v9 + 16) & ~(_DWORD)v9) + 7) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v14 = ~v8 + a2;
    bzero(a1, ((((*(_QWORD *)(v6 + 64) + ((v9 + 32) & ~(v9 | 7)) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 32);
    *a1 = v14;
  }
  __asm { BR              X10 }
}

void sub_1878DEA9C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1878DEB28);
}

void sub_1878DEAA4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1878DEAACLL);
  JUMPOUT(0x1878DEB28);
}

void sub_1878DEB00()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1878DEB28);
}

void sub_1878DEB08()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1878DEB28);
}

uint64_t sub_1878DEB10@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a1)
    goto LABEL_6;
  if (v5 == 0x7FFFFFFF)
  {
    if (a1 < 0)
      JUMPOUT(0x1878DEB1CLL);
    *(_QWORD *)(v8 + 8) = (a1 - 1);
LABEL_6:
    JUMPOUT(0x1878DEB28);
  }
  return (*(uint64_t (**)(unint64_t))(v3 + 56))((v4
                                                                + ((((v8 + v6 + 32) & v7) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                + 8) & a2);
}

_UNKNOWN **sub_1878DEB40()
{
  return &protocol witness table for SearchFieldConfigurationReader<A, B>;
}

void sub_1878DEB4C()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

uint64_t sub_1878DEBB8(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for SearchFieldState(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 1) = *((_BYTE *)a2 + 1);
    *(_WORD *)(a1 + 2) = *((_WORD *)a2 + 1);
    *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
    v7 = a3[9];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v10 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v12 = (char *)v4 + v11;
    v13 = (uint64_t)a2 + v11;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = *(_BYTE *)(v13 + 4);
  }
  return v4;
}

uint64_t destroy for SearchFieldState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 36);
  v3 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for SearchFieldState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[9];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  return a1;
}

uint64_t assignWithCopy for SearchFieldState(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  v6 = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v6;
  v7 = a3[9];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v11 = a3[11];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  return a1;
}

uint64_t initializeWithTake for SearchFieldState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[9];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  return a1;
}

uint64_t assignWithTake for SearchFieldState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[9];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchFieldState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1878DEFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 1);
    if (v4 >= 2)
      return v4 - 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for AttributedString();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SearchFieldState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1878DF044(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 1) = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for AttributedString();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t specialized static SearchFieldState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  uint64_t result;
  _BOOL4 v7;
  int v8;
  int v9;
  _BOOL4 v10;
  int v11;
  int v12;
  _BOOL4 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  v4 = *a1;
  v5 = *a2;
  if (v4 == 2)
  {
    if (v5 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v7 = (v4 & 1) == 0;
    if (v5 == 2 || ((v7 ^ v5) & 1) == 0)
      return result;
  }
  if (a1[1] != a2[1])
    return 0;
  v8 = a1[2];
  v9 = a2[2];
  if (v8 == 2)
  {
    if (v9 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v10 = (v8 & 1) == 0;
    if (v9 == 2 || ((v10 ^ v9) & 1) == 0)
      return result;
  }
  v11 = a1[3];
  v12 = a2[3];
  if (v11 == 2)
  {
    if (v12 != 2)
      return 0;
LABEL_17:
    v14 = a2[8];
    if ((a1[8] & 1) != 0)
    {
      if (!a2[8])
        return 0;
    }
    else
    {
      if (*((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1))
        v14 = 1;
      if ((v14 & 1) != 0)
        return 0;
    }
    v15 = type metadata accessor for SearchFieldState();
    if ((static AttributedString.== infix(_:_:)() & 1) != 0 && a1[*(int *)(v15 + 40)] == a2[*(int *)(v15 + 40)])
    {
      v16 = *(int *)(v15 + 44);
      v17 = *(_DWORD *)&a1[v16];
      if (v17 != -1)
      {
        v18 = *(_DWORD *)&a2[v16];
        if (v18 != -1 && v17 == v18)
          return 1;
      }
    }
    return 0;
  }
  result = 0;
  v13 = (v11 & 1) == 0;
  if (v12 != 2 && ((v13 ^ v12) & 1) != 0)
    goto LABEL_17;
  return result;
}

_BYTE *sub_1878DF220@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 2;
  return result;
}

void sub_1878DF234(Swift::Bool *a1)
{
  SearchFieldState.updateIsSearching(_:)(*a1);
}

void type metadata accessor for WritableKeyPath<SearchFieldState, Bool>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for WritableKeyPath<SearchFieldState, Bool>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC870]);
}

uint64_t partial apply for closure #1 in closure #1 in SearchField.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in SearchField.body.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #2 in closure #1 in SearchField.body.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = v2[2];
  v5 = v2[3];
  v7 = v2[4];
  v6 = v2[5];
  v8 = type metadata accessor for SearchField(0, v4, v5, a1);
  return closure #1 in SearchField.suggestionsList(_:)(v7, v6, *(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), a2);
}

void type metadata accessor for WritableKeyPath<SearchFieldState, SearchSuggestionsPlacement.Role>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for WritableKeyPath<SearchFieldState, SearchSuggestionsPlacement.Role>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t)&type metadata for SearchSuggestionsPlacement.Role, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC870]);
}

void type metadata accessor for WritableKeyPath<SearchFieldState, AttributedString>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WritableKeyPath<SearchFieldState, AttributedString>)
  {
    type metadata accessor for SearchFieldState();
    type metadata accessor for AttributedString();
    v0 = type metadata accessor for WritableKeyPath();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<SearchFieldState, AttributedString>);
  }
}

uint64_t sub_1878DF378@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 2);
  return result;
}

uint64_t sub_1878DF384(unsigned __int8 *a1)
{
  return SearchFieldState.hasSuggestions.setter(*a1);
}

void type metadata accessor for WritableKeyPath<SearchFieldState, Bool?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WritableKeyPath<SearchFieldState, Bool?>)
  {
    type metadata accessor for SearchFieldState();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for WritableKeyPath();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<SearchFieldState, Bool?>);
  }
}

ValueMetadata *type metadata accessor for SearchFocusUpdate()
{
  return &type metadata for SearchFocusUpdate;
}

uint64_t getEnumTagSinglePayload for SearchState(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1878DF484 + 4 * byte_187C6A0E9[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for SearchState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1878DF53C + 4 * byte_187C6A0F3[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1878DF570 + 4 * byte_187C6A0EE[v5]))();
}

uint64_t sub_1878DF570(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1878DF578(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1878DF580);
  return result;
}

uint64_t sub_1878DF58C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1878DF594);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1878DF598(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1878DF5A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchState()
{
  return &type metadata for SearchState;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (_QWORD *)result;
  if (!a2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_11:
    *v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v7 = *(_QWORD *)(a4 + 16);
    if (v7)
    {
      v8 = a2;
      v9 = 0;
      v10 = a4 + 32;
      v11 = a3 - 1;
      while (v9 < *(_QWORD *)(a4 + 16))
      {
        result = outlined init with copy of FocusStoreList.Item(v10, v8);
        if (v11 == v9)
          goto LABEL_11;
        v8 += 72;
        ++v9;
        v10 += 72;
        if (v7 == v9)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    v6 = v7;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v31;

  if (a4 < 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  else
  {
    v14 = a2;
    v15 = result;
    v16 = a3 & 1;
    result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
    if (a4)
    {
      v17 = 0;
      v31 = a7 & 1;
      v18 = (a3 | a7) & 1;
      v19 = a8 + 64;
      v20 = a5;
      while (1)
      {
        if ((v18 & 1) != 0)
          goto LABEL_36;
        if ((_DWORD)v14 != a6)
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        if (v15 == v20)
        {
          result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v20, v14, 0);
          *(_QWORD *)a9 = 0;
          *(_QWORD *)(a9 + 8) = 0;
          *(_BYTE *)(a9 + 16) = -1;
          return result;
        }
        if ((v15 & 0x8000000000000000) != 0)
          goto LABEL_32;
        v21 = 1 << *(_BYTE *)(a8 + 32);
        if ((uint64_t)v15 >= v21)
          goto LABEL_32;
        v22 = v15 >> 6;
        v23 = *(_QWORD *)(v19 + 8 * (v15 >> 6));
        if (((v23 >> v15) & 1) == 0)
          goto LABEL_33;
        if (*(_DWORD *)(a8 + 36) != a6)
          goto LABEL_34;
        v24 = v23 & (-2 << (v15 & 0x3F));
        if (v24)
        {
          result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v15, v14, 0);
          v15 = __clz(__rbit64(v24)) | v15 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v25 = v22 + 1;
          v26 = (unint64_t)(v21 + 63) >> 6;
          if (v22 + 1 < v26)
          {
            v27 = *(_QWORD *)(v19 + 8 * v25);
            if (v27)
              goto LABEL_16;
            v25 = v22 + 2;
            if (v22 + 2 >= v26)
            {
LABEL_26:
              result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v15, v14, 0);
              v15 = v21;
            }
            else
            {
              v27 = *(_QWORD *)(v19 + 8 * v25);
              if (!v27)
              {
                v25 = v22 + 3;
                if (v22 + 3 >= v26)
                  goto LABEL_26;
                v27 = *(_QWORD *)(v19 + 8 * v25);
                if (!v27)
                {
                  v28 = v26 - 4;
                  while (v28 != v22)
                  {
                    v27 = *(_QWORD *)(a8 + 96 + 8 * v22++);
                    if (v27)
                    {
                      v25 = v22 + 3;
                      goto LABEL_16;
                    }
                  }
                  goto LABEL_26;
                }
              }
LABEL_16:
              result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v15, v14, 0);
              v15 = __clz(__rbit64(v27)) | (v25 << 6);
            }
            v20 = a5;
            goto LABEL_5;
          }
          result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v15, v14, 0);
          v15 = v21;
        }
LABEL_5:
        ++v17;
        v14 = a6;
        v18 = v31;
        if (v17 == a4)
        {
          v16 = 0;
          v14 = a6;
          break;
        }
      }
    }
    *(_QWORD *)a9 = v15;
    *(_QWORD *)(a9 + 8) = v14;
    *(_BYTE *)(a9 + 16) = v16;
  }
  return result;
}

uint64_t (*FocusStateBindingUpdateAction.init<A>(binding:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v8 = type metadata accessor for FocusState.Binding(0, a3, a4, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(a3 - 8);
  v12 = (v10 + *(_QWORD *)(v9 + 64) + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = a4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 32))(v13 + v10, a1, v8);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v13 + v12, a2, a3);
  return partial apply for closure #1 in FocusStateBindingUpdateAction.init<A>(binding:value:);
}

uint64_t (*FocusStoreUpdateAction.init<A>(value:focusScopes:searchFieldState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = *(_QWORD *)(a4 - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = (*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v14 = *(unsigned __int8 *)(*(_QWORD *)(v13 - 8) + 80);
  v15 = (v12 + v14 + 8) & ~v14;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a4;
  *(_QWORD *)(v16 + 24) = a5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 32))(v16 + v11, a1, a4);
  *(_QWORD *)(v16 + v12) = a2;
  outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?(a3, v16 + v15, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  return partial apply for closure #1 in FocusStoreUpdateAction.init<A>(value:focusScopes:searchFieldState:);
}

uint64_t specialized RangeReplaceableCollection.removeFirst(_:)(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!result)
    return result;
  v2 = result;
  if (result < 0)
  {
LABEL_11:
    __break(1u);
  }
  else if (!(*v1 >> 62))
  {
    v3 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_5:
  v4 = v2;
  do
  {
    if (v3 <= v2 - 1)
    {
      __break(1u);
      goto LABEL_11;
    }
    --v4;
  }
  while (v4);
  return specialized Array.replaceSubrange<A>(_:with:)(0, v2, MEMORY[0x1E0DEE9D8]);
}

int64_t specialized RangeReplaceableCollection.removeFirst(_:)(int64_t result)
{
  uint64_t v1;
  int64_t v2;

  if (result)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      v2 = result;
      while (*(_QWORD *)(*(_QWORD *)v1 + 16) > (unint64_t)(result - 1))
      {
        if (!--v2)
          return specialized Array.replaceSubrange<A>(_:with:)(0, result);
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;

  v30 = MEMORY[0x1E0DEE9D8];
  outlined init with copy of SearchFieldConfiguration.Data?(a3, (uint64_t)&v24, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
  outlined init with take of Decodable & Encodable & Hashable(&v24, (uint64_t)v19);
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  v15 = 0u;
  outlined assign with take of Predicate<Pack{URL}>?((uint64_t)v19, (uint64_t)&v15, &lazy cache variable for type metadata for (Decodable & Encodable & Hashable)?, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable);
  v26 = v15;
  v27 = v16;
  v28 = v17;
  v29 = v18;
  outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)&v26, (uint64_t)&v24, &lazy cache variable for type metadata for (Decodable & Encodable & Hashable)?, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  if (v25)
  {
    v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628];
    outlined init with take of Decodable & Encodable & Hashable(&v24, (uint64_t)v19);
    v4 = v20;
    v5 = v21;
    v6 = v22;
    v7 = v23;
    v8 = __swift_project_boxed_opaque_existential_1(v19, v20);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, v3);
    v10 = v9;
    v11 = lazy protocol witness table accessor for type Repeated<Decodable & Encodable & Hashable> and conformance Repeated<A>(&lazy protocol witness table cache variable for type CollectionOfOne<Decodable & Encodable & Hashable> and conformance CollectionOfOne<A>, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>, v3, MEMORY[0x1E0DEC658]);
    specialized append #1 <A><A1>(_:) in NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(v8, &v30, v10, v4, v11, v5, v6, v7);
  }
  outlined destroy of Binding<AttributedString>((uint64_t)&v26, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>.Iterator, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, MEMORY[0x1E0DEC610]);
  swift_beginAccess();
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, v30);
}

__int128 *specialized RangeReplaceableCollection.init(repeating:count:)@<X0>(__int128 *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];
  _OWORD v11[4];
  uint64_t v12;
  _OWORD v13[4];
  unint64_t v14;

  v14 = MEMORY[0x1E0DEE9D8];
  if (a2)
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)&v13[0] = a2;
      outlined init with take of Decodable & Encodable & Hashable(result, (uint64_t)v13 + 8);
      v11[0] = v13[0];
      v11[1] = v13[1];
      v11[2] = v13[2];
      v11[3] = v13[3];
      v12 = 0;
      v4 = 0;
      v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEE858];
      v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628];
      while (1)
      {
        outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v11, (uint64_t)v10, &lazy cache variable for type metadata for Repeated<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, v5);
        v7 = v10[0];
        result = (__int128 *)outlined destroy of Binding<AttributedString>((uint64_t)v10, &lazy cache variable for type metadata for Repeated<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, v5);
        if (v4 < 0 || v4 >= v7)
          break;
        if (v4 >= *(uint64_t *)&v11[0])
          goto LABEL_15;
        v12 = v4 + 1;
        if (v14 >> 62)
        {
          swift_bridgeObjectRetain();
          v8 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v8 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        outlined init with copy of Decodable & Encodable & Hashable((uint64_t)v11 + 8, (uint64_t)v10);
        specialized NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(v8, v8, (uint64_t)v10);
        outlined destroy of Binding<AttributedString>((uint64_t)v10, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, v6);
        v4 = v12;
        if (v12 == *(_QWORD *)&v11[0])
        {
          v9 = v14;
          result = (__int128 *)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<Repeated<Decodable & Encodable & Hashable>>);
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    result = (__int128 *)__swift_destroy_boxed_opaque_existential_1((uint64_t)result);
    v9 = MEMORY[0x1E0DEE9D8];
LABEL_13:
    *a3 = v9;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[6];
  _OWORD v11[3];
  uint64_t v12;
  _OWORD v13[3];
  unint64_t v14;

  v14 = MEMORY[0x1E0DEE9D8];
  if (a2)
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)&v13[0] = a2;
      outlined init with take of OptionalBinaryInteger(result, (uint64_t)v13 + 8);
      v11[0] = v13[0];
      v11[1] = v13[1];
      v11[2] = v13[2];
      v12 = 0;
      v4 = 0;
      v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEE858];
      v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628];
      while (1)
      {
        outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v11, (uint64_t)v10, &lazy cache variable for type metadata for Repeated<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, v5);
        v7 = v10[0];
        result = (__int128 *)outlined destroy of Binding<AttributedString>((uint64_t)v10, &lazy cache variable for type metadata for Repeated<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, v5);
        if (v4 < 0 || v4 >= v7)
          break;
        if (v4 >= *(uint64_t *)&v11[0])
          goto LABEL_15;
        v12 = v4 + 1;
        if (v14 >> 62)
        {
          swift_bridgeObjectRetain();
          v8 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v8 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        outlined init with copy of TableColumnList((uint64_t)v11 + 8, (uint64_t)v10);
        specialized NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)(v8, v8, (uint64_t)v10);
        outlined destroy of Binding<AttributedString>((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for CollectionOfOne<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, v6);
        v4 = v12;
        if (v12 == *(_QWORD *)&v11[0])
        {
          v9 = v14;
          result = (__int128 *)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<Repeated<Hashable>>);
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    result = (__int128 *)__swift_destroy_boxed_opaque_existential_1((uint64_t)result);
    v9 = MEMORY[0x1E0DEE9D8];
LABEL_13:
    *a3 = v9;
  }
  return result;
}

uint64_t specialized RangeReplaceableCollection.append(_:)(__int128 *a1)
{
  _QWORD *v1;
  uint64_t v3;
  _BYTE v5[40];

  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  outlined init with take of OptionalBinaryInteger(a1, (uint64_t)v5);
  specialized NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)(v3, v3, (uint64_t)v5);
  return outlined destroy of Binding<AttributedString>((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for CollectionOfOne<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
}

{
  _QWORD *v1;
  uint64_t v3;
  _BYTE v5[56];

  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  outlined init with take of Decodable & Encodable & Hashable(a1, (uint64_t)v5);
  specialized NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(v3, v3, (uint64_t)v5);
  return outlined destroy of Binding<AttributedString>((uint64_t)v5, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
}

uint64_t specialized RangeReplaceableCollection.remove(at:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12[3];

  v3 = result;
  v5 = *v2;
  if (!(v5 >> 62))
  {
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v9)
    goto LABEL_12;
LABEL_3:
  if ((v5 & 0xC000000000000001) == 0)
  {
    if (v3 < 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)v3)
    {
      v6 = *(_QWORD *)(v5 + 8 * v3 + 32);
      v7 = swift_retain();
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_13:
  v7 = MEMORY[0x18D75E3BC](v3, v5);
  v6 = v7;
LABEL_7:
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v6 + 120))(&v10, v7);
  result = swift_release();
  if (v11)
  {
    outlined init with take of Decodable & Encodable & Hashable(&v10, (uint64_t)v12);
    result = outlined init with take of Decodable & Encodable & Hashable(v12, a2);
    v8 = v3 + 1;
    if (!__OFADD__(v3, 1))
    {
      if (v8 >= v3)
        return specialized Array.replaceSubrange<A>(_:with:)(v3, v8, MEMORY[0x1E0DEE9D8]);
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.remove(at:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  v3 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_11;
LABEL_3:
  if ((v3 & 0xC000000000000001) == 0)
  {
    if (v2 < 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)v2)
    {
      v4 = *(_QWORD *)(v3 + 8 * v2 + 32);
      v5 = swift_retain();
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_12:
  v5 = MEMORY[0x18D75E3BC](v2, v3);
  v4 = v5;
LABEL_7:
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 112))(v5);
  result = swift_release();
  v6 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v6 >= v2)
    return specialized Array.replaceSubrange<A>(_:with:)(v2, v6, MEMORY[0x1E0DEE9D8]);
LABEL_16:
  __break(1u);
  return result;
}

unint64_t specialized RangeReplaceableCollection.remove(at:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (!v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  v4 = result;
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 > result)
  {
    outlined init with copy of FocusStoreList.Item(*(_QWORD *)v2 + 72 * result + 32, a2);
    return specialized Array.replaceSubrange<A>(_:with:)(v4, v4 + 1);
  }
LABEL_7:
  __break(1u);
  return result;
}

void specialized RangeReplaceableCollection.removeFirst()(uint64_t a1@<X8>)
{
  unint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v3 = *v1;
  if (!(*v1 >> 62))
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_6;
LABEL_3:
  specialized Collection.first.getter(v3, (uint64_t)&v5);
  if (v6)
  {
    outlined init with take of Decodable & Encodable & Hashable(&v5, a1);
    specialized RangeReplaceableCollection.removeFirst(_:)(1);
    return;
  }
LABEL_7:
  __break(1u);
}

void specialized RangeReplaceableCollection.removeFirst()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  if (!((unint64_t)*v0 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_13;
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v5)
  {
    __break(1u);
    goto LABEL_10;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_11:
    v3 = MEMORY[0x18D75E3BC](0, v1);
    v2 = v3;
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(_QWORD *)(v1 + 32);
    v3 = swift_retain();
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 112))(v3);
    swift_release();
    specialized RangeReplaceableCollection.removeFirst(_:)(1);
    return;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

uint64_t specialized RangeReplaceableCollection.removeFirst()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    outlined init with copy of FocusStoreList.Item(*(_QWORD *)v1 + 32, a1);
    return specialized Array.replaceSubrange<A>(_:with:)(0, 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized RangeReplaceableCollection.removeAll(where:)(uint64_t (*a1)(__int128 *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(__int128 *);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27[3];
  __int128 v28[4];
  unint64_t v29;

  v6 = *(_QWORD *)v2;
  v29 = MEMORY[0x1E0DEE9D8];
  v24 = v6 >> 62;
  if (!(v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_3;
LABEL_26:
    v20 = MEMORY[0x1E0DEE9D8];
LABEL_27:
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v2 = v20;
    return result;
  }
LABEL_25:
  swift_bridgeObjectRetain_n();
  v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v21)
    goto LABEL_26;
LABEL_3:
  v8 = 0;
  v9 = v6 & 0xC000000000000001;
  v10 = v6 & 0xFFFFFFFFFFFFFF8;
  v22 = v2;
  v23 = v6 & 0xFFFFFFFFFFFFFF8;
  while (1)
  {
    if (v9)
    {
      v11 = MEMORY[0x18D75E3BC](v8, v6);
      v2 = v11;
    }
    else
    {
      if (v8 >= *(_QWORD *)(v10 + 16))
      {
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      v2 = *(_QWORD *)(v6 + 8 * v8 + 32);
      v11 = swift_retain();
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v2 + 120))(&v25, v11);
    result = swift_release();
    if (!v26)
      break;
    outlined init with take of Decodable & Encodable & Hashable(&v25, (uint64_t)v27);
    outlined init with take of Decodable & Encodable & Hashable(v27, (uint64_t)v28);
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_24;
    outlined init with take of Decodable & Encodable & Hashable(v28, (uint64_t)v27);
    v14 = a1(v27);
    if (v3)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if ((v14 & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    }
    else
    {
      v15 = v6;
      v16 = v9;
      v17 = a1;
      v18 = a2;
      if (v29 >> 62)
      {
        swift_bridgeObjectRetain();
        v19 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v19 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      outlined init with take of Decodable & Encodable & Hashable(v27, (uint64_t)&v25);
      specialized NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(v19, v19, (uint64_t)&v25);
      outlined destroy of Binding<AttributedString>((uint64_t)&v25, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
      a2 = v18;
      a1 = v17;
      v9 = v16;
      v6 = v15;
      v10 = v23;
    }
    if (v24)
    {
      swift_bridgeObjectRetain();
      v2 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v2 = *(_QWORD *)(v10 + 16);
    }
    ++v8;
    if (v13 == v2)
    {
      v20 = v29;
      v2 = v22;
      goto LABEL_27;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(__int128 *);
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE v25[40];
  __int128 v26[2];
  __int128 v27[2];
  unint64_t v28;

  v6 = *(_QWORD *)v2;
  v28 = MEMORY[0x1E0DEE9D8];
  v24 = v6 >> 62;
  if (v6 >> 62)
    goto LABEL_24;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v9 = v6 & 0xC000000000000001;
      v10 = v6 & 0xFFFFFFFFFFFFFF8;
      v22 = v2;
      v23 = v6 & 0xFFFFFFFFFFFFFF8;
      while (v9)
      {
        v11 = MEMORY[0x18D75E3BC](v8, v6);
        v2 = v11;
LABEL_7:
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v2 + 112))(v27, v11);
        swift_release();
        v12 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_23;
        outlined init with take of OptionalBinaryInteger(v27, (uint64_t)v26);
        v13 = a1(v26);
        if (v3)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        if ((v13 & 1) != 0)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
        }
        else
        {
          v14 = v6;
          v15 = v9;
          v16 = a1;
          v17 = a2;
          if (v28 >> 62)
          {
            swift_bridgeObjectRetain();
            v18 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v18 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          outlined init with take of OptionalBinaryInteger(v26, (uint64_t)v25);
          specialized NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)(v18, v18, (uint64_t)v25);
          outlined destroy of Binding<AttributedString>((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for CollectionOfOne<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
          a2 = v17;
          a1 = v16;
          v9 = v15;
          v6 = v14;
          v10 = v23;
        }
        if (v24)
        {
          swift_bridgeObjectRetain();
          v2 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v2 = *(_QWORD *)(v10 + 16);
        }
        ++v8;
        if (v12 == v2)
        {
          v20 = v28;
          v2 = v22;
          goto LABEL_26;
        }
      }
      if (v8 < *(_QWORD *)(v10 + 16))
        break;
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      swift_bridgeObjectRetain_n();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v21)
        goto LABEL_25;
    }
    v2 = *(_QWORD *)(v6 + 8 * v8 + 32);
    v11 = swift_retain();
    goto LABEL_7;
  }
LABEL_25:
  v20 = MEMORY[0x1E0DEE9D8];
LABEL_26:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v2 = v20;
  return result;
}

uint64_t specialized RangeReplaceableCollection.removeAll(where:)(uint64_t (*a1)(_BYTE *))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t *v12;
  _BYTE v13[72];
  _BYTE v14[72];
  _BYTE v15[80];
  uint64_t v16;

  v4 = *v1;
  v16 = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v4 + 32;
    swift_bridgeObjectRetain();
    v7 = MEMORY[0x1E0DEC628];
    while (1)
    {
      outlined init with copy of FocusStoreList.Item(v6, (uint64_t)v15);
      v9 = a1(v15);
      if (v2)
        break;
      if ((v9 & 1) != 0)
      {
        outlined destroy of FocusStoreList.Item((uint64_t)v15);
      }
      else
      {
        v8 = *(_QWORD *)(v16 + 16);
        outlined init with take of FocusStoreList.Item((uint64_t)v15, (uint64_t)v14);
        outlined init with copy of CollectionOfOne<FocusStoreList.Item>((uint64_t)v14, (uint64_t)v13, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t (*)(_QWORD, ValueMetadata *))v7);
        specialized Array.replaceSubrange<A>(_:with:)(v8, v8, (uint64_t)v13);
        _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_0((uint64_t)v14, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t (*)(_QWORD, ValueMetadata *))v7);
      }
      v6 += 72;
      if (!--v5)
      {
        v1 = v12;
        v10 = v16;
        goto LABEL_10;
      }
    }
    outlined destroy of FocusStoreList.Item((uint64_t)v15);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v10 = MEMORY[0x1E0DEE9D8];
LABEL_10:
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *v1 = v10;
  }
  return result;
}

uint64_t specialized NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;

  v23 = MEMORY[0x1E0DEE9D8];
  outlined init with copy of SearchFieldConfiguration.Data?(a3, (uint64_t)&v18, (unint64_t *)&lazy cache variable for type metadata for CollectionOfOne<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
  outlined init with take of OptionalBinaryInteger(&v18, (uint64_t)v16);
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  outlined assign with take of Predicate<Pack{URL}>?((uint64_t)v16, (uint64_t)&v13, &lazy cache variable for type metadata for Hashable?, (uint64_t (*)(uint64_t))type metadata accessor for Hashable);
  v20 = v13;
  v21 = v14;
  v22 = v15;
  outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)&v20, (uint64_t)&v18, &lazy cache variable for type metadata for Hashable?, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  if (v19)
  {
    v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628];
    v4 = MEMORY[0x1E0DEC658];
    v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    do
    {
      outlined init with take of OptionalBinaryInteger(&v18, (uint64_t)v16);
      v6 = v17;
      v7 = __swift_project_boxed_opaque_existential_1(v16, v17);
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for CollectionOfOne<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, v3);
      v9 = v8;
      lazy protocol witness table accessor for type CollectionOfOne<Hashable> and conformance CollectionOfOne<A>(&lazy protocol witness table cache variable for type CollectionOfOne<Hashable> and conformance CollectionOfOne<A>, (unint64_t *)&lazy cache variable for type metadata for CollectionOfOne<Hashable>, v3, v4);
      specialized append #1 <A><A1>(_:) in NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)((uint64_t)v7, &v23, v9, v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)&v20, (uint64_t)&v18, &lazy cache variable for type metadata for Hashable?, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, v5);
      v20 = 0u;
      v21 = 0u;
      v22 = 0;
    }
    while (v19);
  }
  outlined destroy of Binding<AttributedString>((uint64_t)&v20, &lazy cache variable for type metadata for CollectionOfOne<Hashable>.Iterator, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, MEMORY[0x1E0DEC610]);
  swift_beginAccess();
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, v23);
}

uint64_t FocusStoreList.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v6, v2);
  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGMaTm_0(0, &lazy cache variable for type metadata for [FocusStoreList.Item], (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DEAEC8]);
  return Array.replaceSubrange<A>(_:with:)();
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance FocusStoreList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  FocusStoreList.replaceSubrange<A>(_:with:)(*a1, a1[1]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance FocusStoreList@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = specialized RangeReplaceableCollection.init(repeating:count:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance FocusStoreList(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  _BYTE v5[72];
  _BYTE v6[72];

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  outlined init with take of FocusStoreList.Item(a1, (uint64_t)v6);
  v3 = MEMORY[0x1E0DEC628];
  outlined init with copy of CollectionOfOne<FocusStoreList.Item>((uint64_t)v6, (uint64_t)v5, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DEC628]);
  specialized Array.replaceSubrange<A>(_:with:)(v2, v2, (uint64_t)v5);
  return _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_0((uint64_t)v6, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t (*)(_QWORD, ValueMetadata *))v3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance FocusStoreList(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  _BYTE v5[72];
  _BYTE v6[72];

  v2 = *a2;
  outlined init with take of FocusStoreList.Item(a1, (uint64_t)v6);
  v3 = MEMORY[0x1E0DEC628];
  outlined init with copy of CollectionOfOne<FocusStoreList.Item>((uint64_t)v6, (uint64_t)v5, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DEC628]);
  specialized Array.replaceSubrange<A>(_:with:)(v2, v2, (uint64_t)v5);
  return _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_0((uint64_t)v6, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t (*)(_QWORD, ValueMetadata *))v3);
}

unint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance FocusStoreList@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized RangeReplaceableCollection.remove(at:)(*a1, a2);
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance FocusStoreList(uint64_t *a1)
{
  return specialized Array.replaceSubrange<A>(_:with:)(*a1, a1[1]);
}

double protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance FocusStoreList@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(keepingCapacity:) in conformance FocusStoreList(char a1)
{
  uint64_t v1;
  uint64_t result;

  if ((a1 & 1) != 0)
    return specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(*(_QWORD *)v1 + 16));
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance FocusStoreList(uint64_t (*a1)(_BYTE *))
{
  return specialized RangeReplaceableCollection.removeAll(where:)(a1);
}

void protocol witness for Collection.endIndex.getter in conformance FocusStoreList(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance FocusStoreList(uint64_t a1, _QWORD *a2))(_QWORD)
{
  uint64_t v2;
  uint64_t (*result)(_QWORD);

  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*a2 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance FocusStoreList@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance FocusStoreList@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  *a1 = *(_QWORD *)v1;
  a1[1] = 0;
  a1[2] = v2;
  return swift_bridgeObjectRetain();
}

BOOL protocol witness for Collection.isEmpty.getter in conformance FocusStoreList()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance FocusStoreList@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance FocusStoreList()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance FocusStoreList()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance FocusStoreList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FocusStoreList(uint64_t *a1, uint64_t *a2)
{
  return specialized static FocusStoreList.== infix(_:_:)(*a1, *a2);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in FocusStoreList()
{
  return lazy protocol witness table accessor for type IndexingIterator<FocusStoreList> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<FocusStoreList> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<FocusStoreList>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEC8F8], MEMORY[0x1E0DEC908]);
}

unint64_t lazy protocol witness table accessor for type FocusStoreList and conformance FocusStoreList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList;
  if (!lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusStoreList, &type metadata for FocusStoreList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList;
  if (!lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusStoreList, &type metadata for FocusStoreList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList;
  if (!lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusStoreList, &type metadata for FocusStoreList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in FocusStoreList()
{
  return lazy protocol witness table accessor for type IndexingIterator<FocusStoreList> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type DefaultIndices<FocusStoreList> and conformance DefaultIndices<A>, &lazy cache variable for type metadata for DefaultIndices<FocusStoreList>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEA200], MEMORY[0x1E0DEA228]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<FocusStoreList> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<FocusStoreList>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in FocusStoreList()
{
  return lazy protocol witness table accessor for type IndexingIterator<FocusStoreList> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<FocusStoreList> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<FocusStoreList>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEDE10], MEMORY[0x1E0DEDE48]);
}

void type metadata accessor for IndexingIterator<FocusStoreList>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type FocusStoreList and conformance FocusStoreList();
    v7 = a3(a1, &type metadata for FocusStoreList, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t lazy protocol witness table accessor for type Slice<FocusStoreList> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<FocusStoreList> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<FocusStoreList> and conformance <> Slice<A>)
  {
    type metadata accessor for IndexingIterator<FocusStoreList>(255, &lazy cache variable for type metadata for Slice<FocusStoreList>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEDE10]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type FocusStoreList and conformance FocusStoreList();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE50], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<FocusStoreList> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t closure #1 in FocusStoreUpdateAction.init<A>(value:responder:bridge:focusScopes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v26[0] = a4;
  v26[1] = a1;
  v11 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for FocusStore.Entry(255, v15, v16, v14);
  v18 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v26 - v20;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v23 = *(_QWORD *)(a2 + 24);
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))(v13, v26[0], a6);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      FocusStore.Entry.init(value:focusScopes:responder:bridge:)((uint64_t)v13, a5, v23, a6, a7, (uint64_t)v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v21, 0, 1, v17);
      v25 = type metadata accessor for FocusStore.Key(0, a6, a7, v24);
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusStore.Key<A>, v25);
      PropertyList.subscript.setter();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in FocusStoreUpdateAction.init<A>(value:focusScopes:searchFieldState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];

  v30[1] = a1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v30 - v13;
  v15 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for FocusStore.Entry(255, a5, a6, v20);
  v22 = type metadata accessor for Optional();
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)v30 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v19, a2, a5, v24);
  outlined init with copy of SearchFieldConfiguration.Data?(a4, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  FocusStore.Entry.init(value:focusScopes:searchFieldState:)((uint64_t)v19, a3, (uint64_t)v14, a5, a6, (uint64_t)v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v26, 0, 1, v21);
  v28 = type metadata accessor for FocusStore.Key(0, a5, a6, v27);
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusStore.Key<A>, v28);
  return PropertyList.subscript.setter();
}

uint64_t specialized static FocusStoreList.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (!v6)
      return 1;
    v5 = 0;
    goto LABEL_11;
  }
  v4 = a1 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  do
  {
    outlined init with copy of FocusStoreList.Item(v4, (uint64_t)v10);
    if (v10[0] > v5)
      v5 = v10[0];
    outlined destroy of FocusStoreList.Item((uint64_t)v10);
    v4 += 72;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
LABEL_11:
    v7 = a2 + 32;
    swift_bridgeObjectRetain();
    v8 = 0;
    do
    {
      outlined init with copy of FocusStoreList.Item(v7, (uint64_t)v10);
      if (v10[0] > v8)
        v8 = v10[0];
      outlined destroy of FocusStoreList.Item((uint64_t)v10);
      v7 += 72;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return v5 == v8;
  }
  return !v5;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  if (a2)
  {
    v3 = a3 - result;
    if (a3 - result >= (unint64_t)(a2 - 1))
      v3 = a2 - 1;
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL))
      v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3 + 1;
    if (v4 >= 5)
    {
      v7 = v4 & 3;
      if ((v4 & 3) == 0)
        v7 = 4;
      v5 = v4 - v7;
      v8 = 0uLL;
      v9 = (int64x2_t)(unint64_t)result;
      v10 = vdupq_n_s64(1uLL);
      v11 = v5;
      do
      {
        v9 = vaddq_s64(v9, v10);
        v8 = vaddq_s64(v8, v10);
        v11 -= 4;
      }
      while (v11);
      v6 = vaddvq_s64(vaddq_s64(v8, v9));
    }
    else
    {
      v5 = 0;
      v6 = result;
    }
    v12 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    v13 = v5 + result - a3;
    v14 = a2 - v5;
    result = v6;
    while (1)
    {
      if (!v13)
        return 0;
      if (!v12)
        break;
      ++result;
      ++v12;
      ++v13;
      if (!--v14)
        return result;
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

uint64_t specialized static FocusStoreList.Key.reduce(value:nextValue:)(uint64_t a1, void (*a2)(_QWORD *__return_ptr))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  _BYTE v8[72];
  _QWORD v9[9];

  a2(v9);
  v3 = *(_QWORD *)(v9[0] + 16);
  if (!v3)
    return swift_bridgeObjectRelease();
  v4 = v9[0] + 32;
  v5 = MEMORY[0x1E0DEC628];
  do
  {
    v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    outlined init with copy of FocusStoreList.Item(v4, (uint64_t)v9);
    outlined init with copy of CollectionOfOne<FocusStoreList.Item>((uint64_t)v9, (uint64_t)v8, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t (*)(_QWORD, ValueMetadata *))v5);
    specialized Array.replaceSubrange<A>(_:with:)(v6, v6, (uint64_t)v8);
    _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_0((uint64_t)v9, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t (*)(_QWORD, ValueMetadata *))v5);
    v4 += 72;
    --v3;
  }
  while (v3);
  return swift_bridgeObjectRelease();
}

uint64_t specialized RangeReplaceableCollection.init(repeating:count:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD, ValueMetadata *);
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[72];
  _QWORD v9[10];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = MEMORY[0x1E0DEE9D8];
  if (!a2)
  {
    outlined destroy of FocusStoreList.Item(result);
    return MEMORY[0x1E0DEE9D8];
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    v13 = a2;
    outlined init with take of FocusStoreList.Item(result, (uint64_t)&v14);
    outlined init with take of Repeated<FocusStoreList.Item>((uint64_t)&v13, (uint64_t)&v10);
    v12 = 0;
    if (v10)
    {
      v2 = 0;
      v3 = (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DEE858];
      v4 = MEMORY[0x1E0DEC628];
      while (1)
      {
        outlined init with copy of CollectionOfOne<FocusStoreList.Item>((uint64_t)&v10, (uint64_t)v9, &lazy cache variable for type metadata for Repeated<FocusStoreList.Item>, v3);
        v5 = v9[0];
        result = _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_0((uint64_t)v9, &lazy cache variable for type metadata for Repeated<FocusStoreList.Item>, v3);
        if (v2 < 0 || v2 >= v5)
          break;
        if (v2 >= v10)
          goto LABEL_15;
        v12 = v2 + 1;
        v6 = *(_QWORD *)(v15 + 16);
        outlined init with copy of FocusStoreList.Item((uint64_t)&v11, (uint64_t)v9);
        outlined init with copy of CollectionOfOne<FocusStoreList.Item>((uint64_t)v9, (uint64_t)v8, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t (*)(_QWORD, ValueMetadata *))v4);
        specialized Array.replaceSubrange<A>(_:with:)(v6, v6, (uint64_t)v8);
        _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_0((uint64_t)v9, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t (*)(_QWORD, ValueMetadata *))v4);
        v2 = v12;
        if (v12 == v10)
        {
          v7 = v15;
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    v7 = MEMORY[0x1E0DEE9D8];
LABEL_12:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v10, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<Repeated<FocusStoreList.Item>>);
    return v7;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t outlined init with take of Repeated<FocusStoreList.Item>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGMaTm_0(0, &lazy cache variable for type metadata for Repeated<FocusStoreList.Item>, MEMORY[0x1E0DEE858]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CollectionOfOne<FocusStoreList.Item>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(_QWORD, ValueMetadata *))
{
  uint64_t v6;

  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGMaTm_0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  uint64_t v4;

  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGMaTm_0(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for IndexingIterator<Repeated<FocusStoreList.Item>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexingIterator<Repeated<FocusStoreList.Item>>)
  {
    _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGMaTm_0(255, &lazy cache variable for type metadata for Repeated<FocusStoreList.Item>, MEMORY[0x1E0DEE858]);
    lazy protocol witness table accessor for type Repeated<FocusStoreList.Item> and conformance Repeated<A>();
    v0 = type metadata accessor for IndexingIterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Repeated<FocusStoreList.Item>>);
  }
}

unint64_t lazy protocol witness table accessor for type Repeated<FocusStoreList.Item> and conformance Repeated<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Repeated<FocusStoreList.Item> and conformance Repeated<A>;
  if (!lazy protocol witness table cache variable for type Repeated<FocusStoreList.Item> and conformance Repeated<A>)
  {
    _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGMaTm_0(255, &lazy cache variable for type metadata for Repeated<FocusStoreList.Item>, MEMORY[0x1E0DEE858]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE880], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Repeated<FocusStoreList.Item> and conformance Repeated<A>);
  }
  return result;
}

void _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for FocusStoreList.Item);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t type metadata accessor for Hashable()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Hashable;
  if (!lazy cache variable for type metadata for Hashable)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Hashable);
  }
  return result;
}

void type metadata accessor for IndexingIterator<Repeated<Hashable>>()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for IndexingIterator<Repeated<Hashable>>)
  {
    v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEE858];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Repeated<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, MEMORY[0x1E0DEE858]);
    lazy protocol witness table accessor for type CollectionOfOne<Hashable> and conformance CollectionOfOne<A>(&lazy protocol witness table cache variable for type Repeated<Hashable> and conformance Repeated<A>, &lazy cache variable for type metadata for Repeated<Hashable>, v0, MEMORY[0x1E0DEE880]);
    v1 = type metadata accessor for IndexingIterator();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Repeated<Hashable>>);
  }
}

uint64_t lazy protocol witness table accessor for type CollectionOfOne<Hashable> and conformance CollectionOfOne<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, a2, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Repeated<Decodable & Encodable & Hashable> and conformance Repeated<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, a2, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of Decodable & Encodable & Hashable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = v4;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void type metadata accessor for IndexingIterator<Repeated<Decodable & Encodable & Hashable>>()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for IndexingIterator<Repeated<Decodable & Encodable & Hashable>>)
  {
    v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEE858];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Repeated<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, MEMORY[0x1E0DEE858]);
    lazy protocol witness table accessor for type Repeated<Decodable & Encodable & Hashable> and conformance Repeated<A>(&lazy protocol witness table cache variable for type Repeated<Decodable & Encodable & Hashable> and conformance Repeated<A>, &lazy cache variable for type metadata for Repeated<Decodable & Encodable & Hashable>, v0, MEMORY[0x1E0DEE880]);
    v1 = type metadata accessor for IndexingIterator();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Repeated<Decodable & Encodable & Hashable>>);
  }
}

uint64_t sub_1878E2218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v6 = v5;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v8 = (v4 + v7 + 8) & ~v7;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v9 = *(int *)(v6 + 32);
  v10 = v0 + v8 + v9 + *(int *)(type metadata accessor for SearchFieldState() + 36);
  v11 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FocusStoreUpdateAction.init<A>(value:focusScopes:searchFieldState:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  return closure #1 in FocusStoreUpdateAction.init<A>(value:focusScopes:searchFieldState:)(a1, v1 + v6, *(_QWORD *)(v1 + v7), v1 + ((v7 + v9 + 8) & ~v9), v3, v4);
}

uint64_t sub_1878E23C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(unint64_t, uint64_t);

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(type metadata accessor for FocusState.Binding(0, v5, *(_QWORD *)(v4 + 24), a4) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = (v7 + *(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = v4 + v7;
  swift_release();
  swift_release();
  v11 = type metadata accessor for Binding();
  v12 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
  v12(v10 + *(int *)(v11 + 32), v5);
  v12(v4 + v9, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FocusStateBindingUpdateAction.init<A>(binding:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for FocusState.Binding(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return specialized FocusState.Binding.binding.setter(v4+ ((((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)+ v7) & ~v7), v6);
}

ValueMetadata *type metadata accessor for FocusStoreList.Key()
{
  return &type metadata for FocusStoreList.Key;
}

uint64_t destroy for FocusStoreList.Item(uint64_t a1)
{
  swift_release();
  if (*(_QWORD *)(a1 + 32))
    swift_release();
  swift_weakDestroy();
  return swift_weakDestroy();
}

uint64_t initializeWithCopy for FocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v6 = (_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  swift_retain();
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v6;
  }
  swift_weakCopyInit();
  swift_weakCopyInit();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for FocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v7;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  swift_retain();
  swift_release();
LABEL_8:
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t initializeWithTake for FocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_weakTakeInit();
  swift_weakTakeInit();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for FocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_release();
  v5 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v7;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  swift_release();
LABEL_8:
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusStoreList.Item(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FocusStoreList.Item(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FocusStoreList.Item()
{
  return &type metadata for FocusStoreList.Item;
}

ValueMetadata *type metadata accessor for FocusStoreUpdateAction()
{
  return &type metadata for FocusStoreUpdateAction;
}

ValueMetadata *type metadata accessor for FocusStateBindingUpdateAction()
{
  return &type metadata for FocusStateBindingUpdateAction;
}

uint64_t (*specialized FocusStoreUpdateAction.init<A>(value:responder:bridge:focusScopes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(uint64_t a1)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 24) = a3;
  swift_weakInit();
  v13 = swift_allocObject();
  swift_weakInit();
  v14 = *(_QWORD *)(a6 - 8);
  v15 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v16 = (*(_QWORD *)(v14 + 64) + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = a6;
  *((_QWORD *)v17 + 3) = a7;
  *((_QWORD *)v17 + 4) = v12;
  *((_QWORD *)v17 + 5) = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(&v17[v15], a1, a6);
  *(_QWORD *)&v17[v16] = a5;
  return partial apply for closure #1 in FocusStoreUpdateAction.init<A>(value:responder:bridge:focusScopes:);
}

uint64_t sub_1878E296C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1878E2990()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1878E29B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FocusStoreUpdateAction.init<A>(value:responder:bridge:focusScopes:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = v1[2];
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return closure #1 in FocusStoreUpdateAction.init<A>(value:responder:bridge:focusScopes:)(a1, v1[4], v1[5], (uint64_t)v1 + v4, *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)), v2, v1[3]);
}

uint64_t static View.makeMapKitView(inputs:_:)(uint64_t *a1, void (*a2)(uint64_t *, uint64_t *))
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v5 = *((_DWORD *)a1 + 6);
  v6 = *((_DWORD *)a1 + 7);
  v7 = *((_DWORD *)a1 + 8);
  v8 = *((_DWORD *)a1 + 9);
  v9 = a1[5];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewInputs.init(withoutGeometry:)();
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  v18 = v8;
  v19 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  a2(&v12, &v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t MapKitViewTraitCollection.updateTraitKeysWithForEach<A>(contentID:id:offset:isConstant:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  ViewTraitCollection.subscript.setter();
  ViewTraitCollection.subscript.setter();
  if ((a4 & 1) == 0)
    return ViewTraitCollection.setTag<A>(for:value:)();
  type metadata accessor for TagValueTraitKey<Int>();
  lazy protocol witness table accessor for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>();
  return ViewTraitCollection.subscript.setter();
}

void type metadata accessor for TagValueTraitKey<Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TagValueTraitKey<Int>)
  {
    v0 = type metadata accessor for TagValueTraitKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TagValueTraitKey<Int>);
  }
}

unint64_t lazy protocol witness table accessor for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>;
  if (!lazy protocol witness table cache variable for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>)
  {
    type metadata accessor for TagValueTraitKey<Int>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3440], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>);
  }
  return result;
}

uint64_t CGSize.withinRange(axes:rangeCosine:)(unsigned __int8 *a1, CGFloat a2)
{
  unsigned int v3;
  CGSize v4;

  v3 = *a1;
  if (one-time initialization token for all != -1)
    swift_once();
  if (v3 == static _EventDirections.all)
    return 1;
  v4 = CGSize.normalized()();
  if ((v3 & 1) != 0 && -v4.width > a2)
    return 1;
  if ((v3 & 2) != 0 && v4.width > a2 || (v3 & 4) != 0 && -v4.height > a2)
    return 1;
  else
    return (v4.height > a2) & (v3 >> 3);
}

_QWORD *static _EventDirections.all.getter@<X0>(_BYTE *a1@<X8>)
{
  return static SwipeGesture.Direction.horizontal.getter(&one-time initialization token for all, &static _EventDirections.all, a1);
}

uint64_t _EventDirections.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t _EventDirections.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static _EventDirections.left.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static _EventDirections.right.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static _EventDirections.up.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static _EventDirections.down.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

_QWORD *static _EventDirections.horizontal.getter@<X0>(_BYTE *a1@<X8>)
{
  return static SwipeGesture.Direction.horizontal.getter(&one-time initialization token for horizontal, static _EventDirections.horizontal, a1);
}

_QWORD *static _EventDirections.vertical.getter@<X0>(_BYTE *a1@<X8>)
{
  return static SwipeGesture.Direction.horizontal.getter(&one-time initialization token for vertical, &static _EventDirections.vertical, a1);
}

unint64_t lazy protocol witness table accessor for type _EventDirections and conformance _EventDirections()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections;
  if (!lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _EventDirections, &type metadata for _EventDirections);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections;
  if (!lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _EventDirections, &type metadata for _EventDirections);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections;
  if (!lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _EventDirections, &type metadata for _EventDirections);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections;
  if (!lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _EventDirections, &type metadata for _EventDirections);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections);
  }
  return result;
}

void View.sidebarState(isCollapsed:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.fixedSidebar(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.resizesContainerOnCollapse(_:)()
{
  View.fixedSidebar(_:)();
}

unint64_t lazy protocol witness table accessor for type MagnifyEvent and conformance MagnifyEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MagnifyEvent and conformance MagnifyEvent;
  if (!lazy protocol witness table cache variable for type MagnifyEvent and conformance MagnifyEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MagnifyEvent, &type metadata for MagnifyEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagnifyEvent and conformance MagnifyEvent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MagnifyEvent and conformance MagnifyEvent;
  if (!lazy protocol witness table cache variable for type MagnifyEvent and conformance MagnifyEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MagnifyEvent, &type metadata for MagnifyEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagnifyEvent and conformance MagnifyEvent);
  }
  return result;
}

__n128 (*protocol witness for SpatialEventType.location.modify in conformance MagnifyEvent(uint64_t a1))(__n128 *a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  return protocol witness for SpatialEventType.location.modify in conformance MagnifyEvent;
}

__n128 protocol witness for SpatialEventType.location.modify in conformance MagnifyEvent(__n128 *a1)
{
  __n128 result;

  result = *a1;
  *(__n128 *)(a1[1].n128_u64[0] + 24) = *a1;
  return result;
}

uint64_t protocol witness for EventType.init(_:) in conformance MagnifyEvent@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  type metadata accessor for EventType();
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 24) = v7;
    v3 = v8;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 1;
    v3 = 0uLL;
    *(_OWORD *)(a1 + 24) = 0u;
  }
  *(_OWORD *)(a1 + 40) = v3;
  return result;
}

uint64_t protocol witness for HitTestableEventType.hitTestLocation.getter in conformance MagnifyEvent()
{
  lazy protocol witness table accessor for type MagnifyEvent and conformance MagnifyEvent();
  return HitTestableEventType<>.hitTestLocation.getter();
}

uint64_t protocol witness for HitTestableEventType.hitTestRadius.getter in conformance MagnifyEvent()
{
  lazy protocol witness table accessor for type MagnifyEvent and conformance MagnifyEvent();
  return HitTestableEventType<>.hitTestRadius.getter();
}

uint64_t initializeWithCopy for MagnifyEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MagnifyEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for MagnifyEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for MagnifyEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MagnifyEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MagnifyEvent()
{
  return &type metadata for MagnifyEvent;
}

BOOL specialized static MagnifyEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;

  if (*(double *)a1 != *(double *)a2 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(double *)(a1 + 24);
  v7 = *(double *)(a1 + 32);
  v10 = *(double *)(a1 + 40);
  v9 = *(double *)(a1 + 48);
  v11 = *(_QWORD *)(a2 + 16);
  v13 = *(double *)(a2 + 24);
  v12 = *(double *)(a2 + 32);
  v14 = *(double *)(a2 + 40);
  if (!v6)
  {
    if (!v11)
    {
      if (v8 != v13 || v7 != v12 || v10 != v14)
        return 0;
      return v9 == *(double *)(a2 + 48);
    }
    swift_release();
    return 0;
  }
  if (!v11)
  {
    swift_retain();
    swift_release();
    return 0;
  }
  v3 = 0;
  if (v6 == v11)
  {
    v15 = v8 == v13 && v7 == v12;
    if (v15 && v10 == v14)
      return v9 == *(double *)(a2 + 48);
  }
  return v3;
}

uint64_t type metadata completion function for OptionButton()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for OptionButton(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) != 0 && (v6 & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
    v10 = ((unint64_t)v4 + v6) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v10 + 16) = v12;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for OptionButton(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t initializeWithCopy for OptionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OptionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for OptionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_OWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t assignWithTake for OptionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionButton(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((v7 + a1) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if ((((v7 & 0xFFFFFFFFFFFFFFF8) + 24) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1878E37BC + 4 * byte_187C6A9C0[v10]))();
  }
}

void storeEnumTagSinglePayload for OptionButton(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if ((*(_DWORD *)(v5 + 64) & 0xFFFFFFF8) == 0xFFFFFFE8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if ((*(_DWORD *)(v5 + 64) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    v10 = ~v6 + a2;
    bzero(a1, (*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFFFF8) + 24);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1878E392C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1878E39A0);
}

void sub_1878E3934(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1878E393CLL);
  JUMPOUT(0x1878E39A0);
}

void sub_1878E3978()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1878E39A0);
}

void sub_1878E3980()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1878E39A0);
}

uint64_t sub_1878E3988(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1878E39A0);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1878E399CLL);
    JUMPOUT(0x1878E3994);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for OptionButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionButton);
}

uint64_t associated type witness table accessor for View.Body : View in OptionButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void EnvironmentValues.defaultWheelPickerItemHeight.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.defaultWheelPickerItemHeight.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.defaultWheelPickerItemHeight.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.defaultWheelPickerItemHeight(_:)()
{
  _diagnoseUnavailableCodeReached()();
}

void sub_1878E3A38()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1878E3A5C()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_1878E3A6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>);
  }
}

uint64_t View.platformNavigationPresentationBridgingEnabled(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.platformNavigationPresentationBridgingEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t sub_1878E3C88@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.platformNavigationPresentationBridgingEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1878E3CC4()
{
  return EnvironmentValues.platformNavigationPresentationBridgingEnabled.setter();
}

uint64_t EnvironmentValues.platformNavigationPresentationBridgingEnabled.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>);
  }
}

ValueMetadata *type metadata accessor for PlatformNavigationPresentationBridgingEnabledKey()
{
  return &type metadata for PlatformNavigationPresentationBridgingEnabledKey;
}

ValueMetadata *type metadata accessor for ScrollEventConverter()
{
  return &type metadata for ScrollEventConverter;
}

unint64_t ScrollEventConverter.convert(_:in:)(unint64_t a1, void *a2)
{
  double *v2;
  id v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t inited;
  unint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v5 = objc_msgSend((id)a1, sel_phase);
  if ((unint64_t)v5 <= 1)
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v7 = (unint64_t)v5;
  v8 = *(unsigned int *)v2;
  type metadata accessor for (UIScrollEvent, PanEvent)();
  v10 = v9;
  v11 = v8 ^ a1;
  objc_msgSend((id)a1, sel__adjustedAcceleratedDeltaInView_, a2);
  v14 = v13 + v2[2];
  v2[1] = v2[1] + v12;
  v2[2] = v14;
  v15 = (id)a1;
  v16 = a2;
  PanEvent.init(_:accumulatedScrollDelta:in:)(v15, a2, (uint64_t)v31);
  v17 = v31[0];
  v18 = v31[1];
  v19 = v31[2];
  v20 = v31[3];
  v21 = v32;
  v22 = v33;
  v23 = v34;
  v24 = v35;
  v25 = v36;
  v26 = v37;
  v30 = v38;
  v27 = v39;
  if ((v7 & 0xFFFFFFFFFFFFFFFELL) == 4)
  {
    *(_DWORD *)v2 = v8 + 1;
    v2[1] = 0.0;
    v2[2] = 0.0;
  }
  type metadata accessor for _ContiguousArrayStorage<(EventID, PanEvent)>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  *(_QWORD *)(inited + 32) = v10;
  *(_QWORD *)(inited + 40) = v11;
  *(_QWORD *)(inited + 48) = v17;
  *(_QWORD *)(inited + 56) = v18;
  *(_QWORD *)(inited + 64) = v19;
  *(_QWORD *)(inited + 72) = v20;
  *(_BYTE *)(inited + 80) = v21;
  *(_QWORD *)(inited + 88) = v22;
  *(_QWORD *)(inited + 96) = v23;
  *(_QWORD *)(inited + 104) = v24;
  *(_QWORD *)(inited + 112) = v25;
  *(_QWORD *)(inited + 120) = v26;
  *(_QWORD *)(inited + 128) = v30;
  *(_BYTE *)(inited + 136) = v27;
  v29 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for (EventID, PanEvent)();
  swift_arrayDestroy();
  return v29;
}

void PanEvent.init(_:accumulatedScrollDelta:in:)(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  objc_msgSend(a1, sel_locationInView_, a2);
  objc_msgSend(a1, sel_timestamp);
  objc_msgSend(a1, sel_phase);
  PanEvent.init(globalLocation:phase:timestamp:globalTranslation:touchType:)();
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v9;
  *(_BYTE *)(a3 + 32) = v10;
  *(_QWORD *)(a3 + 40) = v11;
  *(_QWORD *)(a3 + 48) = v12;
  *(_QWORD *)(a3 + 56) = v13;
  *(_QWORD *)(a3 + 64) = v14;
  *(_QWORD *)(a3 + 72) = v15;
  *(_QWORD *)(a3 + 80) = v16;
  *(_BYTE *)(a3 + 88) = v17;
  PanEvent.globalTranslation.getter();
  PanEvent.translation.setter();

  swift_release();
  *(_QWORD *)(a3 + 48) = 0;

}

void type metadata accessor for (UIScrollEvent, PanEvent)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (UIScrollEvent, PanEvent))
  {
    type metadata accessor for UIScrollEvent();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UIScrollEvent, PanEvent));
  }
}

unint64_t type metadata accessor for UIScrollEvent()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIScrollEvent;
  if (!lazy cache variable for type metadata for UIScrollEvent)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIScrollEvent);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(EventID, PanEvent)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, PanEvent)>)
  {
    type metadata accessor for (EventID, PanEvent)();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, PanEvent)>);
  }
}

void type metadata accessor for (EventID, PanEvent)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (EventID, PanEvent))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (EventID, PanEvent));
  }
}

uint64_t getEnumTagSinglePayload for PlatformSliderStyle.ValueLabel(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1878E4378 + 4 * byte_187C6AAD0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PlatformSliderStyle.ValueLabel(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for PlatformSliderStyle.ValueLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformSliderStyle.ValueLabel);
}

ValueMetadata *type metadata accessor for PlatformSliderStyle.SymbolEffectState()
{
  return &type metadata for PlatformSliderStyle.SymbolEffectState;
}

uint64_t associated type witness table accessor for View.Body : View in PlatformSliderStyle.ValueLabel<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PlatformSliderStyle.ValueLabel.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v3, v5, *(_QWORD *)(v9 + 24));
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v8, v5, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t type metadata completion function for PresentationHostingControllerBase()
{
  return swift_initClassMetadata2();
}

BOOL PresentationHostingController.presentingBridge<A>(matches:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 v4;
  int v5;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  v5 = *(unsigned __int8 *)(v3 + direct field offset for PresentationHostingController.presentingBridgeKind);
  return ((v5 ^ v4) & 1) == 0 && v5 != 2;
}

_QWORD *PresentationHostingController.setupSheet<A>(for:presenter:style:)(uint64_t a1, UIViewController *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  Swift::Bool_optional v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[25];
  Swift::Bool v43;
  __int128 v44;
  _BYTE v45[32];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[2];

  v6 = v5;
  v5[direct field offset for PresentationHostingController.presentingBridgeKind] = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5) & 1;
  type metadata accessor for (PresentationOptionsPreference, Bool)();
  static Update.ensure<A>(_:)();
  v9.value = v43;
  v49 = v41;
  v50[0] = *(_OWORD *)v42;
  *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)&v42[9];
  *(_OWORD *)&v45[16] = v37;
  v46 = v38;
  v47 = v39;
  v48 = v40;
  v44 = v35;
  *(_OWORD *)v45 = v36;
  UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(a2, 1);
  v10 = objc_msgSend(v5, sel__preferredTransition);

  if (!v10)
    PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)(a3, (uint64_t)&v44);
  v11 = objc_msgSend(v6, sel_presentationController);
  if (v11)
  {
    v12 = v11;
    objc_opt_self();
    v13 = (id)swift_dynamicCastObjCClass();
    if (v13)
      goto LABEL_8;

  }
  v14 = objc_msgSend(v6, sel_popoverPresentationController);
  if (!v14)
    return outlined destroy of PresentationOptionsPreference(&v44);
  v15 = v14;
  v13 = objc_msgSend(v14, sel_adaptiveSheetPresentationController);

  if (!v13)
    return outlined destroy of PresentationOptionsPreference(&v44);
LABEL_8:
  v16 = v13;
  PresentationHostingController.configureSizingOptions(for:sheetController:)((uint64_t)&v44, v13);

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    outlined init with copy of PresentationSizing?((uint64_t)&v49, (uint64_t)&v32);
    if (v33)
    {
      outlined init with take of OptionalBinaryInteger(&v32, (uint64_t)&v35);
    }
    else
    {
      *((_QWORD *)&v36 + 1) = &type metadata for AutomaticPresentationSizing;
      *(_QWORD *)&v37 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of PresentationSizing?((uint64_t)&v32);
    }
  }
  else
  {
    *(_QWORD *)&v37 = 0;
    v35 = 0u;
    v36 = 0u;
  }
  PresentationHostingController.updatePreferredContentSizeIfNeeded(presenter:sizing:)(a2, (uint64_t)&v35);
  outlined destroy of PresentationSizing?((uint64_t)&v35);
  v17 = PresentationHostingController.shouldIgnoreDetentsConfiguration.getter();
  outlined init with copy of PresentationOptionsPreference((uint64_t)&v44, (uint64_t)&v35);
  if (v17)
  {
    outlined destroy of PresentationOptionsPreference(&v35);
    outlined init with copy of PresentationOptionsPreference((uint64_t)&v44, (uint64_t)&v32);
  }
  else
  {
    v18 = *(_QWORD *)(v35 + 16);
    outlined destroy of PresentationOptionsPreference(&v35);
    outlined init with copy of PresentationOptionsPreference((uint64_t)&v44, (uint64_t)&v32);
    if (v18)
    {
      v19 = v34;
      outlined destroy of PresentationOptionsPreference(&v32);
      if ((v19 | 2) != 2)
        PresentationHostingController.configureDetents(of:using:)((uint64_t *)v16, (double *)&v44);
      goto LABEL_19;
    }
  }
  outlined destroy of PresentationOptionsPreference(&v32);
LABEL_19:
  if (*(_QWORD *)v45)
  {
    v29 = *((_QWORD *)&v44 + 1);
    v30 = *(_QWORD *)v45;
    v31 = *(_OWORD *)&v45[8];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<PresentationDetent>, (uint64_t)&type metadata for PresentationDetent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v27);
    v20 = v27;
    v21 = v28;
    if ((specialized Set.contains(_:)(v27, v28, v44) & 1) != 0)
    {
      v29 = v20;
      v30 = v21;
      PresentationDetent.uiSheetDetentId.getter();
      v23 = v22;
      objc_msgSend(v16, sel_setSelectedDetentIdentifier_, v22);

    }
    else
    {
      MEMORY[0x18D75AC90](0xD000000000000052, 0x8000000187BE0E20);
    }
  }
  outlined init with copy of PresentationOptionsPreference((uint64_t)&v44, (uint64_t)&v29);
  v24 = (uint64_t)&v6[direct field offset for PresentationHostingController.lastPresentationOptions];
  swift_beginAccess();
  outlined assign with take of PresentationOptionsPreference?((uint64_t)&v29, v24);
  swift_endAccess();
  if (MEMORY[0x18D760234](&v6[direct field offset for PresentationHostingController.delegate]))
  {
    v25 = swift_dynamicCastObjCProtocolConditional();
    if (!v25)
      swift_unknownObjectRelease();
  }
  else
  {
    v25 = 0;
  }
  objc_msgSend(v16, sel_setDelegate_, v25);
  swift_unknownObjectRelease();
  PresentationHostingController.setBackgroundTransparency(preferenceValue:)(v9);

  return outlined destroy of PresentationOptionsPreference(&v44);
}

Swift::Void __swiftcall PresentationHostingController.setBackgroundTransparency(preferenceValue:)(Swift::Bool_optional preferenceValue)
{
  _QWORD *v1;
  int value;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  void *v6;
  char v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  value = preferenceValue.value;
  v3 = *v1;
  v4 = *MEMORY[0x1E0DEEDD8];
  specialized UIHostingController.host.getter();
  v5 = _UIHostingView.wantsTransparentBackground.getter();
  v6 = (void *)specialized UIHostingController.host.getter();
  v7 = *((_BYTE *)v1 + direct field offset for PresentationHostingController.presentationWantsTransparentBackground);
  v8 = v6;
  _UIHostingView.setWantsTransparentBackground(for:_:)(4, v7);

  if (value != 2)
  {
    v9 = (id)specialized UIHostingController.host.getter();
    _UIHostingView.setWantsTransparentBackground(for:_:)(8, value & 1);

  }
  specialized UIHostingController.host.getter();
  if (v5 != _UIHostingView.wantsTransparentBackground.getter())
  {
    v10 = (void *)specialized UIHostingController.host.getter();
    v12 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v4 & v3) + 0x3C0), *(_QWORD *)((v4 & v3) + 0x3C8), v11);
    v13 = v10;
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v12);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
}

id PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id result;
  uint64_t v6;

  if (a1 == 8 || a1 == 5)
    objc_msgSend(v2, sel_setModalPresentationCapturesStatusBarAppearance_, 1);
  objc_msgSend(v2, sel_setModalPresentationStyle_, a1);
  result = objc_msgSend(v2, sel_modalPresentationStyle);
  if (result == (id)7 || result == (id)2)
  {
    MEMORY[0x1E0C80A78](result, v6);
    static Update.ensure<A>(_:)();
    return PresentationHostingController.configureSizingOptions(for:sheetController:)(a2, 0);
  }
  return result;
}

void @objc PresentationHostingControllerBase._remoteSheet.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void PresentationHostingControllerBase.__allocating_init(rootView:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  specialized UIHostingController.init(rootView:)(a1);
}

uint64_t sub_1878E4D98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 936) - 8) + 8))(v2);
  return a1;
}

void PresentationHostingControllerBase.__allocating_init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  PresentationHostingControllerBase.init(coder:rootView:)(a1, a2);
}

void PresentationHostingControllerBase.init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  specialized UIHostingController.init(coder:rootView:)(a1, a2);
}

void *sub_1878E4E38(void *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  id v7;

  v5 = *(_QWORD *)(v3 + 936);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7 = a1;
  v6(v1, v5);
  if (a1)

  return a1;
}

id PresentationHostingControllerBase.init(coder:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  id v7;
  objc_super v9;

  v6 = (objc_class *)type metadata accessor for PresentationHostingControllerBase(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x3A8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x3B0), a4);
  v9.receiver = v4;
  v9.super_class = v6;
  v7 = objc_msgSendSuper2(&v9, sel_initWithCoder_, a1);

  return v7;
}

id @objc PresentationHostingControllerBase.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  return PresentationHostingControllerBase.init(coder:)(v3, v4, v5, v6);
}

void PresentationHostingControllerBase.__allocating_init(hostingView:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  UIHostingController.init(hostingView:)(a1);
}

id PresentationHostingControllerBase.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for PresentationHostingControllerBase(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x3A8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x3B0), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t type metadata accessor for PresentationHostingControllerBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PresentationHostingControllerBase);
}

uint64_t type metadata completion function for PresentationHostingController()
{
  return swift_initClassMetadata2();
}

uint64_t one-time initialization function for clientNeedsOscillationSuppression()
{
  uint64_t result;

  static Semantics.v6.getter();
  result = isLinkedOnOrAfter(_:)();
  clientNeedsOscillationSuppression = result & 1;
  return result;
}

id @objc PresentationHostingController._remoteSheet.getter(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = (void *)PresentationHostingController._remoteSheet.getter();

  return v2;
}

uint64_t PresentationHostingController._remoteSheet.getter()
{
  uint64_t v0;
  uint64_t Attribute;
  uint64_t v2;
  uint64_t v4;

  specialized UIHostingController.host.getter();
  lazy protocol witness table accessor for type RemoteSheetContainerViewGraphFeature and conformance RemoteSheetContainerViewGraphFeature();
  swift_retain();
  v0 = ViewGraph.subscript.getter();
  swift_release();
  if (!v0)
    return 0;
  Attribute = AGWeakAttributeGetAttribute();
  if ((_DWORD)Attribute == *MEMORY[0x1E0CFED28])
    return 0;
  MEMORY[0x1E0C80A78](Attribute, v2);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _UIRemoteSheet?, (uint64_t (*)(uint64_t))type metadata accessor for _UIRemoteSheet, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  static Update.ensure<A>(_:)();
  return v4;
}

uint64_t closure #1 in PresentationHostingController._remoteSheet.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  _BYTE v4[16];

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = AGGraphGetValue();
  if (*(unsigned __int8 *)(result + 8) == 255)
  {
    v3 = 0;
  }
  else
  {
    outlined init with copy of RemoteSheetContainerVCKey.Storage(result, (uint64_t)v4);
    v3 = RemoteSheetContainerVCKey.Storage.remoteSheet.getter();
    result = outlined destroy of RemoteSheetContainerVCKey.Storage((uint64_t)v4);
  }
  *a1 = v3;
  return result;
}

double @objc PresentationHostingController.preferredContentSize.getter(void *a1)
{
  id v1;
  double v2;
  double v3;

  v1 = a1;
  PresentationHostingController.preferredContentSize.getter();
  v3 = v2;

  return v3;
}

id PresentationHostingController.preferredContentSize.getter()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_preferredContentSize);
}

void @objc PresentationHostingController.preferredContentSize.setter(void *a1, double a2, double a3)
{
  id v5;

  v5 = a1;
  PresentationHostingController.preferredContentSize.setter(a2, a3);

}

uint64_t PresentationHostingController.preferredContentSize.setter(double a1, double a2)
{
  void *v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v12[6];

  v5 = (void *)objc_opt_self();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v2;
  *(double *)(v6 + 24) = a1;
  *(double *)(v6 + 32) = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in PresentationHostingController.preferredContentSize.setter;
  *(_QWORD *)(v7 + 24) = v6;
  v12[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v12[5] = v7;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed () -> ();
  v12[3] = &block_descriptor_69;
  v8 = _Block_copy(v12);
  v9 = v2;
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_performWithoutAnimation_, v8);
  _Block_release(v8);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

id closure #1 in PresentationHostingController.preferredContentSize.setter(_QWORD *a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v9;
  objc_super v11;

  v9 = (objc_class *)type metadata accessor for PresentationHostingController(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x3C0), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x3C8), a6);
  v11.receiver = a1;
  v11.super_class = v9;
  return objc_msgSendSuper2(&v11, sel_setPreferredContentSize_, a2, a3);
}

Swift::Void __swiftcall PresentationHostingController.sizingOptionsDidChange(from:)(SwiftUI::UIHostingControllerSizingOptions from)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  id v7;
  void *v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char v35[16];
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[9];
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  _UNKNOWN **v49;
  _BYTE v50[40];

  v2 = v1;
  v3 = *(_QWORD *)v1;
  v4 = *MEMORY[0x1E0DEEDD8];
  v5 = *(_QWORD *)from.rawValue;
  v6 = (double *)&v1[direct field offset for PresentationHostingController.observedSize];
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSo6CGSizeV_s5NeverOytTg5((void (*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in PresentationHostingController.sizingOptionsDidChange(from:), (uint64_t)v35, *(_QWORD *)&v1[direct field offset for PresentationHostingController.observedSize], *(_QWORD *)&v1[direct field offset for PresentationHostingController.observedSize + 8], v1[direct field offset for PresentationHostingController.observedSize + 16]);
  v7 = objc_msgSend(v1, sel_presentingViewController);
  if (!v7)
    goto LABEL_15;
  v8 = v7;
  v9 = &v1[direct field offset for PresentationHostingController.lastPresentationOptions];
  swift_beginAccess();
  if (!*(_QWORD *)v9)
  {
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
LABEL_13:

    outlined destroy of PresentationSizing?((uint64_t)&v47);
LABEL_15:
    v39[0] = v5;
    UIHostingController.sizingOptionsDidChange(from:)((SwiftUI::UIHostingControllerSizingOptions)v39);
    return;
  }
  outlined init with copy of PresentationOptionsPreference((uint64_t)v9, (uint64_t)v39);
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    outlined init with copy of PresentationSizing?((uint64_t)&v43, (uint64_t)&v36);
    if (v38)
    {
      outlined init with take of OptionalBinaryInteger(&v36, (uint64_t)&v47);
    }
    else
    {
      *((_QWORD *)&v48 + 1) = &type metadata for AutomaticPresentationSizing;
      v49 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of PresentationSizing?((uint64_t)&v36);
    }
  }
  else
  {
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
  }
  outlined destroy of PresentationOptionsPreference(v39);
  if (!*((_QWORD *)&v48 + 1))
    goto LABEL_13;
  outlined init with take of OptionalBinaryInteger(&v47, (uint64_t)v50);
  if ((PresentationHostingController.shouldUsePresentationSizing.getter() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);

    goto LABEL_15;
  }
  v10 = objc_msgSend(v2, sel_traitCollection);
  v11 = objc_msgSend(v10, sel_userInterfaceIdiom);

  UIUserInterfaceIdiom.idiom.getter((uint64_t)v11, (uint64_t)&v47);
  v12 = v47;
  if ((_QWORD)v47)
  {
    v33 = *((_QWORD *)&v47 + 1);
    v39[0] = v47;
  }
  else
  {
    static _GraphInputs.defaultInterfaceIdiom.getter();
    v12 = v39[0];
    v33 = v39[1];
  }
  v13 = v8;
  v14 = objc_msgSend(v13, sel_presentingViewController);
  v15 = v13;
  if (v14)
  {
    v16 = v13;
    do
    {
      v15 = v14;

      v14 = objc_msgSend(v15, sel_presentingViewController);
      v16 = v15;
    }
    while (v14);
  }
  v17 = objc_msgSend(v15, sel_parentViewController, v33);
  if (v17)
  {
    do
    {
      v18 = v17;

      v17 = objc_msgSend(v18, sel_parentViewController);
      v15 = v18;
    }
    while (v17);
  }
  else
  {
    v18 = v15;
  }
  v19 = objc_msgSend(v18, sel_view);

  if (v19)
  {
    v20 = v4 & v3;
    v21 = *(_QWORD *)&v2[direct field offset for PresentationHostingController.lastColumnCount];
    outlined init with copy of TableColumnList((uint64_t)v50, (uint64_t)v39);
    v39[5] = v19;
    v39[6] = v21;
    v39[7] = 0;
    v39[8] = 0;
    v40 = 1;
    v41 = 0;
    v42 = 1;
    v43 = 0;
    v44 = 1;
    v45 = v12;
    v46 = v34;
    specialized UIHostingController.host.getter();
    specialized UIHostingController.host.getter();
    v22 = *(_QWORD *)(v20 + 960);
    v23 = *(_QWORD *)(v20 + 968);
    v25 = type metadata accessor for _UIHostingView(255, v22, v23, v24);
    *((_QWORD *)&v47 + 1) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v25);
    swift_unknownObjectWeakInit();
    v26 = v19;
    specialized SheetSizing.sheetSizeThatFits<A>(host:subview:)((uint64_t)&v47);
    v28 = v27;
    v30 = v29;
    outlined destroy of weak FallbackResponderProvider?((uint64_t)&v47);
    PresentationHostingController.preferredContentSize.setter(v28, v30);
    *v6 = v28;
    v6[1] = v30;
    *((_BYTE *)v6 + 16) = 0;
    specialized UIHostingController.host.getter();
    swift_retain();
    _ProposedSize.init(width:height:)();
    *(_QWORD *)&v36 = v47;
    BYTE8(v36) = BYTE8(v47);
    v37 = v48;
    LOBYTE(v38) = BYTE8(v48);
    v31 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v32 = (_QWORD *)swift_allocObject();
    v32[2] = v22;
    v32[3] = v23;
    v32[4] = v31;
    v32[5] = v12;
    v32[6] = v34;
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();

    swift_release();
    swift_release();
    outlined destroy of SheetSizing((uint64_t)v39);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in PresentationHostingController.sizingOptionsDidChange(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  specialized UIHostingController.host.getter();
  swift_retain();
  _ProposedSize.init(width:height:)();
  swift_beginAccess();
  type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
  ViewGraphGeometryObservers.stopObserving(proposal:)();
  swift_endAccess();
  result = swift_release();
  v4 = a2 + direct field offset for PresentationHostingController.observedSize;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 1;
  return result;
}

uint64_t PresentationHostingController.shouldUsePresentationSizing.getter()
{
  char *v0;
  char v1;
  id v3;
  void *v4;
  id v5;
  char *v6;
  uint64_t v7[3];

  UIHostingController.sizingOptions.getter(v7);
  if (!v7[0]
    && (v3 = objc_msgSend(v0, sel_sheetPresentationController)) != 0
    && (v4 = v3, v5 = objc_msgSend(v3, sel_presentationStyle), v4, v5 == (id)2))
  {
    v6 = &v0[direct field offset for PresentationHostingController.lastPresentationOptions];
    swift_beginAccess();
    if (*(_QWORD *)v6)
      v1 = v6[136] ^ 1;
    else
      v1 = 1;
  }
  else
  {
    v1 = 0;
  }
  return v1 & 1;
}

void closure #2 in PresentationHostingController.sizingOptionsDidChange(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  objc_class *ObjectType;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  double v32;
  double v33;
  double v34;
  double v35;
  __int128 v36;
  uint64_t v37;
  objc_super v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  _UNKNOWN **v52;
  _BYTE v53[40];

  v11 = a3 + 16;
  swift_beginAccess();
  v12 = MEMORY[0x18D760234](v11);
  if (!v12)
    return;
  v13 = (char *)v12;
  v14 = (_QWORD *)(v12 + direct field offset for PresentationHostingController.lastPresentationOptions);
  swift_beginAccess();
  if (!*v14)
  {
    v52 = 0;
    v50 = 0u;
    v51 = 0u;
LABEL_17:

    outlined destroy of PresentationSizing?((uint64_t)&v50);
    return;
  }
  outlined init with copy of PresentationOptionsPreference((uint64_t)v14, (uint64_t)&v38);
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    outlined init with copy of PresentationSizing?((uint64_t)&v46, (uint64_t)&v36);
    if (v37)
    {
      outlined init with take of OptionalBinaryInteger(&v36, (uint64_t)&v50);
    }
    else
    {
      *((_QWORD *)&v51 + 1) = &type metadata for AutomaticPresentationSizing;
      v52 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of PresentationSizing?((uint64_t)&v36);
    }
  }
  else
  {
    v52 = 0;
    v50 = 0u;
    v51 = 0u;
  }
  outlined destroy of PresentationOptionsPreference(&v38);
  if (!*((_QWORD *)&v51 + 1))
    goto LABEL_17;
  outlined init with take of OptionalBinaryInteger(&v50, (uint64_t)v53);
  v15 = objc_msgSend(v13, sel_presentingViewController);
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v16, sel_presentingViewController);
    v18 = v16;
    if (v17)
    {
      v19 = v16;
      do
      {
        v18 = v17;

        v17 = objc_msgSend(v18, sel_presentingViewController);
        v19 = v18;
      }
      while (v17);
    }
    v20 = objc_msgSend(v18, sel_parentViewController);
    if (v20)
    {
      do
      {
        v21 = v20;

        v20 = objc_msgSend(v21, sel_parentViewController);
        v18 = v21;
      }
      while (v20);
    }
    else
    {
      v21 = v18;
    }
    v22 = objc_msgSend(v21, sel_view);

    if (v22)
    {
      v23 = *(_QWORD *)&v13[direct field offset for PresentationHostingController.lastColumnCount];
      ObjectType = (objc_class *)swift_getObjectType();
      v38.receiver = v13;
      v38.super_class = ObjectType;
      objc_msgSendSuper2(&v38, sel_preferredContentSize);
      v26 = v25;
      v28 = v27;
      outlined init with copy of TableColumnList((uint64_t)v53, (uint64_t)&v38);
      v39 = v22;
      v40 = v23;
      v41 = v26;
      v42 = v28;
      v43 = 0;
      v44 = 0;
      v45 = 1;
      v46 = 0;
      v47 = 1;
      v48 = a4;
      v49 = a5;
      specialized UIHostingController.host.getter();
      specialized UIHostingController.host.getter();
      v30 = type metadata accessor for _UIHostingView(255, a6, a7, v29);
      *((_QWORD *)&v50 + 1) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v30);
      swift_unknownObjectWeakInit();
      v31 = v22;
      specialized SheetSizing.sheetSizeThatFits<A>(host:subview:)((uint64_t)&v50);
      v33 = v32;
      v35 = v34;
      outlined destroy of weak FallbackResponderProvider?((uint64_t)&v50);
      PresentationHostingController.preferredContentSize.setter(v33, v35);

      outlined destroy of SheetSizing((uint64_t)&v38);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);

  }
}

BOOL closure #1 in PresentationHostingController.init(rootView:delegate:drawsBackground:)(uint64_t a1, uint64_t a2)
{
  return (PresentationOptionsPreference.sheetConfigurationChanged(from:)(a2) & 1) == 0;
}

void PresentationHostingController.__allocating_init(rootView:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  specialized PresentationHostingController.init(rootView:)();
}

void @objc PresentationHostingController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized PresentationHostingController.init(rootView:)();
}

Swift::Bool __swiftcall PresentationHostingController._canShowWhileLocked()()
{
  Swift::Bool v1;

  static Update.ensure<A>(_:)();
  return v1;
}

id closure #1 in PresentationHostingController._canShowWhileLocked()@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  objc_class *ObjectType;
  id result;
  objc_super v6;
  char v7;

  ObjectType = (objc_class *)swift_getObjectType();
  specialized UIHostingController.host.getter();
  swift_retain();
  GraphHost.preferenceValue<A>(_:)();
  swift_release();
  if (v7 == 2)
  {
    v6.receiver = a1;
    v6.super_class = ObjectType;
    result = objc_msgSendSuper2(&v6, sel__canShowWhileLocked);
  }
  else
  {
    result = (id)(v7 & 1);
  }
  *a2 = (_BYTE)result;
  return result;
}

BOOL @objc PresentationHostingController._canShowWhileLocked()(void *a1)
{
  id v1;
  Swift::Bool canShowWhile;

  v1 = a1;
  canShowWhile = PresentationHostingController._canShowWhileLocked()();

  return canShowWhile;
}

uint64_t PresentationHostingController.willTransition(to:with:)(void *a1, void *a2)
{
  char *v2;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  void *v10;
  char *v11;
  _QWORD v12[6];
  objc_super v13;

  v13.receiver = v2;
  v13.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v13, sel_willTransitionToTraitCollection_withTransitionCoordinator_, a1, a2);
  v5 = &v2[direct field offset for PresentationHostingController.delegate];
  result = MEMORY[0x18D760234](&v2[direct field offset for PresentationHostingController.delegate]);
  if (result)
  {
    v7 = *((_QWORD *)v5 + 1);
    ObjectType = swift_getObjectType();
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(ObjectType, v7) & 1) != 0
      && objc_msgSend(a1, sel_horizontalSizeClass) == (id)2)
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7);
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = v2;
      v12[4] = partial apply for closure #1 in PresentationHostingController.willTransition(to:with:);
      v12[5] = v9;
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 1107296256;
      v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
      v12[3] = &block_descriptor_22_0;
      v10 = _Block_copy(v12);
      v11 = v2;
      swift_release();
      objc_msgSend(a2, sel_animateAlongsideTransition_completion_, v10, 0);
      _Block_release(v10);
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

void closure #1 in PresentationHostingController.willTransition(to:with:)(int a1, id a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[6];

  v3 = objc_msgSend(a2, sel_view);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, sel_setHidden_, 1);

    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a2;
    v8[4] = partial apply for closure #1 in closure #1 in PresentationHostingController.willTransition(to:with:);
    v8[5] = v5;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 1107296256;
    v8[2] = thunk for @escaping @callee_guaranteed () -> ();
    v8[3] = &block_descriptor_28_2;
    v6 = _Block_copy(v8);
    v7 = a2;
    swift_release();
    objc_msgSend(v7, sel_dismissViewControllerAnimated_completion_, 0, v6);
    _Block_release(v6);
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in closure #1 in PresentationHostingController.willTransition(to:with:)(void *a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(a1, sel_view);
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, sel_setHidden_, 0);

  }
  else
  {
    __break(1u);
  }
}

void @objc PresentationHostingController.willTransition(to:with:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;

  v6 = a3;
  swift_unknownObjectRetain();
  v7 = a1;
  PresentationHostingController.willTransition(to:with:)(v6, a4);

  swift_unknownObjectRelease();
}

Swift::Void __swiftcall PresentationHostingController.viewWillDisappear(_:)(Swift::Bool a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  _BYTE *v5;
  id v6;
  _BYTE *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  _BYTE *v15;
  _QWORD v16[6];
  objc_super v17;

  v2 = v1;
  v17.receiver = v1;
  v17.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v17, sel_viewWillDisappear_, a1);
  v4 = direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively;
  v5 = v1;
  v6 = objc_msgSend(v5, sel_presentingViewController);
  v7 = v5;
  if (v6)
  {
    v8 = v6;
    v9 = v5;
    while (1)
    {
      v10 = swift_dynamicCastClass();
      if (!v10)
        break;
      v7 = (_BYTE *)v10;

      if (v7[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively] == 1)
        v2[v4] = 1;
      v8 = objc_msgSend(v7, sel_presentingViewController);
      v9 = v7;
      if (!v8)
        goto LABEL_8;
    }

    v7 = v9;
  }
LABEL_8:
  if (objc_msgSend(v5, sel_isBeingDismissed))
  {
    v11 = objc_msgSend(v5, sel_transitionCoordinator);
    if (v11)
    {
      v12 = v11;
      if ((objc_msgSend(v11, sel_isInteractive) & 1) != 0)
      {
        v13 = swift_allocObject();
        *(_QWORD *)(v13 + 16) = v5;
        v16[4] = partial apply for closure #1 in PresentationHostingController.viewWillDisappear(_:);
        v16[5] = v13;
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 1107296256;
        v16[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
        v16[3] = &block_descriptor_16_1;
        v14 = _Block_copy(v16);
        v15 = v5;
        swift_release();
        objc_msgSend(v12, sel_notifyWhenInteractionChangesUsingBlock_, v14);

        _Block_release(v14);
        swift_unknownObjectRelease();
        return;
      }
      swift_unknownObjectRelease();
    }
  }

}

uint64_t closure #1 in PresentationHostingController.viewWillDisappear(_:)(void *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  result = (uint64_t)objc_msgSend(a1, sel_isInteractive);
  if ((result & 1) == 0)
  {
    result = (uint64_t)objc_msgSend(a1, sel_isCancelled);
    if ((result & 1) == 0)
    {
      v5 = a2 + direct field offset for PresentationHostingController.delegate;
      result = MEMORY[0x18D760234](a2 + direct field offset for PresentationHostingController.delegate);
      if (result)
      {
        v6 = *(_QWORD *)(v5 + 8);
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8))(a2, ObjectType, v6);
        return swift_unknownObjectRelease();
      }
    }
  }
  return result;
}

void @objc PresentationHostingController.viewWillDisappear(_:)(void *a1, uint64_t a2, Swift::Bool a3)
{
  id v4;

  v4 = a1;
  PresentationHostingController.viewWillDisappear(_:)(a3);

}

Swift::Void __swiftcall PresentationHostingController.viewDidDisappear(_:)(Swift::Bool a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t ObjectType;
  objc_super v7;

  v2 = v1;
  v7.receiver = v2;
  v7.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v7, sel_viewDidDisappear_, a1);
  if (objc_msgSend(v2, sel_isBeingDismissed))
  {
    v4 = &v2[direct field offset for PresentationHostingController.delegate];
    if (MEMORY[0x18D760234](&v2[direct field offset for PresentationHostingController.delegate]))
    {
      v5 = *((_QWORD *)v4 + 1);
      ObjectType = swift_getObjectType();
      (*(void (**)(char *, _QWORD, _QWORD, uint64_t, uint64_t))(v5 + 16))(v2, v2[direct field offset for PresentationHostingController.wasPreempted], v2[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively], ObjectType, v5);
      swift_unknownObjectRelease();
    }
  }
  v2[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively] = 0;
}

void @objc PresentationHostingController.viewDidDisappear(_:)(void *a1, uint64_t a2, Swift::Bool a3)
{
  id v4;

  v4 = a1;
  PresentationHostingController.viewDidDisappear(_:)(a3);

}

uint64_t closure #1 in PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)()
{
  specialized UIHostingController.host.getter();
  swift_retain();
  GraphHost.instantiateIfNeeded()();
  return swift_release();
}

id PresentationHostingController.configureSizingOptions(for:sheetController:)(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id result;
  id v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _UNKNOWN **v13;
  uint64_t v14[12];
  uint64_t v15;

  v3 = v2;
  if (objc_msgSend(v2, sel_modalPresentationStyle) == (id)7)
  {
    v14[0] = 1;
    return (id)UIHostingController.sizingOptions.setter(v14);
  }
  if (*(_BYTE *)(a1 + 136) == 1)
  {
    v14[0] = 1;
    result = (id)UIHostingController.sizingOptions.setter(v14);
    if (a2)
      return objc_msgSend(a2, sel_setPrefersPageSizing_, 0);
    return result;
  }
  v7 = objc_msgSend(v2, sel_modalPresentationStyle);
  outlined init with copy of PresentationOptionsPreference(a1, (uint64_t)v14);
  if (v7 == (id)2)
  {
    if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    {
      outlined init with copy of PresentationSizing?((uint64_t)&v15, (uint64_t)&v9);
      if (v10)
      {
        outlined init with take of OptionalBinaryInteger(&v9, (uint64_t)&v11);
      }
      else
      {
        *((_QWORD *)&v12 + 1) = &type metadata for AutomaticPresentationSizing;
        v13 = &protocol witness table for AutomaticPresentationSizing;
        outlined destroy of PresentationSizing?((uint64_t)&v9);
      }
    }
    else
    {
      v13 = 0;
      v11 = 0u;
      v12 = 0u;
    }
    outlined destroy of PresentationOptionsPreference(v14);
    v8 = *((_QWORD *)&v12 + 1);
    outlined destroy of PresentationSizing?((uint64_t)&v11);
    if (!v8)
    {
      *(_QWORD *)&v11 = 1;
LABEL_27:
      result = (id)UIHostingController.sizingOptions.setter((uint64_t *)&v11);
      if (a2)
        return objc_msgSend(a2, sel_setPrefersPageSizing_, 0);
      return result;
    }
  }
  else
  {
    outlined destroy of PresentationOptionsPreference(v14);
  }
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    outlined init with copy of PresentationSizing?(a1 + 96, (uint64_t)&v9);
    if (v10)
    {
      outlined init with take of OptionalBinaryInteger(&v9, (uint64_t)&v11);
    }
    else
    {
      *((_QWORD *)&v12 + 1) = &type metadata for AutomaticPresentationSizing;
      v13 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of PresentationSizing?((uint64_t)&v9);
    }
    outlined destroy of PresentationSizing?((uint64_t)&v11);
    *(_QWORD *)&v11 = 0;
    goto LABEL_27;
  }
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  outlined destroy of PresentationSizing?((uint64_t)&v11);
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    outlined init with copy of PresentationSizing?(a1 + 96, (uint64_t)&v9);
    if (v10)
    {
      outlined init with take of OptionalBinaryInteger(&v9, (uint64_t)&v11);
    }
    else
    {
      *((_QWORD *)&v12 + 1) = &type metadata for AutomaticPresentationSizing;
      v13 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of PresentationSizing?((uint64_t)&v9);
    }
    return (id)outlined destroy of PresentationSizing?((uint64_t)&v11);
  }
  else
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    outlined destroy of PresentationSizing?((uint64_t)&v11);
    result = objc_msgSend(v3, sel_modalPresentationStyle);
    if (result == (id)1)
    {
      *(_QWORD *)&v11 = 1;
      result = (id)UIHostingController.sizingOptions.setter((uint64_t *)&v11);
      if (a2)
        return objc_msgSend(a2, sel_setPrefersPageSizing_, 1);
    }
  }
  return result;
}

BOOL PresentationHostingController.shouldIgnoreDetentsConfiguration.getter()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;

  v1 = objc_msgSend(v0, sel_traitCollection);
  v2 = objc_msgSend(v1, sel_horizontalSizeClass);

  if (v2 != (id)2)
    return 0;
  v3 = objc_msgSend(v0, sel_traitCollection);
  v4 = objc_msgSend(v3, sel_verticalSizeClass);

  return v4 == (id)2;
}

uint64_t closure #1 in PresentationHostingController.setupSheet<A>(for:presenter:style:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  _BYTE v4[144];

  specialized UIHostingController.host.getter();
  swift_retain();
  GraphHost.preferenceValues()();
  swift_release();
  v3 = v4[0];
  PreferenceList.subscript.getter();
  outlined init with copy of PresentationOptionsPreference((uint64_t)v4, a1);
  outlined destroy of PreferenceList.Value<PresentationOptionsPreference>((uint64_t)v4, &lazy cache variable for type metadata for PreferenceList.Value<PresentationOptionsPreference>, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE28C0]);
  PreferenceList.subscript.getter();
  result = swift_release();
  *(_BYTE *)(a1 + 137) = v3;
  return result;
}

void PresentationHostingController.updatePreferredContentSizeIfNeeded(presenter:sizing:)(void *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  _QWORD *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  double v29;
  double v30;
  double v31;
  double v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[9];
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  _UNKNOWN **v47;
  _BYTE v48[40];

  v3 = v2;
  v6 = *v3;
  v7 = *MEMORY[0x1E0DEEDD8];
  if (objc_msgSend(v3, sel_modalPresentationStyle) != (id)2)
    return;
  v8 = objc_msgSend(v3, sel_traitCollection);
  v9 = objc_msgSend(v8, sel_horizontalSizeClass);

  if (v9 != (id)2)
    return;
  outlined init with copy of PresentationSizing?(a2, (uint64_t)&v43);
  if (!v44)
  {
    v11 = (uint64_t *)((char *)v3 + direct field offset for PresentationHostingController.lastPresentationOptions);
    swift_beginAccess();
    if (*v11)
    {
      outlined init with copy of PresentationOptionsPreference((uint64_t)v11, (uint64_t)v35);
      if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
      {
        outlined init with copy of PresentationSizing?((uint64_t)&v39, (uint64_t)&v33);
        if (v34)
        {
          outlined init with take of OptionalBinaryInteger(&v33, (uint64_t)&v45);
        }
        else
        {
          *((_QWORD *)&v46 + 1) = &type metadata for AutomaticPresentationSizing;
          v47 = &protocol witness table for AutomaticPresentationSizing;
          outlined destroy of PresentationSizing?((uint64_t)&v33);
        }
      }
      else
      {
        v47 = 0;
        v45 = 0u;
        v46 = 0u;
      }
      outlined destroy of PresentationOptionsPreference(v35);
    }
    else
    {
      v47 = 0;
      v45 = 0u;
      v46 = 0u;
    }
    outlined destroy of PresentationSizing?((uint64_t)&v43);
    if (*((_QWORD *)&v46 + 1))
      goto LABEL_5;
LABEL_33:
    outlined destroy of PresentationSizing?((uint64_t)&v45);
    return;
  }
  outlined init with take of OptionalBinaryInteger(&v43, (uint64_t)&v45);
  if (!*((_QWORD *)&v46 + 1))
    goto LABEL_33;
LABEL_5:
  outlined init with take of OptionalBinaryInteger(&v45, (uint64_t)v48);
  if (a1)
  {
    v10 = a1;
  }
  else
  {
    v12 = objc_msgSend(v3, sel_presentingViewController);
    if (!v12)
    {
LABEL_29:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
      return;
    }
    v10 = v12;
  }
  v13 = a1;
  if ((PresentationHostingController.shouldUsePresentationSizing.getter() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);

    return;
  }
  v14 = objc_msgSend(v3, sel_traitCollection);
  v15 = objc_msgSend(v14, sel_userInterfaceIdiom);

  UIUserInterfaceIdiom.idiom.getter((uint64_t)v15, (uint64_t)&v45);
  v16 = v45;
  if ((_QWORD)v45)
  {
    v17 = *((_QWORD *)&v45 + 1);
    v35[0] = v45;
  }
  else
  {
    static _GraphInputs.defaultInterfaceIdiom.getter();
    v16 = v35[0];
    v17 = v35[1];
  }
  v18 = v10;
  v19 = objc_msgSend(v18, sel_presentingViewController);
  v20 = v18;
  if (v19)
  {
    v21 = v18;
    do
    {
      v20 = v19;

      v19 = objc_msgSend(v20, sel_presentingViewController);
      v21 = v20;
    }
    while (v19);
  }
  v22 = objc_msgSend(v20, sel_parentViewController);
  if (v22)
  {
    do
    {
      v23 = v22;

      v22 = objc_msgSend(v23, sel_parentViewController);
      v20 = v23;
    }
    while (v22);
  }
  else
  {
    v23 = v20;
  }
  v24 = objc_msgSend(v23, sel_view);

  if (v24)
  {
    v25 = *(uint64_t *)((char *)v3 + direct field offset for PresentationHostingController.lastColumnCount);
    outlined init with copy of TableColumnList((uint64_t)v48, (uint64_t)v35);
    v35[5] = v24;
    v35[6] = v25;
    v35[7] = 0;
    v35[8] = 0;
    v36 = 1;
    v37 = 0;
    v38 = 1;
    v39 = 0;
    v40 = 1;
    v41 = v16;
    v42 = v17;
    specialized UIHostingController.host.getter();
    specialized UIHostingController.host.getter();
    v27 = type metadata accessor for _UIHostingView(255, *(_QWORD *)((v7 & v6) + 0x3C0), *(_QWORD *)((v7 & v6) + 0x3C8), v26);
    *((_QWORD *)&v45 + 1) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v27);
    swift_unknownObjectWeakInit();
    v28 = v24;
    specialized SheetSizing.sheetSizeThatFits<A>(host:subview:)((uint64_t)&v45);
    v30 = v29;
    v32 = v31;
    outlined destroy of weak FallbackResponderProvider?((uint64_t)&v45);
    PresentationHostingController.preferredContentSize.setter(v30, v32);

    outlined destroy of SheetSizing((uint64_t)v35);
    goto LABEL_29;
  }
  __break(1u);
}

_QWORD *PresentationHostingController.configureDetents(of:using:)(uint64_t *a1, double *a2)
{
  char *v2;
  char *v3;
  char *v6;
  uint64_t v7;
  uint64_t ObjectType;
  Swift::Bool v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  Class v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(double *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  unsigned __int8 *v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  Swift::String v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  Class isa;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  double *v55;
  id v56;
  uint64_t v57;
  uint64_t *v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  _UNKNOWN **v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _UNKNOWN **v67;
  unsigned __int8 v68;
  _QWORD v69[12];
  uint64_t v70;

  v3 = v2;
  if (!PresentationHostingController.shouldIgnoreDetentsConfiguration.getter()
    || (v6 = &v2[direct field offset for PresentationHostingController.delegate],
        MEMORY[0x18D760234](&v2[direct field offset for PresentationHostingController.delegate]))
    && (v7 = *((_QWORD *)v6 + 1),
        ObjectType = swift_getObjectType(),
        LOBYTE(v7) = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(ObjectType, v7),
        swift_unknownObjectRelease(),
        (v7 & 1) != 0))
  {
    if (one-time initialization token for clientNeedsOscillationSuppression != -1)
      goto LABEL_55;
    while (1)
    {
      v9 = clientNeedsOscillationSuppression;
      outlined init with copy of PresentationOptionsPreference((uint64_t)a2, (uint64_t)v69);
      if (v9)
      {
        v10 = (uint64_t)&v3[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
        swift_beginAccess();
        outlined init with copy of PresentationOptionsPreference?(v10, (uint64_t)&v65);
        LOBYTE(v10) = PresentationOptionsPreference.sheetConfigurationChanged(from:)((uint64_t)&v65);
        outlined destroy of PreferenceList.Value<PresentationOptionsPreference>((uint64_t)&v65, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        result = outlined destroy of PresentationOptionsPreference(v69);
        if ((v10 & 1) == 0)
          return result;
      }
      else
      {
        outlined destroy of PresentationOptionsPreference(v69);
      }
      v58 = a1;
      v16 = *(_QWORD *)&v3[direct field offset for PresentationHostingController.oscillationDetector];
      if (v16)
      {
        swift_beginAccess();
        v17 = *(_QWORD *)(v16 + 16);
        v18 = *(_QWORD *)(v17 + 16);
        a1 = &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>;
        if (v18)
        {
          v19 = v17 + 32;
          swift_bridgeObjectRetain();
          while (1)
          {
            v20 = *(uint64_t (**)(double *, uint64_t))(v16 + 32);
            swift_retain();
            LOBYTE(v20) = v20(a2, v19);
            swift_release();
            if ((v20 & 1) != 0)
              break;
            v19 += 144;
            if (!--v18)
            {
              swift_bridgeObjectRelease();
              goto LABEL_19;
            }
          }
          swift_bridgeObjectRelease();
          *(_QWORD *)&v65 = 0;
          *((_QWORD *)&v65 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(281);
          v64 = v65;
          v30._object = (void *)0x8000000187BEA9F0;
          v30._countAndFlagsBits = 0xD000000000000083;
          String.append(_:)(v30);
          v31 = (uint64_t)&v3[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
          swift_beginAccess();
          v32 = outlined init with copy of PresentationOptionsPreference?(v31, (uint64_t)&v65);
          MEMORY[0x1E0C80A78](v32, v33);
          v34 = _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI29PresentationOptionsPreferenceV_s5NeverOSSTg5((void (*)(uint64_t *__return_ptr, _OWORD *))partial apply for closure #1 in PresentationHostingController.configureDetents(of:using:));
          v36 = v35;
          outlined destroy of PreferenceList.Value<PresentationOptionsPreference>((uint64_t)&v65, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          if (v36)
            v37 = v34;
          else
            v37 = 0;
          if (!v36)
            v36 = 0xE000000000000000;
          v38 = v36;
          String.append(_:)(*(Swift::String *)&v37);
          swift_bridgeObjectRelease();
          v39._countAndFlagsBits = 0xD000000000000094;
          v39._object = (void *)0x8000000187BEAA80;
          String.append(_:)(v39);
          MEMORY[0x18D75AC90](v64, *((_QWORD *)&v64 + 1));
          return (_QWORD *)swift_bridgeObjectRelease();
        }
LABEL_19:
        outlined init with copy of PresentationOptionsPreference((uint64_t)a2, (uint64_t)&v65);
        v21 = (uint64_t)&v3[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
        swift_beginAccess();
        outlined assign with take of PresentationOptionsPreference?((uint64_t)&v65, v21);
        swift_endAccess();
        specialized OscillationDetector.insert(_:)((uint64_t)a2);
      }
      else
      {
        outlined init with copy of PresentationOptionsPreference((uint64_t)a2, (uint64_t)&v65);
        v22 = (uint64_t)&v3[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
        swift_beginAccess();
        outlined assign with take of PresentationOptionsPreference?((uint64_t)&v65, v22);
        swift_endAccess();
      }
      v23 = *(_QWORD *)a2;
      v24 = MEMORY[0x1E0DEE9D8];
      if (!*(_QWORD *)(*(_QWORD *)a2 + 16))
      {
        v28 = MEMORY[0x1E0DEE9D8] >> 62;
        if (MEMORY[0x1E0DEE9D8] >> 62)
        {
          swift_bridgeObjectRetain();
          v44 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          v29 = (unsigned __int8 *)a2;
          if (!v44)
            goto LABEL_57;
LABEL_29:
          swift_bridgeObjectRetain();
        }
        else
        {
          v29 = (unsigned __int8 *)a2;
          if (*(_QWORD *)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_29;
LABEL_57:
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v45 = swift_allocObject();
          *(_OWORD *)(v45 + 16) = xmmword_187BFF9C0;
          *(_QWORD *)(v45 + 32) = objc_msgSend((id)objc_opt_self(), sel_largeDetent);
          *(_QWORD *)&v65 = v45;
          specialized Array._endMutation()();
        }
        type metadata accessor for UISheetPresentationControllerDetent();
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v58, sel_setDetents_, isa);

        v47 = *((_QWORD *)v29 + 6);
        if (!v47)
          goto LABEL_67;
        if (v47 != 1)
        {
          if (v47 == 2)
            objc_msgSend(v58, sel_setLargestUndimmedDetentIdentifier_, 0);
          else
            objc_msgSend(v58, sel_setLargestUndimmedDetentIdentifier_, *((_QWORD *)v29 + 6));
          goto LABEL_69;
        }
        if (v28)
        {
          swift_bridgeObjectRetain();
          v52 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v52 < 2)
            goto LABEL_67;
LABEL_64:
          v48 = objc_msgSend((id)objc_opt_self(), sel_largeDetent);
          v49 = objc_msgSend(v48, sel_identifier);

          v50 = objc_msgSend((id)objc_opt_self(), sel_appearanceWithSmallestDimmedDetentIdentifier_, v49);
          objc_msgSend(v58, sel__setStandardAppearance_, v50);

          v51 = 1;
        }
        else
        {
          if (*(uint64_t *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2)
            goto LABEL_64;
LABEL_67:
          objc_msgSend(v58, sel_setLargestUndimmedDetentIdentifier_, 0);
          v51 = v47;
        }
        outlined consume of PresentationDimmingBehavior?((id)v51);
LABEL_69:
        objc_msgSend(v58, sel_setPrefersScrollingExpandsWhenScrolledToEdge_, v29[57] != 2);
        UISheetPresentationController.preferredCornerRadius.setter();
        objc_msgSend(v58, sel_setPrefersEdgeAttachedInCompactHeight_, (v29[41] & 0xFD) == 1);
        if (v29[58])
        {
          if (v29[58] == 1)
          {
            swift_bridgeObjectRelease();
            v53 = 1;
          }
          else
          {
            swift_bridgeObjectRelease();
            v53 = 0;
          }
        }
        else
        {
          if (v28)
          {
            swift_bridgeObjectRetain();
            v54 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v54 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          v53 = v54 > 1;
        }
        objc_msgSend(v58, sel_setPrefersGrabberVisible_, v53);
        v55 = (double *)(v29 + 80);
        if (v29[88])
          v55 = (double *)MEMORY[0x1E0DC59D0];
        objc_msgSend(v58, sel__setGrabberTopSpacing_, *v55);
        v56 = objc_msgSend(v58, sel_prefersEdgeAttachedInCompactHeight);
        objc_msgSend(v58, sel_setWidthFollowsPreferredContentSizeWhenEdgeAttached_, v56);
        if ((v56 & 1) != 0 || objc_msgSend(v3, sel_modalPresentationStyle) == (id)2)
          v57 = 1;
        else
          v57 = objc_msgSend(v58, sel_prefersPageSizing) ^ 1;
        objc_msgSend(v58, sel__setMode_, v57);
        v42 = (uint64_t)v29;
        v43 = v58;
        return PresentationHostingController.configureSizingOptions(for:sheetController:)(v42, v43);
      }
      *(_QWORD *)&v61 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      v25 = specialized Set.startIndex.getter(v23);
      v3 = v26;
      a2 = (double *)(v27 & 1);
      if (v25 < 0 || v25 >= 1 << *(_BYTE *)(v23 + 32))
      {
        __break(1u);
      }
      else if (((*(_QWORD *)(v23 + 56 + (((unint64_t)v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
      {
        if (*(_DWORD *)(v23 + 36) == (_DWORD)v26)
          __asm { BR              X10 }
        goto LABEL_54;
      }
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      swift_once();
    }
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_187BFF9C0;
  *(_QWORD *)(v12 + 32) = objc_msgSend((id)objc_opt_self(), sel_largeDetent);
  v69[0] = v12;
  specialized Array._endMutation()();
  type metadata accessor for UISheetPresentationControllerDetent();
  v13 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setDetents_, v13);

  objc_msgSend(a1, sel_setLargestUndimmedDetentIdentifier_, 0);
  objc_msgSend(a1, sel_setPrefersScrollingExpandsWhenScrolledToEdge_, 1);
  UISheetPresentationController.preferredCornerRadius.setter();
  objc_msgSend(a1, sel_setPrefersEdgeAttachedInCompactHeight_, 0);
  objc_msgSend(a1, sel_setPrefersGrabberVisible_, *((unsigned __int8 *)a2 + 58) == 1);
  v14 = a2 + 10;
  if (*((_BYTE *)a2 + 88))
    v14 = (double *)MEMORY[0x1E0DC59D0];
  objc_msgSend(a1, sel__setGrabberTopSpacing_, *v14);
  outlined init with copy of PresentationSizing?((uint64_t)(a2 + 12), (uint64_t)v69);
  v15 = v69[3];
  outlined destroy of PresentationSizing?((uint64_t)v69);
  outlined init with copy of PresentationOptionsPreference((uint64_t)a2, (uint64_t)v69);
  if (v15)
  {
    outlined destroy of PresentationOptionsPreference(v69);
    outlined init with copy of PresentationOptionsPreference((uint64_t)a2, (uint64_t)&v65);
  }
  else
  {
    if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    {
      outlined init with copy of PresentationSizing?((uint64_t)&v70, (uint64_t)&v61);
      if (*((_QWORD *)&v62 + 1))
      {
        outlined init with take of OptionalBinaryInteger(&v61, (uint64_t)&v65);
      }
      else
      {
        *((_QWORD *)&v66 + 1) = &type metadata for AutomaticPresentationSizing;
        v67 = &protocol witness table for AutomaticPresentationSizing;
        outlined destroy of PresentationSizing?((uint64_t)&v61);
      }
    }
    else
    {
      v67 = 0;
      v65 = 0u;
      v66 = 0u;
    }
    outlined destroy of PresentationOptionsPreference(v69);
    v40 = *((_QWORD *)&v66 + 1);
    outlined destroy of PresentationSizing?((uint64_t)&v65);
    outlined init with copy of PresentationOptionsPreference((uint64_t)a2, (uint64_t)&v65);
    if (!v40)
    {
      outlined destroy of PresentationOptionsPreference(&v65);
      goto LABEL_48;
    }
  }
  v41 = v68;
  outlined destroy of PresentationOptionsPreference(&v65);
  if (v41 == 1)
  {
LABEL_48:
    objc_msgSend(a1, sel_setWidthFollowsPreferredContentSizeWhenEdgeAttached_, 0);
    return objc_msgSend(a1, sel__setMode_, objc_msgSend(v3, sel_modalPresentationStyle) == (id)2);
  }
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    outlined init with copy of PresentationSizing?((uint64_t)(a2 + 12), (uint64_t)&v59);
    if (v60)
    {
      outlined init with take of OptionalBinaryInteger(&v59, (uint64_t)&v61);
    }
    else
    {
      *((_QWORD *)&v62 + 1) = &type metadata for AutomaticPresentationSizing;
      v63 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of PresentationSizing?((uint64_t)&v59);
    }
    outlined destroy of PresentationSizing?((uint64_t)&v61);
    result = objc_msgSend(v3, sel_modalPresentationStyle);
    if (result != (_QWORD *)7)
    {
      objc_msgSend(a1, sel_setWidthFollowsPreferredContentSizeWhenEdgeAttached_, 0);
      v42 = (uint64_t)a2;
      v43 = a1;
      return PresentationHostingController.configureSizingOptions(for:sheetController:)(v42, v43);
    }
  }
  else
  {
    v63 = 0;
    v61 = 0u;
    v62 = 0u;
    return (_QWORD *)outlined destroy of PresentationSizing?((uint64_t)&v61);
  }
  return result;
}

uint64_t closure #1 in PresentationHostingController.configureDetents(of:using:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = PresentationOptionsPreference.differenceMessage(from:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t closure #1 in PresentationHostingController.updateDetentsSelection(of:using:)(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t result;
  _QWORD v10[6];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in closure #1 in PresentationHostingController.updateDetentsSelection(of:using:);
  *(_QWORD *)(v5 + 24) = v4;
  v10[4] = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  v10[5] = v5;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = thunk for @escaping @callee_guaranteed () -> ();
  v10[3] = &block_descriptor_38_2;
  v6 = _Block_copy(v10);
  v7 = a1;
  v8 = a2;
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_animateChanges_, v6);
  _Block_release(v6);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a2 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t PresentationHostingController.update(_:)(__int128 *a1)
{
  uint64_t v2;
  __int128 v4;

  PresentationHostingController.presentationKind.getter(&v4);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  specialized EnvironmentValues.wantsContainerBackgroundPlacement<A>(for:)();
  specialized UIHostingController.host.getter();
  LOBYTE(v4) = _UIHostingView.wantsTransparentBackground.getter();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  v4 = *a1;
  if ((EnvironmentValues.isVisionEnabled.getter() & 1) != 0)
  {
    v4 = 0uLL;
    EnvironmentValues.backgroundInfo.setter();
    *(_QWORD *)&v4 = 8;
    DWORD2(v4) = 0;
    EnvironmentValues.backgroundMaterial.setter();
  }
  return UIHostingController.update(_:)(a1);
}

void PresentationHostingController.presentationKind.getter(_BYTE *a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;

  v3 = objc_msgSend(v1, sel_viewIfLoaded);
  if (!v3 || (v4 = v3, v5 = objc_msgSend(v3, sel_superview), v4, !v5))
  {
LABEL_10:
    LOBYTE(v12) = 0;
    goto LABEL_11;
  }

  v6 = objc_msgSend(v1, sel_traitCollection);
  v7 = objc_msgSend(v6, sel__presentationSemanticContext);

  v8 = objc_msgSend(v1, sel_activePresentationController);
  v9 = v8;
  if (v8)
  {
    v10 = objc_msgSend(v8, sel_presentationStyle);

    v11 = (unint64_t)v10 - 1;
    if (v7 != (id)3)
      goto LABEL_5;
LABEL_13:
    LOBYTE(v12) = 1;
    goto LABEL_11;
  }
  v11 = -1;
  if (v7 == (id)3)
    goto LABEL_13;
LABEL_5:
  if (v7 == (id)2)
  {
    LOBYTE(v12) = 2;
    goto LABEL_11;
  }
  if (v7 != (id)1 || !v9 || v11 >= 8)
    goto LABEL_10;
  v12 = 0x400000300000303uLL >> (8 * v11);
LABEL_11:
  *a1 = v12;
}

void PresentationHostingController.__allocating_init(coder:rootView:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PresentationHostingController.__allocating_init(hostingView:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t PresentationHostingController.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  outlined destroy of weak FallbackResponderProvider?(v0 + direct field offset for PresentationHostingController.delegate);
  v1 = MEMORY[0x1E0DEB940];
  outlined destroy of PreferenceList.Value<PresentationOptionsPreference>(v0 + direct field offset for PresentationHostingController.lastPresentationOptions, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  outlined destroy of PreferenceList.Value<PresentationOptionsPreference>(v0 + direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t (*)(_QWORD, uint64_t))v1);
  return swift_release();
}

uint64_t @objc PresentationHostingController.__ivar_destroyer(uint64_t a1)
{
  uint64_t (*v2)(void);

  outlined destroy of weak FallbackResponderProvider?(a1 + direct field offset for PresentationHostingController.delegate);
  v2 = MEMORY[0x1E0DEB940];
  outlined destroy of PreferenceList.Value<PresentationOptionsPreference>(a1 + direct field offset for PresentationHostingController.lastPresentationOptions, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  outlined destroy of PreferenceList.Value<PresentationOptionsPreference>(a1 + direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t (*)(_QWORD, uint64_t))v2);
  return swift_release();
}

uint64_t type metadata accessor for PresentationHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PresentationHostingController);
}

uint64_t storeEnumTagSinglePayload for PresentationHostingControllerPresenterKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1878E8418 + 4 * byte_187C6AB55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1878E844C + 4 * byte_187C6AB50[v4]))();
}

uint64_t sub_1878E844C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1878E8454(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1878E845CLL);
  return result;
}

uint64_t sub_1878E8468(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1878E8470);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1878E8474(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1878E847C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PresentationHostingControllerPresenterKind()
{
  return &type metadata for PresentationHostingControllerPresenterKind;
}

unint64_t lazy protocol witness table accessor for type PresentationHostingControllerPresenterKind and conformance PresentationHostingControllerPresenterKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationHostingControllerPresenterKind and conformance PresentationHostingControllerPresenterKind;
  if (!lazy protocol witness table cache variable for type PresentationHostingControllerPresenterKind and conformance PresentationHostingControllerPresenterKind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationHostingControllerPresenterKind, &type metadata for PresentationHostingControllerPresenterKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationHostingControllerPresenterKind and conformance PresentationHostingControllerPresenterKind);
  }
  return result;
}

_QWORD *specialized closure #2 in PresentationHostingController.init(rootView:delegate:drawsBackground:)(uint64_t a1)
{
  uint64_t v1;
  _OWORD v3[7];
  _OWORD v4[2];
  _OWORD v5[7];
  _OWORD v6[2];

  v1 = a1 + direct field offset for PresentationHostingController.lastPresentationOptions;
  swift_beginAccess();
  outlined init with copy of PresentationOptionsPreference?(v1, (uint64_t)v3);
  if (!*(_QWORD *)&v3[0])
    return (_QWORD *)outlined destroy of PreferenceList.Value<PresentationOptionsPreference>((uint64_t)v3, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v5[6] = v3[6];
  v6[0] = v4[0];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v4 + 9);
  v5[2] = v3[2];
  v5[3] = v3[3];
  v5[4] = v3[4];
  v5[5] = v3[5];
  v5[0] = v3[0];
  v5[1] = v3[1];
  specialized PresentationHostingController.updateSheet(with:)((uint64_t *)v5);
  return outlined destroy of PresentationOptionsPreference(v5);
}

char *specialized PresentationHostingController.init(rootView:delegate:drawsBackground:)(uint64_t a1, uint64_t a2, char a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  _OWORD *v9;
  _OWORD *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD v27[9];

  swift_getObjectType();
  *(_QWORD *)&a4[direct field offset for PresentationHostingController.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  a4[direct field offset for PresentationHostingController.bridgedPresentationWantsTransparentBackground] = 0;
  a4[direct field offset for PresentationHostingController.presentingBridgeKind] = 2;
  *(_QWORD *)&a4[direct field offset for PresentationHostingController.lastColumnCount] = 0;
  a4[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively] = 0;
  a4[direct field offset for PresentationHostingController.wasPreempted] = 0;
  v9 = &a4[direct field offset for PresentationHostingController.lastPresentationOptions];
  *v9 = 0u;
  v9[1] = 0u;
  v9[2] = 0u;
  v9[3] = 0u;
  v9[4] = 0u;
  v9[5] = 0u;
  v9[6] = 0u;
  v9[7] = 0u;
  *(_OWORD *)((char *)v9 + 121) = 0u;
  v10 = &a4[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
  *v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  *(_OWORD *)((char *)v10 + 121) = 0u;
  v11 = &a4[direct field offset for PresentationHostingController.observedSize];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  a4[direct field offset for PresentationHostingController.presentationWantsTransparentBackground] = a3 ^ 1;
  v12 = one-time initialization token for clientNeedsOscillationSuppression;
  v13 = a4;
  if (v12 != -1)
    swift_once();
  if (clientNeedsOscillationSuppression)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for OscillationDetector<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for OscillationDetector);
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v14 + 64) = 0x8000000000000000;
    *(_BYTE *)(v14 + 72) = 0;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    memset(v27, 0, 137);
    v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v15 + 16) = 3;
    outlined init with copy of PresentationOptionsPreference?((uint64_t)v27, v15 + 32);
    outlined init with copy of PresentationOptionsPreference?((uint64_t)v27, v15 + 176);
    outlined init with take of PresentationOptionsPreference?((uint64_t)v27, v15 + 320);
    *(_QWORD *)(v14 + 16) = v15;
    *(_QWORD *)(v14 + 32) = closure #1 in PresentationHostingController.init(rootView:delegate:drawsBackground:);
    *(_QWORD *)(v14 + 40) = 0;
    *(_QWORD *)(v14 + 48) = 10;
    *(_QWORD *)&v13[direct field offset for PresentationHostingController.oscillationDetector] = v14;
  }
  else
  {
    *(_QWORD *)&v13[direct field offset for PresentationHostingController.oscillationDetector] = 0;
  }

  swift_retain();
  v16 = (char *)specialized UIHostingController.init(rootView:)();
  swift_release();
  *(_QWORD *)&v16[direct field offset for PresentationHostingController.delegate + 8] = a6;
  swift_unknownObjectWeakAssign();
  v17 = v16;
  specialized PresentationHostingController.setBackgroundTransparency(preferenceValue:)(0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>, (uint64_t (*)(uint64_t))type metadata accessor for UITraitDefinition.Type, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_187C05380;
  v19 = type metadata accessor for UITraitHorizontalSizeClass();
  v20 = MEMORY[0x1E0DC23D0];
  *(_QWORD *)(v18 + 32) = v19;
  *(_QWORD *)(v18 + 40) = v20;
  v21 = type metadata accessor for UITraitVerticalSizeClass();
  v22 = MEMORY[0x1E0DC2048];
  *(_QWORD *)(v18 + 48) = v21;
  *(_QWORD *)(v18 + 56) = v22;
  v23 = type metadata accessor for UITraitPresentationSemanticContext();
  v24 = MEMORY[0x1E0DC27F8];
  *(_QWORD *)(v18 + 64) = v23;
  *(_QWORD *)(v18 + 72) = v24;
  v25 = v17;
  UIViewController.registerForTraitChanges<A>(_:handler:)();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  *(_QWORD *)&v27[0] = 0;
  lazy protocol witness table accessor for type RemoteSheetContainerViewGraphFeature and conformance RemoteSheetContainerViewGraphFeature();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();

  return v25;
}

uint64_t specialized EnvironmentValues.wantsContainerBackgroundPlacement<A>(for:)()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void specialized PresentationHostingController.init(rootView:)()
{
  _BYTE *v0;
  _OWORD *v1;
  _OWORD *v2;
  char *v3;

  *(_QWORD *)&v0[direct field offset for PresentationHostingController.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[direct field offset for PresentationHostingController.bridgedPresentationWantsTransparentBackground] = 0;
  v0[direct field offset for PresentationHostingController.presentingBridgeKind] = 2;
  *(_QWORD *)&v0[direct field offset for PresentationHostingController.lastColumnCount] = 0;
  v0[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively] = 0;
  v0[direct field offset for PresentationHostingController.wasPreempted] = 0;
  v1 = &v0[direct field offset for PresentationHostingController.lastPresentationOptions];
  *v1 = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  v1[3] = 0u;
  v1[4] = 0u;
  v1[5] = 0u;
  v1[6] = 0u;
  v1[7] = 0u;
  *(_OWORD *)((char *)v1 + 121) = 0u;
  v2 = &v0[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  *(_OWORD *)((char *)v2 + 121) = 0u;
  v3 = &v0[direct field offset for PresentationHostingController.observedSize];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v3[16] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for closure #1 in PresentationHostingController.sizingOptionsDidChange(from:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PresentationHostingController.sizingOptionsDidChange(from:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined destroy of PresentationSizing?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for PresentationSizing?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1878E8BA8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1878E8BCC()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in PresentationHostingController.sizingOptionsDidChange(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  closure #2 in PresentationHostingController.sizingOptionsDidChange(from:)(a1, a2, v2[4], v2[5], v2[6], v2[2], v2[3]);
}

uint64_t sub_1878E8C00()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in PresentationHostingController.preferredContentSize.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in PresentationHostingController.preferredContentSize.setter(*(_QWORD **)(v4 + 16), *(double *)(v4 + 24), *(double *)(v4 + 32), a2, a3, a4);
}

uint64_t sub_1878E8C30()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PresentationHostingController._remoteSheet.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in PresentationHostingController._remoteSheet.getter(a1);
}

unint64_t type metadata accessor for _UIRemoteSheet()
{
  unint64_t result;

  result = lazy cache variable for type metadata for _UIRemoteSheet;
  if (!lazy cache variable for type metadata for _UIRemoteSheet)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _UIRemoteSheet);
  }
  return result;
}

uint64_t outlined init with copy of RemoteSheetContainerVCKey.Storage(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PlatformTextFieldCoordinator.FieldStorage(a2, a1, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  return a2;
}

uint64_t outlined destroy of RemoteSheetContainerVCKey.Storage(uint64_t a1)
{
  destroy for UIKitScenePresentationModeLocation();
  return a1;
}

uint64_t sub_1878E8D1C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PresentationHostingController.viewWillDisappear(_:)(void *a1)
{
  uint64_t v1;

  return closure #1 in PresentationHostingController.viewWillDisappear(_:)(a1, *(_QWORD *)(v1 + 16));
}

void partial apply for closure #1 in PresentationHostingController.willTransition(to:with:)(int a1)
{
  uint64_t v1;

  closure #1 in PresentationHostingController.willTransition(to:with:)(a1, *(id *)(v1 + 16));
}

void partial apply for closure #1 in closure #1 in PresentationHostingController.willTransition(to:with:)()
{
  uint64_t v0;

  closure #1 in closure #1 in PresentationHostingController.willTransition(to:with:)(*(void **)(v0 + 16));
}

id partial apply for closure #1 in PresentationHostingController._canShowWhileLocked()@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PresentationHostingController._canShowWhileLocked()(*(void **)(v1 + 16), a1);
}

uint64_t outlined destroy of PreferenceList.Value<PresentationOptionsPreference>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t))
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a2, (uint64_t)&type metadata for PresentationOptionsPreference, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1878E8DB8()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in PresentationHostingController.updateDetentsSelection(of:using:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_setSelectedDetentIdentifier_, *(_QWORD *)(v0 + 24));
}

uint64_t sub_1878E8DF4()
{
  return swift_deallocObject();
}

uint64_t outlined assign with take of PresentationOptionsPreference?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for UISheetPresentationControllerDetent()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UISheetPresentationControllerDetent;
  if (!lazy cache variable for type metadata for UISheetPresentationControllerDetent)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UISheetPresentationControllerDetent);
  }
  return result;
}

uint64_t sub_1878E8E9C()
{
  return swift_deallocObject();
}

uint64_t sub_1878E8EAC()
{
  return swift_deallocObject();
}

uint64_t sub_1878E8EBC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PresentationHostingController.configureDetents(of:using:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = PresentationOptionsPreference.differenceMessage(from:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t partial apply for closure #1 in PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)()
{
  return closure #1 in PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)();
}

uint64_t partial apply for closure #1 in PresentationHostingController.setupSheet<A>(for:presenter:style:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PresentationHostingController.setupSheet<A>(for:presenter:style:)(a1);
}

uint64_t outlined init with take of PresentationOptionsPreference?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t assignWithCopy for PresentationState(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 *v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 *v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 *v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  id v73;
  __int128 v74;
  __int128 v75;
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  void *v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  _OWORD *v93;
  __int128 *v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of PresentationState.Base(a1);
    switch(*((_BYTE *)a2 + 233))
    {
      case 0:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v4 = *((_QWORD *)a2 + 1);
        swift_retain();
        if (v4)
        {
          v5 = *((_QWORD *)a2 + 2);
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v5;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
        }
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v41 = (_OWORD *)(a1 + 32);
        v42 = a2 + 2;
        v43 = *((_QWORD *)a2 + 7);
        if (v43)
        {
          *(_QWORD *)(a1 + 56) = v43;
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          (**(void (***)(_OWORD *, __int128 *))(v43 - 8))(v41, v42);
        }
        else
        {
          v68 = *v42;
          v69 = a2[3];
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *v41 = v68;
          *(_OWORD *)(a1 + 48) = v69;
        }
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
        v70 = (void *)*((_QWORD *)a2 + 14);
        *(_QWORD *)(a1 + 112) = v70;
        *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
        *(_BYTE *)(a1 + 233) = 0;
        goto LABEL_54;
      case 1:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v17 = *((_QWORD *)a2 + 1);
        swift_retain();
        if (v17)
        {
          v18 = *((_QWORD *)a2 + 2);
          *(_QWORD *)(a1 + 8) = v17;
          *(_QWORD *)(a1 + 16) = v18;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
        }
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v44 = (_OWORD *)(a1 + 32);
        v45 = a2 + 2;
        v46 = *((_QWORD *)a2 + 7);
        if (v46)
        {
          *(_QWORD *)(a1 + 56) = v46;
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          (**(void (***)(_OWORD *, __int128 *))(v46 - 8))(v44, v45);
        }
        else
        {
          v71 = *v45;
          v72 = a2[3];
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *v44 = v71;
          *(_OWORD *)(a1 + 48) = v72;
        }
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
        v70 = (void *)*((_QWORD *)a2 + 14);
        *(_QWORD *)(a1 + 112) = v70;
        *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
        *(_BYTE *)(a1 + 233) = 1;
LABEL_54:
        swift_retain();
        swift_retain();
        swift_retain();
        v73 = v70;
        return a1;
      case 2:
        v19 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        v21 = v19;
        swift_retain();
        if (v20)
        {
          v22 = *((_QWORD *)a2 + 3);
          *(_QWORD *)(a1 + 16) = v20;
          *(_QWORD *)(a1 + 24) = v22;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 16) = a2[1];
        }
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        v47 = (_OWORD *)(a1 + 40);
        v48 = (__int128 *)((char *)a2 + 40);
        v49 = *((_QWORD *)a2 + 8);
        if (v49)
        {
          *(_QWORD *)(a1 + 64) = v49;
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          (**(void (***)(_OWORD *, __int128 *))(v49 - 8))(v47, v48);
        }
        else
        {
          v74 = *v48;
          v75 = *(__int128 *)((char *)a2 + 56);
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          *v47 = v74;
          *(_OWORD *)(a1 + 56) = v75;
        }
        *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
        *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
        *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
        v76 = 2;
        goto LABEL_75;
      case 3:
        v23 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        v25 = v23;
        swift_retain();
        if (v24)
        {
          v26 = *((_QWORD *)a2 + 3);
          *(_QWORD *)(a1 + 16) = v24;
          *(_QWORD *)(a1 + 24) = v26;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 16) = a2[1];
        }
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        v50 = (_OWORD *)(a1 + 40);
        v51 = (__int128 *)((char *)a2 + 40);
        v52 = *((_QWORD *)a2 + 8);
        if (v52)
        {
          *(_QWORD *)(a1 + 64) = v52;
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          (**(void (***)(_OWORD *, __int128 *))(v52 - 8))(v50, v51);
        }
        else
        {
          v77 = *v51;
          v78 = *(__int128 *)((char *)a2 + 56);
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          *v50 = v77;
          *(_OWORD *)(a1 + 56) = v78;
        }
        *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
        *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
        *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
        v76 = 3;
        goto LABEL_75;
      case 4:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v27 = *((_QWORD *)a2 + 1);
        swift_retain();
        if (v27)
        {
          v28 = *((_QWORD *)a2 + 2);
          *(_QWORD *)(a1 + 8) = v27;
          *(_QWORD *)(a1 + 16) = v28;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
        }
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v53 = (_OWORD *)(a1 + 32);
        v54 = a2 + 2;
        v55 = *((_QWORD *)a2 + 7);
        if (v55)
        {
          *(_QWORD *)(a1 + 56) = v55;
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          (**(void (***)(_OWORD *, __int128 *))(v55 - 8))(v53, v54);
        }
        else
        {
          v79 = *v54;
          v80 = a2[3];
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *v53 = v79;
          *(_OWORD *)(a1 + 48) = v80;
        }
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
        v76 = 4;
        goto LABEL_75;
      case 5:
        v29 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        v31 = v29;
        swift_retain();
        if (v30)
        {
          v32 = *((_QWORD *)a2 + 3);
          *(_QWORD *)(a1 + 16) = v30;
          *(_QWORD *)(a1 + 24) = v32;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 16) = a2[1];
        }
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        v56 = (_OWORD *)(a1 + 40);
        v57 = (__int128 *)((char *)a2 + 40);
        v58 = *((_QWORD *)a2 + 8);
        if (v58)
        {
          *(_QWORD *)(a1 + 64) = v58;
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          (**(void (***)(_OWORD *, __int128 *))(v58 - 8))(v56, v57);
        }
        else
        {
          v81 = *v57;
          v82 = *(__int128 *)((char *)a2 + 56);
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          *v56 = v81;
          *(_OWORD *)(a1 + 56) = v82;
        }
        *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
        *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
        *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
        v76 = 5;
        goto LABEL_75;
      case 6:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v33 = *((_QWORD *)a2 + 1);
        swift_retain();
        if (v33)
        {
          v34 = *((_QWORD *)a2 + 2);
          *(_QWORD *)(a1 + 8) = v33;
          *(_QWORD *)(a1 + 16) = v34;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
        }
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v59 = (_OWORD *)(a1 + 32);
        v60 = a2 + 2;
        v61 = *((_QWORD *)a2 + 7);
        if (v61)
        {
          *(_QWORD *)(a1 + 56) = v61;
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          (**(void (***)(_OWORD *, __int128 *))(v61 - 8))(v59, v60);
        }
        else
        {
          v83 = *v60;
          v84 = a2[3];
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *v59 = v83;
          *(_OWORD *)(a1 + 48) = v84;
        }
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
        v76 = 6;
        goto LABEL_75;
      case 7:
        v35 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 233) = 7;
        v36 = v35;
        return a1;
      case 8:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v37 = *((_QWORD *)a2 + 1);
        swift_retain();
        if (v37)
        {
          v38 = *((_QWORD *)a2 + 2);
          *(_QWORD *)(a1 + 8) = v37;
          *(_QWORD *)(a1 + 16) = v38;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
        }
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v62 = (_OWORD *)(a1 + 32);
        v63 = a2 + 2;
        v64 = *((_QWORD *)a2 + 7);
        if (v64)
        {
          *(_QWORD *)(a1 + 56) = v64;
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          (**(void (***)(_OWORD *, __int128 *))(v64 - 8))(v62, v63);
        }
        else
        {
          v85 = *v63;
          v86 = a2[3];
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *v62 = v85;
          *(_OWORD *)(a1 + 48) = v86;
        }
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
        v87 = (void *)*((_QWORD *)a2 + 14);
        *(_QWORD *)(a1 + 112) = v87;
        *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
        *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
        v88 = *((_QWORD *)a2 + 17);
        swift_retain();
        swift_retain();
        swift_retain();
        v89 = v87;
        swift_retain();
        if (v88)
        {
          v90 = *((_QWORD *)a2 + 18);
          *(_QWORD *)(a1 + 136) = v88;
          *(_QWORD *)(a1 + 144) = v90;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
        }
        *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
        v93 = (_OWORD *)(a1 + 160);
        v94 = a2 + 10;
        v95 = *((_QWORD *)a2 + 23);
        if (v95)
        {
          *(_QWORD *)(a1 + 184) = v95;
          *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
          (**(void (***)(_OWORD *, __int128 *))(v95 - 8))(v93, v94);
        }
        else
        {
          v96 = *v94;
          v97 = a2[11];
          *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
          *v93 = v96;
          *(_OWORD *)(a1 + 176) = v97;
        }
        *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
        *(_BYTE *)(a1 + 201) = *((_BYTE *)a2 + 201);
        *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
        *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
        *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
        *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
        v76 = 8;
        goto LABEL_75;
      case 9:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v39 = *((_QWORD *)a2 + 1);
        swift_retain();
        if (v39)
        {
          v40 = *((_QWORD *)a2 + 2);
          *(_QWORD *)(a1 + 8) = v39;
          *(_QWORD *)(a1 + 16) = v40;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
        }
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v65 = (_OWORD *)(a1 + 32);
        v66 = a2 + 2;
        v67 = *((_QWORD *)a2 + 7);
        if (v67)
        {
          *(_QWORD *)(a1 + 56) = v67;
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          (**(void (***)(_OWORD *, __int128 *))(v67 - 8))(v65, v66);
        }
        else
        {
          v91 = *v66;
          v92 = a2[3];
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *v65 = v91;
          *(_OWORD *)(a1 + 48) = v92;
        }
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
        v76 = 9;
LABEL_75:
        *(_BYTE *)(a1 + 233) = v76;
        swift_retain();
        swift_retain();
        swift_retain();
        break;
      default:
        v6 = *a2;
        v7 = a2[2];
        *(_OWORD *)(a1 + 16) = a2[1];
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)a1 = v6;
        v8 = a2[3];
        v9 = a2[4];
        v10 = a2[6];
        *(_OWORD *)(a1 + 80) = a2[5];
        *(_OWORD *)(a1 + 96) = v10;
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)(a1 + 64) = v9;
        v11 = a2[7];
        v12 = a2[8];
        v13 = a2[10];
        *(_OWORD *)(a1 + 144) = a2[9];
        *(_OWORD *)(a1 + 160) = v13;
        *(_OWORD *)(a1 + 112) = v11;
        *(_OWORD *)(a1 + 128) = v12;
        v14 = a2[11];
        v15 = a2[12];
        v16 = a2[13];
        *(_OWORD *)(a1 + 218) = *(__int128 *)((char *)a2 + 218);
        *(_OWORD *)(a1 + 192) = v15;
        *(_OWORD *)(a1 + 208) = v16;
        *(_OWORD *)(a1 + 176) = v14;
        break;
    }
  }
  return a1;
}

__n128 __swift_memcpy234_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_OWORD *)(a1 + 218) = *(__int128 *)((char *)a2 + 218);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

_OWORD *assignWithTake for PresentationState(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a1 != a2)
  {
    outlined destroy of PresentationState.Base((uint64_t)a1);
    v4 = a2[13];
    a1[12] = a2[12];
    a1[13] = v4;
    *(_OWORD *)((char *)a1 + 218) = *(_OWORD *)((char *)a2 + 218);
    v5 = a2[9];
    a1[8] = a2[8];
    a1[9] = v5;
    v6 = a2[11];
    a1[10] = a2[10];
    a1[11] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = a2[3];
    a1[2] = a2[2];
    a1[3] = v10;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 234))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 233);
  if (v3 <= 0xA)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 232) = 0;
    *(_QWORD *)result = a2 - 246;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 234) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 234) = 0;
    if (a2)
      *(_BYTE *)(result + 233) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationState()
{
  return &type metadata for PresentationState;
}

uint64_t assignWithCopy for PresentationState.Base(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 *v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 *v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 *v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 *v65;
  uint64_t v66;
  _OWORD *v67;
  __int128 *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  id v75;
  __int128 v76;
  __int128 v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  void *v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  _OWORD *v95;
  __int128 *v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 233);
    if (v4 >= 0xA)
      v4 = *(_DWORD *)a1 + 10;
    switch(v4)
    {
      case 0u:
      case 1u:
        swift_release();
        if (*(_QWORD *)(a1 + 8))
          swift_release();
        if (*(_QWORD *)(a1 + 56))
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        swift_release();
        swift_release();
        swift_release();

        break;
      case 2u:
      case 3u:
      case 5u:

        swift_release();
        if (*(_QWORD *)(a1 + 16))
          swift_release();
        if (*(_QWORD *)(a1 + 64))
          __swift_destroy_boxed_opaque_existential_1(a1 + 40);
        goto LABEL_29;
      case 4u:
      case 6u:
      case 9u:
        swift_release();
        if (*(_QWORD *)(a1 + 8))
          swift_release();
        if (*(_QWORD *)(a1 + 56))
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        goto LABEL_29;
      case 7u:

        break;
      case 8u:
        swift_release();
        if (*(_QWORD *)(a1 + 8))
          swift_release();
        if (*(_QWORD *)(a1 + 56))
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        if (*(_QWORD *)(a1 + 136))
          swift_release();
        if (*(_QWORD *)(a1 + 184))
          __swift_destroy_boxed_opaque_existential_1(a1 + 160);
LABEL_29:
        swift_release();
        swift_release();
        swift_release();
        break;
      default:
        break;
    }
    v5 = *((unsigned __int8 *)a2 + 233);
    if (v5 >= 0xA)
      v5 = *(_DWORD *)a2 + 10;
    switch(v5)
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v6 = *((_QWORD *)a2 + 1);
        swift_retain();
        if (v6)
        {
          v7 = *((_QWORD *)a2 + 2);
          *(_QWORD *)(a1 + 8) = v6;
          *(_QWORD *)(a1 + 16) = v7;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
        }
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v43 = (_OWORD *)(a1 + 32);
        v44 = a2 + 2;
        v45 = *((_QWORD *)a2 + 7);
        if (v45)
        {
          *(_QWORD *)(a1 + 56) = v45;
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          (**(void (***)(_OWORD *, __int128 *))(v45 - 8))(v43, v44);
        }
        else
        {
          v70 = *v44;
          v71 = a2[3];
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *v43 = v70;
          *(_OWORD *)(a1 + 48) = v71;
        }
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
        v72 = (void *)*((_QWORD *)a2 + 14);
        *(_QWORD *)(a1 + 112) = v72;
        *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
        *(_BYTE *)(a1 + 233) = 0;
        goto LABEL_84;
      case 1u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v19 = *((_QWORD *)a2 + 1);
        swift_retain();
        if (v19)
        {
          v20 = *((_QWORD *)a2 + 2);
          *(_QWORD *)(a1 + 8) = v19;
          *(_QWORD *)(a1 + 16) = v20;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
        }
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v46 = (_OWORD *)(a1 + 32);
        v47 = a2 + 2;
        v48 = *((_QWORD *)a2 + 7);
        if (v48)
        {
          *(_QWORD *)(a1 + 56) = v48;
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          (**(void (***)(_OWORD *, __int128 *))(v48 - 8))(v46, v47);
        }
        else
        {
          v73 = *v47;
          v74 = a2[3];
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *v46 = v73;
          *(_OWORD *)(a1 + 48) = v74;
        }
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
        v72 = (void *)*((_QWORD *)a2 + 14);
        *(_QWORD *)(a1 + 112) = v72;
        *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
        *(_BYTE *)(a1 + 233) = 1;
LABEL_84:
        swift_retain();
        swift_retain();
        swift_retain();
        v75 = v72;
        return a1;
      case 2u:
        v21 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = v21;
        swift_retain();
        if (v22)
        {
          v24 = *((_QWORD *)a2 + 3);
          *(_QWORD *)(a1 + 16) = v22;
          *(_QWORD *)(a1 + 24) = v24;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 16) = a2[1];
        }
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        v49 = (_OWORD *)(a1 + 40);
        v50 = (__int128 *)((char *)a2 + 40);
        v51 = *((_QWORD *)a2 + 8);
        if (v51)
        {
          *(_QWORD *)(a1 + 64) = v51;
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          (**(void (***)(_OWORD *, __int128 *))(v51 - 8))(v49, v50);
        }
        else
        {
          v76 = *v50;
          v77 = *(__int128 *)((char *)a2 + 56);
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          *v49 = v76;
          *(_OWORD *)(a1 + 56) = v77;
        }
        *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
        *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
        *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
        v78 = 2;
        goto LABEL_105;
      case 3u:
        v25 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        v27 = v25;
        swift_retain();
        if (v26)
        {
          v28 = *((_QWORD *)a2 + 3);
          *(_QWORD *)(a1 + 16) = v26;
          *(_QWORD *)(a1 + 24) = v28;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 16) = a2[1];
        }
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        v52 = (_OWORD *)(a1 + 40);
        v53 = (__int128 *)((char *)a2 + 40);
        v54 = *((_QWORD *)a2 + 8);
        if (v54)
        {
          *(_QWORD *)(a1 + 64) = v54;
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          (**(void (***)(_OWORD *, __int128 *))(v54 - 8))(v52, v53);
        }
        else
        {
          v79 = *v53;
          v80 = *(__int128 *)((char *)a2 + 56);
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          *v52 = v79;
          *(_OWORD *)(a1 + 56) = v80;
        }
        *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
        *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
        *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
        v78 = 3;
        goto LABEL_105;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v29 = *((_QWORD *)a2 + 1);
        swift_retain();
        if (v29)
        {
          v30 = *((_QWORD *)a2 + 2);
          *(_QWORD *)(a1 + 8) = v29;
          *(_QWORD *)(a1 + 16) = v30;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
        }
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v55 = (_OWORD *)(a1 + 32);
        v56 = a2 + 2;
        v57 = *((_QWORD *)a2 + 7);
        if (v57)
        {
          *(_QWORD *)(a1 + 56) = v57;
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          (**(void (***)(_OWORD *, __int128 *))(v57 - 8))(v55, v56);
        }
        else
        {
          v81 = *v56;
          v82 = a2[3];
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *v55 = v81;
          *(_OWORD *)(a1 + 48) = v82;
        }
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
        v78 = 4;
        goto LABEL_105;
      case 5u:
        v31 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        v32 = *((_QWORD *)a2 + 2);
        v33 = v31;
        swift_retain();
        if (v32)
        {
          v34 = *((_QWORD *)a2 + 3);
          *(_QWORD *)(a1 + 16) = v32;
          *(_QWORD *)(a1 + 24) = v34;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 16) = a2[1];
        }
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        v58 = (_OWORD *)(a1 + 40);
        v59 = (__int128 *)((char *)a2 + 40);
        v60 = *((_QWORD *)a2 + 8);
        if (v60)
        {
          *(_QWORD *)(a1 + 64) = v60;
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          (**(void (***)(_OWORD *, __int128 *))(v60 - 8))(v58, v59);
        }
        else
        {
          v83 = *v59;
          v84 = *(__int128 *)((char *)a2 + 56);
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          *v58 = v83;
          *(_OWORD *)(a1 + 56) = v84;
        }
        *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
        *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
        *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
        v78 = 5;
        goto LABEL_105;
      case 6u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v35 = *((_QWORD *)a2 + 1);
        swift_retain();
        if (v35)
        {
          v36 = *((_QWORD *)a2 + 2);
          *(_QWORD *)(a1 + 8) = v35;
          *(_QWORD *)(a1 + 16) = v36;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
        }
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v61 = (_OWORD *)(a1 + 32);
        v62 = a2 + 2;
        v63 = *((_QWORD *)a2 + 7);
        if (v63)
        {
          *(_QWORD *)(a1 + 56) = v63;
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          (**(void (***)(_OWORD *, __int128 *))(v63 - 8))(v61, v62);
        }
        else
        {
          v85 = *v62;
          v86 = a2[3];
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *v61 = v85;
          *(_OWORD *)(a1 + 48) = v86;
        }
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
        v78 = 6;
        goto LABEL_105;
      case 7u:
        v37 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 233) = 7;
        v38 = v37;
        return a1;
      case 8u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v39 = *((_QWORD *)a2 + 1);
        swift_retain();
        if (v39)
        {
          v40 = *((_QWORD *)a2 + 2);
          *(_QWORD *)(a1 + 8) = v39;
          *(_QWORD *)(a1 + 16) = v40;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
        }
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v64 = (_OWORD *)(a1 + 32);
        v65 = a2 + 2;
        v66 = *((_QWORD *)a2 + 7);
        if (v66)
        {
          *(_QWORD *)(a1 + 56) = v66;
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          (**(void (***)(_OWORD *, __int128 *))(v66 - 8))(v64, v65);
        }
        else
        {
          v87 = *v65;
          v88 = a2[3];
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *v64 = v87;
          *(_OWORD *)(a1 + 48) = v88;
        }
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
        v89 = (void *)*((_QWORD *)a2 + 14);
        *(_QWORD *)(a1 + 112) = v89;
        *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
        *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
        v90 = *((_QWORD *)a2 + 17);
        swift_retain();
        swift_retain();
        swift_retain();
        v91 = v89;
        swift_retain();
        if (v90)
        {
          v92 = *((_QWORD *)a2 + 18);
          *(_QWORD *)(a1 + 136) = v90;
          *(_QWORD *)(a1 + 144) = v92;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
        }
        *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
        v95 = (_OWORD *)(a1 + 160);
        v96 = a2 + 10;
        v97 = *((_QWORD *)a2 + 23);
        if (v97)
        {
          *(_QWORD *)(a1 + 184) = v97;
          *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
          (**(void (***)(_OWORD *, __int128 *))(v97 - 8))(v95, v96);
        }
        else
        {
          v98 = *v96;
          v99 = a2[11];
          *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
          *v95 = v98;
          *(_OWORD *)(a1 + 176) = v99;
        }
        *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
        *(_BYTE *)(a1 + 201) = *((_BYTE *)a2 + 201);
        *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
        *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
        *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
        *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
        v78 = 8;
        goto LABEL_105;
      case 9u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v41 = *((_QWORD *)a2 + 1);
        swift_retain();
        if (v41)
        {
          v42 = *((_QWORD *)a2 + 2);
          *(_QWORD *)(a1 + 8) = v41;
          *(_QWORD *)(a1 + 16) = v42;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
        }
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v67 = (_OWORD *)(a1 + 32);
        v68 = a2 + 2;
        v69 = *((_QWORD *)a2 + 7);
        if (v69)
        {
          *(_QWORD *)(a1 + 56) = v69;
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          (**(void (***)(_OWORD *, __int128 *))(v69 - 8))(v67, v68);
        }
        else
        {
          v93 = *v68;
          v94 = a2[3];
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *v67 = v93;
          *(_OWORD *)(a1 + 48) = v94;
        }
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
        v78 = 9;
LABEL_105:
        *(_BYTE *)(a1 + 233) = v78;
        swift_retain();
        swift_retain();
        swift_retain();
        break;
      default:
        v8 = *a2;
        v9 = a2[2];
        *(_OWORD *)(a1 + 16) = a2[1];
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)a1 = v8;
        v10 = a2[3];
        v11 = a2[4];
        v12 = a2[6];
        *(_OWORD *)(a1 + 80) = a2[5];
        *(_OWORD *)(a1 + 96) = v12;
        *(_OWORD *)(a1 + 48) = v10;
        *(_OWORD *)(a1 + 64) = v11;
        v13 = a2[7];
        v14 = a2[8];
        v15 = a2[10];
        *(_OWORD *)(a1 + 144) = a2[9];
        *(_OWORD *)(a1 + 160) = v15;
        *(_OWORD *)(a1 + 112) = v13;
        *(_OWORD *)(a1 + 128) = v14;
        v16 = a2[11];
        v17 = a2[12];
        v18 = a2[13];
        *(_OWORD *)(a1 + 218) = *(__int128 *)((char *)a2 + 218);
        *(_OWORD *)(a1 + 192) = v17;
        *(_OWORD *)(a1 + 208) = v18;
        *(_OWORD *)(a1 + 176) = v16;
        break;
    }
  }
  return a1;
}

uint64_t assignWithTake for PresentationState.Base(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 233);
    if (v4 >= 0xA)
      v4 = *(_DWORD *)a1 + 10;
    switch(v4)
    {
      case 0u:
      case 1u:
        swift_release();
        if (*(_QWORD *)(a1 + 8))
          swift_release();
        if (*(_QWORD *)(a1 + 56))
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        swift_release();
        swift_release();
        swift_release();

        break;
      case 2u:
      case 3u:
      case 5u:

        swift_release();
        if (*(_QWORD *)(a1 + 16))
          swift_release();
        if (*(_QWORD *)(a1 + 64))
          __swift_destroy_boxed_opaque_existential_1(a1 + 40);
        goto LABEL_29;
      case 4u:
      case 6u:
      case 9u:
        swift_release();
        if (*(_QWORD *)(a1 + 8))
          swift_release();
        if (*(_QWORD *)(a1 + 56))
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        goto LABEL_29;
      case 7u:

        break;
      case 8u:
        swift_release();
        if (*(_QWORD *)(a1 + 8))
          swift_release();
        if (*(_QWORD *)(a1 + 56))
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        if (*(_QWORD *)(a1 + 136))
          swift_release();
        if (*(_QWORD *)(a1 + 184))
          __swift_destroy_boxed_opaque_existential_1(a1 + 160);
LABEL_29:
        swift_release();
        swift_release();
        swift_release();
        break;
      default:
        break;
    }
    v5 = *(unsigned __int8 *)(a2 + 233);
    if (v5 >= 0xA)
      v5 = *(_DWORD *)a2 + 10;
    switch(v5)
    {
      case 0u:
        v6 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v6;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
        v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        v8 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v8;
        *(_BYTE *)(a1 + 233) = 0;
        return a1;
      case 1u:
        v16 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v16;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
        v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v17;
        v18 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v18;
        v19 = 1;
        goto LABEL_44;
      case 2u:
        v20 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v20;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
        v21 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v21;
        v22 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v22;
        v19 = 2;
        goto LABEL_44;
      case 3u:
        v23 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v23;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
        v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        v25 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v25;
        v19 = 3;
        goto LABEL_44;
      case 4u:
        v26 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v26;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
        v27 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v27;
        v28 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v28;
        v19 = 4;
        goto LABEL_44;
      case 5u:
        v29 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v29;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
        v30 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v30;
        v31 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v31;
        v19 = 5;
        goto LABEL_44;
      case 6u:
        v32 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v32;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
        v33 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v33;
        v34 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v34;
        v19 = 6;
        goto LABEL_44;
      case 7u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v19 = 7;
        goto LABEL_44;
      case 8u:
        v35 = *(_OWORD *)(a2 + 208);
        *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 208) = v35;
        *(_OWORD *)(a1 + 217) = *(_OWORD *)(a2 + 217);
        v36 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v36;
        v37 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v37;
        v38 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v38;
        v39 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v39;
        v40 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v40;
        v41 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v41;
        v19 = 8;
        goto LABEL_44;
      case 9u:
        v42 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v42;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
        v43 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v43;
        v44 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v44;
        v19 = 9;
LABEL_44:
        *(_BYTE *)(a1 + 233) = v19;
        break;
      default:
        v9 = *(_OWORD *)(a2 + 208);
        *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 208) = v9;
        *(_OWORD *)(a1 + 218) = *(_OWORD *)(a2 + 218);
        v10 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v10;
        v11 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v11;
        v12 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v12;
        v13 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v13;
        v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v14;
        v15 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v15;
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationState.Base(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 234))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 233);
  if (v3 >= 0xB)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PresentationState.Base(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_OWORD *)(result + 218) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 246;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 234) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 234) = 0;
    if (a2)
      *(_BYTE *)(result + 233) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PresentationState.Base(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 233);
  if (result >= 0xA)
    return (*(_DWORD *)a1 + 10);
  return result;
}

uint64_t destructiveInjectEnumTag for PresentationState.Base(uint64_t result, unsigned int a2)
{
  if (a2 > 9)
  {
    *(_OWORD *)(result + 217) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 10;
    LOBYTE(a2) = 10;
  }
  *(_BYTE *)(result + 233) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PresentationState.Base()
{
  return &type metadata for PresentationState.Base;
}

void PresentationState.presentPreemptingDismissal(_:presentedVC:presentationSeed:)()
{
  uint64_t v0;
  _BYTE v1[248];

  outlined init with copy of PresentationState.Base(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1878EA90C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  id v4;
  id v6;
  uint64_t v7;
  void *v8;
  int v9;
  char v10;

  outlined destroy of SheetPreference((uint64_t)&v7);
  outlined init with copy of SheetPreference(v2, (uint64_t)&v6);
  v8 = v0;
  v9 = v3;
  v10 = 0;
  v4 = v0;
  PresentationState.base.willset((uint64_t)&v6);
  return outlined assign with take of PresentationState.Base((uint64_t)&v6, v1);
}

void sub_1878EA98C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  outlined destroy of PresentationState.Base((uint64_t)va);
  JUMPOUT(0x1878EA948);
}

void sub_1878EA998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  JUMPOUT(0x1878EA948);
}

Swift::Void __swiftcall PresentationState.dismiss(willPresentAgain:hasNoModifier:)(Swift::Bool willPresentAgain, Swift::Bool hasNoModifier)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  char v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[5];
  _OWORD v13[2];
  id v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];

  v3 = v2;
  outlined init with copy of PresentationState.Base(v3, (uint64_t)v12);
  if (v16 < 2u)
  {
    v6 = v14;
    v21 = v12[4];
    v22[0] = v13[0];
    *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)((char *)v13 + 9);
    v17 = v12[0];
    v18 = v12[1];
    v19 = v12[2];
    v20 = v12[3];
    if (hasNoModifier && (static SemanticFeature.isEnabled.getter() & 1) != 0)
    {

      v7 = 4;
      v8 = v12;
    }
    else
    {
      v8 = (_OWORD *)((char *)v12 + 8);
      *(_QWORD *)&v12[0] = v6;
      if (willPresentAgain)
        v7 = 5;
      else
        v7 = 2;
    }
    v9 = v22[0];
    v8[4] = v21;
    v8[5] = v9;
    *(_OWORD *)((char *)v8 + 89) = *(_OWORD *)((char *)v22 + 9);
    v10 = v18;
    *v8 = v17;
    v8[1] = v10;
    v11 = v20;
    v8[2] = v19;
    v8[3] = v11;
    v16 = v7;
    PresentationState.base.willset((uint64_t)v12);
    outlined assign with take of PresentationState.Base((uint64_t)v12, v3);
  }
  else
  {
    if (v16 == 4)
    {
LABEL_5:
      outlined destroy of SheetPreference((uint64_t)v12);
      return;
    }
    if (v16 == 8)
    {

      outlined destroy of SheetPreference((uint64_t)&v15);
      goto LABEL_5;
    }
    outlined destroy of PresentationState.Base((uint64_t)v12);
  }
}

uint64_t PresentationState.presentingViewID.getter()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD v3[5];
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  id v11;
  char v12;

  outlined init with copy of PresentationState.Base(v0, (uint64_t)&v5);
  if (v12 != 1 && v12)
  {
    outlined destroy of PresentationState.Base((uint64_t)&v5);
    return 0;
  }
  else
  {

    v3[4] = v9;
    v4[0] = v10[0];
    *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)v10 + 9);
    v3[0] = v5;
    v3[1] = v6;
    v3[2] = v7;
    v3[3] = v8;
    v1 = *((_QWORD *)&v6 + 1);
    outlined destroy of SheetPreference((uint64_t)v3);
  }
  return v1;
}

uint64_t PresentationState.presentationDidChange(_:animated:hasNoModifier:)(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  int v9;
  id v10;
  id v11;
  __int128 *v13;
  id v14;
  _OWORD v15[5];
  _OWORD v16[2];
  id v17;
  int v18;
  uint64_t v19;
  char v20;
  _OWORD v21[5];
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  _OWORD v29[5];
  _OWORD v30[2];
  id v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[25];
  char v39;

  v4 = v3;
  outlined init with copy of PresentationState.Base(v4, (uint64_t)v29);
  if (v39 == 8)
  {
    v10 = v31;
    v27 = v37;
    v28[0] = *(_OWORD *)v38;
    *(_OWORD *)((char *)v28 + 9) = *(_OWORD *)&v38[9];
    v23 = v33;
    v24 = v34;
    v25 = v35;
    v26 = v36;
    outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    if (*(_QWORD *)&v15[0])
    {
      v21[4] = v15[4];
      v22[0] = v16[0];
      *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)((char *)v16 + 9);
      v21[0] = v15[0];
      v21[1] = v15[1];
      v21[2] = v15[2];
      v21[3] = v15[3];
      outlined init with copy of SheetPreference((uint64_t)v21, (uint64_t)v15);
      v17 = v10;
      LOBYTE(v18) = a2 & 1;
      outlined init with copy of SheetPreference((uint64_t)&v23, (uint64_t)&v19);
      v20 = 8;
      v11 = v10;
      PresentationState.base.willset((uint64_t)v15);
      outlined assign with take of PresentationState.Base((uint64_t)v15, v4);

      outlined destroy of SheetPreference((uint64_t)v21);
    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      if ((a3 & 1) != 0 && (static SemanticFeature.isEnabled.getter() & 1) != 0)
      {
        outlined init with copy of SheetPreference((uint64_t)&v23, (uint64_t)v15);
        v20 = 4;
      }
      else
      {
        *(_QWORD *)&v15[0] = v10;
        outlined init with copy of SheetPreference((uint64_t)&v23, (uint64_t)v15 + 8);
        v20 = 2;
        v10 = v10;
      }
      PresentationState.base.willset((uint64_t)v15);
      outlined assign with take of PresentationState.Base((uint64_t)v15, v4);

    }
    outlined destroy of SheetPreference((uint64_t)&v23);
    v13 = v29;
  }
  else
  {
    if (v39)
      return outlined destroy of PresentationState.Base((uint64_t)v29);
    v8 = v31;
    v9 = v32;
    v27 = v29[4];
    v28[0] = v30[0];
    *(_OWORD *)((char *)v28 + 9) = *(_OWORD *)((char *)v30 + 9);
    v23 = v29[0];
    v24 = v29[1];
    v25 = v29[2];
    v26 = v29[3];
    if ((objc_msgSend(v31, sel_isBeingPresented) & 1) != 0
      || (objc_msgSend(v8, sel_isBeingDismissed) & 1) != 0)
    {

    }
    else
    {
      outlined init with copy of SheetPreference((uint64_t)&v23, (uint64_t)v15);
      v17 = v8;
      v18 = v9;
      v20 = 1;
      v14 = v8;
      PresentationState.base.willset((uint64_t)v15);
      outlined assign with take of PresentationState.Base((uint64_t)v15, v4);

    }
    v13 = &v23;
  }
  return outlined destroy of SheetPreference((uint64_t)v13);
}

BOOL PresentationState.hasIdentityMatching(_:)(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  _BYTE v12[40];
  _OWORD v13[2];
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  PresentationState.Base.lastPresentation.getter();
  if (v15[0])
  {
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v17, (uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
    outlined destroy of SheetPreference((uint64_t)v15);
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    memset(v21, 0, sizeof(v21));
    v22 = 0;
  }
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  if (v15[0])
  {
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v17, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
    outlined destroy of SheetPreference((uint64_t)v15);
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    memset(v13, 0, sizeof(v13));
    v14 = 0;
  }
  v2 = MEMORY[0x1E0DEC198];
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v21, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v13, (uint64_t)&v18, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v2);
  if (!v16)
  {
    v4 = MEMORY[0x1E0DEC198];
    outlined destroy of AccessibilityTableContext?((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
    outlined destroy of AccessibilityTableContext?((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v4);
    if (!*((_QWORD *)&v19 + 1))
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
      goto LABEL_13;
    }
LABEL_17:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for (AnyHashable?, AnyHashable?));
    return 0;
  }
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v15, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  if (!*((_QWORD *)&v19 + 1))
  {
    v7 = MEMORY[0x1E0DEC198];
    outlined destroy of AccessibilityTableContext?((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
    outlined destroy of AccessibilityTableContext?((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v7);
    outlined destroy of AnyHashable((uint64_t)v12);
    goto LABEL_17;
  }
  v10[0] = v18;
  v10[1] = v19;
  v11 = v20;
  v3 = MEMORY[0x18D75E284](v12, v10);
  outlined destroy of AnyHashable((uint64_t)v10);
  outlined destroy of AccessibilityTableContext?((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v2);
  outlined destroy of AccessibilityTableContext?((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v2);
  outlined destroy of AnyHashable((uint64_t)v12);
  outlined destroy of AccessibilityTableContext?((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v2);
  if ((v3 & 1) == 0)
    return 0;
LABEL_13:
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
    return 1;
  PresentationState.Base.lastPresentation.getter();
  v5 = v15[0];
  if (v15[0])
  {
    v6 = v16;
    outlined destroy of SheetPreference((uint64_t)v15);
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    v6 = 0;
  }
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  if (!v15[0])
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    return !v5;
  }
  v9 = v16;
  outlined destroy of SheetPreference((uint64_t)v15);
  result = 0;
  if (v5 && v6 == v9)
    return 1;
  return result;
}

void PresentationState.isDismissing.getter()
{
  uint64_t v0;
  _BYTE v1[240];

  outlined init with copy of PresentationState.Base(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1878EB178()
{
  void *v1;
  uint64_t v2;

  outlined destroy of SheetPreference((uint64_t)&v2);
  return 1;
}

void PresentationState.isDismissalPreemptable.getter()
{
  uint64_t v0;
  _BYTE v1[240];

  outlined init with copy of PresentationState.Base(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1878EB220()
{
  id v1[34];

  outlined destroy of SheetPreference((uint64_t)v1);
  return 0;
}

uint64_t PresentationState.enqueueDelayedPresentation(_:animated:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  _OWORD v7[5];
  _OWORD v8[2];
  uint64_t v9;
  char v10;
  _BYTE v11[112];
  _OWORD v12[5];
  _OWORD v13[3];

  PresentationState.Base.lastPresentation.getter();
  if (!*(_QWORD *)&v7[0])
    return outlined destroy of AccessibilityTableContext?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  v12[4] = v7[4];
  v13[0] = v8[0];
  *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)v8 + 9);
  v12[0] = v7[0];
  v12[1] = v7[1];
  v12[2] = v7[2];
  v12[3] = v7[3];
  outlined init with copy of SheetPreference(a1, (uint64_t)v7);
  PresentationState.Base.presentedVC.getter();
  v9 = v5;
  v10 = a2 & 1;
  outlined init with copy of SheetPreference((uint64_t)v12, (uint64_t)v11);
  v11[105] = 8;
  PresentationState.base.willset((uint64_t)v7);
  outlined assign with take of PresentationState.Base((uint64_t)v7, v2);
  return outlined destroy of SheetPreference((uint64_t)v12);
}

Swift::Void __swiftcall PresentationState.presentationDidBeginInteractiveDismissal()()
{
  uint64_t v0;
  _BYTE v1[240];

  outlined init with copy of PresentationState.Base(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1878EB3A4()
{
  void *v1;
  uint64_t v2;

  return outlined destroy of SheetPreference((uint64_t)&v2);
}

void sub_1878EB450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  outlined destroy of PresentationState.Base((uint64_t)&a9);
  JUMPOUT(0x1878EB440);
}

void sub_1878EB45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  JUMPOUT(0x1878EB440);
}

double PresentationState.delayedPresentation.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  _OWORD v9[5];
  _OWORD v10[2];
  uint64_t v11;
  char v12;
  _BYTE v13[112];

  outlined init with copy of PresentationState.Base(v1, (uint64_t)v9);
  if (v13[105] == 8)
  {
    v3 = v11;
    v4 = v12;
    v5 = v10[0];
    *(_OWORD *)(a1 + 64) = v9[4];
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)((char *)v10 + 9);
    v6 = v9[1];
    *(_OWORD *)a1 = v9[0];
    *(_OWORD *)(a1 + 16) = v6;
    v7 = v9[3];
    *(_OWORD *)(a1 + 32) = v9[2];
    *(_OWORD *)(a1 + 48) = v7;
    outlined destroy of SheetPreference((uint64_t)v13);
    *(_QWORD *)(a1 + 112) = v3;
    *(_BYTE *)(a1 + 120) = v4;
  }
  else
  {
    outlined destroy of PresentationState.Base((uint64_t)v9);
    result = 0.0;
    *(_OWORD *)(a1 + 105) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

Swift::Void __swiftcall PresentationState.presentationDidDisappear()()
{
  uint64_t v0;
  _BYTE v1[240];

  outlined init with copy of PresentationState.Base(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1878EB554()
{
  uint64_t v0;
  _BYTE v2[112];
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[80];

  outlined destroy of SheetPreference((uint64_t)v2);
  v8 = 0u;
  memset(v9, 0, 25);
  v6 = 0u;
  v7 = 0u;
  v4 = 0u;
  v5 = 0u;
  v3 = 0u;
  memset(v2, 0, sizeof(v2));
  v9[25] = 10;
  PresentationState.base.willset((uint64_t)v2);
  return outlined assign with take of PresentationState.Base((uint64_t)v2, v0);
}

Swift::Void __swiftcall PresentationState.dismissInspector()()
{
  uint64_t v0;
  _OWORD v1[5];
  _BYTE v2[25];
  id v3;
  unsigned __int8 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[3];

  outlined init with copy of PresentationState.Base(v0, (uint64_t)v1);
  if (v4 >= 2u)
  {
    if (v4 == 6)
      outlined destroy of SheetPreference((uint64_t)v1);
    else
      outlined destroy of PresentationState.Base((uint64_t)v1);
  }
  else
  {

    *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)&v2[9];
    v9 = v1[4];
    v10[0] = *(_OWORD *)v2;
    v7 = v1[2];
    v8 = v1[3];
    v5 = v1[0];
    v6 = v1[1];
    *(_OWORD *)&v2[9] = *(_OWORD *)((char *)v10 + 9);
    v4 = 6;
    PresentationState.base.willset((uint64_t)v1);
    outlined assign with take of PresentationState.Base((uint64_t)v1, v0);
  }
}

void PresentationState.Base.lastPresentation.getter()
{
  uint64_t v0;
  _BYTE v1[240];

  outlined init with copy of PresentationState.Base(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

void sub_1878EB78C()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[25];

  *(_OWORD *)(v2 - 80) = v11;
  *(_OWORD *)(v2 - 64) = *(_OWORD *)v12;
  *(_OWORD *)(v1 + 89) = *(_OWORD *)&v12[9];
  *(_OWORD *)(v2 - 144) = v7;
  *(_OWORD *)(v2 - 128) = v8;
  *(_OWORD *)(v2 - 112) = v9;
  *(_OWORD *)(v2 - 96) = v10;
  v3 = *(_OWORD *)(v2 - 64);
  v0[4] = *(_OWORD *)(v2 - 80);
  v0[5] = v3;
  *(_OWORD *)((char *)v0 + 89) = *(_OWORD *)(v1 + 89);
  v4 = *(_OWORD *)(v2 - 128);
  *v0 = *(_OWORD *)(v2 - 144);
  v0[1] = v4;
  v5 = *(_OWORD *)(v2 - 96);
  v0[2] = *(_OWORD *)(v2 - 112);
  v0[3] = v5;
}

void PresentationState.Base.willPresentAgainAfterDismiss.getter()
{
  uint64_t v0;
  _BYTE v1[240];

  outlined init with copy of PresentationState.Base(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1878EB8E8()
{
  id v1[34];

  outlined destroy of SheetPreference((uint64_t)v1);
  return 0;
}

void PresentationState.Base.presentationSeed.getter()
{
  uint64_t v0;
  _BYTE v1[240];

  outlined init with copy of PresentationState.Base(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1878EB9A4()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  uint64_t v3;

  result = outlined destroy of SheetPreference((uint64_t)&v3);
  *(_DWORD *)v0 = 0;
  *(_BYTE *)(v0 + 4) = 1;
  return result;
}

uint64_t PresentationState.base.willset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint8_t *v23;
  void *v24;
  void *v25;
  char *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v2 = v1;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.presentation.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
    v45 = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    v45 = 0xD00000000000001CLL;
    v46 = 0x8000000187BEB680;
    PresentationState.Base.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0x209286E220;
    v14._object = (void *)0xA500000000000000;
    String.append(_:)(v14);
    PresentationState.Base.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16 = v45;
    v17 = v46;
    swift_bridgeObjectRetain();
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v41 = v16;
      v20 = swift_slowAlloc();
      v42 = v2;
      v21 = (uint8_t *)v20;
      v22 = swift_slowAlloc();
      v45 = v22;
      v43 = a1;
      *(_DWORD *)v21 = 136315138;
      swift_bridgeObjectRetain();
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v17, &v45);
      a1 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v18, v19, "%s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v22, -1, -1);
      v23 = v21;
      v2 = v42;
      MEMORY[0x18D760108](v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  PresentationState.Base.presentedVC.getter();
  v25 = v24;

  if (!v25)
  {
    PresentationState.Base.presentedVC.getter();
    if (v26)
    {
      v27 = v26;
      v28 = *(id *)&v26[direct field offset for UIHostingController.host];

      v45 = 0;
      LOBYTE(v46) = 1;
      type metadata accessor for _UIHostingView<AnyView>(0, v29, v30, v31);
      lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
      ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();

    }
  }
  PresentationState.Base.willPresentAgainAfterDismiss.getter();
  v33 = v32;
  v34 = specialized static PresentationState.Base.dismissedPresentations(from:to:)(v2, a1);
  v35 = *(_QWORD *)(v34 + 16);
  if (v35)
  {
    v36 = v34 + 32;
    do
    {
      outlined init with copy of SheetPreference(v36, (uint64_t)&v45);
      v37 = v46;
      v38 = v47;
      outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v46, v47);
      outlined destroy of SheetPreference((uint64_t)&v45);
      if (v37)
      {
        v39 = swift_allocObject();
        *(_QWORD *)(v39 + 16) = v37;
        *(_QWORD *)(v39 + 24) = v38;
        *(_BYTE *)(v39 + 32) = (v33 & 1) == 0;
        swift_retain();
        static Update.enqueueAction(_:)();
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v37, v38);
      }
      v36 += 112;
      --v35;
    }
    while (v35);
  }
  return swift_bridgeObjectRelease();
}

void PresentationState.Base.description.getter()
{
  uint64_t v0;
  _BYTE v1[240];

  outlined init with copy of PresentationState.Base(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1878EBEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[7];
  _QWORD v26[14];
  _OWORD v27[7];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  int v35;

  v3 = v34;
  v4 = v35;
  v27[4] = v32;
  v27[5] = v33;
  *(_OWORD *)(v2 + 201) = *(_OWORD *)(v0 + 89);
  v27[0] = v28;
  v27[1] = v29;
  v27[2] = v30;
  v27[3] = v31;
  v26[0] = 0;
  v26[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v5._object = (void *)0x8000000187BEB7B0;
  v5._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v5);
  outlined init with copy of SheetPreference((uint64_t)v27, (uint64_t)v26);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v26, (uint64_t)&v19, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  if ((_QWORD)v19)
  {
    v25[4] = v23;
    v25[5] = v24;
    *(_OWORD *)(v1 + 201) = *(_OWORD *)(v1 + 89);
    v25[0] = v19;
    v25[1] = v20;
    v25[2] = v21;
    v25[3] = v22;
    *(_QWORD *)&v19 = *((_QWORD *)&v20 + 1);
    v6 = String.init<A>(describing:)();
    v8 = v7;
    outlined destroy of SheetPreference((uint64_t)v25);
  }
  else
  {
    v6 = 7104878;
    outlined destroy of AccessibilityTableContext?((uint64_t)&v19, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    v8 = (void *)0xE300000000000000;
  }
  outlined destroy of AccessibilityTableContext?((uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x6E6573657270202CLL;
  v10._object = (void *)0xEF203A4356646574;
  String.append(_:)(v10);
  v26[0] = v3;
  v11._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x203A646565732029;
  v12._object = (void *)0xE800000000000000;
  String.append(_:)(v12);
  if (v4 == -1)
  {
    v14 = 0xE700000000000000;
    v13 = 0x64696C61766E69;
  }
  else if (v4)
  {
    LODWORD(v26[0]) = v4;
    v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v14 = v15;
  }
  else
  {
    v13 = 0x7974706D65;
    v14 = 0xE500000000000000;
  }
  v16 = v14;
  String.append(_:)(*(Swift::String *)&v13);

  swift_bridgeObjectRelease();
  outlined destroy of SheetPreference((uint64_t)v27);
  *(_QWORD *)&v28 = 0x2E65736142;
  *((_QWORD *)&v28 + 1) = 0xE500000000000000;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t specialized static PresentationState.Base.dismissedPresentations(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  char *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char *v73;
  unint64_t v74;
  char *v75;
  _OWORD v76[5];
  _OWORD v77[2];
  _BYTE v78[24];
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _OWORD v85[2];
  _BYTE v86[24];
  uint64_t v87;
  _BYTE v88[24];
  uint64_t v89;
  _BYTE v90[120];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _OWORD v96[2];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _OWORD v102[2];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _OWORD v108[2];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _OWORD v114[2];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _OWORD v120[2];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _OWORD v126[2];
  id v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _BYTE v133[25];
  char v134;
  _OWORD v135[5];
  _OWORD v136[2];
  id v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _BYTE v143[25];
  char v144;

  outlined init with copy of PresentationState.Base(a1, (uint64_t)&v121);
  outlined init with copy of PresentationState.Base(a2, (uint64_t)v135);
  if (v134 == 4)
  {
    v6 = (char *)&v121;
LABEL_8:
    outlined destroy of SheetPreference((uint64_t)v6);
    v7 = v135;
LABEL_9:
    outlined destroy of PresentationState.Base((uint64_t)v7);
    return MEMORY[0x1E0DEE9D8];
  }
  if (v134 == 8)
  {

    if (v144 == 2)
    {
      outlined init with copy of PresentationState.Base((uint64_t)v135, (uint64_t)v90);

      outlined init with copy of SheetPreference((uint64_t)&v121, (uint64_t)&v115);
      outlined init with copy of SheetPreference((uint64_t)&v128, (uint64_t)&v109);
      v107 = *(_OWORD *)&v90[72];
      v108[0] = *(_OWORD *)&v90[88];
      *(_OWORD *)((char *)v108 + 9) = *(_OWORD *)&v90[97];
      v103 = *(_OWORD *)&v90[8];
      v104 = *(_OWORD *)&v90[24];
      v105 = *(_OWORD *)&v90[40];
      v106 = *(_OWORD *)&v90[56];
      v3 = *((_QWORD *)&v116 + 1);
      v4 = *((_QWORD *)&v110 + 1);
      outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)&v97);
      v5 = &v103;
      goto LABEL_22;
    }
    if (v144 != 8)
    {
      if (v144 != 9)
        goto LABEL_26;
      outlined init with copy of PresentationState.Base((uint64_t)v135, (uint64_t)v90);
      outlined init with copy of SheetPreference((uint64_t)&v121, (uint64_t)&v115);
      v113 = *(_OWORD *)&v90[64];
      v114[0] = *(_OWORD *)&v90[80];
      *(_OWORD *)((char *)v114 + 9) = *(_OWORD *)&v90[89];
      v109 = *(_OWORD *)v90;
      v110 = *(_OWORD *)&v90[16];
      v112 = *(_OWORD *)&v90[48];
      v111 = *(_OWORD *)&v90[32];
      outlined init with copy of SheetPreference((uint64_t)&v128, (uint64_t)&v103);
      v3 = *((_QWORD *)&v116 + 1);
      v4 = *((_QWORD *)&v104 + 1);
      outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)&v97);
      v5 = &v109;
LABEL_22:
      outlined init with copy of SheetPreference((uint64_t)v5, (uint64_t)v88);
      if (v3 == v4 && *((_QWORD *)&v98 + 1) == v89)
      {
        outlined destroy of SheetPreference((uint64_t)v88);
        outlined destroy of SheetPreference((uint64_t)&v97);
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SheetPreference>, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_187BF9830;
        outlined init with copy of SheetPreference((uint64_t)&v115, v8 + 32);
        outlined destroy of SheetPreference((uint64_t)&v103);
        outlined destroy of SheetPreference((uint64_t)&v109);
        outlined destroy of SheetPreference((uint64_t)&v115);
        outlined destroy of SheetPreference((uint64_t)&v128);
        v15 = &v121;
LABEL_80:
        outlined destroy of SheetPreference((uint64_t)v15);
        v48 = v135;
        goto LABEL_81;
      }
      outlined destroy of SheetPreference((uint64_t)v88);
      outlined destroy of SheetPreference((uint64_t)&v97);
      outlined destroy of SheetPreference((uint64_t)&v103);
      outlined destroy of SheetPreference((uint64_t)&v109);
      outlined destroy of SheetPreference((uint64_t)&v115);
LABEL_26:
      *(_OWORD *)&v90[64] = v125;
      *(_OWORD *)&v90[80] = v126[0];
      *(_OWORD *)&v90[89] = *(_OWORD *)((char *)v126 + 9);
      *(_OWORD *)v90 = v121;
      *(_OWORD *)&v90[16] = v122;
      *(_OWORD *)&v90[32] = v123;
      *(_OWORD *)&v90[48] = v124;
      v119 = v132;
      v120[0] = *(_OWORD *)v133;
      *(_OWORD *)((char *)v120 + 9) = *(_OWORD *)&v133[9];
      v115 = v128;
      v116 = v129;
      v118 = v131;
      v117 = v130;
      PresentationState.Base.lastPresentation.getter();
      v16 = v109;
      if ((_QWORD)v109)
      {
        v17 = *((_QWORD *)&v110 + 1);
        outlined destroy of SheetPreference((uint64_t)&v109);
        if (*(_QWORD *)&v90[24] == v17)
        {
          v8 = MEMORY[0x1E0DEE9D8];
          goto LABEL_37;
        }
      }
      else
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)&v109, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
        v17 = 0;
      }
      outlined init with copy of SheetPreference((uint64_t)v90, (uint64_t)&v109);
      v8 = MEMORY[0x1E0DEE9D8];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
      v20 = *(_QWORD *)(v8 + 16);
      v21 = *(_QWORD *)(v8 + 24);
      v22 = v20 + 1;
      if (v20 >= v21 >> 1)
      {
        v73 = (char *)v8;
        v74 = *(_QWORD *)(v8 + 16);
        v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v20 + 1, 1, v73);
        v20 = v74;
        v8 = (uint64_t)v75;
      }
      *(_QWORD *)(v8 + 16) = v22;
      v23 = (_OWORD *)(v8 + 112 * v20);
      v24 = v109;
      v25 = v111;
      v23[3] = v110;
      v23[4] = v25;
      v23[2] = v24;
      v26 = v112;
      v27 = v113;
      v28 = v114[0];
      *(_OWORD *)((char *)v23 + 121) = *(_OWORD *)((char *)v114 + 9);
      v23[6] = v27;
      v23[7] = v28;
      v23[5] = v26;
      if (!v16)
      {
        v29 = 0;
LABEL_41:
        outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)&v109);
        outlined init with copy of SheetPreference((uint64_t)v90, (uint64_t)&v103);
        if (v29 || *((_QWORD *)&v110 + 1) == *((_QWORD *)&v104 + 1))
        {
          outlined destroy of SheetPreference((uint64_t)&v103);
          outlined destroy of SheetPreference((uint64_t)&v109);
        }
        else
        {
          outlined destroy of SheetPreference((uint64_t)&v103);
          outlined destroy of SheetPreference((uint64_t)&v109);
          outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)&v97);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
          v33 = *(_QWORD *)(v8 + 16);
          v32 = *(_QWORD *)(v8 + 24);
          if (v33 >= v32 >> 1)
            v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, (char *)v8);
          *(_QWORD *)(v8 + 16) = v33 + 1;
          v34 = (_OWORD *)(v8 + 112 * v33);
          v35 = v97;
          v36 = v99;
          v34[3] = v98;
          v34[4] = v36;
          v34[2] = v35;
          v37 = v100;
          v38 = v101;
          v39 = v102[0];
          *(_OWORD *)((char *)v34 + 121) = *(_OWORD *)((char *)v102 + 9);
          v34[6] = v38;
          v34[7] = v39;
          v34[5] = v37;
        }
        outlined destroy of SheetPreference((uint64_t)&v115);
        v15 = (__int128 *)v90;
        goto LABEL_80;
      }
LABEL_37:
      v29 = *((_QWORD *)&v116 + 1) == v17;
      goto LABEL_41;
    }
    outlined init with copy of PresentationState.Base((uint64_t)v135, (uint64_t)v90);

    v119 = v125;
    v120[0] = v126[0];
    *(_OWORD *)((char *)v120 + 9) = *(_OWORD *)((char *)v126 + 9);
    v115 = v121;
    v116 = v122;
    v118 = v124;
    v117 = v123;
    v113 = *(_OWORD *)&v90[64];
    v114[0] = *(_OWORD *)&v90[80];
    *(_OWORD *)((char *)v114 + 9) = *(_OWORD *)&v90[89];
    v109 = *(_OWORD *)v90;
    v110 = *(_OWORD *)&v90[16];
    v112 = *(_OWORD *)&v90[48];
    v111 = *(_OWORD *)&v90[32];
    v107 = v132;
    v108[0] = *(_OWORD *)v133;
    *(_OWORD *)((char *)v108 + 9) = *(_OWORD *)&v133[9];
    v103 = v128;
    v104 = v129;
    v105 = v130;
    v106 = v131;
    v101 = v95;
    v102[0] = v96[0];
    *(_OWORD *)((char *)v102 + 9) = *(_OWORD *)((char *)v96 + 9);
    v97 = v91;
    v98 = v92;
    v99 = v93;
    v100 = v94;
    v18 = *((_QWORD *)&v122 + 1);
    v19 = *(_QWORD *)&v90[24];
    outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)v88);
    outlined init with copy of SheetPreference((uint64_t)&v97, (uint64_t)v86);
    if (v18 == v19)
    {
      outlined destroy of SheetPreference((uint64_t)v86);
      outlined destroy of SheetPreference((uint64_t)v88);
    }
    else
    {
      v46 = v89;
      v47 = v87;
      outlined destroy of SheetPreference((uint64_t)v86);
      outlined destroy of SheetPreference((uint64_t)v88);
      if (v46 != v47)
      {
        outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)&v80);
        v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
        v51 = *(_QWORD *)(v8 + 16);
        v50 = *(_QWORD *)(v8 + 24);
        if (v51 >= v50 >> 1)
          v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, (char *)v8);
        *(_QWORD *)(v8 + 16) = v51 + 1;
        v52 = (_OWORD *)(v8 + 112 * v51);
        v53 = v80;
        v54 = v82;
        v52[3] = v81;
        v52[4] = v54;
        v52[2] = v53;
        v55 = v83;
        v56 = v84;
        v57 = v85[0];
        *(_OWORD *)((char *)v52 + 121) = *(_OWORD *)((char *)v85 + 9);
        v52[6] = v56;
        v52[7] = v57;
        v52[5] = v55;
        goto LABEL_68;
      }
    }
    v8 = MEMORY[0x1E0DEE9D8];
LABEL_68:
    v58 = *((_QWORD *)&v104 + 1);
    outlined init with copy of SheetPreference((uint64_t)&v103, (uint64_t)&v80);
    outlined init with copy of SheetPreference((uint64_t)&v97, (uint64_t)v78);
    if (v58 == v19 || *((_QWORD *)&v81 + 1) == v79)
    {
      outlined destroy of SheetPreference((uint64_t)v78);
      outlined destroy of SheetPreference((uint64_t)&v80);
    }
    else
    {
      outlined destroy of SheetPreference((uint64_t)v78);
      outlined destroy of SheetPreference((uint64_t)&v80);
      outlined init with copy of SheetPreference((uint64_t)&v103, (uint64_t)v76);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
      v65 = *(_QWORD *)(v8 + 16);
      v64 = *(_QWORD *)(v8 + 24);
      if (v65 >= v64 >> 1)
        v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, (char *)v8);
      *(_QWORD *)(v8 + 16) = v65 + 1;
      v66 = (_OWORD *)(v8 + 112 * v65);
      v67 = v76[0];
      v68 = v76[2];
      v66[3] = v76[1];
      v66[4] = v68;
      v66[2] = v67;
      v69 = v76[3];
      v70 = v76[4];
      v71 = v77[0];
      *(_OWORD *)((char *)v66 + 121) = *(_OWORD *)((char *)v77 + 9);
      v66[6] = v70;
      v66[7] = v71;
      v66[5] = v69;
    }
    outlined destroy of SheetPreference((uint64_t)&v97);
    outlined destroy of SheetPreference((uint64_t)&v103);
    outlined destroy of SheetPreference((uint64_t)&v109);
    v15 = &v115;
    goto LABEL_80;
  }
  if (v144 == 3)
  {

    PresentationState.Base.lastPresentation.getter();
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v90, (uint64_t)&v115, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    if ((_QWORD)v115)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SheetPreference>, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v8 = swift_allocObject();
      v10 = v119;
      v11 = v120[0];
      v12 = v117;
      *(_OWORD *)(v8 + 80) = v118;
      *(_OWORD *)(v8 + 96) = v10;
      *(_OWORD *)(v8 + 112) = v11;
      *(_OWORD *)(v8 + 121) = *(_OWORD *)((char *)v120 + 9);
      v13 = v115;
      v14 = v116;
      *(_OWORD *)(v8 + 16) = xmmword_187BF9830;
      *(_OWORD *)(v8 + 32) = v13;
      *(_OWORD *)(v8 + 48) = v14;
      *(_OWORD *)(v8 + 64) = v12;
      outlined destroy of AccessibilityTableContext?((uint64_t)v90, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v90, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      v8 = MEMORY[0x1E0DEE9D8];
    }
    v45 = (char *)v135 + 8;
    goto LABEL_59;
  }
  if (v144 == 8)
  {

    *(_OWORD *)&v90[64] = v135[4];
    *(_OWORD *)&v90[80] = v136[0];
    *(_OWORD *)&v90[89] = *(_OWORD *)((char *)v136 + 9);
    *(_OWORD *)v90 = v135[0];
    *(_OWORD *)&v90[16] = v135[1];
    *(_OWORD *)&v90[32] = v135[2];
    *(_OWORD *)&v90[48] = v135[3];
    v119 = v142;
    v120[0] = *(_OWORD *)v143;
    *(_OWORD *)((char *)v120 + 9) = *(_OWORD *)&v143[9];
    v115 = v138;
    v116 = v139;
    v118 = v141;
    v117 = v140;
    PresentationState.Base.lastPresentation.getter();
    if ((_QWORD)v109)
    {
      v9 = *((_QWORD *)&v110 + 1);
      outlined destroy of SheetPreference((uint64_t)&v109);
      outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)&v109);
      if (v9 == *(_QWORD *)&v90[24] || v9 == *((_QWORD *)&v110 + 1))
      {
        outlined destroy of SheetPreference((uint64_t)&v109);
        outlined destroy of SheetPreference((uint64_t)&v115);
        outlined destroy of SheetPreference((uint64_t)v90);
        v7 = &v121;
        goto LABEL_9;
      }
    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)&v109, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)&v109);
    }
    outlined destroy of SheetPreference((uint64_t)&v109);
    PresentationState.Base.lastPresentation.getter();
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v103, (uint64_t)&v97, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    if ((_QWORD)v97)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SheetPreference>, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v8 = swift_allocObject();
      v40 = v101;
      v41 = v102[0];
      v42 = v99;
      *(_OWORD *)(v8 + 80) = v100;
      *(_OWORD *)(v8 + 96) = v40;
      *(_OWORD *)(v8 + 112) = v41;
      *(_OWORD *)(v8 + 121) = *(_OWORD *)((char *)v102 + 9);
      v43 = v97;
      v44 = v98;
      *(_OWORD *)(v8 + 16) = xmmword_187BF9830;
      *(_OWORD *)(v8 + 32) = v43;
      *(_OWORD *)(v8 + 48) = v44;
      *(_OWORD *)(v8 + 64) = v42;
      outlined destroy of AccessibilityTableContext?((uint64_t)&v103, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)&v103, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      v8 = MEMORY[0x1E0DEE9D8];
    }
    outlined destroy of SheetPreference((uint64_t)&v115);
    v45 = v90;
LABEL_59:
    outlined destroy of SheetPreference((uint64_t)v45);
    v48 = &v121;
LABEL_81:
    outlined destroy of PresentationState.Base((uint64_t)v48);
    return v8;
  }
  if (v134 == 3)
  {

    v6 = (char *)&v121 + 8;
    goto LABEL_8;
  }
  PresentationState.Base.lastPresentation.getter();
  v30 = *(_QWORD *)v90;
  if (*(_QWORD *)v90)
  {
    v31 = *(_QWORD *)&v90[24];
    outlined destroy of SheetPreference((uint64_t)v90);
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v90, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    v31 = 0;
  }
  PresentationState.Base.lastPresentation.getter();
  if (*(_QWORD *)v90)
  {
    v49 = *(_QWORD *)&v90[24];
    outlined destroy of SheetPreference((uint64_t)v90);
    if (v30 && v31 == v49)
      goto LABEL_64;
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v90, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    if (!v30)
    {
LABEL_64:
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v121, (uint64_t (*)(_QWORD))type metadata accessor for (PresentationState.Base, PresentationState.Base));
      return MEMORY[0x1E0DEE9D8];
    }
  }
  PresentationState.Base.lastPresentation.getter();
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v90, (uint64_t)&v115, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  if ((_QWORD)v115)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SheetPreference>, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v8 = swift_allocObject();
    v59 = v119;
    v60 = v120[0];
    v61 = v117;
    *(_OWORD *)(v8 + 80) = v118;
    *(_OWORD *)(v8 + 96) = v59;
    *(_OWORD *)(v8 + 112) = v60;
    *(_OWORD *)(v8 + 121) = *(_OWORD *)((char *)v120 + 9);
    v62 = v115;
    v63 = v116;
    *(_OWORD *)(v8 + 16) = xmmword_187BF9830;
    *(_OWORD *)(v8 + 32) = v62;
    *(_OWORD *)(v8 + 48) = v63;
    *(_OWORD *)(v8 + 64) = v61;
    outlined destroy of AccessibilityTableContext?((uint64_t)v90, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v90, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    v8 = MEMORY[0x1E0DEE9D8];
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v121, (uint64_t (*)(_QWORD))type metadata accessor for (PresentationState.Base, PresentationState.Base));
  return v8;
}

uint64_t sub_1878ED788()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for (PresentationState.Base, PresentationState.Base)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (PresentationState.Base, PresentationState.Base))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (PresentationState.Base, PresentationState.Base));
  }
}

uint64_t InferredToolbarState.update(edge:to:)(char a1)
{
  uint64_t *v1;
  char v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char isUniquelyReferenced_nonNull_native;
  double v14;
  uint64_t v15;

  v3 = a1 & 1;
  ScrollGeometry.visibleRect.getter();
  v14 = v4;
  ScrollGeometry.contentSize.getter();
  v6 = v5;
  ScrollGeometry.visibleRect.getter();
  v8 = v14 + v7;
  if (v6 + -44.0 > v14 + v7)
    v8 = v6 + -44.0;
  if (v6 < v8)
    v8 = v6;
  v9 = vabdd_f64(v8, v6) * 0.25;
  v10 = v14 * 0.25;
  if (v14 > 44.0)
    v10 = 11.0;
  if (v14 < 0.0)
    v10 = 0.0;
  if ((a1 & 1) == 0)
    v9 = v10;
  if (v9 < 0.0)
    v9 = 0.0;
  if (v9 <= 1.0)
    v11 = v9;
  else
    v11 = 1.0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = *v1;
  *v1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, isUniquelyReferenced_nonNull_native, v11);
  *v1 = v15;
  return swift_bridgeObjectRelease();
}

uint64_t static ToolbarEdges.contains(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return ((*(unsigned __int8 (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3) >> (a1 & 1)) & 1;
}

uint64_t static ToolbarEdges.bars.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(void);
  char v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  char v8;
  char v9;
  char v10;
  _BYTE v12[40];
  _BYTE v13[40];

  v4 = *(void (**)(void))(a2 + 8);
  v4();
  v5 = VerticalEdge.Set.contains(_:)();
  v6 = MEMORY[0x1E0DEE9E8];
  if ((v5 & 1) != 0)
  {
    memset(v12, 0, sizeof(v12));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.update(with:isUnique:)((uint64_t)v12, isUniquelyReferenced_nonNull_native, (uint64_t)v13);
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityTableContext?((uint64_t)v13, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    memset(v12, 0, 24);
    *(_OWORD *)&v12[24] = xmmword_187C39070;
    v8 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.update(with:isUnique:)((uint64_t)v12, v8, (uint64_t)v13);
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityTableContext?((uint64_t)v13, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    memset(v12, 0, 24);
    *(_OWORD *)&v12[24] = xmmword_187BFE310;
    v9 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.update(with:isUnique:)((uint64_t)v12, v9, (uint64_t)v13);
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityTableContext?((uint64_t)v13, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
  }
  ((void (*)(uint64_t, uint64_t))v4)(a1, a2);
  if ((VerticalEdge.Set.contains(_:)() & 1) != 0)
  {
    memset(v12, 0, 24);
    *(_OWORD *)&v12[24] = xmmword_187C304D0;
    v10 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.update(with:isUnique:)((uint64_t)v12, v10, (uint64_t)v13);
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityTableContext?((uint64_t)v13, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
  }
  return v6;
}

void specialized ToolbarProxy.callAsFunction<A>(in:placement:range:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  id v7;
  double v8;
  unint64_t v9;
  uint64_t v11;

  v11 = MEMORY[0x1E0DEE9D8];
  v7 = *(id *)AGGraphGetInputValue();
  specialized ToolbarBridge.adjustEntries(in:_:)(a1, partial apply for closure #1 in ToolbarProxy.callAsFunction<A>(in:placement:range:), v8);

  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v11 + 16);
  if (v9 < a3 || (uint64_t)v9 < a4)
    goto LABEL_9;
  if ((a4 & 0x8000000000000000) == 0)
  {
    type metadata accessor for ToolbarStorage.Entry(0);
    swift_getKeyPath();
    type metadata accessor for ArraySlice<ToolbarStorage.Entry>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArraySlice<ToolbarStorage.Entry> and conformance ArraySlice<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArraySlice<ToolbarStorage.Entry>, MEMORY[0x1E0DEBF80]);
    lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID();
    swift_bridgeObjectRetain();
    ForEach.init(_:idGenerator:content:)();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_10:
  __break(1u);
}

void InferredToolbarModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarModifier<A>);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for InferredToolbarModifier.OnScrollStateChange(255, v3, *(_QWORD *)(a2 + 24), v4);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EdgesPredicate();
}

void sub_1878EDE5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(255);
  v4 = v3;
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EdgesPredicate<A, B>, a1);
  *(_QWORD *)(v1 - 120) = a1;
  *(_QWORD *)(v1 - 112) = v4;
  *(_QWORD *)(v1 - 104) = MEMORY[0x1E0CE1E98];
  *(_QWORD *)(v1 - 96) = v5;
  type metadata accessor for StaticIf();
}

void sub_1878EDE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for ModifiedContent();
  *(_QWORD *)(v2 - 120) = v0;
  *(_QWORD *)(v2 - 112) = &type metadata for BottomToolbarEdges;
  *(_QWORD *)(v2 - 104) = v1;
  *(_QWORD *)(v2 - 96) = &protocol witness table for BottomToolbarEdges;
  type metadata accessor for EdgesPredicate();
}

void sub_1878EDED8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(255);
  v6 = v5;
  v7 = MEMORY[0x18D75FFDC](v2, a1);
  *(_QWORD *)(v3 - 120) = a1;
  *(_QWORD *)(v3 - 112) = v6;
  *(_QWORD *)(v3 - 104) = v1;
  *(_QWORD *)(v3 - 96) = v7;
  type metadata accessor for StaticIf();
}

void sub_1878EDF08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = type metadata accessor for ModifiedContent();
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v3);
  *(_QWORD *)(v6 - 312) = v9;
  *(_QWORD *)(v6 - 136) = v9;
  *(_QWORD *)(v6 - 128) = &protocol witness table for InferredToolbarModifier<A>.OnScrollStateChange;
  v10 = MEMORY[0x1E0CE2E70];
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v6 - 136);
  v12 = MEMORY[0x1E0CE4640];
  v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, MEMORY[0x1E0CE4640]);
  v14 = MEMORY[0x1E0CE1E88];
  *(_QWORD *)(v6 - 152) = v13;
  *(_QWORD *)(v6 - 144) = v14;
  v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v5, v6 - 152);
  *(_QWORD *)(v6 - 168) = v11;
  *(_QWORD *)(v6 - 160) = v15;
  v16 = MEMORY[0x18D75FFDC](v10, v4, v6 - 168);
  *(_QWORD *)(v6 - 184) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, v12);
  *(_QWORD *)(v6 - 176) = v14;
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v6 - 184);
  *(_QWORD *)(v6 - 200) = v16;
  *(_QWORD *)(v6 - 192) = v17;
  v18 = MEMORY[0x18D75FFDC](v10, v8, v6 - 200);
  *(_QWORD *)(v6 - 120) = *(_QWORD *)(v6 - 328);
  *(_QWORD *)(v6 - 112) = v8;
  *(_QWORD *)(v6 - 104) = v1;
  *(_QWORD *)(v6 - 96) = v18;
  type metadata accessor for ToolbarReader();
}

void sub_1878EE018(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;

  v3 = lazy protocol witness table accessor for type EnableInferredToolbar and conformance EnableInferredToolbar();
  *(_QWORD *)(v1 - 120) = &type metadata for EnableInferredToolbar;
  *(_QWORD *)(v1 - 112) = a1;
  *(_QWORD *)(v1 - 104) = *(_QWORD *)(v1 - 320);
  *(_QWORD *)(v1 - 96) = v3;
  type metadata accessor for StaticIf();
}

void sub_1878EE048(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v6, v7);
  *(_QWORD *)(v5 - 240) = v2;
  *(_QWORD *)(v5 - 232) = v3;
  *(_QWORD *)(v5 - 224) = *(_QWORD *)(v5 - 304);
  *(_QWORD *)(v5 - 272) = v2;
  *(_QWORD *)(v5 - 264) = v3;
  StaticIf<>.init(_:then:else:)(v4, (void (*)(void))partial apply for closure #1 in InferredToolbarModifier.body(content:));
}

uint64_t sub_1878EE100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v6 - 216) = v2;
  *(_QWORD *)(v6 - 208) = v3;
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v0, v6 - 216);
  static ViewBuilder.buildExpression<A>(_:)(v4, v0, v7);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  v8(v4, v0);
  static ViewBuilder.buildBlock<A>(_:)(v1, v0, *(_QWORD *)(v6 - 296));
  return v8(v1, v0);
}

void closure #1 in InferredToolbarModifier.body(content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  ValueMetadata *v22;
  uint64_t v23;
  _UNKNOWN **v24;

  v18 = a1;
  v19 = a5;
  v7 = type metadata accessor for InferredToolbarModifier(0, a2, a3, a4);
  v16 = *(_QWORD *)(v7 - 8);
  v15[5] = v7;
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x1E0C80A78](v7, v8);
  v15[7] = (char *)v15 - v9;
  v15[6] = *(_QWORD *)(a2 - 8);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v20 = (char *)v15 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarModifier<A>, v7, v12);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for InferredToolbarModifier.OnScrollStateChange(255, a2, a3, v14);
  type metadata accessor for ModifiedContent();
  v21 = a2;
  v22 = &type metadata for TopToolbarEdges;
  v15[4] = a2;
  v23 = a3;
  v24 = &protocol witness table for TopToolbarEdges;
  type metadata accessor for EdgesPredicate();
}

void sub_1878EE2A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(255);
  v4 = v3;
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EdgesPredicate<A, B>, a1);
  *(_QWORD *)(v1 - 120) = a1;
  *(_QWORD *)(v1 - 112) = v4;
  *(_QWORD *)(v1 - 104) = MEMORY[0x1E0CE1E98];
  *(_QWORD *)(v1 - 96) = v5;
  type metadata accessor for StaticIf();
}

void sub_1878EE2E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for ModifiedContent();
  *(_QWORD *)(v2 - 120) = v1;
  *(_QWORD *)(v2 - 112) = &type metadata for BottomToolbarEdges;
  *(_QWORD *)(v2 - 104) = v0;
  *(_QWORD *)(v2 - 96) = &protocol witness table for BottomToolbarEdges;
  *(_QWORD *)(v2 - 304) = v0;
  type metadata accessor for EdgesPredicate();
}

void sub_1878EE328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(255);
  v6 = v5;
  v7 = MEMORY[0x18D75FFDC](v2, a1);
  *(_QWORD *)(v3 - 120) = a1;
  *(_QWORD *)(v3 - 112) = v6;
  *(_QWORD *)(v3 - 104) = v1;
  *(_QWORD *)(v3 - 96) = v7;
  type metadata accessor for StaticIf();
}

void sub_1878EE358(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v6 - 136) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v5);
  *(_QWORD *)(v6 - 128) = &protocol witness table for InferredToolbarModifier<A>.OnScrollStateChange;
  v9 = MEMORY[0x1E0CE2E70];
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v6 - 136);
  v11 = MEMORY[0x1E0CE4640];
  v12 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, MEMORY[0x1E0CE4640]);
  v13 = MEMORY[0x1E0CE1E88];
  *(_QWORD *)(v6 - 152) = v12;
  *(_QWORD *)(v6 - 144) = v13;
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v3, v6 - 152);
  *(_QWORD *)(v6 - 168) = v10;
  *(_QWORD *)(v6 - 160) = v14;
  v15 = MEMORY[0x18D75FFDC](v9, v4, v6 - 168);
  *(_QWORD *)(v6 - 184) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, v11);
  *(_QWORD *)(v6 - 176) = v13;
  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v6 - 184);
  *(_QWORD *)(v6 - 200) = v15;
  *(_QWORD *)(v6 - 192) = v16;
  *(_QWORD *)(v6 - 288) = v8;
  v17 = MEMORY[0x18D75FFDC](v9, v8, v6 - 200);
  *(_QWORD *)(v6 - 296) = v17;
  *(_QWORD *)(v6 - 120) = *(_QWORD *)(v6 - 272);
  *(_QWORD *)(v6 - 112) = v8;
  *(_QWORD *)(v6 - 104) = v2;
  *(_QWORD *)(v6 - 96) = v17;
  type metadata accessor for ToolbarReader();
}

void sub_1878EE470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v10 - 280) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&a9 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v16 = *(_QWORD *)(v10 - 224);
  (*(void (**)(_QWORD, uint64_t, uint64_t, double))(*(_QWORD *)(v10 - 256) + 16))(*(_QWORD *)(v10 - 208), v16, v9, v15);
  v17 = *(_QWORD *)(v10 - 248);
  v18 = *(_QWORD *)(v10 - 240);
  v19 = *(_QWORD *)(v10 - 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v16, v19);
  v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v21 = swift_allocObject();
  v22 = *(_QWORD *)(v10 - 304);
  *(_QWORD *)(v21 + 16) = v9;
  *(_QWORD *)(v21 + 24) = v22;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v18 + 32))(v21 + v20, v17, v19);
  ToolbarReader.init(edges:content:)(*(_QWORD *)(v10 - 208), v9, (uint64_t)v12);
}

uint64_t sub_1878EE57C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  static ViewBuilder.buildExpression<A>(_:)(v1, v0, &protocol witness table for ToolbarReader<A, B>);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 280) + 8);
  v4(v1, v0);
  static ViewBuilder.buildBlock<A>(_:)(v2, v0, *(_QWORD *)(v3 - 216));
  return v4(v2, v0);
}

void closure #1 in closure #1 in InferredToolbarModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD v20[198];
  uint64_t v21;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v19 = v8;
  v10 = v9;
  v11 = type metadata accessor for InferredToolbarModifier(0, v4, v2, v4);
  v12 = (uint64_t *)(v7 + *(int *)(v11 + 36));
  v14 = *v12;
  v13 = v12[1];
  v20[72] = v14;
  v20[73] = v13;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<InferredToolbarState>, (uint64_t)&type metadata for InferredToolbarState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarModifier<A>, v11);
  v15 = type metadata accessor for _ViewModifier_Content();
  v17 = type metadata accessor for InferredToolbarModifier.OnScrollStateChange(0, v5, v3, v16);
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v15);
  MEMORY[0x18D75B4AC](v20, &v21, v15, v17, v18);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  InferredToolbarModifier.topSafeArea(toolbar:)(v10, v19, v11);
}

void sub_1878EE764()
{
  unint64_t v0;
  unint64_t v1;

  memcpy(&STACK[0xA10], &STACK[0x1388], 0x198uLL);
  memcpy(&STACK[0xF98], &STACK[0x1388], 0x198uLL);
  type metadata accessor for ModifiedContent();
  STACK[0x620] = v1;
  STACK[0x628] = (unint64_t)&type metadata for TopToolbarEdges;
  STACK[0x630] = v0;
  STACK[0x638] = (unint64_t)&protocol witness table for TopToolbarEdges;
  type metadata accessor for EdgesPredicate();
}

void sub_1878EE7D0(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(255);
  v3 = v2;
  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EdgesPredicate<A, B>, a1);
  STACK[0x620] = a1;
  STACK[0x628] = v3;
  STACK[0x630] = MEMORY[0x1E0CE1E98];
  STACK[0x638] = v4;
  type metadata accessor for StaticIf();
}

void sub_1878EE814(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  va_list __src;

  va_start(__src, a12);
  STACK[0x610] = a3;
  STACK[0x618] = (unint64_t)&protocol witness table for InferredToolbarModifier<A>.OnScrollStateChange;
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, &STACK[0x610]);
  MEMORY[0x18D75B4AC](__src, &STACK[0xF98], v13, a1, v15);
  outlined release of StaticIf<EdgesPredicate<A, TopToolbarEdges>, _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>((uint64_t)&STACK[0xA10]);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  memcpy(&STACK[0xBA8], __src, 0x1B0uLL);
  memcpy(&STACK[0x460], __src, 0x1B0uLL);
  InferredToolbarModifier.bottomSafeArea(toolbar:)(a5, a8, v12);
}

void sub_1878EE8B8()
{
  unint64_t v0;
  unint64_t v1;

  memcpy(&STACK[0xD58], &STACK[0xF98], 0x240uLL);
  memcpy(&STACK[0x620], &STACK[0xF98], 0x240uLL);
  type metadata accessor for ModifiedContent();
  STACK[0x1388] = v0;
  STACK[0x1390] = (unint64_t)&type metadata for BottomToolbarEdges;
  STACK[0x1398] = v1;
  STACK[0x13A0] = (unint64_t)&protocol witness table for BottomToolbarEdges;
  type metadata accessor for EdgesPredicate();
}

void sub_1878EE91C(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(255);
  v3 = v2;
  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EdgesPredicate<A, B>, a1);
  STACK[0x1388] = a1;
  STACK[0x1390] = v3;
  STACK[0x1398] = MEMORY[0x1E0CE1E98];
  STACK[0x13A0] = v4;
  type metadata accessor for StaticIf();
}

uint64_t sub_1878EE96C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];
  _BYTE v17[1008];
  _QWORD v18[2];
  _QWORD v19[58];
  _BYTE v20[1416];
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[1008];
  _QWORD v24[139];

  v6 = MEMORY[0x1E0CE4640];
  v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, MEMORY[0x1E0CE4640]);
  v8 = MEMORY[0x1E0CE1E88];
  v19[0] = v7;
  v19[1] = MEMORY[0x1E0CE1E88];
  v18[0] = v4;
  v18[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v19);
  v9 = MEMORY[0x1E0CE2E70];
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v18);
  MEMORY[0x18D75B4AC](v24, v20, v3, a1, v10);
  outlined release of StaticIf<EdgesPredicate<A, BottomToolbarEdges>, _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>((uint64_t)&v22);
  outlined release of ModifiedContent<ModifiedContent<_ViewModifier_Content<InferredToolbarModifier<A>>, InferredToolbarModifier<A>.OnScrollStateChange>, StaticIf<EdgesPredicate<A, TopToolbarEdges>, _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>>((uint64_t)&v21);
  memcpy(v23, v24, sizeof(v23));
  memcpy(v17, v24, sizeof(v17));
  v11 = type metadata accessor for ModifiedContent();
  v16[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, v2, v6);
  v16[1] = v8;
  v15[0] = v10;
  v15[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v16);
  v12 = MEMORY[0x18D75FFDC](v9, v11, v15);
  static ViewBuilder.buildExpression<A>(_:)(v17, v11, v12);
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<InferredToolbarModifier<A>>, InferredToolbarModifier<A>.OnScrollStateChange>, StaticIf<EdgesPredicate<A, TopToolbarEdges>, _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>>, StaticIf<EdgesPred((uint64_t)v23);
  memcpy(v24, v20, 0x3F0uLL);
  memcpy(v17, v20, sizeof(v17));
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v17, v11, v14);
  return outlined release of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<InferredToolbarModifier<A>>, InferredToolbarModifier<A>.OnScrollStateChange>, StaticIf<EdgesPredicate<A, TopToolbarEdges>, _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>>, StaticIf<EdgesPred((uint64_t)v24);
}

void InferredToolbarModifier.topSafeArea(toolbar:)(int a1, int a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD __src[51];
  char v6;
  _BYTE __dst[376];

  InferredToolbarModifier.navigationBar(toolbar:)(a1, a2, a3, __src);
  memcpy(__dst, __src, sizeof(__dst));
  static HorizontalAlignment.center.getter();
  v6 = 0;
  v4 = *(_QWORD *)(a3 + 24);
  __src[0] = *(_QWORD *)(a3 + 16);
  __src[1] = &type metadata for TopToolbarEdges;
  __src[2] = v4;
  __src[3] = &protocol witness table for TopToolbarEdges;
  type metadata accessor for EdgesPredicate();
}

uint64_t sub_1878EEB78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[376];
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  _BYTE v14[376];

  memcpy(v7, v14, sizeof(v7));
  v8 = 1;
  v9 = 0;
  v10 = v13;
  v11 = 0;
  v12 = v2;
  type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(0);
  v5 = v4;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EdgesPredicate<A, B>, a1);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, MEMORY[0x1E0CE4640]);
  return StaticIf<>.init<>(_:then:)((uint64_t)v7, v5, v1);
}

void InferredToolbarModifier.bottomSafeArea(toolbar:)(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[576];
  uint64_t v7;
  ValueMetadata *v8;
  uint64_t v9;
  _UNKNOWN **v10;
  char v11;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  closure #1 in InferredToolbarModifier.bottomBar(toolbar:)(a1, a2, v3, v4, v5, v6);
  static HorizontalAlignment.center.getter();
  v11 = 0;
  v7 = v4;
  v8 = &type metadata for BottomToolbarEdges;
  v9 = v5;
  v10 = &protocol witness table for BottomToolbarEdges;
  type metadata accessor for EdgesPredicate();
}

uint64_t sub_1878EEC80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[35];
  char v9;
  char v10;
  uint64_t v11;

  v8[34] = xmmword_187BFE310;
  v9 = *(_BYTE *)(v3 - 56);
  v10 = 2;
  v11 = v2;
  type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(0);
  v6 = v5;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EdgesPredicate<A, B>, a1);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, MEMORY[0x1E0CE4640]);
  return StaticIf<>.init<>(_:then:)((uint64_t)v8, v6, v1);
}

uint64_t closure #2 in InferredToolbarModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for InferredToolbarModifier(255, a1, a2, a3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarModifier<A>, v5);
  v6 = type metadata accessor for _ViewModifier_Content();
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v6);
  v8 = static ViewBuilder.buildExpression<A>(_:)(v7, v6, v7);
  return static ViewBuilder.buildBlock<A>(_:)(v8, v6, a4);
}

uint64_t InferredToolbarModifier.bar<A>(toolbar:edge:content:)@<X0>(char a1@<W2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  double v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  unsigned __int8 v53;
  _QWORD v54[6];

  v45 = a6;
  v50 = a4;
  v46 = a3;
  v48 = a7;
  v49 = a2;
  type metadata accessor for ModifiedContent<Divider, _OpacityEffect>?();
  v44 = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  v9 = type metadata accessor for TupleView();
  v43 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v9);
  v10 = type metadata accessor for VStack();
  v47 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v40 - v16;
  v18 = a1 & 1;
  v19 = 3;
  if ((a1 & 1) == 0)
    v19 = 0;
  memset(v54, 0, 24);
  v54[3] = v19;
  v54[4] = 0;
  ToolbarProxy.appearance(in:)((uint64_t)v54, (uint64_t)v52);
  v20 = v53;
  swift_release();
  swift_release();
  swift_release();
  v21 = 1.0;
  v22 = v20 == 1;
  v23 = v50;
  if (v22)
    goto LABEL_7;
  v41 = v13;
  v24 = (uint64_t *)(v42 + *(int *)(v50 + 36));
  v26 = *v24;
  v25 = v24[1];
  v52[0] = v26;
  v52[1] = v25;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<InferredToolbarState>, (uint64_t)&type metadata for InferredToolbarState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  result = State.wrappedValue.getter();
  v28 = v51;
  if (*(_QWORD *)(v51 + 16))
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(v18);
    if ((v29 & 1) != 0)
    {
      v21 = *(double *)(*(_QWORD *)(v28 + 56) + 8 * result);
      swift_bridgeObjectRelease();
      v13 = v41;
LABEL_7:
      v30 = *(_QWORD *)(v23 + 16);
      v31 = *(_QWORD *)(v23 + 24);
      v32 = specialized InferredToolbarModifier.backgroundStyle(in:toolbar:opacity:)((uint64_t)v54, v21);
      MEMORY[0x1E0C80A78](v32, v33);
      v34 = v44;
      *(&v40 - 10) = v30;
      *(&v40 - 9) = v34;
      v35 = v45;
      *(&v40 - 8) = v31;
      *(&v40 - 7) = v35;
      *((_BYTE *)&v40 - 48) = v18;
      *((double *)&v40 - 5) = v21;
      v36 = v46;
      *(&v40 - 4) = v49;
      *(&v40 - 3) = v36;
      *(&v40 - 2) = v37;
      static HorizontalAlignment.center.getter();
      VStack.init(alignment:spacing:content:)();
      outlined destroy of ToolbarPlacement.Role((uint64_t)v54);
      swift_release();
      v38 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v10);
      static ViewBuilder.buildExpression<A>(_:)(v13, v10, v38);
      v39 = *(void (**)(char *, uint64_t))(v47 + 8);
      v39(v13, v10);
      static ViewBuilder.buildBlock<A>(_:)((uint64_t)v17, v10, v48);
      return ((uint64_t (*)(char *, uint64_t))v39)(v17, v10);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in InferredToolbarModifier.bar<A>(toolbar:edge:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(double)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X7>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v41;
  void (*v42)(double);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD v54[3];
  double v55;
  char v56;
  double v57;
  BOOL v58;
  uint64_t v59[3];
  _QWORD v60[2];
  _QWORD v61[2];
  _QWORD v62[3];

  v48 = a3;
  v42 = a2;
  v49 = a1;
  v50 = a6;
  v43 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ModifiedContent();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v41 - v14;
  v16 = type metadata accessor for ModifiedContent();
  v47 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v41 - v18;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
  v20 = type metadata accessor for ModifiedContent();
  v46 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v44 = (char *)&v41 - v27;
  v42(v26);
  static Alignment.center.getter();
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v11, a4);
  static Edge.Set.horizontal.getter();
  v62[0] = a5;
  v62[1] = MEMORY[0x1E0CE1A80];
  v28 = MEMORY[0x1E0CE2E70];
  v29 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v62);
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v15, v12);
  v59[0] = v48;
  static Edge.Set.all.getter();
  v61[0] = v29;
  v61[1] = MEMORY[0x1E0CE2BC0];
  v30 = MEMORY[0x18D75FFDC](v28, v16, v61);
  View.background<A>(_:ignoresSafeAreaEdges:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v16);
  v31 = lazy protocol witness table accessor for type _BackgroundStyleModifier<AnyShapeStyle> and conformance _BackgroundStyleModifier<A>();
  v60[0] = v30;
  v60[1] = v31;
  v32 = MEMORY[0x18D75FFDC](v28, v20, v60);
  v33 = v44;
  static ViewBuilder.buildExpression<A>(_:)(v23, v20, v32);
  v34 = v46;
  v35 = *(void (**)(char *, uint64_t))(v46 + 8);
  v35(v23, v20);
  v36 = v49 & 1;
  if ((v49 & 1) != 0)
    v37 = a7;
  else
    v37 = 0.0;
  if ((v49 & 1) != 0)
    v38 = 0.0;
  else
    v38 = a7;
  v57 = v37;
  v58 = (v49 & 1) == 0;
  v59[0] = (uint64_t)&v57;
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v23, v33, v20);
  v55 = v38;
  v56 = v36;
  v59[1] = (uint64_t)v23;
  v59[2] = (uint64_t)&v55;
  type metadata accessor for ModifiedContent<Divider, _OpacityEffect>?();
  v54[0] = v39;
  v54[1] = v20;
  v54[2] = v39;
  v51 = lazy protocol witness table accessor for type ModifiedContent<Divider, _OpacityEffect>? and conformance <A> A?();
  v52 = v32;
  v53 = v51;
  static ViewBuilder.buildBlock<each A>(_:)(v59, 3uLL, (uint64_t)v54);
  v35(v33, v20);
  return ((uint64_t (*)(char *, uint64_t))v35)(v23, v20);
}

void *InferredToolbarModifier.navigationBar(toolbar:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  void *result;
  _BYTE __src[368];

  closure #1 in InferredToolbarModifier.navigationBar(toolbar:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), __src);
  lazy protocol witness table accessor for type MoveTransition and conformance MoveTransition();
  v5 = AnyTransition.init<A>(_:)();
  result = memcpy(a4, __src, 0x170uLL);
  a4[46] = v5;
  return result;
}

void *closure #1 in InferredToolbarModifier.navigationBar(toolbar:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD v20[8];
  _OWORD v21[23];
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  _OWORD v27[23];

  memset(v27, 0, 40);
  v10 = ToolbarProxy.visibility(in:)((uint64_t)v27);
  v11 = outlined destroy of ToolbarPlacement.Role((uint64_t)v27);
  if (v10 == 2)
  {
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    *(_QWORD *)&v21[0] = v22;
    BYTE8(v21[0]) = v23;
    *(_QWORD *)&v21[1] = v24;
    BYTE8(v21[1]) = v25;
    v21[2] = v26;
    _s7SwiftUI19_ConditionalContentV7StorageOyAA6VStackVyAA9TupleViewVyAA08ModifiedD0VyAA7DividerVAA14_OpacityEffectVGSg_AKyAKyAKyAA6HStackVyAIyAA7ForEachVySayAA07ToolbarE0V5EntryVGAY2IDVAA07BarItemH0VG_AA6SpacerVA3_A5_A3_tGGAA12_FrameLayoutVGAA08_PaddingW0VGAA24_BackgroundStyleModifierVyAA08AnyShapeZ0VGGAQtGGAKyAA05EmptyH0VA9_G_GWOi0_((uint64_t)v21);
  }
  else
  {
    MEMORY[0x1E0C80A78](v11, v12);
    v20[4] = a1;
    v20[5] = v13;
    v20[6] = a2;
    v15 = type metadata accessor for InferredToolbarModifier(0, a3, a4, v14);
    type metadata accessor for HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>(0);
    v17 = v16;
    v18 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, MEMORY[0x1E0CE73D0]);
    InferredToolbarModifier.bar<A>(toolbar:edge:content:)(0, (uint64_t)partial apply for closure #1 in closure #1 in InferredToolbarModifier.navigationBar(toolbar:), (uint64_t)v20, v15, v17, v18, (uint64_t)v27);
    memcpy(v21, v27, 0x169uLL);
    _s7SwiftUI19_ConditionalContentV7StorageOyAA6VStackVyAA9TupleViewVyAA08ModifiedD0VyAA7DividerVAA14_OpacityEffectVGSg_AKyAKyAKyAA6HStackVyAIyAA7ForEachVySayAA07ToolbarE0V5EntryVGAY2IDVAA07BarItemH0VG_AA6SpacerVA3_A5_A3_tGGAA12_FrameLayoutVGAA08_PaddingW0VGAA24_BackgroundStyleModifierVyAA08AnyShapeZ0VGGAQtGGAKyAA05EmptyH0VA9_G_GWOi_((uint64_t)v21);
  }
  outlined init with take of TableCellFormula((uint64_t)v21, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage);
  return memcpy(a5, v27, 0x16AuLL);
}

double closure #1 in closure #1 in InferredToolbarModifier.navigationBar(toolbar:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;
  _OWORD v9[11];
  _BYTE v10[183];

  v2 = static VerticalAlignment.center.getter();
  closure #1 in closure #1 in closure #1 in InferredToolbarModifier.navigationBar(toolbar:)((uint64_t)v9);
  *(_OWORD *)&v10[71] = v9[4];
  *(_OWORD *)&v10[55] = v9[3];
  *(_OWORD *)&v10[119] = v9[7];
  *(_OWORD *)&v10[135] = v9[8];
  *(_OWORD *)&v10[151] = v9[9];
  *(_OWORD *)&v10[167] = v9[10];
  *(_OWORD *)&v10[87] = v9[5];
  *(_OWORD *)&v10[103] = v9[6];
  *(_OWORD *)&v10[7] = v9[0];
  *(_OWORD *)&v10[23] = v9[1];
  *(_OWORD *)&v10[39] = v9[2];
  v3 = *(_OWORD *)&v10[144];
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v10[128];
  *(_OWORD *)(a1 + 161) = v3;
  *(_OWORD *)(a1 + 177) = *(_OWORD *)&v10[160];
  v4 = *(_OWORD *)&v10[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v10[64];
  *(_OWORD *)(a1 + 97) = v4;
  v5 = *(_OWORD *)&v10[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v10[96];
  *(_OWORD *)(a1 + 129) = v5;
  v6 = *(_OWORD *)&v10[16];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)v10;
  *(_OWORD *)(a1 + 33) = v6;
  result = *(double *)&v10[32];
  v8 = *(_OWORD *)&v10[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v10[32];
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)&v10[175];
  *(_OWORD *)(a1 + 65) = v8;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in InferredToolbarModifier.navigationBar(toolbar:)@<X0>(uint64_t a1@<X8>)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  _OWORD v19[3];
  __int128 v20;
  _BYTE v21[24];
  uint64_t v22;

  memset(v19, 0, 24);
  *(_OWORD *)((char *)&v19[1] + 8) = xmmword_187C304D0;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v18 = -1;
  ToolbarProxy.callAsFunction(in:placement:showSeparator:)((uint64_t)v19, (uint64_t)&v15, 0);
  outlined destroy of AccessibilityTableContext?((uint64_t)&v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  outlined destroy of Toolbar.BarLocation((uint64_t)v19);
  v2 = *(_OWORD *)v21;
  v13 = v22;
  v14 = *(_QWORD *)&v21[16];
  v12 = v20;
  memset(v19, 0, 40);
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v18 = -1;
  ToolbarProxy.callAsFunction(in:placement:showSeparator:)((uint64_t)v19, (uint64_t)&v15, 0);
  outlined destroy of AccessibilityTableContext?((uint64_t)&v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  outlined destroy of Toolbar.BarLocation((uint64_t)v19);
  v3 = *(_QWORD *)&v21[16];
  v4 = v22;
  v10 = v20;
  v11 = *(_OWORD *)v21;
  memset(v19, 0, 24);
  *(_OWORD *)((char *)&v19[1] + 8) = xmmword_187C39070;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v18 = -1;
  ToolbarProxy.callAsFunction(in:placement:showSeparator:)((uint64_t)v19, (uint64_t)&v15, 0);
  outlined destroy of AccessibilityTableContext?((uint64_t)&v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  outlined destroy of Toolbar.BarLocation((uint64_t)v19);
  v5 = *(_QWORD *)v21;
  v6 = v22;
  v7 = *(_OWORD *)&v21[8];
  v8 = v20;
  LOBYTE(v20) = 1;
  LOBYTE(v15) = 1;
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 96) = v3;
  *(_QWORD *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 1;
  *(_OWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 152) = v7;
  *(_QWORD *)(a1 + 168) = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void *closure #1 in InferredToolbarModifier.bottomBar(toolbar:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[4];
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _OWORD v28[33];
  _OWORD v29[33];
  uint64_t v30;
  _QWORD v31[68];

  memset(v31, 0, 24);
  *(_OWORD *)&v31[3] = xmmword_187C304D0;
  v12 = ToolbarProxy.visibility(in:)((uint64_t)v31);
  v13 = outlined destroy of ToolbarPlacement.Role((uint64_t)v31);
  if (v12 == 2)
  {
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    *(_QWORD *)&v29[0] = *(_QWORD *)&v28[0];
    BYTE8(v29[0]) = BYTE8(v28[0]);
    *(_QWORD *)&v29[1] = *(_QWORD *)&v28[1];
    BYTE8(v29[1]) = BYTE8(v28[1]);
    v29[2] = v28[2];
    _s7SwiftUI19_ConditionalContentV7StorageOyAA08ModifiedD0VyAA6VStackVyAA9TupleViewVyAGyAA7DividerVAA14_OpacityEffectVGSg_AGyAGyAGyAGyAA6HStackVyAKyAA7ForEachVys10ArraySliceVyAA07ToolbarE0V5EntryVGA_2IDVAA07BarItemI0VG_AKyAA6SpacerV_AUySayA_GA2_A4_GA7_tGSgA5_tGGAA16_FlexFrameLayoutVGAA01_yZ0VGAA08_PaddingZ0VGAA24_BackgroundStyleModifierVyAA13AnyShapeStyleVGGAQtGGAA21_TraitWritingModifierVyAA18TransitionTraitKeyVGGAGyAA05EmptyI0VA18_G_GWOi0_((uint64_t)v29);
  }
  else
  {
    MEMORY[0x1E0C80A78](v13, v14);
    v23[2] = a4;
    v23[3] = a5;
    v24 = a1;
    v25 = v15;
    v26 = a2;
    v27 = a3;
    v17 = type metadata accessor for InferredToolbarModifier(0, a4, a5, v16);
    type metadata accessor for ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>(0);
    v19 = v18;
    v20 = lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    InferredToolbarModifier.bar<A>(toolbar:edge:content:)(1, (uint64_t)partial apply for closure #1 in closure #1 in InferredToolbarModifier.bottomBar(toolbar:), (uint64_t)v23, v17, v19, v20, (uint64_t)v31);
    memcpy(v28, v31, 0x209uLL);
    LOBYTE(v29[0]) = 2;
    lazy protocol witness table accessor for type MoveTransition and conformance MoveTransition();
    v21 = AnyTransition.init<A>(_:)();
    memcpy(v29, v28, sizeof(v29));
    v30 = v21;
    _s7SwiftUI19_ConditionalContentV7StorageOyAA08ModifiedD0VyAA6VStackVyAA9TupleViewVyAGyAA7DividerVAA14_OpacityEffectVGSg_AGyAGyAGyAGyAA6HStackVyAKyAA7ForEachVys10ArraySliceVyAA07ToolbarE0V5EntryVGA_2IDVAA07BarItemI0VG_AKyAA6SpacerV_AUySayA_GA2_A4_GA7_tGSgA5_tGGAA16_FlexFrameLayoutVGAA01_yZ0VGAA08_PaddingZ0VGAA24_BackgroundStyleModifierVyAA13AnyShapeStyleVGGAQtGGAA21_TraitWritingModifierVyAA18TransitionTraitKeyVGGAGyAA05EmptyI0VA18_G_GWOi_((uint64_t)v29);
  }
  outlined init with take of TableCellFormula((uint64_t)v29, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage);
  return memcpy(a6, v31, 0x219uLL);
}

void *closure #1 in closure #1 in InferredToolbarModifier.bottomBar(toolbar:)@<X0>(void *a1@<X8>)
{
  _QWORD v3[57];
  char v4;
  _BYTE __src[368];

  static VerticalAlignment.center.getter();
  closure #1 in closure #1 in closure #1 in InferredToolbarModifier.bottomBar(toolbar:)((uint64_t)v3);
  *(_OWORD *)((char *)&v3[48] + 7) = *(_OWORD *)&v3[20];
  *(_OWORD *)((char *)&v3[50] + 7) = *(_OWORD *)&v3[22];
  *(_OWORD *)((char *)&v3[52] + 7) = *(_OWORD *)&v3[24];
  *(_OWORD *)((char *)&v3[54] + 7) = *(_OWORD *)&v3[26];
  *(_OWORD *)((char *)&v3[40] + 7) = *(_OWORD *)&v3[12];
  *(_OWORD *)((char *)&v3[42] + 7) = *(_OWORD *)&v3[14];
  *(_OWORD *)((char *)&v3[44] + 7) = *(_OWORD *)&v3[16];
  *(_OWORD *)((char *)&v3[46] + 7) = *(_OWORD *)&v3[18];
  *(_OWORD *)((char *)&v3[32] + 7) = *(_OWORD *)&v3[4];
  *(_OWORD *)((char *)&v3[34] + 7) = *(_OWORD *)&v3[6];
  *(_OWORD *)((char *)&v3[36] + 7) = *(_OWORD *)&v3[8];
  *(_OWORD *)((char *)&v3[38] + 7) = *(_OWORD *)&v3[10];
  *(_OWORD *)((char *)&v3[28] + 7) = *(_OWORD *)v3;
  *(_OWORD *)((char *)&v3[30] + 7) = *(_OWORD *)&v3[2];
  v4 = 1;
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)__src, 0.0, 1, 0.0, 1);
  outlined release of TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>(v3);
  return memcpy(a1, __src, 0x168uLL);
}

uint64_t closure #1 in closure #1 in closure #1 in InferredToolbarModifier.bottomBar(toolbar:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  _BYTE v38[48];
  __int128 v39;
  uint64_t v40;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = xmmword_187C39040;
  v30 = 11;
  v31 = 0u;
  v32 = 0u;
  v33 = 2;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = xmmword_187C39040;
  *(_QWORD *)v38 = 11;
  memset(&v38[8], 0, 32);
  v38[40] = 2;
  v2 = ToolbarProxy.count(in:placement:)((uint64_t)&v26, (uint64_t)v38);
  outlined destroy of AccessibilityTableContext?((uint64_t)v38, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  result = outlined destroy of Toolbar.BarLocation((uint64_t)&v26);
  if (v2 < 2)
  {
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v2 = (unint64_t)v2 >> 1;
  }
  specialized ToolbarProxy.callAsFunction<A>(in:placement:range:)((uint64_t)&v34, (uint64_t)&v30, 0, v2);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v30);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v34);
  v22 = *(_OWORD *)v38;
  v20 = *(_QWORD *)&v38[24];
  v21 = *(_QWORD *)&v38[16];
  v24 = v39;
  v25 = *(_QWORD *)&v38[40];
  v23 = *((_QWORD *)&v39 + 1);
  v18 = v40;
  v19 = *(_QWORD *)&v38[32];
  v30 = 0;
  v31 = 0uLL;
  v32 = xmmword_187C39040;
  *(_QWORD *)v38 = 4;
  memset(&v38[8], 0, 32);
  v38[40] = 2;
  v4 = ToolbarProxy.count(in:placement:)((uint64_t)&v30, (uint64_t)v38);
  outlined destroy of AccessibilityTableContext?((uint64_t)v38, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v30);
  if (v4)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = xmmword_187C39040;
    v30 = 4;
    v31 = 0u;
    v32 = 0u;
    v33 = 2;
    ToolbarProxy.callAsFunction(in:placement:showSeparator:)((uint64_t)&v34, (uint64_t)&v30, 0);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v30, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    outlined destroy of Toolbar.BarLocation((uint64_t)&v34);
    v6 = *(_QWORD *)&v38[8];
    v5 = *(_QWORD *)v38;
    v7 = *(_QWORD *)&v38[24];
    v4 = *(_QWORD *)&v38[16];
    v8 = 1;
    v16 = 1;
    v17 = *(_QWORD *)&v38[40];
    v9 = *(_QWORD *)&v38[32];
  }
  else
  {
    v8 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v9 = 0;
    v17 = 0;
    v16 = 0;
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = xmmword_187C39040;
  v30 = 11;
  v31 = 0u;
  v32 = 0u;
  v33 = 2;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = xmmword_187C39040;
  *(_QWORD *)v38 = 11;
  memset(&v38[8], 0, 32);
  v38[40] = 2;
  v10 = ToolbarProxy.count(in:placement:)((uint64_t)&v26, (uint64_t)v38);
  outlined destroy of AccessibilityTableContext?((uint64_t)v38, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v26);
  if (v10 <= 1)
    v11 = 0;
  else
    v11 = (unint64_t)v10 >> 1;
  if (v10 <= 1)
    v12 = 0;
  else
    v12 = v10;
  specialized ToolbarProxy.callAsFunction<A>(in:placement:range:)((uint64_t)&v34, (uint64_t)&v30, v11, v12);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v30);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v34);
  v13 = *(_OWORD *)&v38[16];
  *(_OWORD *)(a1 + 152) = *(_OWORD *)v38;
  *(_OWORD *)(a1 + 168) = v13;
  v14 = v39;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v38[32];
  v15 = v40;
  *(_OWORD *)a1 = v22;
  *(_QWORD *)(a1 + 16) = v21;
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = v25;
  *(_QWORD *)(a1 + 48) = v24;
  *(_QWORD *)(a1 + 56) = v23;
  *(_QWORD *)(a1 + 64) = v18;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 120) = v9;
  *(_QWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = v16;
  *(_OWORD *)(a1 + 200) = v14;
  *(_QWORD *)(a1 + 216) = v15;
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  outlined copy of TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?(0, v8, v5);
  outlined consume of TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?(0, v8, v5);
  swift_release();
  swift_release();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t static InferredToolbarModifier.OnScrollStateChange._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(_BYTE *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_BYTE *__return_ptr, uint64_t, __int128 *);
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char v66;
  __int128 v67;
  _OWORD v68[18];
  _BYTE v69[257];
  uint64_t v70;
  int v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  unint64_t v77;
  int v78;
  uint64_t v79;

  v55 = a5;
  v56 = a6;
  v53 = a4;
  v54 = a3;
  v57 = a7;
  v79 = *MEMORY[0x1E0C80C00];
  LODWORD(v42) = *a1;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v9 = *((_DWORD *)a2 + 6);
  v10 = *((_DWORD *)a2 + 7);
  v11 = *((_DWORD *)a2 + 8);
  v12 = *((_DWORD *)a2 + 9);
  v13 = a2[5];
  v14 = a2[6];
  v15 = *((_DWORD *)a2 + 14);
  v16 = *((_DWORD *)a2 + 15);
  v17 = *((_DWORD *)a2 + 16);
  v18 = *((_DWORD *)a2 + 17);
  v19 = *((_DWORD *)a2 + 18);
  v20 = *((_DWORD *)a2 + 19);
  v21 = *((_DWORD *)a2 + 20);
  v70 = *a2;
  v50 = v10;
  v51 = v7;
  v71 = v7;
  v72 = v8;
  v61 = v11;
  v62 = v9;
  *(_QWORD *)&v73 = __PAIR64__(v10, v9);
  *((_QWORD *)&v73 + 1) = __PAIR64__(v12, v11);
  v74 = v13;
  v75 = v14;
  v59 = v16;
  v60 = v15;
  *(_QWORD *)&v76 = __PAIR64__(v16, v15);
  v47 = v18;
  v48 = v17;
  *((_QWORD *)&v76 + 1) = __PAIR64__(v18, v17);
  v45 = v20;
  v46 = v19;
  v77 = __PAIR64__(v20, v19);
  v44 = v21;
  v78 = v21;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollGeometryPreferenceKey>, MEMORY[0x1E0CE61C8], MEMORY[0x1E0CE61C0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<ScrollGeometryPreferenceKey> and conformance _AnyPreferenceKey<A>();
  v52 = v70;
  swift_retain();
  v58 = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  v63 = v14;
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  *(_QWORD *)&v67 = v70;
  DWORD2(v67) = v71;
  *(_QWORD *)&v68[0] = v8;
  *(_OWORD *)((char *)v68 + 8) = v73;
  *((_QWORD *)&v68[1] + 1) = v13;
  *(_QWORD *)&v68[2] = v14;
  *(_OWORD *)((char *)&v68[2] + 8) = v76;
  *((_QWORD *)&v68[3] + 1) = v77;
  LODWORD(v68[4]) = v78;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v22 = swift_bridgeObjectRetain();
  v54(v69, v22, &v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v49 = *(_QWORD *)v69;
  v67 = *(_OWORD *)v69;
  LODWORD(v53) = *(_DWORD *)&v69[12];
  LODWORD(v54) = *(_DWORD *)&v69[8];
  v23 = _ViewOutputs.subscript.getter();
  if ((v23 & 0x100000000) == 0)
  {
    LODWORD(v67) = v42;
    v42 = v23;
    type metadata accessor for InferredToolbarModifier.OnScrollStateChange(255, v55, v56, v24);
    type metadata accessor for _GraphValue();
    v40 = _GraphValue.value.getter();
    v41 = v12;
    *(_QWORD *)&v67 = v52;
    DWORD2(v67) = v51;
    *(_QWORD *)&v68[0] = v58;
    *((_QWORD *)&v68[0] + 1) = __PAIR64__(v50, v62);
    v43 = v13;
    *(_QWORD *)&v68[1] = __PAIR64__(v12, v61);
    *((_QWORD *)&v68[1] + 1) = v13;
    *(_QWORD *)&v68[2] = v63;
    *((_QWORD *)&v68[2] + 1) = __PAIR64__(v59, v60);
    *(_QWORD *)&v68[3] = __PAIR64__(v47, v48);
    *((_QWORD *)&v68[3] + 1) = __PAIR64__(v45, v46);
    LODWORD(v68[4]) = v44;
    v39 = _ViewInputs.position.getter();
    *(_QWORD *)&v67 = v52;
    DWORD2(v67) = v51;
    *(_QWORD *)&v68[0] = v58;
    *((_QWORD *)&v68[0] + 1) = __PAIR64__(v50, v62);
    *(_QWORD *)&v68[1] = __PAIR64__(v12, v61);
    *((_QWORD *)&v68[1] + 1) = v13;
    *(_QWORD *)&v68[2] = v63;
    *((_QWORD *)&v68[2] + 1) = __PAIR64__(v59, v60);
    *(_QWORD *)&v68[3] = __PAIR64__(v47, v48);
    *((_QWORD *)&v68[3] + 1) = __PAIR64__(v45, v46);
    LODWORD(v68[4]) = v44;
    v38 = _ViewInputs.size.getter();
    *(_QWORD *)&v67 = v52;
    DWORD2(v67) = v51;
    *(_QWORD *)&v68[0] = v58;
    *((_QWORD *)&v68[0] + 1) = __PAIR64__(v50, v62);
    *(_QWORD *)&v68[1] = __PAIR64__(v12, v61);
    *((_QWORD *)&v68[1] + 1) = v13;
    *(_QWORD *)&v68[2] = v63;
    *((_QWORD *)&v68[2] + 1) = __PAIR64__(v59, v60);
    *(_QWORD *)&v68[3] = __PAIR64__(v47, v48);
    *((_QWORD *)&v68[3] + 1) = __PAIR64__(v45, v46);
    LODWORD(v68[4]) = v44;
    v37 = _ViewInputs.transform.getter();
    *(_QWORD *)&v67 = v52;
    DWORD2(v67) = v51;
    *(_QWORD *)&v68[0] = v58;
    *((_QWORD *)&v68[0] + 1) = __PAIR64__(v50, v62);
    *(_QWORD *)&v68[1] = __PAIR64__(v12, v61);
    *((_QWORD *)&v68[1] + 1) = v13;
    *(_QWORD *)&v68[2] = v63;
    *((_QWORD *)&v68[2] + 1) = __PAIR64__(v59, v60);
    *(_QWORD *)&v68[3] = __PAIR64__(v47, v48);
    *((_QWORD *)&v68[3] + 1) = __PAIR64__(v45, v46);
    LODWORD(v68[4]) = v44;
    v25 = _ViewInputs.viewPhase.getter();
    UpdateCycleDetector.init()();
    InferredToolbarModifier.ScrollGeometryActionBinding.Candidates.init()(&v67);
    *(_OWORD *)&v69[196] = v68[11];
    *(_OWORD *)&v69[212] = v68[12];
    *(_OWORD *)&v69[228] = v68[13];
    *(_OWORD *)&v69[241] = *(_OWORD *)((char *)&v68[13] + 13);
    *(_OWORD *)&v69[132] = v68[7];
    *(_OWORD *)&v69[148] = v68[8];
    *(_OWORD *)&v69[164] = v68[9];
    *(_OWORD *)&v69[180] = v68[10];
    *(_OWORD *)&v69[68] = v68[3];
    *(_OWORD *)&v69[84] = v68[4];
    *(_OWORD *)&v69[100] = v68[5];
    *(_OWORD *)&v69[116] = v68[6];
    *(_OWORD *)&v69[4] = v67;
    *(_OWORD *)&v69[20] = v68[0];
    *(_OWORD *)&v69[36] = v68[1];
    *(_OWORD *)&v69[52] = v68[2];
    *(_WORD *)((char *)&v68[1] + 5) = v64;
    BYTE7(v68[1]) = BYTE2(v64);
    v26 = memcpy((char *)&v68[1] + 12, v69, 0x101uLL);
    *(_QWORD *)&v67 = __PAIR64__(v42, v40);
    *((_QWORD *)&v67 + 1) = __PAIR64__(v38, v39);
    *(_QWORD *)&v68[0] = __PAIR64__(v25, v37);
    *((_QWORD *)&v68[0] + 1) = v64;
    LODWORD(v68[1]) = v65;
    BYTE4(v68[1]) = v66;
    DWORD2(v68[1]) = 0;
    MEMORY[0x1E0C80A78](v26, v27);
    v35 = type metadata accessor for InferredToolbarModifier.ScrollGeometryActionBinding(0, v55, v56, v28);
    v36 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarModifier<A>.ScrollGeometryActionBinding, v35);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v67, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)&v34, v35, MEMORY[0x1E0DEDCE8], v29, MEMORY[0x1E0DEDD18], v30);
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v32 = v57;
  *v57 = v49;
  v33 = v53;
  *((_DWORD *)v32 + 2) = (_DWORD)v54;
  *((_DWORD *)v32 + 3) = v33;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance InferredToolbarModifier<A>.OnScrollStateChange@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(_BYTE *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  return static InferredToolbarModifier.OnScrollStateChange._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance InferredToolbarModifier<A>.OnScrollStateChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarModifier<A>.OnScrollStateChange, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

double InferredToolbarModifier.ScrollGeometryActionBinding.Candidates.init()@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  _BYTE v10[110];
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[6];
  _OWORD v19[2];

  _s7SwiftUI19ScrollGeometryStateVSgWOi0_((uint64_t)v10);
  outlined init with take of ScrollGeometryState?((uint64_t)v10, (uint64_t)v11);
  outlined init with take of ScrollGeometryState?((uint64_t)v10, (uint64_t)v18);
  v2 = v18[5];
  a1[12] = v18[4];
  a1[13] = v2;
  a1[14] = v19[0];
  *(_OWORD *)((char *)a1 + 237) = *(_OWORD *)((char *)v19 + 13);
  v3 = v18[1];
  a1[8] = v18[0];
  a1[9] = v3;
  v4 = v18[3];
  a1[10] = v18[2];
  a1[11] = v4;
  v5 = v15;
  a1[4] = v14;
  a1[5] = v5;
  v6 = v17;
  a1[6] = v16;
  a1[7] = v6;
  v7 = v11[1];
  *a1 = v11[0];
  a1[1] = v7;
  result = *(double *)&v12;
  v9 = v13;
  a1[2] = v12;
  a1[3] = v9;
  return result;
}

uint64_t InferredToolbarModifier.ScrollGeometryActionBinding.Candidates.init(top:bottom:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[128];
  _BYTE v7[128];

  outlined init with take of ScrollGeometryState?(a1, (uint64_t)v6);
  outlined init with take of ScrollGeometryState?(a2, (uint64_t)v7);
  outlined init with take of ScrollGeometryState?((uint64_t)v6, a3);
  return outlined init with take of ScrollGeometryState?((uint64_t)v7, a3 + 128);
}

uint64_t InferredToolbarModifier.ScrollGeometryActionBinding.modifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for InferredToolbarModifier.OnScrollStateChange(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v4 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t *InferredToolbarModifier.ScrollGeometryActionBinding.updateValue()(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  int v4;
  _DWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t *result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *Value;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[6];
  _OWORD v51[2];
  _OWORD v52[6];
  _OWORD v53[2];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[28];
  _BYTE v68[32];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[2];
  _OWORD v74[6];
  _OWORD v75[2];
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _OWORD v83[2];
  _BYTE v84[128];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[2];
  _BYTE v92[128];
  _BYTE v93[128];
  _BYTE v94[128];
  _BYTE v95[128];
  _BYTE v96[128];
  _BYTE v97[128];
  _DWORD __dst[76];
  _OWORD v99[20];

  v2 = (const void *)v1;
  memcpy(__dst, (const void *)v1, 0x12DuLL);
  v4 = __dst[10];
  if (v4 == *(_DWORD *)AGGraphGetValue() >> 1)
  {
    outlined init with take of ScrollGeometryState?((uint64_t)&__dst[44], (uint64_t)v96);
    v5 = &__dst[12];
  }
  else
  {
    *(_DWORD *)(v1 + 40) = *(_DWORD *)AGGraphGetValue() >> 1;
    *(_QWORD *)(v1 + 28) = 0xFFFFFFFFLL;
    *(_BYTE *)(v1 + 36) = 0;
    _s7SwiftUI19ScrollGeometryStateVSgWOi0_((uint64_t)v74);
    outlined init with take of ScrollGeometryState?((uint64_t)v74, (uint64_t)v97);
    outlined init with take of ScrollGeometryState?((uint64_t)v74, (uint64_t)v96);
    InferredToolbarModifier.ScrollGeometryActionBinding.Candidates.init(top:bottom:)((uint64_t)v97, (uint64_t)v96, (uint64_t)v99);
    v6 = v99[13];
    *(_OWORD *)(v1 + 240) = v99[12];
    *(_OWORD *)(v1 + 256) = v6;
    *(_OWORD *)(v1 + 272) = v99[14];
    *(_OWORD *)(v1 + 285) = *(_OWORD *)((char *)&v99[14] + 13);
    v7 = v99[9];
    *(_OWORD *)(v1 + 176) = v99[8];
    *(_OWORD *)(v1 + 192) = v7;
    v8 = v99[11];
    *(_OWORD *)(v1 + 208) = v99[10];
    *(_OWORD *)(v1 + 224) = v8;
    v9 = v99[5];
    *(_OWORD *)(v1 + 112) = v99[4];
    *(_OWORD *)(v1 + 128) = v9;
    v10 = v99[7];
    *(_OWORD *)(v1 + 144) = v99[6];
    *(_OWORD *)(v1 + 160) = v10;
    v11 = v99[1];
    *(_OWORD *)(v1 + 48) = v99[0];
    *(_OWORD *)(v1 + 64) = v11;
    v12 = v99[3];
    *(_OWORD *)(v1 + 80) = v99[2];
    *(_OWORD *)(v1 + 96) = v12;
    outlined init with take of ScrollGeometryState?((uint64_t)&v99[8], (uint64_t)v96);
    v5 = v99;
  }
  outlined init with take of ScrollGeometryState?((uint64_t)v5, (uint64_t)v97);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E0CE4958], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = (uint64_t *)AGGraphGetValue();
  if ((v14 & 1) == 0)
    return result;
  v15 = *result;
  swift_bridgeObjectRetain();
  if ((UpdateCycleDetector.dispatch(label:isDebug:)() & 1) == 0)
    return (uint64_t *)swift_bridgeObjectRelease();
  AGGraphClearUpdate();
  v17 = type metadata accessor for InferredToolbarModifier.ScrollGeometryActionBinding(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
  Value = (uint64_t *)AGGraphGetValue();
  v19 = *Value;
  v20 = Value[1];
  AGGraphSetUpdate();
  AGGraphClearUpdate();
  v21 = AGGraphGetValue();
  v49 = *(_OWORD *)v21;
  v22 = *(_QWORD *)(v21 + 16);
  v23 = *(_QWORD *)(v21 + 24);
  AGGraphSetUpdate();
  AGGraphClearUpdate();
  v24 = AGGraphGetValue();
  v25 = *(_QWORD *)v24;
  v48 = *(_OWORD *)(v24 + 8);
  v26 = *(_QWORD *)(v24 + 24);
  v27 = *(_QWORD *)(v24 + 32);
  swift_retain();
  AGGraphSetUpdate();
  v28 = static ScrollGeometryState.zero.getter();
  *(_QWORD *)&v99[0] = v19;
  *((_QWORD *)&v99[0] + 1) = v20;
  v29 = MEMORY[0x18D755E9C](v28);
  v31 = v30;
  v99[0] = v49;
  *(_QWORD *)&v99[1] = v22;
  *((_QWORD *)&v99[1] + 1) = v23;
  v32 = MEMORY[0x18D75BE3C]();
  *(_QWORD *)v68 = v25;
  *(_OWORD *)&v68[8] = v48;
  *(_QWORD *)&v68[24] = v26;
  *(_QWORD *)&v69 = v27;
  InferredToolbarModifier.ScrollGeometryActionBinding.findBestStates(in:position:size:transform:)(v15, (uint64_t *)v68, v74, v29, v31, v32, v33);
  swift_bridgeObjectRelease();
  outlined init with take of ScrollGeometryState?((uint64_t)v74, (uint64_t)v92);
  outlined init with take of ScrollGeometryState?((uint64_t)&v76, (uint64_t)v93);
  _s7SwiftUI19ScrollGeometryStateVSgWOi0_((uint64_t)v94);
  v34 = swift_allocObject();
  v35 = v34 + 16;
  outlined init with take of ScrollGeometryState?((uint64_t)v94, v34 + 16);
  outlined init with take of ScrollGeometryState?((uint64_t)v92, (uint64_t)v95);
  if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v95) == 1)
  {
    outlined init with take of ScrollGeometryState?((uint64_t)v97, (uint64_t)v99);
    if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v99) == 1)
    {
      outlined init with take of ScrollGeometryState?((uint64_t)v94, (uint64_t)v84);
      goto LABEL_18;
    }
    v81 = v89;
    v82 = v90;
    v83[0] = v91[0];
    *(_OWORD *)((char *)v83 + 12) = *(_OWORD *)((char *)v91 + 12);
    v77 = v85;
    v78 = v86;
    v79 = v87;
    v80 = v88;
    goto LABEL_16;
  }
  outlined init with take of ScrollGeometryState?((uint64_t)v92, (uint64_t)v74);
  outlined init with take of ScrollGeometryState?((uint64_t)v97, (uint64_t)v99);
  if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v99) == 1)
    goto LABEL_15;
  outlined init with take of ScrollGeometryState?((uint64_t)v97, (uint64_t)v68);
  v58 = v71;
  v59 = v72;
  v60[0] = v73[0];
  *(_OWORD *)((char *)v60 + 12) = *(_OWORD *)((char *)v73 + 12);
  v54 = *(_OWORD *)v68;
  v55 = *(_OWORD *)&v68[16];
  v56 = v69;
  v57 = v70;
  if ((MEMORY[0x18D759928](v74, &v54) & 1) == 0)
  {
LABEL_15:
    outlined init with take of ScrollGeometryState?((uint64_t)v92, (uint64_t)v74);
    v81 = v74[4];
    v82 = v74[5];
    v83[0] = v75[0];
    *(_OWORD *)((char *)v83 + 12) = *(_OWORD *)((char *)v75 + 12);
    v77 = v74[0];
    v78 = v74[1];
    v79 = v74[2];
    v80 = v74[3];
LABEL_16:
    v99[4] = v81;
    v99[5] = v82;
    v99[6] = v83[0];
    *(_OWORD *)((char *)&v99[6] + 12) = *(_OWORD *)((char *)v83 + 12);
    v99[0] = v77;
    v99[1] = v78;
    v99[2] = v79;
    v99[3] = v80;
    _s7SwiftUI19ScrollGeometryStateVSgWOi_((uint64_t)v99);
    v36 = v99;
    goto LABEL_17;
  }
  v36 = v94;
LABEL_17:
  outlined init with take of ScrollGeometryState?((uint64_t)v36, (uint64_t)v84);
LABEL_18:
  outlined init with take of ScrollGeometryState?((uint64_t)v84, (uint64_t)v74);
  outlined init with take of ScrollGeometryState?((uint64_t)v93, (uint64_t)v68);
  if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v68) == 1)
  {
    outlined init with take of ScrollGeometryState?((uint64_t)v96, (uint64_t)v99);
    if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v99) == 1)
      goto LABEL_25;
    v65 = v89;
    v66 = v90;
    *(_OWORD *)v67 = v91[0];
    *(_OWORD *)&v67[12] = *(_OWORD *)((char *)v91 + 12);
    v61 = v85;
    v62 = v86;
    v37 = v87;
    v38 = v88;
  }
  else
  {
    outlined init with take of ScrollGeometryState?((uint64_t)v93, (uint64_t)&v54);
    outlined init with take of ScrollGeometryState?((uint64_t)v96, (uint64_t)v99);
    if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v99) != 1)
    {
      outlined init with take of ScrollGeometryState?((uint64_t)v96, (uint64_t)v52);
      v50[4] = v52[4];
      v50[5] = v52[5];
      v51[0] = v53[0];
      *(_OWORD *)((char *)v51 + 12) = *(_OWORD *)((char *)v53 + 12);
      v50[0] = v52[0];
      v50[1] = v52[1];
      v50[2] = v52[2];
      v50[3] = v52[3];
      if ((MEMORY[0x18D759928](&v54, v50) & 1) != 0)
        goto LABEL_25;
    }
    outlined init with take of ScrollGeometryState?((uint64_t)v93, (uint64_t)&v54);
    v65 = v58;
    v66 = v59;
    *(_OWORD *)v67 = v60[0];
    *(_OWORD *)&v67[12] = *(_OWORD *)((char *)v60 + 12);
    v61 = v54;
    v62 = v55;
    v37 = v56;
    v38 = v57;
  }
  v63 = v37;
  v64 = v38;
  v99[4] = v65;
  v99[5] = v66;
  v99[6] = *(_OWORD *)v67;
  *(_OWORD *)((char *)&v99[6] + 12) = *(_OWORD *)&v67[12];
  v99[0] = v61;
  v99[1] = v62;
  v99[2] = v37;
  v99[3] = v38;
  _s7SwiftUI19ScrollGeometryStateVSgWOi_((uint64_t)v99);
  outlined init with take of ScrollGeometryState?((uint64_t)v99, v35);
LABEL_25:
  outlined init with take of ScrollGeometryState?((uint64_t)v84, (uint64_t)&v54);
  if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)&v54) != 1
    || (outlined init with take of ScrollGeometryState?(v35, (uint64_t)v52),
        outlined init with take of ScrollGeometryState?((uint64_t)v52, (uint64_t)v99),
        _s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v99) != 1))
  {
    AGGraphClearUpdate();
    memcpy(v99, v2, 0x12DuLL);
    v42 = InferredToolbarModifier.ScrollGeometryActionBinding.modifier.getter(v17, v39, v40, v41);
    v44 = v43;
    v46 = v45;
    AGGraphSetUpdate();
    v47 = (_QWORD *)swift_allocObject();
    outlined init with take of ScrollGeometryState?((uint64_t)v74, (uint64_t)(v47 + 2));
    v47[18] = v42;
    v47[19] = v44;
    v47[20] = v46;
    v47[21] = v34;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  swift_release();
  return (uint64_t *)swift_release();
}

unint64_t implicit closure #1 in InferredToolbarModifier.ScrollGeometryActionBinding.updateValue()()
{
  return 0xD000000000000012;
}

double InferredToolbarModifier.ScrollGeometryActionBinding.findBestStates(in:position:size:transform:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  uint64_t v34;
  uint64_t v35;
  CGFloat y;
  double MaxY;
  double v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  double result;
  __int128 v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[32];
  uint64_t v54;
  uint64_t v55;
  CGFloat v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[128];
  _QWORD v64[16];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  CGRect v86;
  CGRect rect;
  uint64_t v88;
  int v89;
  _OWORD v90[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD v97[6];
  _OWORD v98[2];
  CGRect v99;
  CGRect v100;

  *(double *)&v53[16] = a6;
  *(double *)&v53[24] = a7;
  *(double *)v53 = a4;
  *(double *)&v53[8] = a5;
  v52 = *a2;
  v50 = a2[2];
  v51 = a2[1];
  v48 = a2[4];
  v49 = a2[3];
  InferredToolbarModifier.ScrollGeometryActionBinding.Candidates.init()(v90);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    v9 = a1 + (v8 << 7) - 40;
    for (i = v8 - 1; ; --i)
    {
      v11 = *(_QWORD *)(v9 - 56);
      v12 = *(_QWORD *)(v9 - 48);
      v13 = *(_QWORD *)(v9 - 40);
      v14 = *(_QWORD *)(v9 - 32);
      v15 = *(_QWORD *)(v9 - 24);
      v16 = *(_QWORD *)(v9 - 16);
      v17 = *(_QWORD *)(v9 - 8);
      v18 = *(_QWORD *)v9;
      v19 = *(_QWORD *)(v9 + 8);
      v20 = *(_QWORD *)(v9 + 16);
      v21 = *(_QWORD *)(v9 + 24);
      v22 = *(_QWORD *)(v9 + 32);
      v23 = *(_QWORD *)(v9 + 40);
      v24 = *(_QWORD *)(v9 + 48);
      v88 = *(_QWORD *)(v9 + 56);
      v89 = *(_DWORD *)(v9 + 64);
      v70 = v11;
      v71 = v12;
      v72 = v13;
      v73 = v14;
      v74 = v15;
      v75 = v16;
      v76 = v17;
      v77 = v18;
      v61 = v20;
      v62 = v19;
      v78 = v19;
      v79 = v20;
      v59 = v22;
      v60 = v21;
      v80 = v21;
      v81 = v22;
      v57 = v24;
      v58 = v23;
      v82 = v23;
      v83 = v24;
      v84 = *(_QWORD *)(v9 + 56);
      v85 = *(_DWORD *)(v9 + 64);
      ScrollGeometryState.transform.getter();
      v25 = v65;
      if (v65 != 1)
      {
        v26 = v66;
        v27 = v67;
        v28 = v68;
        v29 = v69;
        rect = *(CGRect *)v53;
        hostingViewCoordinateSpace.getter();
        v70 = v64[0];
        LOBYTE(v75) = 1;
        v65 = v52;
        v66 = v51;
        v67 = v50;
        v68 = v49;
        v69 = v48;
        CGRect.convert(to:transform:)();
        outlined destroy of CoordinateSpace((uint64_t)&v70);
        v70 = v11;
        v71 = v12;
        v72 = v13;
        v73 = v14;
        v74 = v15;
        v75 = v16;
        v76 = v17;
        v77 = v18;
        v78 = v62;
        v79 = v61;
        v80 = v60;
        v81 = v59;
        v82 = v58;
        v83 = v57;
        ScrollGeometry.bounds.getter();
        v86.origin.x = v30;
        v86.origin.y = v31;
        v86.size.width = v32;
        v86.size.height = v33;
        hostingViewCoordinateSpace.getter();
        v70 = v64[0];
        LOBYTE(v75) = 1;
        v65 = v25;
        v66 = v26;
        v67 = v27;
        v68 = v28;
        v69 = v29;
        CGRect.convert(to:transform:)();
        outlined destroy of CoordinateSpace((uint64_t)&v70);
        v34 = v18;
        v35 = v13;
        y = rect.origin.y;
        v56 = v86.origin.y;
        v54 = v34;
        if (rect.origin.y == v86.origin.y)
        {
          v70 = v11;
          v71 = v12;
          v72 = v35;
          v73 = v14;
          v74 = v15;
          v75 = v16;
          v76 = v17;
          v77 = v34;
          v78 = v62;
          v79 = v61;
          v80 = v60;
          v81 = v59;
          v82 = v58;
          v83 = v57;
          v84 = v88;
          v85 = v89;
          _s7SwiftUI19ScrollGeometryStateVSgWOi_((uint64_t)&v70);
          outlined init with take of ScrollGeometryState?((uint64_t)&v70, (uint64_t)v90);
        }
        v55 = v17;
        v99.origin.x = rect.origin.x;
        v99.size.width = rect.size.width;
        v99.size.height = rect.size.height;
        v99.origin.y = y;
        MaxY = CGRectGetMaxY(v99);
        v100.origin.x = v86.origin.x;
        v100.size.width = v86.size.width;
        v100.size.height = v86.size.height;
        v100.origin.y = v56;
        v38 = CGRectGetMaxY(v100);
        outlined consume of Transaction?(v25);
        if (MaxY == v38)
        {
          v70 = v11;
          v71 = v12;
          v72 = v35;
          v73 = v14;
          v74 = v15;
          v75 = v16;
          v76 = v55;
          v77 = v54;
          v78 = v62;
          v79 = v61;
          v80 = v60;
          v81 = v59;
          v82 = v58;
          v83 = v57;
          v84 = v88;
          v85 = v89;
          _s7SwiftUI19ScrollGeometryStateVSgWOi_((uint64_t)&v70);
          outlined init with take of ScrollGeometryState?((uint64_t)&v70, (uint64_t)v97);
        }
        outlined init with take of ScrollGeometryState?((uint64_t)v90, (uint64_t)&v65);
        outlined init with take of ScrollGeometryState?((uint64_t)&v65, (uint64_t)&v70);
        if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)&v70) != 1)
        {
          outlined init with take of ScrollGeometryState?((uint64_t)v97, (uint64_t)v63);
          outlined init with take of ScrollGeometryState?((uint64_t)v63, (uint64_t)v64);
          if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v64) != 1)
            break;
        }
      }
      if (!i)
        break;
      v9 -= 128;
    }
    swift_bridgeObjectRelease();
  }
  v39 = v97[5];
  a3[12] = v97[4];
  a3[13] = v39;
  a3[14] = v98[0];
  *(_OWORD *)((char *)a3 + 237) = *(_OWORD *)((char *)v98 + 13);
  v40 = v97[1];
  a3[8] = v97[0];
  a3[9] = v40;
  v41 = v97[3];
  a3[10] = v97[2];
  a3[11] = v41;
  v42 = v94;
  a3[4] = v93;
  a3[5] = v42;
  v43 = v96;
  a3[6] = v95;
  a3[7] = v43;
  v44 = v90[1];
  *a3 = v90[0];
  a3[1] = v44;
  result = *(double *)&v91;
  v46 = v92;
  a3[2] = v91;
  a3[3] = v46;
  return result;
}

uint64_t specialized closure #5 in InferredToolbarModifier.ScrollGeometryActionBinding.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _OWORD v11[7];
  _QWORD v12[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[8];

  v8 = a5 + 16;
  outlined init with take of ScrollGeometryState?(a1, (uint64_t)v20);
  if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v20) != 1)
  {
    v17 = v20[4];
    v18 = v20[5];
    v19 = v20[6];
    v13 = v20[0];
    v14 = v20[1];
    v15 = v20[2];
    v16 = v20[3];
    v12[0] = a2;
    v12[1] = a3;
    v12[2] = a4;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<InferredToolbarState>, (uint64_t)&type metadata for InferredToolbarState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](v11);
    InferredToolbarState.update(edge:to:)(0);
    v12[0] = *(_QWORD *)&v11[0];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  outlined init with take of ScrollGeometryState?(v8, (uint64_t)v12);
  outlined init with take of ScrollGeometryState?((uint64_t)v12, (uint64_t)&v13);
  result = _s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)&v13);
  if ((_DWORD)result != 1)
  {
    v11[0] = v13;
    v11[1] = v14;
    v11[2] = v15;
    v11[3] = v16;
    v11[4] = v17;
    v11[5] = v18;
    v11[6] = v19;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<InferredToolbarState>, (uint64_t)&type metadata for InferredToolbarState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v10);
    InferredToolbarState.update(edge:to:)(1);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static InferredToolbarState.Storage.== infix(_:_:)()
{
  lazy protocol witness table accessor for type VerticalEdge and conformance VerticalEdge();
  return static Dictionary<>.== infix(_:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InferredToolbarState.Storage<A>()
{
  return static InferredToolbarState.Storage.== infix(_:_:)();
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InferredToolbarState(unint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

BOOL static EdgesPredicate.evaluate(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v7;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a2, a4);
  return ((*(unsigned __int8 (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5) & ~v7) == 0;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EdgesPredicate<A, B>(uint64_t a1, uint64_t *a2)
{
  return static EdgesPredicate.evaluate(inputs:)(a1, a2[2], a2[3], a2[4], a2[5]);
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance InferredToolbarUserDefaultFeature()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance InferredToolbarUserDefaultFeature()
{
  swift_beginAccess();
  return static InferredToolbarUserDefaultFeature.cachedValue;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance InferredToolbarUserDefaultFeature(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static InferredToolbarUserDefaultFeature.cachedValue = a1;
  return result;
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance InferredToolbarUserDefaultFeature())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance InferredToolbarUserDefaultFeature()
{
  lazy protocol witness table accessor for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature();
  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance InferredToolbarUserDefaultFeature()
{
  lazy protocol witness table accessor for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature();
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance InferredToolbarUserDefaultFeature@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;

  v4 = lazy protocol witness table accessor for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature();
  result = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a1, v4);
  *a2 = result & 1;
  return result;
}

uint64_t View.inferToolbar()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = specialized InferredToolbarState.init()();
  v6[1] = 0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for InferredToolbarModifier<AllToolbarEdges>, (uint64_t)&type metadata for AllToolbarEdges, (uint64_t)&protocol witness table for AllToolbarEdges, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for InferredToolbarModifier);
  MEMORY[0x18D75B4AC](v6, a1, v4, a2);
  return swift_bridgeObjectRelease();
}

BOOL specialized static EnableInferredToolbar.evaluate(inputs:)()
{
  unint64_t v0;
  int v2;

  if (((*(uint64_t (**)(void))(MEMORY[0x1E0CE4C20] + 16))() & 1) == 0)
    return 0;
  v0 = lazy protocol witness table accessor for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature();
  if (((*(uint64_t (**)(ValueMetadata *, unint64_t))(v0 + 16))(&type metadata for InferredToolbarUserDefaultFeature, v0) & 1) == 0)return 0;
  lazy protocol witness table accessor for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v2 == *MEMORY[0x1E0CFED28];
}

unint64_t specialized InferredToolbarState.init()()
{
  unint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  char v2;

  v0 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, isUniquelyReferenced_nonNull_native, 1.0);
  swift_bridgeObjectRelease();
  v2 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(1, v2, 1.0);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t type metadata accessor for InferredToolbarModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferredToolbarModifier);
}

uint64_t sub_1878F1D68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InferredToolbarModifier<AllToolbarEdges>, (uint64_t)&type metadata for AllToolbarEdges, (uint64_t)&protocol witness table for AllToolbarEdges, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for InferredToolbarModifier);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type InferredToolbarModifier<AllToolbarEdges> and conformance InferredToolbarModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type InferredToolbarModifier<AllToolbarEdges> and conformance InferredToolbarModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InferredToolbarModifier<AllToolbarEdges> and conformance InferredToolbarModifier<A>;
  if (!lazy protocol witness table cache variable for type InferredToolbarModifier<AllToolbarEdges> and conformance InferredToolbarModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InferredToolbarModifier<AllToolbarEdges>, (uint64_t)&type metadata for AllToolbarEdges, (uint64_t)&protocol witness table for AllToolbarEdges, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for InferredToolbarModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarModifier<AllToolbarEdges> and conformance InferredToolbarModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for InferredToolbarState()
{
  return &type metadata for InferredToolbarState;
}

ValueMetadata *type metadata accessor for AllToolbarEdges()
{
  return &type metadata for AllToolbarEdges;
}

uint64_t type metadata completion function for InferredToolbarModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for InferredToolbarModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v10[1] = v11[1];
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for InferredToolbarModifier(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for InferredToolbarModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for InferredToolbarModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[1] = v8[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for InferredToolbarModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRelease();
  v7[1] = v8[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InferredToolbarModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1878F21CC + 4 * byte_187C6AEE0[v10]))();
  }
}

void storeEnumTagSinglePayload for InferredToolbarModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1878F2344()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1878F23BCLL);
}

void sub_1878F234C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1878F2354);
  JUMPOUT(0x1878F23BCLL);
}

void sub_1878F2394()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1878F23BCLL);
}

void sub_1878F239C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1878F23BCLL);
}

uint64_t sub_1878F23A4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1878F23BCLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1878F23B8);
    JUMPOUT(0x1878F23B0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in InferredToolbarModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for InferredToolbarModifier.OnScrollStateChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferredToolbarModifier.OnScrollStateChange);
}

void type metadata accessor for EdgesPredicate()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(uint64_t a1)
{
  type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(a1, &lazy cache variable for type metadata for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>)
  {
    type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E0CE4568], MEMORY[0x1E0CE4558], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>);
  }
}

void type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>(uint64_t a1)
{
  type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>(a1, &lazy cache variable for type metadata for _UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, (void (*)(uint64_t))type metadata accessor for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>, (void (*)(void))lazy protocol witness table accessor for type _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>);
}

void type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4();
    v6 = type metadata accessor for _UnaryViewAdaptor();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>)
  {
    type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyView, _FrameLayout>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE1A90], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>);
  }
}

void type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(a1, &lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>, &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)> and conformance TupleView<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
}

void type metadata accessor for TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)(uint64_t a1)
{
  type metadata accessor for (ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)(a1, &lazy cache variable for type metadata for (ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?), (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>);
}

void type metadata accessor for ModifiedContent<Divider, _OpacityEffect>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Divider, _OpacityEffect>?)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<Divider, _OpacityEffect>, (uint64_t)&type metadata for Divider, MEMORY[0x1E0CE2BB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Divider, _OpacityEffect>?);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>);
  }
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, type metadata accessor for HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>);
}

void type metadata accessor for HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(a1, &lazy cache variable for type metadata for HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>, &lazy protocol witness table cache variable for type TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
}

void type metadata accessor for TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>))
  {
    type metadata accessor for ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>(255, &lazy cache variable for type metadata for ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, (uint64_t (*)(uint64_t))type metadata accessor for [ToolbarStorage.Entry], (unint64_t *)&lazy protocol witness table cache variable for type [ToolbarStorage.Entry] and conformance [A], MEMORY[0x1E0DEAF48]);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for (ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>));
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, MEMORY[0x1E0CE74B8]);
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<EmptyView, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<EmptyView, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<EmptyView, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<EmptyView, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyView, _FrameLayout>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE1A90], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = MEMORY[0x1E0CE7C28];
    v2[1] = MEMORY[0x1E0CE1A80];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<EmptyView, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>> and conformance _UnaryViewAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, MEMORY[0x1E0CE4108]);
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(uint64_t a1)
{
  type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(a1, &lazy cache variable for type metadata for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, &lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>, type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(void))
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>(255, a3, a4);
    a5();
    v7 = type metadata accessor for _InsetViewModifier();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>();
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>(uint64_t a1)
{
  type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>(a1, &lazy cache variable for type metadata for _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, (void (*)(uint64_t))type metadata accessor for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>, (void (*)(void))lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>);
}

void type metadata accessor for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>)
  {
    type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyView, _FrameLayout>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE1A90], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>);
  }
}

void type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>)
  {
    type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E0CE4568], MEMORY[0x1E0CE4558], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>);
  }
}

void type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(a1, &lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>, &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)> and conformance TupleView<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
}

void type metadata accessor for TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)(uint64_t a1)
{
  type metadata accessor for (ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)(a1, &lazy cache variable for type metadata for (ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?), (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>);
}

void type metadata accessor for (ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata3;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<Divider, _OpacityEffect>?();
    a3(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v6)
      atomic_store(TupleTypeMetadata3, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, type metadata accessor for ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>);
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, type metadata accessor for HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>);
}

void type metadata accessor for HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(a1, &lazy cache variable for type metadata for HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>, &lazy protocol witness table cache variable for type TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
}

void type metadata accessor for TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>))
  {
    type metadata accessor for ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>(255, &lazy cache variable for type metadata for ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, (uint64_t (*)(uint64_t))type metadata accessor for ArraySlice<ToolbarStorage.Entry>, &lazy protocol witness table cache variable for type ArraySlice<ToolbarStorage.Entry> and conformance ArraySlice<A>, MEMORY[0x1E0DEBF80]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>));
  }
}

void type metadata accessor for ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, a5);
    lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID();
    v9 = type metadata accessor for ForEach();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for ArraySlice<ToolbarStorage.Entry>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ArraySlice<ToolbarStorage.Entry>, type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEBF30]);
}

void type metadata accessor for TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>, (uint64_t (*)(uint64_t))type metadata accessor for (Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer))
  {
    type metadata accessor for ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>(255, &lazy cache variable for type metadata for ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, (uint64_t (*)(uint64_t))type metadata accessor for [ToolbarStorage.Entry], (unint64_t *)&lazy protocol witness table cache variable for type [ToolbarStorage.Entry] and conformance [A], MEMORY[0x1E0DEAF48]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer));
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<EmptyView, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, MEMORY[0x1E0CE74B8]);
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>, type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>> and conformance _UnaryViewAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, MEMORY[0x1E0CE4108]);
    v3[1] = lazy protocol witness table accessor for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnableInferredToolbar and conformance EnableInferredToolbar()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableInferredToolbar and conformance EnableInferredToolbar;
  if (!lazy protocol witness table cache variable for type EnableInferredToolbar and conformance EnableInferredToolbar)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableInferredToolbar, &type metadata for EnableInferredToolbar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableInferredToolbar and conformance EnableInferredToolbar);
  }
  return result;
}

void partial apply for closure #1 in InferredToolbarModifier.body(content:)(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  closure #1 in InferredToolbarModifier.body(content:)(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t partial apply for closure #2 in InferredToolbarModifier.body(content:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in InferredToolbarModifier.body(content:)(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_1878F31F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for InferredToolbarModifier(0, v5, *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + ((v6 + 32) & ~v6), v5);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in InferredToolbarModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for InferredToolbarModifier(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  closure #1 in closure #1 in InferredToolbarModifier.body(content:)(a1, a2);
}

uint64_t outlined release of StaticIf<EdgesPredicate<A, TopToolbarEdges>, _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v9 = *(_OWORD *)(a1 + 320);
  v10 = *(_OWORD *)(a1 + 336);
  v7 = *(_OWORD *)(a1 + 288);
  v8 = *(_OWORD *)(a1 + 304);
  v5 = *(_OWORD *)(a1 + 256);
  v6 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  v4 = *(_OWORD *)(a1 + 240);
  outlined consume of _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    *(_QWORD *)(a1 + 352),
    *(_BYTE *)(a1 + 360),
    *(_BYTE *)(a1 + 361));
  swift_release();
  return a1;
}

uint64_t outlined consume of _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,char a47)
{
  uint64_t result;

  if ((a47 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined release of StaticIf<EdgesPredicate<A, BottomToolbarEdges>, _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v17 = *(_OWORD *)(a1 + 464);
  v18 = *(_OWORD *)(a1 + 480);
  v15 = *(_OWORD *)(a1 + 432);
  v16 = *(_OWORD *)(a1 + 448);
  v13 = *(_OWORD *)(a1 + 400);
  v14 = *(_OWORD *)(a1 + 416);
  v11 = *(_OWORD *)(a1 + 368);
  v12 = *(_OWORD *)(a1 + 384);
  v9 = *(_OWORD *)(a1 + 336);
  v10 = *(_OWORD *)(a1 + 352);
  v7 = *(_OWORD *)(a1 + 304);
  v8 = *(_OWORD *)(a1 + 320);
  v5 = *(_OWORD *)(a1 + 272);
  v6 = *(_OWORD *)(a1 + 288);
  v3 = *(_OWORD *)(a1 + 240);
  v4 = *(_OWORD *)(a1 + 256);
  outlined consume of _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(_QWORD *)(a1 + 496));
  return a1;
}

uint64_t outlined consume of _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  uint64_t result;

  if ((a68 & 1) == 0)
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    outlined consume of TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?(a18, a19, a20);
    swift_release();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<_ViewModifier_Content<InferredToolbarModifier<A>>, InferredToolbarModifier<A>.OnScrollStateChange>, StaticIf<EdgesPredicate<A, TopToolbarEdges>, _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = *(_QWORD *)(a1 + 32);
  v31 = *(_QWORD *)(a1 + 24);
  v28 = *(_QWORD *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 64);
  v27 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v25 = *(_OWORD *)(a1 + 104);
  v26 = *(_OWORD *)(a1 + 88);
  v23 = *(_OWORD *)(a1 + 136);
  v24 = *(_OWORD *)(a1 + 120);
  v21 = *(_OWORD *)(a1 + 168);
  v22 = *(_OWORD *)(a1 + 152);
  v19 = *(_OWORD *)(a1 + 200);
  v20 = *(_OWORD *)(a1 + 184);
  v17 = *(_OWORD *)(a1 + 232);
  v18 = *(_OWORD *)(a1 + 216);
  v15 = *(_OWORD *)(a1 + 264);
  v16 = *(_OWORD *)(a1 + 248);
  v13 = *(_OWORD *)(a1 + 296);
  v14 = *(_OWORD *)(a1 + 280);
  v11 = *(_OWORD *)(a1 + 328);
  v12 = *(_OWORD *)(a1 + 312);
  v9 = *(_OWORD *)(a1 + 360);
  v10 = *(_OWORD *)(a1 + 344);
  v5 = *(_QWORD *)(a1 + 376);
  v6 = *(_BYTE *)(a1 + 384);
  v7 = *(_BYTE *)(a1 + 385);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(v31, v30, v29, v28, v27, v2, v3, v4, v26, *((uint64_t *)&v26 + 1), v25, *((uint64_t *)&v25 + 1), v24, *((uint64_t *)&v24 + 1), v23, *((uint64_t *)&v23 + 1), v22, *((uint64_t *)&v22 + 1), v21,
    *((uint64_t *)&v21 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v5,
    v6,
    v7);
  swift_release();
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<InferredToolbarModifier<A>>, InferredToolbarModifier<A>.OnScrollStateChange>, StaticIf<EdgesPredicate<A, TopToolbarEdges>, _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>>, StaticIf<EdgesPred(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v2 = *(_QWORD *)(a1 + 24);
  v54 = *(_QWORD *)(a1 + 40);
  v55 = *(_QWORD *)(a1 + 32);
  v52 = *(_QWORD *)(a1 + 56);
  v53 = *(_QWORD *)(a1 + 48);
  v51 = *(_QWORD *)(a1 + 64);
  v50 = *(_QWORD *)(a1 + 72);
  v49 = *(_QWORD *)(a1 + 80);
  v43 = *(_OWORD *)(a1 + 88);
  v41 = *(_OWORD *)(a1 + 104);
  v39 = *(_OWORD *)(a1 + 120);
  v37 = *(_OWORD *)(a1 + 136);
  v35 = *(_OWORD *)(a1 + 152);
  v32 = *(_OWORD *)(a1 + 184);
  v33 = *(_OWORD *)(a1 + 168);
  v30 = *(_OWORD *)(a1 + 216);
  v31 = *(_OWORD *)(a1 + 200);
  v28 = *(_OWORD *)(a1 + 248);
  v29 = *(_OWORD *)(a1 + 232);
  v26 = *(_OWORD *)(a1 + 280);
  v27 = *(_OWORD *)(a1 + 264);
  v25 = *(_OWORD *)(a1 + 296);
  v23 = *(_OWORD *)(a1 + 312);
  v21 = *(_OWORD *)(a1 + 328);
  v19 = *(_OWORD *)(a1 + 344);
  v16 = *(_OWORD *)(a1 + 360);
  v3 = *(_QWORD *)(a1 + 376);
  v4 = *(_BYTE *)(a1 + 384);
  v5 = *(_BYTE *)(a1 + 385);
  v66 = *(_QWORD *)(a1 + 440);
  v67 = *(_QWORD *)(a1 + 432);
  v64 = *(_QWORD *)(a1 + 456);
  v65 = *(_QWORD *)(a1 + 448);
  v62 = *(_QWORD *)(a1 + 472);
  v63 = *(_QWORD *)(a1 + 464);
  v60 = *(_QWORD *)(a1 + 488);
  v61 = *(_QWORD *)(a1 + 480);
  v58 = *(_OWORD *)(a1 + 512);
  v59 = *(_OWORD *)(a1 + 496);
  v56 = *(_OWORD *)(a1 + 544);
  v57 = *(_OWORD *)(a1 + 528);
  v48 = *(_OWORD *)(a1 + 560);
  v47 = *(_OWORD *)(a1 + 576);
  v46 = *(_OWORD *)(a1 + 592);
  v45 = *(_OWORD *)(a1 + 608);
  v44 = *(_OWORD *)(a1 + 624);
  v42 = *(_OWORD *)(a1 + 640);
  v40 = *(_OWORD *)(a1 + 656);
  v38 = *(_OWORD *)(a1 + 672);
  v36 = *(_OWORD *)(a1 + 688);
  v34 = *(_OWORD *)(a1 + 704);
  v24 = *(_OWORD *)(a1 + 720);
  v22 = *(_OWORD *)(a1 + 736);
  v20 = *(_OWORD *)(a1 + 752);
  v17 = *(_OWORD *)(a1 + 784);
  v18 = *(_OWORD *)(a1 + 768);
  v14 = *(_OWORD *)(a1 + 816);
  v15 = *(_OWORD *)(a1 + 800);
  v12 = *(_OWORD *)(a1 + 848);
  v13 = *(_OWORD *)(a1 + 832);
  v10 = *(_OWORD *)(a1 + 880);
  v11 = *(_OWORD *)(a1 + 864);
  v8 = *(_OWORD *)(a1 + 912);
  v9 = *(_OWORD *)(a1 + 896);
  v7 = *(_OWORD *)(a1 + 928);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(v2, v55, v54, v53, v52, v51, v50, v49, v43, *((uint64_t *)&v43 + 1), v41, *((uint64_t *)&v41 + 1), v39, *((uint64_t *)&v39 + 1), v37, *((uint64_t *)&v37 + 1), v35, *((uint64_t *)&v35 + 1), v33,
    *((uint64_t *)&v33 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v3,
    v4,
    v5);
  swift_release();
  outlined consume of _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(v67, v66, v65, v64, v63, v62, v61, v60, v59, *((uint64_t *)&v59 + 1), v58, *((uint64_t *)&v58 + 1), v57, *((uint64_t *)&v57 + 1), v56, *((uint64_t *)&v56 + 1), v48, *((uint64_t *)&v48 + 1), v47,
    *((uint64_t *)&v47 + 1),
    v46,
    *((uint64_t *)&v46 + 1),
    v45,
    *((uint64_t *)&v45 + 1),
    v44,
    *((uint64_t *)&v44 + 1),
    v42,
    *((uint64_t *)&v42 + 1),
    v40,
    *((uint64_t *)&v40 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v7);
  return a1;
}

void *partial apply for closure #1 in closure #1 in InferredToolbarModifier.bottomBar(toolbar:)@<X0>(void *a1@<X8>)
{
  return closure #1 in closure #1 in InferredToolbarModifier.bottomBar(toolbar:)(a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, MEMORY[0x1E0CE73D0]);
    v3[1] = MEMORY[0x1E0CE35E0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MoveTransition and conformance MoveTransition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition;
  if (!lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2808], MEMORY[0x1E0CE2810]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition);
  }
  return result;
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOyAA08ModifiedD0VyAA6VStackVyAA9TupleViewVyAGyAA7DividerVAA14_OpacityEffectVGSg_AGyAGyAGyAGyAA6HStackVyAKyAA7ForEachVys10ArraySliceVyAA07ToolbarE0V5EntryVGA_2IDVAA07BarItemI0VG_AKyAA6SpacerV_AUySayA_GA2_A4_GA7_tGSgA5_tGGAA16_FlexFrameLayoutVGAA01_yZ0VGAA08_PaddingZ0VGAA24_BackgroundStyleModifierVyAA13AnyShapeStyleVGGAQtGGAA21_TraitWritingModifierVyAA18TransitionTraitKeyVGGAGyAA05EmptyI0VA18_G_GWOi_(uint64_t result)
{
  *(_BYTE *)(result + 536) = 0;
  return result;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage)
  {
    type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyView, _FrameLayout>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE1A90], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for _ConditionalContent.Storage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage);
  }
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOyAA08ModifiedD0VyAA6VStackVyAA9TupleViewVyAGyAA7DividerVAA14_OpacityEffectVGSg_AGyAGyAGyAGyAA6HStackVyAKyAA7ForEachVys10ArraySliceVyAA07ToolbarE0V5EntryVGA_2IDVAA07BarItemI0VG_AKyAA6SpacerV_AUySayA_GA2_A4_GA7_tGSgA5_tGGAA16_FlexFrameLayoutVGAA01_yZ0VGAA08_PaddingZ0VGAA24_BackgroundStyleModifierVyAA13AnyShapeStyleVGGAQtGGAA21_TraitWritingModifierVyAA18TransitionTraitKeyVGGAGyAA05EmptyI0VA18_G_GWOi0_(uint64_t result)
{
  *(_BYTE *)(result + 536) = 1;
  return result;
}

uint64_t specialized InferredToolbarModifier.backgroundStyle(in:toolbar:opacity:)(uint64_t a1, double a2)
{
  uint64_t v3;
  float v4;
  float v5;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;

  ToolbarProxy.appearance(in:)(a1, (uint64_t)&v7);
  v3 = v10;
  swift_release();
  swift_release();
  if (v3)
  {
    v4 = a2;
    v7 = v3;
    v8 = v4;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], MEMORY[0x1E0CE4650]);
    lazy protocol witness table accessor for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>();
  }
  else
  {
    static Material.bar.getter();
    v5 = a2;
    v9 = v5;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _OpacityShapeStyle<Material>, MEMORY[0x1E0CE7890], MEMORY[0x1E0CE7880], MEMORY[0x1E0CE4650]);
    lazy protocol witness table accessor for type _OpacityShapeStyle<Material> and conformance _OpacityShapeStyle<A>();
  }
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t partial apply for closure #1 in InferredToolbarModifier.bar<A>(toolbar:edge:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in InferredToolbarModifier.bar<A>(toolbar:edge:content:)(*(unsigned __int8 *)(v1 + 48), *(void (**)(double))(v1 + 64), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 40), a1, *(double *)(v1 + 56));
}

unint64_t lazy protocol witness table accessor for type _BackgroundStyleModifier<AnyShapeStyle> and conformance _BackgroundStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _BackgroundStyleModifier<AnyShapeStyle> and conformance _BackgroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundStyleModifier<AnyShapeStyle> and conformance _BackgroundStyleModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5D28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundStyleModifier<AnyShapeStyle> and conformance _BackgroundStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Divider, _OpacityEffect>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type ModifiedContent<Divider, _OpacityEffect>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Divider, _OpacityEffect>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<Divider, _OpacityEffect>?();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<Divider, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Divider, _OpacityEffect>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Divider, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Divider, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Divider, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<Divider, _OpacityEffect>, (uint64_t)&type metadata for Divider, MEMORY[0x1E0CE2BB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for Divider;
    v2[1] = MEMORY[0x1E0CE2BA8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Divider, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

_QWORD *outlined release of TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[11];
  v4 = a1[10];
  v5 = a1[9];
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  outlined consume of TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?(v5, v4, v2);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined copy of TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for closure #1 in ToolbarProxy.callAsFunction<A>(in:placement:range:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in ToolbarProxy.callAsFunction<A>(in:placement:range:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD ***)(v2 + 24));
}

double partial apply for closure #1 in closure #1 in InferredToolbarModifier.navigationBar(toolbar:)@<D0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in InferredToolbarModifier.navigationBar(toolbar:)(a1);
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOyAA6VStackVyAA9TupleViewVyAA08ModifiedD0VyAA7DividerVAA14_OpacityEffectVGSg_AKyAKyAKyAA6HStackVyAIyAA7ForEachVySayAA07ToolbarE0V5EntryVGAY2IDVAA07BarItemH0VG_AA6SpacerVA3_A5_A3_tGGAA12_FrameLayoutVGAA08_PaddingW0VGAA24_BackgroundStyleModifierVyAA08AnyShapeZ0VGGAQtGGAKyAA05EmptyH0VA9_G_GWOi_(uint64_t result)
{
  *(_BYTE *)(result + 361) = 0;
  return result;
}

void type metadata accessor for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage)
  {
    type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyView, _FrameLayout>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE1A90], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for _ConditionalContent.Storage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage);
  }
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOyAA6VStackVyAA9TupleViewVyAA08ModifiedD0VyAA7DividerVAA14_OpacityEffectVGSg_AKyAKyAKyAA6HStackVyAIyAA7ForEachVySayAA07ToolbarE0V5EntryVGAY2IDVAA07BarItemH0VG_AA6SpacerVA3_A5_A3_tGGAA12_FrameLayoutVGAA08_PaddingW0VGAA24_BackgroundStyleModifierVyAA08AnyShapeZ0VGGAQtGGAKyAA05EmptyH0VA9_G_GWOi0_(uint64_t result)
{
  *(_BYTE *)(result + 361) = 1;
  return result;
}

ValueMetadata *type metadata accessor for BottomToolbarEdges()
{
  return &type metadata for BottomToolbarEdges;
}

ValueMetadata *type metadata accessor for TopToolbarEdges()
{
  return &type metadata for TopToolbarEdges;
}

ValueMetadata *type metadata accessor for EnableInferredToolbar()
{
  return &type metadata for EnableInferredToolbar;
}

uint64_t type metadata accessor for InferredToolbarState.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferredToolbarState.Storage);
}

void sub_1878F4250(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a1;
  v4 = a1[1];
  v6 = type metadata accessor for InferredToolbarModifier(255, *a1, v4, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarModifier<A>, v6);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for InferredToolbarModifier.OnScrollStateChange(255, v5, v4, v7);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EdgesPredicate();
}

void sub_1878F42F8(uint64_t a1)
{
  type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(255);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EdgesPredicate<A, B>, a1);
  type metadata accessor for StaticIf();
}

void sub_1878F4338()
{
  type metadata accessor for ModifiedContent();
  type metadata accessor for EdgesPredicate();
}

void sub_1878F4374(uint64_t a1)
{
  uint64_t v1;

  type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(255);
  MEMORY[0x18D75FFDC](v1, a1);
  type metadata accessor for StaticIf();
}

void sub_1878F43A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_UNKNOWN **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v31 = type metadata accessor for ModifiedContent();
  a21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v29);
  a22 = &protocol witness table for InferredToolbarModifier<A>.OnScrollStateChange;
  v32 = MEMORY[0x1E0CE2E70];
  v33 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v26, &a21);
  v34 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, MEMORY[0x1E0CE4640]);
  v35 = MEMORY[0x1E0CE1E88];
  a19 = v34;
  a20 = MEMORY[0x1E0CE1E88];
  v36 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v28, &a19);
  a17 = v33;
  a18 = v36;
  v37 = MEMORY[0x18D75FFDC](v32, v27, &a17);
  a15 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, MEMORY[0x1E0CE4640]);
  a16 = v35;
  v38 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, &a15);
  a13 = v37;
  a14 = v38;
  v39 = MEMORY[0x18D75FFDC](v32, v31, &a13);
  a24 = v31;
  a26 = v39;
  type metadata accessor for ToolbarReader();
}

void sub_1878F44A8()
{
  lazy protocol witness table accessor for type EnableInferredToolbar and conformance EnableInferredToolbar();
  type metadata accessor for StaticIf();
}

uint64_t sub_1878F44D0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[28];

  v3[0] = &protocol witness table for ToolbarReader<A, B>;
  v3[1] = v2;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v3);
}

_UNKNOWN **base witness table accessor for ViewModifier in InferredToolbarModifier<A>.OnScrollStateChange()
{
  return &protocol witness table for InferredToolbarModifier<A>.OnScrollStateChange;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in InferredToolbarUserDefaultFeature()
{
  return &protocol witness table for InferredToolbarUserDefaultFeature;
}

uint64_t type metadata accessor for InferredToolbarModifier.ScrollGeometryActionBinding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferredToolbarModifier.ScrollGeometryActionBinding);
}

double _s7SwiftUI19ScrollGeometryStateVSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 124) = 1;
  return result;
}

uint64_t outlined init with take of ScrollGeometryState?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E0CE4958], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *__swift_memcpy301_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x12DuLL);
}

uint64_t getEnumTagSinglePayload for InferredToolbarModifier.ScrollGeometryActionBinding(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 301))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 36);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InferredToolbarModifier.ScrollGeometryActionBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 300) = 0;
    *(_DWORD *)(result + 296) = 0;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 301) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 301) = 0;
    if (a2)
      *(_BYTE *)(result + 36) = a2 + 1;
  }
  return result;
}

void base witness table accessor for _AttributeBody in InferredToolbarModifier<A>.ScrollGeometryActionBinding()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_1878F48B4()
{
  return swift_deallocObject();
}

uint64_t _s7SwiftUI19ScrollGeometryStateVSgWOg(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 124))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s7SwiftUI19ScrollGeometryStateVSgWOi_(uint64_t result)
{
  *(_BYTE *)(result + 124) = 0;
  return result;
}

uint64_t sub_1878F48E8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #5 in InferredToolbarModifier.ScrollGeometryActionBinding.updateValue()()
{
  uint64_t *v0;

  return specialized closure #5 in InferredToolbarModifier.ScrollGeometryActionBinding.updateValue()((uint64_t)(v0 + 2), v0[18], v0[19], v0[20], v0[21]);
}

__n128 __swift_memcpy253_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_OWORD *)(a1 + 237) = *(__int128 *)((char *)a2 + 237);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for InferredToolbarModifier.ScrollGeometryActionBinding.Candidates(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 253))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for InferredToolbarModifier.ScrollGeometryActionBinding.Candidates(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 252) = 0;
    *(_DWORD *)(result + 248) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 253) = v3;
  return result;
}

uint64_t type metadata accessor for InferredToolbarModifier.ScrollGeometryActionBinding.Candidates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferredToolbarModifier.ScrollGeometryActionBinding.Candidates);
}

uint64_t static BackgroundTaskProtocol<>.runTasks(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  v9[5] = a3;
  v9[6] = a4;
  v9[4] = a2;
  v9[2] = a1;
  return swift_task_switch();
}

uint64_t _sScG7addTask8priority9operationyScPSg_xyYaYAcntF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v23[4];
  _QWORD v24[4];

  v5 = v4;
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v13);
  v14 = type metadata accessor for TaskPriority();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v13);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v16 = dispatch thunk of Actor.unownedExecutor.getter();
      v18 = v17;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v16 = 0;
  v18 = 0;
LABEL_6:
  v19 = *v5;
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = *(_QWORD *)(a4 + 16);
  v20[3] = a2;
  v20[4] = a3;
  v21 = (_QWORD *)(v18 | v16);
  if (v18 | v16)
  {
    v24[0] = 0;
    v24[1] = 0;
    v21 = v24;
    v24[2] = v16;
    v24[3] = v18;
  }
  v23[1] = 1;
  v23[2] = v21;
  v23[3] = v19;
  swift_task_create();
  return swift_release();
}

uint64_t static BackgroundTaskProtocol<>.runTasks(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  v9[5] = a3;
  v9[6] = a4;
  v9[3] = a2;
  v9[4] = a2;
  v9[2] = a1;
  return swift_task_switch();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  type metadata accessor for ()?();
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = type metadata accessor for TaskPriority();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a4;
  v10[3] = a2;
  v10[4] = a3;
  return swift_task_create();
}

uint64_t Scene.backgroundTask<A, B>(_:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return Scene.backgroundTask<A, B>(_:action:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))Scene.modifier<A>(_:));
}

uint64_t BackgroundTask.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
}

void static BackgroundTask.urlSession.getter(uint64_t (**a1)()@<X8>)
{
  a1[3] = (uint64_t (*)())&type metadata for UnidentifiedURLSessionBackgroundTask;
  a1[4] = (uint64_t (*)())&protocol witness table for UnidentifiedURLSessionBackgroundTask;
  *a1 = protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key;
  a1[1] = 0;
}

uint64_t static BackgroundTask.urlSession(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)(uint64_t a1, uint64_t a2)@<X8>)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  a3[3] = (uint64_t (*)(uint64_t, uint64_t))&type metadata for URLSessionBackgroundTask;
  a3[4] = (uint64_t (*)(uint64_t, uint64_t))&protocol witness table for URLSessionBackgroundTask;
  *a3 = partial apply for closure #1 in URLSessionBackgroundTask.init(identifier:);
  a3[1] = (uint64_t (*)(uint64_t, uint64_t))v6;
  return swift_bridgeObjectRetain();
}

uint64_t static BackgroundTask.urlSession(matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  a3[3] = &type metadata for UnidentifiedURLSessionBackgroundTask;
  a3[4] = &protocol witness table for UnidentifiedURLSessionBackgroundTask;
  *a3 = a1;
  a3[1] = a2;
  return swift_retain();
}

void static BackgroundTask.appRefresh.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t static BackgroundTask.appRefresh(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  a3[3] = &type metadata for AppRefreshBackgroundTask;
  a3[4] = &protocol witness table for AppRefreshBackgroundTask;
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t WidgetConfiguration.backgroundTask<A, B>(_:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return Scene.backgroundTask<A, B>(_:action:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))WidgetConfiguration.modifier<A>(_:));
}

uint64_t Scene.backgroundTask<A, B>(_:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(_BYTE *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[40];
  uint64_t v21;
  uint64_t v22;

  v16 = type metadata accessor for BackgroundTask(0, a5, a6, a4);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v20, a1, v16);
  v21 = a2;
  v22 = a3;
  v18 = type metadata accessor for BackgroundTaskModifier(0, a5, a6, v17);
  swift_retain();
  a8(v20, a4, v18, a7);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v20, v18);
}

uint64_t BackgroundTaskProtocol.predicate(_:)()
{
  return 1;
}

uint64_t static BackgroundTaskProtocol.currentTasks()(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[9];
  _QWORD v20[2];
  _QWORD v21[3];

  v19[6] = a1;
  v19[7] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = swift_getAssociatedTypeWitness();
  type metadata accessor for TaskActionsContainer(0, AssociatedTypeWitness, v5, v6);
  static Update.ensure<A>(_:)();
  v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  v20[1] = v7;
  type metadata accessor for TaskActionsContainer.ContainerEntry(255, AssociatedTypeWitness, v5, v8);
  v9 = type metadata accessor for Array();
  MEMORY[0x18D75CA24](v21, v20, v21[2], MEMORY[0x1E0DEA968], v9, MEMORY[0x1E0DEA978]);
  swift_bridgeObjectRelease();
  v10 = swift_bridgeObjectRelease();
  if (v21[0])
  {
    v20[0] = v21[0];
    MEMORY[0x1E0C80A78](v10, v11);
    v19[2] = a1;
    v19[3] = a2;
    v14 = (char *)type metadata accessor for BackgroundTaskEntry(0, a1, a2, v13);
    v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v9);
    v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in static BackgroundTaskProtocol.currentTasks(), (uint64_t)v19, v9, v14, MEMORY[0x1E0DEDCE8], v15, MEMORY[0x1E0DEDD18], v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for BackgroundTaskEntry(0, a1, a2, v12);
    return static Array._allocateUninitialized(_:)();
  }
  return v17;
}

uint64_t closure #1 in static BackgroundTaskProtocol.currentTasks()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (static AppGraph.shared)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v3 = swift_getAssociatedTypeWitness();
    v5 = type metadata accessor for TaskActionsContainer.Key(0, AssociatedTypeWitness, v3, v4);
    swift_retain();
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for TaskActionsContainer<A, B>.Key, v5);
    GraphHost.preferenceValue<A>(_:)();
    return swift_release();
  }
  else
  {
    v7 = swift_getAssociatedTypeWitness();
    v8 = swift_getAssociatedTypeWitness();
    result = TaskActionsContainer.init()(v7, v8, v9, v10);
    *a1 = result;
  }
  return result;
}

uint64_t TaskActionsContainer.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TaskActionsContainer.ContainerEntry(255, a1, a2, a4);
  type metadata accessor for Array();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t static BackgroundTaskProtocol.runTasks(_:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t static BackgroundTaskProtocol.runTasks(_:identifier:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v7;

  v1 = v0[5];
  v2 = v0[6];
  v3 = static BackgroundTaskProtocol.currentTasks()(v1, v2);
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  v0[7] = v4;
  v7 = (char *)&async function pointer to partial apply for closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
     + async function pointer to partial apply for closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  v5 = (_QWORD *)swift_task_alloc();
  v0[8] = v5;
  *v5 = v0;
  v5[1] = static BackgroundTaskProtocol.runTasks(_:identifier:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v7)(v0[2], v0[3], v0[4]);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t type metadata accessor for BackgroundTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BackgroundTask);
}

uint64_t type metadata accessor for BackgroundTaskModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BackgroundTaskModifier);
}

uint64_t closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Result();
  v6[9] = v7;
  v6[10] = *(_QWORD *)(v7 - 8);
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[13] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[14] = v9;
  v6[15] = *(_QWORD *)(v9 + 64);
  v6[16] = swift_task_alloc();
  v10 = swift_getAssociatedTypeWitness();
  v6[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[18] = v11;
  v6[19] = *(_QWORD *)(v11 + 64);
  v6[20] = swift_task_alloc();
  type metadata accessor for TaskPriority?(0);
  v6[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 104);
  v19 = v1;
  v20 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 32);
  v18 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 24);
  v10 = type metadata accessor for TaskPriority();
  v16 = *(_OWORD *)(v0 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v1, 1, 1, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v8, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v9, v7);
  v11 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v12 = (v17 + *(unsigned __int8 *)(v6 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_OWORD *)(v13 + 32) = v16;
  *(_QWORD *)(v13 + 48) = v18;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v13 + v11, v2, v5);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v13 + v12, v4, v7);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 176) = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v19, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), v13, v20);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v14;
  *v14 = v0;
  v14[1] = closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return Task.result.getter();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  int EnumCaseMultiPayload;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 16))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v2 = *(_QWORD *)(v0 + 96);
  if (EnumCaseMultiPayload == 1)
  {
    v3 = *(_QWORD *)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 80);
    (*(void (**)(void))(*(_QWORD *)(v0 + 56) + 64))();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 88);
    v6 = *(_QWORD *)(v0 + 64);
    v7 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v7, v5, v6);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[2] = a1;
  v8[3] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  swift_getAssociatedTypeWitness();
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  v5 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v2;
  *(_OWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 48) = v3;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[11] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[12] = v11;
  v7[13] = *(_QWORD *)(v11 + 64);
  v7[14] = swift_task_alloc();
  type metadata accessor for TaskPriority?(0);
  v7[15] = swift_task_alloc();
  v12 = swift_getAssociatedTypeWitness();
  v7[16] = v12;
  v7[17] = *(_QWORD *)(v12 - 8);
  v7[18] = swift_task_alloc();
  v14 = type metadata accessor for BackgroundTaskEntry(0, a6, a7, v13);
  v7[19] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v7[20] = v15;
  v7[21] = *(_QWORD *)(v15 + 64);
  v7[22] = swift_task_alloc();
  v7[23] = swift_task_alloc();
  v7[24] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Bool IsNativeType;
  void (*v8)(uint64_t, unint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(unint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 152);
  v2 = swift_bridgeObjectRetain();
  if (!MEMORY[0x18D75D06C](v2, v1))
  {
LABEL_12:
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(v0 + 72);
    v32 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v0 + 24) = **(_QWORD **)(v0 + 40);
    (*(void (**)(uint64_t, uint64_t))(v32 + 64))(v31, v32);
    v33 = (_QWORD *)swift_allocObject();
    *(_QWORD *)(v0 + 200) = v33;
    v33[2] = v31;
    v33[3] = v32;
    v33[4] = v31;
    v34 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 208) = v34;
    v34[2] = v31;
    v34[3] = v32;
    v34[4] = partial apply for implicit closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
    v34[5] = v33;
    v35 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v35;
    v36 = type metadata accessor for TaskGroup();
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0680], v36);
    *v35 = v0;
    v35[1] = closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
    return AsyncSequence.reduce<A>(_:_:)();
  }
  v3 = 0;
  v4 = *(_QWORD *)(v0 + 160);
  v37 = *(_QWORD *)(v0 + 168);
  v38 = *(_QWORD *)(v0 + 96);
  v45 = v4;
  v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 80) + 48);
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      v8 = *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16);
      v8(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 48)+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v3, *(_QWORD *)(v0 + 152));
      v9 = v3 + 1;
      if (__OFADD__(v3, 1))
        goto LABEL_11;
      goto LABEL_6;
    }
    result = _ArrayBuffer._getElementSlowPath(_:)();
    if (v37 != 8)
      break;
    v28 = result;
    v29 = *(_QWORD *)(v0 + 192);
    v30 = *(_QWORD *)(v0 + 152);
    *(_QWORD *)(v0 + 16) = v28;
    v8 = *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16);
    v8(v29, v0 + 16, v30);
    swift_unknownObjectRelease();
    v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
LABEL_6:
    v11 = *(_QWORD *)(v0 + 72);
    v10 = *(_QWORD *)(v0 + 80);
    v12 = *(_QWORD *)(v0 + 56);
    v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
    v13(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 152));
    if ((v46(v12, v11, v10) & 1) != 0)
    {
      v14 = *(_QWORD *)(v0 + 176);
      v40 = *(_QWORD *)(v0 + 184);
      v41 = v14;
      v15 = *(_QWORD *)(v0 + 152);
      v16 = *(_QWORD *)(v0 + 120);
      v44 = *(_QWORD *)(v0 + 168);
      v17 = *(_QWORD *)(v0 + 112);
      v42 = v17;
      v18 = *(_QWORD *)(v0 + 88);
      v39 = *(_QWORD *)(v0 + 64);
      v19 = type metadata accessor for TaskPriority();
      v43 = *(_OWORD *)(v0 + 72);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v16, 1, 1, v19);
      v8(v14, v40, v15);
      v20 = v17;
      v21 = v18;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v20, v39, v18);
      v22 = (*(unsigned __int8 *)(v45 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
      v23 = (v44 + *(unsigned __int8 *)(v38 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = 0;
      *(_OWORD *)(v24 + 32) = v43;
      v25 = v15;
      v4 = v45;
      v13(v24 + v22, v41, v25);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 32))(v24 + v23, v42, v21);
      v26 = type metadata accessor for TaskGroup();
      _sScG7addTask8priority9operationyScPSg_xyYaYAcntF(v16, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), v24, v26);
      outlined destroy of TaskPriority?(v16);
    }
    v5 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 48);
    (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v0 + 184), v5);
    ++v3;
    if (v9 == MEMORY[0x18D75D06C](v6, v5))
      goto LABEL_12;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v0 + 136);
  v1 = *(_QWORD *)(*v0 + 144);
  v3 = *(_QWORD *)(*v0 + 128);
  v5 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v9)(_QWORD, _QWORD);

  v5 = v4[3];
  v6 = (_QWORD *)(v5 + *(int *)(type metadata accessor for BackgroundTaskEntry(0, v4[5], v4[6], a4) + 36));
  v9 = (uint64_t (*)(_QWORD, _QWORD))(*(int *)*v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  v4[7] = v7;
  *v7 = v4;
  v7[1] = closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return v9(v4[2], v4[4]);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.BackgroundTaskProtocol.Response, @in_guaranteed A.BackgroundTaskProtocol.Response) -> (@out A.BackgroundTaskProtocol.Response)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;

  a4(a2, a3);
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.BackgroundTaskProtocol.Response, @in_guaranteed A.BackgroundTaskProtocol.Response) -> (@out A.BackgroundTaskProtocol.Response)(*(uint64_t (**)(void))(v4 + 8));
}

int *static BackgroundTaskProtocol.runTasks(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static BackgroundTaskProtocol.runTasks(from:)(a1, a2, a3, (uint64_t)partial apply for closure #1 in static BackgroundTaskProtocol.currentTasks(in:));
}

uint64_t closure #1 in static BackgroundTaskProtocol.currentTasks(in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD v22[4];
  _QWORD v23[2];
  _QWORD v24[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for TaskActionsContainer.Key(0, AssociatedTypeWitness, v7, v8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TaskActionsContainer<A, B>.Key, v9);
  WidgetBundleHost.readPreference<A>(_:)();
  v23[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  v23[1] = v10;
  type metadata accessor for TaskActionsContainer.ContainerEntry(255, AssociatedTypeWitness, v7, v11);
  v12 = type metadata accessor for Array();
  MEMORY[0x18D75CA24](v24, v23, v24[1], MEMORY[0x1E0DEA968], v12, MEMORY[0x1E0DEA978]);
  swift_bridgeObjectRelease();
  v13 = swift_bridgeObjectRelease();
  if (v24[0])
  {
    v23[0] = v24[0];
    MEMORY[0x1E0C80A78](v13, v14);
    v22[2] = a1;
    v22[3] = a2;
    v17 = (char *)type metadata accessor for BackgroundTaskEntry(0, a1, a2, v16);
    v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v12);
    v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in static BackgroundTaskProtocol.currentTasks(in:), (uint64_t)v22, v12, v17, MEMORY[0x1E0DEDCE8], v18, MEMORY[0x1E0DEDD18], v19);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for BackgroundTaskEntry(0, a1, a2, v15);
    result = static Array._allocateUninitialized(_:)();
    v20 = result;
  }
  *a3 = v20;
  return result;
}

uint64_t closure #2 in static BackgroundTaskProtocol.currentTasks()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v20[2];
  _BYTE v21[40];

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for BackgroundTask(0, AssociatedTypeWitness, v12, v13);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v20, a1, v14);
  outlined init with take of OptionalBinaryInteger(v20, (uint64_t)v21);
  type metadata accessor for BackgroundTaskProtocol();
  swift_dynamicCast();
  v16 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v10, a2);
  v18 = (_QWORD *)(a4 + *(int *)(type metadata accessor for BackgroundTaskEntry(0, a2, a3, v17) + 36));
  *v18 = v16;
  v18[1] = v15;
  return swift_retain();
}

int *static BackgroundTaskProtocol.runTasks<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static BackgroundTaskProtocol.runTasks(from:)(a1, a2, a3, (uint64_t)partial apply for closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:));
}

int *static BackgroundTaskProtocol.runTasks(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = static BackgroundTaskProtocol.currentTasks(in:)(a1, a2, a3, a4);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a2;
  v7[3] = a3;
  v7[4] = v6;
  return &async function pointer to partial apply for closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
}

uint64_t static BackgroundTaskProtocol.currentTasks(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for BackgroundTaskEntry(255, a2, a3, a4);
  type metadata accessor for Array();
  static Update.ensure<A>(_:)();
  return v5;
}

uint64_t closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD v26[7];
  _QWORD v27[2];
  _QWORD v28[3];

  v7 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for TaskActionsContainer.Key(0, AssociatedTypeWitness, v9, v10);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TaskActionsContainer<A, B>.Key, v11);
  WidgetHost.readPreference<A>(_:)();
  v27[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  v27[1] = v12;
  type metadata accessor for TaskActionsContainer.ContainerEntry(255, AssociatedTypeWitness, v9, v13);
  v14 = type metadata accessor for Array();
  MEMORY[0x18D75CA24](v28, v27, v28[2], MEMORY[0x1E0DEA968], v14, MEMORY[0x1E0DEA978]);
  swift_bridgeObjectRelease();
  v15 = swift_bridgeObjectRelease();
  if (v28[0])
  {
    v27[0] = v28[0];
    MEMORY[0x1E0C80A78](v15, v16);
    v18 = *(_QWORD *)(v7 + 80);
    v19 = *(_QWORD *)(v7 + 88);
    v26[2] = a2;
    v26[3] = v18;
    v26[4] = a3;
    v26[5] = v19;
    v21 = (char *)type metadata accessor for BackgroundTaskEntry(0, a2, a3, v20);
    v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v14);
    v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:), (uint64_t)v26, v14, v21, MEMORY[0x1E0DEDCE8], v22, MEMORY[0x1E0DEDD18], v23);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for BackgroundTaskEntry(0, a2, a3, v17);
    result = static Array._allocateUninitialized(_:)();
    v24 = result;
  }
  *a4 = v24;
  return result;
}

uint64_t closure #1 in closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v20[2];
  _BYTE v21[40];

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for BackgroundTask(0, AssociatedTypeWitness, v12, v13);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v20, a1, v14);
  outlined init with take of OptionalBinaryInteger(v20, (uint64_t)v21);
  type metadata accessor for BackgroundTaskProtocol();
  swift_dynamicCast();
  v16 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v10, a2);
  v18 = (_QWORD *)(a4 + *(int *)(type metadata accessor for BackgroundTaskEntry(0, a2, a3, v17) + 36));
  *v18 = v16;
  v18[1] = v15;
  return swift_retain();
}

Swift::Bool __swiftcall URLSessionBackgroundTask.predicate(_:)(Swift::String a1)
{
  uint64_t (**v1)(uint64_t, void *);

  return (*v1)(a1._countAndFlagsBits, a1._object) & 1;
}

uint64_t static URLSessionBackgroundTask.taskIdentifier.getter()
{
  return 0x69737365534C5255;
}

uint64_t protocol witness for static BackgroundTaskProtocol.taskIdentifier.getter in conformance URLSessionBackgroundTask()
{
  return 0x69737365534C5255;
}

uint64_t protocol witness for BackgroundTaskProtocol.predicate(_:) in conformance URLSessionBackgroundTask(_QWORD *a1)
{
  uint64_t (**v1)(_QWORD, _QWORD);

  return (*v1)(*a1, a1[1]) & 1;
}

uint64_t sub_1878F6BE4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in URLSessionBackgroundTask.init(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(v2 + 16) == a1 && *(_QWORD *)(v2 + 24) == a2)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t static UnidentifiedURLSessionBackgroundTask.taskIdentifier.getter()
{
  return 0xD000000000000016;
}

unint64_t protocol witness for static BackgroundTaskProtocol.taskIdentifier.getter in conformance UnidentifiedURLSessionBackgroundTask()
{
  return 0xD000000000000016;
}

uint64_t dispatch thunk of BackgroundTaskProtocol.register()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static BackgroundTaskProtocol.taskIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of BackgroundTaskProtocol.predicate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of static BackgroundTaskProtocol.reduce(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of static BackgroundTaskProtocol.defaultResponse.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

ValueMetadata *type metadata accessor for URLSessionBackgroundTask()
{
  return &type metadata for URLSessionBackgroundTask;
}

ValueMetadata *type metadata accessor for UnidentifiedURLSessionBackgroundTask()
{
  return &type metadata for UnidentifiedURLSessionBackgroundTask;
}

uint64_t sub_1878F6CA8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI5SceneRzs8SendableRd__sACRd_0_r_0_lAA15ModifiedContentVyxAA22BackgroundTaskModifierVyqd__qd_0_GGAaBHpxAaBHD1__AhA01_cI0HPyHCHCTm(a1, (uint64_t)&protocol witness table for BackgroundTaskModifier<A, B>, (uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>, a4);
}

uint64_t sub_1878F6CBC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI5SceneRzs8SendableRd__sACRd_0_r_0_lAA15ModifiedContentVyxAA22BackgroundTaskModifierVyqd__qd_0_GGAaBHpxAaBHD1__AhA01_cI0HPyHCHCTm(a1, (uint64_t)&protocol witness table for BackgroundTaskModifier<A, B>, (uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>, a4);
}

uint64_t get_witness_table_7SwiftUI5SceneRzs8SendableRd__sACRd_0_r_0_lAA15ModifiedContentVyxAA22BackgroundTaskModifierVyqd__qd_0_GGAaBHpxAaBHD1__AhA01_cI0HPyHCHCTm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v6 = a1[3];
  type metadata accessor for BackgroundTaskModifier(255, a1[1], a1[2], a4);
  v7 = type metadata accessor for ModifiedContent();
  v9[0] = v6;
  v9[1] = a2;
  return MEMORY[0x18D75FFDC](a3, v7, v9);
}

ValueMetadata *type metadata accessor for AppRefreshBackgroundTask()
{
  return &type metadata for AppRefreshBackgroundTask;
}

Swift::Void __swiftcall AppRefreshBackgroundTask.register()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  v2 = v1;
  v3 = v0;
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v3;
  v10[5] = v2;
  LODWORD(v3) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  swift_bridgeObjectRetain();
  if ((_DWORD)v3 == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v7);
    v11 = 0;
    v12 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (v10[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = dispatch thunk of Actor.unownedExecutor.getter();
      v12 = v13;
      swift_unknownObjectRelease();
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = &async function pointer to partial apply for closure #1 in AppRefreshBackgroundTask.register();
  *(_QWORD *)(v14 + 24) = v10;
  if (v12 | v11)
  {
    v15[0] = 0;
    v15[1] = 0;
    v15[2] = v11;
    v15[3] = v12;
  }
  swift_task_create();
  swift_release();
}

uint64_t closure #1 in AppRefreshBackgroundTask.register()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 64) = a4;
  *(_QWORD *)(v5 + 72) = a5;
  return swift_task_switch();
}

uint64_t closure #1 in AppRefreshBackgroundTask.register()()
{
  uint64_t v0;

  if (one-time initialization token for shared != -1)
    swift_once();
  *(_QWORD *)(v0 + 80) = static BGTaskSchedulerWrapper.shared;
  return swift_task_switch();
}

{
  _QWORD *v0;
  Swift::Int v1;
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  Swift::Int v11;

  v1 = v0[9];
  v2 = v0[8];
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  LOBYTE(v1) = specialized Set._Variant.insert(_:)(&v11, v2, v1);
  swift_endAccess();
  swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    v4 = v0[9];
    v3 = v0[10];
    v5 = v0[8];
    v6 = *(id *)(v3 + 112);
    v7 = (void *)MEMORY[0x18D75CC88](v5, v4);
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = v3;
    v8[3] = v5;
    v8[4] = v4;
    v0[6] = partial apply for closure #1 in BGTaskSchedulerWrapper.observeTask(_:);
    v0[7] = v8;
    v0[2] = MEMORY[0x1E0C809B0];
    v0[3] = 1107296256;
    v0[4] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v0[5] = &block_descriptor_70;
    v9 = _Block_copy(v0 + 2);
    swift_retain();
    swift_release();
    objc_msgSend(v6, sel_registerForTaskWithIdentifier_launchHandler_, v7, v9);
    _Block_release(v9);

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return ((uint64_t (*)(void))v0[1])();
}

void protocol witness for BackgroundTaskProtocol.register() in conformance AppRefreshBackgroundTask()
{
  AppRefreshBackgroundTask.register()();
}

uint64_t protocol witness for static BackgroundTaskProtocol.taskIdentifier.getter in conformance AppRefreshBackgroundTask()
{
  return 0x6572666552707041;
}

uint64_t protocol witness for BackgroundTaskProtocol.predicate(_:) in conformance AppRefreshBackgroundTask(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = a1[1];
  if (!v2)
    return 0;
  if (*a1 == *v1 && v2 == v1[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t BackgroundTaskModifier.Registration.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t Value;
  uint64_t v8;
  void (*v9)(_OWORD *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v21[3];
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for BackgroundTaskModifier(0, a2, a3, a4);
  Value = AGGraphGetValue();
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(void (**)(_OWORD *, uint64_t, uint64_t))(v8 + 16);
  v9(v23, Value, v6);
  v10 = v24;
  v11 = v25;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 40))(v10, v11);
  v14 = v13;
  v9(v21, (uint64_t)v23, v6);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)(v15 + 32) = v12;
  *(_QWORD *)(v15 + 40) = v14;
  v16 = v21[1];
  *(_OWORD *)(v15 + 48) = v21[0];
  *(_OWORD *)(v15 + 64) = v16;
  *(_OWORD *)(v15 + 80) = v21[2];
  *(_QWORD *)(v15 + 96) = v22;
  v18 = type metadata accessor for TaskActionsContainer.Key(0, a2, a3, v17);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TaskActionsContainer<A, B>.Key, v18);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v18);
  v19 = _PreferenceTransformModifier.init(key:transform:)();
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v23, v6);
  return v19;
}

uint64_t closure #1 in BackgroundTaskModifier.Registration.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  closure #1 in closure #1 in BackgroundTaskModifier.Registration.value.getter(a2, a3, a4, a5, a6);
  type metadata accessor for TaskActionsContainer.ContainerEntry(255, a5, a6, v8);
  type metadata accessor for Array();
  type metadata accessor for Dictionary();
  return Dictionary.merge(_:uniquingKeysWith:)();
}

uint64_t closure #1 in closure #1 in BackgroundTaskModifier.Registration.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _OWORD v22[2];
  uint64_t v23;

  type metadata accessor for TaskActionsContainer.ContainerEntry(255, a4, a5, a4);
  type metadata accessor for Array();
  swift_getTupleTypeMetadata2();
  type metadata accessor for _ContiguousArrayStorage();
  swift_initStackObject();
  static Array._adoptStorage(_:count:)();
  v11 = v10;
  *v10 = a1;
  v10[1] = a2;
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v12 = static Array._adoptStorage(_:count:)();
  v14 = v13;
  v16 = type metadata accessor for BackgroundTask(0, a4, a5, v15);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v22, a3, v16);
  v17 = *(_QWORD *)(a3 + 40);
  v18 = *(_QWORD *)(a3 + 48);
  v19 = v23;
  v20 = v22[1];
  *(_OWORD *)v14 = v22[0];
  *(_OWORD *)(v14 + 16) = v20;
  *(_QWORD *)(v14 + 32) = v19;
  *(_QWORD *)(v14 + 40) = v17;
  *(_QWORD *)(v14 + 48) = v18;
  _finalizeUninitializedArray<A>(_:)();
  v11[2] = v12;
  _finalizeUninitializedArray<A>(_:)();
  swift_retain();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t static TaskActionsContainer.Key.reduce(value:nextValue:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  a2();
  type metadata accessor for TaskActionsContainer.ContainerEntry(255, a4, a5, v7);
  type metadata accessor for Array();
  type metadata accessor for Dictionary();
  return Dictionary.merge(_:uniquingKeysWith:)();
}

uint64_t protocol witness for Rule.value.getter in conformance BackgroundTaskModifier<A, B>.Registration@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  unsigned int *v3;
  uint64_t result;
  uint64_t v6;

  result = BackgroundTaskModifier.Registration.value.getter(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance BackgroundTaskModifier<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static BackgroundTaskModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t (*)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))static _PreferenceTransformModifier._makeScene(modifier:inputs:body:));
}

uint64_t static BackgroundTaskModifier._makeScene(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Value;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v35;
  _BYTE v36[16];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v30 = *a2;
  v29 = *((_DWORD *)a2 + 2);
  v28 = a2[2];
  v31 = *((_DWORD *)a2 + 14);
  LODWORD(v40) = *a1;
  v12 = v40;
  type metadata accessor for BackgroundTaskModifier(255, a5, a6, a4);
  type metadata accessor for _GraphValue();
  v27 = *(_OWORD *)(a2 + 5);
  v13 = a2[3];
  v14 = a2[4];
  LODWORD(v40) = _GraphValue.value.getter();
  v16 = type metadata accessor for TaskActionsContainer.Key(255, a5, a6, v15);
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TaskActionsContainer<A, B>.Key, v16);
  v37 = type metadata accessor for _PreferenceTransformModifier();
  v38 = type metadata accessor for BackgroundTaskModifier.Registration(0, a5, a6, v18);
  v39 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BackgroundTaskModifier<A, B>.Registration, v38);
  v19 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v40, a7, (uint64_t)v36, v38, MEMORY[0x1E0DEDCE8], v19, MEMORY[0x1E0DEDD18], v20);
  LODWORD(v40) = v12;
  _GraphValue.value.getter();
  Value = AGGraphGetValue();
  v23 = type metadata accessor for BackgroundTask(0, a5, a6, v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(&v40, Value, v23);
  v24 = v43;
  v25 = v44;
  __swift_project_boxed_opaque_existential_1(&v40, v43);
  (*(void (**)(uint64_t, uint64_t))(v25 + 32))(v24, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
  _GraphValue.init(_:)();
  v40 = v30;
  v41 = v29;
  v42 = v28;
  v43 = v13;
  v44 = v14;
  v45 = v27;
  v46 = v31;
  return a8(&v35, &v40, a3, a4, v16, v17);
}

uint64_t protocol witness for static WidgetConfigurationModifier._makeWidgetConfiguration(modifier:inputs:body:) in conformance BackgroundTaskModifier<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static BackgroundTaskModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t (*)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))static _PreferenceTransformModifier._makeWidgetConfiguration(modifier:inputs:body:));
}

uint64_t sub_1878F7870()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AppRefreshBackgroundTask.register()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  v4[8] = v2;
  v4[9] = v3;
  return swift_task_switch();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance TaskActionsContainer<A, B>.Key@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = static TaskActionsContainer.Key.defaultValue.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance TaskActionsContainer<A, B>.Key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a4 + 24);
  v7 = *(_QWORD *)(a4 + 16);
  v8 = v4;
  v9 = a2;
  v10 = a3;
  return static TaskActionsContainer.Key.reduce(value:nextValue:)(a1, (void (*)(void))partial apply for thunk for @callee_guaranteed () -> (@out TaskActionsContainer<A, B>), (uint64_t)&v6, v7, v4);
}

uint64_t protocol witness for static PreferenceKey._isReadableByHost.getter in conformance TaskActionsContainer<A, B>.Key(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TaskActionsContainer<A, B>.Key, a1);
  return static HostPreferenceKey._isReadableByHost.getter();
}

uint64_t sub_1878F799C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTQ0_;
  return v6(a1);
}

uint64_t sub_1878F7A24()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BGTaskSchedulerWrapper.observeTask(_:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in BGTaskSchedulerWrapper.observeTask(_:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA_19(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_;
  return v5(v2 + 32);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc();
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu))(a1, v4);
}

void type metadata accessor for ()?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ()?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ()?);
  }
}

uint64_t type metadata accessor for TaskActionsContainer.Key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaskActionsContainer.Key);
}

uint64_t type metadata accessor for BackgroundTaskModifier.Registration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BackgroundTaskModifier.Registration);
}

uint64_t partial apply for closure #1 in static BackgroundTaskProtocol.currentTasks()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in static BackgroundTaskProtocol.currentTasks()(a1);
}

uint64_t type metadata accessor for TaskActionsContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaskActionsContainer);
}

uint64_t type metadata accessor for TaskActionsContainer.ContainerEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaskActionsContainer.ContainerEntry);
}

uint64_t type metadata accessor for BackgroundTaskEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BackgroundTaskEntry);
}

uint64_t partial apply for closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:)(*(uint64_t **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_1878F7CDC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v8 = v3[2];
  v9 = v3[3];
  v10 = v3[4];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v11;
  *v11 = v4;
  v11[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(a1, a2, a3, v10, v8, v9);
}

uint64_t sub_1878F7D84()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;

  v4 = v1[4];
  v5 = v1[5];
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  v10 = v7 + v8 + v9;
  v11 = v1[6];
  v12 = (char *)v1 + v7;
  v13 = (char *)v1 + (v10 & ~v9);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  v14[6] = v4;
  v14[7] = v5;
  v14[4] = v12;
  v14[5] = v13;
  v14[2] = a1;
  v14[3] = v11;
  return swift_task_switch();
}

uint64_t sub_1878F7F74()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu))(a1, v4);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(a1, a2, v8, v9, v10, v6, v7);
}

uint64_t sub_1878F80A8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 + 24) + 56))(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.BackgroundTaskProtocol.Response, @in_guaranteed A.BackgroundTaskProtocol.Response) -> (@out A.BackgroundTaskProtocol.Response)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v8)(uint64_t, uint64_t);
  _QWORD *v9;

  v8 = *(void (**)(uint64_t, uint64_t))(v3 + 32);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void (*)(uint64_t, uint64_t)))((char *)&async function pointer to thunk for @escaping @callee_guaranteed (@in_guaranteed A.BackgroundTaskProtocol.Response, @in_guaranteed A.BackgroundTaskProtocol.Response) -> (@out A.BackgroundTaskProtocol.Response) + async function pointer to thunk for @escaping @callee_guaranteed (@in_guaranteed A.BackgroundTaskProtocol.Response, @in_guaranteed A.BackgroundTaskProtocol.Response) -> (@out A.BackgroundTaskProtocol.Response)))(a1, a2, a3, v8);
}

uint64_t sub_1878F817C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_QWORD *)(type metadata accessor for BackgroundTaskEntry(0, v5, *(_QWORD *)(v4 + 40), a4) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = (v7 + v8 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v7, v5);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v4 + v11, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_QWORD *)(v4 + 40);
  v9 = *(_QWORD *)(type metadata accessor for BackgroundTaskEntry(0, v7, v8, a4) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  v13 = v10 + v11 + v12;
  v14 = v4 + v10;
  v15 = v4 + (v13 & ~v12);
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v16;
  *v16 = v5;
  v16[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  v16[5] = v7;
  v16[6] = v8;
  v16[3] = v14;
  v16[4] = v15;
  v16[2] = a1;
  return swift_task_switch();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTu))(a1, v4);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.BackgroundTaskProtocol.Response, @in_guaranteed A.BackgroundTaskProtocol.Response) -> (@out A.BackgroundTaskProtocol.Response)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t partial apply for closure #1 in static BackgroundTaskProtocol.currentTasks(in:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in static BackgroundTaskProtocol.currentTasks(in:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in closure #1 in static BackgroundTaskProtocol.currentTasks(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in static BackgroundTaskProtocol.currentTasks()(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t getEnumTagSinglePayload for BackgroundTaskEntry(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1878F8490 + 4 * byte_187C6B4C0[v10]))();
  }
}

void storeEnumTagSinglePayload for BackgroundTaskEntry(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1878F8608()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1878F8680);
}

void sub_1878F8610(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1878F8618);
  JUMPOUT(0x1878F8680);
}

void sub_1878F8658()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1878F8680);
}

void sub_1878F8660()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1878F8680);
}

uint64_t sub_1878F8668(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1878F8680);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1878F867CLL);
    JUMPOUT(0x1878F8674);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t destroy for TaskActionsContainer.ContainerEntry(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_release();
}

uint64_t initializeWithCopy for BackgroundTaskModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for BackgroundTaskModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for BackgroundTaskModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t instantiation function for generic protocol witness table for TaskActionsContainer<A, B>.Key(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TaskActionsContainer<A, B>.Key);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in BackgroundTaskModifier<A, B>.Registration()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@out TaskActionsContainer<A, B>)()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 32))(&v2);
  return v2;
}

uint64_t partial apply for closure #1 in static TaskActionsContainer.Key.reduce(value:nextValue:)@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  type metadata accessor for TaskActionsContainer.ContainerEntry(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  result = static Array.+ infix(_:_:)();
  *a2 = result;
  return result;
}

uint64_t sub_1878F8850()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundTaskModifier.Registration.value.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in BackgroundTaskModifier.Registration.value.getter(a1, v1[4], v1[5], (uint64_t)(v1 + 6), v1[2], v1[3]);
}

uint64_t partial apply for closure #2 in static BackgroundTaskProtocol.currentTasks()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in static BackgroundTaskProtocol.currentTasks(in:)(a1, a2);
}

uint64_t View.accessibilityAutomationType(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;

  v4 = a1;
  v5 = 0;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5760], (uint64_t)&v4, 1, a2, MEMORY[0x1E0CE5760], a3);
}

uint64_t assignWithCopy for FocusItem.ViewItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FocusItem.ViewItem(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FocusItem.ViewItem()
{
  return &type metadata for FocusItem.ViewItem;
}

uint64_t destroy for FocusItem(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 32);
  if (v1 == 2 || v1 == 1)
  {
    swift_unknownObjectWeakDestroy();
  }
  else if (!*(_BYTE *)(a1 + 32))
  {
    swift_release();
  }
  return swift_weakDestroy();
}

uint64_t initializeWithCopy for FocusItem(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 32);
  if (v4 == 2)
  {
    swift_unknownObjectWeakCopyInit();
    v5 = 2;
  }
  else
  {
    if (v4 != 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
      v6 = *(_QWORD *)(a2 + 16);
      v7 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 24) = v7;
      *(_BYTE *)(a1 + 32) = 0;
      swift_retain();
      goto LABEL_7;
    }
    swift_unknownObjectWeakCopyInit();
    v5 = 1;
  }
  *(_BYTE *)(a1 + 32) = v5;
LABEL_7:
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  swift_weakCopyInit();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for FocusItem(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of FocusItem.Base(a1);
    v4 = *(unsigned __int8 *)(a2 + 32);
    if (v4 == 2)
    {
      swift_unknownObjectWeakCopyInit();
      v5 = 2;
    }
    else
    {
      if (v4 != 1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        v6 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v6;
        *(_BYTE *)(a1 + 32) = 0;
        swift_retain();
        goto LABEL_8;
      }
      swift_unknownObjectWeakCopyInit();
      v5 = 1;
    }
    *(_BYTE *)(a1 + 32) = v5;
  }
LABEL_8:
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t initializeWithTake for FocusItem(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  __int128 v6;

  v4 = *(unsigned __int8 *)(a2 + 32);
  if (v4 == 2)
  {
    swift_unknownObjectWeakTakeInit();
    v5 = 2;
  }
  else if (v4 == 1)
  {
    swift_unknownObjectWeakTakeInit();
    v5 = 1;
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v5 = *(_BYTE *)(a2 + 32);
  }
  *(_BYTE *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  swift_weakTakeInit();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for FocusItem(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  __int128 v6;

  if (a1 != a2)
  {
    outlined destroy of FocusItem.Base(a1);
    v4 = *(unsigned __int8 *)(a2 + 32);
    if (v4 == 2)
    {
      swift_unknownObjectWeakTakeInit();
      v5 = 2;
    }
    else if (v4 == 1)
    {
      swift_unknownObjectWeakTakeInit();
      v5 = 1;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      v5 = *(_BYTE *)(a2 + 32);
    }
    *(_BYTE *)(a1 + 32) = v5;
  }
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t storeEnumTagSinglePayload for FocusItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 60) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      *(_QWORD *)(result + 48) = 1;
      return result;
    }
    *(_BYTE *)(result + 60) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for FocusItem.Base(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 32);
  if (v1 >= 3)
    v1 = *(_DWORD *)a1 + 3;
  if (v1 == 2 || v1 == 1)
    return swift_unknownObjectWeakDestroy();
  else
    return swift_release();
}

uint64_t initializeWithCopy for FocusItem.Base(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned __int8 *)(a2 + 32);
  if (v3 >= 3)
    v3 = *(_DWORD *)a2 + 3;
  if (v3 == 2)
  {
    swift_unknownObjectWeakCopyInit();
    v4 = 2;
  }
  else
  {
    if (v3 != 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
      v5 = *(_QWORD *)(a2 + 16);
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v6;
      *(_BYTE *)(a1 + 32) = 0;
      swift_retain();
      return a1;
    }
    swift_unknownObjectWeakCopyInit();
    v4 = 1;
  }
  *(_BYTE *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithCopy for FocusItem.Base(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 2 || v4 == 1)
      swift_unknownObjectWeakDestroy();
    else
      swift_release();
    v5 = *(unsigned __int8 *)(a2 + 32);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      swift_unknownObjectWeakCopyInit();
      v6 = 2;
    }
    else
    {
      if (v5 != 1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        v7 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v7;
        *(_BYTE *)(a1 + 32) = 0;
        swift_retain();
        return a1;
      }
      swift_unknownObjectWeakCopyInit();
      v6 = 1;
    }
    *(_BYTE *)(a1 + 32) = v6;
  }
  return a1;
}

uint64_t initializeWithTake for FocusItem.Base(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  char v3;
  __int128 v4;

  v2 = *(unsigned __int8 *)(a2 + 32);
  if (v2 >= 3)
    v2 = *(_DWORD *)a2 + 3;
  if (v2 == 2)
  {
    result = swift_unknownObjectWeakTakeInit();
    v3 = 2;
  }
  else if (v2 == 1)
  {
    result = swift_unknownObjectWeakTakeInit();
    v3 = 1;
  }
  else
  {
    v3 = 0;
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_OWORD *)(result + 16) = v4;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

uint64_t assignWithTake for FocusItem.Base(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 2 || v4 == 1)
      swift_unknownObjectWeakDestroy();
    else
      swift_release();
    v5 = *(unsigned __int8 *)(a2 + 32);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      swift_unknownObjectWeakTakeInit();
      v6 = 2;
    }
    else if (v5 == 1)
    {
      swift_unknownObjectWeakTakeInit();
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
    }
    *(_BYTE *)(a1 + 32) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusItem.Base(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FocusItem.Base(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for FocusItem.Base(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 32);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t destructiveInjectEnumTag for FocusItem.Base(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FocusItem.Base()
{
  return &type metadata for FocusItem.Base;
}

uint64_t FocusItem.inFocusedResponderChain(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_weakLoadStrong();
  if (result)
  {
    if (swift_retain_n() == a1)
    {
LABEL_5:
      swift_release_n();
      swift_release();
      return 1;
    }
    else
    {
      while (1)
      {
        swift_retain();
        v3 = dispatch thunk of ResponderNode.nextResponder.getter();
        swift_retain();
        swift_release_n();
        if (!v3)
          break;
        swift_release();
        if (v3 == a1)
          goto LABEL_5;
      }
      swift_release_n();
      return 0;
    }
  }
  return result;
}

BOOL FocusItem.isExpired.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BOOL8 v2;
  void *v3;
  uint64_t v5;
  _BYTE v6[24];
  char v7;

  outlined init with copy of FocusItem.Base(v0, (uint64_t)v6);
  if (v7)
  {
    if (v7 == 1)
    {
      outlined init with take of WeakBox<UIFocusItem>((uint64_t)v6, (uint64_t)&v5);
      v1 = MEMORY[0x18D760234](&v5);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v5, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIFocusItem>);
      v2 = v1 == 0;
      if (v1)
        swift_unknownObjectRelease();
    }
    else
    {
      outlined init with take of WeakBox<UIView>((uint64_t)v6, (uint64_t)&v5);
      v3 = (void *)MEMORY[0x18D760234](&v5);
      outlined destroy of WeakBox<UIView>((uint64_t)&v5);
      v2 = v3 == 0;
      if (v3)

    }
  }
  else
  {
    swift_release();
    return 0;
  }
  return v2;
}

uint64_t FocusItem.platformResponder.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _BYTE v4[32];
  char v5;
  _BYTE v6[8];

  outlined init with copy of FocusItem.Base(v0, (uint64_t)v4);
  if (v5 == 2)
  {
    outlined init with take of WeakBox<UIView>((uint64_t)v4, (uint64_t)v6);
    v1 = MEMORY[0x18D760234](v6);
    outlined destroy of WeakBox<UIView>((uint64_t)v6);
    return v1;
  }
  outlined destroy of FocusItem.Base((uint64_t)v4);
  outlined init with copy of FocusItem.Base(v0, (uint64_t)v4);
  if (v5 != 1)
  {
    outlined destroy of FocusItem.Base((uint64_t)v4);
    return 0;
  }
  outlined init with take of WeakBox<UIFocusItem>((uint64_t)v4, (uint64_t)v6);
  if (!MEMORY[0x18D760234](v6))
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIFocusItem>);
    return 0;
  }
  if ((*(_BYTE *)(v0 + 33) & 1) != 0)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
    swift_unknownObjectRetain();
    v2 = (void *)static UIFocusSystem.focusSystem(for:)();
    swift_unknownObjectRelease();
    if (v2)
    {

      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIFocusItem>);
      swift_unknownObjectRelease();
      return 0;
    }
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIFocusItem>);
  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (!v1)
    swift_unknownObjectRelease();
  return v1;
}

uint64_t FocusItem.isFocusable.getter()
{
  uint64_t v0;
  void *v1;
  unsigned __int8 v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v8;
  _BYTE v9[24];
  char v10;

  outlined init with copy of FocusItem.Base(v0, (uint64_t)v9);
  if (!v10)
  {
    v2 = v9[4];
    swift_release();
    return v2 & 1;
  }
  if (v10 != 1)
  {
    outlined init with take of WeakBox<UIView>((uint64_t)v9, (uint64_t)&v8);
    if (swift_weakLoadStrong())
    {
      type metadata accessor for UIViewResponder();
      v3 = (_QWORD *)swift_dynamicCastClass();
      if (v3)
      {
        v2 = (*(uint64_t (**)(void))(class metadata base offset for UIViewResponder + *v3 + 16))();
        swift_release();
        goto LABEL_18;
      }
      swift_release();
    }
    v4 = MEMORY[0x18D760234](&v8);
    if (!v4)
    {
      outlined destroy of WeakBox<UIView>((uint64_t)&v8);
      goto LABEL_16;
    }
    v5 = (void *)v4;
    if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    {
      v6 = UIView.firstFocusableDescendant.getter();
      v2 = v6 != 0;

      if (v6)
    }
    else
    {
      v2 = objc_msgSend(v5, sel_canBecomeFirstResponder);

    }
LABEL_18:
    outlined destroy of WeakBox<UIView>((uint64_t)&v8);
    return v2 & 1;
  }
  outlined init with take of WeakBox<UIFocusItem>((uint64_t)v9, (uint64_t)&v8);
  v1 = (void *)MEMORY[0x18D760234](&v8);
  if (!v1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIFocusItem>);
LABEL_16:
    v2 = 0;
    return v2 & 1;
  }
  v2 = objc_msgSend(v1, sel_canBecomeFocused);
  swift_unknownObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIFocusItem>);
  return v2 & 1;
}

void *UIView.firstFocusableDescendant.getter()
{
  void *v0;
  uint64_t inited;
  uint64_t v2;
  id v3;
  void *i;
  uint64_t v6;

  type metadata accessor for _ContiguousArrayStorage<[UIView]>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_187BFF9C0;
  *(_QWORD *)(v2 + 32) = v0;
  v6 = v2;
  specialized Array._endMutation()();
  *(_QWORD *)(inited + 32) = v6;
  v3 = v0;
  swift_bridgeObjectRetain();
  for (i = (void *)PlatformSubtreeIterator.next()(); i; i = (void *)PlatformSubtreeIterator.next()())
  {
    if ((objc_msgSend(i, sel_canBecomeFirstResponder) & 1) != 0)
      break;

  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return i;
}

uint64_t FocusItem.hasEqualIdentity(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  int v10;
  _BYTE v12[8];
  _BYTE v13[8];
  _DWORD v14[6];
  _BYTE v15[32];
  char v16;
  _DWORD v17[6];
  char v18;

  outlined init with copy of FocusItem.Base(v1, (uint64_t)v15);
  outlined init with copy of FocusItem.Base(a1, (uint64_t)v17);
  if (v16)
  {
    if (v16 == 1)
    {
      outlined init with copy of FocusItem.Base((uint64_t)v15, (uint64_t)v14);
      if (v18 == 1)
      {
        outlined init with take of WeakBox<UIFocusItem>((uint64_t)v14, (uint64_t)v13);
        outlined init with take of WeakBox<UIFocusItem>((uint64_t)v17, (uint64_t)v12);
        v3 = MEMORY[0x18D760234](v13);
        v4 = MEMORY[0x18D760234](v12);
        v5 = v4;
        if (v3)
        {
          swift_unknownObjectRelease();
          if (v5)
          {
            swift_unknownObjectRelease();
            v6 = v3 == v5;
LABEL_23:
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIFocusItem>);
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIFocusItem>);
            goto LABEL_26;
          }
        }
        else
        {
          if (!v4)
          {
            v6 = 1;
            goto LABEL_23;
          }
          swift_unknownObjectRelease();
        }
        v6 = 0;
        goto LABEL_23;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIFocusItem>);
    }
    else
    {
      outlined init with copy of FocusItem.Base((uint64_t)v15, (uint64_t)v14);
      if (v18 == 2)
      {
        outlined init with take of WeakBox<UIView>((uint64_t)v14, (uint64_t)v13);
        outlined init with take of WeakBox<UIView>((uint64_t)v17, (uint64_t)v12);
        v7 = (void *)MEMORY[0x18D760234](v13);
        v8 = (void *)MEMORY[0x18D760234](v12);
        v6 = (uint64_t)v8;
        if (v7)
        {

          if (v6)
          {

            v6 = v7 == (void *)v6;
          }
        }
        else if (v8)
        {

          v6 = 0;
        }
        else
        {
          v6 = 1;
        }
        outlined destroy of WeakBox<UIView>((uint64_t)v12);
        outlined destroy of WeakBox<UIView>((uint64_t)v13);
        goto LABEL_26;
      }
      outlined destroy of WeakBox<UIView>((uint64_t)v14);
    }
  }
  else
  {
    outlined init with copy of FocusItem.Base((uint64_t)v15, (uint64_t)v14);
    if (!v18)
    {
      v9 = v14[0];
      v10 = v17[0];
      swift_release();
      swift_release();
      v6 = v9 == v10;
LABEL_26:
      outlined destroy of FocusItem.Base((uint64_t)v15);
      return v6;
    }
    swift_release();
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for (FocusItem.Base, FocusItem.Base));
  return 0;
}

uint64_t PlatformSubtreeIterator.next()()
{
  unint64_t v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v3 = *(_QWORD *)(v0 + 8);
  if (v3 > 9)
    return 0;
  v4 = (_QWORD *)v0;
  v5 = *(_QWORD **)v0;
  if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
    return 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v6 = v5[2];
    if (v6)
      goto LABEL_5;
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (!v6)
    goto LABEL_13;
LABEL_5:
  v7 = v6 - 1;
  v0 = v5[v7 + 4];
  v5[2] = v7;
  *v4 = v5;
  v21 = v0;
  v2 = v0 >> 62;
  if (!(v0 >> 62))
  {
    if (*(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_14:
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v10)
  {
    swift_bridgeObjectRetain();
    v1 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v1)
    {
LABEL_7:
      if ((v0 & 0xC000000000000001) == 0)
      {
        if (!*(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_29;
        }
        v1 = *(id *)(v0 + 32);
        if (!v2)
          goto LABEL_10;
        goto LABEL_19;
      }
LABEL_18:
      v1 = (id)MEMORY[0x18D75E3BC](0, v0);
      if (!v2)
      {
LABEL_10:
        v8 = v0 & 0xFFFFFFFFFFFFF8;
        v9 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_20:
        if (!v9)
        {
          __break(1u);
          goto LABEL_44;
        }
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
        objc_opt_self();
        if (!swift_dynamicCastObjCClass() || (objc_opt_self(), swift_dynamicCastObjCClass()))
        {
          v0 = v21;
          if (!(v21 >> 62))
          {
            if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_25;
            goto LABEL_30;
          }
LABEL_29:
          swift_bridgeObjectRetain();
          v12 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v12)
          {
LABEL_25:
            v2 = v5[2];
            v8 = v5[3];
            v9 = v2 + 1;
            if (v2 < v8 >> 1)
            {
LABEL_26:
              v5[2] = v9;
              v5[v2 + 4] = v0;
              *v4 = v5;
LABEL_31:
              v13 = objc_msgSend(v1, sel_subviews);
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
              v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (v14 >> 62)
              {
                swift_bridgeObjectRetain();
                v15 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
              }
              swift_bridgeObjectRelease();
              if (v15 && v5[2] <= 3uLL)
              {
                v16 = objc_msgSend(v1, sel_effectiveUserInterfaceLayoutDirection);
                v17 = objc_msgSend(v1, sel_subviews);
                v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                if (v16 == (id)1)
                  v18 = specialized Sequence.reversed()(v18);
                v20 = v5[2];
                v19 = v5[3];
                if (v20 >= v19 >> 1)
                  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v5);
                v5[2] = v20 + 1;
                v5[v20 + 4] = v18;
                *v4 = v5;
              }
              v4[1] = v3 + 1;
              return (uint64_t)v1;
            }
LABEL_44:
            v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9, 1, v5);
            goto LABEL_26;
          }
LABEL_30:
          swift_bridgeObjectRelease();
          goto LABEL_31;
        }
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        v1 = 0;
        *v4 = MEMORY[0x1E0DEE9D8];
        v4[1] = v3 + 1;
        return (uint64_t)v1;
      }
LABEL_19:
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<[UIView]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<[UIView]>)
  {
    type metadata accessor for WeakBox<UIView>(255, (unint64_t *)&lazy cache variable for type metadata for [UIView], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[UIView]>);
  }
}

void type metadata accessor for WeakBox<UIView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t outlined destroy of WeakBox<UIView>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for WeakBox<UIView>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized static FocusItem.isFocusChange(from:to:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  BOOL v4;
  char v5;
  char v6;
  _BYTE v8[64];
  _BYTE v9[64];
  _BYTE v10[64];
  _BYTE v11[40];
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;

  outlined init with copy of FocusItem?(a1, (uint64_t)v11);
  outlined init with copy of FocusItem?(a2, (uint64_t)v14);
  if (v12)
    v3 = 0;
  else
    v3 = v13 == 1;
  if (v3)
  {
    if (v15)
      v4 = 0;
    else
      v4 = v16 == 1;
    if (v4)
    {
      outlined destroy of FocusItem?((uint64_t)v11);
      v5 = 0;
      return v5 & 1;
    }
  }
  else
  {
    outlined init with copy of FocusItem?((uint64_t)v11, (uint64_t)v10);
    if (v15 || v16 != 1)
    {
      outlined init with take of FocusItem((uint64_t)v10, (uint64_t)v9);
      outlined init with take of FocusItem((uint64_t)v14, (uint64_t)v8);
      v6 = FocusItem.hasEqualIdentity(to:)((uint64_t)v8);
      outlined destroy of FocusItem((uint64_t)v8);
      outlined destroy of FocusItem((uint64_t)v9);
      v5 = v6 ^ 1;
      outlined destroy of FocusItem?((uint64_t)v11);
      return v5 & 1;
    }
    outlined destroy of FocusItem((uint64_t)v10);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for (FocusItem?, FocusItem?));
  v5 = 1;
  return v5 & 1;
}

void type metadata accessor for (FocusItem?, FocusItem?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (FocusItem?, FocusItem?))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (FocusItem?, FocusItem?));
  }
}

void type metadata accessor for (FocusItem.Base, FocusItem.Base)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (FocusItem.Base, FocusItem.Base))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (FocusItem.Base, FocusItem.Base));
  }
}

ValueMetadata *type metadata accessor for FocusedItemInputKey()
{
  return &type metadata for FocusedItemInputKey;
}

uint64_t getEnumTagSinglePayload for TokenFieldStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1878F9FB4 + 4 * byte_187C6B960[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TokenFieldStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for TokenFieldStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TokenFieldStyleModifier);
}

_UNKNOWN **base witness table accessor for ViewModifier in TokenFieldStyleModifier<A>()
{
  return &protocol witness table for TokenFieldStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in TokenFieldStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t View.tokenFieldStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TokenFieldStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedTokenFieldStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TokenFieldConfiguration(v1, a1);
}

uint64_t TokenFieldStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v20 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v5 + 24))(a1, v6, v5, v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for TokenFieldStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenFieldStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenFieldStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for TokenFieldConfiguration.Label()
{
  return &type metadata for TokenFieldConfiguration.Label;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedTokenFieldStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v4 = type metadata accessor for TokenFieldConfiguration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = v4;
    a1[1] = a2[1];
    type metadata accessor for Binding<AttributedString>();
    v9 = *(int *)(v8 + 32);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for AttributedString();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_retain();
    swift_retain();
    v13(v10, v11, v12);
    v14 = *(int *)(v7 + 24);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    if (*(uint64_t *)((char *)a2 + v14 + 24))
    {
      v17 = *(_QWORD *)v16;
      v18 = *((_QWORD *)v16 + 1);
      v19 = v16[16];
      outlined copy of Text.Storage(*(_QWORD *)v16, v18, v19);
      *(_QWORD *)v15 = v17;
      *((_QWORD *)v15 + 1) = v18;
      v15[16] = v19;
      *((_QWORD *)v15 + 3) = *((_QWORD *)v16 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v20 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v20;
    }
    v21 = *(int *)(v7 + 28);
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
  }
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for TokenFieldConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TokenFieldConfiguration);
}

uint64_t destroy for ResolvedTokenFieldStyle(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v3 = a1 + *(int *)(v2 + 32);
  v4 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = a1 + *(int *)(type metadata accessor for TokenFieldConfiguration(0) + 24);
  if (*(_QWORD *)(v5 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

_QWORD *initializeWithCopy for ResolvedTokenFieldStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<AttributedString>();
  v6 = *(int *)(v5 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_retain();
  swift_retain();
  v10(v7, v8, v9);
  v11 = type metadata accessor for TokenFieldConfiguration(0);
  v12 = *(int *)(v11 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  if (*(_QWORD *)((char *)a2 + v12 + 24))
  {
    v15 = *(_QWORD *)v14;
    v16 = *((_QWORD *)v14 + 1);
    v17 = v14[16];
    outlined copy of Text.Storage(*(_QWORD *)v14, v16, v17);
    *(_QWORD *)v13 = v15;
    *((_QWORD *)v13 + 1) = v16;
    v13[16] = v17;
    *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v18;
  }
  v19 = *(int *)(v11 + 28);
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ResolvedTokenFieldStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v5 = *(int *)(v4 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  v9 = type metadata accessor for TokenFieldConfiguration(0);
  v10 = *(int *)(v9 + 24);
  v11 = (uint64_t)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)((char *)a1 + v10 + 24);
  v14 = *(_QWORD *)((char *)a2 + v10 + 24);
  if (v13)
  {
    if (v14)
    {
      v15 = *(_QWORD *)v12;
      v16 = *((_QWORD *)v12 + 1);
      v17 = v12[16];
      outlined copy of Text.Storage(*(_QWORD *)v12, v16, v17);
      v18 = *(_QWORD *)v11;
      v19 = *(_QWORD *)(v11 + 8);
      v20 = *(_BYTE *)(v11 + 16);
      *(_QWORD *)v11 = v15;
      *(_QWORD *)(v11 + 8) = v16;
      *(_BYTE *)(v11 + 16) = v17;
      outlined consume of Text.Storage(v18, v19, v20);
      *(_QWORD *)(v11 + 24) = *((_QWORD *)v12 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v11);
      v24 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_OWORD *)(v11 + 16) = v24;
    }
  }
  else if (v14)
  {
    v21 = *(_QWORD *)v12;
    v22 = *((_QWORD *)v12 + 1);
    v23 = v12[16];
    outlined copy of Text.Storage(*(_QWORD *)v12, v22, v23);
    *(_QWORD *)v11 = v21;
    *(_QWORD *)(v11 + 8) = v22;
    *(_BYTE *)(v11 + 16) = v23;
    *(_QWORD *)(v11 + 24) = *((_QWORD *)v12 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v25 = *((_OWORD *)v12 + 1);
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *(_OWORD *)(v11 + 16) = v25;
  }
  v26 = *(int *)(v9 + 28);
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for ResolvedTokenFieldStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<AttributedString>();
  v6 = *(int *)(v5 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = type metadata accessor for TokenFieldConfiguration(0);
  v11 = *(int *)(v10 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  *(_OWORD *)((char *)a1 + *(int *)(v10 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v10 + 28));
  return a1;
}

_QWORD *assignWithTake for ResolvedTokenFieldStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v5 = *(int *)(v4 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  v9 = type metadata accessor for TokenFieldConfiguration(0);
  v10 = *(int *)(v9 + 24);
  v11 = (uint64_t)a1 + v10;
  v12 = (char *)a2 + v10;
  if (!*(_QWORD *)((char *)a1 + v10 + 24))
    goto LABEL_5;
  if (!*((_QWORD *)v12 + 3))
  {
    outlined destroy of Text(v11);
LABEL_5:
    v17 = *((_OWORD *)v12 + 1);
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *(_OWORD *)(v11 + 16) = v17;
    goto LABEL_6;
  }
  v13 = v12[16];
  v14 = *(_QWORD *)v11;
  v15 = *(_QWORD *)(v11 + 8);
  v16 = *(_BYTE *)(v11 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = v13;
  outlined consume of Text.Storage(v14, v15, v16);
  *(_QWORD *)(v11 + 24) = *((_QWORD *)v12 + 3);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)((char *)a1 + *(int *)(v9 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v9 + 28));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedTokenFieldStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1878FAAB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TokenFieldConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvedTokenFieldStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1878FAAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TokenFieldConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ResolvedTokenFieldStyle(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedTokenFieldStyle);
}

uint64_t type metadata completion function for ResolvedTokenFieldStyle()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TokenFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenFieldConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    type metadata accessor for Binding<AttributedString>();
    v9 = *(int *)(v8 + 32);
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for AttributedString();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_retain();
    swift_retain();
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 24);
    v15 = (char *)v7 + v14;
    v16 = (char *)a2 + v14;
    if (*(uint64_t *)((char *)a2 + v14 + 24))
    {
      v17 = *(_QWORD *)v16;
      v18 = *((_QWORD *)v16 + 1);
      v19 = v16[16];
      outlined copy of Text.Storage(*(_QWORD *)v16, v18, v19);
      *(_QWORD *)v15 = v17;
      *((_QWORD *)v15 + 1) = v18;
      v15[16] = v19;
      *((_QWORD *)v15 + 3) = *((_QWORD *)v16 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v20 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v20;
    }
    v21 = *(int *)(a3 + 28);
    v22 = (uint64_t *)((char *)v7 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
  }
  swift_retain();
  return v7;
}

uint64_t destroy for TokenFieldConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v5 = a1 + *(int *)(v4 + 32);
  v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  if (*(_QWORD *)(v7 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

_QWORD *initializeWithCopy for TokenFieldConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  type metadata accessor for Binding<AttributedString>();
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for AttributedString();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_retain();
  swift_retain();
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  if (*(_QWORD *)((char *)a2 + v13 + 24))
  {
    v16 = *(_QWORD *)v15;
    v17 = *((_QWORD *)v15 + 1);
    v18 = v15[16];
    outlined copy of Text.Storage(*(_QWORD *)v15, v17, v18);
    *(_QWORD *)v14 = v16;
    *((_QWORD *)v14 + 1) = v17;
    v14[16] = v18;
    *((_QWORD *)v14 + 3) = *((_QWORD *)v15 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v19;
  }
  v20 = *(int *)(a3 + 28);
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for TokenFieldConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (uint64_t)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)((char *)a1 + v11 + 24);
  v15 = *(_QWORD *)((char *)a2 + v11 + 24);
  if (v14)
  {
    if (v15)
    {
      v16 = *(_QWORD *)v13;
      v17 = *((_QWORD *)v13 + 1);
      v18 = v13[16];
      outlined copy of Text.Storage(*(_QWORD *)v13, v17, v18);
      v19 = *(_QWORD *)v12;
      v20 = *(_QWORD *)(v12 + 8);
      v21 = *(_BYTE *)(v12 + 16);
      *(_QWORD *)v12 = v16;
      *(_QWORD *)(v12 + 8) = v17;
      *(_BYTE *)(v12 + 16) = v18;
      outlined consume of Text.Storage(v19, v20, v21);
      *(_QWORD *)(v12 + 24) = *((_QWORD *)v13 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v12);
      v25 = *((_OWORD *)v13 + 1);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *(_OWORD *)(v12 + 16) = v25;
    }
  }
  else if (v15)
  {
    v22 = *(_QWORD *)v13;
    v23 = *((_QWORD *)v13 + 1);
    v24 = v13[16];
    outlined copy of Text.Storage(*(_QWORD *)v13, v23, v24);
    *(_QWORD *)v12 = v22;
    *(_QWORD *)(v12 + 8) = v23;
    *(_BYTE *)(v12 + 16) = v24;
    *(_QWORD *)(v12 + 24) = *((_QWORD *)v13 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v26 = *((_OWORD *)v13 + 1);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v26;
  }
  v27 = *(int *)(a3 + 28);
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for TokenFieldConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  type metadata accessor for Binding<AttributedString>();
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = *(int *)(a3 + 28);
  v14 = (_OWORD *)((char *)a1 + v12);
  v15 = (_OWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

_QWORD *assignWithTake for TokenFieldConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (uint64_t)a1 + v11;
  v13 = (char *)a2 + v11;
  if (!*(_QWORD *)((char *)a1 + v11 + 24))
    goto LABEL_5;
  if (!*((_QWORD *)v13 + 3))
  {
    outlined destroy of Text(v12);
LABEL_5:
    v18 = *((_OWORD *)v13 + 1);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v18;
    goto LABEL_6;
  }
  v14 = v13[16];
  v15 = *(_QWORD *)v12;
  v16 = *(_QWORD *)(v12 + 8);
  v17 = *(_BYTE *)(v12 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = v14;
  outlined consume of Text.Storage(v15, v16, v17);
  *(_QWORD *)(v12 + 24) = *((_QWORD *)v13 + 3);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 28));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenFieldConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1878FB184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  type metadata accessor for Binding<AttributedString>();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenFieldConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1878FB20C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for Binding<AttributedString>();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
}

void type metadata completion function for TokenFieldConfiguration()
{
  unint64_t v0;

  type metadata accessor for Binding<AttributedString>();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1878FB314()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedTokenFieldStyle()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TokenFieldStyleModifier<AutomaticTokenFieldStyle> and conformance TokenFieldStyleModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for TokenFieldStyleModifier<AutomaticTokenFieldStyle>, (uint64_t)&protocol conformance descriptor for TokenFieldStyleModifier<A>);
}

void type metadata accessor for TokenFieldStyleModifier<AutomaticTokenFieldStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TokenFieldStyleModifier<AutomaticTokenFieldStyle>)
  {
    v2 = lazy protocol witness table accessor for type AutomaticTokenFieldStyle and conformance AutomaticTokenFieldStyle();
    v4 = type metadata accessor for TokenFieldStyleModifier(a1, (uint64_t)&type metadata for AutomaticTokenFieldStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TokenFieldStyleModifier<AutomaticTokenFieldStyle>);
  }
}

uint64_t instantiation function for generic protocol witness table for ResolvedTokenFieldStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle, type metadata accessor for ResolvedTokenFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTokenFieldStyle);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in TokenFieldConfiguration.Label()
{
  return &protocol witness table for TokenFieldConfiguration.Label;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedTokenFieldStyle()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle, type metadata accessor for ResolvedTokenFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTokenFieldStyle);
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for TokenFieldConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t outlined init with copy of TokenFieldConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TokenFieldConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void NSHostingSceneBridgingOptions.rawValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

SwiftUI::NSHostingSceneBridgingOptions __swiftcall NSHostingSceneBridgingOptions.init(rawValue:)(Swift::Int rawValue)
{
  SwiftUI::NSHostingSceneBridgingOptions result;

  result.rawValue = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void static NSHostingSceneBridgingOptions.all.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions;
  if (!lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NSHostingSceneBridgingOptions, &type metadata for NSHostingSceneBridgingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions;
  if (!lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NSHostingSceneBridgingOptions, &type metadata for NSHostingSceneBridgingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions;
  if (!lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NSHostingSceneBridgingOptions, &type metadata for NSHostingSceneBridgingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions;
  if (!lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NSHostingSceneBridgingOptions, &type metadata for NSHostingSceneBridgingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions);
  }
  return result;
}

ValueMetadata *type metadata accessor for NSHostingSceneBridgingOptions()
{
  return &type metadata for NSHostingSceneBridgingOptions;
}

void static NSHostingSceneBridgingOptions.titles.getter()
{
  static NSHostingSceneBridgingOptions.all.getter();
}

void static NSHostingSceneBridgingOptions.toolbars.getter()
{
  static NSHostingSceneBridgingOptions.all.getter();
}

void static NSHostingSceneBridgingOptions.title.getter()
{
  static NSHostingSceneBridgingOptions.all.getter();
}

_QWORD *assignWithCopy for AnimatedValueTrack<A>.PacedPathSource(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t type metadata accessor for AnimatedValueTrack<A>.PacedPathSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueTrack<A>.PacedPathSource);
}

uint64_t VectorArithmetic.scaled(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v4, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(a2 + 16))(a1, a2, a4);
}

uint64_t AnimatedValueTrackSource.keyPath<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v19;

  v8 = *a1;
  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v13, a2, v10);
  v14 = (_QWORD *)MEMORY[0x1E0DEC880];
  v15 = type metadata accessor for PrependingKeyPathSource(0, *(_QWORD *)(v8 + *MEMORY[0x1E0DEC880]), a2, a3);
  a4[3] = v15;
  a4[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrependingKeyPathSource<A, B>, v15);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  v17 = *a1;
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 32))(boxed_opaque_existential_1, v12, a2);
  *(uint64_t *)((char *)boxed_opaque_existential_1
             + *(int *)(type metadata accessor for PrependingKeyPathSource(0, *(_QWORD *)(v17 + *v14), a2, a3) + 44)) = (uint64_t)a1;
  return swift_retain();
}

uint64_t PrependingKeyPathSource.update(value:mix:at:)(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(uint64_t *, _QWORD);
  uint64_t v8;
  uint64_t v10;

  v7 = (uint64_t (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  (*(void (**)(uint64_t, _QWORD, double, double))(*(_QWORD *)(a4 + 32) + 24))(v8, *(_QWORD *)(a4 + 24), a1, a2);
  return v7(&v10, 0);
}

uint64_t PrependingKeyPathSource.update(velocity:mix:at:)(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(uint64_t *, _QWORD);
  uint64_t v8;
  uint64_t v10;

  v7 = (uint64_t (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  (*(void (**)(uint64_t, _QWORD, double, double))(*(_QWORD *)(a4 + 32) + 32))(v8, *(_QWORD *)(a4 + 24), a1, a2);
  return v7(&v10, 0);
}

uint64_t PrependingKeyPathSource.duration.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 40))(*(_QWORD *)(a1 + 24));
}

uint64_t static PrependingKeyPathSource.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    return 0;
  type metadata accessor for AnyKeyPath();
  v10 = type metadata accessor for PrependingKeyPathSource(0, a3, a4, a5);
  return MEMORY[0x18D75E0BC](*(_QWORD *)(a1 + *(int *)(v10 + 44)), *(_QWORD *)(a2 + *(int *)(v10 + 44))) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PrependingKeyPathSource<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static PrependingKeyPathSource.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t AnimatedValueTrack<A>.PacedPathSource.init(duration:keyframes:interpolation:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  Swift::Bool IsNativeType;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;

  v4 = a4;
  v5 = a3;
  v8 = type metadata accessor for AnimatedValueKeyframe(255, a3, a3, a4);
  v9 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v26 - v11;
  v13 = *(_QWORD *)(v8 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v26 - v17;
  v19 = *a2;
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  v20 = Dictionary.init(dictionaryLiteral:)();
  v31 = v20;
  if (MEMORY[0x18D75D06C](a1, v8))
  {
    v26 = v14;
    v27 = v19;
    v28 = v5;
    v29 = v4;
    v21 = 0;
    v22 = 0.0;
    while (1)
    {
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v18, a1+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v21, v8);
        v24 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_10;
      }
      else
      {
        result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v26 != 8)
        {
          __break(1u);
          return result;
        }
        v30 = *(double *)&result;
        (*(void (**)(char *, double *, uint64_t))(v13 + 16))(v18, &v30, v8);
        swift_unknownObjectRelease();
        v24 = v21 + 1;
        if (__OFADD__(v21, 1))
        {
LABEL_10:
          __break(1u);
LABEL_11:
          swift_bridgeObjectRelease();
          v20 = v31;
          v5 = v28;
          v4 = v29;
          LOBYTE(v19) = v27;
          goto LABEL_13;
        }
      }
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v12, v18, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v12, 0, 1, v8);
      v30 = v22;
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      v22 = v22 + 1.0;
      ++v21;
      if (v24 == MEMORY[0x18D75D06C](a1, v8))
        goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
LABEL_13:
  LOBYTE(v30) = v19;
  return AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)(v20, (char *)&v30, v5, v4);
}

uint64_t AnimatedValueTrack<A>.PacedPathSource.update(value:mix:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t AssociatedConformanceWitness;
  void (*v37)(char *, uint64_t);
  void (*v38)(_BYTE *, _QWORD);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _BYTE v43[32];

  v42 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v40 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v15);
  v17 = (char *)&v39 - v16;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v39 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v39 - v29;
  MEMORY[0x1E0C80A78](v31, v32);
  v41 = (char *)&v39 - v33;
  AnimatedValueTrack<A>.VectorPath.arcLength.getter(a2, a3, a4);
  AnimatedValueTrack<A>.VectorPath.value(atArcLength:)(a2, a3, a4, (uint64_t)v17, a6 / a7 * v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v40);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v41, v17, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v40 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v37 = *(void (**)(char *, uint64_t))(v18 + 8);
  v37(v22, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v30, v26, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, a5);
  v37(v26, AssociatedTypeWitness);
  v38 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 40))(v43, a3, a4);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v37(v30, AssociatedTypeWitness);
  v38(v43, 0);
  return ((uint64_t (*)(char *, uint64_t))v37)(v41, AssociatedTypeWitness);
}

uint64_t AnimatedValueTrack<A>.PacedPathSource.update(velocity:mix:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  double v37;
  double v38;
  double v39;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t AssociatedConformanceWitness;
  char *v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  void (*v47)(_BYTE *, _QWORD);
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, double);
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _BYTE v56[32];

  v55 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v15);
  v17 = (char *)&v48 - v16;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v53 = (char *)&v48 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v48 - v28;
  MEMORY[0x1E0C80A78](v30, v31);
  v54 = (char *)&v48 - v32;
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v48 - v35;
  v37 = a6 / a7;
  AnimatedValueTrack<A>.VectorPath.arcLength.getter(a2, a3, a4);
  v39 = v38;
  AnimatedValueTrack<A>.VectorPath.unitVelocityTangent(atArcLength:)(a2, a3, a4, (uint64_t)v17, v37 * v38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v52);
  v41 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v42 = v36;
  v51 = v36;
  v41(v36, v17, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v50 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v44 = v54;
  v50(v54, v42, AssociatedTypeWitness);
  v49 = *(void (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16);
  v49(AssociatedTypeWitness, AssociatedConformanceWitness, v39 / a7);
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  v52 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v45 = v53;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v46 = *(void (**)(char *, uint64_t))(v18 + 8);
  v46(v22, AssociatedTypeWitness);
  v50(v29, v45, AssociatedTypeWitness);
  v49(AssociatedTypeWitness, AssociatedConformanceWitness, a5);
  v46(v45, AssociatedTypeWitness);
  v47 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 40))(v56, a3, a4);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v46(v29, AssociatedTypeWitness);
  v47(v56, 0);
  v46(v44, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v46)(v51, AssociatedTypeWitness);
}

uint64_t static AnimatedValueTrack<A>.PacedPathSource.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  return static AnimatedValueTrack<A>.VectorPath.== infix(_:_:)(a1, a2, a3, a4) & (a5 == a6);
}

uint64_t protocol witness for AnimatedValueTrackSource.update(value:mix:at:) in conformance AnimatedValueTrack<A><A>.PacedPathSource(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;

  return AnimatedValueTrack<A>.PacedPathSource.update(value:mix:at:)(a1, *(_QWORD *)v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4, *(double *)(v4 + 8));
}

uint64_t protocol witness for AnimatedValueTrackSource.update(velocity:mix:at:) in conformance AnimatedValueTrack<A><A>.PacedPathSource(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;

  return AnimatedValueTrack<A>.PacedPathSource.update(velocity:mix:at:)(a1, *(_QWORD *)v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4, *(double *)(v4 + 8));
}

double protocol witness for AnimatedValueTrackSource.duration.getter in conformance AnimatedValueTrack<A><A>.PacedPathSource()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValueTrack<A><A>.PacedPathSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AnimatedValueTrack<A>.PacedPathSource.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(double *)(a1 + 8), *(double *)(a2 + 8));
}

uint64_t instantiation function for generic protocol witness table for AnimatedValueTrack<A><A>.PacedPathSource(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueTrack<A><A>.PacedPathSource);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void CombinedSource.duration.getter(_QWORD *a1)
{
  (*(void (**)(_QWORD))(a1[5] + 40))(a1[3]);
  (*(double (**)(_QWORD))(a1[6] + 40))(a1[4]);
}

uint64_t CombinedSource.update(value:mix:at:)(uint64_t a1, _QWORD *a2, double a3, double a4)
{
  (*(void (**)(uint64_t, _QWORD))(a2[5] + 24))(a1, a2[3]);
  return (*(uint64_t (**)(uint64_t, _QWORD, double, double))(a2[6] + 24))(a1, a2[4], a3, a4);
}

uint64_t CombinedSource.update(velocity:mix:at:)(uint64_t a1, _QWORD *a2, double a3, double a4)
{
  (*(void (**)(uint64_t, _QWORD))(a2[5] + 32))(a1, a2[3]);
  return (*(uint64_t (**)(uint64_t, _QWORD, double, double))(a2[6] + 32))(a1, a2[4], a3, a4);
}

uint64_t static CombinedSource.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    type metadata accessor for CombinedSource();
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CombinedSource<A, B, C>()
{
  return static CombinedSource.== infix(_:_:)();
}

void AnimatedValueTrackSource.combined<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[6];

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v15, v13);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)v19 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v18, a2, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  v19[1] = swift_getAssociatedTypeWitness();
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = a5;
  type metadata accessor for CombinedSource();
}

void sub_1878FC670(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[3] = a1;
  v5[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CombinedSource<A, B, C>, a1);
  __swift_allocate_boxed_opaque_existential_1(v5);
  (*(void (**)(void))(v7 + 32))();
  *(_QWORD *)(v8 - 120) = v6;
  *(_QWORD *)(v8 - 112) = v4;
  *(_QWORD *)(v8 - 104) = v1;
  *(_QWORD *)(v8 - 96) = v3;
  *(_QWORD *)(v8 - 88) = v2;
  type metadata accessor for CombinedSource();
}

uint64_t sub_1878FC6BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v3 + *(int *)(a1 + 60), v2, v1);
}

uint64_t protocol witness for AnimatedValueTrackSource.update(value:mix:at:) in conformance EmptyAnimatedValueTrackSource<A>(uint64_t a1)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1);
}

uint64_t type metadata accessor for PrependingKeyPathSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrependingKeyPathSource);
}

void type metadata accessor for CombinedSource()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t getEnumTagSinglePayload for CombinedSource(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1878FC7F0 + 4 * byte_187C6BCE0[v17 - 1]))();
}

void storeEnumTagSinglePayload for CombinedSource(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata accessor for EmptyAnimatedValueTrackSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EmptyAnimatedValueTrackSource);
}

uint64_t type metadata completion function for PrependingKeyPathSource()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PrependingKeyPathSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t destroy for PrependingKeyPathSource(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
  return swift_release();
}

uint64_t initializeWithCopy for PrependingKeyPathSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PrependingKeyPathSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PrependingKeyPathSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for PrependingKeyPathSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PrependingKeyPathSource(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1878FCDE8 + 4 * byte_187C6BCEE[v10]))();
  }
}

void storeEnumTagSinglePayload for PrependingKeyPathSource(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1878FCF60()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1878FCFD4);
}

void sub_1878FCF68(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1878FCF70);
  JUMPOUT(0x1878FCFD4);
}

void sub_1878FCFB0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1878FCFD4);
}

void sub_1878FCFB8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1878FCFD4);
}

uint64_t sub_1878FCFC0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1878FCFD4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1878FCFD0);
    JUMPOUT(0x1878FCFCCLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t instantiation function for generic protocol witness table for CombinedSource<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CombinedSource<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for EmptyAnimatedValueTrackSource<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmptyAnimatedValueTrackSource<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PrependingKeyPathSource<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrependingKeyPathSource<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t EnvironmentValues.preferredPencilDoubleTapAction.setter(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a5, a2);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static PencilPreferredAction.switchEraser.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static PencilPreferredAction.switchPrevious.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static PencilPreferredAction.showColorPalette.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static PencilPreferredAction.showInkAttributes.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static PencilPreferredAction.showContextualPalette.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static PencilPreferredAction.runSystemShortcut.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static PencilPreferredAction.ignore.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void PencilPreferredAction.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static PencilPreferredAction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int PencilPreferredAction.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t EnvironmentValues.preferredPencilDoubleTapAction.getter()
{
  return EnvironmentValues.fileDialogDefaultDirectory.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey>, (uint64_t)&type metadata for EnvironmentValues.PreferredPencilDoubleTapActionKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferredPencilDoubleTapActionKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.preferredPencilSqueezeAction.getter()
{
  return EnvironmentValues.fileDialogDefaultDirectory.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey>, (uint64_t)&type metadata for EnvironmentValues.PreferredPencilSqueezeActionKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferredPencilSqueezeActionKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey> and conformance EnvironmentPropertyKey<A>);
}

unint64_t lazy protocol witness table accessor for type PencilPreferredAction and conformance PencilPreferredAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilPreferredAction and conformance PencilPreferredAction;
  if (!lazy protocol witness table cache variable for type PencilPreferredAction and conformance PencilPreferredAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PencilPreferredAction, &type metadata for PencilPreferredAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilPreferredAction and conformance PencilPreferredAction);
  }
  return result;
}

uint64_t sub_1878FD2B8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.preferredPencilDoubleTapAction : EnvironmentValues(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey>, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey> and conformance EnvironmentPropertyKey<A>, a2);
}

uint64_t sub_1878FD2EC(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.preferredPencilDoubleTapAction.setter((uint64_t)&v2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey>, (uint64_t)&type metadata for EnvironmentValues.PreferredPencilDoubleTapActionKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferredPencilDoubleTapActionKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.preferredPencilDoubleTapAction : EnvironmentValues@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X3>, unint64_t *a3@<X6>, _BYTE *a4@<X8>)
{
  uint64_t result;
  char v8;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a3, a2);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a3, a2);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a4 = v8;
  return result;
}

uint64_t sub_1878FD470@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.preferredPencilDoubleTapAction : EnvironmentValues(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey>, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey> and conformance EnvironmentPropertyKey<A>, a2);
}

uint64_t sub_1878FD4A4(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.preferredPencilDoubleTapAction.setter((uint64_t)&v2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey>, (uint64_t)&type metadata for EnvironmentValues.PreferredPencilSqueezeActionKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferredPencilSqueezeActionKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t storeEnumTagSinglePayload for PencilPreferredAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1878FD550 + 4 * byte_187C6BEF5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1878FD584 + 4 * byte_187C6BEF0[v4]))();
}

uint64_t sub_1878FD584(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1878FD58C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1878FD594);
  return result;
}

uint64_t sub_1878FD5A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1878FD5A8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1878FD5AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1878FD5B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PencilPreferredAction.Guts()
{
  return &unk_1E1AD8750;
}

ValueMetadata *type metadata accessor for EnvironmentValues.PreferredPencilSqueezeActionKey()
{
  return &type metadata for EnvironmentValues.PreferredPencilSqueezeActionKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.PreferredPencilDoubleTapActionKey()
{
  return &type metadata for EnvironmentValues.PreferredPencilDoubleTapActionKey;
}

unint64_t lazy protocol witness table accessor for type PencilPreferredAction.Guts and conformance PencilPreferredAction.Guts()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilPreferredAction.Guts and conformance PencilPreferredAction.Guts;
  if (!lazy protocol witness table cache variable for type PencilPreferredAction.Guts and conformance PencilPreferredAction.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PencilPreferredAction.Guts, &unk_1E1AD8750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilPreferredAction.Guts and conformance PencilPreferredAction.Guts);
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVy7SwiftUI22_VariadicView_ChildrenVG_AH8_PreviewVs5NeverOTg505_sSi7f5UI22_hi1_j2V7b5VAA8_k32VIgynr_Si6offset_AE7elementtAGs5l106OIegnrzr_TR03_s7a4UI11g75Host33_67D7E903140A6B255A06DD625425B26ALLC8previewsSayAA01_C0VGvgAGSi_AA22_cd1_e2P19F7VtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[112];
  uint64_t v19;
  _OWORD v20[6];
  uint64_t v21;
  _OWORD v22[6];
  _BYTE v23[56];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  outlined init with copy of EnumeratedSequence<_VariadicView_Children>(a1, (uint64_t)v23);
  v24 = 0;
  v25 = 0;
  if (_VariadicView_Children.endIndex.getter())
  {
    v2 = 0;
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      result = _VariadicView_Children.endIndex.getter();
      if (v2 < 0 || v2 >= result)
        break;
      v24 = v2 + 1;
      *(_OWORD *)&v18[40] = v20[2];
      *(_OWORD *)&v18[56] = v20[3];
      *(_OWORD *)&v18[72] = v20[4];
      *(_OWORD *)&v18[88] = v20[5];
      *(_OWORD *)&v18[8] = v20[0];
      *(_OWORD *)&v18[24] = v20[1];
      v4 = v25;
      if (__OFADD__(v25, 1))
        goto LABEL_15;
      ++v25;
      v22[2] = *(_OWORD *)&v18[40];
      v22[3] = *(_OWORD *)&v18[56];
      v22[4] = *(_OWORD *)&v18[72];
      v22[5] = *(_OWORD *)&v18[88];
      v22[0] = *(_OWORD *)&v18[8];
      v22[1] = *(_OWORD *)&v18[24];
      v21 = v4;
      outlined init with copy of _VariadicView_Children.Element((uint64_t)v22, (uint64_t)v20);
      outlined init with copy of _VariadicView_Children.Element((uint64_t)v20, (uint64_t)v18);
      *(_QWORD *)&v18[96] = v4;
      type metadata accessor for _VariadicView_Children.Element.Type();
      v5 = String.init<A>(describing:)();
      v7 = v6;
      outlined destroy of _VariadicView_Children.Element((uint64_t)v20);
      *(_QWORD *)&v18[104] = v5;
      v19 = v7;
      outlined destroy of (offset: Int, element: _VariadicView_Children.Element)((uint64_t)&v21);
      v8 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
        v8 = v26;
      }
      v10 = *(_QWORD *)(v8 + 16);
      v9 = *(_QWORD *)(v8 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
        v8 = v26;
      }
      *(_QWORD *)(v8 + 16) = v10 + 1;
      v11 = v8 + 120 * v10;
      v12 = *(_OWORD *)v18;
      v13 = *(_OWORD *)&v18[16];
      v14 = *(_OWORD *)&v18[48];
      *(_OWORD *)(v11 + 64) = *(_OWORD *)&v18[32];
      *(_OWORD *)(v11 + 80) = v14;
      *(_OWORD *)(v11 + 32) = v12;
      *(_OWORD *)(v11 + 48) = v13;
      v15 = *(_OWORD *)&v18[64];
      v16 = *(_OWORD *)&v18[80];
      v17 = *(_OWORD *)&v18[96];
      *(_QWORD *)(v11 + 144) = v19;
      *(_OWORD *)(v11 + 112) = v16;
      *(_OWORD *)(v11 + 128) = v17;
      *(_OWORD *)(v11 + 96) = v15;
      v2 = v24;
      if (v2 == _VariadicView_Children.endIndex.getter())
        goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    v8 = v26;
LABEL_13:
    _ss18EnumeratedSequenceVy7SwiftUI22_VariadicView_ChildrenVGWOhTm_0((uint64_t)v23, &lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>.Iterator, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DECC48]);
    return v8;
  }
  return result;
}

uint64_t _PreviewHost.objectWillChange.getter()
{
  return swift_retain();
}

uint64_t key path setter for _PreviewHost.environment : _PreviewHost(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  _QWORD v7[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  v7[0] = v3;
  v7[1] = v2;
  v5 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 112);
  swift_retain();
  swift_retain();
  return v5(v7);
}

uint64_t _PreviewHost.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 32);
  *a1 = *(_QWORD *)(v1 + 24);
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t _PreviewHost.environment.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = v3;
  swift_release();
  return swift_release();
}

uint64_t _PreviewHost.focusedValues.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  int v4;

  swift_beginAccess();
  v3 = *(_BYTE *)(v1 + 48);
  v4 = *(_DWORD *)(v1 + 52);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 40);
  *(_BYTE *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  return swift_retain();
}

uint64_t _PreviewHost.focusedValues.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *((_DWORD *)a1 + 3);
  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = v2;
  *(_BYTE *)(v1 + 48) = v3;
  *(_DWORD *)(v1 + 52) = v4;
  return swift_release();
}

uint64_t static _PreviewHost.makeHost(providerType:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  lazy protocol witness table accessor for type PreviewDescriptor and conformance PreviewDescriptor();
  v0 = static ProtocolDescriptor.conformance(of:)();
  if (!v3)
    return 0;
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for _PreviewHost?();
  static Update.ensure<A>(_:)();
  return v3;
}

unint64_t lazy protocol witness table accessor for type PreviewDescriptor and conformance PreviewDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewDescriptor and conformance PreviewDescriptor;
  if (!lazy protocol witness table cache variable for type PreviewDescriptor and conformance PreviewDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewDescriptor, &type metadata for PreviewDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewDescriptor and conformance PreviewDescriptor);
  }
  return result;
}

uint64_t partial apply for closure #1 in static _PreviewHost.makeHost(providerType:)@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = open #1 <A>(_:) in closure #1 in static _PreviewHost.makeHost(providerType:)(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  *a2 = result;
  return result;
}

void type metadata accessor for _PreviewHost?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreviewHost?)
  {
    type metadata accessor for _PreviewHost();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreviewHost?);
  }
}

uint64_t type metadata accessor for _PreviewHost()
{
  return objc_opt_self();
}

uint64_t open #1 <A>(_:) in closure #1 in static _PreviewHost.makeHost(providerType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PreviewProviderHost(0, a2, a3, a4);
  swift_allocObject();
  return PreviewProviderHost.init()();
}

uint64_t PreviewProviderHost.__allocating_init()()
{
  swift_allocObject();
  return PreviewProviderHost.init()();
}

uint64_t static _PreviewHost.makeHost<A>(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for PreviewHost<AnyView>(0, a2, a3, a4);
  static Update.ensure<A>(_:)();
  return v5;
}

uint64_t closure #1 in static _PreviewHost.makeHost<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v6 = AnyView.init<A>(_:)();
  type metadata accessor for PreviewHost<AnyView>(0, v7, v8, v9);
  swift_allocObject();
  v10 = specialized PreviewHost.init(content:)(v6);
  result = swift_release();
  *a2 = v10;
  return result;
}

uint64_t partial apply for closure #1 in static _PreviewHost.makeHost<A>(content:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in static _PreviewHost.makeHost<A>(content:)(*(_QWORD *)(v1 + 32), a1);
}

void type metadata accessor for PreviewHost<AnyView>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for PreviewHost<AnyView>)
  {
    v4 = type metadata accessor for PreviewHost(0, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for PreviewHost<AnyView>);
  }
}

uint64_t type metadata accessor for PreviewHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PreviewHost);
}

uint64_t _PreviewHost.updateContent<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _WORD v13[4];

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PreviewHost<AnyView>(0, v7, v8, v9);
  result = swift_dynamicCastClass();
  if (result)
  {
    v11 = result;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
    swift_retain();
    v12 = AnyView.init<A>(_:)();
    swift_beginAccess();
    *(_QWORD *)(v11 + 120) = v12;
    swift_retain();
    swift_release();
    mainThreadPrecondition()();
    v13[3] = 1;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PreviewHost<AnyView> and conformance PreviewHost<A>, (uint64_t (*)(uint64_t))type metadata accessor for PreviewHost<AnyView>, (uint64_t)&protocol conformance descriptor for PreviewHost<A>);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall _PreviewHost.invalidateEverything()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void _PreviewHost.previews.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _PreviewHost.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t _PreviewHost.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in _PreviewHost()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for PassthroughSubject<(), Never>, MEMORY[0x1E0C95F48]);
}

void type metadata accessor for PassthroughSubject<(), Never>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PassthroughSubject<(), Never>)
  {
    v0 = type metadata accessor for PassthroughSubject();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PassthroughSubject<(), Never>);
  }
}

double sub_1878FE0B4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 104))(&v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

_QWORD *sub_1878FE0F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  char v4;
  int v5;
  uint64_t v6;
  char v7;
  int v8;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 128))(&v6);
  v4 = v7;
  v5 = v8;
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v5;
  return result;
}

uint64_t sub_1878FE148(uint64_t *a1, uint64_t *a2)
{
  char v2;
  int v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t *);
  uint64_t v7;
  char v8;
  int v9;

  v2 = *((_BYTE *)a1 + 8);
  v3 = *((_DWORD *)a1 + 3);
  v4 = *a2;
  v7 = *a1;
  v8 = v2;
  v9 = v3;
  v5 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v4 + 136);
  swift_retain();
  return v5(&v7);
}

uint64_t method lookup function for _PreviewHost()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _PreviewHost.environment.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of _PreviewHost.environment.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of _PreviewHost.environment.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of _PreviewHost.focusedValues.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of _PreviewHost.focusedValues.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of _PreviewHost.focusedValues.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of _PreviewHost.invalidatePreviews()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of _PreviewHost.invalidateEverything()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of _PreviewHost.previews.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t type metadata completion function for PreviewHost()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

uint64_t PreviewHost.content.didset()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  mainThreadPrecondition()();
  v3 = type metadata accessor for PreviewHost(0, *(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 192), v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewHost<A>, v3);
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t PreviewHost.environment.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a1[1];
  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = v3;
  swift_release();
  swift_release();
  return PreviewHost.environment.didset(2, v4, v5, v6);
}

void (*PreviewHost.environment.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance TypeSelectHost<A>();
  return PreviewHost.environment.modify;
}

void PreviewHost.environment.modify(_QWORD *a1, char a2)
{
  PreviewHost.environment.modify(a1, a2, 2);
}

uint64_t PreviewHost.environment.didset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for PreviewHost(0, *(_QWORD *)(*(_QWORD *)v4 + 184), *(_QWORD *)(*(_QWORD *)v4 + 192), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewHost<A>, v5);
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t PreviewHost.focusedValues.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *((_DWORD *)a1 + 3);
  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = v2;
  *(_BYTE *)(v1 + 48) = v3;
  *(_DWORD *)(v1 + 52) = v4;
  swift_release();
  return PreviewHost.environment.didset(4, v5, v6, v7);
}

void (*PreviewHost.focusedValues.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance TypeSelectHost<A>();
  return PreviewHost.focusedValues.modify;
}

void PreviewHost.focusedValues.modify(_QWORD *a1, char a2)
{
  PreviewHost.environment.modify(a1, a2, 4);
}

void PreviewHost.environment.modify(_QWORD *a1, char a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  if ((a2 & 1) == 0)
    PreviewHost.environment.didset(a3, v6, v7, v8);
  free(v5);
}

void PreviewHost.invalidateEverything()()
{
  id v0;

  mainThreadPrecondition()();
  static Update.ensure<A>(_:)();
  v0 = (id)GraphHost.graph.getter();
  AGGraphInvalidateAllValues();

}

uint64_t PreviewHost.previews.getter()
{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  _BYTE v4[56];
  _BYTE v5[24];
  uint64_t v6;
  uint64_t v7;

  mainThreadPrecondition()();
  MEMORY[0x18D75B908]();
  if (*(_DWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 296)) == *MEMORY[0x1E0CFED28])
  {
    v6 = MEMORY[0x1E0CE1EA8];
    v7 = MEMORY[0x1E0CE1EA0];
  }
  else
  {
    type metadata accessor for ViewList();
    Value = AGGraphGetValue();
    outlined init with copy of TableColumnList(Value, (uint64_t)v5);
  }
  _ViewList_Subgraph.wrapping(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  GraphHost.rootSubgraph.getter();
  default argument 2 of _VariadicView_Children.init(_:contentSubgraph:transform:)();
  _VariadicView_Children.init(_:contentSubgraph:transform:)();
  PreviewHost.renderUntilStable()();
  outlined init with copy of _VariadicView_Children((uint64_t)v5, (uint64_t)v4);
  v2 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVy7SwiftUI22_VariadicView_ChildrenVG_AH8_PreviewVs5NeverOTg505_sSi7f5UI22_hi1_j2V7b5VAA8_k32VIgynr_Si6offset_AE7elementtAGs5l106OIegnrzr_TR03_s7a4UI11g75Host33_67D7E903140A6B255A06DD625425B26ALLC8previewsSayAA01_C0VGvgAGSi_AA22_cd1_e2P19F7VtXEfU_Tf3nnnpf_nTf1cn_n((uint64_t)v4);
  _ss18EnumeratedSequenceVy7SwiftUI22_VariadicView_ChildrenVGWOhTm_0((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DECC58]);
  outlined destroy of _VariadicView_Children((uint64_t)v5);
  static Update.end()();
  return v2;
}

uint64_t PreviewHost.renderUntilStable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = 32;
  while (1)
  {
    *(_WORD *)(v0 + 112) = 1;
    AGGraphClearUpdate();
    closure #1 in PreviewHost.renderUntilStable()(v0, v2, v3, v4);
    result = AGGraphSetUpdate();
    if (*(_BYTE *)(v0 + 113) != 1)
      break;
    *(_BYTE *)(v0 + 112) = 0;
    if (!--v1)
      return result;
  }
  *(_BYTE *)(v0 + 112) = 0;
  return result;
}

uint64_t closure #1 in PreviewHost.renderUntilStable()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for PreviewHost(0, *(_QWORD *)(*(_QWORD *)a1 + 184), *(_QWORD *)(*(_QWORD *)a1 + 192), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewHost<A>, v4);
  return ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
}

uint64_t PreviewHost.updateRootView()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t);
  int v14;
  uint64_t v15;
  void (*v16)(_BYTE *, uint64_t);
  _BYTE v18[15];
  _BYTE v19[16];
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)v2 + 184);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v18[-v9];
  v12 = v2 + *(_QWORD *)(v11 + 280);
  swift_beginAccess();
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16);
  v13(v10, v12, v3);
  v14 = *(_DWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 288));
  v13(v6, (uint64_t)v10, v3);
  v20 = v3;
  v21 = v14;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)partial apply for closure #1 in Attribute.setValue(_:), (uint64_t)v19, v3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v15);
  v16 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v16(v6, v3);
  return ((uint64_t (*)(_BYTE *, uint64_t))v16)(v10, v3);
}

uint64_t PreviewHost.updateEnvironment()()
{
  uint64_t v0;
  uint64_t v2;

  _PreviewHost.environment.getter(&v2);
  v0 = swift_retain();
  specialized EnvironmentValues.sceneStorageValues.setter(v0);
  swift_release();
  swift_retain();
  swift_retain();
  GraphHost.setEnvironment(_:)();
  swift_release_n();
  return swift_release_n();
}

uint64_t PreviewHost.updateFocusedValues()()
{
  swift_beginAccess();
  swift_retain();
  ViewGraph.setFocusedValues(_:)();
  return swift_release();
}

uint64_t PreviewHost.__ivar_destroyer()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 184) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 280));
}

uint64_t *PreviewHost.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 184) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 280));
  return v0;
}

uint64_t PreviewHost.__deallocating_deinit()
{
  PreviewHost.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for PreviewProviderHost()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for ViewRendererHost.viewGraph.getter in conformance PreviewHost<A>()
{
  return swift_retain();
}

double protocol witness for ViewRendererHost.currentTimestamp.getter in conformance PreviewHost<A>@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  swift_beginAccess();
  result = *(double *)(v1 + 88);
  *a1 = result;
  return result;
}

uint64_t protocol witness for ViewRendererHost.currentTimestamp.setter in conformance PreviewHost<A>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_QWORD *)(v1 + 88) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.currentTimestamp.modify in conformance PreviewHost<A>())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.getter in conformance PreviewHost<A>@<X0>(_WORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_WORD *)(v1 + 80);
  return result;
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.setter in conformance PreviewHost<A>(__int16 *a1)
{
  uint64_t v1;
  __int16 v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_WORD *)(v1 + 80) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance PreviewHost<A>())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.getter in conformance PreviewHost<A>@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 82);
  return result;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.setter in conformance PreviewHost<A>(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 82) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.renderingPhase.modify in conformance PreviewHost<A>())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for ViewRendererHost.externalUpdateCount.getter in conformance PreviewHost<A>()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 96);
}

uint64_t protocol witness for ViewRendererHost.externalUpdateCount.setter in conformance PreviewHost<A>(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 96) = a1;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance PreviewHost<A>())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewGraphDelegate.as<A>(_:) in conformance PreviewHost<A1>()
{
  return ViewGraphDelegate.as<A>(_:)();
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance PreviewHost<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewHost<A>, a4);
  return ViewRendererHost.updateViewGraph<A>(body:)();
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance PreviewHost<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewHost<A>, a4);
  return ViewGraphDelegate.updateGraph<A>(body:)();
}

void protocol witness for GraphDelegate.graphDidChange() in conformance PreviewHost<A1>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewHost<A>, a1);
  ViewRendererHost.graphDidChange()();
}

uint64_t PreviewProviderHost.init()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 368);
  v3 = *(_QWORD *)(v1 + 376);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v9 = (char *)&v13 - v8;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 32))(v2, v3, v7);
  v11 = specialized PreviewHost.init(content:)((uint64_t)v9, v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, AssociatedTypeWitness);
  return v11;
}

uint64_t PreviewProviderHost.invalidatePreviews()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 368);
  v3 = *(_QWORD *)(v1 + 376);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 32))(v2, v3, v7);
  specialized PreviewHost.content.setter((uint64_t)v9);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, AssociatedTypeWitness);
}

uint64_t type metadata accessor for PreviewProviderHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PreviewProviderHost);
}

void base witness table accessor for GraphDelegate in PreviewHost<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for ViewGraphDelegate in PreviewHost<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized PreviewHost.requestUpdate(after:)()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 112) & 1) != 0)
  {
    *(_BYTE *)(v0 + 113) = 1;
  }
  else
  {
    swift_retain();
    static Update.enqueueAction(_:)();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in PreviewHost.requestUpdate(after:)()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for PassthroughSubject<(), Never>, MEMORY[0x1E0C95F40]);
  return Subject<>.send()();
}

uint64_t specialized PreviewHost.init(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  unint64_t v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;

  v3 = v2;
  v39 = a1;
  v63 = *MEMORY[0x1E0C80C00];
  v40 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(v40 + 184);
  v38 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EventBindingManager();
  swift_retain();
  *(_QWORD *)(v2 + 72) = EventBindingManager.__allocating_init()();
  *(_WORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 82) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  v7 = MEMORY[0x1E0DEE9D8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for SceneStorageValues();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v7);
  *(_QWORD *)(v9 + 48) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v3 + 104) = v9;
  *(_WORD *)(v3 + 112) = 0;
  *(_DWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 296)) = *MEMORY[0x1E0CFED28];
  LOBYTE(v53) = 0;
  type metadata accessor for ViewGraph();
  swift_allocObject();
  *(_QWORD *)(v3 + 56) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v10 = swift_retain();
  v11 = specialized FocusViewGraph.init(graph:)(v10);
  v13 = v12;
  v15 = v14;
  LODWORD(v9) = v16;
  swift_release();
  v53 = v11;
  v54 = v13;
  v55 = v15;
  LOWORD(v56) = v9 & 0x101;
  BYTE2(v56) = BYTE2(v9) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  ViewGraph.setRootView<A>(_:)();
  v17 = (void *)GraphHost.rootSubgraph.getter();
  AGSubgraphSetCurrent();

  type metadata accessor for _ViewList_Subgraph();
  GraphHost.rootSubgraph.getter();
  *(_QWORD *)(v3 + 64) = _ViewList_Subgraph.__allocating_init(subgraph:)();
  v18 = v38;
  v19 = v39;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
  v20(v3 + *(_QWORD *)(*(_QWORD *)v3 + 280), v39, v4);
  v20((uint64_t)v6, v19, v4);
  v41[2] = v4;
  v21 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v41, v4, MEMORY[0x1E0DEDCE8], v21, MEMORY[0x1E0DEDD18], v22);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v4);
  *(_DWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 288)) = v53;
  swift_release();
  type metadata accessor for PassthroughSubject<(), Never>();
  swift_allocObject();
  *(_QWORD *)(v3 + 16) = PassthroughSubject.init()();
  EnvironmentValues.init()();
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 52) = 0;
  v40 = *(_QWORD *)(v40 + 192);
  v24 = type metadata accessor for PreviewHost(0, v4, v40, v23);
  swift_retain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewHost<A>, v24);
  ViewRendererHost.initializeViewGraph()();
  v25 = *(_QWORD *)(v3 + 56);
  swift_beginAccess();
  v26 = *(_DWORD *)(v25 + 80);
  v27 = *(_QWORD *)(v25 + 88);
  v28 = *(_QWORD *)(v25 + 112);
  v42 = *(_QWORD *)(v25 + 72);
  v43 = v26;
  v44 = v27;
  v45 = *(_OWORD *)(v25 + 96);
  v46 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListInputs.init(_:)();
  v29 = v59 | 0x400;
  _GraphValue.init(_:)();
  v30 = v53;
  LODWORD(v15) = v54;
  LODWORD(v13) = DWORD1(v56);
  LODWORD(v19) = HIDWORD(v56);
  v36 = DWORD2(v56);
  v37 = v56;
  v32 = v57;
  v31 = v58;
  LODWORD(v39) = v60;
  v34 = v61;
  v35 = v55;
  LODWORD(v38) = v62;
  v42 = v53;
  v43 = v54;
  v44 = v55;
  v45 = v56;
  v46 = v57;
  v47 = v58;
  v48 = v29;
  v49 = v60;
  v50 = v61;
  v51 = v62;
  static View.makeDebuggableViewList(view:inputs:)();
  v42 = v30;
  v43 = v15;
  v44 = v35;
  *(_QWORD *)&v45 = __PAIR64__(v13, v37);
  *((_QWORD *)&v45 + 1) = __PAIR64__(v19, v36);
  v46 = v32;
  v47 = v31;
  v48 = v29;
  v49 = v39;
  v50 = v34;
  v51 = v38;
  *(_DWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 296)) = _ViewListOutputs.makeAttribute(inputs:)();
  outlined destroy of _ViewListOutputs((uint64_t)&v52);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  AGSubgraphSetCurrent();
  swift_release();
  return v3;
}

uint64_t specialized PreviewHost.init(content:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[72];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  char v24;
  uint64_t v25;

  v2 = v1;
  v25 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EventBindingManager();
  swift_retain();
  *(_QWORD *)(v1 + 72) = EventBindingManager.__allocating_init()();
  *(_WORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 82) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for SceneStorageValues();
  v6 = (_QWORD *)swift_allocObject();
  v6[3] = specialized Dictionary.init(dictionaryLiteral:)(v4);
  v6[6] = 0;
  swift_unknownObjectWeakInit();
  v6[2] = v5;
  v6[4] = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v2 + 104) = v6;
  *(_WORD *)(v2 + 112) = 0;
  *(_DWORD *)(v2 + 132) = *MEMORY[0x1E0CFED28];
  type metadata accessor for ViewGraph();
  swift_allocObject();
  *(_QWORD *)(v2 + 56) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v7 = swift_retain();
  specialized FocusViewGraph.init(graph:)(v7);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  swift_release();
  v21 = v9;
  v22 = v11;
  v23 = v13 & 0x101;
  v24 = BYTE2(v13) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  ViewGraph.setRootView<A>(_:)();
  v14 = (void *)GraphHost.rootSubgraph.getter();
  AGSubgraphSetCurrent();

  type metadata accessor for _ViewList_Subgraph();
  GraphHost.rootSubgraph.getter();
  *(_QWORD *)(v2 + 64) = _ViewList_Subgraph.__allocating_init(subgraph:)();
  *(_QWORD *)(v2 + 120) = a1;
  v20 = a1;
  type metadata accessor for External<AnyView>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type External<AnyView> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<AnyView>, MEMORY[0x1E0CFED00]);
  swift_retain();
  *(_DWORD *)(v2 + 128) = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  type metadata accessor for PassthroughSubject<(), Never>();
  swift_allocObject();
  *(_QWORD *)(v2 + 16) = PassthroughSubject.init()();
  EnvironmentValues.init()();
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 52) = 0;
  type metadata accessor for PreviewHost<AnyView>(0, v15, v16, v17);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PreviewHost<AnyView> and conformance PreviewHost<A>, (uint64_t (*)(uint64_t))type metadata accessor for PreviewHost<AnyView>, (uint64_t)&protocol conformance descriptor for PreviewHost<A>);
  swift_retain();
  ViewRendererHost.initializeViewGraph()();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListInputs.init(_:)();
  _GraphValue.init(_:)();
  static View.makeDebuggableViewList(view:inputs:)();
  *(_DWORD *)(v2 + 132) = _ViewListOutputs.makeAttribute(inputs:)();
  outlined destroy of _ViewListOutputs((uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  AGSubgraphSetCurrent();
  swift_release();
  return v2;
}

uint64_t specialized PreviewHost.content.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 280);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 184) - 8) + 24))(v4, a1);
  swift_endAccess();
  return PreviewHost.content.didset();
}

uint64_t sub_1878FFB18()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in PreviewHost.invalidateEverything()()
{
  GraphHost.incrementPhase()();
}

void type metadata accessor for External<AnyView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<AnyView>)
  {
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<AnyView>);
  }
}

ValueMetadata *type metadata accessor for ToolbarControlGroupStyle()
{
  return &type metadata for ToolbarControlGroupStyle;
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in ToolbarControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t static ToolbarControlGroupStyle.CollapsedViewModifier._makeViewList(modifier:inputs:body:)@<X0>(unint64_t *a1@<X1>, void (*a2)(uint64_t, unint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  unint64_t v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, unint64_t *);
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49[6];
  unint64_t v50;
  id v51;
  unint64_t v52;
  __int128 v53;
  unint64_t v54;
  __int128 v55;
  int v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  __int128 v62;
  unint64_t v63;
  __int128 v64;
  int v65;
  unint64_t v66;
  char v67;
  char v68[72];
  uint64_t v69;

  v34 = a3;
  v35 = (void (*)(uint64_t, unint64_t *))a2;
  v33 = a6;
  v69 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *((_DWORD *)a1 + 2);
  v10 = a1[2];
  v38 = *((_DWORD *)a1 + 6);
  v11 = *((_DWORD *)a1 + 8);
  v41 = *((_DWORD *)a1 + 7);
  v42 = v9;
  v47 = *((_DWORD *)a1 + 9);
  v48 = v11;
  v12 = a1[5];
  v44 = a1[6];
  v45 = v8;
  v39 = a1[7];
  v46 = *((_DWORD *)a1 + 16);
  v36 = a1[9];
  v37 = v12;
  v43 = *((unsigned __int8 *)a1 + 80);
  v49[4] = a4;
  v49[5] = a5;
  type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier(255, a4, a5, a3);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v31 = a4;
  v32 = a5;
  static View.makeDebuggableViewList(view:inputs:)();
  v30 = _ViewListOutputs.makeAttribute(inputs:)();
  v59 = v45;
  v60 = v42;
  v40 = v10;
  v61 = v10;
  *(_QWORD *)&v62 = __PAIR64__(v41, v38);
  *((_QWORD *)&v62 + 1) = __PAIR64__(v47, v11);
  v63 = v37;
  *(_QWORD *)&v64 = v44;
  *((_QWORD *)&v64 + 1) = v39;
  v65 = v46;
  v66 = v36;
  v67 = v43;
  v13 = _ViewListInputs.traits.getter();
  v14 = (id)AGSubgraphGetCurrent();
  if (!v14)
    __break(1u);
  v15 = v14;
  v16 = *MEMORY[0x1E0CFED28];
  v59 = v45;
  v60 = v42;
  v61 = v40;
  *(_QWORD *)&v62 = __PAIR64__(v41, v38);
  *((_QWORD *)&v62 + 1) = __PAIR64__(v47, v48);
  v63 = v37;
  *(_QWORD *)&v64 = v44;
  *((_QWORD *)&v64 + 1) = v39;
  v65 = v46;
  v66 = v36;
  v67 = v43;
  if (v36)
  {
    v50 = v36;
    LOBYTE(v51) = v43 & 1;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = specialized Set._Variant.insert(_:)(v49, (uint64_t)&type metadata for ControlGroupCollapsedViewKey);
    v66 = v50;
    v67 = (char)v51;
  }
  else
  {
    swift_retain();
    swift_retain();
    v17 = swift_bridgeObjectRetain();
  }
  if ((v13 & 0x100000000) != 0)
    v19 = v16;
  else
    v19 = v13;
  v50 = __PAIR64__(v19, v30);
  v51 = v15;
  MEMORY[0x1E0C80A78](v17, v18);
  v28 = type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait(0, v31, v32, v20);
  v29 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarControlGroupStyle.CollapsedViewModifier<A>.AddTrait, v28);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>, MEMORY[0x1E0CE4B38], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v22 = v21;
  v23 = v15;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v50, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_21, (uint64_t)&v27, v28, MEMORY[0x1E0DEDCE8], v22, MEMORY[0x1E0DEDD18], v24);

  LOBYTE(v50) = 0;
  _ViewListInputs.traits.setter();
  v50 = v59;
  LODWORD(v51) = v60;
  v52 = v61;
  v53 = v62;
  v54 = v63;
  v55 = v64;
  v56 = v65;
  v57 = v66;
  v58 = v67;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v25 = swift_bridgeObjectRetain();
  v35(v25, &v50);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();

  return outlined destroy of _ViewListOutputs((uint64_t)v68);
}

uint64_t closure #1 in static ToolbarControlGroupStyle.CollapsedViewModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait.value.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t Value;
  id v6;
  uint64_t result;
  uint64_t v8[12];
  _OWORD v9[5];
  uint64_t v10;
  _BYTE v11[56];
  uint64_t v12;

  TableRow.MakeList.traits.getter(a1, v8);
  if (v8[0])
    v12 = v8[0];
  else
    ViewTraitCollection.init()();
  type metadata accessor for ViewList();
  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)v8);
  v6 = a2;
  default argument 2 of _VariadicView_Children.init(_:contentSubgraph:transform:)();
  _VariadicView_Children.init(_:contentSubgraph:transform:)();
  if (_VariadicView_Children.endIndex.getter())
  {
    _VariadicView_Children.subscript.getter();
    outlined init with copy of _ViewList_View((uint64_t)v8, (uint64_t)v9);
    outlined destroy of _VariadicView_Children.Element((uint64_t)v8);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
    v10 = 0;
  }
  outlined init with copy of _ViewList_View?((uint64_t)v9, (uint64_t)v8);
  ViewTraitCollection.subscript.setter();
  outlined destroy of _ViewList_View?((uint64_t)v9);
  result = outlined destroy of _VariadicView_Children((uint64_t)v11);
  *a3 = v12;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarControlGroupStyle.CollapsedViewModifier<A>.AddTrait@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait.value.getter(*(_QWORD *)v1, *(void **)(v1 + 8), a1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ToolbarControlGroupStyle.CollapsedViewModifier<A>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OnChangeOfSuggestionsModifier(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ToolbarControlGroupStyle.CollapsedViewModifier<A>@<X0>(unint64_t *a1@<X1>, void (*a2)(uint64_t, unint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static ToolbarControlGroupStyle.CollapsedViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

double protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance ToolbarControlGroupStyle@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

uint64_t getEnumTagSinglePayload for ToolbarControlGroupStyle.CollapsedViewModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187900334 + 4 * byte_187C6C370[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ToolbarControlGroupStyle.CollapsedViewModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarControlGroupStyle.CollapsedViewModifier);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>();
    v3[1] = &protocol witness table for ToolbarControlGroupStyle.CollapsedViewModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>>)
  {
    type metadata accessor for Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>();
    type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>>);
  }
}

void type metadata accessor for Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>)
  {
    v0 = type metadata accessor for Section(0, MEMORY[0x1E0CE7C38], (uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, MEMORY[0x1E0CE7C38]);
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>);
  }
}

void type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>)
  {
    v2 = type metadata accessor for Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>();
    v3 = lazy protocol witness table accessor for type Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content> and conformance Menu<A, B>();
    v5 = type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>);
  }
}

uint64_t type metadata accessor for Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>;
  if (!lazy cache variable for type metadata for Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>)
    type metadata accessor for Menu();
  return result;
}

unint64_t lazy protocol witness table accessor for type Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content> and conformance Menu<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content> and conformance Menu<A, B>;
  if (!lazy protocol witness table cache variable for type Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content> and conformance Menu<A, B>)
  {
    v1 = type metadata accessor for Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Menu<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content> and conformance Menu<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[3];

  result = lazy protocol witness table cache variable for type Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>;
  if (!lazy protocol witness table cache variable for type Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>)
  {
    type metadata accessor for Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>();
    v2[0] = MEMORY[0x1E0CE7C28];
    v2[1] = &protocol witness table for ControlGroupStyleConfiguration.Content;
    v2[2] = MEMORY[0x1E0CE7C28];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in ToolbarControlGroupStyle.CollapsedViewModifier<A>()
{
  return &protocol witness table for ToolbarControlGroupStyle.CollapsedViewModifier<A>;
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance ControlGroupCollapsedViewKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of _ViewList_View?((uint64_t)&static ControlGroupCollapsedViewKey.defaultValue, a1);
}

uint64_t outlined init with copy of _ViewList_View?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E0CE0A40], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in static ToolbarControlGroupStyle.CollapsedViewModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static ToolbarControlGroupStyle.CollapsedViewModifier._makeViewList(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait);
}

_QWORD *initializeBufferWithCopyOfBuffer for ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  *a1 = *a2;
  v3 = (void *)a2[1];
  a1[1] = v3;
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v3 = *(void **)(a2 + 8);
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v5 = v3;

  return a1;
}

_QWORD *assignWithTake for ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait(_QWORD *a1, _QWORD *a2)
{
  void *v3;

  *a1 = *a2;
  v3 = (void *)a1[1];
  a1[1] = a2[1];

  return a1;
}

ValueMetadata *type metadata accessor for ControlGroupCollapsedViewKey()
{
  return &type metadata for ControlGroupCollapsedViewKey;
}

void base witness table accessor for _AttributeBody in ToolbarControlGroupStyle.CollapsedViewModifier<A>.AddTrait()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined destroy of _ViewList_View?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E0CE0A40], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Gesture<>.callbacks(pressing:pressed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)();
  uint64_t v32;

  v27 = a4;
  v26 = a2;
  v28 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for PressableGestureCallbacks(255, AssociatedTypeWitness, a7, v14);
  v24 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PressableGestureCallbacks<A>, v15);
  v29 = type metadata accessor for CallbacksGesture();
  v30 = a5;
  v31 = (uint64_t (*)())MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3150], v29);
  v32 = a6;
  v16 = type metadata accessor for ModifierGesture();
  v25 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v24 - v18;
  v20 = swift_allocObject();
  v21 = v26;
  v22 = v27;
  *(_QWORD *)(v20 + 16) = a3;
  *(_QWORD *)(v20 + 24) = v22;
  v29 = a1;
  v30 = v21;
  v31 = partial apply for closure #1 in static UIView.animate(_:changes:completion:);
  v32 = v20;
  outlined copy of AppIntentExecutor?(a1);
  outlined copy of AppIntentExecutor?(a3);
  Gesture.callbacks<A>(_:)();
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a1, v21);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(partial apply for closure #1 in static UIView.animate(_:changes:completion:), v20);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E88], v16);
  Gesture.cancellable()();
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v19, v16);
}

uint64_t (*PressableGestureCallbacks.dispatch(phase:state:)(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t a1), uint64_t a6, uint64_t a7, uint64_t a8))()
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  int EnumCaseMultiPayload;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t (*v30)(uint64_t);
  void (*v31)(char *, char *, uint64_t);
  int v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)();
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  char v55;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;

  v59 = a4;
  v60 = a8;
  v57 = a6;
  v58 = a5;
  v61 = a3;
  v11 = *(_QWORD *)(a7 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v57 - v16;
  v18 = type metadata accessor for GesturePhase();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v57 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v57 - v22, a1, v18, v21);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v30 = v58;
    v31 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v31(v17, v23, a7);
    v32 = *a2;
    *a2 = 0;
    if (v32 == 1 && v61)
    {
      if (v30)
      {
        v31(v13, v17, a7);
        v33 = (*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
        v34 = (_QWORD *)swift_allocObject();
        v35 = v60;
        v36 = v61;
        v34[2] = a7;
        v34[3] = v35;
        v37 = v59;
        v34[4] = v36;
        v34[5] = v37;
        v38 = (char *)v34 + v33;
        v39 = v57;
        v34[6] = v30;
        v34[7] = v39;
        v31(v38, v13, a7);
        outlined copy of AppIntentExecutor?(v36);
        outlined copy of AppIntentExecutor?((uint64_t)v30);
        return partial apply for closure #1 in PressableGestureCallbacks.dispatch(phase:state:);
      }
      else
      {
        v49 = *(void (**)(char *, uint64_t))(v11 + 8);
        v50 = v59;
        swift_retain();
        v49(v17, a7);
        v51 = swift_allocObject();
        *(_QWORD *)(v51 + 16) = v61;
        *(_QWORD *)(v51 + 24) = v50;
        return partial apply for closure #1 in Coordinator.menuWillDismiss();
      }
    }
    else
    {
      v46 = (uint64_t)v30;
      if (v30)
      {
        v47 = swift_allocObject();
        v48 = v57;
        *(_QWORD *)(v47 + 16) = v30;
        *(_QWORD *)(v47 + 24) = v48;
        v30 = partial apply for thunk for @escaping @callee_guaranteed (@unowned CGPoint?) -> ();
      }
      else
      {
        v47 = 0;
      }
      v52 = v60;
      v53 = *(uint64_t (**)(uint64_t, uint64_t))(v60 + 16);
      outlined copy of AppIntentExecutor?(v46);
      v62 = v53(a7, v52);
      v63 = v54;
      v64 = v55 & 1;
      type metadata accessor for CGPoint?();
      v40 = bind<A>(_:_:)();
      outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v30, v47);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, a7);
    }
  }
  else
  {
    if (EnumCaseMultiPayload == 3)
    {
      v25 = *a2;
      *a2 = 0;
      if (v25 == 1)
      {
        v26 = v61;
        if (v61)
        {
          v27 = swift_allocObject();
          v28 = v59;
          *(_QWORD *)(v27 + 16) = v26;
          *(_QWORD *)(v27 + 24) = v28;
          v29 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
        }
        else
        {
          v29 = 0;
          v27 = 0;
        }
        LOBYTE(v62) = 0;
        outlined copy of AppIntentExecutor?(v26);
        v40 = bind<A>(_:_:)();
        outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v29, v27);
        return (uint64_t (*)())v40;
      }
      return 0;
    }
    v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 24))(a1, a7) & 1;
    if (v41 == *a2)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
      return 0;
    }
    *a2 = v41;
    v42 = v61;
    if (v61)
    {
      v43 = swift_allocObject();
      v44 = v59;
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = v44;
      v45 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
    }
    else
    {
      v45 = 0;
      v43 = 0;
    }
    LOBYTE(v62) = v41;
    outlined copy of AppIntentExecutor?(v42);
    v40 = bind<A>(_:_:)();
    outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v45, v43);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
  }
  return (uint64_t (*)())v40;
}

uint64_t PressableGestureCallbacks.cancel(state:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(unsigned __int8 *);
  uint64_t v7;

  if ((a1 & 1) == 0)
    return 0;
  if (a2)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a2;
    *(_QWORD *)(v5 + 24) = a3;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  outlined copy of AppIntentExecutor?(a2);
  v7 = bind<A>(_:_:)();
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v6, v5);
  return v7;
}

uint64_t (*protocol witness for GestureCallbacks.dispatch(phase:state:) in conformance PressableGestureCallbacks<A>(uint64_t a1, _BYTE *a2, uint64_t a3))()
{
  uint64_t v3;

  return PressableGestureCallbacks.dispatch(phase:state:)(a1, a2, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(uint64_t (**)(uint64_t))(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for GestureCallbacks.cancel(state:) in conformance PressableGestureCallbacks<A>(char *a1)
{
  uint64_t *v1;

  return PressableGestureCallbacks.cancel(state:)(*a1, *v1, v1[1]);
}

BOOL protocol witness for static PressableEventValue.isPressing(_:) in conformance CGPoint(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17) - 1 < 2 || !*(_BYTE *)(a1 + 17) && (*(_BYTE *)(a1 + 16) & 1) == 0;
}

unint64_t instantiation function for generic protocol witness table for CGPoint(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type CGPoint and conformance CGPoint();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CGPoint and conformance CGPoint()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CGPoint and conformance CGPoint;
  if (!lazy protocol witness table cache variable for type CGPoint and conformance CGPoint)
  {
    type metadata accessor for CGPoint(255);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0C9BA28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint);
  }
  return result;
}

uint64_t protocol witness for static PressableEventValue.isPressing(_:) in conformance PhysicalButtonEvent(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 25) - 1 >= 2)
  {
    if (*(_BYTE *)(a1 + 25))
      return 0;
    if (*(_QWORD *)(a1 + 16) == 1)
    {
      outlined consume of GesturePhase<PhysicalButtonEvent>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1, *(unsigned __int8 *)(a1 + 24), 0);
      return 0;
    }
  }
  return 1;
}

unint64_t instantiation function for generic protocol witness table for PhysicalButtonEvent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PhysicalButtonEvent and conformance PhysicalButtonEvent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicalButtonEvent and conformance PhysicalButtonEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicalButtonEvent and conformance PhysicalButtonEvent;
  if (!lazy protocol witness table cache variable for type PhysicalButtonEvent and conformance PhysicalButtonEvent)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4880], MEMORY[0x1E0CE4878]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonEvent and conformance PhysicalButtonEvent);
  }
  return result;
}

uint64_t protocol witness for static PressableEventValue.isPressing(_:) in conformance SpatialEvent(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 72) - 1 >= 2)
  {
    if (*(_BYTE *)(a1 + 72))
      return 0;
    if (*(_QWORD *)(a1 + 16) == 1)
    {
      outlined consume of GesturePhase<SpatialEvent>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 0);
      return 0;
    }
  }
  return 1;
}

unint64_t instantiation function for generic protocol witness table for SpatialEvent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SpatialEvent and conformance SpatialEvent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEvent and conformance SpatialEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialEvent and conformance SpatialEvent;
  if (!lazy protocol witness table cache variable for type SpatialEvent and conformance SpatialEvent)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1928], MEMORY[0x1E0CE1920]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEvent and conformance SpatialEvent);
  }
  return result;
}

uint64_t protocol witness for static PressableEventValue.isPressing(_:) in conformance TappableEvent(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) - 1 >= 2)
  {
    if (*(_BYTE *)(a1 + 24))
      return 0;
    if (*(_QWORD *)(a1 + 16) == 1)
    {
      outlined consume of GesturePhase<TappableEvent>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1, 0);
      return 0;
    }
  }
  return 1;
}

unint64_t instantiation function for generic protocol witness table for TappableEvent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TappableEvent and conformance TappableEvent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TappableEvent and conformance TappableEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TappableEvent and conformance TappableEvent;
  if (!lazy protocol witness table cache variable for type TappableEvent and conformance TappableEvent)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2080], MEMORY[0x1E0CE2078]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TappableEvent and conformance TappableEvent);
  }
  return result;
}

uint64_t protocol witness for static PressableEventValue.isPressing(_:) in conformance TappableSpatialEvent(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 64) - 1 >= 2)
  {
    if (*(_BYTE *)(a1 + 64))
      return 0;
    if (*(_QWORD *)(a1 + 16) == 1)
    {
      outlined consume of GesturePhase<TappableSpatialEvent>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), 0);
      return 0;
    }
  }
  return 1;
}

unint64_t instantiation function for generic protocol witness table for TappableSpatialEvent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TappableSpatialEvent and conformance TappableSpatialEvent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TappableSpatialEvent and conformance TappableSpatialEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TappableSpatialEvent and conformance TappableSpatialEvent;
  if (!lazy protocol witness table cache variable for type TappableSpatialEvent and conformance TappableSpatialEvent)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4E88], MEMORY[0x1E0CE4E80]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TappableSpatialEvent and conformance TappableSpatialEvent);
  }
  return result;
}

uint64_t protocol witness for PressableEventValue.pressLocation.getter in conformance SpatialLongPressGesture.Value()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

BOOL protocol witness for static PressableEventValue.isPressing(_:) in conformance SpatialLongPressGesture.Value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17) - 1 < 2 || !*(_BYTE *)(a1 + 17) && *(_BYTE *)(a1 + 16) != 2;
}

unint64_t instantiation function for generic protocol witness table for SpatialLongPressGesture.Value(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for PressableGestureCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PressableGestureCallbacks);
}

uint64_t sub_187901524()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for CGPoint?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CGPoint?)
  {
    type metadata accessor for CGPoint(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CGPoint?);
  }
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned CGPoint?) -> ()(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_1879015C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PressableGestureCallbacks.dispatch(phase:state:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(uint64_t (**)(uint64_t))(v0 + 48);
  (*(void (**)(_QWORD))(v0 + 32))(0);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  return v3(v4);
}

uint64_t closure #1 in Gesture<>.callbacks(pressing:pressed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;

  if (a4)
    return a4();
  return result;
}

uint64_t sub_1879016D4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t outlined consume of GesturePhase<TappableSpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 2 || a9 == 1)
    return swift_release();
  if (!a9)
    return outlined consume of HitTestableEvent?(result, a2, a3);
  return result;
}

uint64_t outlined consume of GesturePhase<TappableEvent>(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2 || a4 == 1)
    return swift_release();
  if (!a4)
    return outlined consume of HitTestableEvent?(result, a2, a3);
  return result;
}

uint64_t outlined consume of GesturePhase<PhysicalButtonEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 2 || a5 == 1)
    return swift_release();
  if (!a5)
    return outlined consume of HitTestableEvent?(result, a2, a3);
  return result;
}

void DoubleColumnNavigationViewStyle._body(configuration:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void DoubleColumnNavigationViewStyle._columnBasedBody(configuration:)(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body : View in DoubleColumnNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body2 : View in DoubleColumnNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DoubleColumnNavigationViewStyle()
{
  return &type metadata for DoubleColumnNavigationViewStyle;
}

uint64_t type metadata completion function for BridgedSplitView.Coordinator()
{
  return swift_initClassMetadata2();
}

uint64_t closure #1 in DoubleColumnNavigationView.body(children:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[96];

  v2 = _VariadicView_Children.endIndex.getter();
  result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  result = _VariadicView_Children.endIndex.getter();
  if (v2 < 0 || result < v2)
    goto LABEL_13;
  if ((unint64_t)v2 >= 2)
  {
    result = _VariadicView_Children.endIndex.getter();
    if (result)
    {
      result = _VariadicView_Children.endIndex.getter();
      v4 = result - 1;
      if (!__OFSUB__(result, 1))
      {
        result = _VariadicView_Children.endIndex.getter();
        if ((v4 & 0x8000000000000000) == 0 && v4 < result)
        {
          _VariadicView_Children.subscript.getter();
          outlined init with copy of _VariadicView_Children.Element((uint64_t)v5, a1);
          *(_BYTE *)(a1 + 96) = 0;
          return outlined destroy of _VariadicView_Children.Element((uint64_t)v5);
        }
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      return result;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_BYTE *)(a1 + 96) = 1;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance DoubleColumnNavigationView()
{
  lazy protocol witness table accessor for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView();
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

uint64_t protocol witness for _VariadicView_ViewRoot.body(children:) in conformance DoubleColumnNavigationView@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  _BYTE v4[96];
  uint64_t v5;

  result = _VariadicView_Children.endIndex.getter();
  if (result)
  {
    _VariadicView_Children.subscript.getter();
    closure #1 in DoubleColumnNavigationView.body(children:)((uint64_t)&v5);
    v3 = static Edge.Set.all.getter();
    outlined init with copy of BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>((uint64_t)v4, a1);
    *(_QWORD *)(a1 + 200) = -1;
    *(_BYTE *)(a1 + 208) = v3;
    return outlined destroy of BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>((uint64_t)v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void BridgedSplitView.makeCoordinator()()
{
  type metadata accessor for BridgedSplitView.Coordinator();
}

void sub_1879019FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = type metadata accessor for UIHostingController(0, a9, v11, a4);
  specialized UIHostingController.__allocating_init(rootView:)(v10 + *(int *)(v9 + 52), v12, v13, v14);
}

void sub_187901A28(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, a1);

  v4 = objc_allocWithZone(v1);
  BridgedSplitView.Coordinator.init(_:)((uint64_t)v3);
}

void BridgedSplitView.Coordinator.__allocating_init(_:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  BridgedSplitView.Coordinator.init(_:)(a1);
}

void BridgedSplitView.makeUIViewController(context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for UIHostingController(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), a4);
  specialized UIHostingController.__allocating_init(rootView:)(v4, v5, v6, v7);
}

id sub_187901AEC(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  Class isa;
  void *v12;
  void *v13;
  id v14;
  id v15;

  v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, a1);
  v4 = (id)specialized UIHostingController.host.getter();
  _UIHostingView.updatePreferences(renderDisplayList:)(0);

  v5 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NotificationSendingSplitViewController()), sel_initWithNibName_bundle_, 0, 0);
  objc_msgSend(v5, sel_setDelegate_, v1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187C34340;
  *(_QWORD *)(v6 + 32) = v3;
  v7 = *(void **)(v1 + direct field offset for BridgedSplitView.Coordinator.placeholderNavController);
  *(_QWORD *)(v6 + 40) = v7;
  v8 = v7;
  specialized Array._endMutation()();
  type metadata accessor for UIViewController();
  v9 = v5;
  v10 = v3;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setViewControllers_, isa);

  objc_msgSend(v9, sel_setPreferredDisplayMode_, 0);
  BridgedSplitView.Coordinator.placeholderHost.getter();
  v13 = v12;
  v14 = objc_msgSend(v12, sel_navigationItem);

  v15 = objc_msgSend(v9, sel_displayModeButtonItem);
  objc_msgSend(v14, sel_setLeftBarButtonItem_, v15);

  return v9;
}

void BridgedSplitView.updateUIViewController(_:context:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  unint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  _BYTE v15[16];

  v4 = v3;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = objc_msgSend(a1, sel_viewControllers);
  type metadata accessor for UIViewController();
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v8 >> 62))
  {
    v9 = *(void **)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v9 = (void *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9)
    goto LABEL_9;
LABEL_3:
  if ((v8 & 0xC000000000000001) != 0)
  {
LABEL_10:
    v10 = (id)MEMORY[0x18D75E3BC](0, v8);
    goto LABEL_6;
  }
  if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_12;
  }
  v10 = *(id *)(v8 + 32);
LABEL_6:
  v9 = v10;
  swift_bridgeObjectRelease();
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_QWORD *)(a3 + 32);
    swift_retain();
    swift_retain();
    UINavigationController.updateRootHost<A>(root:environment:transaction:)(v4, (uint64_t)v15, v6, v11, v12);
    swift_release();
    swift_release();
    BridgedSplitView.Coordinator.placeholderHost.getter();
    v14 = v13;
    specialized UIHostingController.rootView.setter(v4 + *(int *)(a3 + 52));

    return;
  }
LABEL_12:

  __break(1u);
}

void BridgedSplitView.Coordinator.placeholderHost.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  v3 = objc_msgSend(*(id *)((char *)v0 + direct field offset for BridgedSplitView.Coordinator.placeholderNavController), sel_viewControllers);
  type metadata accessor for UIViewController();
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v4 & 0xC000000000000001) != 0)
  {
    MEMORY[0x18D75E3BC](0, v4);
    goto LABEL_4;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(id *)(v4 + 32);
LABEL_4:
    swift_bridgeObjectRelease();
    type metadata accessor for UIHostingController(0, *(_QWORD *)((v2 & v1) + 0x58), *(_QWORD *)((v2 & v1) + 0x68), v6);
    swift_dynamicCastClassUnconditional();
    return;
  }
  __break(1u);
}

void BridgedSplitView.Coordinator.init(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + direct field offset for BridgedSplitView.Coordinator.placeholderNavController) = a1;
  type metadata accessor for BridgedSplitView.Coordinator();
}

id sub_187901F60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 16) = v1;
  *(_QWORD *)(v2 - 8) = a1;
  return objc_msgSendSuper2((objc_super *)(v2 - 16), sel_init);
}

BOOL @objc BridgedSplitView.Coordinator.splitViewController(_:collapseSecondary:onto:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized BridgedSplitView.Coordinator.splitViewController(_:collapseSecondary:onto:)(a4);
}

id @objc BridgedSplitView.Coordinator.splitViewController(_:separateSecondaryFrom:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  v9 = specialized BridgedSplitView.Coordinator.splitViewController(_:separateSecondaryFrom:)();

  return v9;
}

void @objc BridgedSplitView.Coordinator.init()()
{
  specialized BridgedSplitView.Coordinator.init()();
}

void BridgedSplitView.Coordinator.__ivar_destroyer()
{
  uint64_t v0;

}

void BridgedSplitView.Coordinator.__deallocating_deinit()
{
  type metadata accessor for BridgedSplitView.Coordinator();
}

id sub_187902068(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 16) = v1;
  *(_QWORD *)(v2 - 8) = a1;
  return objc_msgSendSuper2((objc_super *)(v2 - 16), sel_dealloc);
}

void @objc BridgedSplitView.Coordinator.__ivar_destroyer(uint64_t a1)
{

}

void type metadata accessor for BridgedSplitView.Coordinator()
{
  JUMPOUT(0x18D75FF28);
}

void protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance BridgedSplitView<A, B>()
{
  BridgedSplitView.makeCoordinator()();
}

uint64_t sub_1879020C0(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t NotificationSendingSplitViewController.showDetailViewController(_:sender:)(void *a1, uint64_t a2)
{
  void *v2;
  id v5;
  uint64_t v6;
  uint64_t inited;
  id v8;
  Class isa;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  objc_class *v17;
  uint64_t v19;
  objc_super v20;
  _QWORD v21[3];
  uint64_t v22;

  v5 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  if (one-time initialization token for willShowDetailNotification != -1)
    swift_once();
  v6 = static DoubleColumnNavigationViewStyle.willShowDetailNotification;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (AnyHashable, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  v21[0] = 0xD000000000000017;
  v21[1] = 0x8000000187BD5B70;
  AnyHashable.init<A>(_:)();
  *(_QWORD *)(inited + 96) = type metadata accessor for UIViewController();
  *(_QWORD *)(inited + 72) = a1;
  v8 = a1;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_postNotificationName_object_userInfo_, v6, v2, isa);

  outlined init with copy of Any?(a2, (uint64_t)v21);
  v10 = v22;
  if (v22)
  {
    v11 = __swift_project_boxed_opaque_existential_1(v21, v22);
    v12 = *(_QWORD *)(v10 - 8);
    v13 = MEMORY[0x1E0C80A78](v11, v11);
    v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v12 + 16))(v15, v13);
    v16 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    v16 = 0;
  }
  v17 = (objc_class *)type metadata accessor for NotificationSendingSplitViewController();
  v20.receiver = v2;
  v20.super_class = v17;
  objc_msgSendSuper2(&v20, sel_showDetailViewController_sender_, v8, v16);
  return swift_unknownObjectRelease();
}

id NotificationSendingSplitViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NotificationSendingSplitViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18790251C()
{
  return lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, NavigationViewStyleModifier<ColumnNavigationViewStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>, (uint64_t)&protocol witness table for NavigationView<A>, (uint64_t)&protocol witness table for NavigationViewStyleModifier<A>);
}

void type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for NavigationView<_NavigationViewStyleConfiguration.Content>, (uint64_t)&type metadata for _NavigationViewStyleConfiguration.Content, (uint64_t)&protocol witness table for _NavigationViewStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationView);
    type metadata accessor for NavigationViewStyleModifier<ColumnNavigationViewStyle>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>);
  }
}

void type metadata accessor for NavigationViewStyleModifier<ColumnNavigationViewStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for NavigationViewStyleModifier<ColumnNavigationViewStyle>)
  {
    v2 = lazy protocol witness table accessor for type ColumnNavigationViewStyle and conformance ColumnNavigationViewStyle();
    v4 = type metadata accessor for NavigationViewStyleModifier(a1, (uint64_t)&type metadata for ColumnNavigationViewStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for NavigationViewStyleModifier<ColumnNavigationViewStyle>);
  }
}

ValueMetadata *type metadata accessor for DoubleColumnNavigationView()
{
  return &type metadata for DoubleColumnNavigationView;
}

unint64_t instantiation function for generic protocol witness table for DoubleColumnNavigationView(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in DoubleColumnNavigationView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>;
  if (!lazy cache variable for type metadata for BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    lazy protocol witness table accessor for type Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>> and conformance <A> Group<A>();
    type metadata accessor for BridgedSplitView();
  }
  return result;
}

void type metadata accessor for _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE40F0]);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>);
  }
}

unint64_t lazy protocol witness table accessor for type Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>> and conformance <A> Group<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>> and conformance <A> Group<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>> and conformance <> _ConditionalContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>> and conformance <A> Group<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>();
    v4[0] = MEMORY[0x1E0CE55C8];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for BridgedSplitView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t outlined destroy of BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL specialized BridgedSplitView.Coordinator.splitViewController(_:collapseSecondary:onto:)(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + direct field offset for BridgedSplitView.Coordinator.placeholderNavController) == a1;
}

void *specialized BridgedSplitView.Coordinator.splitViewController(_:separateSecondaryFrom:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  objc_opt_self();
  v1 = (void *)swift_dynamicCastObjCClass();
  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, sel_topViewController);
  if (v2)
  {
    v3 = v2;
    objc_opt_self();
    v4 = swift_dynamicCastObjCClass();

    if (v4)
      return 0;
  }
  v5 = *(void **)(v0 + direct field offset for BridgedSplitView.Coordinator.placeholderNavController);
  v6 = v5;
  return v5;
}

void specialized BridgedSplitView.Coordinator.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t getEnumTagSinglePayload for BridgedSplitView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_187902AE8 + 4 * byte_187C6C660[v17 - 1]))();
}

void storeEnumTagSinglePayload for BridgedSplitView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t sub_187902D64()
{
  return lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>, _SafeAreaRegionsIgnoringLayout>, (uint64_t)&protocol witness table for BridgedSplitView<A, B>, MEMORY[0x1E0CE65D8]);
}

void type metadata accessor for ModifiedContent<BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>, _SafeAreaRegionsIgnoringLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>, _SafeAreaRegionsIgnoringLayout>)
  {
    type metadata accessor for BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>, _SafeAreaRegionsIgnoringLayout>);
  }
}

uint64_t EnvironmentValues.isSelectable.getter()
{
  return EnvironmentValues.searchFieldPlacement.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey>, (uint64_t)&type metadata for EnvironmentValues.IsSelectableKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSelectableKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.isSelectable : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isSelectable.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.isSelectable : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.searchScopeActivation.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey>, (uint64_t)&type metadata for EnvironmentValues.IsSelectableKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSelectableKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.isSelected.getter()
{
  return EnvironmentValues.searchFieldPlacement.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey>, (uint64_t)&type metadata for EnvironmentValues.IsSelectedKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSelectedKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.isSelected : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isSelected.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.isSelected : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.searchScopeActivation.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey>, (uint64_t)&type metadata for EnvironmentValues.IsSelectedKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSelectedKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t Optional<A>.apply<A>(as:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  v8 = v7;
  v28 = a7;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v27 - v17;
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)&v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v8, a4, v21);
  v24 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v18, v24 ^ 1u, 1, a5);
  v30 = *(_QWORD *)(a4 + 16);
  v31 = a5;
  v32 = a6;
  v33 = v28;
  v34 = a2;
  v35 = a3;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))_sqd__Ign_qd__yts5NeverOIegnrzr_SHRzSHRd__r__lTRTA_0, (uint64_t)v29, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, v25, (uint64_t)&v36);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed A1) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t _sqd__Ign_qd__yts5NeverOIegnrzr_SHRzSHRd__r__lTRTA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t Set.apply<A>(as:operation:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v11 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v33 - v13;
  result = _setDownCastConditional<A, B>(_:)();
  if (!result)
  {
    v17 = static Array._allocateUninitialized(_:)();
    if (MEMORY[0x18D75D078](v17, a6))
    {
      v16 = specialized Set.init(_nonEmptyArrayLiteral:)(v17, a6, a8);
      result = swift_bridgeObjectRelease();
      if ((v16 & 0xC000000000000001) != 0)
        goto LABEL_6;
    }
    else
    {
      result = swift_bridgeObjectRelease();
      v16 = MEMORY[0x1E0DEE9E8];
      if ((MEMORY[0x1E0DEE9E8] & 0xC000000000000001) != 0)
        goto LABEL_6;
    }
LABEL_8:
    v19 = 0;
    v21 = -1 << *(_BYTE *)(v16 + 32);
    v22 = *(_QWORD *)(v16 + 56);
    v34 = v16 + 56;
    v18 = ~v21;
    v23 = -v21;
    if (v23 < 64)
      v24 = ~(-1 << v23);
    else
      v24 = -1;
    v20 = v24 & v22;
    goto LABEL_12;
  }
  v16 = result;
  if ((result & 0xC000000000000001) == 0)
    goto LABEL_8;
LABEL_6:
  __CocoaSet.makeIterator()();
  result = Set.Iterator.init(_cocoa:)();
  v16 = v36;
  v34 = v37;
  v18 = v38;
  v19 = v39;
  v20 = v40;
LABEL_12:
  v35 = v16 & 0x7FFFFFFFFFFFFFFFLL;
  v33 = v18;
  v25 = (unint64_t)(v18 + 64) >> 6;
  while (v16 < 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_32;
    _forceBridgeFromObjectiveC<A>(_:_:)();
    swift_unknownObjectRelease();
    v28 = *(_QWORD *)(a6 - 8);
LABEL_15:
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v14, 0, 1, a6);
    a2(v14);
    result = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v14, a6);
  }
  if (v20)
  {
    v26 = __clz(__rbit64(v20));
    v20 &= v20 - 1;
    v27 = v26 | (v19 << 6);
LABEL_14:
    v28 = *(_QWORD *)(a6 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(v14, *(_QWORD *)(v16 + 48) + *(_QWORD *)(v28 + 72) * v27, a6);
    goto LABEL_15;
  }
  v29 = v19 + 1;
  if (!__OFADD__(v19, 1))
  {
    if (v29 >= v25)
      goto LABEL_32;
    v30 = *(_QWORD *)(v34 + 8 * v29);
    v31 = v19 + 1;
    if (!v30)
    {
      v31 = v19 + 2;
      if (v19 + 2 >= v25)
        goto LABEL_32;
      v30 = *(_QWORD *)(v34 + 8 * v31);
      if (!v30)
      {
        v31 = v19 + 3;
        if (v19 + 3 >= v25)
          goto LABEL_32;
        v30 = *(_QWORD *)(v34 + 8 * v31);
        if (!v30)
        {
          v32 = v19 + 4;
          while (v25 != v32)
          {
            v30 = *(_QWORD *)(v34 + 8 * v32++);
            if (v30)
            {
              v31 = v32 - 1;
              goto LABEL_29;
            }
          }
LABEL_32:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 56))(v14, 1, 1, a6);
          return outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
        }
      }
    }
LABEL_29:
    v20 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v31 << 6);
    v19 = v31;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t AsAnySelection.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
}

uint64_t protocol witness for Projection.get(base:) in conformance AsAnySelection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return AsAnySelection.get(base:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance AsAnySelection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized AsAnySelection.set(base:newValue:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t Optional<A>.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t);
  char v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  v3 = v2;
  v31 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v32 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v33 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v9);
  v11 = (char *)&v31 - v10;
  v12 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v31 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v6 + 56))((char *)&v31 - v20, 1, 1, v5, v19);
  v34 = TupleTypeMetadata2;
  v22 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v23(v11, v3, a1);
  v23(v22, (uint64_t)v21, a1);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v24(v11, 1, v5) != 1)
  {
    v23(v16, (uint64_t)v11, a1);
    if (v24(v22, 1, v5) != 1)
    {
      v27 = v32;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v32, v22, v5);
      v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      v28 = *(void (**)(char *, uint64_t))(v6 + 8);
      v28(v27, v5);
      v29 = *(void (**)(char *, uint64_t))(v12 + 8);
      v29(v21, a1);
      v28(v16, v5);
      v29(v11, a1);
      return v26 & 1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v21, a1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
    goto LABEL_6;
  }
  v25 = *(void (**)(char *, uint64_t))(v12 + 8);
  v25(v21, a1);
  if (v24(v22, 1, v5) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
    v26 = 0;
    return v26 & 1;
  }
  v25(v11, a1);
  v26 = 1;
  return v26 & 1;
}

uint64_t Optional<A>.allowsMultiple.getter()
{
  return 0;
}

BOOL Optional<A>.count.getter(uint64_t a1, uint64_t a2)
{
  return (Optional<A>.isEmpty.getter(a1, a2) & 1) == 0;
}

uint64_t Optional<A>.contains<A>(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void (*v33)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  void (*v39)(char *, uint64_t);
  char v40;
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;

  v6 = v5;
  v47 = a5;
  v51 = a1;
  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v48 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v49 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v13);
  v50 = (char *)&v45 - v14;
  v15 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v52 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v45 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v45 - v25;
  v29 = MEMORY[0x1E0C80A78](v27, v28);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v31 + 16))((char *)&v45 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0), v6, a2, v29);
  v32 = swift_dynamicCast();
  v33 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56);
  v33(v26, v32 ^ 1u, 1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v22, v51, a3);
  v33(v22, 0, 1, a3);
  v51 = TupleTypeMetadata2;
  v34 = *(int *)(TupleTypeMetadata2 + 48);
  v35 = v50;
  v36 = &v50[v34];
  v37 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v37(v50, v26, v11);
  v37(v36, v22, v11);
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v38(v35, 1, a3) != 1)
  {
    v46 = v15;
    v37(v52, v35, v11);
    if (v38(v36, 1, a3) != 1)
    {
      v41 = v48;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v48, v36, a3);
      v42 = v52;
      v40 = dispatch thunk of static Equatable.== infix(_:_:)();
      v43 = *(void (**)(char *, uint64_t))(v9 + 8);
      v43(v41, a3);
      v39 = *(void (**)(char *, uint64_t))(v46 + 8);
      v39(v22, v11);
      v43(v42, a3);
      v39(v35, v11);
      goto LABEL_8;
    }
    v39 = *(void (**)(char *, uint64_t))(v46 + 8);
    v39(v22, v11);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v52, a3);
    goto LABEL_6;
  }
  v39 = *(void (**)(char *, uint64_t))(v15 + 8);
  v39(v22, v11);
  if (v38(v36, 1, a3) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v49 + 8))(v35, v51);
    v40 = 0;
    goto LABEL_8;
  }
  v39(v35, v11);
  v40 = 1;
LABEL_8:
  v39(v26, v11);
  return v40 & 1;
}

uint64_t protocol witness for Selection.isEmpty.getter in conformance <A> A?(uint64_t a1, uint64_t a2)
{
  return Optional<A>.isEmpty.getter(a1, *(_QWORD *)(a2 - 8));
}

BOOL protocol witness for Selection.count.getter in conformance <A> A?(uint64_t a1, uint64_t a2)
{
  return Optional<A>.count.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Selection.contains<A>(id:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Optional<A>.contains<A>(id:)(a1, a4, a2, a4, a3);
}

uint64_t protocol witness for Selection.apply<A>(as:operation:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return Optional<A>.apply<A>(as:operation:)(a1, a2, a3, a6, a4, *(_QWORD *)(a7 - 8), a5);
}

uint64_t Set.allowsMultiple.getter()
{
  return 1;
}

uint64_t Set.contains<A>(id:)()
{
  uint64_t result;
  char v1;

  result = _setDownCastConditional<A, B>(_:)();
  if (result)
  {
    v1 = Set.contains(_:)();
    swift_bridgeObjectRelease();
    return v1 & 1;
  }
  return result;
}

uint64_t protocol witness for Selection.isEmpty.getter in conformance Set<A>()
{
  return Set.isEmpty.getter();
}

uint64_t protocol witness for Selection.count.getter in conformance Set<A>()
{
  return Set.count.getter();
}

uint64_t protocol witness for Selection.contains<A>(id:) in conformance Set<A>()
{
  return Set.contains<A>(id:)();
}

uint64_t protocol witness for Selection.apply<A>(as:operation:) in conformance Set<A>(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;

  return Set.apply<A>(as:operation:)(a1, a2, a3, *v6, *(_QWORD *)(a6 + 16), a4, *(_QWORD *)(a6 + 24), a5);
}

uint64_t sub_187903B50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.isSelected.getter, a3);
}

uint64_t sub_187903B5C(unsigned __int8 *a1)
{
  return EnvironmentValues.searchScopeActivation.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey>, (uint64_t)&type metadata for EnvironmentValues.IsSelectedKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSelectedKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t sub_187903BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.isSelectable.getter, a3);
}

uint64_t sub_187903BB0(unsigned __int8 *a1)
{
  return EnvironmentValues.searchScopeActivation.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey>, (uint64_t)&type metadata for EnvironmentValues.IsSelectableKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSelectableKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t dispatch thunk of Selection.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Selection.allowsMultiple.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Selection.count.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Selection.contains<A>(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of Selection.apply<A>(as:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 40))();
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsSelectedKey()
{
  return &type metadata for EnvironmentValues.IsSelectedKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsSelectableKey()
{
  return &type metadata for EnvironmentValues.IsSelectableKey;
}

uint64_t type metadata accessor for AsAnySelection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsAnySelection);
}

void base witness table accessor for Equatable in AsAnySelection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in AsAnySelection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized AsAnySelection.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[47];
  char v21;

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v16[-v11];
  outlined init with copy of TableColumnList(a2, (uint64_t)v20);
  type metadata accessor for Selection();
  v13 = swift_dynamicCast();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v12, v13 ^ 1u, 1, a3);
  v17 = a3;
  v18 = a4;
  v19 = a1;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AsAnySelection.set(base:newValue:), (uint64_t)v16, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, v14, (uint64_t)&v21);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
}

unint64_t type metadata accessor for Selection()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Selection;
  if (!lazy cache variable for type metadata for Selection)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Selection);
  }
  return result;
}

uint64_t partial apply for closure #1 in AsAnySelection.set(base:newValue:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 24))(*(_QWORD *)(v1 + 32), a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CollectionChanges<A, B>.Element.Kind(char *a1, char *a2)
{
  return static TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CollectionChanges<A, B>.Element.Kind()
{
  unsigned __int8 *v0;

  return TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CollectionChanges<A, B>.Element.Kind(uint64_t a1)
{
  unsigned __int8 *v1;

  TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CollectionChanges<A, B>.Element.Kind()
{
  unsigned __int8 *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t CollectionChanges.Element.kind.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x1E0C80A78](a1, v2);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
      return 1;
    }
    else
    {
      v10 = type metadata accessor for Range();
      v11 = type metadata accessor for Range();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(&v7[*(int *)(TupleTypeMetadata2 + 48)], v11);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
      return 2;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    return 0;
  }
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance CollectionChanges<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance CollectionChanges<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance CollectionChanges<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>, a3);
  return RandomAccessCollection<>.distance(from:to:)();
}

void protocol witness for Collection.endIndex.getter in conformance CollectionChanges<A, B>()
{
  CollectionChanges.endIndex.getter();
}

uint64_t sub_1879040D0(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void protocol witness for Collection.subscript.read in conformance CollectionChanges<A, B>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  CollectionChanges.subscript.read(v7, *a2, *v3, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t (*sub_187904124(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void CollectionChanges.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v12;

  v12 = malloc(0x58uLL);
  *a1 = v12;
  v12[4] = a4;
  v12[5] = a5;
  v12[6] = a6;
  v12[7] = a7;
  type metadata accessor for CollectionChanges.Element();
}

void sub_1879041A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[8] = a1;
  v6 = *(_QWORD *)(a1 - 8);
  v5[9] = v6;
  v5[10] = malloc(*(_QWORD *)(v6 + 64));
  *v5 = v4;
  v5[1] = v3;
  v5[2] = v2;
  v5[3] = v1;
  type metadata accessor for CollectionChanges.Element();
}

void (*sub_1879041D0())(uint64_t a1)
{
  Array.subscript.getter();
  return CollectionChanges.subscript.read;
}

void CollectionChanges.subscript.read(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 80);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 72) + 8))(v2, *(_QWORD *)(*(_QWORD *)a1 + 64));
  free(v2);
  free(v1);
}

uint64_t protocol witness for Collection.indices.getter in conformance CollectionChanges<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>, a1);
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance CollectionChanges<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance CollectionChanges<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>, a1);
  return Collection._copyToContiguousArray()();
}

void CollectionChanges.description.getter()
{
  swift_bridgeObjectRetain();
  type metadata accessor for CollectionChanges.Element();
}

void sub_18790433C()
{
  type metadata accessor for CollectionChanges();
}

uint64_t sub_187904354(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>, a1);
  Array.init<A>(_:)();
  v1 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF68], v1);
  return String.init<A>(describing:)();
}

void protocol witness for CustomStringConvertible.description.getter in conformance CollectionChanges<A, B>()
{
  CollectionChanges.description.getter();
}

Swift::Int __swiftcall CollectionChanges.Projection.index(before:)(Swift::Int before)
{
  if (!__OFSUB__(before, 1))
    type metadata accessor for CollectionChanges.Element();
  __break(1u);
  JUMPOUT(0x187904570);
}

Swift::Int __swiftcall CollectionChanges.Projection.index(after:)(Swift::Int after)
{
  Swift::Int v1;

  if (__OFADD__(after, 1))
  {
    __break(1u);
    JUMPOUT(0x1879047CCLL);
  }
  if (after + 1 < v1)
    type metadata accessor for CollectionChanges.Element();
  return v1;
}

void CollectionChanges.Projection.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[6];
  uint64_t TupleTypeMetadata2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v36 = a1;
  v37 = a2;
  v38 = a6;
  v11 = type metadata accessor for Range();
  v12 = type metadata accessor for Range();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v13);
  v32[4] = (char *)v32 - v14;
  v34 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v32[3] = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v32[2] = (char *)v32 - v20;
  v39 = a5;
  v21 = type metadata accessor for Optional();
  v32[0] = *(_QWORD *)(v21 - 8);
  v32[1] = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v32[5] = (char *)v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  MEMORY[0x1E0C80A78](v26, v27);
  v35 = v11;
  MEMORY[0x1E0C80A78](v28, v29);
  MEMORY[0x1E0C80A78](v30, v31);
  v40 = a3;
  v41 = a4;
  v42 = a7;
  v43 = a8;
  type metadata accessor for CollectionChanges.Element();
}

uint64_t sub_187904A50(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  char *v24;
  int v25;
  uint64_t result;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;

  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v29 - v9;
  v11 = *(_QWORD *)(v8 - 152);
  Array.subscript.getter();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(uint64_t, char *, _QWORD))(v4 + 32))(v7, v10, *(_QWORD *)(v8 - 160));
    v13 = *(_QWORD *)(v8 - 128);
    v17 = swift_dynamicCast();
    v15 = *(_QWORD *)(v13 - 8);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    if (!v17)
    {
      *(_QWORD *)(v8 - 184) = v6;
      goto LABEL_11;
    }
LABEL_8:
    v16(v6, 0, 1, v13);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v15 + 32))(*(_QWORD *)(v8 - 136), v6, v13);
  }
  if (EnumCaseMultiPayload != 1)
  {
    v18 = *(_QWORD *)(v8 - 176);
    v19 = &v10[*(int *)(v18 + 48)];
    v20 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v21 = *(_QWORD *)(v8 - 160);
    v20(v2, v10, v21);
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 168) + 32);
    v23 = *(char **)(v8 - 200);
    v22(v23, v19, v5);
    v24 = (char *)(*(_QWORD *)(v8 - 192) + *(int *)(v18 + 48));
    v20(*(char **)(v8 - 192), v2, v21);
    v22(v24, v23, v5);
    v6 = *(_QWORD *)(v8 - 184);
    v13 = *(_QWORD *)(v8 - 128);
    v25 = swift_dynamicCast();
    v15 = *(_QWORD *)(v13 - 8);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    if (!v25)
      goto LABEL_11;
    goto LABEL_8;
  }
  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v8 - 168) + 32))(*(_QWORD *)(v8 - 208), v10, v5);
  v13 = *(_QWORD *)(v8 - 128);
  v14 = swift_dynamicCast();
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (v14)
  {
    v16(v3, 0, 1, v13);
    v6 = v3;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v15 + 32))(*(_QWORD *)(v8 - 136), v6, v13);
  }
  *(_QWORD *)(v8 - 184) = v3;
LABEL_11:
  v27 = *(_QWORD *)(v8 - 184);
  v16(v27, 1, 1, *(_QWORD *)(v8 - 128));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v8 - 224) + 8))(v27, *(_QWORD *)(v8 - 216));
  *(_QWORD *)(v8 - 112) = 0;
  *(_QWORD *)(v8 - 104) = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 - 112) = 0x2064696C61766E69;
  *(_QWORD *)(v8 - 104) = 0xEF203A7865646E69;
  *(_QWORD *)(v8 - 120) = v11;
  v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void protocol witness for BidirectionalCollection.index(before:) in conformance CollectionChanges<A, B>.Projection<A1>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  protocol witness for BidirectionalCollection.index(before:) in conformance CollectionChanges<A, B>.Projection<A1>(a1, a2, a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))CollectionChanges.Projection.index(before:));
}

void protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionChanges<A, B>.Projection<A1>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionChanges<A, B>.Projection<A1>(a1, a2, a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))CollectionChanges.Projection.index(before:));
}

void protocol witness for Collection.startIndex.getter in conformance CollectionChanges<A, B>.Projection<A1>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

void protocol witness for Collection.endIndex.getter in conformance CollectionChanges<A, B>.Projection<A1>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
}

void protocol witness for Collection.subscript.read in conformance CollectionChanges<A, B>.Projection<A1>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v7;

  v7 = (uint64_t *)malloc(0x28uLL);
  *a1 = v7;
  CollectionChanges.Projection.subscript.read(v7, *a2, *(unsigned __int8 *)v3, v3[1], v3[2], v3[3], a3[2], a3[3], a3[4], a3[5], a3[6]);
}

uint64_t (*sub_187904DA4(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void CollectionChanges.Projection.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  void *v17;

  v16 = *(_QWORD *)(a9 - 8);
  *a1 = a9;
  a1[1] = v16;
  v17 = malloc(*(_QWORD *)(v16 + 64));
  a1[2] = (uint64_t)v17;
  CollectionChanges.Projection.subscript.getter(a2, a4, a7, a8, a9, (uint64_t)v17, a10, a11);
}

void (*sub_187904E3C())(_QWORD *a1)
{
  return CoalescingAdjacentDuplicates.subscript.read;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance CollectionChanges<A, B>.Projection<A1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>.Projection<A1>, a3);
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance CollectionChanges<A, B>.Projection<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>.Projection<A1>, a4);
  return BidirectionalCollection.index(_:offsetBy:limitedBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance CollectionChanges<A, B>.Projection<A1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>.Projection<A1>, a3);
  JUMPOUT(0x18D75CB20);
}

void protocol witness for Collection.index(after:) in conformance CollectionChanges<A, B>.Projection<A1>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  protocol witness for BidirectionalCollection.index(before:) in conformance CollectionChanges<A, B>.Projection<A1>(a1, a2, a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))CollectionChanges.Projection.index(after:));
}

void protocol witness for BidirectionalCollection.index(before:) in conformance CollectionChanges<A, B>.Projection<A1>(_QWORD *a1, _QWORD *a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  a4(*a1, *(unsigned __int8 *)v4, v4[1], v4[2], v4[3], a2[2], a2[3], a2[4], a2[5], a2[6]);
  JUMPOUT(0x187904FC0);
}

void protocol witness for Collection.formIndex(after:) in conformance CollectionChanges<A, B>.Projection<A1>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionChanges<A, B>.Projection<A1>(a1, a2, a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))CollectionChanges.Projection.index(after:));
}

void protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionChanges<A, B>.Projection<A1>(_QWORD *a1, _QWORD *a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  a4(*a1, *(unsigned __int8 *)v4, v4[1], v4[2], v4[3], a2[2], a2[3], a2[4], a2[5], a2[6]);
  JUMPOUT(0x18790501CLL);
}

__n128 protocol witness for Sequence.makeIterator() in conformance CollectionChanges<A, B>.Projection<A1>@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1->n128_u64[1];
  a1->n128_u8[0] = v1->n128_u8[0];
  a1->n128_u64[1] = v2;
  result = v1[1];
  a1[1] = result;
  a1[2].n128_u64[0] = result.n128_u64[0];
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance CollectionChanges<A, B>.Projection<A1>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>.Projection<A1>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance CollectionChanges<A, B>.Projection<A1>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>.Projection<A1>, a1);
  return Collection._copyToContiguousArray()();
}

void base witness table accessor for Sequence in CollectionChanges<A, B>.Projection<A1>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Collection in CollectionChanges<A, B>.Projection<A1>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in CollectionChanges<A, B>.Projection<A1>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>.Projection<A1>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA210], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in CollectionChanges<A, B>.Projection<A1>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>.Projection<A1>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE28], a1, &v3);
}

void base witness table accessor for Sequence in CollectionChanges<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Collection in CollectionChanges<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in CollectionChanges<A, B>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE28], a1, &v3);
}

void base witness table accessor for BidirectionalCollection in CollectionChanges<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in CollectionChanges<A, B>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionChanges<A, B>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE40], a1, &v3);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t result;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = specialized CollectionChanges.getOffset<A>(from:)(a1, v5, v6, AssociatedTypeWitness);
  *a2 = result;
  return result;
}

void specialized CollectionChanges.init<A, B>(from:to:)()
{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CollectionChanges.Element();
}

void sub_18790536C()
{
  Array.init()();
  type metadata accessor for CollectionChanges();
}

void sub_187905388()
{
  CollectionChanges.formChanges<A, B>(from:to:)();
}

uint64_t specialized CollectionChanges.getOffset<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata3;
  uint64_t v15;

  v6 = type metadata accessor for CollectionDifference.Change();
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, double))(v11 + 16))((char *)&v15 - v9, a1, v8);
  v12 = *(_QWORD *)v10;
  type metadata accessor for [Int](255, (unint64_t *)&lazy cache variable for type metadata for Int?, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEB940]);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(&v10[*(int *)(TupleTypeMetadata3 + 48)], a4);
  return v12;
}

unint64_t lazy protocol witness table accessor for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>)
  {
    type metadata accessor for Range<Int>(255, &lazy cache variable for type metadata for PartialRangeThrough<Int>, MEMORY[0x1E0DECD78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DECD88], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>);
  }
  return result;
}

void partial apply for closure #1 in CollectionChanges.Projection.index(before:)()
{
  partial apply for closure #1 in CollectionChanges.Projection.index(before:)();
}

{
  type metadata accessor for CollectionChanges.Element();
}

uint64_t sub_187905504(char a1)
{
  return a1 & 1;
}

BOOL sub_187905548(uint64_t a1)
{
  int v1;

  return v1 == CollectionChanges.Element.kind.getter(a1);
}

uint64_t initializeWithCopy for CollectionChanges.Projection(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CollectionChanges.Projection(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for CollectionChanges.Projection(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

void type metadata accessor for CollectionChanges.Projection()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t *initializeBufferWithCopyOfBuffer for CollectionChanges.Element(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v28;
  unint64_t v29;
  void (*v30)(unint64_t, unint64_t, uint64_t);
  void (*v31)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v33;
  void (*v34)(uint64_t *, uint64_t *, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v7 + v8;
  v10 = ((v7 + v8) & ~v8) + v7;
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = *(_DWORD *)(v11 + 80);
  v14 = v12 + v13;
  v15 = ((v12 + v13) & ~v13) + v12;
  if (v15 <= v10)
    v16 = v10;
  else
    v16 = v15;
  v17 = v10 + v13;
  v18 = v15 + ((v10 + v13) & ~v13);
  if (v18 <= v16)
    v19 = v16;
  else
    v19 = v18;
  if ((v13 | v8) > 7 || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0 || v19 + 1 > 0x18)
  {
    v22 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v22 + (((v13 | v8) + 16) & ~(v13 | v8)));
    swift_retain();
  }
  else
  {
    v23 = *((unsigned __int8 *)a2 + v19);
    if (v23 >= 3)
    {
      if (v19 <= 3)
        v24 = v19;
      else
        v24 = 4;
      __asm { BR              X15 }
    }
    v25 = ~v8;
    v26 = ~v13;
    if (v23 == 2)
    {
      v33 = *(_QWORD *)(a3 + 24);
      v34 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
      v34(a1, a2, v5);
      v34((uint64_t *)(((unint64_t)v4 + v9) & v25), (uint64_t *)(((unint64_t)a2 + v9) & v25), v5);
      v29 = ((unint64_t)a2 + v17) & v26;
      v30 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16);
      v30(((unint64_t)v4 + v17) & v26, v29, v33);
      v30((v14 + (((unint64_t)v4 + v17) & v26)) & v26, (v14 + v29) & v26, v33);
      *((_BYTE *)v4 + v19) = 2;
    }
    else if (v23 == 1)
    {
      v27 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16);
      v28 = *(_QWORD *)(a3 + 24);
      v27(a1, a2, v28);
      v27((uint64_t *)(((unint64_t)v4 + v14) & v26), (uint64_t *)(((unint64_t)a2 + v14) & v26), v28);
      *((_BYTE *)v4 + v19) = 1;
    }
    else
    {
      v31 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
      v31(a1, a2, *(_QWORD *)(a3 + 16));
      v31((uint64_t *)(((unint64_t)v4 + v9) & v25), (uint64_t *)(((unint64_t)a2 + v9) & v25), v5);
      *((_BYTE *)v4 + v19) = 0;
    }
  }
  return v4;
}

uint64_t destroy for CollectionChanges.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t);

  v2 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = v6 + v7;
  v9 = ((v6 + v7) & ~v7) + v6;
  v10 = *(_QWORD *)(v3 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = v11 + v12;
  v14 = ((v11 + v12) & ~v12) + v11;
  if (v14 <= v9)
    v15 = v9;
  else
    v15 = v14;
  v16 = v9 + v12;
  v17 = v14 + ((v9 + v12) & ~v12);
  if (v17 <= v15)
    v17 = v15;
  v18 = *(unsigned __int8 *)(a1 + v17);
  if (v18 >= 3)
  {
    if (v17 <= 3)
      v19 = v17;
    else
      v19 = 4;
    __asm { BR              X16 }
  }
  v20 = ~v7;
  v21 = ~v12;
  if (v18 == 2)
  {
    v24 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v24(a1, *(_QWORD *)(a2 + 16));
    v24((v8 + v2) & v20, v4);
    v2 = (v16 + v2) & v21;
    goto LABEL_15;
  }
  if (v18 == 1)
  {
LABEL_15:
    v26 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v26(v2, v3);
    v22 = (v13 + v2) & v21;
    v23 = v3;
    return ((uint64_t (*)(uint64_t, uint64_t))v26)(v22, v23);
  }
  v26 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v26(a1, v4);
  v22 = (v8 + v2) & v20;
  v23 = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v26)(v22, v23);
}

uint64_t initializeWithCopy for CollectionChanges.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  char v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = v8 + v9;
  v11 = ((v8 + v9) & ~v9) + v8;
  v12 = *(_QWORD *)(v6 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = v13 + v14;
  v16 = ((v13 + v14) & ~v14) + v13;
  if (v16 <= v11)
    v17 = v11;
  else
    v17 = v16;
  v18 = v11 + v14;
  v19 = v16 + ((v11 + v14) & ~v14);
  if (v19 <= v17)
    v20 = v17;
  else
    v20 = v19;
  v21 = *(unsigned __int8 *)(a2 + v20);
  if (v21 >= 3)
  {
    if (v20 <= 3)
      v22 = v20;
    else
      v22 = 4;
    __asm { BR              X15 }
  }
  v23 = ~v9;
  v24 = ~v14;
  if (v21 == 2)
  {
    v33 = *(_QWORD *)(a3 + 16);
    v34 = *(_QWORD *)(a3 + 24);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v27(a1, a2, v5);
    v27((v10 + a1) & v23, (v10 + a2) & v23, v33);
    v28 = (v18 + a2) & v24;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
    v29((v18 + a1) & v24, v28, v34);
    v29((v15 + ((v18 + a1) & v24)) & v24, (v15 + v28) & v24, v34);
    v26 = 2;
  }
  else if (v21 == 1)
  {
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
    v25(a1, a2, *(_QWORD *)(a3 + 24));
    v25((v15 + a1) & v24, (v15 + a2) & v24, v6);
    v26 = 1;
  }
  else
  {
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v31 = *(_QWORD *)(a3 + 16);
    v30(a1, a2, v31);
    v30((v10 + a1) & v23, (v10 + a2) & v23, v31);
    v26 = 0;
  }
  *(_BYTE *)(a1 + v20) = v26;
  return a1;
}

uint64_t assignWithCopy for CollectionChanges.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t, uint64_t);
  unsigned int v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  char v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 + 16);
    v5 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v40 = v8 + v9;
    v10 = ((v8 + v9) & ~v9) + v8;
    v11 = *(_QWORD *)(v5 - 8);
    v12 = *(_QWORD *)(v11 + 64);
    v13 = *(unsigned __int8 *)(v11 + 80);
    v14 = v12 + v13;
    v15 = ((v12 + v13) & ~v13) + v12;
    if (v15 <= v10)
      v16 = v10;
    else
      v16 = v15;
    v38 = v10 + v13;
    v17 = v15 + ((v10 + v13) & ~v13);
    if (v17 <= v16)
      v18 = v16;
    else
      v18 = v17;
    v19 = *(unsigned __int8 *)(a1 + v18);
    if (v19 >= 3)
    {
      if (v18 <= 3)
        v20 = v18;
      else
        v20 = 4;
      __asm { BR              X14 }
    }
    v39 = ~v9;
    v21 = ~v13;
    if (v19 == 2)
    {
      v23 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v23(a1, v6);
      v23((v40 + a1) & v39, v6);
      v37 = v6;
      v24 = v11;
      v25 = v14;
      v26 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v26((v38 + a1) & v21, v5);
      v26((v25 + ((v38 + a1) & v21)) & v21, v5);
      v14 = v25;
      v11 = v24;
      v6 = v37;
    }
    else if (v19 == 1)
    {
      v22 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v22(a1, v5);
      v22((v14 + a1) & v21, v5);
    }
    else
    {
      v27 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v27(a1, v6);
      v27((v40 + a1) & v39, v6);
    }
    v28 = *(unsigned __int8 *)(a2 + v18);
    if (v28 >= 3)
    {
      if (v18 <= 3)
        v29 = v18;
      else
        v29 = 4;
      __asm { BR              X12 }
    }
    if (v28 == 2)
    {
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      v33(a1, a2, v6);
      v33((v40 + a1) & v39, (v40 + a2) & v39, v6);
      v34 = (v38 + a2) & v21;
      v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
      v35((v38 + a1) & v21, v34, v5);
      v35((v14 + ((v38 + a1) & v21)) & v21, (v14 + v34) & v21, v5);
      v31 = 2;
    }
    else if (v28 == 1)
    {
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
      v30(a1, a2, v5);
      v30((v14 + a1) & v21, (v14 + a2) & v21, v5);
      v31 = 1;
    }
    else
    {
      v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      v32(a1, a2, v6);
      v32((v40 + a1) & v39, (v40 + a2) & v39, v6);
      v31 = 0;
    }
    *(_BYTE *)(a1 + v18) = v31;
  }
  return a1;
}

uint64_t initializeWithTake for CollectionChanges.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  char v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = v8 + v9;
  v11 = ((v8 + v9) & ~v9) + v8;
  v12 = *(_QWORD *)(v6 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = v13 + v14;
  v16 = ((v13 + v14) & ~v14) + v13;
  if (v16 <= v11)
    v17 = v11;
  else
    v17 = v16;
  v18 = v11 + v14;
  v19 = v16 + ((v11 + v14) & ~v14);
  if (v19 <= v17)
    v20 = v17;
  else
    v20 = v19;
  v21 = *(unsigned __int8 *)(a2 + v20);
  if (v21 >= 3)
  {
    if (v20 <= 3)
      v22 = v20;
    else
      v22 = 4;
    __asm { BR              X15 }
  }
  v23 = ~v9;
  v24 = ~v14;
  if (v21 == 2)
  {
    v33 = *(_QWORD *)(a3 + 16);
    v34 = *(_QWORD *)(a3 + 24);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
    v27(a1, a2, v5);
    v27((v10 + a1) & v23, (v10 + a2) & v23, v33);
    v28 = (v18 + a2) & v24;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
    v29((v18 + a1) & v24, v28, v34);
    v29((v15 + ((v18 + a1) & v24)) & v24, (v15 + v28) & v24, v34);
    v26 = 2;
  }
  else if (v21 == 1)
  {
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
    v25(a1, a2, *(_QWORD *)(a3 + 24));
    v25((v15 + a1) & v24, (v15 + a2) & v24, v6);
    v26 = 1;
  }
  else
  {
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
    v31 = *(_QWORD *)(a3 + 16);
    v30(a1, a2, v31);
    v30((v10 + a1) & v23, (v10 + a2) & v23, v31);
    v26 = 0;
  }
  *(_BYTE *)(a1 + v20) = v26;
  return a1;
}

uint64_t assignWithTake for CollectionChanges.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t, uint64_t);
  unsigned int v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  char v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 + 16);
    v5 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v40 = v8 + v9;
    v10 = ((v8 + v9) & ~v9) + v8;
    v11 = *(_QWORD *)(v5 - 8);
    v12 = *(_QWORD *)(v11 + 64);
    v13 = *(unsigned __int8 *)(v11 + 80);
    v14 = v12 + v13;
    v15 = ((v12 + v13) & ~v13) + v12;
    if (v15 <= v10)
      v16 = v10;
    else
      v16 = v15;
    v38 = v10 + v13;
    v17 = v15 + ((v10 + v13) & ~v13);
    if (v17 <= v16)
      v18 = v16;
    else
      v18 = v17;
    v19 = *(unsigned __int8 *)(a1 + v18);
    if (v19 >= 3)
    {
      if (v18 <= 3)
        v20 = v18;
      else
        v20 = 4;
      __asm { BR              X14 }
    }
    v39 = ~v9;
    v21 = ~v13;
    if (v19 == 2)
    {
      v23 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v23(a1, v6);
      v23((v40 + a1) & v39, v6);
      v37 = v6;
      v24 = v11;
      v25 = v14;
      v26 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v26((v38 + a1) & v21, v5);
      v26((v25 + ((v38 + a1) & v21)) & v21, v5);
      v14 = v25;
      v11 = v24;
      v6 = v37;
    }
    else if (v19 == 1)
    {
      v22 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v22(a1, v5);
      v22((v14 + a1) & v21, v5);
    }
    else
    {
      v27 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v27(a1, v6);
      v27((v40 + a1) & v39, v6);
    }
    v28 = *(unsigned __int8 *)(a2 + v18);
    if (v28 >= 3)
    {
      if (v18 <= 3)
        v29 = v18;
      else
        v29 = 4;
      __asm { BR              X12 }
    }
    if (v28 == 2)
    {
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
      v33(a1, a2, v6);
      v33((v40 + a1) & v39, (v40 + a2) & v39, v6);
      v34 = (v38 + a2) & v21;
      v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
      v35((v38 + a1) & v21, v34, v5);
      v35((v14 + ((v38 + a1) & v21)) & v21, (v14 + v34) & v21, v5);
      v31 = 2;
    }
    else if (v28 == 1)
    {
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
      v30(a1, a2, v5);
      v30((v14 + a1) & v21, (v14 + a2) & v21, v5);
      v31 = 1;
    }
    else
    {
      v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
      v32(a1, a2, v6);
      v32((v40 + a1) & v39, (v40 + a2) & v39, v6);
      v31 = 0;
    }
    *(_BYTE *)(a1 + v18) = v31;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionChanges.Element(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v3 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = ((v5 + v6) & ~v6) + v5;
  if (v7 <= v3)
    v8 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64)
         + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  else
    v8 = v7;
  v9 = v7 + ((v3 + v6) & ~v6);
  if (v9 <= v8)
    v10 = v8;
  else
    v10 = v9;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_25;
  v11 = v10 + 1;
  v12 = 8 * (v10 + 1);
  if ((v10 + 1) <= 3)
  {
    v15 = ((a2 + ~(-1 << v12) - 253) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v15 < 2)
    {
LABEL_25:
      v17 = *(unsigned __int8 *)(a1 + v10);
      if (v17 >= 3)
        return (v17 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_25;
LABEL_18:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return (v16 + 254);
  if (v11 > 3)
    LODWORD(v11) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187906664 + 4 * byte_187C6C968[(v11 - 1)]))();
}

void storeEnumTagSinglePayload for CollectionChanges.Element(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v5 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v7 + v8) & ~v8) + v7;
  if (v9 <= v5)
    v10 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64)
          + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80))
        + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  else
    v10 = v9;
  v11 = v9 + ((v5 + v8) & ~v8);
  if (v11 <= v10)
    v11 = v10;
  v12 = v11 + 1;
  if (a3 < 0xFE)
  {
    v13 = 0u;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 + ~(-1 << (8 * v12)) - 253) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v14 = a2 - 254;
  if (v12 < 4)
  {
    if ((_DWORD)v11 != -1)
    {
      v16 = v14 & ~(-1 << (8 * v12));
      bzero(a1, v12);
      if ((_DWORD)v12 == 3)
      {
        *a1 = v16;
        *((_BYTE *)a1 + 2) = BYTE2(v16);
      }
      else if ((_DWORD)v12 == 2)
      {
        *a1 = v16;
      }
      else
      {
        *(_BYTE *)a1 = v16;
      }
    }
  }
  else
  {
    bzero(a1, v11 + 1);
    *(_DWORD *)a1 = v14;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for CollectionChanges.Element(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = ((v4 + v5) & ~v5) + v4;
  if (v6 <= v2)
    v7 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64)
         + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  else
    v7 = v6;
  v8 = v6 + ((v2 + v5) & ~v5);
  if (v8 <= v7)
    v9 = v7;
  else
    v9 = v8;
  if (*(unsigned __int8 *)(a1 + v9) < 3u)
    return *(unsigned __int8 *)(a1 + v9);
  if (v9 <= 3)
    v10 = v9;
  else
    v10 = 4;
  return ((uint64_t (*)(void))((char *)&loc_187906910 + 4 * byte_187C6C976[v10]))();
}

void destructiveInjectEnumTag for CollectionChanges.Element(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = ((v5 + v6) & ~v6) + v5;
  if (a2 > 2)
  {
    v12 = *(_QWORD *)(v7 + 64);
    v13 = *(unsigned __int8 *)(v7 + 80);
    v14 = ((v12 + v13) & ~v13) + v12;
    if (v14 <= v8)
      v15 = v8;
    else
      v15 = v14;
    v16 = v14 + ((v8 + v13) & ~v13);
    if (v16 <= v15)
      v17 = v15;
    else
      v17 = v16;
    v18 = a2 - 3;
    if (v17 < 4)
    {
      v19 = v18 >> (8 * v17);
      v20 = v18 & ~(-1 << (8 * v17));
      a1[v17] = v19 + 3;
      bzero(a1, v17);
      if ((_DWORD)v17 == 3)
      {
        *(_WORD *)a1 = v20;
        a1[2] = BYTE2(v20);
      }
      else if ((_DWORD)v17 == 2)
      {
        *(_WORD *)a1 = v20;
      }
      else
      {
        *a1 = v20;
      }
    }
    else
    {
      a1[v17] = 3;
      bzero(a1, v17);
      *(_DWORD *)a1 = v18;
    }
  }
  else
  {
    v9 = *(unsigned __int8 *)(v7 + 80);
    v10 = ((*(_QWORD *)(v7 + 64) + v9) & ~v9) + *(_QWORD *)(v7 + 64);
    v11 = v10 + ((v8 + v9) & ~v9);
    if (v10 <= v8)
      v10 = v8;
    if (v11 > v10)
      v10 = v11;
    a1[v10] = a2;
  }
}

uint64_t storeEnumTagSinglePayload for CollectionChanges.Element.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187906AD4 + 4 * byte_187C6C980[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187906B08 + 4 * byte_187C6C97B[v4]))();
}

uint64_t sub_187906B08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187906B10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187906B18);
  return result;
}

uint64_t sub_187906B24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187906B2CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187906B30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187906B38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for CollectionChanges.Element.Kind()
{
  JUMPOUT(0x18D75FF28);
}

void base witness table accessor for Equatable in CollectionChanges<A, B>.Element.Kind()
{
  JUMPOUT(0x18D75FFDCLL);
}

void HelpLink.init(action:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void HelpLink.init(destination:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void HelpLink.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void HelpButton.init(action:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void HelpButton.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for View.Body : View in HelpLink()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in HelpButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for HelpLink(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int16 v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for HelpLink.Payload(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v10 = *(int *)(a3 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = *(_QWORD *)v12;
    v14 = *((_QWORD *)v12 + 1);
    v15 = *((_QWORD *)v12 + 2);
    v16 = *((_QWORD *)v12 + 3);
    v17 = v12[34];
    v18 = *((_WORD *)v12 + 16);
    outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v12, v14, v15, v16, v18, v17);
    *(_QWORD *)v11 = v13;
    *((_QWORD *)v11 + 1) = v14;
    *((_QWORD *)v11 + 2) = v15;
    *((_QWORD *)v11 + 3) = v16;
    *((_WORD *)v11 + 16) = v18;
    v11[34] = v17;
  }
  return a1;
}

uint64_t type metadata accessor for HelpLink.Payload(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for HelpLink.Payload);
}

uint64_t destroy for HelpLink(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for HelpLink.Payload(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  v5 = a1 + *(int *)(a2 + 20);
  return outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_WORD *)(v5 + 32), *(_BYTE *)(v5 + 34));
}

_QWORD *initializeWithCopy for HelpLink(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int16 v16;

  type metadata accessor for HelpLink.Payload(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = *(_QWORD *)v10;
  v12 = *((_QWORD *)v10 + 1);
  v13 = *((_QWORD *)v10 + 2);
  v14 = *((_QWORD *)v10 + 3);
  v15 = v10[34];
  v16 = *((_WORD *)v10 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v10, v12, v13, v14, v16, v15);
  *(_QWORD *)v9 = v11;
  *((_QWORD *)v9 + 1) = v12;
  *((_QWORD *)v9 + 2) = v13;
  *((_QWORD *)v9 + 3) = v14;
  *((_WORD *)v9 + 16) = v16;
  v9[34] = v15;
  return a1;
}

_QWORD *assignWithCopy for HelpLink(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int16 v22;

  if (a1 != a2)
  {
    outlined destroy of HelpLink.Payload((uint64_t)a1);
    type metadata accessor for HelpLink.Payload(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = *(_QWORD *)v10;
  v12 = *((_QWORD *)v10 + 1);
  v13 = *((_QWORD *)v10 + 2);
  v14 = *((_QWORD *)v10 + 3);
  v15 = v10[34];
  v16 = *((_WORD *)v10 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v10, v12, v13, v14, v16, v15);
  v17 = *(_QWORD *)v9;
  v18 = *((_QWORD *)v9 + 1);
  v19 = *((_QWORD *)v9 + 2);
  v20 = *((_QWORD *)v9 + 3);
  v21 = v9[34];
  *(_QWORD *)v9 = v11;
  *((_QWORD *)v9 + 1) = v12;
  *((_QWORD *)v9 + 2) = v13;
  *((_QWORD *)v9 + 3) = v14;
  v22 = *((_WORD *)v9 + 16);
  *((_WORD *)v9 + 16) = v16;
  v9[34] = v15;
  outlined consume of Environment<OpenURLAction>.Content(v17, v18, v19, v20, v22, v21);
  return a1;
}

uint64_t outlined destroy of HelpLink.Payload(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HelpLink.Payload(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for HelpLink(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;

  v6 = type metadata accessor for HelpLink.Payload(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  *(_DWORD *)(v9 + 31) = *(_DWORD *)(v10 + 31);
  return a1;
}

char *assignWithTake for HelpLink(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int16 v19;

  if (a1 != a2)
  {
    outlined destroy of HelpLink.Payload((uint64_t)a1);
    v6 = type metadata accessor for HelpLink.Payload(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *((_WORD *)v10 + 16);
  v12 = v10[34];
  v13 = *(_QWORD *)v9;
  v14 = *((_QWORD *)v9 + 1);
  v15 = *((_QWORD *)v9 + 2);
  v16 = *((_QWORD *)v9 + 3);
  v17 = v9[34];
  v18 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v18;
  v19 = *((_WORD *)v9 + 16);
  *((_WORD *)v9 + 16) = v11;
  v9[34] = v12;
  outlined consume of Environment<OpenURLAction>.Content(v13, v14, v15, v16, v19, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for HelpLink()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187907184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for HelpLink.Payload(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 34);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for HelpLink()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18790720C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for HelpLink.Payload(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 34) = -(char)a2;
  return result;
}

uint64_t type metadata accessor for HelpLink(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for HelpLink);
}

uint64_t type metadata completion function for HelpLink()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for HelpLink.Payload(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for HelpButton()
{
  return &type metadata for HelpButton;
}

unint64_t lazy protocol witness table accessor for type HelpLink and conformance HelpLink()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HelpLink and conformance HelpLink;
  if (!lazy protocol witness table cache variable for type HelpLink and conformance HelpLink)
  {
    v1 = type metadata accessor for HelpLink(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HelpLink, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HelpLink and conformance HelpLink);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for HelpLink.Payload(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for HelpLink.Payload(uint64_t a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v2 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

_QWORD *initializeWithCopy for HelpLink.Payload(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for URL();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for HelpLink.Payload(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of HelpLink.Payload((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for HelpLink.Payload(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for HelpLink.Payload(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of HelpLink.Payload((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for HelpLink.Payload()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MultiButtonPlatformItemsStrategy()
{
  return &type metadata for MultiButtonPlatformItemsStrategy;
}

ValueMetadata *type metadata accessor for LabelPlatformItemsStrategy()
{
  return &type metadata for LabelPlatformItemsStrategy;
}

BOOL specialized static UnaryPlatformItemsStrategy.hasChanges(from:to:)(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  BOOL v6;
  uint64_t v8[42];
  uint64_t v9[42];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_DWORD *)(a1 + 16);
  if (v3 == -1 || v4 == -1)
  {
    outlined init with copy of PlatformItem(a2, (uint64_t)v9);
    outlined init with copy of PlatformItem(a1, (uint64_t)v8);
LABEL_9:
    v6 = 1;
    goto LABEL_10;
  }
  outlined init with copy of PlatformItem(a2, (uint64_t)v9);
  outlined init with copy of PlatformItem(a1, (uint64_t)v8);
  if (v3 != v4)
    goto LABEL_9;
  v6 = !specialized static Array<A>.== infix(_:_:)(v9[0], v8[0]);
LABEL_10:
  outlined destroy of PlatformItem((uint64_t)v9);
  outlined destroy of PlatformItem((uint64_t)v8);
  return v6;
}

BOOL specialized static MultiPlatformItemsStrategy.hasChanges(from:to:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  char *v5;
  char *v6;
  BOOL v7;

  if (a5 == -1 || a2 == -1 || a5 != a2)
    return 0;
  swift_bridgeObjectRetain();
  v5 = PlatformItems.id.getter();
  v6 = PlatformItems.id.getter();
  swift_bridgeObjectRelease();
  v7 = specialized static Array<A>.== infix(_:_:)((uint64_t)v5, (uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance TextPlatformItemsStrategy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance TextPlatformItemsStrategy((uint64_t)&outlined read-only object #0 of protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance TextPlatformItemsStrategy, a1);
}

BOOL protocol witness for static PlatformItemsStrategy.hasChanges(from:to:) in conformance TextPlatformItemsStrategy(uint64_t a1, uint64_t a2)
{
  return specialized static UnaryPlatformItemsStrategy.hasChanges(from:to:)(a1, a2);
}

uint64_t protocol witness for static PlatformItemsStrategy.makeContent(from:) in conformance TextPlatformItemsStrategy()
{
  return protocol witness for static PlatformItemsStrategy.makeContent(from:) in conformance TextPlatformItemsStrategy();
}

{
  uint64_t v0;

  swift_bridgeObjectRetain();
  if ((PreferencesOutputs.subscript.getter() & 0x100000000) != 0)
  {
    v0 = *MEMORY[0x1E0CFED28];
  }
  else
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type _ViewOutputs.FirstItem and conformance _ViewOutputs.FirstItem();
    v0 = Attribute.init<A>(body:value:flags:update:)();
  }
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance StyledTextPlatformItemsStrategy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance TextPlatformItemsStrategy((uint64_t)&outlined read-only object #0 of protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance StyledTextPlatformItemsStrategy, a1);
}

uint64_t protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance LabelPlatformItemsStrategy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance TextPlatformItemsStrategy((uint64_t)&outlined read-only object #0 of protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance LabelPlatformItemsStrategy, a1);
}

uint64_t protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance ButtonPlatformItemsStrategy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance TextPlatformItemsStrategy((uint64_t)&outlined read-only object #0 of protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance ButtonPlatformItemsStrategy, a1);
}

uint64_t protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance TextPlatformItemsStrategy@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t result;
  _BYTE v5[216];

  _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v5);
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = xmmword_187BFE310;
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  result = outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v5, a2 + 24);
  *(_QWORD *)(a2 + 304) = 0;
  *(_BYTE *)(a2 + 312) = 1;
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a2 + 328) = 0;
  return result;
}

void protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance MultiButtonPlatformItemsStrategy(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
}

BOOL protocol witness for static PlatformItemsStrategy.hasChanges(from:to:) in conformance MultiButtonPlatformItemsStrategy(uint64_t a1, uint64_t a2)
{
  return specialized static MultiPlatformItemsStrategy.hasChanges(from:to:)(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)a2, *(_DWORD *)(a2 + 8));
}

uint64_t protocol witness for static PlatformItemsStrategy.makeContent(from:) in conformance MultiButtonPlatformItemsStrategy()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRetain();
  v0 = PreferencesOutputs.subscript.getter();
  if ((v0 & 0x100000000) != 0)
    v1 = *MEMORY[0x1E0CFED28];
  else
    v1 = v0;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t specialized static UnaryPlatformItemsStrategy.makeInputs(_:)()
{
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItems.Key>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>, &lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItems.Key>);
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey();
  return PropertyList.subscript.setter();
}

{
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItems.Key>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>, &lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItems.Key>);
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey();
  PropertyList.subscript.setter();
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>);
  return PreferenceKeys.add(_:)();
}

{
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItems.Key>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>, &lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItems.Key>);
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey();
  return PropertyList.subscript.setter();
}

{
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItems.Key>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>, &lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItems.Key>);
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey();
  return PropertyList.subscript.setter();
}

void type metadata accessor for PlatformItem.PrimaryContent?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PlatformItem.PrimaryContent?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  }
}

uint64_t specialized static MultiPlatformItemsStrategy.makeInputs(_:)()
{
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItems.Key>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>, &lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItems.Key>);
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey();
  return PropertyList.subscript.setter();
}

ValueMetadata *type metadata accessor for TextPlatformItemsStrategy()
{
  return &type metadata for TextPlatformItemsStrategy;
}

ValueMetadata *type metadata accessor for ButtonPlatformItemsStrategy()
{
  return &type metadata for ButtonPlatformItemsStrategy;
}

ValueMetadata *type metadata accessor for StyledTextPlatformItemsStrategy()
{
  return &type metadata for StyledTextPlatformItemsStrategy;
}

uint64_t type metadata completion function for URLDocumentHostingController()
{
  return swift_initClassMetadata2();
}

uint64_t DocumentHostingController.updateRootView(with:rootModifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[104];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  outlined init with copy of RootModifier(a2, (uint64_t)v17);
  v5 = v2 + direct field offset for DocumentHostingController.rootModifier;
  swift_beginAccess();
  outlined assign with copy of RootModifier((uint64_t)v17, v5);
  swift_endAccess();
  DocumentHostingController.scenesDidChange(phaseChanged:)(1);
  outlined destroy of RootModifier((uint64_t)v17);
  v6 = v2 + direct field offset for DocumentHostingController.configuration;
  swift_beginAccess();
  outlined assign with copy of IdentifiedDocumentGroupConfiguration(a1, v6);
  swift_endAccess();
  v7 = *(_QWORD *)(v2 + direct field offset for URLDocumentHostingController.navigationItemDescription);
  v8 = *(_QWORD *)(v2 + direct field offset for URLDocumentHostingController.navigationItemDescription + 8);
  v9 = *(_QWORD *)(v2 + direct field offset for URLDocumentHostingController.navigationItemDescription + 16);
  v10 = *(_QWORD *)(v2 + direct field offset for URLDocumentHostingController.navigationItemDescription + 24);
  v11 = *(_QWORD *)(v2 + direct field offset for URLDocumentHostingController.navigationItemDescription + 32);
  v14 = *(_OWORD *)(*(_QWORD *)(v2 + direct field offset for DocumentHostingController.document)
                  + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox);
  v12 = *(_QWORD *)(a1 + 64);
  outlined init with copy of RootModifier(a2, (uint64_t)v17);
  v18 = v14;
  outlined init with copy of DocumentSceneRootBoxModifier((uint64_t)v17, (uint64_t)&v16);
  v15 = v12;
  swift_unknownObjectRetain_n();
  outlined copy of NavigationItemDescription?(v7, v8, v9);
  swift_retain();
  outlined destroy of DocumentSceneRootBoxModifier((uint64_t)v17);
  outlined init with copy of ModifiedContent<AnyView, DocumentSceneRootBoxModifier>((uint64_t)&v15, (uint64_t)v17, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, (uint64_t)&type metadata for DocumentSceneRootBoxModifier);
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v22 = v10;
  v23 = v11;
  outlined copy of NavigationItemDescription?(v7, v8, v9);
  outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)&v15, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, (uint64_t)&type metadata for DocumentSceneRootBoxModifier);
  swift_unknownObjectRelease();
  outlined consume of NavigationItemDescription?(v7, v8, v9);
  return specialized UIHostingController.rootView.setter((uint64_t)v17);
}

uint64_t DocumentBaseModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
    v4 = *(_QWORD *)(v1 + 8) == 0;
  else
    v4 = 1;
  if (v4)
    swift_bridgeObjectRelease();
  else
    swift_bridgeObjectRetain();
  v5 = v3 != 0;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  v6 = Text.init<A>(_:)();
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v6;
  *(_QWORD *)(v13 + 24) = v8;
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = v10;
  *(_QWORD *)(v13 + 48) = 1;
  *(_BYTE *)(v13 + 56) = 5;
  *(_QWORD *)(v13 + 64) = 0;
  *(_BYTE *)(v13 + 72) = 3;
  swift_bridgeObjectRelease();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 3;
  *(_QWORD *)a1 = partial apply for closure #1 in View.navigationTitlePreferenceTransform(adding:);
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = closure #2 in View.navigationTitlePreferenceTransform(adding:);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = partial apply for closure #1 in View.toolbarTitleDisplayMode(_:);
  *(_QWORD *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = closure #1 in variable initialization expression of DocumentToolbarTransformModifier.transform;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance DocumentSceneRootBoxModifier@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __int128 v4;

  v4 = *(_OWORD *)(v1 + 104);
  outlined init with copy of RootModifier(v1, (uint64_t)(a1 + 1));
  *a1 = v4;
  return swift_unknownObjectRetain();
}

uint64_t closure #1 in variable initialization expression of DocumentToolbarTransformModifier.transform(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = type metadata accessor for ToolbarStorage.Entry(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolbarStorage.Entry.Kind(0);
  swift_storeEnumTagMultiPayload();
  v6[*(int *)(v2 + 20)] = 2;
  v7 = *(_QWORD **)(a1 + 40);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  v9 = v7[2];
  v8 = v7[3];
  if (v9 >= v8 >> 1)
    v7 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1, v7);
  v7[2] = v9 + 1;
  result = outlined init with take of ToolbarStorage.Entry((uint64_t)v6, (uint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v9);
  *(_QWORD *)(a1 + 40) = v7;
  return result;
}

double static DocumentToolbarTransformModifier._makeView(modifier:inputs:body:)@<D0>(void (*a1)(uint64_t *__return_ptr)@<X2>, double *a2@<X8>)
{
  _BYTE *Value;
  uint64_t v4;
  double result;
  uint64_t v6;
  double v7;

  a1(&v6);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<DocumentToolbarTransformModifier>, (uint64_t)&type metadata for DocumentToolbarTransformModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  Value = (_BYTE *)AGGraphGetValue();
  if (*Value == 1)
  {
    MEMORY[0x1E0C80A78](Value, v4);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)a2 = v6;
  result = v7;
  a2[1] = v7;
  return result;
}

uint64_t implicit closure #1 in static DocumentToolbarTransformModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<DocumentToolbarTransformModifier>, (uint64_t)&type metadata for DocumentToolbarTransformModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for Focus<DocumentToolbarTransformModifier, (_:)>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Focus<DocumentToolbarTransformModifier, (_:)> and conformance Focus<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Focus<DocumentToolbarTransformModifier, (_:)>, MEMORY[0x1E0CFECE0]);
  v0 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  return v0;
}

void protocol witness for ViewModifier.body(content:) in conformance DocumentToolbarTransformModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t URLDocumentHostingController.navigationItemDescription.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1 + direct field offset for URLDocumentHostingController.navigationItemDescription;
  v3 = *(_QWORD *)(v1 + direct field offset for URLDocumentHostingController.navigationItemDescription);
  v4 = *(_QWORD *)(v1 + direct field offset for URLDocumentHostingController.navigationItemDescription + 8);
  v5 = *(_QWORD *)(v2 + 16);
  outlined init with take of Image.Resolved?(a1, v2, &lazy cache variable for type metadata for NavigationItemDescription?, (uint64_t)&type metadata for NavigationItemDescription);
  return outlined consume of NavigationItemDescription?(v3, v4, v5);
}

uint64_t URLDocumentHostingController.presentationMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + direct field offset for URLDocumentHostingController.presentationMode + 8);
  v3 = *(_BYTE *)(v1 + direct field offset for URLDocumentHostingController.presentationMode + 16);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + direct field offset for URLDocumentHostingController.presentationMode);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  swift_retain();
  return swift_retain();
}

id @objc URLDocumentHostingController.undoManager.getter()
{
  return (id)specialized URLDocumentHostingController.undoManager.getter();
}

uint64_t static URLDocumentHostingController.makeRootView(navigationItemDescription:_:)(uint64_t a1, void (*a2)(double))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;

  v4 = outlined init with take of Image.Resolved?(a1, (uint64_t)v17, &lazy cache variable for type metadata for NavigationItemDescription?, (uint64_t)&type metadata for NavigationItemDescription);
  v13 = v17[1];
  v14 = v17[0];
  v5 = v18;
  v6 = *(_QWORD *)(v2 + 936);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v4, v8);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(v9);
  v15[0] = v14;
  v15[1] = v13;
  v16 = v5;
  MEMORY[0x18D75B4AC](v15, v6, &type metadata for DocumentBaseModifier, *(_QWORD *)(v2 + 944));
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v6);
}

void @objc URLDocumentHostingController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized URLDocumentHostingController.init(coder:)();
}

id @objc URLDocumentHostingController.navigationItem.getter(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = URLDocumentHostingController.navigationItem.getter();

  return v2;
}

id URLDocumentHostingController.navigationItem.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, sel_parentViewController);
  if (v1
    && (v2 = v1, v3 = objc_msgSend(v1, sel_navigationItem), v2, v3))
  {
    return v3;
  }
  else
  {
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3A48]), sel_init);
  }
}

uint64_t URLDocumentHostingController.update(_:)(uint64_t a1)
{
  UIHostingController.update(_:)(a1);
  swift_retain();
  swift_retain();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>, (uint64_t)&type metadata for PresentationModeKey, (uint64_t)&protocol witness table for PresentationModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_release();
}

Swift::Void __swiftcall URLDocumentHostingController.scenesDidChange(phaseChanged:)(Swift::Bool phaseChanged)
{
  char *v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  void (*v33)(double);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t ObjectType;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[5];
  uint64_t v45[5];
  uint64_t v46[5];
  char v47[16];
  uint64_t v48;
  _QWORD v49[5];

  ObjectType = swift_getObjectType();
  v40 = type metadata accessor for ModifiedContent();
  v39 = *(_QWORD *)(v40 - 8);
  v3 = MEMORY[0x1E0C80A78](v40, v2);
  v37 = (char *)&v34 - v4;
  MEMORY[0x18D75B908](v3);
  specialized NavigationItemDescription.init(from:)(objc_msgSend(v1, sel_navigationItem), v44);
  v5 = v44[0];
  v6 = v44[1];
  v7 = v44[2];
  v8 = v44[3];
  v9 = v44[4];
  v36 = (uint64_t)v1;
  v10 = (uint64_t *)&v1[direct field offset for URLDocumentHostingController.navigationItemDescription];
  v12 = *(_QWORD *)&v1[direct field offset for URLDocumentHostingController.navigationItemDescription];
  v11 = *(_QWORD *)&v1[direct field offset for URLDocumentHostingController.navigationItemDescription + 8];
  v13 = v10[2];
  v14 = v10[3];
  v15 = v10[4];
  v45[0] = *v10;
  v45[1] = v11;
  v45[2] = v13;
  v45[3] = v14;
  v45[4] = v15;
  outlined init with take of Image.Resolved?((uint64_t)v45, (uint64_t)v47, &lazy cache variable for type metadata for NavigationItemDescription?, (uint64_t)&type metadata for NavigationItemDescription);
  v41 = v7;
  v43 = v8;
  v42 = v9;
  if (!v48)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of NavigationItemDescription?(v5, v6, v7);
    outlined consume of NavigationItemDescription?(v12, v11, v13);
    v22 = (_QWORD *)&unk_1EDE37000;
    v23 = (uint64_t)v37;
    v24 = v36;
LABEL_20:
    v32 = (uint64_t *)(v24 + v22[262]);
    v27 = *v32;
    v28 = v32[1];
    v29 = v32[2];
    v30 = v32[3];
    v31 = v32[4];
    v46[0] = *v32;
    v46[1] = v28;
    v46[2] = v29;
    v46[3] = v30;
    v46[4] = v31;
    outlined retain of DocumentBaseModifier(v46);
    goto LABEL_21;
  }
  v35 = v11;
  v16 = v14;
  v17 = v6;
  v34 = v16;
  if (v6)
  {
    v18 = v43;
    v19 = v42;
    v20 = v16;
    v21 = v13;
    if (!v35)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      outlined retain of DocumentBaseModifier(v45);
      goto LABEL_16;
    }
    if ((v5 != v12 || v17 != v35) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      outlined retain of DocumentBaseModifier(v45);
      swift_bridgeObjectRelease();
LABEL_16:
      v25 = 0;
      v23 = (uint64_t)v37;
      goto LABEL_17;
    }
  }
  else
  {
    v18 = v43;
    v19 = v42;
    v20 = v16;
    v21 = v13;
    if (v35)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      outlined retain of DocumentBaseModifier(v45);
      swift_bridgeObjectRelease();
      v25 = 0;
      v23 = (uint64_t)v37;
      goto LABEL_17;
    }
  }
  v26 = specialized static Array<A>.== infix(_:_:)(v41, v21);
  v23 = (uint64_t)v37;
  if (v26 && specialized static Array<A>.== infix(_:_:)(v18, v20))
  {
    v25 = specialized static Array<A>.== infix(_:_:)(v19, v15);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    outlined retain of DocumentBaseModifier(v45);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    outlined retain of DocumentBaseModifier(v45);
    swift_bridgeObjectRelease();
    v25 = 0;
  }
LABEL_17:
  v24 = v36;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v25)
  {
    v22 = &unk_1EDE37000;
    goto LABEL_20;
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
LABEL_21:
  v49[0] = v27;
  v49[1] = v28;
  v49[2] = v29;
  v49[3] = v30;
  v49[4] = v31;
  v33 = *(void (**)(double))(v24 + direct field offset for URLDocumentHostingController.content);
  swift_retain();
  static URLDocumentHostingController.makeRootView(navigationItemDescription:_:)((uint64_t)v49, v33);
  swift_release();
  outlined consume of NavigationItemDescription?(v27, v28, v29);
  specialized UIHostingController.rootView.setter(v23);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v23, v40);
  $defer #2 <A>() in URLDocumentHostingController.scenesDidChange(phaseChanged:)(v24, (uint64_t)v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static Update.end()();
}

uint64_t $defer #2 <A>() in URLDocumentHostingController.scenesDidChange(phaseChanged:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[16];
  _OWORD v11[2];
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v4;
  v12 = v3;
  outlined init with take of Image.Resolved?(a2, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968]);
  v5 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = v5;
  v7 = *(_QWORD *)(a2 + 32);
  outlined retain of String?((uint64_t)v10);
  outlined retain of [Text.Modifier]((uint64_t)&v9);
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  outlined retain of [Text.Modifier]((uint64_t)&v7);
  return URLDocumentHostingController.navigationItemDescription.setter((uint64_t)v11);
}

void URLDocumentHostingController.__allocating_init(rootView:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void URLDocumentHostingController.__allocating_init(coder:rootView:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void URLDocumentHostingController.__allocating_init(hostingView:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void URLDocumentHostingController.__ivar_destroyer()
{
  uint64_t v0;

  outlined consume of NavigationItemDescription?(*(_QWORD *)(v0 + direct field offset for URLDocumentHostingController.navigationItemDescription), *(_QWORD *)(v0 + direct field offset for URLDocumentHostingController.navigationItemDescription + 8), *(_QWORD *)(v0 + direct field offset for URLDocumentHostingController.navigationItemDescription + 16));
  swift_release();
  swift_release();
  swift_release();

}

id URLDocumentHostingController.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for URLDocumentHostingController(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x3A8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x3B0), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

void @objc URLDocumentHostingController.__ivar_destroyer(uint64_t a1)
{
  outlined consume of NavigationItemDescription?(*(_QWORD *)(a1 + direct field offset for URLDocumentHostingController.navigationItemDescription), *(_QWORD *)(a1 + direct field offset for URLDocumentHostingController.navigationItemDescription + 8), *(_QWORD *)(a1 + direct field offset for URLDocumentHostingController.navigationItemDescription + 16));
  swift_release();
  swift_release();
  swift_release();

}

uint64_t type metadata accessor for URLDocumentHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for URLDocumentHostingController);
}

id protocol witness for UIHostingViewDelegate.hostingView<A>(_:didMoveTo:) in conformance URLDocumentHostingController<A>(id result, uint64_t a2)
{
  return specialized URLDocumentHostingController.hostingView<A>(_:didMoveTo:)(result, a2);
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance URLDocumentHostingController<A>(uint64_t a1, uint64_t a2)
{
  return specialized URLDocumentHostingController.hostingView<A>(_:willUpdate:)(a2);
}

uint64_t protocol witness for AppGraphObserver.scenesDidChange(phaseChanged:) in conformance URLDocumentHostingController<A>()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x440))();
}

Swift::Void __swiftcall DocumentHostingController.scenesDidChange(phaseChanged:)(Swift::Bool phaseChanged)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  Swift::Bool v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  _OWORD v39[6];
  _OWORD v40[2];
  _BYTE v41[64];
  uint64_t v42;
  _OWORD __src[17];
  _OWORD __dst[17];
  uint64_t v45[36];

  MEMORY[0x18D75B908]();
  if (!static AppGraph.shared)
    goto LABEL_38;
  v35 = phaseChanged;
  if (*(_DWORD *)(static AppGraph.shared + 204) == *MEMORY[0x1E0CFED28])
  {
    v6 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v7 = v1 + direct field offset for DocumentHostingController.configuration;
  swift_beginAccess();
  v2 = *(_QWORD *)(v7 + 104);
  v3 = *(_QWORD *)(v7 + 112);
  v4 = *(_BYTE *)(v7 + 120);
  v8 = *(_QWORD *)(v6 + 16);
  v37 = v4;
  if (!v8)
    goto LABEL_39;
  v36 = v1;
  v9 = v6 + 32;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of SceneID(v2, v3, v4);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of SceneList.Item(v9, (uint64_t)__src);
    v12 = *((_QWORD *)&__src[8] + 1);
    v11 = *(_QWORD *)&__src[8];
    if ((__src[9] & 1) == 0)
      break;
    v13 = BYTE8(__src[8]);
    if ((v4 & 1) == 0)
    {
      *(_QWORD *)&v39[0] = _typeName(_:qualified:)();
      *((_QWORD *)&v39[0] + 1) = v14;
      v15._countAndFlagsBits = 45;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      v41[0] = v13;
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v12 = *((_QWORD *)&v39[0] + 1);
      swift_bridgeObjectRetain();
      v17 = v3;
      if (*(_QWORD *)&v39[0] == v2)
        goto LABEL_18;
      goto LABEL_19;
    }
    if (*(_QWORD *)&__src[8] == v2 && BYTE8(__src[8]) == v3)
      goto LABEL_28;
LABEL_11:
    outlined destroy of SceneList.Item((uint64_t)__src);
    v9 += 272;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
  }
  if ((v4 & 1) == 0)
  {
    v22 = *(_QWORD *)&__src[8] == v2 && *((_QWORD *)&__src[8] + 1) == v3;
    if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_28;
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  *(_QWORD *)&v39[0] = _typeName(_:qualified:)();
  *((_QWORD *)&v39[0] + 1) = v18;
  v19._countAndFlagsBits = 45;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v41[0] = v3;
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  v4 = v37;
  swift_bridgeObjectRelease();
  v17 = *((_QWORD *)&v39[0] + 1);
  if (v11 != *(_QWORD *)&v39[0])
    goto LABEL_19;
LABEL_18:
  if (v12 != v17)
  {
LABEL_19:
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
      goto LABEL_28;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease_n();
LABEL_28:
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, sizeof(__dst));
  swift_bridgeObjectRelease();
  outlined consume of SceneID(v2, v3, v4);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)&__dst[16])
    goto LABEL_37;
  memcpy(v45, __dst, 0x110uLL);
  outlined init with copy of SceneList.Item((uint64_t)v45, (uint64_t)__dst);
  if (v35
    || *((_QWORD *)&__dst[9] + 1) != *(_QWORD *)(v36 + direct field offset for DocumentHostingController.lastVersion))
  {
    outlined destroy of SceneList.Item((uint64_t)__dst);
    outlined init with copy of SceneList.Item.Value(v45, (uint64_t)__src);
    if (BYTE9(__src[7]) == 2)
    {
      v39[4] = __src[4];
      v39[5] = __src[5];
      v40[0] = __src[6];
      *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)((char *)&__src[6] + 9);
      v39[0] = __src[0];
      v39[1] = __src[1];
      v39[2] = __src[2];
      v39[3] = __src[3];
      outlined init with copy of DocumentGroupConfiguration((uint64_t)v39, (uint64_t)v41);
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v39);
      v23 = v42;
      swift_retain();
      outlined destroy of DocumentGroupConfiguration((uint64_t)v41);
      v24 = v36 + direct field offset for DocumentHostingController.rootModifier;
      swift_beginAccess();
      outlined init with copy of RootModifier(v24, (uint64_t)v41);
      v25 = *(_QWORD *)(v36 + direct field offset for URLDocumentHostingController.navigationItemDescription);
      v26 = *(_QWORD *)(v36 + direct field offset for URLDocumentHostingController.navigationItemDescription + 8);
      v27 = *(_QWORD *)(v36 + direct field offset for URLDocumentHostingController.navigationItemDescription + 16);
      v28 = *(_QWORD *)(v36 + direct field offset for URLDocumentHostingController.navigationItemDescription + 24);
      v29 = *(_QWORD *)(v36 + direct field offset for URLDocumentHostingController.navigationItemDescription + 32);
      v38 = *(_OWORD *)(*(_QWORD *)(v36 + direct field offset for DocumentHostingController.document)
                      + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox);
      outlined init with copy of RootModifier((uint64_t)v41, (uint64_t)__src);
      *(_OWORD *)((char *)&__src[6] + 8) = v38;
      outlined init with copy of DocumentSceneRootBoxModifier((uint64_t)__src, (uint64_t)v39 + 8);
      *(_QWORD *)&v39[0] = v23;
      swift_unknownObjectRetain_n();
      swift_retain();
      outlined copy of NavigationItemDescription?(v25, v26, v27);
      outlined destroy of DocumentSceneRootBoxModifier((uint64_t)__src);
      outlined init with copy of ModifiedContent<AnyView, DocumentSceneRootBoxModifier>((uint64_t)v39, (uint64_t)__src, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, (uint64_t)&type metadata for DocumentSceneRootBoxModifier);
      *(_QWORD *)&__src[8] = v25;
      *((_QWORD *)&__src[8] + 1) = v26;
      *(_QWORD *)&__src[9] = v27;
      *((_QWORD *)&__src[9] + 1) = v28;
      *(_QWORD *)&__src[10] = v29;
      outlined copy of NavigationItemDescription?(v25, v26, v27);
      outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)v39, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, (uint64_t)&type metadata for DocumentSceneRootBoxModifier);
      swift_unknownObjectRelease();
      outlined consume of NavigationItemDescription?(v25, v26, v27);
      outlined destroy of RootModifier((uint64_t)v41);
      specialized UIHostingController.rootView.setter((uint64_t)__src);
      v30 = *(_QWORD **)(v36 + direct field offset for UIHostingController.host);
      v31 = v45[21];
      v32 = (_QWORD *)((char *)v30 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v30) + 0x118));
      v33 = *v32;
      *v32 = v45[20];
      v32[1] = v31;
      swift_retain();
      v34 = v30;
      swift_retain();
      outlined consume of EnvironmentValues?(v33);
      LOWORD(__src[0]) = 2;
      type metadata accessor for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

      swift_release();
      swift_release();
      *(_QWORD *)(v36 + direct field offset for DocumentHostingController.lastVersion) = v45[19];
      outlined destroy of SceneList.Item((uint64_t)v45);
      goto LABEL_34;
    }
    while (1)
    {
LABEL_38:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_39:
      swift_retain();
      outlined copy of SceneID(v2, v3, v4);
      swift_bridgeObjectRetain();
LABEL_36:
      memset(__dst, 0, sizeof(__dst));
      swift_bridgeObjectRelease();
      outlined consume of SceneID(v2, v3, v37);
      swift_bridgeObjectRelease();
LABEL_37:
      swift_release();
      outlined destroy of SceneList.Item?((uint64_t)__dst);
    }
  }
  outlined destroy of SceneList.Item((uint64_t)__dst);
  outlined destroy of SceneList.Item((uint64_t)v45);
  swift_release();
LABEL_34:
  static Update.end()();
}

uint64_t closure #1 in DocumentHostingController.init(document:configuration:rootModifier:navigationItemDescription:presentationMode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  _BYTE v8[104];
  __int128 v9;

  v6 = *(_QWORD *)(a1 + 64);
  outlined init with copy of RootModifier(a2, (uint64_t)v8);
  v9 = *(_OWORD *)(a3 + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox);
  outlined init with copy of DocumentSceneRootBoxModifier((uint64_t)v8, (uint64_t)(a4 + 1));
  *a4 = v6;
  swift_retain();
  swift_unknownObjectRetain();
  return outlined destroy of DocumentSceneRootBoxModifier((uint64_t)v8);
}

void @objc DocumentHostingController.init(coder:)(char *a1, uint64_t a2, void *a3)
{
  id v4;

  *(_QWORD *)&a1[direct field offset for DocumentHostingController.lastVersion] = 0;
  v4 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id @objc DocumentHostingController.navigationItem.getter(void *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;

  v1 = a1;
  v2 = objc_msgSend(v1, sel_parentViewController);
  if (!v2
    || (v3 = v2, v4 = objc_msgSend(v2, sel_navigationItem), v3, !v4))
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3A48]), sel_init);
  }

  return v4;
}

uint64_t DocumentHostingController.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of IdentifiedDocumentGroupConfiguration(v0 + direct field offset for DocumentHostingController.configuration);
  return outlined destroy of RootModifier(v0 + direct field offset for DocumentHostingController.rootModifier);
}

uint64_t @objc DocumentHostingController.__ivar_destroyer(uint64_t a1)
{

  outlined destroy of IdentifiedDocumentGroupConfiguration(a1 + direct field offset for DocumentHostingController.configuration);
  return outlined destroy of RootModifier(a1 + direct field offset for DocumentHostingController.rootModifier);
}

uint64_t type metadata accessor for DocumentHostingController()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentHostingController;
  if (!type metadata singleton initialization cache for DocumentHostingController)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for DocumentHostingController()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for DocumentHostingController()
{
  return type metadata accessor for DocumentHostingController();
}

uint64_t destroy for DocumentSceneRootBoxModifier(uint64_t a1)
{
  int v2;

  swift_weakDestroy();
  swift_weakDestroy();
  swift_weakDestroy();
  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  v2 = *(unsigned __int8 *)(a1 + 88);
  if (v2 != 255)
    outlined consume of SceneID(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v2 & 1);
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for DocumentSceneRootBoxModifier(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  swift_weakCopyInit();
  swift_weakCopyInit();
  swift_weakCopyInit();
  v4 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v6 - 8))(v4, v5);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 40);
    *v4 = *v5;
    *(_OWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v9 = *(unsigned __int8 *)(a2 + 88);
  if (v9 == 255)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  }
  else
  {
    v10 = v9 & 1;
    v11 = *(_QWORD *)(a2 + 72);
    v12 = *(_QWORD *)(a2 + 80);
    outlined copy of SceneID(v11, v12, v9 & 1);
    *(_QWORD *)(a1 + 72) = v11;
    *(_QWORD *)(a1 + 80) = v12;
    *(_BYTE *)(a1 + 88) = v10;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DocumentSceneRootBoxModifier(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 *v11;
  __int128 *v12;
  int v13;
  char v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  swift_weakCopyAssign();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  v4 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 24);
      v7 = *(_QWORD *)(a2 + 56);
      v8 = *(_OWORD *)(a2 + 40);
      *v4 = *v5;
      *(_OWORD *)(a1 + 40) = v8;
      *(_QWORD *)(a1 + 56) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 24, a2 + 24);
  }
  else
  {
    v9 = *v5;
    v10 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *v4 = v9;
    *(_OWORD *)(a1 + 40) = v10;
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v11 = (__int128 *)(a1 + 72);
  v12 = (__int128 *)(a2 + 72);
  v13 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v13 == 255)
    {
      v15 = *v12;
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *v11 = v15;
    }
    else
    {
      v22 = v13 & 1;
      v23 = *(_QWORD *)(a2 + 72);
      v24 = *(_QWORD *)(a2 + 80);
      outlined copy of SceneID(v23, v24, v13 & 1);
      *(_QWORD *)(a1 + 72) = v23;
      *(_QWORD *)(a1 + 80) = v24;
      *(_BYTE *)(a1 + 88) = v22;
    }
  }
  else if (v13 == 255)
  {
    outlined destroy of SceneID(a1 + 72);
    v14 = *(_BYTE *)(a2 + 88);
    *v11 = *v12;
    *(_BYTE *)(a1 + 88) = v14;
  }
  else
  {
    v16 = v13 & 1;
    v17 = *(_QWORD *)(a2 + 72);
    v18 = *(_QWORD *)(a2 + 80);
    outlined copy of SceneID(v17, v18, v13 & 1);
    v19 = *(_QWORD *)(a1 + 72);
    v20 = *(_QWORD *)(a1 + 80);
    v21 = *(_BYTE *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = v17;
    *(_QWORD *)(a1 + 80) = v18;
    *(_BYTE *)(a1 + 88) = v16;
    outlined consume of SceneID(v19, v20, v21);
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v25 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 112) = v25;
  return a1;
}

uint64_t initializeWithTake for DocumentSceneRootBoxModifier(uint64_t a1, uint64_t a2)
{
  swift_weakTakeInit();
  swift_weakTakeInit();
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

uint64_t assignWithTake for DocumentSceneRootBoxModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_weakTakeAssign();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  if (*(_QWORD *)(a1 + 48))
  {
    if (*(_QWORD *)(a2 + 48))
      __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    else
      outlined destroy of AnyHashable(a1 + 24);
  }
  v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v5 = (_OWORD *)(a2 + 72);
  v6 = *(unsigned __int8 *)(a1 + 88);
  if (v6 != 255)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    if (v7 != 255)
    {
      v8 = *(_QWORD *)(a1 + 72);
      v9 = *(_QWORD *)(a1 + 80);
      *(_OWORD *)(a1 + 72) = *v5;
      *(_BYTE *)(a1 + 88) = v7 & 1;
      outlined consume of SceneID(v8, v9, v6 & 1);
      goto LABEL_10;
    }
    outlined destroy of SceneID(a1 + 72);
  }
  *(_OWORD *)(a1 + 72) = *v5;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
LABEL_10:
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 104);
  v12 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = v11;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 112) = v12;
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentSceneRootBoxModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 104);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentSceneRootBoxModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 104) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DocumentSceneRootBoxModifier()
{
  return &type metadata for DocumentSceneRootBoxModifier;
}

uint64_t destroy for DocumentBaseModifier(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for DocumentBaseModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v3 = a2[2];
  if (v3)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    v5 = a2[3];
    v6 = a2[4];
    a1[2] = v3;
    a1[3] = v5;
    a1[4] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v7;
    a1[4] = a2[4];
  }
  return a1;
}

_QWORD *assignWithCopy for DocumentBaseModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = a2[2];
  if (a1[2])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of NavigationItemDescription((uint64_t)a1);
      v5 = a2[4];
      v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v6;
      a1[4] = v5;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *(_OWORD *)a2;
    v8 = *((_OWORD *)a2 + 1);
    a1[4] = a2[4];
    *(_OWORD *)a1 = v7;
    *((_OWORD *)a1 + 1) = v8;
  }
  return a1;
}

uint64_t outlined destroy of NavigationItemDescription(uint64_t a1)
{
  destroy for MenuBuilderContext();
  return a1;
}

uint64_t assignWithTake for DocumentBaseModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    outlined destroy of NavigationItemDescription(a1);
LABEL_5:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    return a1;
  }
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DocumentBaseModifier()
{
  return &type metadata for DocumentBaseModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DocumentBaseModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DocumentSceneRootBoxModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized URLDocumentHostingController.hostingView<A>(_:willUpdate:)(uint64_t a1)
{
  specialized static UpdateEnvironmentToAllowedBehaviors.makeEnvironment(environment:)(a1);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultToolbarRoleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultToolbarRoleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

id specialized URLDocumentHostingController.hostingView<A>(_:didMoveTo:)(id result, uint64_t a2)
{
  if (a2)
    return objc_msgSend(result, sel_layoutIfNeeded);
  return result;
}

uint64_t sub_18790AEFC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 48) != 1)
    swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.navigationTitlePreferenceTransform(adding:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in View.navigationTitlePreferenceTransform(adding:)(a1, a2, v2 + 16);
}

uint64_t sub_18790AF54()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.toolbarTitleDisplayMode(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in View.toolbarTitleDisplayMode(_:)(a1, *(_BYTE *)(v1 + 16));
}

uint64_t outlined init with take of ToolbarStorage.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ToolbarStorage.Entry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SceneList.Item?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of DocumentSceneRootBoxModifier(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DocumentSceneRootBoxModifier(a2, a1);
  return a2;
}

uint64_t outlined destroy of DocumentSceneRootBoxModifier(uint64_t a1)
{
  destroy for DocumentSceneRootBoxModifier(a1);
  return a1;
}

void type metadata accessor for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for _UIHostingView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>);
  }
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized DocumentHostingController.init(document:configuration:rootModifier:navigationItemDescription:presentationMode:)(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  char *v5;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  id v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t result;
  char *v30;
  id v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[104];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _BYTE v46[104];
  _BYTE v47[64];
  uint64_t v48;
  _BYTE v49[104];
  _OWORD v50[6];
  _OWORD v51[2];
  _OWORD v52[2];
  uint64_t v53;

  outlined init with take of Image.Resolved?((uint64_t)a4, (uint64_t)v52, &lazy cache variable for type metadata for NavigationItemDescription?, (uint64_t)&type metadata for NavigationItemDescription);
  v36 = v52[1];
  v37 = v52[0];
  v35 = v53;
  v33 = a5[1];
  v34 = *a5;
  v32 = *((_BYTE *)a5 + 16);
  *(_QWORD *)&v5[direct field offset for DocumentHostingController.lastVersion] = 0;
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)&v5[direct field offset for DocumentHostingController.configuration]);
  *(_QWORD *)&v5[direct field offset for DocumentHostingController.document] = a1;
  outlined init with copy of RootModifier(a3, (uint64_t)&v5[direct field offset for DocumentHostingController.rootModifier]);
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v50);
  v38 = a3;
  outlined init with copy of RootModifier(a3, (uint64_t)v49);
  outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v50, (uint64_t)v47);
  outlined init with copy of RootModifier((uint64_t)v49, (uint64_t)v46);
  v11 = swift_allocObject();
  v12 = v50[5];
  *(_OWORD *)(v11 + 80) = v50[4];
  *(_OWORD *)(v11 + 96) = v12;
  *(_OWORD *)(v11 + 112) = v51[0];
  *(_OWORD *)(v11 + 121) = *(_OWORD *)((char *)v51 + 9);
  v13 = v50[1];
  *(_OWORD *)(v11 + 16) = v50[0];
  *(_OWORD *)(v11 + 32) = v13;
  v14 = v50[3];
  *(_OWORD *)(v11 + 48) = v50[2];
  *(_OWORD *)(v11 + 64) = v14;
  outlined init with take of RootModifier((uint64_t)v49, v11 + 144);
  *(_QWORD *)(v11 + 248) = a1;
  v30 = a1;
  v31 = objc_msgSend(v30, sel_undoManager);
  v15 = (uint64_t)&v5[direct field offset for URLDocumentHostingController.navigationItemDescription];
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_QWORD *)(v15 + 32) = 0;
  v16 = direct field offset for URLDocumentHostingController._undoManager;
  *(_QWORD *)&v5[direct field offset for URLDocumentHostingController._undoManager] = 0;
  v17 = &v5[direct field offset for URLDocumentHostingController.content];
  *(_QWORD *)v17 = partial apply for closure #1 in DocumentHostingController.init(document:configuration:rootModifier:navigationItemDescription:presentationMode:);
  *((_QWORD *)v17 + 1) = v11;
  v19 = *(_QWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  v20 = *(_QWORD *)(v15 + 16);
  outlined init with take of Image.Resolved?((uint64_t)a4, v15, &lazy cache variable for type metadata for NavigationItemDescription?, (uint64_t)&type metadata for NavigationItemDescription);
  v21 = v5;
  swift_retain();
  outlined retain of DocumentBaseModifier(a4);
  outlined consume of NavigationItemDescription?(v19, v18, v20);
  v22 = &v21[direct field offset for URLDocumentHostingController.presentationMode];
  *(_QWORD *)v22 = v34;
  *((_QWORD *)v22 + 1) = v33;
  v22[16] = v32;
  v23 = *(void **)&v5[v16];
  *(_QWORD *)&v5[v16] = v31;
  v24 = v31;

  v25 = v48;
  outlined init with copy of RootModifier((uint64_t)v46, (uint64_t)v41);
  v42 = *(_OWORD *)&v30[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox];
  outlined init with copy of DocumentSceneRootBoxModifier((uint64_t)v41, (uint64_t)&v40);
  v39 = v25;
  swift_retain();
  swift_unknownObjectRetain();
  outlined destroy of DocumentSceneRootBoxModifier((uint64_t)v41);
  outlined init with copy of ModifiedContent<AnyView, DocumentSceneRootBoxModifier>((uint64_t)&v39, (uint64_t)v41, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, (uint64_t)&type metadata for DocumentSceneRootBoxModifier);
  v43 = v37;
  v44 = v36;
  v45 = v35;
  outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)&v39, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, (uint64_t)&type metadata for DocumentSceneRootBoxModifier);
  v26 = (char *)specialized UIHostingController.init(rootView:)((uint64_t)v41);
  *(_QWORD *)(*(_QWORD *)&v26[direct field offset for UIHostingController.host]
            + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)&v26[direct field offset for UIHostingController.host])
                        + 0x240)
            + 8) = &protocol witness table for URLDocumentHostingController<A>;
  swift_unknownObjectWeakAssign();
  v27 = static AppGraph.shared;
  if (static AppGraph.shared)
  {
    v28 = v26;
    swift_retain();
    specialized AppGraph.addObserver(_:)(v28, v27);
    swift_release();

    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v47);
    outlined destroy of RootModifier((uint64_t)v46);
    swift_release();

    outlined destroy of RootModifier(v38);
    outlined destroy of IdentifiedDocumentGroupConfiguration(a2);
    return (uint64_t)v28;
  }
  else
  {
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v47);
    outlined destroy of RootModifier((uint64_t)v46);

    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized URLDocumentHostingController.undoManager.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for URLDocumentHostingController._undoManager);
}

void specialized URLDocumentHostingController.init(coder:)()
{
  char *v0;
  char *v1;

  v1 = &v0[direct field offset for URLDocumentHostingController.navigationItemDescription];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;
  *(_QWORD *)&v0[direct field offset for URLDocumentHostingController._undoManager] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_18790B72C()
{
  uint64_t v0;
  int v1;

  if (*(_QWORD *)(v0 + 64))
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of SceneID(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_BYTE *)(v0 + 136));
  swift_weakDestroy();
  swift_weakDestroy();
  swift_weakDestroy();
  if (*(_QWORD *)(v0 + 192))
    __swift_destroy_boxed_opaque_existential_1(v0 + 168);
  v1 = *(unsigned __int8 *)(v0 + 232);
  if (v1 != 255)
    outlined consume of SceneID(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), v1 & 1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DocumentHostingController.init(document:configuration:rootModifier:navigationItemDescription:presentationMode:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in DocumentHostingController.init(document:configuration:rootModifier:navigationItemDescription:presentationMode:)(v1 + 16, v1 + 144, *(_QWORD *)(v1 + 248), a1);
}

uint64_t outlined assign with take of DocumentGroupsIntroRootView(uint64_t a1, uint64_t a2)
{
  assignWithTake for DocumentGroupsIntroRootView(a2, a1);
  return a2;
}

uint64_t outlined assign with copy of IdentifiedDocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  assignWithCopy for IdentifiedDocumentGroupConfiguration(a2, a1);
  return a2;
}

uint64_t outlined init with copy of ModifiedContent<AnyView, DocumentSceneRootBoxModifier>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a3, MEMORY[0x1E0CE7518], a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined assign with take of ModifiedContent<AnyView, RootModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for DocumentToolbarTransformModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DocumentToolbarTransformModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DocumentToolbarTransformModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for DocumentToolbarTransformModifier()
{
  return &type metadata for DocumentToolbarTransformModifier;
}

uint64_t sub_18790B9D4()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>, RootModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>, RootModifier>, lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type RootModifier and conformance RootModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>, RootModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>, RootModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DocumentSceneRootBoxModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentSceneRootBoxModifier and conformance DocumentSceneRootBoxModifier, (uint64_t)&type metadata for DocumentSceneRootBoxModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<DocumentSceneRootBoxModifier> and conformance _ViewModifier_Content<A>, (uint64_t)&protocol witness table for ObservableDocumentBoxModifier);
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<DocumentSceneRootBoxModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<DocumentSceneRootBoxModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<DocumentSceneRootBoxModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DocumentSceneRootBoxModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentSceneRootBoxModifier and conformance DocumentSceneRootBoxModifier, (uint64_t)&type metadata for DocumentSceneRootBoxModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<DocumentSceneRootBoxModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>, DocumentToolbarTransformModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>, DocumentToolbarTransformModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>, DocumentToolbarTransformModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>, DocumentToolbarTransformModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationTitleKey> and conformance _PreferenceTransformModifier<A>);
    v3[1] = &protocol witness table for DocumentToolbarTransformModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>, DocumentToolbarTransformModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DocumentBaseModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier, (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<DocumentBaseModifier> and conformance _ViewModifier_Content<A>, (uint64_t)&protocol witness table for TransactionalPreferenceTransformModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<DocumentBaseModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<DocumentBaseModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<DocumentBaseModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DocumentBaseModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier, (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<DocumentBaseModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationTitleKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationTitleKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationTitleKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationTitleKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in DocumentToolbarTransformModifier()
{
  return &protocol witness table for DocumentToolbarTransformModifier;
}

uint64_t partial apply for implicit closure #1 in static DocumentToolbarTransformModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static DocumentToolbarTransformModifier._makeView(modifier:inputs:body:)();
}

uint64_t sub_18790BEA8@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a2[1] = (uint64_t (*)(uint64_t))v5;
  return swift_retain();
}

void type metadata accessor for Focus<DocumentToolbarTransformModifier, (_:)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Focus<DocumentToolbarTransformModifier, (_:)>)
  {
    type metadata accessor for (_:)();
    v0 = type metadata accessor for Focus();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<DocumentToolbarTransformModifier, (_:)>);
  }
}

uint64_t sub_18790BF54()
{
  swift_release();
  return swift_deallocObject();
}

_BYTE *assignWithCopy for ArchivableCircularPlaybackProgressView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ProgressViewValue);
    v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Date();
      v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v11 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  v12 = v11[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v14[8];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v15;
  a1[v11[6]] = a2[v11[6]];
  a1[v11[7]] = a2[v11[7]];
  a1[v11[8]] = a2[v11[8]];
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_retain();
  swift_release();
  return a1;
}

_BYTE *assignWithTake for ArchivableCircularPlaybackProgressView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ProgressViewValue);
    v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Date();
      v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v11 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  v12 = v11[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  a1[v11[6]] = a2[v11[6]];
  a1[v11[7]] = a2[v11[7]];
  a1[v11[8]] = a2[v11[8]];
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableCircularPlaybackProgressView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18790C22C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for ProgressViewStyleConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivableCircularPlaybackProgressView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18790C2B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ProgressViewStyleConfiguration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ArchivableCircularPlaybackProgressView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ArchivableCircularPlaybackProgressView);
}

uint64_t type metadata completion function for ArchivableCircularPlaybackProgressView()
{
  return type metadata completion function for ArchivableCircularPlaybackProgressView();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ProgressViewStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ArchivableCircularProgressView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = type metadata accessor for Date();
      v12 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      v12(v8, v9, v11);
      type metadata accessor for ClosedRange<Date>();
      v12(&v8[*(int *)(v13 + 36)], &v9[*(int *)(v13 + 36)], v11);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      v8[*(int *)(v14 + 48)] = v9[*(int *)(v14 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    v16 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
    v17 = v16[5];
    v18 = &v8[v17];
    v19 = &v9[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v8[v16[6]] = v9[v16[6]];
    v8[v16[7]] = v9[v16[7]];
    v8[v16[8]] = v9[v16[8]];
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ArchivableCircularProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  v2 = a1 + *(int *)(a2 + 24);
  type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v3 = type metadata accessor for Date();
    v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
    v4(v2, v3);
    type metadata accessor for ClosedRange<Date>();
    v4(v2 + *(int *)(v5 + 36), v3);
  }
  return swift_release();
}

_OWORD *initializeWithCopy for ArchivableCircularProgressView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = type metadata accessor for Date();
    v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v7, v8, v10);
    type metadata accessor for ClosedRange<Date>();
    v11(&v7[*(int *)(v12 + 36)], &v8[*(int *)(v12 + 36)], v10);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    v7[*(int *)(v13 + 48)] = v8[*(int *)(v13 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v14 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  v15 = v14[5];
  v16 = &v7[v15];
  v17 = &v8[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v7[v14[6]] = v8[v14[6]];
  v7[v14[7]] = v8[v14[7]];
  v7[v14[8]] = v8[v14[8]];
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ArchivableCircularProgressView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v6, type metadata accessor for ProgressViewValue);
    v9 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = type metadata accessor for Date();
      v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
      v11(v7, v8, v10);
      type metadata accessor for ClosedRange<Date>();
      v11(&v7[*(int *)(v12 + 36)], &v8[*(int *)(v12 + 36)], v10);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      v7[*(int *)(v13 + 48)] = v8[*(int *)(v13 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
  }
  v14 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  v15 = v14[5];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v18;
  v7[v14[6]] = v8[v14[6]];
  v7[v14[7]] = v8[v14[7]];
  v7[v14[8]] = v8[v14[8]];
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for ArchivableCircularProgressView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = type metadata accessor for Date();
    v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
    v11(v7, v8, v10);
    type metadata accessor for ClosedRange<Date>();
    v11(&v7[*(int *)(v12 + 36)], &v8[*(int *)(v12 + 36)], v10);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    v7[*(int *)(v13 + 48)] = v8[*(int *)(v13 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v14 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  v15 = v14[5];
  v16 = &v7[v15];
  v17 = &v8[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v7[v14[6]] = v8[v14[6]];
  v7[v14[7]] = v8[v14[7]];
  v7[v14[8]] = v8[v14[8]];
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

_OWORD *assignWithTake for ArchivableCircularProgressView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v6, type metadata accessor for ProgressViewValue);
    v9 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = type metadata accessor for Date();
      v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
      v11(v7, v8, v10);
      type metadata accessor for ClosedRange<Date>();
      v11(&v7[*(int *)(v12 + 36)], &v8[*(int *)(v12 + 36)], v10);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      v7[*(int *)(v13 + 48)] = v8[*(int *)(v13 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
  }
  v14 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  v15 = v14[5];
  v16 = &v7[v15];
  v17 = &v8[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v7[v14[6]] = v8[v14[6]];
  v7[v14[7]] = v8[v14[7]];
  v7[v14[8]] = v8[v14[8]];
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableCircularProgressView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18790CAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for ProgressViewStyleConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivableCircularProgressView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18790CB5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ProgressViewStyleConfiguration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = a2;
  return result;
}

uint64_t type metadata accessor for ArchivableCircularProgressView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ArchivableCircularProgressView);
}

uint64_t type metadata completion function for ArchivableCircularProgressView()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ProgressViewStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ArchivableLinearProgressView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18790CC88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for ProgressViewStyleConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivableLinearProgressView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18790CD1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ProgressViewStyleConfiguration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for ArchivableLinearProgressView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ArchivableLinearProgressView);
}

uint64_t type metadata completion function for ArchivableLinearProgressView()
{
  return type metadata completion function for ArchivableCircularPlaybackProgressView();
}

uint64_t associated type witness table accessor for View.Body : View in ArchivableLinearProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized static View._viewListCount(inputs:)()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  BOOL v5;
  unsigned __int8 v6;

  type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>(0);
  type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>(0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance <> _VariadicView.Tree<A, B>, MEMORY[0x1E0CE2BC0]);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?> and conformance _OverlayModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>, MEMORY[0x1E0CE3620]);
  result = static ModifiedContent<>._viewListCount(inputs:)();
  v1 = result;
  if ((v2 & 1) == 0)
  {
    type metadata accessor for SubviewsRoot<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SubviewsRoot<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>> and conformance SubviewsRoot<A>, (uint64_t (*)(uint64_t))type metadata accessor for SubviewsRoot<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>, (uint64_t)&protocol conformance descriptor for SubviewsRoot<A>);
    v3 = static _VariadicView.Tree<>._viewListCount(inputs:)();
    result = 0;
    if ((v4 & 1) == 0 && v1 == v3)
    {
      type metadata accessor for SubviewsRoot<Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>(0);
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SubviewsRoot<Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance SubviewsRoot<A>, (uint64_t (*)(uint64_t))type metadata accessor for SubviewsRoot<Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>, (uint64_t)&protocol conformance descriptor for SubviewsRoot<A>);
      lazy protocol witness table accessor for type Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>> and conformance <A> Group<A>();
      v5 = v1 != static _VariadicView.Tree<>._viewListCount(inputs:)();
      if (((v6 | v5) & 1) != 0)
        return 0;
      else
        return v1;
    }
  }
  return result;
}

{
  uint64_t v0;
  char v1;
  BOOL v2;
  unsigned __int8 v3;

  type metadata accessor for StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView> and conformance StrokeShapeView<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, MEMORY[0x1E0CE2F40]);
  v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ConditionallyArchivableTimelineProgressView, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base, (uint64_t)&type metadata for ResolvedCircularPlaybackProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView);
    lazy protocol witness table accessor for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView();
    v2 = v0 != static ConditionallyArchivableView._viewListCount(inputs:)();
    if (((v3 | v2) & 1) != 0)
      return 0;
  }
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  BOOL v3;
  unsigned __int8 v4;

  v0 = MEMORY[0x1E0CE1D58];
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, MEMORY[0x1E0CE1D58]);
  lazy protocol witness table accessor for type LinearCapsuleGauge and conformance LinearCapsuleGauge();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, v0);
  v1 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v2 & 1) == 0)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>.ConditionallyArchivableTimelineProgressView, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView);
    lazy protocol witness table accessor for type TimelineProgressView<ArchivableLinearProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView();
    v3 = v1 != static ConditionallyArchivableView._viewListCount(inputs:)();
    if (((v4 | v3) & 1) != 0)
      return 0;
  }
  return v1;
}

{
  char v0;

  _ViewListCountInputs.base.getter();
  v0 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v0 & 1) == 0)
    return 0;
  type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  lazy protocol witness table accessor for type ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t ArchivableLinearProgressView.Base.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;

  KeyPath = swift_getKeyPath();
  v6 = swift_getKeyPath();
  v7 = swift_getKeyPath();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  v8 = swift_getKeyPath();
  if (a1)
  {
    swift_retain();
    result = AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    result = 0;
  }
  *(double *)a2 = a3;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v13;
  *(_BYTE *)(a2 + 32) = v14;
  *(_QWORD *)(a2 + 40) = v15;
  *(_BYTE *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = KeyPath;
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = v6;
  *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = v7;
  *(_BYTE *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = v8;
  *(_QWORD *)(a2 + 120) = result;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ArchivableLinearProgressView.Base()
{
  uint64_t v0;

  v0 = MEMORY[0x1E0CE1D58];
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, MEMORY[0x1E0CE1D58]);
  lazy protocol witness table accessor for type LinearCapsuleGauge and conformance LinearCapsuleGauge();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, v0);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance ArchivableLinearProgressView.Base@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return ArchivableLinearProgressView.Base.body.getter(*(_QWORD *)(v1 + 8), a1, *(double *)v1);
}

uint64_t ArchivableLinearProgressView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  char v23;
  uint64_t v24;
  double v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v28 - v7;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (double *)((char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v20, v21);
  outlined init with take of TableCellFormula((uint64_t)v20, (uint64_t)v16, type metadata accessor for ProgressViewValue);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    v23 = *((_BYTE *)v16 + *(int *)(v22 + 48));
    outlined init with take of TableCellFormula((uint64_t)v16, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v24 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for ArchivableLinearProgressView(0) + 20));
    v8[v5[9]] = 0;
    v8[v5[10]] = v23;
    *(_QWORD *)&v8[v5[11]] = v24;
    v8[v5[12]] = 0;
    outlined init with copy of TimelineProgressView<ArchivableLinearProgressView.Base>((uint64_t)v8, a1, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base);
    type metadata accessor for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>.Storage();
    swift_storeEnumTagMultiPayload();
    swift_retain();
    outlined destroy of TimelineProgressView<ArchivableLinearProgressView.Base>((uint64_t)v8, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    if (*((_BYTE *)v16 + 8))
      v26 = 0.0;
    else
      v26 = *v16;
    v27 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for ArchivableLinearProgressView(0) + 20));
    *(double *)a1 = v26;
    *(_QWORD *)(a1 + 8) = v27;
    type metadata accessor for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>.Storage();
    swift_storeEnumTagMultiPayload();
    return swift_retain();
  }
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ArchivableLinearProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static View._viewListCount(inputs:));
}

uint64_t associated type witness table accessor for View.Body : View in ArchivableCircularProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ArchivableCircularProgressView.gaugeRing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  double v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TimelineProgressView<CircularPercentageGaugeRing>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing, (uint64_t)&type metadata for CircularPercentageGaugeRing, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  v4 = v3;
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v31 - v6;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (double *)((char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ArchivableCircularProgressView(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1 + *(int *)(v20 + 24), (uint64_t)v19, type metadata accessor for ProgressViewStyleConfiguration);
  outlined init with take of TableCellFormula((uint64_t)v19, (uint64_t)v15, type metadata accessor for ProgressViewValue);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    v22 = *((_BYTE *)v15 + *(int *)(v21 + 48));
    outlined init with take of TableCellFormula((uint64_t)v15, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v23 = *(_QWORD *)(v1 + *(int *)(v20 + 28));
    v7[v4[9]] = 0;
    v7[v4[10]] = v22;
    *(_QWORD *)&v7[v4[11]] = v23;
    v7[v4[12]] = 1;
    outlined init with copy of TimelineProgressView<ArchivableLinearProgressView.Base>((uint64_t)v7, a1, &lazy cache variable for type metadata for TimelineProgressView<CircularPercentageGaugeRing>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing, (uint64_t)&type metadata for CircularPercentageGaugeRing);
    type metadata accessor for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(0, &lazy cache variable for type metadata for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>.Storage, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    outlined destroy of TimelineProgressView<ArchivableLinearProgressView.Base>((uint64_t)v7, &lazy cache variable for type metadata for TimelineProgressView<CircularPercentageGaugeRing>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing, (uint64_t)&type metadata for CircularPercentageGaugeRing);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    if (*((_BYTE *)v15 + 8))
      v25 = 0.0;
    else
      v25 = *v15;
    v26 = *(_QWORD *)(v1 + *(int *)(v20 + 28));
    KeyPath = swift_getKeyPath();
    v28 = swift_getKeyPath();
    if (v26)
      v29 = v26;
    else
      v29 = static Color.primary.getter();
    v31[1] = v29;
    swift_retain();
    v30 = AnyShapeStyle.init<A>(_:)();
    *(double *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v30;
    *(_QWORD *)(a1 + 16) = KeyPath;
    *(_QWORD *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v28;
    *(_BYTE *)(a1 + 48) = 0;
    type metadata accessor for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(0, &lazy cache variable for type metadata for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>.Storage, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))MEMORY[0x1E0CE4B90]);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t closure #1 in ArchivableCircularProgressView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9[3];
  int v10;

  v5 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v5;
  v9[2] = *(_OWORD *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 48);
  *a3 = static Alignment.center.getter();
  a3[1] = v6;
  type metadata accessor for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>();
  return closure #1 in closure #1 in ArchivableCircularProgressView.body.getter(a2, v9, (uint64_t)a3 + *(int *)(v7 + 44));
}

uint64_t closure #1 in closure #1 in ArchivableCircularProgressView.body.getter@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  _BYTE *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v41[4];
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t KeyPath;
  _BYTE *v54;
  _BYTE *v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  _QWORD v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;

  v51 = a3;
  type metadata accessor for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(0, &lazy cache variable for type metadata for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))MEMORY[0x1E0CE4BC0]);
  MEMORY[0x1E0C80A78](v5, v6);
  v54 = &v41[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8, v9);
  v55 = &v41[-v10];
  ArchivableCircularProgressView.gaugeRing.getter((uint64_t)&v41[-v10]);
  v52 = static HorizontalAlignment.center.getter();
  v11 = a1 + *(int *)(type metadata accessor for ArchivableCircularProgressView(0) + 24);
  v12 = type metadata accessor for ProgressViewStyleConfiguration(0);
  v13 = *(unsigned __int8 *)(v11 + *(int *)(v12 + 32));
  v50 = static VerticalAlignment.center.getter();
  v14 = 1;
  v47 = v13;
  if (v13 == 1)
  {
    if (*(_BYTE *)(v11 + *(int *)(v12 + 28)))
      v14 = 257;
    else
      v14 = 1;
  }
  v49 = v14;
  v15 = a2[1];
  v67 = *a2;
  v68 = v15;
  v69 = a2[2];
  LODWORD(v70) = *((_DWORD *)a2 + 12);
  GeometryProxy.size.getter();
  static Font.Weight.semibold.getter();
  LOBYTE(v67) = 2;
  v48 = static Font.system(size:weight:design:)();
  KeyPath = swift_getKeyPath();
  v16 = a2[1];
  v67 = *a2;
  v68 = v16;
  v69 = a2[2];
  LODWORD(v70) = *((_DWORD *)a2 + 12);
  GeometryProxy.size.getter();
  v17 = a2[1];
  v67 = *a2;
  v68 = v17;
  v69 = a2[2];
  LODWORD(v70) = *((_DWORD *)a2 + 12);
  GeometryProxy.size.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v18 = v80;
  v19 = v81;
  v20 = v82;
  v21 = v83;
  v45 = v85;
  v46 = v84;
  v22 = swift_getKeyPath();
  v59 = 1;
  v58 = v47;
  v57 = v19;
  v56 = v21;
  v23 = v54;
  outlined init with copy of _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>((uint64_t)v55, (uint64_t)v54);
  v24 = v59;
  v25 = v58;
  v42 = v58;
  v43 = v59;
  v26 = v57;
  v44 = v57;
  v27 = v56;
  v47 = v56;
  v28 = v51;
  outlined init with copy of _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>((uint64_t)v23, v51);
  type metadata accessor for (_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)();
  v30 = (_OWORD *)(v28 + *(int *)(v29 + 48));
  v31 = v52;
  v60[0] = v52;
  v60[1] = 0;
  LOBYTE(v61) = v24;
  v32 = v50;
  *((_QWORD *)&v61 + 1) = v50;
  *(_QWORD *)&v62 = 0;
  LOWORD(v23) = v49;
  WORD4(v62) = v49;
  BYTE10(v62) = v25;
  v33 = v48;
  *(_QWORD *)&v63 = KeyPath;
  *((_QWORD *)&v63 + 1) = v48;
  *(_QWORD *)&v64 = v18;
  BYTE8(v64) = v26;
  *(_QWORD *)&v65 = v20;
  BYTE8(v65) = v27;
  v35 = v45;
  v34 = v46;
  *(_QWORD *)&v66[0] = v46;
  *((_QWORD *)&v66[0] + 1) = v45;
  *(_QWORD *)&v66[1] = v22;
  BYTE8(v66[1]) = 1;
  v36 = v61;
  *v30 = (unint64_t)v52;
  v30[1] = v36;
  v37 = v63;
  v30[2] = v62;
  v30[3] = v37;
  *(_OWORD *)((char *)v30 + 105) = *(_OWORD *)((char *)v66 + 9);
  v38 = v66[0];
  v39 = v64;
  v30[5] = v65;
  v30[6] = v38;
  v30[4] = v39;
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>((uint64_t)v60);
  outlined destroy of _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>((uint64_t)v55);
  v67 = (unint64_t)v31;
  LOBYTE(v68) = v43;
  *((_QWORD *)&v68 + 1) = v32;
  *(_QWORD *)&v69 = 0;
  WORD4(v69) = (_WORD)v23;
  BYTE10(v69) = v42;
  v70 = KeyPath;
  v71 = v33;
  v72 = v18;
  v73 = v44;
  v74 = v20;
  v75 = v47;
  v76 = v34;
  v77 = v35;
  v78 = v22;
  v79 = 1;
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>((uint64_t)&v67);
  return outlined destroy of _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>((uint64_t)v54);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ArchivableCircularProgressView()
{
  uint64_t v0;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, (void (*)(uint64_t))type metadata accessor for GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>);
  v0 = MEMORY[0x1E0DEF040];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, v0);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance ArchivableCircularProgressView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ArchivableCircularProgressView);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for ArchivableCircularProgressView);
  result = swift_getKeyPath();
  *(_QWORD *)a3 = partial apply for closure #1 in ArchivableCircularProgressView.body.getter;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = 0x3FF0000000000000;
  *(_WORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = result;
  *(_QWORD *)(a3 + 40) = 0x3F847AE147AE147BLL;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ArchivableCircularPlaybackProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ArchivableCircularPlaybackProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, specialized static View._viewListCount(inputs:));
}

uint64_t protocol witness for View.body.getter in conformance ArchivableCircularPlaybackProgressView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, a2, type metadata accessor for ProgressViewStyleConfiguration);
  v5 = *(_QWORD *)(v2 + *(int *)(a1 + 20));
  *(_QWORD *)(a2 + *(int *)(type metadata accessor for ResolvedCircularPlaybackProgressView() + 20)) = v5;
  return swift_retain();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedCircularPlaybackProgressView.Base()
{
  type metadata accessor for StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView> and conformance StrokeShapeView<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, MEMORY[0x1E0CE2F40]);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

unint64_t lazy protocol witness table accessor for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView;
  if (!lazy protocol witness table cache variable for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ConditionallyArchivableTimelineProgressView, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base, (uint64_t)&type metadata for ResolvedCircularPlaybackProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView);
  }
  return result;
}

uint64_t sub_18790E280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v1 = type metadata accessor for ArchivableCircularProgressView(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2) + *(int *)(v1 + 24);
  type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for Date();
    v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v5(v3, v4);
    type metadata accessor for ClosedRange<Date>();
    v5(v3 + *(int *)(v6 + 36), v4);
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ArchivableCircularProgressView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArchivableCircularProgressView(0) - 8) + 80);
  return closure #1 in ArchivableCircularProgressView.body.getter(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t key path getter for EnvironmentValues.minimumScaleFactor : EnvironmentValues, serialized@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.minimumScaleFactor.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_18790E3CC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.minimumScaleFactor.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.minimumScaleFactor : EnvironmentValues, serialized()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_18790E418()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

void type metadata accessor for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>)
  {
    type metadata accessor for TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>(255);
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>);
  }
}

void type metadata accessor for TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>))
  {
    type metadata accessor for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(255, &lazy cache variable for type metadata for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))MEMORY[0x1E0CE4BC0]);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>);
  }
}

void type metadata accessor for ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<ProgressViewStyleConfiguration.Label?>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    lazy protocol witness table accessor for type _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>> and conformance <> _ConditionalContent<A, B>();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<ProgressViewStyleConfiguration.Label?>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3 = MEMORY[0x1E0CE73D0];
    v4[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<ProgressViewStyleConfiguration.CurrentValueLabel?> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, MEMORY[0x1E0CE73D0]);
    v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<ProgressViewStyleConfiguration.Label?> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<ProgressViewStyleConfiguration.Label?>, v3);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t outlined init with copy of _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(0, &lazy cache variable for type metadata for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))MEMORY[0x1E0CE4BC0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined destroy of _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(0, &lazy cache variable for type metadata for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))MEMORY[0x1E0CE4BC0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined init with copy of TimelineProgressView<ArchivableLinearProgressView.Base>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v7;

  type metadata accessor for VStack<TableHeaderViewCore>(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void type metadata accessor for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TimelineProgressView<CircularPercentageGaugeRing>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing, (uint64_t)&type metadata for CircularPercentageGaugeRing, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
    v7 = a3(a1, &type metadata for CircularPercentageGaugeRing, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t outlined destroy of TimelineProgressView<ArchivableLinearProgressView.Base>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for VStack<TableHeaderViewCore>(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>)
  {
    type metadata accessor for ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>> and conformance ZStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, MEMORY[0x1E0CE74D8]);
    v0 = type metadata accessor for GeometryReader();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>);
  }
}

void type metadata accessor for ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>)
  {
    type metadata accessor for TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>, MEMORY[0x1E0CE7EB8]);
    v0 = type metadata accessor for ZStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, (void (*)(uint64_t))type metadata accessor for GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>> and conformance GeometryReader<A>, (uint64_t (*)(uint64_t))type metadata accessor for GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, MEMORY[0x1E0CE2768]);
    v3[1] = MEMORY[0x1E0CE45E8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>.Storage()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>.Storage)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
    v0 = type metadata accessor for _ConditionalContent.Storage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>.Storage);
  }
}

unint64_t lazy protocol witness table accessor for type LinearCapsuleGauge and conformance LinearCapsuleGauge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinearCapsuleGauge and conformance LinearCapsuleGauge;
  if (!lazy protocol witness table cache variable for type LinearCapsuleGauge and conformance LinearCapsuleGauge)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LinearCapsuleGauge, &type metadata for LinearCapsuleGauge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearCapsuleGauge and conformance LinearCapsuleGauge);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TimelineProgressView<ArchivableLinearProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TimelineProgressView<ArchivableLinearProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView;
  if (!lazy protocol witness table cache variable for type TimelineProgressView<ArchivableLinearProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>.ConditionallyArchivableTimelineProgressView, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressView<ArchivableLinearProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>)
  {
    type metadata accessor for Button<Label<Text, Image>>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>);
  }
}

void type metadata accessor for Button<Label<Text, Image>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for Button<Label<Text, Image>>)
  {
    v2 = type metadata accessor for Label<Text, Image>();
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<Text, Image>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v5 = type metadata accessor for Button(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for Button<Label<Text, Image>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Button<Label<Text, Image>> and conformance Button<A>, (uint64_t (*)(uint64_t))type metadata accessor for Button<Label<Text, Image>>, (uint64_t)&protocol conformance descriptor for Button<A>);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivableLinearProgressView.Base()
{
  return &type metadata for ArchivableLinearProgressView.Base;
}

ValueMetadata *type metadata accessor for ArchivableCircularProgressView.Metrics()
{
  return &type metadata for ArchivableCircularProgressView.Metrics;
}

uint64_t sub_18790EED0()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView and conformance ResolvedCircularPlaybackProgressView, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedCircularPlaybackProgressView, (uint64_t)&protocol conformance descriptor for ResolvedCircularPlaybackProgressView);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, (void (*)(uint64_t))type metadata accessor for GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base();
    v3[1] = lazy protocol witness table accessor for type TimelineProgressView<ArchivableLinearProgressView.Base> and conformance TimelineProgressView<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>);
  }
}

unint64_t lazy protocol witness table accessor for type TimelineProgressView<ArchivableLinearProgressView.Base> and conformance TimelineProgressView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TimelineProgressView<ArchivableLinearProgressView.Base> and conformance TimelineProgressView<A>;
  if (!lazy protocol witness table cache variable for type TimelineProgressView<ArchivableLinearProgressView.Base> and conformance TimelineProgressView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressView<ArchivableLinearProgressView.Base> and conformance TimelineProgressView<A>);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ArchivableLinearProgressView.Base(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ArchivableLinearProgressView.Base()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>);
}

void type metadata accessor for SubviewsRoot<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for SubviewsRoot<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for SubviewsRoot(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for SubviewsRoot<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>);
  }
}

void type metadata accessor for SubviewsRoot<Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for SubviewsRoot<Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>> and conformance <A> Group<A>();
    v6 = type metadata accessor for SubviewsRoot(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for SubviewsRoot<Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>);
  }
}

unint64_t lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>> and conformance <A> Group<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>> and conformance <A> Group<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>> and conformance GroupElementsOfContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>, (uint64_t)&protocol conformance descriptor for GroupElementsOfContent<A, B>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>> and conformance <A> Group<A>);
  }
  return result;
}

uint64_t sub_18790F3AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18790F3D4()
{
  swift_retain();
  return EnvironmentValues.tint.setter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LinearCapsuleGauge, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LinearCapsuleGauge, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LinearCapsuleGauge, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LinearCapsuleGauge, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type LinearCapsuleGauge and conformance LinearCapsuleGauge();
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, MEMORY[0x1E0CE1D58]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LinearCapsuleGauge, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LinearCapsuleGauge, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LinearCapsuleGauge, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, MEMORY[0x1E0CE1D58]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LinearCapsuleGauge, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
  }
}

uint64_t View.toolbar<A>(content:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v9 = type metadata accessor for ToolbarModifier(0, MEMORY[0x1E0DEE9C0] + 8, a4, a6);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v14 = (uint64_t *)((char *)&v18 - v13);
  v16 = (uint64_t *)((char *)&v18 + *(int *)(v15 + 48) - v13);
  *v16 = 0;
  v16[1] = 0;
  v16[2] = 0;
  *v14 = 0;
  v14[1] = 0;
  a1(v12);
  MEMORY[0x18D75B4AC](v14, a3, v9, a5);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v14, v9);
}

uint64_t default argument 0 of ToolbarItemGroup.init(placement:content:)@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for automatic != -1)
    swift_once();
  return outlined init with copy of ToolbarItemPlacement((uint64_t)&static ToolbarItemPlacement.automatic, a1);
}

uint64_t View.toolbar<A>(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];

  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a6;
  v13[6] = a1;
  v13[7] = a2;
  v8 = type metadata accessor for ToolbarItemGroup(255, a4, a6, a4);
  v11 = type metadata accessor for TupleToolbarContent(0, v8, v9, v10);
  return View.toolbar<A>(content:)((void (*)(double))partial apply for closure #1 in View.toolbar<A>(content:), (uint64_t)v13, a3, v11, a5, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
}

uint64_t closure #1 in View.toolbar<A>(content:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v20[48];

  v9 = type metadata accessor for ToolbarItemGroup(0, a4, a6, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v20[-v16];
  default argument 0 of ToolbarItemGroup.init(placement:content:)((uint64_t)v20);
  ToolbarItemGroup.init(placement:content:)((uint64_t)v20, a1, a4, a6, (uint64_t)v13);
  static ViewBuilder.buildExpression<A>(_:)(v13, v9, &protocol witness table for ToolbarItemGroup<A>);
  v18 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
  v18(v13, v9);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v17, v9, &protocol witness table for ToolbarItemGroup<A>);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v17, v9);
}

uint64_t partial apply for closure #1 in View.toolbar<A>(content:)()
{
  uint64_t v0;

  return closure #1 in View.toolbar<A>(content:)(*(void (**)(void))(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t View.toolbar<A>(id:content:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;

  v13 = type metadata accessor for ToolbarModifier(0, MEMORY[0x1E0DEA968], a6, *(_QWORD *)(a8 + 8));
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (uint64_t *)((char *)&v22 - v16);
  v19 = (uint64_t *)((char *)&v22 + *(int *)(v18 + 48) - v16);
  *v19 = 0;
  v19[1] = 0;
  v19[2] = 0;
  *v17 = a1;
  v17[1] = a2;
  v20 = swift_bridgeObjectRetain();
  a3(v20);
  MEMORY[0x18D75B4AC](v17, a5, v13, a7);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t sub_18790F8EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v4 = a1[2];
  v5 = type metadata accessor for ToolbarItemGroup(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for TupleToolbarContent(255, v5, v6, v7);
  type metadata accessor for ToolbarModifier(255, MEMORY[0x1E0DEE9C0] + 8, v8, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
  v9 = type metadata accessor for ModifiedContent();
  v11[0] = v4;
  v11[1] = &protocol witness table for ToolbarModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v11);
}

uint64_t sub_18790F978(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = a1[2];
  type metadata accessor for ToolbarModifier(255, MEMORY[0x1E0DEE9C0] + 8, a1[1], a1[3]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ToolbarModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_18790F9E4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = a1[2];
  type metadata accessor for ToolbarModifier(255, MEMORY[0x1E0DEA968], a1[1], *(_QWORD *)(a1[3] + 8));
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ToolbarModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolbarModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  unint64_t v15;
  unint64_t v16;
  __int128 v17;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) != 0
    && ((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    v12 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
    v15 = (v7 + v12) & 0xFFFFFFFFFFFFFFF8;
    v16 = (v7 + v13) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v16 + 8) < 0xFFFFFFFFuLL)
    {
      v17 = *(_OWORD *)v16;
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
      *(_OWORD *)v15 = v17;
      return a1;
    }
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
    *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
    swift_retain();
  }
  swift_retain();
  return a1;
}

uint64_t destroy for ToolbarModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  result = (*(uint64_t (**)(unint64_t))(v4 + 8))(v5);
  if (*(_QWORD *)(((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

_QWORD *initializeWithCopy for ToolbarModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  v11 = *(_QWORD *)(v6 + 64) + 7;
  v12 = (v11 + v8) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v13 + 8) < 0xFFFFFFFFuLL)
  {
    v14 = *(_OWORD *)v13;
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
    *(_OWORD *)v12 = v14;
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
    swift_retain();
    swift_retain();
  }
  return a1;
}

_QWORD *assignWithCopy for ToolbarModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  __int128 v14;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12[1];
  if (v11[1] < 0xFFFFFFFFuLL)
  {
    if (v13 >= 0xFFFFFFFF)
    {
      *v11 = *v12;
      v11[1] = v12[1];
      v11[2] = v12[2];
      swift_retain();
      swift_retain();
      return a1;
    }
LABEL_7:
    v14 = *(_OWORD *)v12;
    v11[2] = v12[2];
    *(_OWORD *)v11 = v14;
    return a1;
  }
  if (v13 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  *v11 = *v12;
  swift_retain();
  swift_release();
  v11[1] = v12[1];
  swift_retain();
  swift_release();
  v11[2] = v12[2];
  return a1;
}

_OWORD *initializeWithTake for ToolbarModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_QWORD *)(v9 + 16) = v11;
  return a1;
}

_QWORD *assignWithTake for ToolbarModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64) + 7;
  v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v12 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)(v13 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
LABEL_5:
    v14 = *(_OWORD *)v13;
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
    *(_OWORD *)v12 = v14;
    return a1;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_release();
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  swift_release();
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if (v5 > 0x7FFFFFFE)
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 24) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18791001C + 4 * byte_187C6D510[v10]))();
  }
}

void storeEnumTagSinglePayload for ToolbarModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFE8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1879101B4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187910234);
}

void sub_1879101BC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1879101C4);
  JUMPOUT(0x187910234);
}

void sub_187910208()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187910234);
}

void sub_187910210()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187910234);
}

uint64_t sub_187910218@<X0>(unsigned int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    goto LABEL_6;
  if (a2 <= 0x7FFFFFFE)
  {
    if (a1 > 0x7FFFFFFE)
      JUMPOUT(0x187910224);
    *(_QWORD *)(v6 + 8) = a1;
LABEL_6:
    JUMPOUT(0x187910234);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))((v6 + v5 + 16) & a3);
}

_UNKNOWN **base witness table accessor for ViewModifier in ToolbarModifier<A, B>()
{
  return &protocol witness table for ToolbarModifier<A, B>;
}

uint64_t static ToolbarModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, _QWORD *, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t OffsetAttribute2;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  void (*v68)(uint64_t *, _QWORD);
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t *v78;
  _QWORD v80[4];
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  int v84;
  uint64_t v85;
  void (*v86)(uint64_t *__return_ptr, _QWORD *, uint64_t *);
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  unint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v105 = a6;
  v85 = a4;
  v86 = a3;
  v81 = a8;
  v150 = *MEMORY[0x1E0C80C00];
  v88 = *a1;
  v11 = *(_QWORD *)a2;
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_DWORD *)(a2 + 28);
  v99 = *(_DWORD *)(a2 + 24);
  v100 = v12;
  v15 = *(_DWORD *)(a2 + 36);
  v97 = *(_DWORD *)(a2 + 32);
  v98 = v14;
  v16 = *(_QWORD *)(a2 + 48);
  v102 = *(_QWORD *)(a2 + 40);
  v103 = v13;
  v106 = v16;
  LODWORD(v107) = *(_DWORD *)(a2 + 56);
  v95 = *(_DWORD *)(a2 + 60);
  v96 = v15;
  v94 = *(_DWORD *)(a2 + 64);
  v93 = *(_DWORD *)(a2 + 68);
  v92 = *(_DWORD *)(a2 + 72);
  v91 = *(_DWORD *)(a2 + 76);
  v90 = *(_DWORD *)(a2 + 80);
  v101 = v11;
  v144 = v11;
  v145 = v12;
  v146 = v13;
  v147 = __PAIR64__(v14, v99);
  v148 = __PAIR64__(v15, v97);
  v149 = v102;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphInputs.pushStyleContext<A>(_:)();
  PreferenceKeys.init()();
  v126 = v135;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<PreferenceKeys>, MEMORY[0x1E0CE2888], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  PreferencesInputs.init(hostKeys:)();
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ToolbarContentKey>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type _AnyPreferenceKey<ToolbarContentKey> and conformance _AnyPreferenceKey<A>, &lazy cache variable for type metadata for _AnyPreferenceKey<ToolbarContentKey>);
  PreferenceKeys.add(_:)();
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<SearchContentKey>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type _AnyPreferenceKey<SearchContentKey> and conformance _AnyPreferenceKey<A>, &lazy cache variable for type metadata for _AnyPreferenceKey<SearchContentKey>);
  PreferenceKeys.add(_:)();
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<NavigationPropertiesContentKey>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type _AnyPreferenceKey<NavigationPropertiesContentKey> and conformance _AnyPreferenceKey<A>, &lazy cache variable for type metadata for _AnyPreferenceKey<NavigationPropertiesContentKey>);
  PreferenceKeys.add(_:)();
  type metadata accessor for PreferenceBridge();
  v17 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278];
  v135 = PreferenceBridge.__allocating_init()();
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v124 = type metadata accessor for ToolbarModifier.InvalidateBridge(0, a5, v19, a7);
  v125 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarModifier<A, B>.InvalidateBridge, v124);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<PreferenceBridge>, v17, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  v22 = v21;
  v89 = v135;
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v135, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_28, (uint64_t)&v123, v124, MEMORY[0x1E0DEDCE8], v22, MEMORY[0x1E0DEDD18], v23);
  v87 = 0;
  swift_release();
  v24 = v126;
  static AGAttributeFlags.invalidatable.getter();
  AGGraphSetFlags();
  v25 = v144;
  LODWORD(v82) = v145;
  v26 = v146;
  v27 = v149;
  v28 = v118;
  v84 = v119;
  type metadata accessor for ToolbarModifier(255, v18, v105, v20);
  v29 = type metadata accessor for _GraphValue();
  v83 = v80;
  v30 = v147;
  v31 = v148;
  v104 = v18;
  v120 = v18;
  v121 = v105;
  v32 = v105;
  v122 = v20;
  LODWORD(v135) = v88;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v80[0] = v29;
  _GraphValue.subscript.getter();
  v80[2] = v27;
  v80[3] = v25;
  v135 = v25;
  v136 = v82;
  v82 = v26;
  v137 = v26;
  *(_QWORD *)&v138 = v30;
  *((_QWORD *)&v138 + 1) = v31;
  v139 = v27;
  v140 = v28;
  v80[1] = v28;
  v33 = v20;
  LODWORD(v141) = v84;
  *((_QWORD *)&v141 + 1) = 0;
  LODWORD(v142) = v24;
  v34 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t))(v20 + 32))(&v126, &v110, &v135, v32, v20);
  v35 = v126;
  v36 = v127;
  v135 = v101;
  v136 = v100;
  v137 = v103;
  *(_QWORD *)&v138 = __PAIR64__(v98, v99);
  *((_QWORD *)&v138 + 1) = __PAIR64__(v96, v97);
  v139 = v102;
  v140 = v106;
  *(_QWORD *)&v141 = __PAIR64__(v95, v107);
  *((_QWORD *)&v141 + 1) = __PAIR64__(v93, v94);
  v142 = __PAIR64__(v91, v92);
  v143 = v90;
  v86(&v115, v34, &v135);
  v135 = v35;
  v136 = v36;
  v37 = PreferencesOutputs.subscript.getter();
  if ((v37 & 0x100000000) == 0)
  {
    v38 = v37;
    v39 = v88;
    LODWORD(v135) = v88;
    _GraphValue.value.getter();
    v40 = v104;
    v41 = v105;
    closure #2 in static ToolbarModifier._makeView(modifier:inputs:body:)(1, v104, v105, v33);
    LODWORD(v86) = AGGraphCreateOffsetAttribute2();
    LODWORD(v135) = v39;
    _GraphValue.value.getter();
    closure #3 in static ToolbarModifier._makeView(modifier:inputs:body:)(1, v40, v41, v33);
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v135 = v106;
    v136 = v107;
    MEMORY[0x1E0C80A78](OffsetAttribute2, v43);
    v80[-6] = v40;
    v80[-5] = v41;
    v80[-4] = v33;
    LODWORD(v80[-3]) = (_DWORD)v86;
    HIDWORD(v80[-3]) = v44;
    LODWORD(v80[-2]) = v38;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  v135 = v35;
  v136 = v36;
  v45 = PreferencesOutputs.subscript.getter();
  v48 = v105;
  v47 = v106;
  if ((v45 & 0x100000000) == 0)
  {
    v135 = v106;
    v136 = v107;
    MEMORY[0x1E0C80A78](v45, v46);
    v80[-4] = v104;
    v80[-3] = v48;
    v80[-2] = v33;
    LODWORD(v80[-1]) = v49;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  v135 = v35;
  v136 = v36;
  v50 = PreferencesOutputs.subscript.getter();
  v51 = swift_bridgeObjectRelease();
  if ((v50 & 0x100000000) == 0)
  {
    v135 = v47;
    v136 = v107;
    MEMORY[0x1E0C80A78](v51, v52);
    v80[-4] = v104;
    v80[-3] = v48;
    v80[-2] = v33;
    LODWORD(v80[-1]) = v50;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  v135 = v101;
  v136 = v100;
  v137 = v103;
  *(_QWORD *)&v138 = __PAIR64__(v98, v99);
  *((_QWORD *)&v138 + 1) = __PAIR64__(v96, v97);
  v139 = v102;
  v140 = v47;
  v53 = v107;
  *(_QWORD *)&v141 = __PAIR64__(v95, v107);
  *((_QWORD *)&v141 + 1) = __PAIR64__(v93, v94);
  v142 = __PAIR64__(v91, v92);
  v143 = v90;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesOutputs.init()();
  PreferenceKeys.remove<A>(_:)();
  PreferenceKeys.remove<A>(_:)();
  PreferenceKeys.remove<A>(_:)();
  v126 = v47;
  v127 = v53;
  v54 = PreferencesInputs.hostKeys.getter();
  LODWORD(v126) = v54;
  MEMORY[0x1E0C80A78](v54, v55);
  v56 = type metadata accessor for ToolbarModifier.HostKeys(0, v104, v48, v33);
  v80[-2] = v56;
  v80[-1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarModifier<A, B>.HostKeys, v56);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<PreferenceKeys>, MEMORY[0x1E0CE2888], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v126, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v80[-4], v56, MEMORY[0x1E0DEDCE8], v57, MEMORY[0x1E0DEDD18], v58);
  PreferencesInputs.hostKeys.setter();
  v59 = v135;
  v60 = v137;
  v61 = v139;
  v62 = v140;
  v126 = v135;
  v127 = v136;
  v129 = v138;
  v128 = v137;
  v130 = v139;
  v131 = v140;
  v132 = v141;
  v133 = v142;
  v134 = v143;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceBridge.wrapOutputs(_:inputs:)();
  v103 = v62;
  swift_bridgeObjectRelease();
  v104 = v61;
  swift_bridgeObjectRelease();
  v105 = v60;
  swift_release();
  v107 = v59;
  swift_release();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PreferencesOutputs>, MEMORY[0x1E0CE43F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_187BF9820;
  v64 = v115;
  v65 = v116;
  *(_QWORD *)(v63 + 32) = v115;
  *(_DWORD *)(v63 + 40) = v65;
  v66 = v114;
  *(_QWORD *)(v63 + 48) = v113;
  *(_DWORD *)(v63 + 56) = v66;
  v102 = v64;
  swift_bridgeObjectRetain();
  PreferencesOutputs.init()();
  v110 = v63;
  v111 = v126;
  v112 = v127;
  v108 = v47;
  v109 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    v67 = MEMORY[0x1E0CE6548];
    do
    {
      v68 = (void (*)(uint64_t *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v70 = *v69;
      v71 = v69[1];
      v68(&v126, 0);
      v72 = v109;
      v126 = v108;
      swift_bridgeObjectRetain();
      v73 = PreferenceKeys.endIndex.getter();
      if (v72 < 0 || v72 >= v73)
        __break(1u);
      v74 = v72 + 1;
      v109 = v74;
      swift_bridgeObjectRelease();
      if (v70 != MEMORY[0x1E0CE1000])
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t, uint64_t))(v71 + 16))(&v110, MEMORY[0x1E0CE6550], v67, v70, v71);
    }
    while (v74 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  v75 = v111;
  v76 = v112;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v77 = v117;
  v78 = v81;
  *v81 = v75;
  *((_DWORD *)v78 + 2) = v76;
  *((_DWORD *)v78 + 3) = v77;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in static ToolbarModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = type metadata accessor for ToolbarModifier(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 44);
  v11[2] = v6;
  v11[3] = a3;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a3, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t closure #2 in static ToolbarModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = type metadata accessor for ToolbarModifier(0, a2, a3, a4);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, v6, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

uint64_t closure #3 in static ToolbarModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v5 = type metadata accessor for ToolbarModifier(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 48);
  v12[2] = v5;
  type metadata accessor for Binding<Int>?();
  v8 = v7;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_21, (uint64_t)v12, v8, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v12[5];
}

uint64_t implicit closure #1 in static ToolbarModifier._makeView(modifier:inputs:body:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v12 = type metadata accessor for ToolbarModifier.TransformToolbar(0, a3, a4, a5);
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarModifier<A, B>.TransformToolbar, v12);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v9, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_24, (uint64_t)v11, v12, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8;
}

uint64_t implicit closure #2 in static ToolbarModifier._makeView(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6, uint64_t (*a7)(_QWORD), uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  int v15;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v15 = a1;
  v17 = a5(0);
  v18 = MEMORY[0x18D75FFDC](a6, v17);
  v11 = a7(0);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v15, a8, (uint64_t)v16, v17, MEMORY[0x1E0DEDCE8], v11, MEMORY[0x1E0DEDD18], v12);
  return v14;
}

uint64_t static ToolbarModifier.InvalidateBridge.willInvalidate(attribute:)()
{
  AGGraphGetAttributeInfo();
  swift_retain();
  PreferenceBridge.invalidate()();
  return swift_release();
}

void ToolbarModifier.InvalidateBridge.destroy()()
{
  PreferenceBridge.invalidate()();
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarModifier<A, B>.InvalidateBridge@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*v1);
  return swift_retain();
}

uint64_t protocol witness for static InvalidatableAttribute.willInvalidate(attribute:) in conformance ToolbarModifier<A, B>.InvalidateBridge()
{
  return static ToolbarModifier.InvalidateBridge.willInvalidate(attribute:)();
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance ToolbarModifier<A, B>.InvalidateBridge()
{
  ToolbarModifier.InvalidateBridge.destroy()();
}

uint64_t ToolbarModifier.HostKeys.value.getter@<X0>(_QWORD *a1@<X8>)
{
  *a1 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  PreferenceKeys.remove<A>(_:)();
  PreferenceKeys.remove<A>(_:)();
  PreferenceKeys.remove<A>(_:)();
  PreferenceKeys.remove<A>(_:)();
  PreferenceKeys.remove<A>(_:)();
  return PreferenceKeys.remove<A>(_:)();
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarModifier<A, B>.HostKeys@<X0>(_QWORD *a1@<X8>)
{
  return ToolbarModifier.HostKeys.value.getter(a1);
}

uint64_t ToolbarModifier.TransformToolbar.updateValue()()
{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)(Value + 32);
  v2 = *(_QWORD *)(Value + 40);
  v3 = *(_BYTE *)(Value + 48);
  v4 = *(_QWORD *)(Value + 56);
  v5 = *(_OWORD *)(Value + 16);
  v13 = *(_OWORD *)Value;
  v14 = v5;
  *(_QWORD *)&v15 = v1;
  *((_QWORD *)&v15 + 1) = v2;
  LOBYTE(v16) = v3;
  *((_QWORD *)&v16 + 1) = v4;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = (uint64_t *)AGGraphGetValue();
  v8 = *v6;
  v7 = v6[1];
  type metadata accessor for Binding<Int>?();
  v9 = swift_allocObject();
  v10 = v14;
  *(_OWORD *)(v9 + 16) = v13;
  *(_OWORD *)(v9 + 32) = v10;
  v11 = v16;
  *(_OWORD *)(v9 + 48) = v15;
  *(_OWORD *)(v9 + 64) = v11;
  *(_QWORD *)(v9 + 80) = v8;
  *(_QWORD *)(v9 + 88) = v7;
  type metadata accessor for (_:)();
  outlined retain of ToolbarStorage((uint64_t)&v13);
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t closure #1 in ToolbarModifier.TransformToolbar.updateValue()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = static SemanticFeature.isEnabled.getter();
  v9 = 12;
  if ((v8 & 1) != 0)
    v9 = 8;
  v10 = 14;
  if ((v8 & 1) != 0)
    v10 = 10;
  if (*(_BYTE *)(a1 + 48))
    v11 = v9;
  else
    v11 = v10;
  result = ToolbarStorage.merge(_:options:)(a2, v11);
  if (a4)
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = a3;
    *(_QWORD *)(a1 + 8) = a4;
  }
  return result;
}

uint64_t (*ToolbarModifier.TransformSearch.value.getter())(uint64_t a1)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Value;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  type metadata accessor for ToolbarStorage.SearchItem?(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 64);
  MEMORY[0x1E0C80A78](v0, v3);
  v4 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v13 - v7;
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  v10 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v11 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v4, v11 + v10, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  return partial apply for closure #1 in ToolbarModifier.TransformSearch.value.getter;
}

uint64_t closure #1 in ToolbarModifier.TransformSearch.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;

  type metadata accessor for ToolbarStorage.SearchItem?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  v8 = type metadata accessor for ToolbarStorage.SearchItem(0);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  if (v9 == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
    return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, a1, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarModifier<A, B>.TransformSearch@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Rule.value.getter in conformance ToolbarModifier<A, B>.TransformSearch(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))ToolbarModifier.TransformSearch.value.getter, (uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> (), a2);
}

uint64_t (*ToolbarModifier.TransformProperties.value.getter())(uint64_t a1)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Value;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 64);
  MEMORY[0x1E0C80A78](v0, v3);
  v4 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v13 - v7;
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.NavigationProperties?);
  outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.NavigationProperties?);
  v10 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v11 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v4, v11 + v10, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.NavigationProperties?);
  return partial apply for closure #1 in ToolbarModifier.TransformProperties.value.getter;
}

uint64_t closure #1 in ToolbarModifier.TransformProperties.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  _BYTE v11[16];

  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.NavigationProperties?);
  v8 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  v9 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.NavigationProperties?);
  if (v9 != 1)
    return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI14ToolbarStorageV20NavigationPropertiesV_s5NeverOytTg503_s7c4UI23gh32KeyV6reduce5value9nextValueyAA14eF26V0cD0VSgz_AKyXEtFZyAJXEfU_AHSgTf1cn_n(a2, a1);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.NavigationProperties?);
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, a1, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.NavigationProperties?);
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarModifier<A, B>.TransformProperties@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Rule.value.getter in conformance ToolbarModifier<A, B>.TransformSearch(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))ToolbarModifier.TransformProperties.value.getter, (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()partial apply, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarModifier<A, B>.TransformSearch@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X2>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  unsigned int *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v7 = a2(*v4, a1[2], a1[3], a1[4]);
  v9 = v8;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 24) = v9;
  *a4 = a3;
  a4[1] = result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ToolbarModifier<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, _QWORD *, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  return static ToolbarModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ToolbarModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarModifier<A, B>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for External<PreferenceKeys>, MEMORY[0x1E0CE2888], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>);
  }
  return result;
}

uint64_t type metadata accessor for ToolbarModifier.InvalidateBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarModifier.InvalidateBridge);
}

uint64_t partial apply for closure #1 in static ToolbarModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static ToolbarModifier._makeView(modifier:inputs:body:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for ToolbarModifier.HostKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarModifier.HostKeys);
}

uint64_t partial apply for implicit closure #3 in static ToolbarModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #2 in static ToolbarModifier._makeView(modifier:inputs:body:)(*(_DWORD *)(v0 + 40), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (uint64_t (*)(_QWORD))type metadata accessor for ToolbarModifier.TransformProperties, (uint64_t)&protocol conformance descriptor for ToolbarModifier<A, B>.TransformProperties, (uint64_t (*)(_QWORD))type metadata accessor for Attribute<(_:)>, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t partial apply for implicit closure #2 in static ToolbarModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #2 in static ToolbarModifier._makeView(modifier:inputs:body:)(*(_DWORD *)(v0 + 40), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (uint64_t (*)(_QWORD))type metadata accessor for ToolbarModifier.TransformSearch, (uint64_t)&protocol conformance descriptor for ToolbarModifier<A, B>.TransformSearch, (uint64_t (*)(_QWORD))type metadata accessor for Attribute<(_:)>, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t partial apply for implicit closure #1 in static ToolbarModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static ToolbarModifier._makeView(modifier:inputs:body:)(*(_QWORD *)(v0 + 40), *(_DWORD *)(v0 + 48), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t type metadata accessor for ToolbarModifier.TransformToolbar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarModifier.TransformToolbar);
}

uint64_t type metadata accessor for ToolbarModifier.TransformSearch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarModifier.TransformSearch);
}

uint64_t closure #1 in Attribute.init<A>(_:)partial apply@<X0>(unint64_t *a1@<X2>, void (*a2)(uint64_t)@<X3>, _DWORD *a3@<X8>)
{
  type metadata accessor for (_:)(0, a1, a2);
  return closure #1 in Attribute.init<A>(_:)(a3);
}

void type metadata accessor for Attribute<(_:)>(uint64_t a1)
{
  type metadata accessor for Attribute<(_:)>(a1, &lazy cache variable for type metadata for Attribute<(_:)>, (unint64_t *)&lazy cache variable for type metadata for (_:), type metadata accessor for ToolbarStorage.SearchItem?);
}

{
  type metadata accessor for Attribute<(_:)>(a1, &lazy cache variable for type metadata for Attribute<(_:)>, (unint64_t *)&lazy cache variable for type metadata for (_:), type metadata accessor for ToolbarStorage.NavigationProperties?);
}

void type metadata accessor for Attribute<(_:)>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for (_:)(255, a3, a4);
    v5 = type metadata accessor for Attribute();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t type metadata accessor for ToolbarModifier.TransformProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarModifier.TransformProperties);
}

void base witness table accessor for _AttributeBody in ToolbarModifier<A, B>.InvalidateBridge()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ToolbarModifier<A, B>.TransformProperties()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ToolbarModifier<A, B>.TransformSearch()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ToolbarModifier<A, B>.TransformToolbar()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ToolbarModifier<A, B>.HostKeys()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187911D1C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 40))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ToolbarModifier.TransformToolbar.updateValue()(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ToolbarModifier.TransformToolbar.updateValue()(a1, v1 + 2, v1[10], v1[11]);
}

uint64_t sub_187911D7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187911DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for ToolbarStorage.SearchItem?(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v4 - 1) + 48))(v3, 1, v4))
  {
    swift_release();
    swift_release();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v6 = *(int *)(v5 + 32);
    v7 = v3 + v6 + *(int *)(type metadata accessor for SearchFieldState() + 36);
    v8 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease();
    v9 = v3 + v4[6];
    v10 = *(unsigned __int8 *)(v9 + 8);
    if (v10 != 255)
      outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v9, v10 & 1);
    v11 = v3 + v4[7];
    v12 = *(unsigned __int8 *)(v11 + 8);
    if (v12 != 255)
      outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v11, v12 & 1);
    outlined consume of Text.Storage(*(_QWORD *)(v3 + v4[8]), *(_QWORD *)(v3 + v4[8] + 8), *(_BYTE *)(v3 + v4[8] + 16));
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v13 = v3 + v4[10];
    if (*(_QWORD *)v13)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v14 = v3 + v4[11];
    if (*(_QWORD *)v14)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v15 = v3 + v4[13];
    if (*(_QWORD *)v15)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ToolbarModifier.TransformSearch.value.getter(uint64_t a1)
{
  return partial apply for closure #1 in ToolbarModifier.TransformSearch.value.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?, closure #1 in ToolbarModifier.TransformSearch.value.getter);
}

uint64_t sub_187911FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4))
  {
    swift_release();
    v5 = *(unsigned __int8 *)(v3 + 16);
    if (v5 <= 0xFD)
      outlined consume of PlatformItemCollection.Storage(*(_QWORD *)(v3 + 8), v5 & 1);
    v6 = v3 + *(int *)(v4 + 24);
    v7 = type metadata accessor for PlatformItemList.Item();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    {

      swift_bridgeObjectRelease();
      swift_release();
      v8 = *(_QWORD *)(v6 + 184);
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((v8 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
      {
        v10 = *(unsigned __int8 *)(v6 + 72);
        if (v10 != 255)
        {
          outlined consume of GraphicsImage.Contents(*(void **)(v6 + 64), v10);
          v8 = *(_QWORD *)(v6 + 184);
          v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        }
        if (v9 != 0x1FFFFFFFELL)
          outlined consume of AccessibilityImageLabel(*(_QWORD *)(v6 + 168), *(_QWORD *)(v6 + 176), v8);
        swift_unknownObjectRelease();
        swift_release();

      }
      if (*(_QWORD *)(v6 + 256))
      {
        swift_bridgeObjectRelease();
        v11 = *(void **)(v6 + 264);
        if ((unint64_t)v11 >= 2)

        swift_release();
        swift_release();
      }
      v12 = *(_QWORD *)(v6 + 328);
      if (v12 >> 2 != 0xFFFFFFFF)
        outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v6 + 296), *(_QWORD *)(v6 + 304), *(_QWORD *)(v6 + 312), *(_QWORD *)(v6 + 320), v12, *(_QWORD *)(v6 + 336), *(_QWORD *)(v6 + 344), *(_QWORD *)(v6 + 352), *(_QWORD *)(v6 + 360), *(_QWORD *)(v6 + 368), *(_QWORD *)(v6 + 376), *(_QWORD *)(v6 + 384), *(_QWORD *)(v6 + 392));
      v13 = *(_QWORD *)(v6 + 408);
      if (v13)
      {
        if (v13 == 1)
        {
LABEL_24:
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v6 + 504))
            swift_release();
          if (*(_QWORD *)(v6 + 528))
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
          }
          if (*(_QWORD *)(v6 + 552) != 1)
          {
            swift_release();
            if (*(_QWORD *)(v6 + 560))
              swift_release();
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v14 = v6 + *(int *)(v7 + 112);
          v15 = type metadata accessor for CommandOperation();
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
          {
            v16 = v14 + *(int *)(v15 + 20);
            outlined consume of Text.Storage(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
            swift_bridgeObjectRelease();
            v17 = v16 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v18 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
            if (*(_QWORD *)(v14 + *(int *)(v15 + 24)))
              swift_release();
          }
          swift_release();
          return swift_deallocObject();
        }
        swift_release();
      }
      if (*(_QWORD *)(v6 + 424))
        swift_release();
      if (*(_QWORD *)(v6 + 440))
        swift_release();
      goto LABEL_24;
    }
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ToolbarModifier.TransformProperties.value.getter(uint64_t a1)
{
  return partial apply for closure #1 in ToolbarModifier.TransformSearch.value.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.NavigationProperties?, closure #1 in ToolbarModifier.TransformProperties.value.getter);
}

uint64_t partial apply for closure #1 in ToolbarModifier.TransformSearch.value.getter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

uint64_t ShareLink.namespace.getter()
{
  return Namespace.wrappedValue.getter();
}

void ShareLink.init(items:subject:message:preview:label:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
  type metadata accessor for ShareLink();
}

void sub_1879123CC(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t KeyPath)
{
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;

  v36 = v32 + a1[24];
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)(v36 + 16) = 0u;
  v37 = v32 + a1[25];
  *(_OWORD *)v37 = 0u;
  *(_OWORD *)(v37 + 16) = 0u;
  v56 = (uint64_t *)(v32 + a1[26]);
  *v56 = 0;
  v56[1] = 0;
  v38 = (_QWORD *)(v32 + a1[28]);
  *v38 = 0;
  v38[1] = 0;
  v39 = v32 + a1[29];
  KeyPath = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)&KeyPath);
  outlined init with take of TableCellFormula((uint64_t)&KeyPath, v34 - 240, (uint64_t (*)(_QWORD))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  v40 = v28[5];
  *(_OWORD *)(v39 + 64) = v28[4];
  *(_OWORD *)(v39 + 80) = v40;
  v41 = v28[3];
  *(_OWORD *)(v39 + 32) = v28[2];
  *(_OWORD *)(v39 + 48) = v41;
  *(_BYTE *)(v39 + 144) = *(_BYTE *)(v34 - 96);
  v42 = v28[8];
  v43 = v28[6];
  *(_OWORD *)(v39 + 112) = v28[7];
  *(_OWORD *)(v39 + 128) = v42;
  *(_OWORD *)(v39 + 96) = v43;
  v44 = v28[1];
  *(_OWORD *)v39 = *v28;
  *(_OWORD *)(v39 + 16) = v44;
  v45 = v32 + a1[30];
  *(_BYTE *)v45 = 0;
  *(_QWORD *)(v45 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v32 + a1[23], v31, v33);
  v46 = *(_QWORD *)v36;
  v47 = *(_QWORD *)(v36 + 8);
  v48 = *(_QWORD *)(v36 + 24);
  v55 = *(_QWORD *)(v36 + 16);
  outlined copy of Text?(v29, v30, a25, a26);
  outlined consume of Text?(v46, v47, v55, v48);
  *(_QWORD *)v36 = v29;
  *(_QWORD *)(v36 + 8) = v30;
  *(_QWORD *)(v36 + 16) = a25;
  *(_QWORD *)(v36 + 24) = a26;
  v49 = *(_QWORD *)v37;
  v50 = *(_QWORD *)(v37 + 8);
  v51 = *(_QWORD *)(v37 + 16);
  v52 = *(_QWORD *)(v37 + 24);
  outlined copy of Text?(a19, a20, a27, a18);
  outlined consume of Text?(v49, v50, v51, v52);
  *(_QWORD *)v37 = a19;
  *(_QWORD *)(v37 + 8) = a20;
  *(_QWORD *)(v37 + 16) = a27;
  *(_QWORD *)(v37 + 24) = a18;
  v53 = *v56;
  v54 = v56[1];
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a22, a23);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v53, v54);
  *v56 = a22;
  v56[1] = a23;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a21 - 8) + 16))(v32 + a1[27], a24, a21);
  ShareLink.assertUnstyled()();
}

uint64_t sub_187912598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v3, v7);
  outlined consume of Text?(v5, v4, v14, v6);
  outlined consume of Text?(v9, v10, v12, v13);
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
  return (*(uint64_t (**)())(v11 + 8))();
}

Swift::Void __swiftcall ShareLink.assertUnstyled()()
{
  type metadata accessor for SharePreview();
}

void ShareLink.init(items:subject:message:preview:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, __int128 a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v35 = a8;
  v36 = a3;
  v32 = a6;
  v33 = a7;
  v37 = a4;
  v38 = a5;
  v34 = a2;
  v30 = a9;
  v31 = a10;
  v28 = a1;
  v29 = a11;
  v27 = a16;
  v26[0] = a20;
  v26[1] = a19;
  MEMORY[0x1E0C80A78](a1, a1);
  v20 = *(_QWORD *)(a15 - 8);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  (*(void (**)(char *, double))(v20 + 16))((char *)v26 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v23);
  v25 = swift_retain();
  a13(v25);
  ShareLink.init(items:subject:message:preview:label:)(v30);
}

uint64_t sub_187912AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  outlined consume of Text?(*(_QWORD *)(v2 - 144), *(_QWORD *)(v2 - 136), *(_QWORD *)(v2 - 120), *(_QWORD *)(v2 - 152));
  outlined consume of Text?(*(_QWORD *)(v2 - 128), *(_QWORD *)(v2 - 112), *(_QWORD *)(v2 - 104), *(_QWORD *)(v2 - 96));
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 176), v1);
}

uint64_t ShareLink.presentSharingPicker.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v10[144];
  _OWORD v11[9];
  char v12;
  _BYTE v13[144];

  v4 = v2 + *(int *)(a1 + 116);
  v5 = *(_OWORD *)(v4 + 112);
  v11[6] = *(_OWORD *)(v4 + 96);
  v11[7] = v5;
  v11[8] = *(_OWORD *)(v4 + 128);
  v12 = *(_BYTE *)(v4 + 144);
  v6 = *(_OWORD *)(v4 + 48);
  v11[2] = *(_OWORD *)(v4 + 32);
  v11[3] = v6;
  v7 = *(_OWORD *)(v4 + 80);
  v11[4] = *(_OWORD *)(v4 + 64);
  v11[5] = v7;
  v8 = *(_OWORD *)(v4 + 16);
  v11[0] = *(_OWORD *)v4;
  v11[1] = v8;
  outlined retain of Environment<PresentSharingPickerAction?>((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<PresentSharingPickerAction?>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v10);
  outlined retain of Environment<PresentSharingPickerAction?>((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<PresentSharingPickerAction?>.Content);
  outlined init with take of Image.Resolved?((uint64_t)v10, (uint64_t)v13, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
  return outlined init with take of Image.Resolved?((uint64_t)v13, a2, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
}

uint64_t ShareLink.isPresented.getter()
{
  unsigned __int8 v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  return v1;
}

uint64_t ShareLink.isPresented.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (*(_QWORD *)(v2 + *(int *)(a2 + 120) + 8))
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t ShareLink.$isPresented.getter()
{
  uint64_t v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  return v1;
}

void ShareLink.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for Button(255, v2, *(_QWORD *)(a1 + 72), v3);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ValueActionModifier2<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<AnyShareConfiguration.Key>, (uint64_t)&type metadata for AnyShareConfiguration.Key, (uint64_t)&protocol witness table for AnyShareConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type RequiresPlatformItemListRepresentation and conformance RequiresPlatformItemListRepresentation();
  type metadata accessor for StaticIf();
}

void sub_187912E80(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v2[6] = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v13 = v5[2];
  v14 = v5[3];
  v2[22] = v13;
  v2[23] = v14;
  v15 = v5[4];
  v2[24] = v15;
  v2[25] = v8;
  v16 = v5[6];
  v17 = v5[7];
  v2[26] = v16;
  v2[27] = v17;
  v18 = v5[8];
  v2[28] = v18;
  v2[29] = v7;
  v19 = v5[10];
  v20 = v2[5];
  v2[30] = v19;
  v2[31] = v20;
  v2[10] = v13;
  v2[11] = v14;
  v2[12] = v15;
  v2[13] = v8;
  v2[14] = v16;
  v2[15] = v17;
  v2[16] = v18;
  v2[17] = v7;
  v2[18] = v19;
  v2[19] = v20;
  *(_QWORD *)(v9 - 136) = v7;
  *(_QWORD *)(v9 - 128) = &protocol witness table for PlatformItemListTransformModifier<A>;
  v21 = MEMORY[0x1E0CE2E70];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v9 - 136, v12);
  *(_QWORD *)(v9 - 152) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v2[4]);
  *(_QWORD *)(v9 - 144) = &protocol witness table for SharingActivityPickerModifier;
  v22 = MEMORY[0x18D75FFDC](v21, v2[2], v9 - 152);
  v23 = lazy protocol witness table accessor for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>();
  *(_QWORD *)(v9 - 168) = v22;
  *(_QWORD *)(v9 - 160) = v23;
  v24 = MEMORY[0x18D75FFDC](v21, v4, v9 - 168);
  v25 = MEMORY[0x1E0CE5EF8];
  *(_QWORD *)(v9 - 184) = v24;
  *(_QWORD *)(v9 - 176) = v25;
  v26 = MEMORY[0x18D75FFDC](v21, v2[1], v9 - 184);
  v27 = lazy protocol witness table accessor for type _PreferenceWritingModifier<AnyShareConfiguration.Key> and conformance _PreferenceWritingModifier<A>();
  *(_QWORD *)(v9 - 200) = v26;
  *(_QWORD *)(v9 - 192) = v27;
  MEMORY[0x18D75FFDC](v21, v6, v9 - 200);
  StaticIf<>.init(_:then:else:)((uint64_t)&unk_1E1B08478, (void (*)(void))partial apply for closure #1 in ShareLink.body.getter);
}

uint64_t sub_187913000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v6 - 216) = v3;
  *(_QWORD *)(v6 - 208) = v1;
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v2, v6 - 216);
  static ViewBuilder.buildExpression<A>(_:)(v5, v2, v7);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 48) + 8);
  v8(v5, v2);
  static ViewBuilder.buildBlock<A>(_:)(v4, v2, *(_QWORD *)(v0 + 56));
  return v8(v4, v2);
}

unint64_t lazy protocol witness table accessor for type RequiresPlatformItemListRepresentation and conformance RequiresPlatformItemListRepresentation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequiresPlatformItemListRepresentation and conformance RequiresPlatformItemListRepresentation;
  if (!lazy protocol witness table cache variable for type RequiresPlatformItemListRepresentation and conformance RequiresPlatformItemListRepresentation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RequiresPlatformItemListRepresentation, &unk_1E1B08478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequiresPlatformItemListRepresentation and conformance RequiresPlatformItemListRepresentation);
  }
  return result;
}

void closure #1 in ShareLink.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  v0 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v0, v1);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for ShareLink();
}

void sub_187913208(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(int *)(a1 + 108);
  v3 = *(_QWORD *)(v1 - 360);
  *(_QWORD *)(v1 - 392) = v3 + v2;
  specialized AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)(v3, 1);
}

uint64_t sub_187913258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(unsigned __int8 *)(v5 - 176) | 0x8000000000000000;
  v7 = *(_OWORD *)(v5 - 192);
  *(_OWORD *)(v5 - 320) = *(_OWORD *)(v5 - 208);
  *(_OWORD *)(v5 - 304) = v7;
  *(_QWORD *)(v5 - 288) = v6;
  *(_OWORD *)(v5 - 280) = *(_OWORD *)(v5 - 168);
  *(_OWORD *)(v5 - 264) = *(_OWORD *)(v5 - 152);
  *(_OWORD *)(v5 - 248) = *(_OWORD *)(v5 - 136);
  *(_OWORD *)(v5 - 232) = *(_OWORD *)(v5 - 120);
  View.platformItemSystemType(_:)(v5 - 320, v2, v0);
  outlined release of AnyShareConfiguration(v5 - 208);
  *(_QWORD *)(v5 - 336) = v0;
  *(_QWORD *)(v5 - 328) = &protocol witness table for PlatformItemListTransformModifier<A>;
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v5 - 336);
  static ViewBuilder.buildExpression<A>(_:)(v4, v1, v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 352) + 8);
  v9(v4, v1);
  static ViewBuilder.buildBlock<A>(_:)(v3, v1, *(_QWORD *)(v5 - 344));
  return v9(v3, v1);
}

void partial apply for closure #1 in ShareLink.body.getter()
{
  partial apply for closure #1 in ShareLink.body.getter((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in ShareLink.body.getter);
}

void closure #2 in ShareLink.body.getter()
{
  type metadata accessor for ShareLink();
}

void sub_1879133F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)(v15 - 352) = a1;
  v16 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v15 - 456) = v16;
  *(_QWORD *)(v15 - 448) = *(_QWORD *)(v16 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v15 - 472) = (char *)&a9 - v17;
  v19 = type metadata accessor for Button(0, v11, v9, v18);
  v20 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v15 - 512) = v19;
  *(_QWORD *)(v15 - 504) = v20;
  MEMORY[0x1E0C80A78](v19, v19);
  *(_QWORD *)(v15 - 520) = (char *)&a9 - v21;
  v22 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v15 - 416) = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v15 - 488) = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  *(_QWORD *)(v15 - 344) = (char *)&a9 - v24;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ValueActionModifier2<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52E8]);
  *(_QWORD *)(v15 - 440) = type metadata accessor for ModifiedContent();
  v25 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v15 - 400) = *(_QWORD *)(v25 - 8);
  *(_QWORD *)(v15 - 464) = v25;
  MEMORY[0x1E0C80A78](v25, v26);
  *(_QWORD *)(v15 - 496) = (char *)&a9 - v27;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<AnyShareConfiguration.Key>, (uint64_t)&type metadata for AnyShareConfiguration.Key, (uint64_t)&protocol witness table for AnyShareConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  v28 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v15 - 424) = v28;
  *(_QWORD *)(v15 - 408) = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  *(_QWORD *)(v15 - 480) = (char *)&a9 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  *(_QWORD *)(v15 - 432) = (char *)&a9 - v33;
  *(_QWORD *)(v15 - 384) = v14;
  *(_QWORD *)(v15 - 376) = v13;
  *(_QWORD *)(v15 - 336) = v10;
  *(_QWORD *)(v15 - 368) = v12;
  implicit closure #1 in closure #2 in ShareLink.body.getter();
}

void sub_18791366C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;

  *(_QWORD *)(v12 - 304) = v4;
  *(_QWORD *)(v12 - 296) = v11;
  *(_QWORD *)(v12 - 288) = v8;
  *(_QWORD *)(v12 - 280) = v5;
  *(_QWORD *)(v12 - 272) = v3;
  *(_QWORD *)(v12 - 264) = v6;
  *(_QWORD *)(v12 - 560) = v6;
  *(_QWORD *)(v12 - 256) = v7;
  *(_QWORD *)(v12 - 248) = v2;
  *(_QWORD *)(v12 - 536) = v9;
  *(_QWORD *)(v12 - 240) = v9;
  *(_QWORD *)(v12 - 232) = v10;
  v13 = *(_WORD **)(v12 - 520);
  *(_QWORD *)(v12 - 360) = v5;
  *(_QWORD *)(v12 - 552) = v2;
  Button.init(action:label:)(a1, a2, (void (*)(uint64_t))partial apply for closure #1 in closure #2 in ShareLink.body.getter, v12 - 320, v5, v2, v13);
  ShareLink.$isPresented.getter();
  *(_QWORD *)(v12 - 544) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, *(_QWORD *)(v12 - 512));
  View.sharingPicker<A, B, C, D>(isPresented:link:)();
}

void sub_1879137A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 504) + 8))(v5, v3);
  v7 = *(_QWORD *)(v6 - 352);
  v8 = v4;
  *(_QWORD *)(v6 - 528) = v4;
  *(_BYTE *)(v6 - 160) = ShareLink.isPresented.getter() & 1;
  v9 = *(_QWORD *)(v6 - 456);
  v10 = *(_QWORD *)(v6 - 472);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v8, v7);
  v11 = v9;
  v12 = (*(unsigned __int8 *)(v9 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = v1;
  *((_QWORD *)v13 + 3) = v2;
  v14 = *(_QWORD *)(v6 - 360);
  *((_QWORD *)v13 + 4) = v0;
  *((_QWORD *)v13 + 5) = v14;
  v15 = *(_QWORD *)(v6 - 560);
  *((_QWORD *)v13 + 6) = *(_QWORD *)(v6 - 336);
  *((_QWORD *)v13 + 7) = v15;
  v16 = *(_QWORD *)(v6 - 552);
  *((_QWORD *)v13 + 8) = *(_QWORD *)(v6 - 368);
  *((_QWORD *)v13 + 9) = v16;
  *((_QWORD *)v13 + 10) = *(_QWORD *)(v6 - 536);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(&v13[v12], v10, v7);
  *(_QWORD *)(v6 - 176) = *(_QWORD *)(v6 - 544);
  *(_QWORD *)(v6 - 168) = &protocol witness table for SharingActivityPickerModifier;
  v17 = MEMORY[0x1E0CE2E70];
  v18 = *(_QWORD *)(v6 - 488);
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v18, v6 - 176);
  v20 = *(_QWORD *)(v6 - 344);
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 416) + 8))(v20, v18);
  v21 = lazy protocol witness table accessor for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>();
  *(_QWORD *)(v6 - 192) = v19;
  *(_QWORD *)(v6 - 184) = v21;
  v22 = MEMORY[0x18D75FFDC](v17, *(_QWORD *)(v6 - 440), v6 - 192);
  v23 = MEMORY[0x1E0CE5EF8];
  *(_QWORD *)(v6 - 208) = v22;
  *(_QWORD *)(v6 - 200) = v23;
  MEMORY[0x18D75FFDC](v17, *(_QWORD *)(v6 - 464), v6 - 208);
  View.shareConfiguration<A, B, C, D>(_:)(*(_QWORD *)(v6 - 528));
}

uint64_t sub_1879139E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 400) + 8))(v4, v0);
  v6 = lazy protocol witness table accessor for type _PreferenceWritingModifier<AnyShareConfiguration.Key> and conformance _PreferenceWritingModifier<A>();
  *(_QWORD *)(v5 - 224) = v1;
  *(_QWORD *)(v5 - 216) = v6;
  v7 = *(_QWORD *)(v5 - 424);
  v8 = MEMORY[0x18D75FFDC](v3, v7, v5 - 224);
  v9 = *(_QWORD *)(v5 - 432);
  static ViewBuilder.buildExpression<A>(_:)(v2, v7, v8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 408) + 8);
  v10(v2, v7);
  static ViewBuilder.buildBlock<A>(_:)(v9, v7, *(_QWORD *)(v5 - 392));
  return v10(v9, v7);
}

void partial apply for closure #2 in ShareLink.body.getter()
{
  partial apply for closure #1 in ShareLink.body.getter((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in ShareLink.body.getter);
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<AnyShareConfiguration.Key> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<AnyShareConfiguration.Key> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<AnyShareConfiguration.Key> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<AnyShareConfiguration.Key>, (uint64_t)&type metadata for AnyShareConfiguration.Key, (uint64_t)&protocol witness table for AnyShareConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE60F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<AnyShareConfiguration.Key> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

void implicit closure #1 in closure #2 in ShareLink.body.getter()
{
  type metadata accessor for ShareLink();
}

void (*sub_187913B6C(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[96];

  v9 = *(_QWORD *)(a1 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = &v18[-v11];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v9 + 16))(&v18[-v11], v6, a1, v10);
  v13 = (*(unsigned __int8 *)(v9 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v14 = (char *)swift_allocObject();
  *((_QWORD *)v14 + 2) = v5;
  *((_QWORD *)v14 + 3) = v4;
  v15 = *(_QWORD *)(v7 - 184);
  *((_QWORD *)v14 + 4) = v3;
  *((_QWORD *)v14 + 5) = v15;
  v16 = *(_QWORD *)(v7 - 168);
  *((_QWORD *)v14 + 6) = *(_QWORD *)(v7 - 176);
  *((_QWORD *)v14 + 7) = v16;
  *((_QWORD *)v14 + 8) = *(_QWORD *)(v7 - 160);
  *((_QWORD *)v14 + 9) = v2;
  *((_QWORD *)v14 + 10) = *(_QWORD *)(v7 - 192);
  (*(void (**)(char *, _BYTE *, uint64_t))(v9 + 32))(&v14[v13], v12, a1);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ShareLink.body.getter;
}

uint64_t ShareLink.show()(uint64_t a1)
{
  uint64_t Enum;
  _BYTE v4[144];
  uint64_t v5;

  ShareLink.presentSharingPicker.getter(a1, (uint64_t)v4);
  outlined init with take of Image.Resolved?((uint64_t)v4, (uint64_t)&v5, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
  Enum = getEnumTag for NavigationPath.Error((uint64_t)&v5);
  if ((_DWORD)Enum != 1)
    specialized AnyIdentifiableShareConfiguration.init<A, B, C, D>(_:)();
  return ShareLink.isPresented.setter(Enum, a1);
}

void closure #1 in closure #2 in ShareLink.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for ShareLink();
}

uint64_t sub_187913E4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v2 + *(int *)(a1 + 108), v1, v4);
  static ViewBuilder.buildBlock<A>(_:)(v5, v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v1);
}

void ShareLink.init<A>(item:subject:message:preview:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[32];

  v26[24] = a7;
  v26[25] = a8;
  v26[22] = a5;
  v26[23] = a6;
  v26[20] = a3;
  v26[21] = a4;
  v26[18] = a9;
  v26[19] = a2;
  v26[10] = a1;
  v26[15] = a12;
  v26[16] = a13;
  v26[13] = a20;
  v26[14] = a21;
  v26[17] = a10;
  v26[5] = a11;
  v26[8] = a19;
  v26[9] = a18;
  v26[7] = a15;
  v26[6] = a14;
  v26[26] = a16;
  MEMORY[0x1E0C80A78](a1, a2);
  v26[12] = (char *)v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[27] = v22;
  v26[28] = v23;
  v26[29] = v25;
  v26[30] = v24;
  type metadata accessor for SharePreview();
}

void sub_187913F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v14 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v12 - 336) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&a9 - v15;
  v17 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v12 - 248) = v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CollectionOfOne();
  *(_QWORD *)(v12 - 312) = v22;
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  *(_QWORD *)(v12 - 304) = (char *)&a9 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v21, v10, v11, v24);
  *(_QWORD *)(v12 - 320) = v11;
  CollectionOfOne.init(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v9, a1);
  v26 = *(unsigned __int8 *)(v14 + 80);
  *(_QWORD *)(v12 - 328) = v14;
  v27 = (v26 + 80) & ~v26;
  v28 = (char *)swift_allocObject();
  v29 = *(_QWORD *)(v12 - 280);
  *((_QWORD *)v28 + 2) = *(_QWORD *)(v12 - 288);
  *((_QWORD *)v28 + 3) = v29;
  *((_QWORD *)v28 + 4) = *(_QWORD *)(v12 - 128);
  *((_QWORD *)v28 + 5) = v11;
  v30 = *(_QWORD *)(v12 - 272);
  *((_QWORD *)v28 + 6) = *(_QWORD *)(v12 - 264);
  *((_QWORD *)v28 + 7) = v30;
  v31 = *(_QWORD *)(v12 - 224);
  *((_QWORD *)v28 + 8) = *(_QWORD *)(v12 - 232);
  *((_QWORD *)v28 + 9) = v31;
  v32 = (*(uint64_t (**)(char *, char *, _QWORD))(v14 + 32))(&v28[v27], v16, *(_QWORD *)(v12 - 336));
  (*(void (**)(uint64_t))(v12 - 216))(v32);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC650], *(_QWORD *)(v12 - 312));
  ShareLink.init(items:subject:message:preview:label:)(*(_QWORD **)(v12 - 192));
}

uint64_t sub_187914168()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(*(_QWORD *)(v1 - 296), v0);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 - 248) + 8))(*(_QWORD *)(v1 - 256), *(_QWORD *)(v1 - 320));
}

void sub_1879141BC()
{
  type metadata accessor for SharePreview();
}

uint64_t sub_1879141F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v6 = (v5 + 80) & ~v5;
  v7 = v2 + v6;
  if (*(_QWORD *)(v2 + v6 + 24))
    __swift_destroy_boxed_opaque_existential_1(v2 + v6);
  if (*(_QWORD *)(v7 + 56))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_BYTE *)(v7 + 48));
    swift_bridgeObjectRelease();
  }
  v8 = v7 + *(int *)(a1 + 56);
  v9 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v8, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v3);
  v10 = v7 + *(int *)(a1 + 60);
  v11 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v10, 1, v1))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in ShareLink.init<A>(item:subject:message:preview:label:)()
{
  type metadata accessor for SharePreview();
}

void sub_187914310()
{
  type metadata accessor for SharePreview();
}

uint64_t sub_187914338(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

void ShareLink<>.init(items:subject:message:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, void (*a11)(uint64_t), uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a7;
  v28 = a8;
  v25 = a5;
  v26 = a6;
  v23 = a3;
  v24 = a4;
  v21 = a9;
  v22 = a2;
  v20[1] = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = *(_QWORD *)(a13 - 8);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a13, v17);
  a11(v19);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CA86D0]);
  ShareLink.init(items:subject:message:preview:label:)(v21);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a7;
  v28 = a8;
  v25 = a5;
  v26 = a6;
  v23 = a3;
  v24 = a4;
  v21 = a9;
  v22 = a2;
  v20[1] = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = *(_QWORD *)(a13 - 8);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a13, v17);
  a11(v19);
  lazy protocol witness table accessor for type String and conformance String();
  ShareLink.init(items:subject:message:preview:label:)(v21);
}

uint64_t sub_187914490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1879145D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void ShareLink<>.init<>(item:subject:message:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, void (*a11)(uint64_t), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  _QWORD v22[2];
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a7;
  v30 = a8;
  v27 = a5;
  v28 = a6;
  v25 = a3;
  v26 = a4;
  v23 = a9;
  v24 = a2;
  v22[0] = a14;
  v22[1] = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v22 - v17;
  v19 = type metadata accessor for URL();
  v20 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v18, a1, v19);
  a11(v21);
  lazy protocol witness table accessor for type CollectionOfOne<URL> and conformance CollectionOfOne<A>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, v20, MEMORY[0x1E0CA86D0]);
  ShareLink.init(items:subject:message:preview:label:)(v23);
}

uint64_t sub_1879147A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

unint64_t lazy protocol witness table accessor for type CollectionOfOne<URL> and conformance CollectionOfOne<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CollectionOfOne<URL> and conformance CollectionOfOne<A>;
  if (!lazy protocol witness table cache variable for type CollectionOfOne<URL> and conformance CollectionOfOne<A>)
  {
    type metadata accessor for CollectionOfOne<URL>(255, &lazy cache variable for type metadata for CollectionOfOne<URL>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC650], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionOfOne<URL> and conformance CollectionOfOne<A>);
  }
  return result;
}

void ShareLink<>.init<>(item:subject:message:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  double v4;
  void (*v5)(double);

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  v5(v4);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for CollectionOfOne<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEC628]);
  lazy protocol witness table accessor for type CollectionOfOne<String> and conformance CollectionOfOne<A>();
  lazy protocol witness table accessor for type String and conformance String();
  ShareLink.init(items:subject:message:preview:label:)(a3);
}

unint64_t lazy protocol witness table accessor for type CollectionOfOne<String> and conformance CollectionOfOne<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CollectionOfOne<String> and conformance CollectionOfOne<A>;
  if (!lazy protocol witness table cache variable for type CollectionOfOne<String> and conformance CollectionOfOne<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for CollectionOfOne<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEC628]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC650], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionOfOne<String> and conformance CollectionOfOne<A>);
  }
  return result;
}

uint64_t DefaultShareLinkLabel.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0xD000000000000013;
  *(_QWORD *)(v7 + 24) = 0x8000000187BEBB10;
  *(_DWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 36) = 1;
  *(_OWORD *)(v7 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v7 + 56) = 0xD000000000000013;
  *(_QWORD *)(v7 + 64) = 0x8000000187BEBB10;
  *(_OWORD *)(v7 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v7 + 88) = 0;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  outlined copy of Text.Storage(v3, v4, v5);
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for View.body.getter in conformance DefaultShareLinkLabel@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0xD000000000000013;
  *(_QWORD *)(v7 + 24) = 0x8000000187BEBB10;
  *(_DWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 36) = 1;
  *(_OWORD *)(v7 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v7 + 56) = 0xD000000000000013;
  *(_QWORD *)(v7 + 64) = 0x8000000187BEBB10;
  *(_OWORD *)(v7 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v7 + 88) = 0;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  outlined copy of Text.Storage(v3, v4, v5);
  return swift_bridgeObjectRetain();
}

void ShareLink<>.init(items:subject:message:preview:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, uint64_t a16)
{
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a7;
  v31 = a8;
  v28 = a5;
  v29 = a6;
  v26 = a3;
  v27 = a4;
  v25 = a2;
  v23 = a15;
  v24 = a10;
  v18 = *(_QWORD *)(a12 - 8);
  v19 = MEMORY[0x1E0C80A78](a1, a2);
  v21 = (char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, a1, a12, v19);
  *((_QWORD *)&v22 + 1) = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  *(_QWORD *)&v22 = a16;
  ShareLink.init(items:subject:message:preview:label:)((uint64_t)v21, v25, v26, v27, v28, v29, v30, v31, a9, v24, *((uint64_t *)&v24 + 1), a11, (void (*)(uint64_t))closure #1 in ShareLink<>.init(items:subject:message:preview:), 0, a12, a13, a14, (uint64_t)&type metadata for DefaultShareLinkLabel, v23,
    v22);
}

uint64_t sub_187914C04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

unint64_t lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel;
  if (!lazy protocol witness table cache variable for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultShareLinkLabel, &type metadata for DefaultShareLinkLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel);
  }
  return result;
}

void ShareLink<>.init(items:subject:message:preview:onPresentationChanged:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  type metadata accessor for ShareLink();
}

void sub_187914D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;

  v15 = MEMORY[0x1E0C80A78](a1, a2);
  v17 = (uint64_t *)((char *)&a9 - v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v10 + 16))(v9, *(_QWORD *)(v14 - 272), v13, v15);
  *((_QWORD *)&v18 + 1) = v11;
  *(_QWORD *)&v18 = *(_QWORD *)(v14 - 296);
  ShareLink<>.init(items:subject:message:preview:)(v9, *(_QWORD *)(v14 - 240), *(_QWORD *)(v14 - 232), *(_QWORD *)(v14 - 224), *(_QWORD *)(v14 - 216), *(_QWORD *)(v14 - 208), *(_QWORD *)(v14 - 200), *(_QWORD *)(v14 - 192), v17, *(_OWORD *)(v14 - 256), *(_QWORD *)(v14 - 264), v13, *(_QWORD *)(v14 - 280), *(_QWORD *)(v14 - 288), v18, v12);
}

uint64_t sub_187914E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v5);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32);
  v8 = *(_QWORD *)(v6 - 184);
  v7(v8, v3, v2);
  v9 = (_QWORD *)(v8 + *(int *)(v2 + 112));
  result = ((uint64_t (*)(_QWORD, _QWORD))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?)(*v9, v9[1]);
  v11 = *(_QWORD *)(v6 - 176);
  *v9 = *(_QWORD *)(v6 - 168);
  v9[1] = v11;
  return result;
}

void type metadata accessor for ShareLink()
{
  JUMPOUT(0x18D75FF28);
}

void ShareLink<>.init(_:items:subject:message:preview:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int128 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20)
{
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[16];
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v41 = a7;
  v42 = a8;
  v35 = a9;
  v39 = a10;
  v40 = a6;
  v37 = a12;
  v38 = a11;
  v36 = a13;
  v34 = a14;
  v31 = a17;
  v32 = a5;
  v30 = a19;
  v33 = a15;
  v24 = *(_QWORD *)(a16 - 8);
  v25 = MEMORY[0x1E0C80A78](a1, a2);
  v27 = (char *)&v30 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v27, v28, a16, v25);
  v44 = a1;
  v45 = a2;
  v46 = a3;
  v47 = a4;
  *((_QWORD *)&v29 + 1) = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  *(_QWORD *)&v29 = a20;
  ShareLink.init(items:subject:message:preview:label:)((uint64_t)v27, v40, v41, v42, v39, v38, v37, v36, v35, v34, *((uint64_t *)&v34 + 1), v33, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v43, a16, v31, a18, (uint64_t)&type metadata for DefaultShareLinkLabel, v30,
    v29);
}

{
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[16];
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v41 = a7;
  v42 = a8;
  v35 = a9;
  v39 = a10;
  v40 = a6;
  v37 = a12;
  v38 = a11;
  v36 = a13;
  v34 = a14;
  v31 = a17;
  v32 = a5;
  v30 = a19;
  v33 = a15;
  v24 = *(_QWORD *)(a16 - 8);
  v25 = MEMORY[0x1E0C80A78](a1, a2);
  v27 = (char *)&v30 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v27, v28, a16, v25);
  v44 = a1;
  v45 = a2;
  v46 = a3 & 1;
  v47 = a4;
  *((_QWORD *)&v29 + 1) = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  *(_QWORD *)&v29 = a20;
  ShareLink.init(items:subject:message:preview:label:)((uint64_t)v27, v40, v41, v42, v39, v38, v37, v36, v35, v34, *((uint64_t *)&v34 + 1), v33, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v43, a16, v31, a18, (uint64_t)&type metadata for DefaultShareLinkLabel, v30,
    v29);
}

uint64_t sub_187914FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 240), v1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void ShareLink<>.init<A>(_:items:subject:message:preview:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[16];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v42 = a7;
  v43 = a8;
  v40 = a5;
  v41 = a6;
  v39 = a4;
  v37 = a3;
  v33 = a2;
  v36 = a9;
  v38 = a10;
  v35 = a11;
  v31 = a20;
  v30 = a17;
  v32 = a16;
  v34 = a12;
  v22 = *(_QWORD *)(a13 - 8);
  v23 = MEMORY[0x1E0C80A78](a1, a2);
  v25 = (char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v22 + 16))(v25, v23);
  v45 = a13;
  v46 = a14;
  v47 = a15;
  v48 = a16;
  v26 = v30;
  v49 = v30;
  v50 = a18;
  v51 = a19;
  v52 = v31;
  v53 = a21;
  v54 = a1;
  *((_QWORD *)&v28 + 1) = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  *((_QWORD *)&v27 + 1) = a18;
  *(_QWORD *)&v28 = a19;
  *(_QWORD *)&v27 = v26;
  ShareLink.init(items:subject:message:preview:label:)((uint64_t)v25, v37, v39, v40, v41, v42, v43, v38, v36, v35, *((uint64_t *)&v35 + 1), v34, (void (*)(uint64_t))partial apply for closure #1 in ShareLink<>.init<A>(_:items:subject:message:preview:), (uint64_t)v44, a13, a14, a15, (uint64_t)&type metadata for DefaultShareLinkLabel, v27,
    v28);
}

uint64_t sub_18791514C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v3 - 288), v0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 - 296) - 8) + 8))(v1);
}

uint64_t partial apply for closure #1 in ShareLink<>.init<A>(_:items:subject:message:preview:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in TableColumn<>.init<A>(_:sortUsing:content:)(*(_QWORD *)(v1 + 88), a1);
}

uint64_t sub_187915308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  (*(void (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v5 - 240), v3);
  outlined consume of Text.Storage(v2, v1, v4);
  return swift_bridgeObjectRelease();
}

void ShareLink<>.init<A>(item:subject:message:preview:)()
{
  type metadata accessor for SharePreview();
}

void sub_1879153BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;

  v16 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&a9 - v17;
  v19 = *(_QWORD *)(v11 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v24, v13, v11, v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 16))(v18, *(_QWORD *)(v14 - 224), a1);
  v25 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  ShareLink.init<A>(item:subject:message:preview:label:)((uint64_t)v24, *(_QWORD *)(v14 - 176), *(_QWORD *)(v14 - 168), *(_QWORD *)(v14 - 160), *(_QWORD *)(v14 - 152), *(_QWORD *)(v14 - 144), *(_QWORD *)(v14 - 136), *(_QWORD *)(v14 - 128), *(_QWORD *)(v14 - 184), *(_QWORD *)(v14 - 192), (uint64_t)v18, (uint64_t)closure #1 in ShareLink<>.init(items:subject:message:preview:), 0, v10, *(_QWORD *)(v14 - 200), (uint64_t)&type metadata for DefaultShareLinkLabel, v11, v12, v9,
    v25,
    *(_QWORD *)(v14 - 208));
}

uint64_t sub_187915498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v5 - 216), v0);
}

void ShareLink<>.init<A>(item:subject:message:preview:onPresentationChanged:)()
{
  type metadata accessor for SharePreview();
}

void sub_187915584(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_QWORD *)(v7 - 280) = a1;
  *(_QWORD *)(v7 - 168) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v7 - 320) = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v10 = type metadata accessor for CollectionOfOne();
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC650], v10);
  v12 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  *(_QWORD *)(v7 - 160) = v10;
  *(_QWORD *)(v7 - 152) = v4;
  *(_QWORD *)(v7 - 144) = v6;
  *(_QWORD *)(v7 - 136) = &type metadata for DefaultShareLinkLabel;
  *(_QWORD *)(v7 - 128) = v11;
  *(_QWORD *)(v7 - 120) = v3;
  *(_QWORD *)(v7 - 112) = *(_QWORD *)(v7 - 296);
  *(_QWORD *)(v7 - 104) = v12;
  *(_QWORD *)(v7 - 96) = v2;
  type metadata accessor for ShareLink();
}

void sub_187915644(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;

  *(_QWORD *)(v6 - 288) = *(_QWORD *)(a1 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v2 + 16))(v5, *(_QWORD *)(v6 - 272), v3, v7);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v6 - 168) + 16))(v4, *(_QWORD *)(v6 - 264), *(_QWORD *)(v6 - 280));
  ShareLink<>.init<A>(item:subject:message:preview:)();
}

uint64_t sub_18791570C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 168) + 8))(v0, v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 320) + 8))(v3, v2);
  v7 = *(_QWORD *)(v6 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 288) + 32))(v7, v5, v4);
  v8 = (_QWORD *)(v7 + *(int *)(v4 + 112));
  result = ((uint64_t (*)(_QWORD, _QWORD))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?)(*v8, v8[1]);
  v10 = *(_QWORD *)(v6 - 176);
  *v8 = *(_QWORD *)(v6 - 184);
  v8[1] = v10;
  return result;
}

void ShareLink<>.init<A>(_:item:subject:message:preview:)()
{
  type metadata accessor for SharePreview();
}

{
  type metadata accessor for SharePreview();
}

void sub_187915850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;

  v16 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&a9 - v17;
  v19 = *(_QWORD *)(v10 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v24, v9, v10, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v11, a1);
  v25 = *(_QWORD *)(v14 - 296);
  *(_QWORD *)(v14 - 160) = *(_QWORD *)(v14 - 304);
  *(_QWORD *)(v14 - 152) = v25;
  *(_BYTE *)(v14 - 144) = *(_DWORD *)(v14 - 276);
  *(_QWORD *)(v14 - 136) = *(_QWORD *)(v14 - 272);
  v26 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  ShareLink.init<A>(item:subject:message:preview:label:)((uint64_t)v24, *(_QWORD *)(v14 - 200), *(_QWORD *)(v14 - 192), *(_QWORD *)(v14 - 184), *(_QWORD *)(v14 - 208), *(_QWORD *)(v14 - 216), *(_QWORD *)(v14 - 224), *(_QWORD *)(v14 - 232), *(_QWORD *)(v14 - 240), *(_QWORD *)(v14 - 248), (uint64_t)v18, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), v14 - 176, *(_QWORD *)(v14 - 256), *(_QWORD *)(v14 - 264), (uint64_t)&type metadata for DefaultShareLinkLabel, v10, v12, v13,
    v26,
    *(_QWORD *)(v14 - 288));
}

uint64_t sub_187915968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v4 - 320), v2);
  (*(void (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v4 - 312), v3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void ShareLink<>.init<A, B>(_:item:subject:message:preview:)()
{
  type metadata accessor for SharePreview();
}

void sub_187915A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v16 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v14 - 360) = a1;
  *(_QWORD *)(v14 - 328) = v16;
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&a9 - v17;
  v19 = *(_QWORD *)(v11 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v24, v13, v11, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v12, a1);
  v25 = *(_QWORD *)(v14 - 336);
  v26 = *(_QWORD *)(v14 - 344);
  *(_QWORD *)(v14 - 192) = v25;
  *(_QWORD *)(v14 - 184) = v26;
  *(_QWORD *)(v14 - 176) = *(_QWORD *)(v14 - 216);
  *(_QWORD *)(v14 - 168) = v11;
  *(_QWORD *)(v14 - 160) = v9;
  *(_QWORD *)(v14 - 152) = v10;
  v27 = *(_QWORD *)(v14 - 304);
  *(_QWORD *)(v14 - 144) = *(_QWORD *)(v14 - 312);
  *(_QWORD *)(v14 - 136) = v27;
  *(_QWORD *)(v14 - 128) = *(_QWORD *)(v14 - 296);
  v28 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  ShareLink.init<A>(item:subject:message:preview:label:)((uint64_t)v24, *(_QWORD *)(v14 - 272), *(_QWORD *)(v14 - 256), *(_QWORD *)(v14 - 248), *(_QWORD *)(v14 - 240), *(_QWORD *)(v14 - 232), *(_QWORD *)(v14 - 224), *(_QWORD *)(v14 - 264), *(_QWORD *)(v14 - 280), *(_QWORD *)(v14 - 288), (uint64_t)v18, (uint64_t)partial apply for closure #2 in TableColumn<>.init<A, B>(_:value:content:), v14 - 208, v25, v26, (uint64_t)&type metadata for DefaultShareLinkLabel, v11, v9, v10,
    v28,
    v27);
}

uint64_t sub_187915BC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 328) + 8))(*(_QWORD *)(v3 - 352), *(_QWORD *)(v3 - 360));
  (*(void (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v3 - 320), v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 - 216) - 8) + 8))(v2);
}

void sub_187915CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;

  v16 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&a9 - v17;
  v19 = *(_QWORD *)(v11 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v24, v9, v11, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v13, a1);
  *(_QWORD *)(v14 - 160) = v12;
  *(_QWORD *)(v14 - 152) = v10;
  *(_BYTE *)(v14 - 144) = *(_DWORD *)(v14 - 276) & 1;
  *(_QWORD *)(v14 - 136) = *(_QWORD *)(v14 - 272);
  v25 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  ShareLink.init<A>(item:subject:message:preview:label:)((uint64_t)v24, *(_QWORD *)(v14 - 200), *(_QWORD *)(v14 - 192), *(_QWORD *)(v14 - 184), *(_QWORD *)(v14 - 208), *(_QWORD *)(v14 - 216), *(_QWORD *)(v14 - 224), *(_QWORD *)(v14 - 232), *(_QWORD *)(v14 - 240), *(_QWORD *)(v14 - 248), (uint64_t)v18, (uint64_t)partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), v14 - 176, *(_QWORD *)(v14 - 256), *(_QWORD *)(v14 - 264), (uint64_t)&type metadata for DefaultShareLinkLabel, v11, *(_QWORD *)(v14 - 296), *(_QWORD *)(v14 - 304),
    v25,
    *(_QWORD *)(v14 - 288));
}

uint64_t sub_187915E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v6, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined consume of Text.Storage(*(_QWORD *)(v7 - 320), *(_QWORD *)(v7 - 312), v5);
  return swift_bridgeObjectRelease();
}

uint64_t ShareLink<>.init(items:subject:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return ShareLink<>.init(items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)closure #1 in ShareLink<>.init(items:subject:message:preview:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

{
  return ShareLink<>.init(items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)closure #1 in ShareLink<>.init(items:subject:message:preview:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

uint64_t ShareLink<>.init(_:items:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return ShareLink<>.init(_:items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _BYTE *, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

{
  return ShareLink<>.init(_:items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (uint64_t)partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _BYTE *, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

{
  return ShareLink<>.init(_:items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _BYTE *, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

{
  return ShareLink<>.init(_:items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (uint64_t)partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _BYTE *, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

uint64_t ShareLink<>.init<A>(_:items:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return ShareLink<>.init<A>(_:items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)partial apply for closure #2 in LabeledView<>.init<A>(_:content:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

{
  return ShareLink<>.init<A>(_:items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)partial apply for closure #2 in LabeledView<>.init<A>(_:content:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

uint64_t ShareLink<>.init(items:subject:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, ValueMetadata *, uint64_t, unint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a7;
  v27 = a8;
  v24 = a5;
  v25 = a6;
  v22 = a13;
  v23 = a4;
  v16 = *(_QWORD *)(a10 - 8);
  v17 = MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, a10, v17);
  v20 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  v22(v19, a2, a3, v23, v24, v25, v26, v27, a9, a12, 0, a10, &type metadata for DefaultShareLinkLabel, a11, v20);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, a10);
}

uint64_t closure #1 in ShareLink<>.init(items:subject:message:preview:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  result = static Text.System.shareEllipses.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  *(_QWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t ShareLink<>.init(_:items:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (*a18)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _BYTE *, uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v30[2];
  void (*v31)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _BYTE *, uint64_t, ValueMetadata *, uint64_t, unint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[16];
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v37 = a7;
  v38 = a8;
  v30[1] = a9;
  v35 = a10;
  v36 = a6;
  v33 = a12;
  v34 = a11;
  v31 = a18;
  v32 = a13;
  v30[0] = a17;
  v23 = *(_QWORD *)(a15 - 8);
  v24 = MEMORY[0x1E0C80A78](a1, a2);
  v26 = (char *)v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v26, v27, a15, v24);
  v40 = a1;
  v41 = a2;
  v42 = a3;
  v43 = a4;
  v28 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  v31(v26, v36, v37, v38, v35, v34, v33, v32, a14, v30[0], v39, a15, &type metadata for DefaultShareLinkLabel, a16, v28);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a5, a15);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v30[2];
  void (*v31)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _BYTE *, uint64_t, ValueMetadata *, uint64_t, unint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[16];
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v37 = a7;
  v38 = a8;
  v30[1] = a9;
  v35 = a10;
  v36 = a6;
  v33 = a12;
  v34 = a11;
  v31 = a18;
  v32 = a13;
  v30[0] = a17;
  v23 = *(_QWORD *)(a15 - 8);
  v24 = MEMORY[0x1E0C80A78](a1, a2);
  v26 = (char *)v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v26, v27, a15, v24);
  v40 = a1;
  v41 = a2;
  a3 &= 1u;
  v42 = a3;
  v43 = a4;
  v28 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  v31(v26, v36, v37, v38, v35, v34, v33, v32, a14, v30[0], v39, a15, &type metadata for DefaultShareLinkLabel, a16, v28);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a5, a15);
  outlined consume of Text.Storage(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t ShareLink<>.init<A>(_:items:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (*a17)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, ValueMetadata *, uint64_t, unint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v32 = a7;
  v33 = a8;
  v30 = a5;
  v31 = a6;
  v25[1] = a9;
  v26 = a3;
  v28 = a10;
  v29 = a4;
  v27 = a17;
  v19 = *(_QWORD *)(a12 - 8);
  v20 = MEMORY[0x1E0C80A78](a1, a2);
  v22 = (char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v19 + 16))(v22, v20);
  v35 = a12;
  v36 = a13;
  v37 = a14;
  v38 = a15;
  v39 = a1;
  v23 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  v27(v22, v26, v29, v30, v31, v32, v33, v28, a11, a16, v34, a12, &type metadata for DefaultShareLinkLabel, a14, v23);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a2, a12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a13 - 8) + 8))(a1, a13);
}

uint64_t ShareLink<>.init<>(item:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD, _QWORD, _QWORD)@<X2>, void (*a4)(_QWORD, _QWORD, _QWORD)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, double);
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(_QWORD, _QWORD, _QWORD);
  uint64_t v67;
  void (*v68)(_QWORD, _QWORD, _QWORD);
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  void (*v85)(_QWORD, _QWORD, _QWORD);
  uint64_t v86;
  uint64_t (*v87)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v88)(_QWORD, _QWORD, _QWORD);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char *v97;
  void (**v98)(_QWORD *__return_ptr, char *);
  void (*v99)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(_QWORD, _QWORD, _QWORD);
  void (*v104)(_QWORD, _QWORD, _QWORD);
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t (*v136)(_QWORD, _QWORD, _QWORD);
  char *v137;
  void (*v138)(_QWORD, _QWORD, _QWORD);
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  _QWORD v143[4];
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  _QWORD v148[19];
  _OWORD v149[9];
  char v150;

  v130 = a7;
  v131 = a8;
  v129 = a6;
  v132 = a5;
  v138 = a4;
  v121 = a9;
  v128 = a10;
  type metadata accessor for CollectionOfOne<URL>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v134 = (uint64_t)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v137 = (char *)&v111 - v18;
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E0DEC610]);
  MEMORY[0x1E0C80A78](v19, v20);
  v117 = (char *)&v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v140 = (uint64_t)&v111 - v24;
  v25 = (int *)type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>();
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (uint64_t *)((char *)&v111 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
  MEMORY[0x1E0C80A78](v29, v30);
  v116 = (uint64_t)&v111 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v111 - v34;
  v36 = type metadata accessor for URL();
  MEMORY[0x1E0C80A78](v36, v37);
  v118 = (char *)&v111 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x1E0C80A78](v39, v40);
  v43 = (char *)&v111 - v42;
  v139 = v44;
  v45 = *(void (**)(char *, uint64_t, uint64_t, double))(v44 + 16);
  v122 = a1;
  v45((char *)&v111 - v42, a1, v36, v41);
  v119 = v43;
  ((void (*)(char *, char *, uint64_t))v45)(v35, v43, v36);
  v46 = static Text.System.shareEllipses.getter();
  v124 = v47;
  v125 = v46;
  v123 = v48;
  v126 = v49;
  *v28 = 0;
  v50 = (char *)v28 + v25[24];
  *(_OWORD *)v50 = 0u;
  *((_OWORD *)v50 + 1) = 0u;
  v51 = (char *)v28 + v25[25];
  *(_OWORD *)v51 = 0u;
  *((_OWORD *)v51 + 1) = 0u;
  v52 = (_QWORD *)((char *)v28 + v25[26]);
  v135 = v52;
  *v52 = 0;
  v52[1] = 0;
  v53 = (_QWORD *)((char *)v28 + v25[28]);
  *v53 = 0;
  v53[1] = 0;
  v54 = (char *)v28 + v25[29];
  v148[0] = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v148);
  outlined init with take of TableCellFormula((uint64_t)v148, (uint64_t)v149, (uint64_t (*)(_QWORD))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  v55 = v149[7];
  *((_OWORD *)v54 + 6) = v149[6];
  *((_OWORD *)v54 + 7) = v55;
  *((_OWORD *)v54 + 8) = v149[8];
  v54[144] = v150;
  v56 = v149[3];
  *((_OWORD *)v54 + 2) = v149[2];
  *((_OWORD *)v54 + 3) = v56;
  v57 = v149[5];
  *((_OWORD *)v54 + 4) = v149[4];
  *((_OWORD *)v54 + 5) = v57;
  v58 = v149[1];
  *(_OWORD *)v54 = v149[0];
  *((_OWORD *)v54 + 1) = v58;
  v59 = v25[30];
  v127 = v28;
  v60 = (char *)v28 + v59;
  *v60 = 0;
  *((_QWORD *)v60 + 1) = 0;
  v61 = (uint64_t)v28 + v25[23];
  v120 = v35;
  v114 = v25;
  v115 = v61;
  outlined init with copy of CollectionOfOne<URL>((uint64_t)v35, v61);
  v62 = *(_QWORD *)v50;
  v136 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v50 + 1);
  v63 = *((_QWORD *)v50 + 2);
  v133 = *((_QWORD *)v50 + 3);
  v64 = a2;
  v65 = a2;
  v66 = a3;
  v67 = (uint64_t)a3;
  v68 = v138;
  v69 = v132;
  outlined copy of Text?(v65, v67, (char)v138, v132);
  outlined consume of Text?(v62, (uint64_t)v136, v63, v133);
  v133 = v64;
  *(_QWORD *)v50 = v64;
  *((_QWORD *)v50 + 1) = v66;
  v136 = v66;
  *((_QWORD *)v50 + 2) = v68;
  *((_QWORD *)v50 + 3) = v69;
  v70 = v135;
  v72 = *(_QWORD *)v51;
  v71 = *((_QWORD *)v51 + 1);
  v73 = *((_QWORD *)v51 + 3);
  v112 = *((_QWORD *)v51 + 2);
  v113 = v71;
  v75 = v129;
  v74 = v130;
  v76 = v131;
  v77 = v128;
  outlined copy of Text?(v129, v130, v131, v128);
  v78 = v72;
  v79 = v126;
  outlined consume of Text?(v78, v113, v112, v73);
  *(_QWORD *)v51 = v75;
  *((_QWORD *)v51 + 1) = v74;
  *((_QWORD *)v51 + 2) = v76;
  *((_QWORD *)v51 + 3) = v77;
  v80 = v132;
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*v70, v70[1]);
  v82 = v124;
  v81 = v125;
  *v70 = 0;
  v70[1] = 0;
  v83 = (char *)v127 + v114[27];
  *(_QWORD *)v83 = v81;
  *((_QWORD *)v83 + 1) = v82;
  v84 = v123 & 1;
  v83[16] = v123 & 1;
  *((_QWORD *)v83 + 3) = v79;
  if (v80)
  {
    v143[0] = 0;
    outlined copy of Text.Storage(v81, v82, v84);
    swift_bridgeObjectRetain();
    v85 = v138;
    LOBYTE(v142) = v138 & 1;
    v86 = v133;
    v87 = v136;
    Text.assertUnstyled(_:options:)();
    v88 = v87;
  }
  else
  {
    outlined copy of Text.Storage(v81, v82, v84);
    swift_bridgeObjectRetain();
    v85 = v138;
    v88 = v136;
    v86 = v133;
  }
  v89 = v116;
  outlined init with copy of CollectionOfOne<URL>(v115, v116);
  v90 = v139;
  v91 = (uint64_t)v137;
  v138 = *(void (**)(_QWORD, _QWORD, _QWORD))(v139 + 32);
  v138(v137, v89, v36);
  v92 = *(char **)(v90 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v92)(v91, 0, 1, v36);
  v93 = (uint64_t)v117;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v92)(v117, 1, 1, v36);
  outlined assign with take of URL?(v91, v93);
  v94 = v140;
  outlined init with take of CollectionOfOne<URL>.Iterator(v93, v140, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E0DEC610]);
  v95 = v134;
  outlined init with take of CollectionOfOne<URL>.Iterator(v94, v134, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v137 = v92;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v92)(v94, 1, 1, v36);
  v136 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v90 + 48);
  v96 = v136(v95, 1, v36);
  v97 = v118;
  v98 = (void (**)(_QWORD *__return_ptr, char *))v135;
  if (v96 != 1)
  {
    v133 = 0x8000000187BEBB30;
    do
    {
      v138(v97, v95, v36);
      if (*v98)
      {
        v102 = v86;
        v103 = v88;
        v104 = v85;
        (*v98)(v143, v97);
        v105 = v97;
        v107 = v144;
        v106 = v145;
        v109 = v146;
        v108 = v147;
        outlined copy of Text?(v144, v145, v146, v147);
        outlined destroy of SharePreview<Never, Never>((uint64_t)v143);
        if (v108)
        {
          v110 = v109 & 1;
          v142 = 0;
          v141 = v110;
          Text.assertUnstyled(_:options:)();
          outlined consume of Text.Storage(v107, v106, v110);
          swift_bridgeObjectRelease();
        }
        (*(void (**)(char *, uint64_t))(v139 + 8))(v105, v36);
        v85 = v104;
        v88 = v103;
        v86 = v102;
        v97 = v105;
        v95 = v134;
        v98 = (void (**)(_QWORD *__return_ptr, char *))v135;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v139 + 8))(v97, v36);
      }
      v101 = v140;
      outlined init with take of CollectionOfOne<URL>.Iterator(v140, v95, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v137)(v101, 1, 1, v36);
    }
    while (v136(v95, 1, v36) != 1);
  }
  outlined destroy of CollectionOfOne<URL>.Iterator(v140, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E0DEC610]);
  outlined consume of Text?(v129, v130, v131, v128);
  outlined consume of Text?(v86, (uint64_t)v88, (char)v85, v132);
  outlined consume of Text.Storage(v125, v124, v123 & 1);
  swift_bridgeObjectRelease();
  outlined destroy of CollectionOfOne<URL>.Iterator((uint64_t)v120, &lazy cache variable for type metadata for CollectionOfOne<URL>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
  outlined init with take of TableCellFormula((uint64_t)v127, v121, (uint64_t (*)(_QWORD))type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>);
  v99 = *(void (**)(char *, uint64_t))(v139 + 8);
  v99(v119, v36);
  return ((uint64_t (*)(uint64_t, uint64_t))v99)(v122, v36);
}

void type metadata accessor for CollectionOfOne<URL>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for URL();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>;
  if (!lazy cache variable for type metadata for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>)
  {
    type metadata accessor for CollectionOfOne<URL>(255, &lazy cache variable for type metadata for CollectionOfOne<URL>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
    lazy protocol witness table accessor for type CollectionOfOne<URL> and conformance CollectionOfOne<A>();
    lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CA86D0]);
    type metadata accessor for ShareLink();
  }
  return result;
}

uint64_t sub_187916DF8@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[144];

  EnvironmentValues.presentSharingPicker.getter((uint64_t)v3);
  return outlined init with take of Image.Resolved?((uint64_t)v3, a1, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
}

uint64_t _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_(uint64_t result)
{
  *(_BYTE *)(result + 144) = 0;
  return result;
}

uint64_t outlined init with copy of CollectionOfOne<URL>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of CollectionOfOne<URL>.Iterator(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;

  type metadata accessor for CollectionOfOne<URL>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t outlined destroy of CollectionOfOne<URL>.Iterator(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4;

  type metadata accessor for CollectionOfOne<URL>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined destroy of SharePreview<Never, Never>(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SharePreview<Never, Never>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ShareLink<>.init<>(item:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t result;
  uint64_t KeyPath;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[19];
  char v31;

  v19 = static Text.System.shareEllipses.getter();
  v27 = v20;
  v28 = v19;
  v26 = v21;
  v29 = v22;
  KeyPath = swift_getKeyPath();
  swift_bridgeObjectRetain();
  outlined copy of Text?(a3, a4, a5, a6);
  outlined consume of Text?(0, 0, 0, 0);
  outlined copy of Text?(a7, a8, a10, a11);
  outlined consume of Text?(0, 0, 0, 0);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(0, 0);
  if (a6)
  {
    v30[0] = 0;
    outlined copy of Text.Storage(v28, v27, v26 & 1);
    swift_bridgeObjectRetain();
    v31 = a5 & 1;
    Text.assertUnstyled(_:options:)();
    outlined consume of Text?(a7, a8, a10, a11);
    outlined consume of Text?(a3, a4, a5, a6);
    outlined consume of Text.Storage(v28, v27, v26 & 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of Text?(a7, a8, a10, a11);
  }
  swift_bridgeObjectRelease();
  v30[0] = KeyPath;
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v30);
  result = outlined init with take of TableCellFormula((uint64_t)v30, a9 + 152, (uint64_t (*)(_QWORD))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = a1;
  *(_QWORD *)(a9 + 16) = a2;
  *(_QWORD *)(a9 + 24) = a3;
  *(_QWORD *)(a9 + 32) = a4;
  *(_QWORD *)(a9 + 40) = a5;
  *(_QWORD *)(a9 + 48) = a6;
  *(_QWORD *)(a9 + 56) = a7;
  *(_QWORD *)(a9 + 64) = a8;
  *(_QWORD *)(a9 + 72) = a10;
  *(_QWORD *)(a9 + 80) = a11;
  *(_QWORD *)(a9 + 88) = 0;
  *(_QWORD *)(a9 + 96) = 0;
  *(_QWORD *)(a9 + 104) = v28;
  *(_QWORD *)(a9 + 112) = v27;
  *(_BYTE *)(a9 + 120) = v26 & 1;
  *(_QWORD *)(a9 + 136) = 0;
  *(_QWORD *)(a9 + 144) = 0;
  *(_QWORD *)(a9 + 128) = v29;
  *(_BYTE *)(a9 + 304) = 0;
  *(_QWORD *)(a9 + 312) = 0;
  return result;
}

uint64_t ShareLink<>.init<>(_:item:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char *a5@<X4>, void (*a6)(_QWORD, _QWORD, _QWORD, _QWORD)@<X5>, uint64_t a7@<X6>, void (*a8)(_QWORD, _QWORD, _QWORD)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, double);
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  _QWORD *v56;
  _QWORD *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD, _QWORD, _QWORD);
  void (*v70)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char v88;
  void (*v89)(_QWORD, _QWORD, _QWORD);
  void (*v90)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  char *v99;
  void (**v100)(_QWORD *__return_ptr, char *);
  void (*v101)(char *, uint64_t);
  uint64_t v103;
  void (*v104)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v105;
  void (*v106)(_QWORD, _QWORD, _QWORD);
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  _QWORD *v139;
  char *v140;
  void (*v141)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v142)(_QWORD, _QWORD, _QWORD);
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  _QWORD v147[4];
  uint64_t v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  _QWORD v152[19];
  _OWORD v153[9];
  char v154;

  v141 = a6;
  v142 = a8;
  v118 = a7;
  LODWORD(v139) = a3;
  v130 = a1;
  v123 = a9;
  v135 = a14;
  v134 = a13;
  v133 = a12;
  v132 = a11;
  v136 = a10;
  type metadata accessor for CollectionOfOne<URL>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v17, v18);
  v138 = (uint64_t)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v140 = (char *)&v113 - v22;
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E0DEC610]);
  MEMORY[0x1E0C80A78](v23, v24);
  v137 = (char *)&v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v144 = (uint64_t)&v113 - v28;
  v29 = (int *)type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>();
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (uint64_t *)((char *)&v113 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
  MEMORY[0x1E0C80A78](v33, v34);
  v119 = (uint64_t)&v113 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v113 - v38;
  v40 = type metadata accessor for URL();
  MEMORY[0x1E0C80A78](v40, v41);
  v120 = (char *)&v113 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v43, v44);
  v47 = (char *)&v113 - v46;
  v143 = v48;
  v49 = *(void (**)(char *, uint64_t, uint64_t, double))(v48 + 16);
  v124 = a5;
  v49((char *)&v113 - v46, (uint64_t)a5, v40, v45);
  v121 = v47;
  ((void (*)(char *, char *, uint64_t))v49)(v39, v47, v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v125 = a4;
  v126 = a2;
  v50 = Text.init(_:tableName:bundle:comment:)();
  v128 = v51;
  v129 = v50;
  v127 = v52;
  v130 = v53;
  *v32 = 0;
  v54 = (char *)v32 + v29[24];
  *(_OWORD *)v54 = 0u;
  *((_OWORD *)v54 + 1) = 0u;
  v55 = (char *)v32 + v29[25];
  *(_OWORD *)v55 = 0u;
  *((_OWORD *)v55 + 1) = 0u;
  v56 = (_QWORD *)((char *)v32 + v29[26]);
  v139 = v56;
  *v56 = 0;
  v56[1] = 0;
  v57 = (_QWORD *)((char *)v32 + v29[28]);
  *v57 = 0;
  v57[1] = 0;
  v58 = (char *)v32 + v29[29];
  v152[0] = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v152);
  outlined init with take of TableCellFormula((uint64_t)v152, (uint64_t)v153, (uint64_t (*)(_QWORD))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  v59 = v153[7];
  *((_OWORD *)v58 + 6) = v153[6];
  *((_OWORD *)v58 + 7) = v59;
  *((_OWORD *)v58 + 8) = v153[8];
  v58[144] = v154;
  v60 = v153[3];
  *((_OWORD *)v58 + 2) = v153[2];
  *((_OWORD *)v58 + 3) = v60;
  v61 = v153[5];
  *((_OWORD *)v58 + 4) = v153[4];
  *((_OWORD *)v58 + 5) = v61;
  v62 = v153[1];
  *(_OWORD *)v58 = v153[0];
  *((_OWORD *)v58 + 1) = v62;
  v63 = v29[30];
  v131 = v32;
  v64 = (char *)v32 + v63;
  *v64 = 0;
  *((_QWORD *)v64 + 1) = 0;
  v65 = (uint64_t)v32 + v29[23];
  v122 = v39;
  v116 = v29;
  v117 = v65;
  outlined init with copy of CollectionOfOne<URL>((uint64_t)v39, v65);
  v66 = *(_QWORD *)v54;
  v67 = *((_QWORD *)v54 + 1);
  v68 = *((_QWORD *)v54 + 2);
  v114 = *((_QWORD *)v54 + 3);
  v115 = v66;
  v70 = v141;
  v69 = v142;
  v71 = v118;
  v72 = v136;
  outlined copy of Text?((uint64_t)v141, v118, (char)v142, v136);
  outlined consume of Text?(v115, v67, v68, v114);
  *(_QWORD *)v54 = v70;
  *((_QWORD *)v54 + 1) = v71;
  v73 = v71;
  *((_QWORD *)v54 + 2) = v69;
  *((_QWORD *)v54 + 3) = v72;
  v74 = *(_QWORD *)v55;
  v75 = *((_QWORD *)v55 + 1);
  v76 = *((_QWORD *)v55 + 3);
  v114 = *((_QWORD *)v55 + 2);
  v115 = v74;
  v78 = v132;
  v77 = v133;
  v80 = v134;
  v79 = v135;
  outlined copy of Text?(v132, v133, v134, v135);
  v81 = v75;
  v82 = v130;
  outlined consume of Text?(v115, v81, v114, v76);
  *(_QWORD *)v55 = v78;
  *((_QWORD *)v55 + 1) = v77;
  *((_QWORD *)v55 + 2) = v80;
  *((_QWORD *)v55 + 3) = v79;
  v83 = v139;
  v84 = v136;
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*v139, v139[1]);
  v86 = v128;
  v85 = v129;
  *v83 = 0;
  v83[1] = 0;
  v87 = (char *)v131 + v116[27];
  *(_QWORD *)v87 = v85;
  *((_QWORD *)v87 + 1) = v86;
  v88 = v127 & 1;
  v87[16] = v127 & 1;
  *((_QWORD *)v87 + 3) = v82;
  if (v84)
  {
    v147[0] = 0;
    outlined copy of Text.Storage(v85, v86, v88);
    swift_bridgeObjectRetain();
    v90 = v141;
    v89 = v142;
    LOBYTE(v146) = v142 & 1;
    Text.assertUnstyled(_:options:)();
  }
  else
  {
    outlined copy of Text.Storage(v85, v86, v88);
    swift_bridgeObjectRetain();
    v90 = v141;
    v89 = v142;
  }
  v91 = v119;
  outlined init with copy of CollectionOfOne<URL>(v117, v119);
  v92 = v143;
  v93 = (uint64_t)v140;
  v142 = *(void (**)(_QWORD, _QWORD, _QWORD))(v143 + 32);
  v142(v140, v91, v40);
  v94 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56);
  v94(v93, 0, 1, v40);
  v95 = (uint64_t)v137;
  v94((uint64_t)v137, 1, 1, v40);
  outlined assign with take of URL?(v93, v95);
  v96 = v144;
  outlined init with take of CollectionOfOne<URL>.Iterator(v95, v144, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E0DEC610]);
  v97 = v138;
  outlined init with take of CollectionOfOne<URL>.Iterator(v96, v138, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v141 = v94;
  v94(v96, 1, 1, v40);
  v140 = *(char **)(v92 + 48);
  v98 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v140)(v97, 1, v40);
  v99 = v120;
  v100 = (void (**)(_QWORD *__return_ptr, char *))v139;
  if (v98 != 1)
  {
    v137 = (char *)0x8000000187BEBB30;
    do
    {
      v142(v99, v97, v40);
      if (*v100)
      {
        v104 = v90;
        v105 = v73;
        v106 = v89;
        (*v100)(v147, v99);
        v107 = v99;
        v108 = v148;
        v109 = v149;
        v111 = v150;
        v110 = v151;
        outlined copy of Text?(v148, v149, v150, v151);
        outlined destroy of SharePreview<Never, Never>((uint64_t)v147);
        if (v110)
        {
          v112 = v111 & 1;
          v146 = 0;
          v145 = v112;
          Text.assertUnstyled(_:options:)();
          outlined consume of Text.Storage(v108, v109, v112);
          swift_bridgeObjectRelease();
        }
        (*(void (**)(char *, uint64_t))(v143 + 8))(v107, v40);
        v89 = v106;
        v73 = v105;
        v90 = v104;
        v99 = v107;
        v97 = v138;
        v100 = (void (**)(_QWORD *__return_ptr, char *))v139;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v143 + 8))(v99, v40);
      }
      v103 = v144;
      outlined init with take of CollectionOfOne<URL>.Iterator(v144, v97, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v141(v103, 1, 1, v40);
    }
    while (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v140)(v97, 1, v40) != 1);
  }
  outlined destroy of CollectionOfOne<URL>.Iterator(v144, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E0DEC610]);
  outlined consume of Text?(v132, v133, v134, v135);
  outlined consume of Text?((uint64_t)v90, v73, (char)v89, v136);
  outlined consume of Text.Storage(v129, v128, v127 & 1);
  swift_bridgeObjectRelease();
  outlined destroy of CollectionOfOne<URL>.Iterator((uint64_t)v122, &lazy cache variable for type metadata for CollectionOfOne<URL>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
  outlined init with take of TableCellFormula((uint64_t)v131, v123, (uint64_t (*)(_QWORD))type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>);
  v101 = *(void (**)(char *, uint64_t))(v143 + 8);
  v101(v121, v40);
  v101(v124, v40);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

double ShareLink<>.init<>(_:item:subject:message:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double result;
  __int128 v27;
  uint64_t KeyPath;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD v34[19];
  _OWORD v35[9];
  char v36;
  char v37;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = Text.init(_:tableName:bundle:comment:)();
  v31 = v15;
  v30 = v16;
  v29 = v17;
  KeyPath = swift_getKeyPath();
  swift_bridgeObjectRetain();
  outlined copy of Text?(a3, a4, a6, a7);
  outlined consume of Text?(0, 0, 0, 0);
  outlined copy of Text?(a8, a9, a10, a11);
  outlined consume of Text?(0, 0, 0, 0);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(0, 0);
  if (a7)
  {
    *(_QWORD *)&v35[0] = 0;
    v18 = v14;
    v19 = v30;
    v20 = v31;
    outlined copy of Text.Storage(v14, v31, v30 & 1);
    v21 = v29;
    swift_bridgeObjectRetain();
    LOBYTE(v34[0]) = a6 & 1;
    Text.assertUnstyled(_:options:)();
    outlined consume of Text?(a8, a9, a10, a11);
    outlined consume of Text?(a3, a4, a6, a7);
    outlined consume of Text.Storage(v14, v31, v30 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of Text?(a8, a9, a10, a11);
    swift_bridgeObjectRelease();
    v21 = v29;
    v18 = v14;
    v20 = v31;
    v19 = v30;
  }
  v34[0] = KeyPath;
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v34);
  outlined init with take of TableCellFormula((uint64_t)v34, (uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v35[6];
  v23 = v35[8];
  *(_OWORD *)(a5 + 264) = v35[7];
  *(_OWORD *)(a5 + 280) = v23;
  *(_OWORD *)(a5 + 248) = v22;
  v24 = v35[3];
  *(_OWORD *)(a5 + 184) = v35[2];
  *(_OWORD *)(a5 + 200) = v24;
  v25 = v35[5];
  *(_OWORD *)(a5 + 216) = v35[4];
  *(_OWORD *)(a5 + 232) = v25;
  result = *(double *)v35;
  v27 = v35[1];
  *(_OWORD *)(a5 + 152) = v35[0];
  v37 = v19 & 1;
  *(_BYTE *)(a5 + 296) = v36;
  *(_OWORD *)(a5 + 168) = v27;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = a1;
  *(_QWORD *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = a3;
  *(_QWORD *)(a5 + 32) = a4;
  *(_QWORD *)(a5 + 40) = a6;
  *(_QWORD *)(a5 + 48) = a7;
  *(_QWORD *)(a5 + 56) = a8;
  *(_QWORD *)(a5 + 64) = a9;
  *(_QWORD *)(a5 + 72) = a10;
  *(_QWORD *)(a5 + 80) = a11;
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 96) = 0;
  *(_QWORD *)(a5 + 104) = v18;
  *(_QWORD *)(a5 + 112) = v20;
  *(_BYTE *)(a5 + 120) = v37;
  *(_QWORD *)(a5 + 136) = 0;
  *(_QWORD *)(a5 + 144) = 0;
  *(_QWORD *)(a5 + 128) = v21;
  *(_BYTE *)(a5 + 304) = 0;
  *(_QWORD *)(a5 + 312) = 0;
  return result;
}

uint64_t ShareLink<>.init<A>(_:item:subject:message:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t)@<X3>, void (*a5)(_QWORD, _QWORD, _QWORD)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t, double);
  char *v48;
  char *v49;
  _QWORD *v50;
  _QWORD *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_QWORD, _QWORD, _QWORD);
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(_QWORD, _QWORD, _QWORD);
  void (*v85)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v86)(_QWORD, _QWORD, _QWORD);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char *v95;
  void (**v96)(_QWORD *__return_ptr, char *);
  void (*v97)(char *, uint64_t);
  uint64_t v99;
  void (*v100)(_QWORD, _QWORD, _QWORD, _QWORD);
  void (*v101)(_QWORD, _QWORD, _QWORD);
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  _QWORD *v134;
  char *v135;
  void (*v136)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v137)(_QWORD, _QWORD, _QWORD);
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  _QWORD v142[4];
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  _QWORD v147[2];
  unsigned __int8 v148;
  uint64_t v149;
  _QWORD v150[19];
  _OWORD v151[9];
  char v152;

  v129 = a7;
  v130 = a8;
  v131 = a6;
  v136 = a4;
  v137 = a5;
  v113 = a3;
  v118 = a9;
  v128 = a11;
  v127 = a10;
  v134 = a13;
  type metadata accessor for CollectionOfOne<URL>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v15, v16);
  v133 = (uint64_t)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v135 = (char *)&v108 - v20;
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E0DEC610]);
  MEMORY[0x1E0C80A78](v21, v22);
  v132 = (char *)&v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v139 = (uint64_t)&v108 - v26;
  v27 = (int *)type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>();
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (uint64_t *)((char *)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
  MEMORY[0x1E0C80A78](v31, v32);
  v114 = (uint64_t)&v108 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v108 - v36;
  v38 = type metadata accessor for URL();
  MEMORY[0x1E0C80A78](v38, v39);
  v115 = (char *)&v108 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = MEMORY[0x1E0C80A78](v41, v42);
  v45 = (char *)&v108 - v44;
  v138 = v46;
  v47 = *(void (**)(char *, uint64_t, uint64_t, double))(v46 + 16);
  v119 = a2;
  v47((char *)&v108 - v44, (uint64_t)a2, v38, v43);
  v116 = v45;
  ((void (*)(char *, char *, uint64_t))v47)(v37, v45, v38);
  v120 = a12;
  v121 = a1;
  closure #1 in LabeledContent<>.init<A>(_:value:)(a1, (uint64_t)v147);
  v123 = v147[1];
  v122 = v148;
  v124 = v149;
  v125 = v147[0];
  *v30 = 0;
  v48 = (char *)v30 + v27[24];
  *(_OWORD *)v48 = 0u;
  *((_OWORD *)v48 + 1) = 0u;
  v49 = (char *)v30 + v27[25];
  *(_OWORD *)v49 = 0u;
  *((_OWORD *)v49 + 1) = 0u;
  v50 = (_QWORD *)((char *)v30 + v27[26]);
  v134 = v50;
  *v50 = 0;
  v50[1] = 0;
  v51 = (_QWORD *)((char *)v30 + v27[28]);
  *v51 = 0;
  v51[1] = 0;
  v52 = (char *)v30 + v27[29];
  v150[0] = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v150);
  outlined init with take of TableCellFormula((uint64_t)v150, (uint64_t)v151, (uint64_t (*)(_QWORD))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  v53 = v151[7];
  *((_OWORD *)v52 + 6) = v151[6];
  *((_OWORD *)v52 + 7) = v53;
  *((_OWORD *)v52 + 8) = v151[8];
  v52[144] = v152;
  v54 = v151[3];
  *((_OWORD *)v52 + 2) = v151[2];
  *((_OWORD *)v52 + 3) = v54;
  v55 = v151[5];
  *((_OWORD *)v52 + 4) = v151[4];
  *((_OWORD *)v52 + 5) = v55;
  v56 = v151[1];
  *(_OWORD *)v52 = v151[0];
  *((_OWORD *)v52 + 1) = v56;
  v57 = v27[30];
  v126 = v30;
  v58 = (char *)v30 + v57;
  *v58 = 0;
  *((_QWORD *)v58 + 1) = 0;
  v59 = (uint64_t)v30 + v27[23];
  v117 = v37;
  v111 = v27;
  v112 = v59;
  outlined init with copy of CollectionOfOne<URL>((uint64_t)v37, v59);
  v60 = *(_QWORD *)v48;
  v61 = *((_QWORD *)v48 + 2);
  v109 = *((_QWORD *)v48 + 1);
  v110 = v60;
  v62 = *((_QWORD *)v48 + 3);
  v63 = v113;
  v65 = v136;
  v64 = v137;
  v66 = v131;
  outlined copy of Text?(v113, (uint64_t)v136, (char)v137, v131);
  outlined consume of Text?(v110, v109, v61, v62);
  v67 = v63;
  *(_QWORD *)v48 = v63;
  *((_QWORD *)v48 + 1) = v65;
  *((_QWORD *)v48 + 2) = v64;
  *((_QWORD *)v48 + 3) = v66;
  v68 = *(_QWORD *)v49;
  v69 = *((_QWORD *)v49 + 2);
  v109 = *((_QWORD *)v49 + 1);
  v110 = v68;
  v70 = *((_QWORD *)v49 + 3);
  v71 = v129;
  v72 = v130;
  v74 = v127;
  v73 = v128;
  outlined copy of Text?(v129, v130, v127, v128);
  v75 = v69;
  v76 = v124;
  outlined consume of Text?(v110, v109, v75, v70);
  *(_QWORD *)v49 = v71;
  *((_QWORD *)v49 + 1) = v72;
  *((_QWORD *)v49 + 2) = v74;
  *((_QWORD *)v49 + 3) = v73;
  v77 = v134;
  v78 = v131;
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*v134, v134[1]);
  v79 = v122;
  v80 = v123;
  v81 = v125;
  v82 = (uint64_t)v126;
  *v77 = 0;
  v77[1] = 0;
  v83 = v82 + v111[27];
  *(_QWORD *)v83 = v81;
  *(_QWORD *)(v83 + 8) = v80;
  *(_BYTE *)(v83 + 16) = v79;
  *(_QWORD *)(v83 + 24) = v76;
  if (v78)
  {
    v142[0] = 0;
    outlined copy of Text.Storage(v81, v80, v79);
    swift_bridgeObjectRetain();
    v85 = v136;
    v84 = v137;
    LOBYTE(v141) = v137 & 1;
    Text.assertUnstyled(_:options:)();
    v86 = v84;
  }
  else
  {
    outlined copy of Text.Storage(v81, v80, v79);
    swift_bridgeObjectRetain();
    v85 = v136;
    v86 = v137;
  }
  v87 = v114;
  outlined init with copy of CollectionOfOne<URL>(v112, v114);
  v88 = v138;
  v89 = (uint64_t)v135;
  v137 = *(void (**)(_QWORD, _QWORD, _QWORD))(v138 + 32);
  v137(v135, v87, v38);
  v90 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56);
  v90(v89, 0, 1, v38);
  v91 = (uint64_t)v132;
  v90((uint64_t)v132, 1, 1, v38);
  outlined assign with take of URL?(v89, v91);
  v92 = v139;
  outlined init with take of CollectionOfOne<URL>.Iterator(v91, v139, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E0DEC610]);
  v93 = v133;
  outlined init with take of CollectionOfOne<URL>.Iterator(v92, v133, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v136 = v90;
  v90(v92, 1, 1, v38);
  v135 = *(char **)(v88 + 48);
  v94 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v135)(v93, 1, v38);
  v95 = v115;
  v96 = (void (**)(_QWORD *__return_ptr, char *))v134;
  if (v94 != 1)
  {
    v132 = (char *)0x8000000187BEBB30;
    do
    {
      v137(v95, v93, v38);
      if (*v96)
      {
        v100 = v85;
        v101 = v86;
        (*v96)(v142, v95);
        v102 = v95;
        v103 = v143;
        v104 = v144;
        v106 = v145;
        v105 = v146;
        outlined copy of Text?(v143, v144, v145, v146);
        outlined destroy of SharePreview<Never, Never>((uint64_t)v142);
        if (v105)
        {
          v107 = v106 & 1;
          v141 = 0;
          v140 = v107;
          Text.assertUnstyled(_:options:)();
          outlined consume of Text.Storage(v103, v104, v107);
          swift_bridgeObjectRelease();
        }
        (*(void (**)(char *, uint64_t))(v138 + 8))(v102, v38);
        v86 = v101;
        v85 = v100;
        v95 = v102;
        v93 = v133;
        v96 = (void (**)(_QWORD *__return_ptr, char *))v134;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v138 + 8))(v95, v38);
      }
      v99 = v139;
      outlined init with take of CollectionOfOne<URL>.Iterator(v139, v93, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v136(v99, 1, 1, v38);
    }
    while (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v135)(v93, 1, v38) != 1);
  }
  outlined destroy of CollectionOfOne<URL>.Iterator(v139, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E0DEC610]);
  outlined consume of Text?(v129, v130, v127, v128);
  outlined consume of Text?(v67, (uint64_t)v85, (char)v86, v131);
  outlined consume of Text.Storage(v125, v123, v122);
  swift_bridgeObjectRelease();
  outlined destroy of CollectionOfOne<URL>.Iterator((uint64_t)v117, &lazy cache variable for type metadata for CollectionOfOne<URL>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
  outlined init with take of TableCellFormula((uint64_t)v126, v118, (uint64_t (*)(_QWORD))type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>);
  v97 = *(void (**)(char *, uint64_t))(v138 + 8);
  v97(v116, v38);
  v97(v119, v38);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v120 - 8) + 8))(v121);
}

uint64_t ShareLink<>.init<A>(_:item:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v33;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[19];
  _OWORD v41[9];
  char v42;
  char v43;
  _QWORD v44[2];
  char v45;
  uint64_t v46;

  closure #1 in LabeledContent<>.init<A>(_:value:)(a1, (uint64_t)v44);
  v37 = v44[1];
  v38 = v44[0];
  v36 = v45;
  v33 = v46;
  KeyPath = swift_getKeyPath();
  v20 = a6;
  v21 = a5;
  v22 = a4;
  v23 = a7;
  swift_bridgeObjectRetain();
  outlined copy of Text?(v22, v21, v20, a7);
  outlined consume of Text?(0, 0, 0, 0);
  v39 = a8;
  outlined copy of Text?(a8, a10, a11, a12);
  outlined consume of Text?(0, 0, 0, 0);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(0, 0);
  if (a7)
  {
    *(_QWORD *)&v41[0] = 0;
    outlined copy of Text.Storage(v38, v37, v36);
    v24 = v33;
    swift_bridgeObjectRetain();
    LOBYTE(v40[0]) = v20 & 1;
    Text.assertUnstyled(_:options:)();
    outlined consume of Text?(a8, a10, a11, a12);
    outlined consume of Text?(v22, v21, v20, v23);
    outlined consume of Text.Storage(v38, v37, v36);
    v25 = a3;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of Text?(a8, a10, a11, a12);
    v25 = a3;
    swift_bridgeObjectRelease();
    v24 = v33;
  }
  v40[0] = KeyPath;
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v40);
  outlined init with take of TableCellFormula((uint64_t)v40, (uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  v26 = v41[6];
  v27 = v41[8];
  *(_OWORD *)(a9 + 264) = v41[7];
  *(_OWORD *)(a9 + 280) = v27;
  *(_OWORD *)(a9 + 248) = v26;
  v28 = v41[3];
  *(_OWORD *)(a9 + 184) = v41[2];
  *(_OWORD *)(a9 + 200) = v28;
  v29 = v41[5];
  *(_OWORD *)(a9 + 216) = v41[4];
  *(_OWORD *)(a9 + 232) = v29;
  v30 = v41[1];
  *(_OWORD *)(a9 + 152) = v41[0];
  v43 = v36;
  *(_BYTE *)(a9 + 296) = v42;
  *(_OWORD *)(a9 + 168) = v30;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a13 - 8) + 8))(a1);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = v25;
  *(_QWORD *)(a9 + 24) = v22;
  *(_QWORD *)(a9 + 32) = v21;
  *(_QWORD *)(a9 + 40) = v20;
  *(_QWORD *)(a9 + 48) = v23;
  *(_QWORD *)(a9 + 56) = v39;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  *(_QWORD *)(a9 + 80) = a12;
  *(_QWORD *)(a9 + 88) = 0;
  *(_QWORD *)(a9 + 96) = 0;
  *(_QWORD *)(a9 + 104) = v38;
  *(_QWORD *)(a9 + 112) = v37;
  *(_BYTE *)(a9 + 120) = v43;
  *(_QWORD *)(a9 + 136) = 0;
  *(_QWORD *)(a9 + 144) = 0;
  *(_QWORD *)(a9 + 128) = v24;
  *(_BYTE *)(a9 + 304) = 0;
  *(_QWORD *)(a9 + 312) = 0;
  return result;
}

uint64_t ShareLink<>.init<>(_:item:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t)@<X6>, void (*a8)(_QWORD, _QWORD, _QWORD)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, double);
  int *v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  _QWORD *v53;
  int *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v68)(_QWORD, _QWORD, _QWORD);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void (*v86)(_QWORD, _QWORD, _QWORD);
  void (*v87)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v88)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  char *v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v107)(_QWORD, _QWORD, _QWORD);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  _QWORD *v136;
  uint64_t v137;
  char *v138;
  void (*v139)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v140)(_QWORD, _QWORD, _QWORD);
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  _QWORD v145[4];
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  _QWORD v150[19];
  _OWORD v151[9];
  char v152;

  v139 = a7;
  v140 = a8;
  v118 = a6;
  v133 = a1;
  v134 = a4;
  v130 = a3;
  v131 = a2;
  v123 = a9;
  v129 = a14;
  v128 = a13;
  v127 = a12;
  v126 = a11;
  v132 = a10;
  type metadata accessor for CollectionOfOne<URL>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v16, v17);
  v137 = (uint64_t)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v138 = (char *)&v113 - v21;
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E0DEC610]);
  MEMORY[0x1E0C80A78](v22, v23);
  v135 = (char *)&v113 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v142 = (uint64_t)&v113 - v27;
  v28 = type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>();
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (uint64_t *)((char *)&v113 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
  MEMORY[0x1E0C80A78](v32, v33);
  v119 = (uint64_t)&v113 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v113 - v37;
  v39 = type metadata accessor for URL();
  MEMORY[0x1E0C80A78](v39, v40);
  v120 = (char *)&v113 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = MEMORY[0x1E0C80A78](v42, v43);
  v46 = (char *)&v113 - v45;
  v141 = v47;
  v48 = *(void (**)(char *, uint64_t, uint64_t, double))(v47 + 16);
  v124 = a5;
  v48((char *)&v113 - v45, (uint64_t)a5, v39, v44);
  v121 = v46;
  ((void (*)(char *, char *, uint64_t))v48)(v38, v46, v39);
  *v31 = 0;
  v49 = (int *)v28;
  v50 = (char *)v31 + *(int *)(v28 + 96);
  *(_OWORD *)v50 = 0u;
  *((_OWORD *)v50 + 1) = 0u;
  v51 = (char *)v31 + v49[25];
  *(_OWORD *)v51 = 0u;
  *((_OWORD *)v51 + 1) = 0u;
  v52 = (_QWORD *)((char *)v31 + v49[26]);
  v136 = v52;
  *v52 = 0;
  v52[1] = 0;
  v53 = (_QWORD *)((char *)v31 + v49[28]);
  *v53 = 0;
  v53[1] = 0;
  v54 = v49;
  v55 = (char *)v31 + v49[29];
  v150[0] = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v150);
  outlined init with take of TableCellFormula((uint64_t)v150, (uint64_t)v151, (uint64_t (*)(_QWORD))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  v56 = v151[7];
  *((_OWORD *)v55 + 6) = v151[6];
  *((_OWORD *)v55 + 7) = v56;
  *((_OWORD *)v55 + 8) = v151[8];
  v55[144] = v152;
  v57 = v151[3];
  *((_OWORD *)v55 + 2) = v151[2];
  *((_OWORD *)v55 + 3) = v57;
  v58 = v151[5];
  *((_OWORD *)v55 + 4) = v151[4];
  *((_OWORD *)v55 + 5) = v58;
  v59 = v151[1];
  *(_OWORD *)v55 = v151[0];
  *((_OWORD *)v55 + 1) = v59;
  v60 = v54[30];
  v125 = v31;
  v61 = (char *)v31 + v60;
  *v61 = 0;
  *((_QWORD *)v61 + 1) = 0;
  v62 = (uint64_t)v31 + v54[23];
  v122 = v38;
  v116 = v54;
  v117 = v62;
  outlined init with copy of CollectionOfOne<URL>((uint64_t)v38, v62);
  v64 = *(_QWORD *)v50;
  v63 = *((_QWORD *)v50 + 1);
  v65 = *((_QWORD *)v50 + 2);
  v113 = *((_QWORD *)v50 + 3);
  v114 = v63;
  swift_bridgeObjectRetain();
  v115 = v130 & 1;
  outlined copy of Text.Storage(v133, a2, v115);
  v66 = v118;
  v67 = v139;
  v68 = v140;
  v69 = v132;
  outlined copy of Text?(v118, (uint64_t)v139, (char)v140, v132);
  outlined consume of Text?(v64, v114, v65, v113);
  v70 = v66;
  *(_QWORD *)v50 = v66;
  *((_QWORD *)v50 + 1) = v67;
  *((_QWORD *)v50 + 2) = v68;
  *((_QWORD *)v50 + 3) = v69;
  v71 = *(_QWORD *)v51;
  v72 = *((_QWORD *)v51 + 2);
  v113 = *((_QWORD *)v51 + 1);
  v114 = v71;
  v73 = *((_QWORD *)v51 + 3);
  v75 = v126;
  v74 = v127;
  v76 = v128;
  v77 = v129;
  outlined copy of Text?(v126, v127, v128, v129);
  v78 = v73;
  v79 = v136;
  outlined consume of Text?(v114, v113, v72, v78);
  *(_QWORD *)v51 = v75;
  *((_QWORD *)v51 + 1) = v74;
  *((_QWORD *)v51 + 2) = v76;
  *((_QWORD *)v51 + 3) = v77;
  v80 = v132;
  v81 = v134;
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*v79, v79[1]);
  v82 = v115;
  v83 = v133;
  v84 = v131;
  *v79 = 0;
  v79[1] = 0;
  v85 = (char *)v125 + v116[27];
  *(_QWORD *)v85 = v83;
  *((_QWORD *)v85 + 1) = v84;
  v85[16] = v82;
  *((_QWORD *)v85 + 3) = v81;
  if (v80)
  {
    v145[0] = 0;
    outlined copy of Text.Storage(v83, v84, v82);
    swift_bridgeObjectRetain();
    v87 = v139;
    v86 = v140;
    LOBYTE(v144) = v140 & 1;
    Text.assertUnstyled(_:options:)();
    v88 = v87;
  }
  else
  {
    outlined copy of Text.Storage(v83, v84, v82);
    swift_bridgeObjectRetain();
    v88 = v139;
    v86 = v140;
  }
  v89 = v119;
  outlined init with copy of CollectionOfOne<URL>(v117, v119);
  v90 = v141;
  v91 = (uint64_t)v138;
  v140 = *(void (**)(_QWORD, _QWORD, _QWORD))(v141 + 32);
  v140(v138, v89, v39);
  v92 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56);
  v92(v91, 0, 1, v39);
  v93 = (uint64_t)v135;
  v92((uint64_t)v135, 1, 1, v39);
  outlined assign with take of URL?(v91, v93);
  v94 = v93;
  v95 = v142;
  outlined init with take of CollectionOfOne<URL>.Iterator(v94, v142, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E0DEC610]);
  v96 = v137;
  outlined init with take of CollectionOfOne<URL>.Iterator(v95, v137, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v139 = v92;
  v92(v95, 1, 1, v39);
  v138 = *(char **)(v90 + 48);
  v97 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v138)(v96, 1, v39);
  v98 = v120;
  if (v97 != 1)
  {
    v135 = (char *)0x8000000187BEBB30;
    do
    {
      v140(v98, v96, v39);
      if (*v79)
      {
        v105 = v70;
        v106 = v88;
        v107 = v86;
        ((void (*)(_QWORD *__return_ptr, char *))*v79)(v145, v98);
        v109 = v146;
        v108 = v147;
        v111 = v148;
        v110 = v149;
        outlined copy of Text?(v146, v147, v148, v149);
        outlined destroy of SharePreview<Never, Never>((uint64_t)v145);
        if (v110)
        {
          v112 = v111 & 1;
          v144 = 0;
          v143 = v112;
          Text.assertUnstyled(_:options:)();
          outlined consume of Text.Storage(v109, v108, v112);
          swift_bridgeObjectRelease();
        }
        (*(void (**)(char *, uint64_t))(v141 + 8))(v98, v39);
        v86 = v107;
        v88 = v106;
        v70 = v105;
        v79 = v136;
        v96 = v137;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v141 + 8))(v98, v39);
      }
      v104 = v142;
      outlined init with take of CollectionOfOne<URL>.Iterator(v142, v96, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v139(v104, 1, 1, v39);
    }
    while (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v138)(v96, 1, v39) != 1);
  }
  outlined destroy of CollectionOfOne<URL>.Iterator(v142, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E0DEC610]);
  outlined consume of Text?(v126, v127, v128, v129);
  outlined consume of Text?(v70, (uint64_t)v88, (char)v86, v132);
  v99 = v130 & 1;
  v100 = v133;
  v101 = v131;
  outlined consume of Text.Storage(v133, v131, v130 & 1);
  swift_bridgeObjectRelease();
  outlined destroy of CollectionOfOne<URL>.Iterator((uint64_t)v122, &lazy cache variable for type metadata for CollectionOfOne<URL>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
  outlined init with take of TableCellFormula((uint64_t)v125, v123, (uint64_t (*)(_QWORD))type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>);
  v102 = *(void (**)(char *, uint64_t))(v141 + 8);
  v102(v121, v39);
  v102(v124, v39);
  outlined consume of Text.Storage(v100, v101, v99);
  return swift_bridgeObjectRelease();
}

double ShareLink<>.init<>(_:item:subject:message:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  double result;
  __int128 v30;
  char v31;
  uint64_t KeyPath;
  uint64_t v36;
  _QWORD v37[19];
  _OWORD v38[9];
  char v39;
  char v40;

  KeyPath = swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31 = a3 & 1;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  v36 = a8;
  outlined copy of Text?(a7, a8, a10, a11);
  outlined consume of Text?(0, 0, 0, 0);
  outlined copy of Text?(a12, a13, a14, a15);
  outlined consume of Text?(0, 0, 0, 0);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(0, 0);
  if (a11)
  {
    *(_QWORD *)&v38[0] = 0;
    outlined copy of Text.Storage(a1, a2, v31);
    v21 = a4;
    swift_bridgeObjectRetain();
    LOBYTE(v37[0]) = a10 & 1;
    Text.assertUnstyled(_:options:)();
    v22 = a14;
    outlined consume of Text?(a12, a13, a14, a15);
    outlined consume of Text?(a7, a8, a10, a11);
    outlined consume of Text.Storage(a1, a2, v31);
    v23 = a6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = a7;
  }
  else
  {
    v22 = a14;
    outlined consume of Text?(a12, a13, a14, a15);
    v23 = a6;
    swift_bridgeObjectRelease();
    v24 = a7;
    v21 = a4;
  }
  v37[0] = KeyPath;
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v37);
  outlined init with take of TableCellFormula((uint64_t)v37, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  v25 = v38[6];
  v26 = v38[8];
  *(_OWORD *)(a9 + 264) = v38[7];
  *(_OWORD *)(a9 + 280) = v26;
  *(_OWORD *)(a9 + 248) = v25;
  v27 = v38[3];
  *(_OWORD *)(a9 + 184) = v38[2];
  *(_OWORD *)(a9 + 200) = v27;
  v28 = v38[5];
  *(_OWORD *)(a9 + 216) = v38[4];
  *(_OWORD *)(a9 + 232) = v28;
  result = *(double *)v38;
  v30 = v38[1];
  *(_OWORD *)(a9 + 152) = v38[0];
  v40 = a3 & 1;
  *(_BYTE *)(a9 + 296) = v39;
  *(_OWORD *)(a9 + 168) = v30;
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = a5;
  *(_QWORD *)(a9 + 16) = v23;
  *(_QWORD *)(a9 + 24) = v24;
  *(_QWORD *)(a9 + 32) = v36;
  *(_QWORD *)(a9 + 40) = a10;
  *(_QWORD *)(a9 + 48) = a11;
  *(_QWORD *)(a9 + 56) = a12;
  *(_QWORD *)(a9 + 64) = a13;
  *(_QWORD *)(a9 + 72) = v22;
  *(_QWORD *)(a9 + 80) = a15;
  *(_QWORD *)(a9 + 88) = 0;
  *(_QWORD *)(a9 + 96) = 0;
  *(_QWORD *)(a9 + 104) = a1;
  *(_QWORD *)(a9 + 112) = a2;
  *(_BYTE *)(a9 + 120) = v40;
  *(_QWORD *)(a9 + 136) = 0;
  *(_QWORD *)(a9 + 144) = 0;
  *(_QWORD *)(a9 + 128) = v21;
  *(_BYTE *)(a9 + 304) = 0;
  *(_QWORD *)(a9 + 312) = 0;
  return result;
}

uint64_t ShareLink<>.init<>(item:subject:message:onPresentationChanged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD, _QWORD, _QWORD)@<X2>, void (*a4)(_QWORD, _QWORD, _QWORD)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD, _QWORD, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v33 = a7;
  v34 = a8;
  v31 = a5;
  v32 = a6;
  v30 = a4;
  v35 = a11;
  v36 = a12;
  v16 = type metadata accessor for URL();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>();
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, a1, v16, v23);
  ShareLink<>.init<>(item:subject:message:)((uint64_t)v20, a2, a3, v30, v31, v32, v33, v34, (uint64_t)v25, a10);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, v16);
  outlined init with take of TableCellFormula((uint64_t)v25, a9, (uint64_t (*)(_QWORD))type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>);
  v26 = (_QWORD *)(a9 + *(int *)(v21 + 112));
  result = outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*v26, v26[1]);
  v28 = v36;
  *v26 = v35;
  v26[1] = v28;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ShareLink<A, B, C, D>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DefaultShareLinkLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata instantiation function for ShareLink()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for ShareLink()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ShareLink(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = (v7 | v5) <= 7 && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0;
  if (v8
    && (v9 = *(_QWORD *)(v4 + 64) + 7,
        v10 = v7 + 16,
        v11 = *(_QWORD *)(v6 + 64) + 7,
        ((((v11
          + ((v7
            + 16
            + ((((((v9 + ((v5 + 8) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
        + 175) & 0xFFFFFFFFFFFFFFF8)
      + 16 <= 0x18))
  {
    v61 = *(_QWORD *)(a3 + 40);
    *a1 = *a2;
    v12 = ((unint64_t)a1 + v5 + 8) & ~v5;
    v13 = ((unint64_t)a2 + v5 + 8) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v12, v13);
    v14 = (v9 + v12) & 0xFFFFFFFFFFFFFFF8;
    v15 = (v9 + v13) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v15 + 24) < 0xFFFFFFFFuLL)
    {
      v21 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *(_OWORD *)(v14 + 16) = v21;
    }
    else
    {
      v16 = *(_QWORD *)v15;
      v17 = *(_QWORD *)(v15 + 8);
      v18 = *(_BYTE *)(v15 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v15, v17, v18);
      *(_QWORD *)v14 = v16;
      *(_QWORD *)(v14 + 8) = v17;
      *(_BYTE *)(v14 + 16) = v18;
      *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
      swift_bridgeObjectRetain();
    }
    v22 = (v14 + 39) & 0xFFFFFFFFFFFFFFF8;
    v23 = (v15 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v23 + 24) < 0xFFFFFFFFuLL)
    {
      v27 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *(_OWORD *)(v22 + 16) = v27;
    }
    else
    {
      v24 = *(_QWORD *)v23;
      v25 = *(_QWORD *)(v23 + 8);
      v26 = *(_BYTE *)(v23 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v23, v25, v26);
      *(_QWORD *)v22 = v24;
      *(_QWORD *)(v22 + 8) = v25;
      *(_BYTE *)(v22 + 16) = v26;
      *(_QWORD *)(v22 + 24) = *(_QWORD *)(v23 + 24);
      swift_bridgeObjectRetain();
    }
    v28 = ~v7;
    v29 = (v22 + 39) & 0xFFFFFFFFFFFFFFF8;
    v30 = (v23 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v30 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v29 = *(_OWORD *)v30;
    }
    else
    {
      v31 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *(_QWORD *)(v29 + 8) = v31;
      swift_retain();
    }
    v32 = (v10 + v30) & v28;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))((v10 + v29) & v28, v32, v61);
    v33 = (v11 + ((v10 + v29) & v28)) & 0xFFFFFFFFFFFFFFF8;
    v34 = (v11 + v32) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v34 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v33 = *(_OWORD *)v34;
    }
    else
    {
      v35 = *(_QWORD *)(v34 + 8);
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_QWORD *)(v33 + 8) = v35;
      swift_retain();
    }
    v36 = (v34 + 23) & 0xFFFFFFFFFFFFFFF8;
    v60 = v33;
    v62 = (v11 + v32) & 0xFFFFFFFFFFFFFFF8;
    v37 = *(_QWORD *)v36;
    v38 = *(_QWORD *)(v36 + 8);
    v39 = (v33 + 23) & 0xFFFFFFFFFFFFFFF8;
    v40 = *(_QWORD *)(v36 + 16);
    v41 = *(_QWORD *)(v36 + 24);
    v42 = *(_QWORD *)(v36 + 32);
    v43 = *(_QWORD *)(v36 + 40);
    v44 = *(_QWORD *)(v36 + 48);
    v45 = *(_QWORD *)(v36 + 56);
    v46 = *(_QWORD *)(v36 + 64);
    v50 = *(_QWORD *)(v36 + 72);
    v51 = *(_QWORD *)(v36 + 80);
    v52 = *(_QWORD *)(v36 + 88);
    v53 = *(_QWORD *)(v36 + 96);
    v54 = *(_QWORD *)(v36 + 104);
    v55 = *(_QWORD *)(v36 + 112);
    v56 = *(_QWORD *)(v36 + 120);
    v57 = *(_QWORD *)(v36 + 128);
    v58 = *(_QWORD *)(v36 + 136);
    v59 = *(_BYTE *)(v36 + 144);
    outlined copy of Environment<PresentSharingPickerAction?>.Content(*(_QWORD *)v36, v38, v40, v41, v42, v43, v44, v45, v46, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59);
    *(_QWORD *)v39 = v37;
    *(_QWORD *)(v39 + 8) = v38;
    *(_QWORD *)(v39 + 16) = v40;
    *(_QWORD *)(v39 + 24) = v41;
    *(_QWORD *)(v39 + 32) = v42;
    *(_QWORD *)(v39 + 40) = v43;
    *(_QWORD *)(v39 + 48) = v44;
    *(_QWORD *)(v39 + 56) = v45;
    *(_QWORD *)(v39 + 64) = v46;
    *(_QWORD *)(v39 + 72) = v50;
    *(_QWORD *)(v39 + 80) = v51;
    *(_QWORD *)(v39 + 88) = v52;
    *(_QWORD *)(v39 + 96) = v53;
    *(_QWORD *)(v39 + 104) = v54;
    *(_QWORD *)(v39 + 112) = v55;
    *(_QWORD *)(v39 + 120) = v56;
    *(_QWORD *)(v39 + 128) = v57;
    *(_QWORD *)(v39 + 136) = v58;
    *(_BYTE *)(v39 + 144) = v59;
    v47 = (v60 + 175) & 0xFFFFFFFFFFFFFFF8;
    v48 = (v62 + 175) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v47 = *(_BYTE *)v48;
    *(_QWORD *)(v47 + 8) = *(_QWORD *)(v48 + 8);
    v20 = a1;
  }
  else
  {
    v19 = *a2;
    *a1 = *a2;
    v20 = (_QWORD *)(v19 + (((v7 | v5) & 0xF8 ^ 0x1F8) & ((v7 | v5) + 16)));
  }
  swift_retain();
  return v20;
}

uint64_t destroy for ShareLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v4);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v5 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));
    swift_bridgeObjectRelease();
  }
  v6 = (v5 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v6 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
    swift_bridgeObjectRelease();
  }
  v7 = (_QWORD *)((v6 + 39) & 0xFFFFFFFFFFFFFFF8);
  if (*v7 >= 0xFFFFFFFFuLL)
    swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 40) - 8);
  v9 = ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t))(v8 + 8))(v9);
  v10 = (_QWORD *)((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v10 >= 0xFFFFFFFFuLL)
    swift_release();
  v11 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<PresentSharingPickerAction?>.Content(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), *(_QWORD *)(v11 + 32), *(_QWORD *)(v11 + 40), *(_QWORD *)(v11 + 48), *(_QWORD *)(v11 + 56), *(_QWORD *)(v11 + 64), *(_QWORD *)(v11 + 72), *(_QWORD *)(v11 + 80), *(_QWORD *)(v11 + 88), *(_QWORD *)(v11 + 96), *(_QWORD *)(v11 + 104), *(_QWORD *)(v11 + 112), *(_QWORD *)(v11 + 120), *(_QWORD *)(v11 + 128), *(_QWORD *)(v11 + 136), *(_BYTE *)(v11 + 144));
  return swift_release();
}

_QWORD *initializeWithCopy for ShareLink(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v10 + 24) < 0xFFFFFFFFuLL)
  {
    v14 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v14;
  }
  else
  {
    v11 = *(_QWORD *)v10;
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(_BYTE *)(v10 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v10, v12, v13);
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = v12;
    *(_BYTE *)(v9 + 16) = v13;
    *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
    swift_bridgeObjectRetain();
  }
  v15 = (v9 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v16 + 24) < 0xFFFFFFFFuLL)
  {
    v20 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v20;
  }
  else
  {
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_BYTE *)(v16 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v16, v18, v19);
    *(_QWORD *)v15 = v17;
    *(_QWORD *)(v15 + 8) = v18;
    *(_BYTE *)(v15 + 16) = v19;
    *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
    swift_bridgeObjectRetain();
  }
  v21 = (v15 + 39) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v22 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
  }
  else
  {
    v23 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *(_QWORD *)(v21 + 8) = v23;
    swift_retain();
  }
  v24 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (v21 + v25 + 16) & ~v25;
  v27 = (v22 + v25 + 16) & ~v25;
  (*(void (**)(uint64_t, uint64_t))(v24 + 16))(v26, v27);
  v28 = *(_QWORD *)(v24 + 64) + 7;
  v29 = (v28 + v26) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v28 + v27) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v30 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v29 = *(_OWORD *)v30;
  }
  else
  {
    v31 = *(_QWORD *)(v30 + 8);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *(_QWORD *)(v29 + 8) = v31;
    swift_retain();
  }
  v32 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
  v56 = v29;
  v57 = v30;
  v33 = *(_QWORD *)v32;
  v34 = *(_QWORD *)(v32 + 8);
  v35 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
  v36 = *(_QWORD *)(v32 + 16);
  v37 = *(_QWORD *)(v32 + 24);
  v38 = *(_QWORD *)(v32 + 32);
  v39 = *(_QWORD *)(v32 + 40);
  v40 = *(_QWORD *)(v32 + 48);
  v41 = *(_QWORD *)(v32 + 56);
  v42 = *(_QWORD *)(v32 + 64);
  v46 = *(_QWORD *)(v32 + 72);
  v47 = *(_QWORD *)(v32 + 80);
  v48 = *(_QWORD *)(v32 + 88);
  v49 = *(_QWORD *)(v32 + 96);
  v50 = *(_QWORD *)(v32 + 104);
  v51 = *(_QWORD *)(v32 + 112);
  v52 = *(_QWORD *)(v32 + 120);
  v53 = *(_QWORD *)(v32 + 128);
  v54 = *(_QWORD *)(v32 + 136);
  v55 = *(_BYTE *)(v32 + 144);
  outlined copy of Environment<PresentSharingPickerAction?>.Content(*(_QWORD *)v32, v34, v36, v37, v38, v39, v40, v41, v42, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55);
  *(_QWORD *)v35 = v33;
  *(_QWORD *)(v35 + 8) = v34;
  *(_QWORD *)(v35 + 16) = v36;
  *(_QWORD *)(v35 + 24) = v37;
  *(_QWORD *)(v35 + 32) = v38;
  *(_QWORD *)(v35 + 40) = v39;
  *(_QWORD *)(v35 + 48) = v40;
  *(_QWORD *)(v35 + 56) = v41;
  *(_QWORD *)(v35 + 64) = v42;
  *(_QWORD *)(v35 + 72) = v46;
  *(_QWORD *)(v35 + 80) = v47;
  *(_QWORD *)(v35 + 88) = v48;
  *(_QWORD *)(v35 + 96) = v49;
  *(_QWORD *)(v35 + 104) = v50;
  *(_QWORD *)(v35 + 112) = v51;
  *(_QWORD *)(v35 + 120) = v52;
  *(_QWORD *)(v35 + 128) = v53;
  *(_QWORD *)(v35 + 136) = v54;
  *(_BYTE *)(v35 + 144) = v55;
  v43 = (v56 + 175) & 0xFFFFFFFFFFFFFFF8;
  v44 = (v57 + 175) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v43 = *(_BYTE *)v44;
  *(_QWORD *)(v43 + 8) = *(_QWORD *)(v44 + 8);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ShareLink(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  _QWORD *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  _QWORD *v89;
  unint64_t *v90;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v10 + 24);
  if (*(_QWORD *)(v9 + 24) < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v18 = *(_QWORD *)v10;
      v19 = *(_QWORD *)(v10 + 8);
      v20 = *(_BYTE *)(v10 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v10, v19, v20);
      *(_QWORD *)v9 = v18;
      *(_QWORD *)(v9 + 8) = v19;
      *(_BYTE *)(v9 + 16) = v20;
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v12 = *(_QWORD *)v10;
      v13 = *(_QWORD *)(v10 + 8);
      v14 = *(_BYTE *)(v10 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v10, v13, v14);
      v15 = *(_QWORD *)v9;
      v16 = *(_QWORD *)(v9 + 8);
      v17 = *(_BYTE *)(v9 + 16);
      *(_QWORD *)v9 = v12;
      *(_QWORD *)(v9 + 8) = v13;
      *(_BYTE *)(v9 + 16) = v14;
      outlined consume of Text.Storage(v15, v16, v17);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v21 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v21;
LABEL_8:
  v22 = (v9 + 39) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)(v23 + 24);
  if (*(_QWORD *)(v22 + 24) < 0xFFFFFFFFuLL)
  {
    if (v24 >= 0xFFFFFFFF)
    {
      v31 = *(_QWORD *)v23;
      v32 = *(_QWORD *)(v23 + 8);
      v33 = *(_BYTE *)(v23 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v23, v32, v33);
      *(_QWORD *)v22 = v31;
      *(_QWORD *)(v22 + 8) = v32;
      *(_BYTE *)(v22 + 16) = v33;
      *(_QWORD *)(v22 + 24) = *(_QWORD *)(v23 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v24 >= 0xFFFFFFFF)
    {
      v25 = *(_QWORD *)v23;
      v26 = *(_QWORD *)(v23 + 8);
      v27 = *(_BYTE *)(v23 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v23, v26, v27);
      v28 = *(_QWORD *)v22;
      v29 = *(_QWORD *)(v22 + 8);
      v30 = *(_BYTE *)(v22 + 16);
      *(_QWORD *)v22 = v25;
      *(_QWORD *)(v22 + 8) = v26;
      *(_BYTE *)(v22 + 16) = v27;
      outlined consume of Text.Storage(v28, v29, v30);
      *(_QWORD *)(v22 + 24) = *(_QWORD *)(v23 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    outlined consume of Text.Storage(*(_QWORD *)v22, *(_QWORD *)(v22 + 8), *(_BYTE *)(v22 + 16));
    swift_bridgeObjectRelease();
  }
  v34 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v34;
LABEL_15:
  v35 = (_QWORD *)((v22 + 39) & 0xFFFFFFFFFFFFFFF8);
  v36 = (unint64_t *)((v23 + 39) & 0xFFFFFFFFFFFFFFF8);
  v37 = *v36;
  if (*v35 < 0xFFFFFFFFuLL)
  {
    if (v37 >= 0xFFFFFFFF)
    {
      v39 = v36[1];
      *v35 = v37;
      v35[1] = v39;
      swift_retain();
      goto LABEL_22;
    }
  }
  else
  {
    if (v37 >= 0xFFFFFFFF)
    {
      v38 = v36[1];
      *v35 = v37;
      v35[1] = v38;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  *(_OWORD *)v35 = *(_OWORD *)v36;
LABEL_22:
  v40 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  v41 = *(unsigned __int8 *)(v40 + 80);
  v42 = ((unint64_t)v35 + v41 + 16) & ~v41;
  v43 = ((unint64_t)v36 + v41 + 16) & ~v41;
  (*(void (**)(uint64_t, uint64_t))(v40 + 24))(v42, v43);
  v44 = *(_QWORD *)(v40 + 64) + 7;
  v45 = (_QWORD *)((v44 + v42) & 0xFFFFFFFFFFFFFFF8);
  v46 = (unint64_t *)((v44 + v43) & 0xFFFFFFFFFFFFFFF8);
  v47 = *v46;
  if (*v45 < 0xFFFFFFFFuLL)
  {
    if (v47 >= 0xFFFFFFFF)
    {
      v49 = v46[1];
      *v45 = v47;
      v45[1] = v49;
      swift_retain();
      goto LABEL_29;
    }
LABEL_28:
    *(_OWORD *)v45 = *(_OWORD *)v46;
    goto LABEL_29;
  }
  if (v47 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_28;
  }
  v48 = v46[1];
  *v45 = v47;
  v45[1] = v48;
  swift_retain();
  swift_release();
LABEL_29:
  v50 = ((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF8;
  v89 = v45;
  v90 = v46;
  v51 = *(_QWORD *)v50;
  v52 = *(_QWORD *)(v50 + 8);
  v53 = ((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF8;
  v54 = *(_QWORD *)(v50 + 16);
  v55 = *(_QWORD *)(v50 + 24);
  v56 = *(_QWORD *)(v50 + 32);
  v57 = *(_QWORD *)(v50 + 40);
  v58 = *(_QWORD *)(v50 + 48);
  v59 = *(_QWORD *)(v50 + 56);
  v60 = *(_QWORD *)(v50 + 64);
  v79 = *(_QWORD *)(v50 + 72);
  v80 = *(_QWORD *)(v50 + 80);
  v81 = *(_QWORD *)(v50 + 88);
  v82 = *(_QWORD *)(v50 + 96);
  v83 = *(_QWORD *)(v50 + 104);
  v84 = *(_QWORD *)(v50 + 112);
  v85 = *(_QWORD *)(v50 + 120);
  v86 = *(_QWORD *)(v50 + 128);
  v87 = *(_QWORD *)(v50 + 136);
  v88 = *(_BYTE *)(v50 + 144);
  outlined copy of Environment<PresentSharingPickerAction?>.Content(*(_QWORD *)v50, v52, v54, v55, v56, v57, v58, v59, v60, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88);
  v61 = *(_QWORD *)v53;
  v62 = *(_QWORD *)(v53 + 8);
  v63 = *(_QWORD *)(v53 + 16);
  v64 = *(_QWORD *)(v53 + 24);
  v65 = *(_QWORD *)(v53 + 32);
  v66 = *(_QWORD *)(v53 + 40);
  v67 = *(_QWORD *)(v53 + 48);
  v68 = *(_QWORD *)(v53 + 56);
  v69 = *(_OWORD *)(v53 + 64);
  v70 = *(_OWORD *)(v53 + 80);
  v71 = *(_OWORD *)(v53 + 96);
  v72 = *(_OWORD *)(v53 + 112);
  v73 = *(_QWORD *)(v53 + 128);
  v74 = *(_QWORD *)(v53 + 136);
  v75 = *(_BYTE *)(v53 + 144);
  *(_QWORD *)v53 = v51;
  *(_QWORD *)(v53 + 8) = v52;
  *(_QWORD *)(v53 + 16) = v54;
  *(_QWORD *)(v53 + 24) = v55;
  *(_QWORD *)(v53 + 32) = v56;
  *(_QWORD *)(v53 + 40) = v57;
  *(_QWORD *)(v53 + 48) = v58;
  *(_QWORD *)(v53 + 56) = v59;
  *(_QWORD *)(v53 + 64) = v60;
  *(_QWORD *)(v53 + 72) = v79;
  *(_QWORD *)(v53 + 80) = v80;
  *(_QWORD *)(v53 + 88) = v81;
  *(_QWORD *)(v53 + 96) = v82;
  *(_QWORD *)(v53 + 104) = v83;
  *(_QWORD *)(v53 + 112) = v84;
  *(_QWORD *)(v53 + 120) = v85;
  *(_QWORD *)(v53 + 128) = v86;
  *(_QWORD *)(v53 + 136) = v87;
  *(_BYTE *)(v53 + 144) = v88;
  outlined consume of Environment<PresentSharingPickerAction?>.Content(v61, v62, v63, v64, v65, v66, v67, v68, v69, *((uint64_t *)&v69 + 1), v70, *((uint64_t *)&v70 + 1), v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), v73, v74, v75);
  v76 = ((unint64_t)v89 + 175) & 0xFFFFFFFFFFFFFFF8;
  v77 = ((unint64_t)v90 + 175) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v76 = *(_BYTE *)v77;
  *(_QWORD *)(v76 + 8) = *(_QWORD *)(v77 + 8);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for ShareLink(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64) + 7;
  v10 = (_OWORD *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_OWORD *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (_OWORD *)(((unint64_t)v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_OWORD *)(((unint64_t)v11 + 39) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = ((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v17 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  else
  {
    v18 = *(_QWORD *)(v17 + 8);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *(_QWORD *)(v16 + 8) = v18;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v16 + v20 + 16) & ~v20;
  v22 = (v17 + v20 + 16) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v21, v22);
  v23 = *(_QWORD *)(v19 + 64) + 7;
  v24 = (v23 + v21) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v23 + v22) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v25 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
  }
  else
  {
    v26 = *(_QWORD *)(v25 + 8);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *(_QWORD *)(v24 + 8) = v26;
  }
  v27 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  v29 = *(_OWORD *)(v28 + 16);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *(_OWORD *)(v27 + 16) = v29;
  v30 = *(_OWORD *)(v28 + 32);
  v31 = *(_OWORD *)(v28 + 48);
  v32 = *(_OWORD *)(v28 + 80);
  *(_OWORD *)(v27 + 64) = *(_OWORD *)(v28 + 64);
  *(_OWORD *)(v27 + 80) = v32;
  *(_OWORD *)(v27 + 32) = v30;
  *(_OWORD *)(v27 + 48) = v31;
  v33 = *(_OWORD *)(v28 + 96);
  v34 = *(_OWORD *)(v28 + 112);
  v35 = *(_OWORD *)(v28 + 128);
  *(_BYTE *)(v27 + 144) = *(_BYTE *)(v28 + 144);
  *(_OWORD *)(v27 + 112) = v34;
  *(_OWORD *)(v27 + 128) = v35;
  *(_OWORD *)(v27 + 96) = v33;
  *(_OWORD *)((v24 + 175) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v25 + 175) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for ShareLink(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64) + 7;
  v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v10 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v11 + 24) >= 0xFFFFFFFFuLL)
    {
      v12 = *(_BYTE *)(v11 + 16);
      v13 = *(_QWORD *)v10;
      v14 = *(_QWORD *)(v10 + 8);
      v15 = *(_BYTE *)(v10 + 16);
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *(_BYTE *)(v10 + 16) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  v16 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v16;
LABEL_6:
  v17 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v17 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v18 + 24) >= 0xFFFFFFFFuLL)
    {
      v19 = *(_BYTE *)(v18 + 16);
      v20 = *(_QWORD *)v17;
      v21 = *(_QWORD *)(v17 + 8);
      v22 = *(_BYTE *)(v17 + 16);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_BYTE *)(v17 + 16) = v19;
      outlined consume of Text.Storage(v20, v21, v22);
      *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined consume of Text.Storage(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_BYTE *)(v17 + 16));
    swift_bridgeObjectRelease();
  }
  v23 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v23;
LABEL_11:
  v24 = (_QWORD *)((v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  v25 = (unint64_t *)((v18 + 39) & 0xFFFFFFFFFFFFFFF8);
  v26 = *v25;
  if (*v24 < 0xFFFFFFFFuLL)
  {
    if (v26 >= 0xFFFFFFFF)
    {
      v28 = v25[1];
      *v24 = v26;
      v24[1] = v28;
      goto LABEL_18;
    }
  }
  else
  {
    if (v26 >= 0xFFFFFFFF)
    {
      v27 = v25[1];
      *v24 = v26;
      v24[1] = v27;
      swift_release();
      goto LABEL_18;
    }
    swift_release();
  }
  *(_OWORD *)v24 = *(_OWORD *)v25;
LABEL_18:
  v29 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = ((unint64_t)v24 + v30 + 16) & ~v30;
  v32 = ((unint64_t)v25 + v30 + 16) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v29 + 40))(v31, v32);
  v33 = *(_QWORD *)(v29 + 64) + 7;
  v34 = (_QWORD *)((v33 + v31) & 0xFFFFFFFFFFFFFFF8);
  v35 = (unint64_t *)((v33 + v32) & 0xFFFFFFFFFFFFFFF8);
  v36 = *v35;
  if (*v34 < 0xFFFFFFFFuLL)
  {
    if (v36 >= 0xFFFFFFFF)
    {
      v38 = v35[1];
      *v34 = v36;
      v34[1] = v38;
      goto LABEL_25;
    }
LABEL_24:
    *(_OWORD *)v34 = *(_OWORD *)v35;
    goto LABEL_25;
  }
  if (v36 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_24;
  }
  v37 = v35[1];
  *v34 = v36;
  v34[1] = v37;
  swift_release();
LABEL_25:
  v39 = ((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8;
  v40 = *(_BYTE *)(v39 + 144);
  v41 = ((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8;
  v42 = *(_QWORD *)v41;
  v43 = *(_QWORD *)(v41 + 8);
  v44 = *(_QWORD *)(v41 + 16);
  v45 = *(_QWORD *)(v41 + 24);
  v46 = *(_QWORD *)(v41 + 32);
  v47 = *(_QWORD *)(v41 + 40);
  v48 = *(_QWORD *)(v41 + 48);
  v49 = *(_QWORD *)(v41 + 56);
  v50 = *(_OWORD *)(v41 + 64);
  v51 = *(_OWORD *)(v41 + 80);
  v52 = *(_OWORD *)(v41 + 96);
  v53 = *(_OWORD *)(v41 + 112);
  v54 = *(_QWORD *)(v41 + 128);
  v55 = *(_QWORD *)(v41 + 136);
  v56 = *(_BYTE *)(v41 + 144);
  v57 = *(_OWORD *)(v39 + 16);
  v58 = *(_OWORD *)(v39 + 32);
  v59 = *(_OWORD *)(v39 + 48);
  v60 = *(_OWORD *)(v39 + 64);
  v61 = *(_OWORD *)(v39 + 80);
  v62 = *(_OWORD *)(v39 + 96);
  v63 = *(_OWORD *)(v39 + 112);
  v64 = *(_OWORD *)(v39 + 128);
  *(_OWORD *)v41 = *(_OWORD *)v39;
  *(_OWORD *)(v41 + 16) = v57;
  *(_OWORD *)(v41 + 32) = v58;
  *(_OWORD *)(v41 + 48) = v59;
  *(_OWORD *)(v41 + 64) = v60;
  *(_OWORD *)(v41 + 80) = v61;
  *(_OWORD *)(v41 + 96) = v62;
  *(_OWORD *)(v41 + 112) = v63;
  *(_OWORD *)(v41 + 128) = v64;
  *(_BYTE *)(v41 + 144) = v40;
  outlined consume of Environment<PresentSharingPickerAction?>.Content(v42, v43, v44, v45, v46, v47, v48, v49, v50, *((uint64_t *)&v50 + 1), v51, *((uint64_t *)&v51 + 1), v52, *((uint64_t *)&v52 + 1), v53, *((uint64_t *)&v53 + 1), v54, v55, v56);
  v65 = ((unint64_t)v34 + 175) & 0xFFFFFFFFFFFFFFF8;
  v66 = ((unint64_t)v35 + 175) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v65 = *(_BYTE *)v66;
  *(_QWORD *)(v65 + 8) = *(_QWORD *)(v66 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareLink(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 64) + 7;
  if (v7 < a2)
  {
    if (((((((*(_QWORD *)(v5 + 64)
             + ((*(unsigned __int8 *)(v5 + 80)
               + 16
               + ((((((v9 + ((v8 + 8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
             + 7) & 0xFFFFFFFFFFFFFFF8)
           + 175) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X7 }
  }
  v14 = (a1 + v8 + 8) & ~v8;
  if (v4 == v7)
    __asm { BR              X3 }
  if (v6 > 0x7FFFFFFE)
    __asm { BR              X3 }
  v15 = *(_QWORD *)(((v9 + v14) & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v15 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  if ((v15 + 1) >= 2)
    return v15;
  else
    return 0;
}

void storeEnumTagSinglePayload for ShareLink(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 40) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFE)
    v8 = 2147483646;
  else
    v8 = v7;
  if (v8 >= a3)
  {
    v11 = 0u;
    if (a2 <= v8)
      goto LABEL_20;
  }
  else
  {
    if (((((*(_DWORD *)(v6 + 64)
           + ((*(unsigned __int8 *)(v6 + 80)
             + 16
             + ((((((*(_DWORD *)(v5 + 64) + 7 + ((*(unsigned __int8 *)(v5 + 80) + 8) & ~*(unsigned __int8 *)(v5 + 80))) & 0xFFFFFFF8)
                 + 39) & 0xFFFFFFF8)
               + 39) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v6 + 80))
           + 7) & 0xFFFFFFF8)
         + 175) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = a3 - v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v8)
LABEL_20:
      __asm { BR              X6 }
  }
  if (((((*(_DWORD *)(v6 + 64)
         + ((*(unsigned __int8 *)(v6 + 80)
           + 16
           + ((((((*(_DWORD *)(v5 + 64) + 7 + ((*(unsigned __int8 *)(v5 + 80) + 8) & ~*(unsigned __int8 *)(v5 + 80))) & 0xFFFFFFF8)
               + 39) & 0xFFFFFFF8)
             + 39) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v6 + 80))
         + 7) & 0xFFFFFFF8)
       + 175) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v8 + a2;
    bzero(a1, ((((*(_QWORD *)(v6 + 64)+ ((*(unsigned __int8 *)(v6 + 80)+ 16+ ((((((*(_QWORD *)(v5 + 64)+ 7+ ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 175) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_18791A848()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18791A904);
}

void sub_18791A850(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18791A858);
  JUMPOUT(0x18791A904);
}

void sub_18791A8A4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18791A904);
}

void sub_18791A8AC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18791A904);
}

void sub_18791A8B4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_WORD *)(v10 + v11) = 0;
  if (a2)
  {
    if (v5 == v7)
      JUMPOUT(0x18791A8DCLL);
    if (v6 > 0x7FFFFFFE)
      JUMPOUT(0x18791A8C0);
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x18791A8F0);
    *(_QWORD *)(((v8 + ((v10 + v9 + 8) & a5)) & 0xFFFFFFFFFFFFFFF8) + 24) = a2;
  }
  JUMPOUT(0x18791A904);
}

ValueMetadata *type metadata accessor for DefaultShareLinkLabel()
{
  return &type metadata for DefaultShareLinkLabel;
}

void sub_18791A92C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 56);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for Button(255, v1, v2, v3);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ValueActionModifier2<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<AnyShareConfiguration.Key>, (uint64_t)&type metadata for AnyShareConfiguration.Key, (uint64_t)&protocol witness table for AnyShareConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type RequiresPlatformItemListRepresentation and conformance RequiresPlatformItemListRepresentation();
  type metadata accessor for StaticIf();
}

uint64_t sub_18791AA68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[16];

  v17[0] = v1;
  v17[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
  v9 = MEMORY[0x1E0CE2E70];
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v17);
  v16[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v5);
  v16[1] = &protocol witness table for SharingActivityPickerModifier;
  v15[0] = MEMORY[0x18D75FFDC](v9, v2, v16);
  v15[1] = lazy protocol witness table accessor for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>();
  v14[0] = MEMORY[0x18D75FFDC](v9, v6, v15);
  v14[1] = MEMORY[0x1E0CE5EF8];
  v13[0] = MEMORY[0x18D75FFDC](v9, v4, v14);
  v13[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<AnyShareConfiguration.Key> and conformance _PreferenceWritingModifier<A>();
  v12[0] = v10;
  v12[1] = MEMORY[0x18D75FFDC](v9, v7, v13);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v12);
}

void *type metadata accessor for RequiresPlatformItemListRepresentation()
{
  return &unk_1E1B08478;
}

void partial apply for closure #1 in closure #2 in ShareLink.body.getter()
{
  partial apply for closure #1 in ShareLink.body.getter((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #2 in ShareLink.body.getter);
}

void partial apply for closure #1 in ShareLink.body.getter(void (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  a1(v1[11], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10]);
  JUMPOUT(0x18791AB90);
}

void partial apply for closure #2 in closure #2 in ShareLink.body.getter()
{
  type metadata accessor for ShareLink();
}

void sub_18791ABF4()
{
  type metadata accessor for ShareLink();
}

uint64_t sub_18791AC34(uint64_t result)
{
  uint64_t v1;
  uint64_t (**v2)(_QWORD);
  uint64_t v3;
  unsigned int v4;

  v2 = (uint64_t (**)(_QWORD))(v1 + *(int *)(result + 112) + v3);
  if (*v2)
    return (*v2)(v4);
  return result;
}

void objectdestroy_4Tm_1()
{
  type metadata accessor for ShareLink();
}

uint64_t sub_18791ACD0(int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(*((_QWORD *)a1 - 1) + 80);
  v4 = v1 + ((v3 + 88) & ~v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v4 + a1[23]);
  v5 = v4 + a1[24];
  if (*(_QWORD *)(v5 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));
    swift_bridgeObjectRelease();
  }
  v6 = v4 + a1[25];
  if (*(_QWORD *)(v6 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v4 + a1[26]))
    swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v4 + a1[27]);
  if (*(_QWORD *)(v4 + a1[28]))
    swift_release();
  v7 = v4 + a1[29];
  outlined consume of Environment<PresentSharingPickerAction?>.Content(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56), *(_QWORD *)(v7 + 64), *(_QWORD *)(v7 + 72), *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), *(_QWORD *)(v7 + 96), *(_QWORD *)(v7 + 104), *(_QWORD *)(v7 + 112), *(_QWORD *)(v7 + 120), *(_QWORD *)(v7 + 128), *(_QWORD *)(v7 + 136), *(_BYTE *)(v7 + 144));
  swift_release();
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ShareLink.body.getter()
{
  type metadata accessor for ShareLink();
}

void sub_18791AE70()
{
  type metadata accessor for ShareLink();
}

uint64_t sub_18791AEA4(uint64_t a1)
{
  return ShareLink.show()(a1);
}

uint64_t *outlined release of SharingPickerHostModifier.Model(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[14];
  v3 = a1[15];
  outlined consume of AnyIdentifiableShareConfiguration?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v2, v3);
  return a1;
}

uint64_t outlined retain of AnyIdentifiableShareConfiguration(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(_QWORD *)(a1 + 96);
  v12 = *(_QWORD *)(a1 + 104);
  a2(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  a3(v5, v6, v7, v8);
  a3(v9, v10, v11, v12);
  return a1;
}

uint64_t outlined release of AnyShareConfiguration(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 96);
  outlined consume of AnyShareConfiguration.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  outlined consume of Text?(v2, v3, v4, v5);
  outlined consume of Text?(v6, v7, v8, v9);
  return a1;
}

uint64_t Scene.windowToolbarStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for WindowToolbarStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  Scene.modifier<A>(_:)(v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for WindowToolbarStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WindowToolbarStyleModifier);
}

uint64_t static WindowToolbarStyleModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Value;
  uint64_t v16;
  uint64_t v17;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v17) = *v10;
  type metadata accessor for WindowToolbarStyleModifier(255, v11, v12, v12);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (v8)
    closure #1 in static WindowToolbarStyleModifier._makeInputs(modifier:inputs:)(1, a3, a4, v13);
  AGGraphCreateOffsetAttribute2();
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, Value, a3);
  v17 = AnyWindowToolbarStyle.init<A>(_:)((uint64_t)v9, a3, a4);
  lazy protocol witness table accessor for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput();
  PropertyList.subscript.setter();
  _GraphValue.init(_:)();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(a4 + 24))(&v17, a2, a3, a4);
}

uint64_t closure #1 in static WindowToolbarStyleModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for WindowToolbarStyleModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance WindowToolbarStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static WindowToolbarStyleModifier._makeInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.WindowToolbarConfigurationKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_WORD *)a1 = 773;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = xmmword_187C6DB50;
  *(_BYTE *)(a1 + 24) = -4;
  return result;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.WindowToolbarConfigurationKey(uint64_t a1, __int16 *a2)
{
  char v2;
  __int16 v3;
  char v4;
  unsigned __int8 v6[8];
  __int128 v7;
  char v8;
  unsigned __int8 v9[8];
  __int128 v10;
  char v11;

  v2 = *(_BYTE *)(a1 + 24);
  v3 = *a2;
  v4 = *((_BYTE *)a2 + 24);
  *(_WORD *)v9 = *(_WORD *)a1;
  v10 = *(_OWORD *)(a1 + 8);
  v11 = v2;
  *(_WORD *)v6 = v3;
  v7 = *(_OWORD *)(a2 + 4);
  v8 = v4;
  return specialized static WindowToolbarConfiguration.== infix(_:_:)(v9, v6);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance WindowToolbarStyleInput@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  type metadata accessor for AnyWindowToolbarStyleStorage<DefaultWindowToolbarStyle>(0, a1, a2, a3);
  result = swift_allocObject();
  *a4 = result;
  return result;
}

void View.presentedWindowToolbarStyle<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t dispatch thunk of static WindowToolbarStyle._makeInputs(style:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of WindowToolbarStyle.configureWindowToolbar(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_18791B43C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for WindowToolbarStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for WindowToolbarStyleModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v5, v7);
}

uint64_t sub_18791B49C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t getEnumTagSinglePayload for WindowToolbarStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18791B554 + 4 * byte_187C6DB60[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for WindowToolbarStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

unint64_t lazy protocol witness table accessor for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput;
  if (!lazy protocol witness table cache variable for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowToolbarStyleInput, &type metadata for WindowToolbarStyleInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput;
  if (!lazy protocol witness table cache variable for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowToolbarStyleInput, &type metadata for WindowToolbarStyleInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.WindowToolbarConfigurationKey()
{
  return &type metadata for EnvironmentValues.WindowToolbarConfigurationKey;
}

ValueMetadata *type metadata accessor for WindowToolbarStyleInput()
{
  return &type metadata for WindowToolbarStyleInput;
}

unint64_t instantiation function for generic protocol witness table for WindowToolbarStyleInput(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for AnyWindowToolbarStyleStorage<DefaultWindowToolbarStyle>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AnyWindowToolbarStyleStorage<DefaultWindowToolbarStyle>)
  {
    v4 = type metadata accessor for AnyWindowToolbarStyleStorage(0, (uint64_t)&type metadata for DefaultWindowToolbarStyle, (uint64_t)&protocol witness table for DefaultWindowToolbarStyle, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AnyWindowToolbarStyleStorage<DefaultWindowToolbarStyle>);
  }
}

BOOL specialized static WindowToolbarConfiguration.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v14;
  _QWORD v16[2];
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v2 = *a1;
  v3 = a1[1];
  v5 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  v6 = a1[24];
  v7 = *a2;
  v8 = a2[1];
  v10 = *((_QWORD *)a2 + 1);
  v9 = *((_QWORD *)a2 + 2);
  v11 = a2[24];
  if (v2 == 5)
  {
    if (v7 != 5)
      return 0;
  }
  else if (v7 == 5 || v2 != v7)
  {
    return 0;
  }
  if (v3 == 3)
  {
    if (v8 != 3)
      return 0;
  }
  else if (v8 == 3 || v3 != v8)
  {
    return 0;
  }
  if ((~v4 & 0xF000000000000007) != 0 || v6 <= 0xFB)
  {
    v18 = *((_QWORD *)a1 + 1);
    v19 = v4;
    v20 = v6;
    if ((~v9 & 0xF000000000000007) != 0 || v11 <= 0xFB)
    {
      v16[0] = v10;
      v16[1] = v9;
      v17 = v11;
      outlined copy of ToolbarLabelStyle.Data?(v5, v4, v6);
      outlined copy of ToolbarLabelStyle.Data(v5, v4, v6);
      v14 = specialized static ToolbarLabelStyle.Data.== infix(_:_:)((uint64_t)&v18, (uint64_t)v16);
      outlined consume of ToolbarLabelStyle.Data(v18, v19, v20);
      outlined consume of ToolbarLabelStyle.Data?(v5, v4, v6);
      return v14;
    }
    outlined copy of ToolbarLabelStyle.Data(v5, v4, v6);
    outlined copy of ToolbarLabelStyle.Data(v5, v4, v6);
    outlined consume of ToolbarLabelStyle.Data(v5, v4, v6);
    goto LABEL_25;
  }
  if ((~v9 & 0xF000000000000007) != 0 || v11 <= 0xFB)
  {
LABEL_25:
    outlined copy of ToolbarLabelStyle.Data?(v10, v9, v11);
    outlined consume of ToolbarLabelStyle.Data?(v5, v4, v6);
    outlined consume of ToolbarLabelStyle.Data?(v10, v9, v11);
    return 0;
  }
  return 1;
}

uint64_t outlined copy of ToolbarLabelStyle.Data?(uint64_t a1, uint64_t a2, char a3)
{
  if ((~a2 & 0xF000000000000007) != 0 || a3 <= 0xFBu)
    return outlined copy of ToolbarLabelStyle.Data(a1, a2, a3);
  return a1;
}

uint64_t outlined copy of ToolbarLabelStyle.Data(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 < 0)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of ToolbarLabelStyle.Data?(uint64_t a1, uint64_t a2, char a3)
{
  if ((~a2 & 0xF000000000000007) != 0 || a3 <= 0xFBu)
    return outlined consume of ToolbarLabelStyle.Data(a1, a2, a3);
  return a1;
}

uint64_t outlined consume of ToolbarLabelStyle.Data(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 < 0)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t destroy for WindowToolbarConfiguration(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(unsigned __int8 *)(result + 24);
  if ((~v1 & 0xF000000000000007) != 0 || v2 <= 0xFB)
    return outlined consume of ToolbarLabelStyle.Data(*(_QWORD *)(result + 8), v1, v2);
  return result;
}

uint64_t initializeWithCopy for WindowToolbarConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = (uint64_t *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 24);
  if ((~v4 & 0xF000000000000007) != 0 || v5 <= 0xFB)
  {
    v6 = *v3;
    outlined copy of ToolbarLabelStyle.Data(*v3, *(_QWORD *)(a2 + 16), v5);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 24) = v5;
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v3;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  }
  return a1;
}

uint64_t assignWithCopy for WindowToolbarConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = a1 + 8;
  v4 = (uint64_t *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 24);
  v8 = (~v5 & 0xF000000000000007) == 0 && v6 > 0xFB;
  if ((~*(_QWORD *)(a1 + 16) & 0xF000000000000007) != 0 || *(unsigned __int8 *)(a1 + 24) <= 0xFBu)
  {
    if (v8)
    {
      outlined destroy of ToolbarLabelStyle.Data(a1 + 8);
      v10 = *((_BYTE *)v4 + 16);
      *(_OWORD *)v3 = *(_OWORD *)v4;
      *(_BYTE *)(v3 + 16) = v10;
    }
    else
    {
      v11 = *v4;
      outlined copy of ToolbarLabelStyle.Data(*v4, *(_QWORD *)(a2 + 16), v6);
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v5;
      v14 = *(_BYTE *)(a1 + 24);
      *(_BYTE *)(a1 + 24) = v6;
      outlined consume of ToolbarLabelStyle.Data(v12, v13, v14);
    }
  }
  else if (v8)
  {
    v9 = *(_OWORD *)v4;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_OWORD *)v3 = v9;
  }
  else
  {
    v15 = *v4;
    outlined copy of ToolbarLabelStyle.Data(*v4, *(_QWORD *)(a2 + 16), v6);
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 24) = v6;
  }
  return a1;
}

uint64_t outlined destroy of ToolbarLabelStyle.Data(uint64_t a1)
{
  destroy for ToolbarLabelStyle.Data(a1);
  return a1;
}

uint64_t assignWithTake for WindowToolbarConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = a1 + 8;
  v5 = a2 + 8;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 *)(a1 + 24);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 24);
  if ((~v6 & 0xF000000000000007) != 0 || v7 <= 0xFB)
  {
    if ((~v8 & 0xF000000000000007) != 0 || v9 <= 0xFB)
    {
      v10 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)v5;
      *(_QWORD *)(a1 + 16) = v8;
      *(_BYTE *)(a1 + 24) = v9;
      outlined consume of ToolbarLabelStyle.Data(v10, v6, v7);
      return a1;
    }
    outlined destroy of ToolbarLabelStyle.Data(a1 + 8);
  }
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(v5 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowToolbarConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >> 1 >= 0xFFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 8190);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = (*(_QWORD *)(a1 + 16) >> 57) & 0x78 | *(_QWORD *)(a1 + 16) & 7 | (((v3 >> 2) & 0x1F) << 7);
  v5 = 8190 - ((v3 >> 7) | (2 * v4));
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for WindowToolbarConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 >> 1 > 0xFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 8190;
    if (a3 >> 1 >= 0xFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >> 1 >= 0xFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
    {
      v3 = ((a2 ^ 0x1FFF) << 12) | ((a2 ^ 0x1FFF) >> 1);
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_BYTE *)(result + 24) = (v3 >> 5) & 0xFC;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WindowToolbarConfiguration()
{
  return &type metadata for WindowToolbarConfiguration;
}

uint64_t one-time initialization function for tableHeaderFont()
{
  uint64_t result;

  static Font.Weight.semibold.getter();
  result = static Font.system(_:design:weight:)();
  static ListMetrics.tableHeaderFont = result;
  return result;
}

uint64_t one-time initialization function for tableColumnContentPadding()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = static EdgeInsets.zero.getter();
  static ListMetrics.tableColumnContentPadding = v1;
  qword_1EDF002C0 = v2;
  qword_1EDF002C8 = v3;
  qword_1EDF002D0 = v4;
  return result;
}

void one-time initialization function for tableHeaderMinHeight()
{
  static ListMetrics.tableHeaderMinHeight = 0x4044000000000000;
}

void _ConditionalContent<>.CommandsProvider.detachOutputs()()
{
  PreferencesOutputs.detachIndirectOutputs()();
}

uint64_t _ConditionalContent<>.CommandsProvider.attachOutputs(to:)()
{
  return PreferencesOutputs.attachIndirectOutputs(to:)();
}

uint64_t _ConditionalContent<>.CommandsProvider.makeChildInputs()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v3 = *(_DWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 40);
  v18 = *(_QWORD *)(v1 + 48);
  v6 = *(_DWORD *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v18;
  *(_DWORD *)(a1 + 56) = v6;
  swift_beginAccess();
  v7 = *(_DWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v16 = *(_OWORD *)(v4 + 48);
  v17 = *(_OWORD *)(v4 + 32);
  v9 = *(_QWORD *)(v4 + 64);
  v10 = *(_QWORD *)(v4 + 72);
  v11 = *(_BYTE *)(v4 + 80);
  v12 = *(_BYTE *)(v4 + 81);
  v13 = *(_QWORD *)(v4 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>();
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = v7;
  *(_QWORD *)(v14 + 24) = v8;
  *(_OWORD *)(v14 + 32) = v17;
  *(_OWORD *)(v14 + 48) = v16;
  *(_QWORD *)(v14 + 64) = v9;
  *(_QWORD *)(v14 + 72) = v10;
  *(_BYTE *)(v14 + 80) = v11;
  *(_BYTE *)(v14 + 81) = v12;
  *(_QWORD *)(v14 + 88) = v13;
  swift_retain();
  *(_QWORD *)(a1 + 16) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t _ConditionalContent<>.CommandsProvider.makeTrueOutputs(child:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  int v16;
  _BYTE v17[4];

  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 14);
  v9 = *(_QWORD *)(a3 + 16);
  _GraphValue.init(_:)();
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v14 = *(_OWORD *)(a2 + 3);
  v15 = *(_OWORD *)(a2 + 5);
  v16 = v8;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(a3 + 32) + 32))(v17, &v11, v9);
}

uint64_t _ConditionalContent<>.CommandsProvider.makeFalseOutputs(child:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  int v16;
  _BYTE v17[4];

  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 14);
  v9 = *(_QWORD *)(a3 + 24);
  _GraphValue.init(_:)();
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v14 = *(_OWORD *)(a2 + 3);
  v15 = *(_OWORD *)(a2 + 5);
  v16 = v8;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(a3 + 40) + 32))(v17, &v11, v9);
}

uint64_t protocol witness for ConditionalContentProvider.inputs.getter in conformance _ConditionalContent<A, B><>.CommandsProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_DWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_DWORD *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 56) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ConditionalContentProvider.outputs.getter in conformance _ConditionalContent<A, B><>.CommandsProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 72);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 64);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

void static _ConditionalContent<>._makeCommands(content:inputs:)()
{
  PreferencesInputs.makeIndirectOutputs()();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for _GraphValue();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  type metadata accessor for _ConditionalContent<>.CommandsProvider();
}

uint64_t sub_18791C380(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ConditionalContent<A, B><>.CommandsProvider, a1);
  v6 = v1;
  _ConditionalContent.Container.init(content:provider:)();
  v7 = *(_DWORD *)(v3 - 192);
  v8 = *(_QWORD *)(v3 - 184);
  v9 = *(_QWORD *)(v3 - 160);
  v10 = *(_QWORD *)(v3 - 152);
  v11 = *(_DWORD *)(v3 - 144);
  v12 = *(_QWORD *)(v3 - 136);
  v20 = *(_QWORD *)(v3 - 200);
  v13 = *(_DWORD *)(v3 - 128);
  v14 = *(void **)(v3 - 120);
  v15 = *(_OWORD *)(v3 - 176);
  *(_DWORD *)(v3 - 208) = *(_DWORD *)(v3 - 208);
  *(_QWORD *)(v3 - 200) = v20;
  *(_DWORD *)(v3 - 192) = v7;
  *(_QWORD *)(v3 - 184) = v8;
  *(_OWORD *)(v3 - 176) = v15;
  *(_QWORD *)(v3 - 160) = v9;
  *(_QWORD *)(v3 - 152) = v10;
  *(_DWORD *)(v3 - 144) = v11;
  *(_QWORD *)(v3 - 136) = v12;
  *(_DWORD *)(v3 - 128) = v13;
  *(_QWORD *)(v3 - 120) = v14;
  v24[2] = type metadata accessor for _ConditionalContent.Info();
  v27 = v2;
  v28 = v6;
  v29 = a1;
  v30 = v5;
  v25 = type metadata accessor for _ConditionalContent.Container();
  v26 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BB8], v25);
  v16 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = v14;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3 - 208, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v24, v25, MEMORY[0x1E0DEDCE8], v16, MEMORY[0x1E0DEDD18], v18);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)(v3 - 208) = v21;
  *(_DWORD *)(v3 - 200) = v22;
  LOBYTE(v27) = 0;
  PreferencesOutputs.setIndirectDependency(_:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_QWORD *)v23 = v21;
  *(_DWORD *)(v23 + 8) = v22;
  return result;
}

void type metadata accessor for _ConditionalContent<>.CommandsProvider()
{
  JUMPOUT(0x18D75FF28);
}

void protocol witness for static Commands._makeCommands(content:inputs:) in conformance <> _ConditionalContent<A, B>()
{
  static _ConditionalContent<>._makeCommands(content:inputs:)();
}

uint64_t Optional<A>.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t Value;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;

  v26 = a3;
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v23 - v8;
  v10 = type metadata accessor for _ConditionalContent.Storage();
  v11 = type metadata accessor for Optional();
  v24 = *(_QWORD *)(v11 - 8);
  v25 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v23 - v13;
  v15 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v23 - v18;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, Value, v5);
  v28 = a1;
  v29 = a2;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional<A>.Child.value.getter, (uint64_t)v27, MEMORY[0x1E0DEDCE8], v10, v21, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v10) == 1)
  {
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v14, v10);
  }
  return _ConditionalContent.init(__storage:)((uint64_t)v19, v26);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance A?<A>.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for _ConditionalContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

{
  uint64_t v2;

  v2 = type metadata accessor for _ConditionalContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance A?<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Optional<A>.Child.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

{
  return Optional<A>.Child.value.getter(*(_QWORD *)(a1 + 16), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance A?<A>.Child(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for A?<A>.Child, a1);
  return static AsyncAttribute.flags.getter();
}

{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for A?<A>.Child, a1);
  return static AsyncAttribute.flags.getter();
}

void static Optional<A>._makeCommands(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for Optional();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for _ConditionalContent();
  v7 = type metadata accessor for Optional<A>.Child(0, a3, a4, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for A?<A>.Child, v7);
  _GraphValue.init<A>(_:)();
  static _ConditionalContent<>._makeCommands(content:inputs:)();
}

void protocol witness for static Commands._makeCommands(content:inputs:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static Optional<A>._makeCommands(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t type metadata accessor for Optional<A>.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Optional<A>.Child);
}

{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Optional<A>.Child);
}

uint64_t destroy for _ConditionalContent<>.CommandsProvider()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ConditionalContent<>.CommandsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ConditionalContent<>.CommandsProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for _ConditionalContent<>.CommandsProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

void base witness table accessor for _AttributeBody in A?<A>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in Optional<A>.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, a1, *(_QWORD *)(v2 + 16));
  type metadata accessor for _ConditionalContent.Storage();
  return swift_storeEnumTagMultiPayload();
}

uint64_t ControlWidgetConfiguration.preference<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a5;
  v19 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v18 - v9;
  v11 = type metadata accessor for _PreferenceWritingModifier();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, a2, AssociatedTypeWitness, v14);
  _PreferenceWritingModifier.init(key:value:)();
  ControlWidgetConfiguration.modifier<A>(_:)((uint64_t)v16, v19, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v11);
}

uint64_t ControlWidgetConfiguration.transformPreference<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  swift_retain();
  v8[0] = _PreferenceTransformModifier.init(key:transform:)();
  v8[1] = v5;
  v6 = type metadata accessor for _PreferenceTransformModifier();
  ControlWidgetConfiguration.modifier<A>(_:)((uint64_t)v8, a4, v6);
  return swift_release();
}

uint64_t static _PreferenceWritingModifier._makeWidgetControlConfiguration(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v6 = a1[5];
  v5 = a1[6];
  v7 = *((_DWORD *)a1 + 14);
  v22 = *a1;
  v23 = v3;
  v25 = *(_OWORD *)(a1 + 3);
  v24 = v4;
  v26 = v6;
  v27 = v5;
  v28 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.remove<A>(_:)();
  v13 = v22;
  v14 = v23;
  v15 = v4;
  v16 = v25;
  v17 = v6;
  v18 = v5;
  v19 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v8 = swift_bridgeObjectRetain();
  a2(&v20, v8, &v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v13 = v5;
  v14 = v7;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  v10 = v21;
  *(_QWORD *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v10;
  return result;
}

uint64_t protocol witness for static ControlWidgetConfigurationModifier._makeWidgetControlConfiguration(modifier:inputs:body:) in conformance _PreferenceWritingModifier<A>@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  return static _PreferenceWritingModifier._makeWidgetControlConfiguration(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t static _PreferenceTransformModifier._makeWidgetControlConfiguration(modifier:inputs:body:)@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  int v6;

  a1(&v5);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  result = swift_bridgeObjectRelease();
  v4 = v6;
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

uint64_t implicit closure #1 in static _PreferenceTransformModifier._makeWidgetControlConfiguration(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t OffsetAttribute2;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = a1;
  type metadata accessor for _PreferenceTransformModifier();
  type metadata accessor for _GraphValue();
  v5 = _GraphValue.value.getter();
  v18 = a2;
  v19 = a3;
  KeyPath = swift_getKeyPath();
  v7 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v8 & 1) != 0)
  {
    v16 = v5;
    v17 = KeyPath;
    MEMORY[0x1E0C80A78](v7, v8);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v13[2] = swift_getFunctionTypeMetadata();
    v14 = type metadata accessor for Focus();
    v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE8], v14);
    v10 = type metadata accessor for Attribute();
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v16, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v13, v14, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
    swift_release();
    swift_release();
    return AssociatedTypeWitness;
  }
  else
  {
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    swift_release();
  }
  return OffsetAttribute2;
}

uint64_t partial apply for implicit closure #1 in static _PreferenceTransformModifier._makeWidgetControlConfiguration(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static _PreferenceTransformModifier._makeWidgetControlConfiguration(modifier:inputs:body:)(*(_DWORD *)(v0 + 32), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t protocol witness for static ControlWidgetConfigurationModifier._makeWidgetControlConfiguration(modifier:inputs:body:) in conformance _PreferenceTransformModifier<A>@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  return static _PreferenceTransformModifier._makeWidgetControlConfiguration(modifier:inputs:body:)(a1, a2);
}

uint64_t sub_18791D368(_QWORD *a1)
{
  return get_witness_table_7SwiftUI26ControlWidgetConfigurationRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_F15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdeK0HpyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))MEMORY[0x1E0CE60E0], (uint64_t)&protocol witness table for _PreferenceWritingModifier<A>);
}

uint64_t sub_18791D37C(_QWORD *a1)
{
  return get_witness_table_7SwiftUI26ControlWidgetConfigurationRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_F15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdeK0HpyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))MEMORY[0x1E0CE63C0], (uint64_t)&protocol witness table for _PreferenceTransformModifier<A>);
}

uint64_t get_witness_table_7SwiftUI26ControlWidgetConfigurationRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_F15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdeK0HpyHCHCTm(_QWORD *a1, void (*a2)(uint64_t, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  a2(255, a1[1], a1[3]);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = a3;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v5, v7);
}

uint64_t sub_18791D3F8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_18791D408()
{
  return 16;
}

__n128 sub_18791D414(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for DefaultListToggleStyle()
{
  return &type metadata for DefaultListToggleStyle;
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in DefaultListToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t DefaultListToggleStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v23 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v7 = *(void **)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v27);
  if (v27 == 1)
    v11 = static Text.System.on.getter();
  else
    v11 = static Text.System.off.getter();
  v26 = v11;
  v25 = v12;
  v14 = v7 == 0;
  if (v7)
    v15 = v6;
  else
    v15 = 0;
  v22 = v15;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  v16 = v7;
  if (v7)
    v17 = v5;
  else
    v17 = 0;
  v21 = v8;
  if (v14)
    v18 = 0;
  else
    v18 = v8 & 1;
  *(_BYTE *)(a2 + 16) = v23;
  if (v14)
  {
    v10 = 0;
    v19 = 0;
  }
  else
  {
    v19 = v9;
  }
  v24 = v13 & 1;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v18;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v10;
  *(_QWORD *)(a2 + 64) = v19;
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v6, v5, v21, v16);
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v22, v17, v18, v16);
  swift_release();
  swift_release();
  outlined consume of AppIntentAction?(v22, v17, v18, v16);
  outlined consume of Text.Storage(v26, v25, v24);
  return swift_bridgeObjectRelease();
}

uint64_t EnvironmentValues.isUserAuthenticationEnabled.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<InterfaceProtectionKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<InterfaceProtectionKey>);
  }
}

uint64_t EnvironmentValues.isUserAuthenticationEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t (*EnvironmentValues.isUserAuthenticationEnabled.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;

  v2 = a1 + 1;
  *a1 = v1;
  v3 = (char *)a1 + 9;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *v2 = *v3;
  return EnvironmentValues.isUserAuthenticationEnabled.modify;
}

uint64_t EnvironmentValues.isUserAuthenticationEnabled.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_18791D968@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isUserAuthenticationEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18791D9A4()
{
  return EnvironmentValues.isUserAuthenticationEnabled.setter();
}

ValueMetadata *type metadata accessor for InterfaceProtectionKey()
{
  return &type metadata for InterfaceProtectionKey;
}

uint64_t dispatch thunk of AnyDefaultStyle.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

double DragReorderableVStack.dragState.getter@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  __int128 v4;
  _OWORD v5[2];

  DragReorderableVStack.$state.getter((uint64_t)&v4);
  v2 = v5[0];
  *a1 = v4;
  a1[1] = v2;
  result = *(double *)((char *)v5 + 9);
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)v5 + 9);
  return result;
}

void DragReorderableVStack.init(alignment:spacing:padding:contentTypes:insertionPlaceholder:delegate:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = outlined init with take of EdgeInsets?(a4, (uint64_t)&v6);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for DragReorderableLayoutAdaptor();
}

void sub_18791DAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 328) = a1;
  *(_QWORD *)(v6 - 336) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v6 - 248) = v5;
  *(_QWORD *)(v6 - 240) = v3;
  *(_QWORD *)(v6 - 232) = v2;
  *(_QWORD *)(v6 - 224) = v4;
  *(_QWORD *)(v6 - 320) = v4;
  type metadata accessor for DragReorderableVStack();
}

void sub_18791DB4C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(int *)(a1 + 56);
  *(_QWORD *)(v6 - 288) = v5;
  v8 = v5 + v7;
  v9 = *(_QWORD *)(v6 - 352);
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 24) = 1;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v6 - 272) = *(_QWORD *)(v6 - 304);
  *(_QWORD *)(v6 - 264) = v9;
  *(_DWORD *)(v6 - 304) = v2;
  *(_BYTE *)(v6 - 256) = v2;
  v4();
  outlined init with take of EdgeInsets?(v3, v6 - 160);
  if (*(_BYTE *)(v6 - 128) == 1)
    static EdgeInsets.zero.getter();
  v10 = *(_QWORD *)(v6 - 312);
  outlined init with copy of TableColumnList(v10, v6 - 248);
  AGMakeUniqueID();
  AGMakeUniqueID();
  __swift_destroy_boxed_opaque_existential_1(v10);
  DragReorderableLayoutAdaptor.init(root:content:padding:contentTypes:spacing:delegate:containerID:placeholderID:)(v6 - 272, v1, MEMORY[0x1E0CE25F0]);
}

uint64_t sub_18791DC78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v2 - 288);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 - 336) + 32))(v3, v0, *(_QWORD *)(v2 - 328));
  v4 = v3 + *(int *)(v1 + 52);
  type metadata accessor for Optional();
  v5 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, *(_QWORD *)(v2 - 280), v5);
}

void type metadata accessor for DragReorderableVStack()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t DragReorderableVStack.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DragReorderableVStack.body.getter(a1, (uint64_t)&protocol conformance descriptor for DragReorderableVStack<A, B>, a2);
}

void DragReorderableVStack.adaptor.getter()
{
  type metadata accessor for DragReorderableLayoutAdaptor();
}

uint64_t sub_18791DD54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t DragReorderableVStack.insertionPlaceholder.getter()
{
  uint64_t v0;

  type metadata accessor for Optional();
  v0 = type metadata accessor for Binding();
  return MEMORY[0x18D75B9C8](v0);
}

double DragReorderableVStack.$state.getter@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  return result;
}

void DragReorderableLazyVStack.init(alignment:spacing:padding:contentTypes:insertionPlaceholder:delegate:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = outlined init with take of EdgeInsets?(a4, (uint64_t)&v6);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for DragReorderableLayoutAdaptor();
}

void sub_18791DF48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 328) = a1;
  *(_QWORD *)(v6 - 336) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v6 - 248) = v5;
  *(_QWORD *)(v6 - 240) = v3;
  *(_QWORD *)(v6 - 232) = v2;
  *(_QWORD *)(v6 - 224) = v4;
  *(_QWORD *)(v6 - 320) = v4;
  type metadata accessor for DragReorderableLazyVStack();
}

void sub_18791DF9C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(int *)(a1 + 56);
  *(_QWORD *)(v6 - 288) = v5;
  v8 = v5 + v7;
  v9 = *(_QWORD *)(v6 - 352);
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 24) = 1;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v6 - 272) = *(_QWORD *)(v6 - 304);
  *(_QWORD *)(v6 - 264) = v9;
  *(_DWORD *)(v6 - 304) = v2;
  *(_BYTE *)(v6 - 256) = v2;
  *(_DWORD *)(v6 - 252) = 0;
  v4();
  outlined init with take of EdgeInsets?(v3, v6 - 160);
  if (*(_BYTE *)(v6 - 128) == 1)
    static EdgeInsets.zero.getter();
  v10 = *(_QWORD *)(v6 - 312);
  outlined init with copy of TableColumnList(v10, v6 - 248);
  AGMakeUniqueID();
  AGMakeUniqueID();
  __swift_destroy_boxed_opaque_existential_1(v10);
  DragReorderableLayoutAdaptor.init(root:content:padding:contentTypes:spacing:delegate:containerID:placeholderID:)(v6 - 272, v1, (uint64_t)&type metadata for LazyVStackLayout);
}

uint64_t sub_18791E0CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v2 - 288);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 - 336) + 32))(v3, v0, *(_QWORD *)(v2 - 328));
  v4 = v3 + *(int *)(v1 + 52);
  type metadata accessor for Optional();
  v5 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, *(_QWORD *)(v2 - 280), v5);
}

void type metadata accessor for DragReorderableLazyVStack()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t DragReorderableLazyVStack.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DragReorderableVStack.body.getter(a1, (uint64_t)&protocol conformance descriptor for DragReorderableLazyVStack<A, B>, a2);
}

uint64_t DragReorderableVStack.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v7 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  DragReorderableVStack.$state.getter((uint64_t)&v11);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v11);
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, a1);
  MEMORY[0x18D75FFDC](a2, a1);
  return FormatInputToString.init(format:)((uint64_t)v9, a1, a3);
}

void View.dragSourceProxy()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t associated type witness table accessor for View.Body : View in DragReorderableVStack<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in DragReorderableLazyVStack<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

_UNKNOWN **associated type witness table accessor for DragReorderableView.Root : _VariadicView_UnaryViewRoot in DragReorderableLazyVStack<A, B>()
{
  return &protocol witness table for LazyVStackLayout;
}

void protocol witness for DragReorderableView.adaptor.getter in conformance DragReorderableLazyVStack<A, B>()
{
  DragReorderableVStack.adaptor.getter();
}

uint64_t protocol witness for DragReorderableView.insertionPlaceholder.getter in conformance DragReorderableLazyVStack<A, B>()
{
  return DragReorderableVStack.insertionPlaceholder.getter();
}

uint64_t instantiation function for generic protocol witness table for DragReorderableLazyVStack<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragReorderableLazyVStack<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DragReorderableView.Root : _VariadicView_UnaryViewRoot in DragReorderableVStack<A, B>()
{
  return MEMORY[0x1E0CE25C8];
}

void protocol witness for DragReorderableView.adaptor.getter in conformance DragReorderableVStack<A, B>()
{
  DragReorderableVStack.adaptor.getter();
}

double protocol witness for DragReorderableView.dragState.getter in conformance DragReorderableVStack<A, B>@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  __int128 v4;
  _OWORD v5[2];

  DragReorderableVStack.dragState.getter(&v4);
  v2 = v5[0];
  *a1 = v4;
  a1[1] = v2;
  result = *(double *)((char *)v5 + 9);
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)v5 + 9);
  return result;
}

uint64_t instantiation function for generic protocol witness table for DragReorderableVStack<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragReorderableVStack<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata completion function for DragReorderableVStack()
{
  type metadata completion function for DragReorderableVStack();
}

{
  type metadata accessor for DragReorderableLayoutAdaptor();
}

_QWORD *initializeBufferWithCopyOfBuffer for DragReorderableVStack(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(unint64_t, unint64_t, uint64_t);
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  const void *v36;
  unsigned int (*v37)(const void *, uint64_t, uint64_t);
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  size_t __n;
  uint64_t v44;
  uint64_t v45;

  v4 = (_QWORD *)a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  if (*(_DWORD *)(v8 + 84))
    v10 = *(_QWORD *)(v8 + 64);
  else
    v10 = *(_QWORD *)(v8 + 64) + 1;
  v11 = (v9 | v7) <= 7 && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0;
  if (v11
    && (v12 = *(_QWORD *)(v6 + 64) + 7,
        v13 = ((((((((((v12 + ((v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
                + 47) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + (v9 | 7)
            + 8,
        ((((v9 + 16) & ~v9) + v10 + 7 + (v13 & ~(v9 | 7))) & 0xFFFFFFFFFFFFFFF8) + 40 <= 0x18))
  {
    __n = v10;
    v14 = ~(v9 | 7);
    v44 = ((v9 + 16) & ~v9) + v10 + 7;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v15 = (a1 + v7 + 17) & ~v7;
    v45 = v5;
    v16 = ((unint64_t)a2 + v7 + 17) & ~v7;
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v15, v16);
    v17 = (_OWORD *)((v12 + v15) & 0xFFFFFFFFFFFFFFF8);
    v18 = (_OWORD *)((v12 + v16) & 0xFFFFFFFFFFFFFFF8);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = (_QWORD *)(((unint64_t)v18 + 39) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v20;
    v22 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    v24 = *(_QWORD *)v23;
    *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
    *(_QWORD *)v22 = v24;
    v25 = ((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8;
    v26 = ((unint64_t)v20 + 31) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(_QWORD *)(v26 + 24);
    *(_QWORD *)(v25 + 24) = v27;
    *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
    v28 = **(void (***)(unint64_t, unint64_t, uint64_t))(v27 - 8);
    swift_bridgeObjectRetain();
    v28(v25, v26, v27);
    v29 = (_QWORD *)((v25 + 47) & 0xFFFFFFFFFFFFF8);
    v30 = (_QWORD *)((v26 + 47) & 0xFFFFFFFFFFFFF8);
    *v29 = *v30;
    *(_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8);
    v31 = (_QWORD *)(((unint64_t)v4 + v13) & v14);
    v32 = (_QWORD *)(((unint64_t)a2 + v13) & v14);
    *v31 = *v32;
    v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    v34 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v33 = *v34;
    v35 = (void *)(((unint64_t)v33 + v9 + 8) & ~v9);
    v36 = (const void *)(((unint64_t)v34 + v9 + 8) & ~v9);
    v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
    swift_retain();
    swift_retain();
    if (v37(v36, 1, v45))
    {
      memcpy(v35, v36, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v35, v36, v45);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v35, 0, 1, v45);
    }
    v39 = ((unint64_t)v31 + v44) & 0xFFFFFFFFFFFFFFF8;
    v40 = ((unint64_t)v32 + v44) & 0xFFFFFFFFFFFFFFF8;
    v41 = *(_OWORD *)v40;
    *(_OWORD *)(v39 + 9) = *(_OWORD *)(v40 + 9);
    *(_OWORD *)v39 = v41;
    *(_QWORD *)(v39 + 32) = *(_QWORD *)(v40 + 32);
  }
  else
  {
    v38 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v38 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16)));
  }
  swift_retain();
  return v4;
}

uint64_t destroy for DragReorderableVStack(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 17 + a1) & ~v5;
  (*(void (**)(uint64_t))(v4 + 8))(v6);
  v7 = *(_QWORD *)(v4 + 64) + 7;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((((((v7 + v6) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  v8 = (((((((((v7 + ((v5 + 17) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
        + 47) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (a1 + (v11 | 7) + v8 + 8) & ~(v11 | 7);
  swift_release();
  swift_release();
  v13 = (v11 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v13, v9);
  return swift_release();
}

uint64_t initializeWithCopy for DragReorderableVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(unint64_t, unint64_t, uint64_t);
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  const void *v34;
  unsigned int (*v35)(const void *, uint64_t, uint64_t);
  int v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 39) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v11 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v14;
  v16 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  v19 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)(v20 + 24);
  *(_QWORD *)(v19 + 24) = v21;
  *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
  v22 = **(void (***)(unint64_t, unint64_t, uint64_t))(v21 - 8);
  swift_bridgeObjectRetain();
  v22(v19, v20, v21);
  v23 = (_QWORD *)((v19 + 47) & 0xFFFFFFFFFFFFF8);
  v24 = (_QWORD *)((v20 + 47) & 0xFFFFFFFFFFFFF8);
  *v23 = *v24;
  *(_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8);
  v25 = *(_QWORD *)(a3 + 24);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = ((((((((((v10 + ((v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + (v27 | 7)
      + 8;
  v29 = (v28 + a1) & ~(v27 | 7);
  v30 = (v28 + a2) & ~(v27 | 7);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v31 = (_QWORD *)((v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)((v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = (void *)(((unint64_t)v31 + v27 + 8) & ~v27);
  v34 = (const void *)(((unint64_t)v32 + v27 + 8) & ~v27);
  v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
  swift_retain();
  swift_retain();
  if (v35(v34, 1, v25))
  {
    v36 = *(_DWORD *)(v26 + 84);
    v37 = *(_QWORD *)(v26 + 64);
    if (v36)
      v38 = *(_QWORD *)(v26 + 64);
    else
      v38 = v37 + 1;
    memcpy(v33, v34, v38);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v33, v34, v25);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v33, 0, 1, v25);
    v36 = *(_DWORD *)(v26 + 84);
    v37 = *(_QWORD *)(v26 + 64);
  }
  v39 = v37 + ((v27 + 16) & ~v27);
  if (!v36)
    ++v39;
  v40 = ((v29 | 7) + v39) & 0xFFFFFFFFFFFFFFF8;
  v41 = ((v30 | 7) + v39) & 0xFFFFFFFFFFFFFFF8;
  v42 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 9) = *(_OWORD *)(v41 + 9);
  *(_OWORD *)v40 = v42;
  *(_QWORD *)(v40 + 32) = *(_QWORD *)(v41 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DragReorderableVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  char v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (v10 + v8) & 0xFFFFFFFFFFFFFFF8;
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v11 = *v12;
  *(_QWORD *)(v11 + 8) = v12[1];
  *(_QWORD *)(v11 + 16) = v12[2];
  *(_QWORD *)(v11 + 24) = v12[3];
  v11 += 39;
  v13 = (_QWORD *)(((unint64_t)v12 + 39) & 0xFFFFFFFFFFFFFFF8);
  v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8) = *v13;
  v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = v14 & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = v18;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v15 & 0xFFFFFFFFFFFFFFF8), (uint64_t *)(((unint64_t)v13 + 31) & 0xFFFFFFFFFFFFFFF8));
  v19 = (_QWORD *)(((v15 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((((unint64_t)v13 + 31) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8);
  *v19 = *v20;
  *(_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
  v21 = (((((((((v10 + ((v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)(a3 + 24);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = v21 + (v24 | 7) + 8;
  v26 = (v25 + a1) & ~(v24 | 7);
  v27 = (v25 + a2) & ~(v24 | 7);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  swift_retain();
  swift_release();
  v28 = (_QWORD *)((v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)((v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  swift_retain();
  swift_release();
  v30 = (void *)(((unint64_t)v28 + v24 + 8) & ~v24);
  v31 = (void *)(((unint64_t)v29 + v24 + 8) & ~v24);
  v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v13) = v32(v30, 1, v22);
  v33 = v32(v31, 1, v22);
  if ((_DWORD)v13)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v30, v31, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v30, 0, 1, v22);
      goto LABEL_10;
    }
LABEL_6:
    if (*(_DWORD *)(v23 + 84))
      v34 = *(_QWORD *)(v23 + 64);
    else
      v34 = *(_QWORD *)(v23 + 64) + 1;
    memcpy(v30, v31, v34);
    goto LABEL_10;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v30, v22);
    goto LABEL_6;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v30, v31, v22);
LABEL_10:
  v35 = *(_QWORD *)(v23 + 64) + ((v24 + 16) & ~v24);
  if (!*(_DWORD *)(v23 + 84))
    ++v35;
  v36 = ((v26 | 7) + v35) & 0xFFFFFFFFFFFFFFF8;
  v37 = ((v27 | 7) + v35) & 0xFFFFFFFFFFFFFFF8;
  v38 = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *(_BYTE *)(v36 + 8) = v38;
  v39 = *(_BYTE *)(v37 + 24);
  *(_QWORD *)(v36 + 16) = *(_QWORD *)(v37 + 16);
  *(_BYTE *)(v36 + 24) = v39;
  *(_QWORD *)(v36 + 32) = *(_QWORD *)(v37 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for DragReorderableVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  const void *v34;
  int v35;
  size_t v36;
  size_t v37;
  size_t v38;
  size_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = (_QWORD *)(((unint64_t)v11 + 39) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v12 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  v19 = ((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_OWORD *)v20;
  v21 = *(_OWORD *)(v20 + 16);
  *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
  *(_OWORD *)v19 = v22;
  *(_OWORD *)(v19 + 16) = v21;
  v23 = (_QWORD *)((v19 + 47) & 0xFFFFFFFFFFFFF8);
  v24 = (_QWORD *)((v20 + 47) & 0xFFFFFFFFFFFFF8);
  *v23 = *v24;
  *(_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8);
  v25 = *(_QWORD *)(a3 + 24);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = ((((((((((v10 + ((v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + (v27 | 7)
      + 8;
  v29 = (v28 + a1) & ~(v27 | 7);
  v30 = (v28 + a2) & ~(v27 | 7);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v31 = (_QWORD *)((v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)((v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = (void *)(((unint64_t)v31 + v27 + 8) & ~v27);
  v34 = (const void *)(((unint64_t)v32 + v27 + 8) & ~v27);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v34, 1, v25))
  {
    v35 = *(_DWORD *)(v26 + 84);
    v36 = *(_QWORD *)(v26 + 64);
    if (v35)
      v37 = v36;
    else
      v37 = v36 + 1;
    memcpy(v33, v34, v37);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 32))(v33, v34, v25);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v33, 0, 1, v25);
    v35 = *(_DWORD *)(v26 + 84);
    v36 = *(_QWORD *)(v26 + 64);
  }
  v38 = v36 + ((v27 + 16) & ~v27);
  if (!v35)
    ++v38;
  v39 = (v29 | 7) + v38;
  v40 = ((v30 | 7) + v38) & 0xFFFFFFFFFFFFFFF8;
  v41 = *(_OWORD *)v40;
  v42 = *(_OWORD *)(v40 + 16);
  v39 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v39 + 32) = *(_QWORD *)(v40 + 32);
  *(_OWORD *)v39 = v41;
  *(_OWORD *)(v39 + 16) = v42;
  return a1;
}

uint64_t assignWithTake for DragReorderableVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  uint64_t (*v38)(void *, uint64_t, uint64_t);
  int v39;
  size_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  char v45;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 17 + a1) & ~v8;
  v10 = (v8 + 17 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64) + 7;
  v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  v13 = (_QWORD *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v12 = *v13;
  *(_QWORD *)(v12 + 8) = v13[1];
  *(_QWORD *)(v12 + 16) = v13[2];
  *(_QWORD *)(v12 + 24) = v13[3];
  v12 += 39;
  v14 = (_QWORD *)(((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14;
  v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8) = *v14;
  v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRelease();
  v18 = v16 & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = v20;
  v21 = v17 & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v17 & 0xFFFFFFFFFFFFFFF8);
  v23 = *(_OWORD *)v22;
  v24 = *(_OWORD *)(v22 + 16);
  *(_QWORD *)(v21 + 32) = *(_QWORD *)(v22 + 32);
  *(_OWORD *)v21 = v23;
  *(_OWORD *)(v21 + 16) = v24;
  v25 = (_QWORD *)(((v17 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8);
  v26 = (_QWORD *)((v22 + 47) & 0xFFFFFFFFFFFFF8);
  *v25 = *v26;
  *(_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8);
  v27 = (((((((((v11 + ((v8 + 17) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)(a3 + 24);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = v27 + (v30 | 7) + 8;
  v32 = (v31 + a1) & ~(v30 | 7);
  v33 = (v31 + a2) & ~(v30 | 7);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  swift_release();
  v34 = (_QWORD *)((v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)((v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v34 = *v35;
  swift_release();
  v36 = (void *)(((unint64_t)v34 + v30 + 8) & ~v30);
  v37 = (void *)(((unint64_t)v35 + v30 + 8) & ~v30);
  v38 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  LODWORD(v35) = v38(v36, 1, v28);
  v39 = v38(v37, 1, v28);
  if ((_DWORD)v35)
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 32))(v36, v37, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v36, 0, 1, v28);
      goto LABEL_10;
    }
LABEL_6:
    if (*(_DWORD *)(v29 + 84))
      v40 = *(_QWORD *)(v29 + 64);
    else
      v40 = *(_QWORD *)(v29 + 64) + 1;
    memcpy(v36, v37, v40);
    goto LABEL_10;
  }
  if (v39)
  {
    (*(void (**)(void *, uint64_t))(v29 + 8))(v36, v28);
    goto LABEL_6;
  }
  (*(void (**)(void *, void *, uint64_t))(v29 + 40))(v36, v37, v28);
LABEL_10:
  v41 = *(_QWORD *)(v29 + 64) + ((v30 + 16) & ~v30);
  if (!*(_DWORD *)(v29 + 84))
    ++v41;
  v42 = ((v32 | 7) + v41) & 0xFFFFFFFFFFFFFFF8;
  v43 = ((v33 | 7) + v41) & 0xFFFFFFFFFFFFFFF8;
  v44 = *(_BYTE *)(v43 + 8);
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *(_BYTE *)(v42 + 8) = v44;
  v45 = *(_BYTE *)(v43 + 24);
  *(_QWORD *)(v42 + 16) = *(_QWORD *)(v43 + 16);
  *(_BYTE *)(v42 + 24) = v45;
  *(_QWORD *)(v42 + 32) = *(_QWORD *)(v43 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DragReorderableVStack(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  if (v10 <= v6)
    v11 = v6;
  else
    v11 = v10;
  if (v8)
    v12 = 7;
  else
    v12 = 8;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v4 + 80);
  v14 = *(_QWORD *)(v4 + 64) + 7;
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = v15 | 7;
  v17 = ((((((((((v14 + ((v13 + 17) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + (v15 | 7)
      + 8;
  if (v11 < a2)
  {
    if (((((v12 + *(_QWORD *)(v7 + 64) + ((v15 + 16) & ~v15) + (v17 & ~v16)) & 0xFFFFFFFFFFFFFFF8) + 40) & 0xFFFFFFF8) != 0)
      v18 = 2;
    else
      v18 = a2 - v11 + 1;
    if (v18 >= 0x10000)
      v19 = 4;
    else
      v19 = 2;
    if (v18 < 0x100)
      v19 = 1;
    if (v18 >= 2)
      v20 = v19;
    else
      v20 = 0;
    __asm { BR              X21 }
  }
  if (v6 >= v10)
  {
    v24 = (a1 + v13 + 17) & ~v13;
    if (v5 >= 0x7FFFFFFF)
      return (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 48))(v24, *(unsigned int *)(v4 + 84));
    v23 = *(_QWORD *)((((v14 + v24) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
  }
  else
  {
    v22 = (unint64_t *)((((v17 + a1) & ~v16) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v9 & 0x80000000) != 0)
    {
      v25 = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v22 + v15 + 8) & ~v15);
      if (v25 >= 2)
        return v25 - 1;
      else
        return 0;
    }
    v23 = *v22;
  }
  if (v23 >= 0xFFFFFFFF)
    LODWORD(v23) = -1;
  return (v23 + 1);
}

void storeEnumTagSinglePayload for DragReorderableVStack(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  v6 = 0u;
  v8 = *(_QWORD *)(a4 + 16);
  v7 = *(_QWORD *)(a4 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) <= 0x7FFFFFFFu)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = *(_QWORD *)(v7 - 8);
  v12 = *(_DWORD *)(v11 + 84);
  if (v12)
    v13 = v12 - 1;
  else
    v13 = 0;
  if (v13 <= 0x7FFFFFFF)
    v14 = 0x7FFFFFFF;
  else
    v14 = v13;
  if (v14 <= v10)
    v15 = v10;
  else
    v15 = v14;
  v16 = *(unsigned __int8 *)(v11 + 80);
  v17 = ((((((((((*(_QWORD *)(v9 + 64)
                + 7
                + ((*(unsigned __int8 *)(v9 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFFFFFFFFFF8)
              + 39) & 0xFFFFFFFFFFFFFFF8)
            + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8
      + (v16 | 7);
  v18 = *(_QWORD *)(v11 + 64);
  if (!v12)
    ++v18;
  if (v15 < a3)
  {
    v19 = a3 - v15;
    if ((((((_DWORD)v16 + 16) & ~(_DWORD)v16) + (_DWORD)v18 + (v17 & ~(v16 | 7)) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8)
      v20 = v19 + 1;
    else
      v20 = 2;
    if (v20 >= 0x10000)
      v6 = 4;
    else
      v6 = 2;
    if (v20 < 0x100)
      v6 = 1;
    if (v20 < 2)
      v6 = 0;
  }
  if (a2 > v15)
  {
    if ((((((_DWORD)v16 + 16) & ~(_DWORD)v16) + (_DWORD)v18 + (v17 & ~(v16 | 7)) + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
    {
      v21 = ~v15 + a2;
      bzero(a1, ((((v16 + 16) & ~v16) + v18 + (v17 & ~(v16 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 40);
      *a1 = v21;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X25 }
}

void sub_18791F684(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  int v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  *((_BYTE *)v28 + v29) = 0;
  if (!(_DWORD)a2)
    return;
  if (a1 >= v27)
  {
    if (a1 >= a2)
    {
      v36 = ((unint64_t)v28 + a6 + 17) & v30;
      if (v19 >= 0x7FFFFFFF)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v36, a2, v19, a9);
        return;
      }
      v35 = (_QWORD *)((((a5 + v36) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
      if ((a2 & 0x80000000) == 0)
      {
LABEL_14:
        *v35 = (a2 - 1);
        return;
      }
LABEL_18:
      *v35 = a2 ^ 0x80000000;
      return;
    }
    if ((_DWORD)v22)
    {
      v34 = ~a1 + a2;
      bzero(v28, v22);
      *v28 = v34;
    }
  }
  else
  {
    v32 = (void *)(((unint64_t)v28 + a8) & v31);
    if (v27 < a2)
    {
      if ((_DWORD)v21)
      {
        if (v21 <= 3)
          v33 = v21;
        else
          v33 = 4;
        bzero(v32, v21);
        __asm { BR              X10 }
      }
      return;
    }
    v35 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v24 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_18;
    }
    v37 = (uint64_t)v35 + a7 + 8;
    if (v24 >= a2)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v37 & v23, (a2 + 1), a3, a4);
    }
    else if ((_DWORD)v20)
    {
      if (v20 <= 3)
        v38 = v20;
      else
        v38 = 4;
      bzero((void *)(v37 & v23), v20);
      __asm { BR              X10 }
    }
  }
}

void sub_18791F850()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x18791F85CLL);
}

void type metadata completion function for DragReorderableLazyVStack()
{
  type metadata completion function for DragReorderableVStack();
}

_QWORD *initializeBufferWithCopyOfBuffer for DragReorderableLazyVStack(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(unint64_t, unint64_t, uint64_t);
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  const void *v36;
  unsigned int (*v37)(const void *, uint64_t, uint64_t);
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  size_t __n;
  uint64_t v44;
  uint64_t v45;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  if (*(_DWORD *)(v8 + 84))
    v10 = *(_QWORD *)(v8 + 64);
  else
    v10 = *(_QWORD *)(v8 + 64) + 1;
  v11 = (v9 | v7) <= 7 && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0;
  if (v11
    && (v12 = *(_QWORD *)(v6 + 64) + 7,
        v13 = ((((((((((v12 + ((v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
                + 47) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + (v9 | 7)
            + 8,
        ((((v9 + 16) & ~v9) + v10 + 7 + (v13 & ~(v9 | 7))) & 0xFFFFFFFFFFFFFFF8) + 40 <= 0x18))
  {
    __n = v10;
    v14 = ~(v9 | 7);
    v44 = ((v9 + 16) & ~v9) + v10 + 7;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v15 = ((unint64_t)a1 + v7 + 24) & ~v7;
    v45 = v5;
    v16 = ((unint64_t)a2 + v7 + 24) & ~v7;
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v15, v16);
    v17 = (_OWORD *)((v12 + v15) & 0xFFFFFFFFFFFFFFF8);
    v18 = (_OWORD *)((v12 + v16) & 0xFFFFFFFFFFFFFFF8);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = (_QWORD *)(((unint64_t)v18 + 39) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v20;
    v22 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    v24 = *(_QWORD *)v23;
    *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
    *(_QWORD *)v22 = v24;
    v25 = ((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8;
    v26 = ((unint64_t)v20 + 31) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(_QWORD *)(v26 + 24);
    *(_QWORD *)(v25 + 24) = v27;
    *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
    v28 = **(void (***)(unint64_t, unint64_t, uint64_t))(v27 - 8);
    swift_bridgeObjectRetain();
    v28(v25, v26, v27);
    v29 = (_QWORD *)((v25 + 47) & 0xFFFFFFFFFFFFF8);
    v30 = (_QWORD *)((v26 + 47) & 0xFFFFFFFFFFFFF8);
    *v29 = *v30;
    *(_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8);
    v31 = (_QWORD *)(((unint64_t)v4 + v13) & v14);
    v32 = (_QWORD *)(((unint64_t)a2 + v13) & v14);
    *v31 = *v32;
    v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    v34 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v33 = *v34;
    v35 = (void *)(((unint64_t)v33 + v9 + 8) & ~v9);
    v36 = (const void *)(((unint64_t)v34 + v9 + 8) & ~v9);
    v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
    swift_retain();
    swift_retain();
    if (v37(v36, 1, v45))
    {
      memcpy(v35, v36, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v35, v36, v45);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v35, 0, 1, v45);
    }
    v39 = ((unint64_t)v31 + v44) & 0xFFFFFFFFFFFFFFF8;
    v40 = ((unint64_t)v32 + v44) & 0xFFFFFFFFFFFFFFF8;
    v41 = *(_OWORD *)v40;
    *(_OWORD *)(v39 + 9) = *(_OWORD *)(v40 + 9);
    *(_OWORD *)v39 = v41;
    *(_QWORD *)(v39 + 32) = *(_QWORD *)(v40 + 32);
  }
  else
  {
    v38 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v38 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16)));
  }
  swift_retain();
  return v4;
}

uint64_t destroy for DragReorderableLazyVStack(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 24 + a1) & ~v5;
  (*(void (**)(uint64_t))(v4 + 8))(v6);
  v7 = *(_QWORD *)(v4 + 64) + 7;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((((((v7 + v6) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  v8 = (((((((((v7 + ((v5 + 24) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
        + 47) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (a1 + (v11 | 7) + v8 + 8) & ~(v11 | 7);
  swift_release();
  swift_release();
  v13 = (v11 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v13, v9);
  return swift_release();
}

uint64_t initializeWithCopy for DragReorderableLazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(unint64_t, unint64_t, uint64_t);
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  const void *v34;
  unsigned int (*v35)(const void *, uint64_t, uint64_t);
  int v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 24 + a1) & ~v7;
  v9 = (v7 + 24 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 39) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v11 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v14;
  v16 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  v19 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)(v20 + 24);
  *(_QWORD *)(v19 + 24) = v21;
  *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
  v22 = **(void (***)(unint64_t, unint64_t, uint64_t))(v21 - 8);
  swift_bridgeObjectRetain();
  v22(v19, v20, v21);
  v23 = (_QWORD *)((v19 + 47) & 0xFFFFFFFFFFFFF8);
  v24 = (_QWORD *)((v20 + 47) & 0xFFFFFFFFFFFFF8);
  *v23 = *v24;
  *(_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8);
  v25 = *(_QWORD *)(a3 + 24);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = ((((((((((v10 + ((v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + (v27 | 7)
      + 8;
  v29 = (v28 + a1) & ~(v27 | 7);
  v30 = (v28 + a2) & ~(v27 | 7);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v31 = (_QWORD *)((v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)((v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = (void *)(((unint64_t)v31 + v27 + 8) & ~v27);
  v34 = (const void *)(((unint64_t)v32 + v27 + 8) & ~v27);
  v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
  swift_retain();
  swift_retain();
  if (v35(v34, 1, v25))
  {
    v36 = *(_DWORD *)(v26 + 84);
    v37 = *(_QWORD *)(v26 + 64);
    if (v36)
      v38 = *(_QWORD *)(v26 + 64);
    else
      v38 = v37 + 1;
    memcpy(v33, v34, v38);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v33, v34, v25);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v33, 0, 1, v25);
    v36 = *(_DWORD *)(v26 + 84);
    v37 = *(_QWORD *)(v26 + 64);
  }
  v39 = v37 + ((v27 + 16) & ~v27);
  if (!v36)
    ++v39;
  v40 = ((v29 | 7) + v39) & 0xFFFFFFFFFFFFFFF8;
  v41 = ((v30 | 7) + v39) & 0xFFFFFFFFFFFFFFF8;
  v42 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 9) = *(_OWORD *)(v41 + 9);
  *(_OWORD *)v40 = v42;
  *(_QWORD *)(v40 + 32) = *(_QWORD *)(v41 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DragReorderableLazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  char v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 24 + a1) & ~v7;
  v9 = (v7 + 24 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (v10 + v8) & 0xFFFFFFFFFFFFFFF8;
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v11 = *v12;
  *(_QWORD *)(v11 + 8) = v12[1];
  *(_QWORD *)(v11 + 16) = v12[2];
  *(_QWORD *)(v11 + 24) = v12[3];
  v11 += 39;
  v13 = (_QWORD *)(((unint64_t)v12 + 39) & 0xFFFFFFFFFFFFFFF8);
  v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8) = *v13;
  v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = v14 & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = v18;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v15 & 0xFFFFFFFFFFFFFFF8), (uint64_t *)(((unint64_t)v13 + 31) & 0xFFFFFFFFFFFFFFF8));
  v19 = (_QWORD *)(((v15 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((((unint64_t)v13 + 31) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8);
  *v19 = *v20;
  *(_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
  v21 = (((((((((v10 + ((v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)(a3 + 24);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = v21 + (v24 | 7) + 8;
  v26 = (v25 + a1) & ~(v24 | 7);
  v27 = (v25 + a2) & ~(v24 | 7);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  swift_retain();
  swift_release();
  v28 = (_QWORD *)((v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)((v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  swift_retain();
  swift_release();
  v30 = (void *)(((unint64_t)v28 + v24 + 8) & ~v24);
  v31 = (void *)(((unint64_t)v29 + v24 + 8) & ~v24);
  v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v28) = v32(v30, 1, v22);
  v33 = v32(v31, 1, v22);
  if ((_DWORD)v28)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v30, v31, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v30, 0, 1, v22);
      goto LABEL_10;
    }
LABEL_6:
    if (*(_DWORD *)(v23 + 84))
      v34 = *(_QWORD *)(v23 + 64);
    else
      v34 = *(_QWORD *)(v23 + 64) + 1;
    memcpy(v30, v31, v34);
    goto LABEL_10;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v30, v22);
    goto LABEL_6;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v30, v31, v22);
LABEL_10:
  v35 = *(_QWORD *)(v23 + 64) + ((v24 + 16) & ~v24);
  if (!*(_DWORD *)(v23 + 84))
    ++v35;
  v36 = ((v26 | 7) + v35) & 0xFFFFFFFFFFFFFFF8;
  v37 = ((v27 | 7) + v35) & 0xFFFFFFFFFFFFFFF8;
  v38 = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *(_BYTE *)(v36 + 8) = v38;
  v39 = *(_BYTE *)(v37 + 24);
  *(_QWORD *)(v36 + 16) = *(_QWORD *)(v37 + 16);
  *(_BYTE *)(v36 + 24) = v39;
  *(_QWORD *)(v36 + 32) = *(_QWORD *)(v37 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for DragReorderableLazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  const void *v34;
  int v35;
  size_t v36;
  size_t v37;
  size_t v38;
  size_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 24 + a1) & ~v7;
  v9 = (v7 + 24 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = (_QWORD *)(((unint64_t)v11 + 39) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v12 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  v19 = ((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_OWORD *)v20;
  v21 = *(_OWORD *)(v20 + 16);
  *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
  *(_OWORD *)v19 = v22;
  *(_OWORD *)(v19 + 16) = v21;
  v23 = (_QWORD *)((v19 + 47) & 0xFFFFFFFFFFFFF8);
  v24 = (_QWORD *)((v20 + 47) & 0xFFFFFFFFFFFFF8);
  *v23 = *v24;
  *(_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8);
  v25 = *(_QWORD *)(a3 + 24);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = ((((((((((v10 + ((v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + (v27 | 7)
      + 8;
  v29 = (v28 + a1) & ~(v27 | 7);
  v30 = (v28 + a2) & ~(v27 | 7);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v31 = (_QWORD *)((v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)((v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = (void *)(((unint64_t)v31 + v27 + 8) & ~v27);
  v34 = (const void *)(((unint64_t)v32 + v27 + 8) & ~v27);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v34, 1, v25))
  {
    v35 = *(_DWORD *)(v26 + 84);
    v36 = *(_QWORD *)(v26 + 64);
    if (v35)
      v37 = v36;
    else
      v37 = v36 + 1;
    memcpy(v33, v34, v37);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 32))(v33, v34, v25);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v33, 0, 1, v25);
    v35 = *(_DWORD *)(v26 + 84);
    v36 = *(_QWORD *)(v26 + 64);
  }
  v38 = v36 + ((v27 + 16) & ~v27);
  if (!v35)
    ++v38;
  v39 = (v29 | 7) + v38;
  v40 = ((v30 | 7) + v38) & 0xFFFFFFFFFFFFFFF8;
  v41 = *(_OWORD *)v40;
  v42 = *(_OWORD *)(v40 + 16);
  v39 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v39 + 32) = *(_QWORD *)(v40 + 32);
  *(_OWORD *)v39 = v41;
  *(_OWORD *)(v39 + 16) = v42;
  return a1;
}

uint64_t assignWithTake for DragReorderableLazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  uint64_t (*v38)(void *, uint64_t, uint64_t);
  int v39;
  size_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  char v45;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 24 + a1) & ~v8;
  v10 = (v8 + 24 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64) + 7;
  v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  v13 = (_QWORD *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v12 = *v13;
  *(_QWORD *)(v12 + 8) = v13[1];
  *(_QWORD *)(v12 + 16) = v13[2];
  *(_QWORD *)(v12 + 24) = v13[3];
  v12 += 39;
  v14 = (_QWORD *)(((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14;
  v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8) = *v14;
  v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRelease();
  v18 = v16 & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = v20;
  v21 = v17 & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v17 & 0xFFFFFFFFFFFFFFF8);
  v23 = *(_OWORD *)v22;
  v24 = *(_OWORD *)(v22 + 16);
  *(_QWORD *)(v21 + 32) = *(_QWORD *)(v22 + 32);
  *(_OWORD *)v21 = v23;
  *(_OWORD *)(v21 + 16) = v24;
  v25 = (_QWORD *)(((v17 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8);
  v26 = (_QWORD *)((v22 + 47) & 0xFFFFFFFFFFFFF8);
  *v25 = *v26;
  *(_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8);
  v27 = (((((((((v11 + ((v8 + 24) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)(a3 + 24);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = v27 + (v30 | 7) + 8;
  v32 = (v31 + a1) & ~(v30 | 7);
  v33 = (v31 + a2) & ~(v30 | 7);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  swift_release();
  v34 = (_QWORD *)((v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)((v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v34 = *v35;
  swift_release();
  v36 = (void *)(((unint64_t)v34 + v30 + 8) & ~v30);
  v37 = (void *)(((unint64_t)v35 + v30 + 8) & ~v30);
  v38 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  LODWORD(v35) = v38(v36, 1, v28);
  v39 = v38(v37, 1, v28);
  if ((_DWORD)v35)
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 32))(v36, v37, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v36, 0, 1, v28);
      goto LABEL_10;
    }
LABEL_6:
    if (*(_DWORD *)(v29 + 84))
      v40 = *(_QWORD *)(v29 + 64);
    else
      v40 = *(_QWORD *)(v29 + 64) + 1;
    memcpy(v36, v37, v40);
    goto LABEL_10;
  }
  if (v39)
  {
    (*(void (**)(void *, uint64_t))(v29 + 8))(v36, v28);
    goto LABEL_6;
  }
  (*(void (**)(void *, void *, uint64_t))(v29 + 40))(v36, v37, v28);
LABEL_10:
  v41 = *(_QWORD *)(v29 + 64) + ((v30 + 16) & ~v30);
  if (!*(_DWORD *)(v29 + 84))
    ++v41;
  v42 = ((v32 | 7) + v41) & 0xFFFFFFFFFFFFFFF8;
  v43 = ((v33 | 7) + v41) & 0xFFFFFFFFFFFFFFF8;
  v44 = *(_BYTE *)(v43 + 8);
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *(_BYTE *)(v42 + 8) = v44;
  v45 = *(_BYTE *)(v43 + 24);
  *(_QWORD *)(v42 + 16) = *(_QWORD *)(v43 + 16);
  *(_BYTE *)(v42 + 24) = v45;
  *(_QWORD *)(v42 + 32) = *(_QWORD *)(v43 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DragReorderableLazyVStack(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  if (v10 <= v6)
    v11 = v6;
  else
    v11 = v10;
  if (v8)
    v12 = 7;
  else
    v12 = 8;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v4 + 80);
  v14 = *(_QWORD *)(v4 + 64) + 7;
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = v15 | 7;
  v17 = ((((((((((v14 + ((v13 + 24) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + (v15 | 7)
      + 8;
  if (v11 < a2)
  {
    if (((((v12 + *(_QWORD *)(v7 + 64) + ((v15 + 16) & ~v15) + (v17 & ~v16)) & 0xFFFFFFFFFFFFFFF8) + 40) & 0xFFFFFFF8) != 0)
      v18 = 2;
    else
      v18 = a2 - v11 + 1;
    if (v18 >= 0x10000)
      v19 = 4;
    else
      v19 = 2;
    if (v18 < 0x100)
      v19 = 1;
    if (v18 >= 2)
      v20 = v19;
    else
      v20 = 0;
    __asm { BR              X21 }
  }
  if (v6 >= v10)
  {
    v24 = (a1 + v13 + 24) & ~v13;
    if (v5 >= 0x7FFFFFFF)
      return (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 48))(v24, *(unsigned int *)(v4 + 84));
    v23 = *(_QWORD *)((((v14 + v24) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
  }
  else
  {
    v22 = (unint64_t *)((((v17 + a1) & ~v16) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v9 & 0x80000000) != 0)
    {
      v25 = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v22 + v15 + 8) & ~v15);
      if (v25 >= 2)
        return v25 - 1;
      else
        return 0;
    }
    v23 = *v22;
  }
  if (v23 >= 0xFFFFFFFF)
    LODWORD(v23) = -1;
  return (v23 + 1);
}

void storeEnumTagSinglePayload for DragReorderableLazyVStack(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  v6 = 0u;
  v8 = *(_QWORD *)(a4 + 16);
  v7 = *(_QWORD *)(a4 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) <= 0x7FFFFFFFu)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = *(_QWORD *)(v7 - 8);
  v12 = *(_DWORD *)(v11 + 84);
  if (v12)
    v13 = v12 - 1;
  else
    v13 = 0;
  if (v13 <= 0x7FFFFFFF)
    v14 = 0x7FFFFFFF;
  else
    v14 = v13;
  if (v14 <= v10)
    v15 = v10;
  else
    v15 = v14;
  v16 = *(unsigned __int8 *)(v11 + 80);
  v17 = ((((((((((*(_QWORD *)(v9 + 64)
                + 7
                + ((*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFFFFFFFFFF8)
              + 39) & 0xFFFFFFFFFFFFFFF8)
            + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8
      + (v16 | 7);
  v18 = *(_QWORD *)(v11 + 64);
  if (!v12)
    ++v18;
  if (v15 < a3)
  {
    v19 = a3 - v15;
    if ((((((_DWORD)v16 + 16) & ~(_DWORD)v16) + (_DWORD)v18 + (v17 & ~(v16 | 7)) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8)
      v20 = v19 + 1;
    else
      v20 = 2;
    if (v20 >= 0x10000)
      v6 = 4;
    else
      v6 = 2;
    if (v20 < 0x100)
      v6 = 1;
    if (v20 < 2)
      v6 = 0;
  }
  if (a2 > v15)
  {
    if ((((((_DWORD)v16 + 16) & ~(_DWORD)v16) + (_DWORD)v18 + (v17 & ~(v16 | 7)) + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
    {
      v21 = ~v15 + a2;
      bzero(a1, ((((v16 + 16) & ~v16) + v18 + (v17 & ~(v16 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 40);
      *a1 = v21;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X25 }
}

void sub_187920C54(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  int v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  *((_BYTE *)v28 + v29) = 0;
  if (!(_DWORD)a2)
    return;
  if (a1 >= v27)
  {
    if (a1 >= a2)
    {
      v36 = ((unint64_t)v28 + a6 + 24) & v30;
      if (v19 >= 0x7FFFFFFF)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v36, a2, v19, a9);
        return;
      }
      v35 = (_QWORD *)((((a5 + v36) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
      if ((a2 & 0x80000000) == 0)
      {
LABEL_14:
        *v35 = (a2 - 1);
        return;
      }
LABEL_18:
      *v35 = a2 ^ 0x80000000;
      return;
    }
    if ((_DWORD)v22)
    {
      v34 = ~a1 + a2;
      bzero(v28, v22);
      *v28 = v34;
    }
  }
  else
  {
    v32 = (void *)(((unint64_t)v28 + a8) & v31);
    if (v27 < a2)
    {
      if ((_DWORD)v21)
      {
        if (v21 <= 3)
          v33 = v21;
        else
          v33 = 4;
        bzero(v32, v21);
        __asm { BR              X10 }
      }
      return;
    }
    v35 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v24 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_18;
    }
    v37 = (uint64_t)v35 + a7 + 8;
    if (v24 >= a2)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v37 & v23, (a2 + 1), a3, a4);
    }
    else if ((_DWORD)v20)
    {
      if (v20 <= 3)
        v38 = v20;
      else
        v38 = 4;
      bzero((void *)(v37 & v23), v20);
      __asm { BR              X10 }
    }
  }
}

void sub_187920E20()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187920E2CLL);
}

_UNKNOWN **sub_187920E48()
{
  return &protocol witness table for DragReorderableLayoutView<A>;
}

_UNKNOWN **sub_187920E54()
{
  return &protocol witness table for DragReorderableLayoutView<A>;
}

uint64_t sub_187920E60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for DragSourceProxyModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t View.navigationTitle(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;

  v14 = a3 & 1;
  Text.assertUnstyled(_:options:)();
  v15 = a3 & 1;
  *(_QWORD *)&v17 = a1;
  *((_QWORD *)&v17 + 1) = a2;
  v18 = v15;
  v19 = a4;
  v20 = 1;
  v21 = 5;
  v22 = 0;
  v23 = 3;
  outlined copy of Text.Storage(a1, a2, v14);
  swift_bridgeObjectRetain();
  View.navigationTitlePreferenceTransform(adding:)(&v17, a5, a6, a7);
  outlined consume of Text?(a1, a2, v15, a4);
  return outlined consume of Transaction?(1);
}

uint64_t View.navigationTitle(_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = Text.init(_:tableName:bundle:comment:)();
  v8 = v7;
  v10 = v9 & 1;
  View.navigationTitle(_:)(v6, v7, v9 & 1, v11, a1, a2, a3);
  outlined consume of Text.Storage(v6, v8, v10);
  return swift_bridgeObjectRelease();
}

uint64_t View.navigationTitle<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;

  v7 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v9 + 16))((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v10 = Text.init<A>(_:)();
  v12 = v11;
  v14 = v13;
  *(_QWORD *)&v18 = v10;
  *((_QWORD *)&v18 + 1) = v11;
  v16 = v15 & 1;
  v19 = v15 & 1;
  v20 = v13;
  v21 = 1;
  v22 = 5;
  v23 = 0;
  v24 = 3;
  View.navigationTitlePreferenceTransform(adding:)(&v18, a2, a3, a4);
  outlined consume of Text?(v10, v12, v16, v14);
  return outlined consume of Transaction?(1);
}

uint64_t View.navigationBarTitleDisplayMode(_:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v4;
  _OWORD v6[2];
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = 8 * *a1;
  memset(v6, 0, sizeof(v6));
  v7 = 1;
  v8 = 0x10300u >> v4;
  v9 = 0;
  v10 = 3;
  return View.navigationTitlePreferenceTransform(adding:)(v6, a2, a3, a4);
}

uint64_t View.navigationTitlePreferenceTransform(adding:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _OWORD v22[2];
  _OWORD v23[2];

  v19[1] = a4;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v7 = type metadata accessor for ModifiedContent();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v19 - v10;
  v12 = a1[1];
  v22[0] = *a1;
  v22[1] = v12;
  v23[0] = a1[2];
  *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)((char *)a1 + 41);
  v13 = (_OWORD *)swift_allocObject();
  v14 = a1[1];
  v13[1] = *a1;
  v13[2] = v14;
  v13[3] = a1[2];
  *(_OWORD *)((char *)v13 + 57) = *(_OWORD *)((char *)a1 + 41);
  outlined retain of NavigationTitleStorage((uint64_t *)v22);
  View.transactionalPreferenceTransform<A>(key:transform:)((uint64_t)&type metadata for NavigationTitleKey, (uint64_t)partial apply for closure #1 in View.navigationTitlePreferenceTransform(adding:), (uint64_t)v13, a2, (uint64_t)&type metadata for NavigationTitleKey, a3, (uint64_t)&protocol witness table for NavigationTitleKey);
  swift_release();
  v21[0] = closure #2 in View.navigationTitlePreferenceTransform(adding:);
  v21[1] = 0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v16 = v15;
  v20[0] = a3;
  v20[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v20);
  MEMORY[0x18D75B4AC](v21, v7, v16, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void View.navigationTitle<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View.navigationTitle<A>(_:icon:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;

  v26 = a8;
  v24 = a9;
  v25 = a6;
  v15 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v27 = 0;
  v19 = v18 & 1;
  Text.assertUnstyled(_:options:)();
  v20 = a3 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a5, a7);
  v21 = AnyView.init<A>(_:)();
  *(_QWORD *)&v27 = a1;
  *((_QWORD *)&v27 + 1) = a2;
  v28 = v20;
  v29 = a4;
  v30 = 1;
  v31 = 5;
  v32 = v21;
  v33 = 3;
  outlined copy of Text.Storage(a1, a2, v19);
  swift_bridgeObjectRetain();
  View.navigationTitlePreferenceTransform(adding:)(&v27, v25, v26, v24);
  outlined consume of Text?(a1, a2, v20, a4);
  outlined consume of Transaction?(1);
  return swift_release();
}

uint64_t View.navigationTitle<A>(_:icon:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = Text.init(_:tableName:bundle:comment:)();
  v12 = v11;
  v14 = v13 & 1;
  View.navigationTitle<A>(_:icon:)(v10, v11, v13 & 1, v15, a1, a2, a3, a4, a5);
  outlined consume of Text.Storage(v10, v12, v14);
  return swift_bridgeObjectRelease();
}

uint64_t View.navigationTitle<A, B>(_:icon:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v21;

  v11 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v13 + 16))((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v14 = Text.init<A>(_:)();
  v16 = v15;
  v18 = v17 & 1;
  View.navigationTitle<A>(_:icon:)(v14, v15, v17 & 1, v19, a2, a3, a4, a5, a6);
  outlined consume of Text.Storage(v14, v16, v18);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in View.navigationTitlePreferenceTransform(adding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    if (v6 == 1)
    {
      v7 = *(_BYTE *)(a3 + 56);
      v8 = *(_QWORD *)(a3 + 48);
      v9 = *(unsigned __int8 *)(a3 + 40);
      v10 = *(_QWORD *)(a3 + 32);
      v11 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v9;
      *(_QWORD *)(a1 + 48) = v8;
      *(_BYTE *)(a1 + 56) = v7;
      result = (uint64_t)outlined retain of NavigationTitleStorage((uint64_t *)a3);
      if (*(_QWORD *)(a1 + 24) == 1)
        return result;
LABEL_16:
      v18 = *(_QWORD *)(a1 + 32);
      swift_retain();
      result = outlined consume of Transaction?(v18);
      *(_QWORD *)(a1 + 32) = a2;
      return result;
    }
    v16 = *(unsigned __int8 *)(a1 + 40);
    if (v16 == 5)
      goto LABEL_8;
    if (*(_QWORD *)(a1 + 48))
      goto LABEL_16;
  }
  else
  {
    v13 = *(_QWORD *)a3;
    v14 = *(_QWORD *)(a3 + 8);
    v15 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    outlined copy of Text?(*(_QWORD *)a3, v14, v15, v6);
    v16 = *(unsigned __int8 *)(a1 + 40);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v6;
    if (v16 == 5)
LABEL_8:
      LOBYTE(v16) = *(_BYTE *)(a3 + 40);
  }
  *(_BYTE *)(a1 + 40) = v16;
  result = *(_QWORD *)(a1 + 48);
  if (!result)
    result = swift_retain();
  *(_QWORD *)(a1 + 48) = result;
  v17 = *(unsigned __int8 *)(a1 + 56);
  if (v17 == 3)
    LOBYTE(v17) = *(_BYTE *)(a3 + 56);
  *(_BYTE *)(a1 + 56) = v17;
  if (v6 != 1)
    goto LABEL_16;
  return result;
}

uint64_t closure #2 in View.navigationTitlePreferenceTransform(adding:)(uint64_t result)
{
  *(_BYTE *)(result + 48) = 0;
  return result;
}

uint64_t View.navigationTitle(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[12];
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t (*v44)(_QWORD);
  uint64_t v45;
  uint64_t (*v46)(_QWORD);
  uint64_t v47;
  char v48;
  int v49;
  char v50;
  __int16 v51;

  v38 = a6;
  v36 = a7;
  v37 = a5;
  v33 = a3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v31[-v13];
  v15 = type metadata accessor for NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = &v31[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = (uint64_t)v18 + *(int *)(v19 + 60);
  v21 = LocalizedStringKey.init(stringLiteral:)();
  v34 = v22;
  v35 = v21;
  v32 = v23;
  v25 = v24;
  v40 = a1;
  v41 = a2;
  *(_QWORD *)&v42 = a3;
  *((_QWORD *)&v42 + 1) = a4;
  type metadata accessor for Binding<String>();
  v27 = v26;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75B9C8](v39, v27);
  v40 = v39[0];
  v41 = v39[1];
  v42 = 0u;
  v43 = 0u;
  v44 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v45 = 0;
  v46 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  v51 = 2;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v14, 1, 1, v28);
  specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v40, a1, a2, v33, a4, 0, 0, 0, v20, 0, 0, 0, (uint64_t)v14, v35, v34, v32 & 1, v25);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for TextField<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v20, 0, 1, v29);
  *v18 = 0;
  MEMORY[0x18D75B4AC](v18, v37, v15, v38);
  return outlined destroy of NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>((uint64_t)v18);
}

void View.navigationSubtitle(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.navigationSubtitle<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.navigationStackHistoryUTType(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t type metadata accessor for NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>;
  if (!lazy cache variable for type metadata for NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TextField<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
    lazy protocol witness table accessor for type TextField<Text> and conformance TextField<A>();
    type metadata accessor for NavigationPropertiesModifier();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextField<Text> and conformance TextField<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TextField<Text> and conformance TextField<A>;
  if (!lazy protocol witness table cache variable for type TextField<Text> and conformance TextField<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TextField<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextField<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextField<Text> and conformance TextField<A>);
  }
  return result;
}

uint64_t outlined destroy of NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_187921C20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

uint64_t sub_187921D08(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t get_witness_table_7SwiftUI4ViewRzSyRd__r__lAA15ModifiedContentVyADyxAA40TransactionalPreferenceTransformModifierVyAA18NavigationTitleKeyVGGAA01_ghI0VyAA07ToolbarL0VGGAaBHPAjaBHPxAaBHD1__AiA0cI0HPyHCHC_AoaQHPyHCHCTm(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

uint64_t sub_187921DFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 24);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

uint64_t sub_187921EE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for NavigationPropertiesModifier<A, B, C>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_187921F40(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t destroy for NavigationTitleStorage(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 32) != 1)
    swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for NavigationTitleStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = *(_QWORD *)(a2 + 32);
  if (v9 != 1)
    v9 = swift_retain();
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationTitleStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      v5 = *(_QWORD *)a2;
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
  }
  else if (v4)
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v12, v13);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  v16 = (uint64_t *)(a1 + 32);
  v17 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) == 1)
  {
    if (v17 != 1)
    {
      *v16 = v17;
      swift_retain();
      goto LABEL_16;
    }
    v18 = 1;
  }
  else
  {
    if (v17 != 1)
    {
      *v16 = v17;
      swift_retain();
      swift_release();
      goto LABEL_16;
    }
    outlined destroy of Transaction(a1 + 32);
    v18 = *(_QWORD *)(a2 + 32);
  }
  *v16 = v18;
LABEL_16:
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for NavigationTitleStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD *)(a2 + 24);
    if (v4)
    {
      v5 = *(_BYTE *)(a2 + 16);
      v6 = *(_QWORD *)a1;
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(_BYTE *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v5;
      outlined consume of Text.Storage(v6, v7, v8);
      *(_QWORD *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1);
  }
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
LABEL_6:
  v10 = (uint64_t *)(a1 + 32);
  v11 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) != 1)
  {
    if (v11 != 1)
    {
      *v10 = v11;
      swift_release();
      goto LABEL_11;
    }
    outlined destroy of Transaction(a1 + 32);
    v11 = 1;
  }
  *v10 = v11;
LABEL_11:
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t *specialized static NavigationTitleKey.reduce(value:nextValue:)(uint64_t *result, _QWORD *(*a2)(__int128 *__return_ptr))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;

  v2 = result;
  v3 = result[3];
  if (v3 == 1)
  {
    result = a2(&v26);
    v4 = v29;
    v5 = v30;
    v6 = v27;
    *(_OWORD *)v2 = v26;
    *((_OWORD *)v2 + 1) = v6;
    *((_OWORD *)v2 + 2) = v28;
    v2[6] = v4;
    *((_BYTE *)v2 + 56) = v5;
  }
  else
  {
    v7 = *result;
    v8 = result[1];
    v9 = result[2];
    if (!v3 || *((_BYTE *)result + 40) == 5 || !result[6])
    {
      result = a2(&v26);
      v10 = *((_QWORD *)&v27 + 1);
      if (*((_QWORD *)&v27 + 1) != 1)
      {
        v12 = *((_QWORD *)&v26 + 1);
        v11 = v26;
        v13 = v27;
        v14 = v28;
        v15 = v29;
        v16 = v30;
        v17 = BYTE8(v28);
        if (!v3)
        {
          v8 = *((_QWORD *)&v26 + 1);
          v7 = v26;
          v9 = v27;
          v18 = v28;
          outlined copy of Text?(v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1));
          v14 = v18;
          v13 = v9;
          v12 = v8;
          v11 = v7;
          v3 = v10;
        }
        *v2 = v7;
        v2[1] = v8;
        v2[2] = v9;
        v2[3] = v3;
        v19 = *((unsigned __int8 *)v2 + 40);
        if (v19 == 5)
          LOBYTE(v19) = v17;
        *((_BYTE *)v2 + 40) = v19;
        v20 = v2[6];
        if (!v20)
        {
          v21 = v11;
          v22 = v12;
          v23 = v13;
          v24 = v14;
          swift_retain();
          v14 = v24;
          v13 = v23;
          v12 = v22;
          v11 = v21;
          v20 = v15;
        }
        result = (uint64_t *)outlined consume of NavigationTitleStorage?(v11, v12, v13, v10, v14);
        v2[6] = v20;
        v25 = *((unsigned __int8 *)v2 + 56);
        if (v25 == 3)
          LOBYTE(v25) = v16;
        *((_BYTE *)v2 + 56) = v25;
      }
    }
  }
  return result;
}

uint64_t *outlined retain of NavigationTitleStorage(uint64_t *a1)
{
  uint64_t v2;

  v2 = a1[4];
  outlined copy of Text?(*a1, a1[1], a1[2], a1[3]);
  outlined copy of Transaction?(v2);
  swift_retain();
  return a1;
}

uint64_t sub_187922430()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 48) != 1)
    swift_release();
  swift_release();
  return swift_deallocObject();
}

void ImmersiveSpace.init(id:for:content:)()
{
  ImmersiveSpace.init(id:for:content:)();
}

{
  swift_bridgeObjectRelease();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ImmersiveSpace.init(id:for:content:defaultValue:)()
{
  ImmersiveSpace.init(id:for:content:defaultValue:)();
}

{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ImmersiveSpace.init(for:content:defaultValue:)()
{
  ImmersiveSpace.init(for:content:defaultValue:)();
}

{
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ImmersiveSpace.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ImmersiveSpace.init<A>(content:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  ImmersiveSpace.init<A>(content:)();
}

void ImmersiveSpace.init<A>(id:content:)()
{
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  ImmersiveSpace.init<A>(id:content:)();
}

void ImmersiveSpace.init<A>(id:for:content:)()
{
  ImmersiveSpace.init(id:for:content:)();
}

void ImmersiveSpace.init<A>(for:content:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ImmersiveSpace.init<A>(id:for:content:defaultValue:)()
{
  ImmersiveSpace.init(id:for:content:defaultValue:)();
}

void ImmersiveSpace.init<A>(for:content:defaultValue:)()
{
  ImmersiveSpace.init(for:content:defaultValue:)();
}

void NoImmersiveSpaceData.init(from:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void NoImmersiveSpaceData.encode(to:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void NoImmersiveSpaceData.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static NoImmersiveSpaceData.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void NoImmersiveSpaceData.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for Scene.Body : Scene in ImmersiveSpace<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type NoImmersiveSpaceData and conformance NoImmersiveSpaceData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NoImmersiveSpaceData and conformance NoImmersiveSpaceData;
  if (!lazy protocol witness table cache variable for type NoImmersiveSpaceData and conformance NoImmersiveSpaceData)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NoImmersiveSpaceData, &type metadata for NoImmersiveSpaceData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NoImmersiveSpaceData and conformance NoImmersiveSpaceData);
  }
  return result;
}

void type metadata accessor for ImmersiveSpace()
{
  JUMPOUT(0x18D75FF28);
}

ValueMetadata *type metadata accessor for NoImmersiveSpaceData()
{
  return &type metadata for NoImmersiveSpaceData;
}

_UNKNOWN **sub_187922710()
{
  return &protocol witness table for _EmptyScene;
}

void ImmersiveSpace.init<>(id:content:)()
{
  ImmersiveSpace.init<A>(id:content:)();
}

{
  ImmersiveSpace.init<A>(id:content:)();
}

void ImmersiveSpace.init<>(content:)()
{
  ImmersiveSpace.init<A>(content:)();
}

{
  ImmersiveSpace.init<A>(content:)();
}

void ImmersiveSpace.init(for:content:)()
{
  ImmersiveSpace.init<A>(for:content:)();
}

_BYTE *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScreenEdgesSystemGestureKey(_BYTE *result, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  _WORD *v2;
  char v3;
  char v4;
  uint64_t v5;

  v2 = result;
  if (result[1] == 1)
  {
    result = a2(&v5);
    v3 = 0;
    v4 = v5;
    if (BYTE1(v5))
      v4 = 0;
  }
  else
  {
    v4 = *result;
    v3 = *result;
  }
  *v2 = (v3 | v4);
  return result;
}

uint64_t View.defersSystemGestures(on:)(char a1)
{
  *(_BYTE *)(swift_allocObject() + 16) = a1;
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

uint64_t sub_18792286C()
{
  return swift_deallocObject();
}

char *partial apply for closure #1 in View.defersSystemGestures(on:)(char *result)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(v1 + 16);
  if ((result[1] & 1) != 0)
  {
    v3 = 0;
    result[1] = 0;
  }
  else
  {
    v3 = *result;
  }
  *result = v3 | v2;
  return result;
}

uint64_t sub_1879228A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _PreferenceTransformModifier<ScreenEdgesSystemGestureKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<ScreenEdgesSystemGestureKey> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _PreferenceTransformModifier<ScreenEdgesSystemGestureKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceTransformModifier<ScreenEdgesSystemGestureKey>)
  {
    v0 = type metadata accessor for _PreferenceTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ScreenEdgesSystemGestureKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<ScreenEdgesSystemGestureKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<ScreenEdgesSystemGestureKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<ScreenEdgesSystemGestureKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<ScreenEdgesSystemGestureKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ScreenEdgesSystemGestureKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenEdgesSystemGestureKey()
{
  return &type metadata for ScreenEdgesSystemGestureKey;
}

uint64_t DefaultDatePickerStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v4 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, v8, v9, v10);
  v12 = v11;
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v26 - v18;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, type metadata accessor for DatePickerStyleConfiguration);
  outlined init with copy of Date?((uint64_t)v7, (uint64_t)v15, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined init with copy of Date?((uint64_t)&v7[v4[6]], (uint64_t)&v15[v12[9]], (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  outlined init with copy of Date?((uint64_t)&v7[v4[7]], (uint64_t)&v15[v12[10]], (unint64_t *)&lazy cache variable for type metadata for Date?, v20);
  *(_QWORD *)&v15[v12[11]] = *(_QWORD *)&v7[v4[8]];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for DatePickerStyleConfiguration);
  outlined init with take of TableCellFormula((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v19, a2, (uint64_t (*)(_QWORD))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  v24 = type metadata accessor for StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>>(0, v21, v22, v23);
  return closure #2 in DefaultDatePickerStyle.makeBody(configuration:)(a1, a2 + *(int *)(v24 + 52));
}

uint64_t closure #1 in DefaultDatePickerStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v22;

  v4 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, v8, v9, v10);
  v12 = v11;
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v22 - v18;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, type metadata accessor for DatePickerStyleConfiguration);
  outlined init with copy of Date?((uint64_t)v7, (uint64_t)v15, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined init with copy of Date?((uint64_t)&v7[v4[6]], (uint64_t)&v15[v12[9]], (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  outlined init with copy of Date?((uint64_t)&v7[v4[7]], (uint64_t)&v15[v12[10]], (unint64_t *)&lazy cache variable for type metadata for Date?, v20);
  *(_QWORD *)&v15[v12[11]] = *(_QWORD *)&v7[v4[8]];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for DatePickerStyleConfiguration);
  outlined init with take of TableCellFormula((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v19, a2, (uint64_t (*)(_QWORD))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
}

uint64_t closure #2 in DefaultDatePickerStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v83[2];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v96 = a2;
  v3 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  MEMORY[0x1E0C80A78](v3, v4);
  v95 = (uint64_t)v83 - v5;
  v6 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, (uint64_t)&type metadata for InsetGroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetGroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  MEMORY[0x1E0C80A78](v6, v7);
  v94 = (uint64_t)v83 - v8;
  type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v86 = (uint64_t)v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>, (uint64_t)&type metadata for GroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  MEMORY[0x1E0C80A78](v12, v13);
  v89 = (uint64_t)v83 - v14;
  v15 = (int *)type metadata accessor for CollapsibleWheelDatePickerStyle();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (_QWORD *)((char *)v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v83 - v21;
  v23 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, v27, v28, v29);
  v31 = v30;
  MEMORY[0x1E0C80A78](v30, v32);
  v34 = (char *)v83 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v84 = (uint64_t)v83 - v37;
  type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>(0, v38, v39, v40);
  v88 = v41;
  MEMORY[0x1E0C80A78](v41, v42);
  v87 = (uint64_t)v83 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>(0, v44, v45, v46);
  v91 = v47;
  MEMORY[0x1E0C80A78](v47, v48);
  v90 = (uint64_t)v83 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>(0, v50, v51, v52);
  v93 = v53;
  MEMORY[0x1E0C80A78](v53, v54);
  v92 = (uint64_t)v83 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v26, type metadata accessor for DatePickerStyleConfiguration);
  outlined init with copy of Date?((uint64_t)v26, (uint64_t)v34, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v56 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined init with copy of Date?((uint64_t)&v26[v23[6]], (uint64_t)&v34[v31[9]], (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  outlined init with copy of Date?((uint64_t)&v26[v23[7]], (uint64_t)&v34[v31[10]], (unint64_t *)&lazy cache variable for type metadata for Date?, v56);
  *(_QWORD *)&v34[v31[11]] = *(_QWORD *)&v26[v23[8]];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, type metadata accessor for DatePickerStyleConfiguration);
  v57 = v84;
  outlined init with take of TableCellFormula((uint64_t)v34, v84, (uint64_t (*)(_QWORD))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  *v18 = swift_getKeyPath();
  v58 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v85 = v59;
  swift_storeEnumTagMultiPayload();
  v60 = (uint64_t *)((char *)v18 + v15[5]);
  *v60 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v58);
  v97 = v61;
  swift_storeEnumTagMultiPayload();
  v62 = (uint64_t *)((char *)v18 + v15[6]);
  *v62 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], v58);
  v83[1] = v63;
  swift_storeEnumTagMultiPayload();
  v64 = (char *)v18 + v15[7];
  *v64 = 0;
  *((_QWORD *)v64 + 1) = 0;
  outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for CollapsibleWheelDatePickerStyle);
  v65 = (uint64_t)v22;
  v66 = (uint64_t)v22;
  v67 = v86;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v65, v86, (uint64_t (*)(_QWORD))type metadata accessor for CollapsibleWheelDatePickerStyle);
  v68 = v89;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v67, v89, (uint64_t (*)(_QWORD))type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v67, (uint64_t (*)(_QWORD))type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>);
  v69 = v57;
  v70 = v57;
  v71 = v87;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v70, v87, (uint64_t (*)(_QWORD))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  outlined init with take of StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(v68, v71 + *(int *)(v88 + 36), &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>, (uint64_t)&type metadata for GroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v66, (uint64_t (*)(_QWORD))type metadata accessor for CollapsibleWheelDatePickerStyle);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v69, (uint64_t (*)(_QWORD))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  *v18 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  v72 = (uint64_t *)((char *)v18 + v15[5]);
  *v72 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  v73 = (uint64_t *)((char *)v18 + v15[6]);
  *v73 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  v74 = (char *)v18 + v15[7];
  *v74 = 0;
  *((_QWORD *)v74 + 1) = 0;
  outlined init with take of TableCellFormula((uint64_t)v18, v66, (uint64_t (*)(_QWORD))type metadata accessor for CollapsibleWheelDatePickerStyle);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v66, v67, (uint64_t (*)(_QWORD))type metadata accessor for CollapsibleWheelDatePickerStyle);
  v75 = v94;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v67, v94, (uint64_t (*)(_QWORD))type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v67, (uint64_t (*)(_QWORD))type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>);
  v76 = v90;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v71, v90, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
  outlined init with take of StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(v75, v76 + *(int *)(v91 + 36), &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, (uint64_t)&type metadata for InsetGroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetGroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v66, (uint64_t (*)(_QWORD))type metadata accessor for CollapsibleWheelDatePickerStyle);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v71, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
  *v18 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  v77 = (uint64_t *)((char *)v18 + v15[5]);
  *v77 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  v78 = (uint64_t *)((char *)v18 + v15[6]);
  *v78 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  v79 = (char *)v18 + v15[7];
  *v79 = 0;
  *((_QWORD *)v79 + 1) = 0;
  outlined init with take of TableCellFormula((uint64_t)v18, v66, (uint64_t (*)(_QWORD))type metadata accessor for CollapsibleWheelDatePickerStyle);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v66, v67, (uint64_t (*)(_QWORD))type metadata accessor for CollapsibleWheelDatePickerStyle);
  v80 = v95;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v67, v95, (uint64_t (*)(_QWORD))type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v67, (uint64_t (*)(_QWORD))type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>);
  v81 = v92;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v76, v92, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
  outlined init with take of StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(v80, v81 + *(int *)(v93 + 36), &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v66, (uint64_t (*)(_QWORD))type metadata accessor for CollapsibleWheelDatePickerStyle);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v76, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v81, v96, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v81, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
}

uint64_t protocol witness for DatePickerStyle.makeBody(configuration:) in conformance DefaultDatePickerStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  closure #1 in DefaultDatePickerStyle.makeBody(configuration:)(a1, a2);
  v7 = type metadata accessor for StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>>(0, v4, v5, v6);
  return closure #2 in DefaultDatePickerStyle.makeBody(configuration:)(a1, a2 + *(int *)(v7 + 52));
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>>)
  {
    type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>(255, a2, a3, a4);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>(255, v5, v6, v7);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>)
  {
    type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(255, a2, a3, a4);
    type metadata accessor for DatePickerStyleModifier<CompactDatePickerStyle>(255, &lazy cache variable for type metadata for DatePickerStyleModifier<CompactDatePickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CompactDatePickerStyle and conformance CompactDatePickerStyle, (uint64_t)&type metadata for CompactDatePickerStyle);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type CompactDatePickerStyle and conformance CompactDatePickerStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompactDatePickerStyle and conformance CompactDatePickerStyle;
  if (!lazy protocol witness table cache variable for type CompactDatePickerStyle and conformance CompactDatePickerStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CompactDatePickerStyle, &type metadata for CompactDatePickerStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompactDatePickerStyle and conformance CompactDatePickerStyle);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>(255, a2, a3, a4);
    type metadata accessor for DatePickerStyleModifier<CompactDatePickerStyle>(255, &lazy cache variable for type metadata for DatePickerStyleModifier<WheelDatePickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WheelDatePickerStyle and conformance WheelDatePickerStyle, (uint64_t)&type metadata for WheelDatePickerStyle);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>(255, a2, a3, a4);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>(255, a2, a3, a4);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, (uint64_t)&type metadata for InsetGroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetGroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>)
  {
    type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(255, a2, a3, a4);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>, (uint64_t)&type metadata for GroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>)
  {
    v2 = type metadata accessor for CollapsibleWheelDatePickerStyle();
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CollapsibleWheelDatePickerStyle and conformance CollapsibleWheelDatePickerStyle, (uint64_t (*)(uint64_t))type metadata accessor for CollapsibleWheelDatePickerStyle, (uint64_t)&protocol conformance descriptor for CollapsibleWheelDatePickerStyle);
    v5 = type metadata accessor for DatePickerStyleModifier(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>);
  }
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, a3);
    type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>(255);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(a5, a3);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for DatePickerStyleModifier<CompactDatePickerStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for DatePickerStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t associated type witness table accessor for DatePickerStyle.Body : View in DefaultDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DefaultDatePickerStyle()
{
  return &type metadata for DefaultDatePickerStyle;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>> and conformance <> StaticIf<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>> and conformance <> StaticIf<A, B, C>)
  {
    v5 = type metadata accessor for StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>>(255, a2, a3, a4);
    v12[0] = lazy protocol witness table accessor for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>> and conformance <> ModifiedContent<A, B>(v5, v6, v7, v8);
    v12[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>> and conformance <> ModifiedContent<A, B>(v12[0], v9, v10, v11);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v5, v12);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>> and conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>(255, a2, a3, a4);
    v6 = v5;
    v7[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DatePicker<DatePickerStyleConfiguration.Label> and conformance DatePicker<A>, (uint64_t (*)(uint64_t))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>, (uint64_t)&protocol conformance descriptor for DatePicker<A>);
    v7[1] = &protocol witness table for DatePickerStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>> and conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>(255, a2, a3, a4);
    v6 = v5;
    v7[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    v7[1] = &protocol witness table for DatePickerStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>(255, a2, a3, a4);
    v6 = v5;
    v7[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DatePicker<DatePickerStyleConfiguration.Label> and conformance DatePicker<A>, (uint64_t (*)(uint64_t))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>, (uint64_t)&protocol conformance descriptor for DatePicker<A>);
    v7[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>, (uint64_t)&type metadata for GroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v2[0] = &protocol witness table for DatePickerStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, (uint64_t)&type metadata for InsetGroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetGroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v2[0] = &protocol witness table for DatePickerStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v2[0] = &protocol witness table for DatePickerStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t outlined init with take of StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v8;

  v8 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

SwiftUI::StepperFieldDatePickerStyle __swiftcall StepperFieldDatePickerStyle.init()()
{
  SwiftUI::StepperFieldDatePickerStyle result;

  result.presentsCalendarOverlay = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::FieldDatePickerStyle __swiftcall FieldDatePickerStyle.init()()
{
  SwiftUI::FieldDatePickerStyle result;

  result.presentsCalendarOverlay = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void FieldDatePickerStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t GraphicalDatePickerStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t *v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t *v6;
  uint64_t *v7;

  outlined init with copy of DatePickerStyleConfiguration(a1, a2);
  v3 = (int *)type metadata accessor for UIKitDatePicker(0);
  *(_QWORD *)(a2 + v3[5]) = 3;
  v4 = (uint64_t *)(a2 + v3[6]);
  *v4 = swift_getKeyPath();
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  swift_storeEnumTagMultiPayload();
  v6 = (uint64_t *)(a2 + v3[7]);
  *v6 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v5);
  swift_storeEnumTagMultiPayload();
  v7 = (uint64_t *)(a2 + v3[8]);
  *v7 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], v5);
  return swift_storeEnumTagMultiPayload();
}

uint64_t associated type witness table accessor for DatePickerStyle.Body : View in StepperFieldDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for DatePickerStyle.Body : View in FieldDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for DatePickerStyle.Body : View in GraphicalDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DatePickerStyle.makeBody(configuration:) in conformance GraphicalDatePickerStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t *v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t *v6;
  uint64_t *v7;

  outlined init with copy of DatePickerStyleConfiguration(a1, a2);
  v3 = (int *)type metadata accessor for UIKitDatePicker(0);
  *(_QWORD *)(a2 + v3[5]) = 3;
  v4 = (uint64_t *)(a2 + v3[6]);
  *v4 = swift_getKeyPath();
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  swift_storeEnumTagMultiPayload();
  v6 = (uint64_t *)(a2 + v3[7]);
  *v6 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v5);
  swift_storeEnumTagMultiPayload();
  v7 = (uint64_t *)(a2 + v3[8]);
  *v7 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], v5);
  return swift_storeEnumTagMultiPayload();
}

ValueMetadata *type metadata accessor for StepperFieldDatePickerStyle()
{
  return &type metadata for StepperFieldDatePickerStyle;
}

uint64_t storeEnumTagSinglePayload for StepperFieldDatePickerStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187924190 + 4 * byte_187C6E555[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1879241C4 + 4 * byte_187C6E550[v4]))();
}

uint64_t sub_1879241C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879241CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1879241D4);
  return result;
}

uint64_t sub_1879241E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1879241E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1879241EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879241F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FieldDatePickerStyle()
{
  return &type metadata for FieldDatePickerStyle;
}

ValueMetadata *type metadata accessor for GraphicalDatePickerStyle()
{
  return &type metadata for GraphicalDatePickerStyle;
}

uint64_t sub_187924220()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _SystemDatePicker and conformance _SystemDatePicker, (uint64_t (*)(uint64_t))type metadata accessor for _SystemDatePicker, (uint64_t)&protocol conformance descriptor for _SystemDatePicker);
}

uint64_t type metadata accessor for _SystemDatePicker()
{
  uint64_t result;

  result = type metadata singleton initialization cache for _SystemDatePicker;
  if (!type metadata singleton initialization cache for _SystemDatePicker)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_187924288()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIKitDatePicker and conformance UIKitDatePicker, type metadata accessor for UIKitDatePicker, (uint64_t)&protocol conformance descriptor for UIKitDatePicker);
}

_QWORD *initializeBufferWithCopyOfBuffer for _SystemDatePicker(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v40;
  int *v41;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Locale();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = a3[5];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = type metadata accessor for Calendar();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v13 = a3[6];
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v16 = type metadata accessor for TimeZone();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      *v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v40 = a2;
    v41 = a3;
    v17 = a3[7];
    v18 = (_QWORD *)((char *)a1 + v17);
    v19 = (char *)a2 + v17;
    v20 = *(_QWORD *)((char *)a2 + v17 + 8);
    *v18 = *(_QWORD *)((char *)a2 + v17);
    v18[1] = v20;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v22 = *(int *)(v21 + 32);
    v23 = (char *)v18 + v22;
    v24 = &v19[v22];
    v25 = type metadata accessor for Date();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    swift_retain();
    swift_retain();
    v27(v23, v24, v25);
    v28 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
    v29 = v28[6];
    v30 = (char *)v18 + v29;
    v31 = &v19[v29];
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    if (v32(&v19[v29], 1, v25))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v27(v30, v31, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v30, 0, 1, v25);
    }
    v34 = v28[7];
    v35 = (char *)v18 + v34;
    v36 = &v19[v34];
    if (v32(&v19[v34], 1, v25))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v27(v35, v36, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v35, 0, 1, v25);
    }
    *(_QWORD *)((char *)v18 + v28[8]) = *(_QWORD *)&v19[v28[8]];
    v38 = v41[9];
    *((_BYTE *)a1 + v41[8]) = *((_BYTE *)v40 + v41[8]);
    *((_BYTE *)a1 + v38) = *((_BYTE *)v40 + v38);
  }
  return a1;
}

uint64_t destroy for _SystemDatePicker(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t result;
  void (*v19)(uint64_t, uint64_t);

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  v5 = a1 + a2[5];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  v7 = a1 + a2[6];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  v9 = a1 + a2[7];
  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v11 = v9 + *(int *)(v10 + 32);
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v19(v11, v12);
  v14 = type metadata accessor for DatePickerStyleConfiguration(0);
  v15 = v9 + *(int *)(v14 + 24);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (!v16(v15, 1, v12))
    v19(v15, v12);
  v17 = v9 + *(int *)(v14 + 28);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v16)(v17, 1, v12);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v19)(v17, v12);
  return result;
}

_QWORD *initializeWithCopy for _SystemDatePicker(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int *v38;
  _QWORD *v39;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Locale();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = a3[5];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = type metadata accessor for Calendar();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = type metadata accessor for TimeZone();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  else
  {
    *v12 = *v13;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v38 = a3;
  v39 = a2;
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)((char *)a2 + v15 + 8);
  *v16 = *(_QWORD *)((char *)a2 + v15);
  v16[1] = v18;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v20 = *(int *)(v19 + 32);
  v21 = (char *)v16 + v20;
  v22 = &v17[v20];
  v23 = type metadata accessor for Date();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  swift_retain();
  swift_retain();
  v25(v21, v22, v23);
  v26 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  v27 = v26[6];
  v28 = (char *)v16 + v27;
  v29 = &v17[v27];
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v30(&v17[v27], 1, v23))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v25(v28, v29, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v23);
  }
  v32 = v26[7];
  v33 = (char *)v16 + v32;
  v34 = &v17[v32];
  if (v30(&v17[v32], 1, v23))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v25(v33, v34, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v33, 0, 1, v23);
  }
  *(_QWORD *)((char *)v16 + v26[8]) = *(_QWORD *)&v17[v26[8]];
  v36 = v38[9];
  *((_BYTE *)a1 + v38[8]) = *((_BYTE *)v39 + v38[8]);
  *((_BYTE *)a1 + v36) = *((_BYTE *)v39 + v36);
  return a1;
}

_QWORD *assignWithCopy for _SystemDatePicker(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v43)(char *, char *, uint64_t);
  int *v44;
  _QWORD *v45;

  if (a1 != a2)
  {
    v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38];
    outlined destroy of Environment<Locale>.Content((uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Locale();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v8 = a3[5];
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0];
    outlined destroy of Environment<Locale>.Content((uint64_t)a1 + v8, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = type metadata accessor for Calendar();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    }
    else
    {
      *v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v13 = a3[6];
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470];
    outlined destroy of Environment<Locale>.Content((uint64_t)a1 + v13, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v16, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = type metadata accessor for TimeZone();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
    }
    else
    {
      *v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v44 = a3;
  v45 = a2;
  v18 = a3[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  swift_retain();
  swift_release();
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  swift_retain();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v22 = *(int *)(v21 + 32);
  v23 = &v19[v22];
  v24 = &v20[v22];
  v25 = type metadata accessor for Date();
  v26 = *(_QWORD *)(v25 - 8);
  v43 = *(void (**)(char *, char *, uint64_t))(v26 + 24);
  v43(v23, v24, v25);
  v27 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  v28 = v27[6];
  v29 = &v19[v28];
  v30 = &v20[v28];
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v32 = v31(&v19[v28], 1, v25);
  v33 = v31(v30, 1, v25);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v29, v30, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v25);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v25);
LABEL_17:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_18;
  }
  v43(v29, v30, v25);
LABEL_18:
  v35 = v27[7];
  v36 = &v19[v35];
  v37 = &v20[v35];
  v38 = v31(&v19[v35], 1, v25);
  v39 = v31(v37, 1, v25);
  if (!v38)
  {
    v40 = v45;
    if (!v39)
    {
      v43(v36, v37, v25);
      goto LABEL_24;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v36, v25);
    goto LABEL_23;
  }
  v40 = v45;
  if (v39)
  {
LABEL_23:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v36, v37, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v36, 0, 1, v25);
LABEL_24:
  *(_QWORD *)&v19[v27[8]] = *(_QWORD *)&v20[v27[8]];
  *((_BYTE *)a1 + v44[8]) = *((_BYTE *)v40 + v44[8]);
  *((_BYTE *)a1 + v44[9]) = *((_BYTE *)v40 + v44[9]);
  return a1;
}

uint64_t outlined destroy of Environment<Locale>.Content(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

char *initializeWithTake for _SystemDatePicker(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int *v44;
  char *v45;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v13 = v12;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v10, v11, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v19 = v18;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v16, v17, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v44 = a3;
  v45 = a2;
  v21 = a3[7];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *(_QWORD *)&a2[v21 + 8];
  *(_QWORD *)v22 = *(_QWORD *)&a2[v21];
  *((_QWORD *)v22 + 1) = v24;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v26 = *(int *)(v25 + 32);
  v27 = &v22[v26];
  v28 = &v23[v26];
  v29 = type metadata accessor for Date();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v31(v27, v28, v29);
  v32 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  v33 = v32[6];
  v34 = &v22[v33];
  v35 = &v23[v33];
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v36(&v23[v33], 1, v29))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v31(v34, v35, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v34, 0, 1, v29);
  }
  v38 = v32[7];
  v39 = &v22[v38];
  v40 = &v23[v38];
  if (v36(&v23[v38], 1, v29))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v31(v39, v40, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v39, 0, 1, v29);
  }
  *(_QWORD *)&v22[v32[8]] = *(_QWORD *)&v23[v32[8]];
  v42 = v44[9];
  a1[v44[8]] = v45[v44[8]];
  a1[v42] = v45[v42];
  return a1;
}

char *assignWithTake for _SystemDatePicker(char *a1, char *a2, int *a3)
{
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v50)(char *, char *, uint64_t);
  int *v51;
  char *v52;

  if (a1 != a2)
  {
    v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38];
    outlined destroy of Environment<Locale>.Content((uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    v8 = v7;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v9 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    v10 = a3[5];
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0];
    outlined destroy of Environment<Locale>.Content((uint64_t)&a1[v10], (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v13, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    v15 = v14;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v16 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v11, v12, v16);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    v17 = a3[6];
    v18 = &a1[v17];
    v19 = &a2[v17];
    v20 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470];
    outlined destroy of Environment<Locale>.Content((uint64_t)&a1[v17], (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v20, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    v22 = v21;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v23 = type metadata accessor for TimeZone();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v18, v19, v23);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
  }
  v51 = a3;
  v52 = a2;
  v24 = a3[7];
  v25 = &a1[v24];
  v26 = &a2[v24];
  *(_QWORD *)&a1[v24] = *(_QWORD *)&a2[v24];
  swift_release();
  *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v28 = *(int *)(v27 + 32);
  v29 = &v25[v28];
  v30 = &v26[v28];
  v31 = type metadata accessor for Date();
  v32 = *(_QWORD *)(v31 - 8);
  v50 = *(void (**)(char *, char *, uint64_t))(v32 + 40);
  v50(v29, v30, v31);
  v33 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  v34 = v33[6];
  v35 = &v25[v34];
  v36 = &v26[v34];
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v38 = v37(&v25[v34], 1, v31);
  v39 = v37(v36, 1, v31);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v35, v36, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v35, 0, 1, v31);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v31);
LABEL_16:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_17;
  }
  v50(v35, v36, v31);
LABEL_17:
  v41 = v33[7];
  v42 = &v25[v41];
  v43 = &v26[v41];
  v44 = v37(&v25[v41], 1, v31);
  v45 = v37(v43, 1, v31);
  if (!v44)
  {
    v46 = v52;
    if (!v45)
    {
      v50(v42, v43, v31);
      goto LABEL_23;
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v42, v31);
    goto LABEL_22;
  }
  v46 = v52;
  if (v45)
  {
LABEL_22:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v42, v43, v31);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v42, 0, 1, v31);
LABEL_23:
  *(_QWORD *)&v25[v33[8]] = *(_QWORD *)&v26[v33[8]];
  v48 = v51[9];
  a1[v51[8]] = v46[v51[8]];
  a1[v48] = v46[v48];
  return a1;
}

uint64_t getEnumTagSinglePayload for _SystemDatePicker()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18792596C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Locale>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CE1160]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Calendar>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], MEMORY[0x1E0CE1160]);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], MEMORY[0x1E0CE1160]);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  v15 = type metadata accessor for DatePickerStyleConfiguration(0);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_9;
  }
  v17 = *(unsigned __int8 *)(a1 + a3[9]);
  if (v17 >= 2)
    return ((v17 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _SystemDatePicker()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187925AC0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Locale>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CE1160]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Calendar>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], MEMORY[0x1E0CE1160]);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], MEMORY[0x1E0CE1160]);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  result = type metadata accessor for DatePickerStyleConfiguration(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_9;
  }
  *(_BYTE *)(a1 + a4[9]) = a2 + 1;
  return result;
}

void type metadata completion function for _SystemDatePicker()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for DatePickerStyleConfiguration(319);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in _SystemDatePicker()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for _SystemDatePicker.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187925D68 + 4 * byte_187C6E55F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187925D9C + 4 * byte_187C6E55A[v4]))();
}

uint64_t sub_187925D9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187925DA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187925DACLL);
  return result;
}

uint64_t sub_187925DB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187925DC0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187925DC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187925DCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for _SystemDatePicker.Style()
{
  return &unk_1E1AC8438;
}

uint64_t sub_187925DE8()
{
  return MEMORY[0x1E0CE7C28];
}

unint64_t lazy protocol witness table accessor for type _SystemDatePicker.Style and conformance _SystemDatePicker.Style()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SystemDatePicker.Style and conformance _SystemDatePicker.Style;
  if (!lazy protocol witness table cache variable for type _SystemDatePicker.Style and conformance _SystemDatePicker.Style)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SystemDatePicker.Style, &unk_1E1AC8438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SystemDatePicker.Style and conformance _SystemDatePicker.Style);
  }
  return result;
}

void StepperFieldDatePickerStyle.makeBody(configuration:)()
{
  FieldDatePickerStyle.makeBody(configuration:)();
}

uint64_t AutomaticTableStyle.makeBody(configuration:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[64];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a1, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  v9 = a1[13];
  v10 = a1[14];
  v13 = v4;
  v14 = v5;
  v15 = v6;
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v19 = v10;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, a2, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>);
  outlined copy of Binding<[SwiftUIAnySortComparator]>?(v4, v5);
  outlined copy of Binding<AnyTableColumnCustomization>?(v7, v8);
  return outlined destroy of CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>((uint64_t)v12);
}

uint64_t associated type witness table accessor for TableStyle.Body : View in AutomaticTableStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AutomaticTableStyle()
{
  return &type metadata for AutomaticTableStyle;
}

uint64_t specialized ProgressView.init<A>(value:total:label:currentValueLabel:)@<X0>(double a1@<X0>, char a2@<W1>, char a3@<W2>, __int16 a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  double v8;
  void *v13;
  char v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;

  v8 = a1;
  if ((a2 & 1) != 0)
  {
    v14 = 1;
  }
  else
  {
    if (a1 < 0.0 || a1 > a6)
    {
      static os_log_type_t.fault.getter();
      v13 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)();

    }
    v8 = 0.0;
    v14 = 1;
    if (a1 >= 0.0 && a6 >= 0.0)
    {
      if (a1 == 0.0 && a6 == 0.0)
      {
        v8 = 0.0;
      }
      else
      {
        v14 = 0;
        v15 = a1 / a6;
        if (a1 / a6 < 0.0)
          v15 = 0.0;
        if (v15 > 1.0)
          v15 = 1.0;
        v8 = v15;
      }
    }
  }
  type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(0, &lazy cache variable for type metadata for CustomProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for CustomProgressView);
  v17 = *(int *)(v16 + 52);
  v18 = (_BYTE *)(a5 + *(int *)(v16 + 56));
  *(double *)a5 = v8;
  *(_BYTE *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 9) = 0;
  type metadata accessor for ProgressViewValue(0);
  swift_storeEnumTagMultiPayload();
  *(_BYTE *)(a5 + v17) = a3 & 1;
  *v18 = a4;
  v18[1] = HIBYTE(a4) & 1;
  type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(0, &lazy cache variable for type metadata for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>.Base, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ProgressView.Base);
  return swift_storeEnumTagMultiPayload();
}

uint64_t closure #1 in closure #1 in ProgressViewGauge.body.getter@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[5];
  char v26;
  _BYTE v27[2];
  uint64_t v28;
  _BYTE v29[11];
  char v30;

  type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(0, &lazy cache variable for type metadata for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ProgressView);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v25[-v10];
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v25[-v14];
  *(_QWORD *)v29 = *(_QWORD *)a1;
  *(_DWORD *)&v29[7] = *(_DWORD *)(a1 + 7);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v29[9], (uint64_t)&v30, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(_BYTE *)(a1 + 24);
  outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v16, v17);
  specialized Environment.wrappedValue.getter(v16, v17, &v28);
  outlined consume of Environment<Bool>.Content(v16, v17);
  if ((v28 & 2) == 0)
  {
    outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
LABEL_5:
    v21 = *(double *)v29;
    goto LABEL_6;
  }
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_BYTE *)(a1 + 40);
  outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v18, v19);
  v20 = specialized Environment.wrappedValue.getter(v18, v19);
  outlined consume of Environment<Bool>.Content(v18, v19);
  outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  if ((v20 & 1) == 0)
    goto LABEL_5;
  v21 = 0.0;
LABEL_6:
  specialized ProgressView.init<A>(value:total:label:currentValueLabel:)(v21, 0, 0, v29[8], (uint64_t)v11, 1.0);
  outlined init with take of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>((uint64_t)v11, (uint64_t)v15);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v29[10], (uint64_t)&v28, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v30, (uint64_t)v27, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
  outlined init with copy of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>((uint64_t)v15, (uint64_t)v7);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v28, (uint64_t)&v26, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?);
  *a2 = v27[0];
  type metadata accessor for (GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)();
  v23 = v22;
  outlined init with copy of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>((uint64_t)v7, (uint64_t)&a2[*(int *)(v22 + 48)]);
  a2[*(int *)(v23 + 64)] = v26;
  outlined destroy of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>((uint64_t)v15);
  return outlined destroy of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>((uint64_t)v7);
}

uint64_t protocol witness for View.body.getter in conformance ProgressViewGauge@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  _OWORD v9[2];

  v3 = v1[1];
  v8 = *v1;
  v9[0] = v3;
  *(_OWORD *)((char *)v9 + 9) = *(__int128 *)((char *)v1 + 25);
  *(_QWORD *)a1 = static HorizontalAlignment.center.getter();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>>(0, &lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>>, type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>);
  v5 = a1 + *(int *)(v4 + 44);
  *(_QWORD *)v5 = static VerticalAlignment.center.getter();
  *(_QWORD *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 16) = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>>(0, &lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>, (void (*)(uint64_t))type metadata accessor for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>);
  return closure #1 in closure #1 in ProgressViewGauge.body.getter((uint64_t)&v8, (_BYTE *)(v5 + *(int *)(v6 + 44)));
}

uint64_t AccessoryLinearCapacityGaugeStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t KeyPath;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *((_BYTE *)a1 + 9);
  v6 = *((_BYTE *)a1 + 10);
  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5;
  *(_BYTE *)(a2 + 10) = v6;
  *(_QWORD *)(a2 + 16) = KeyPath;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = result;
  *(_BYTE *)(a2 + 40) = 0;
  return result;
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in AccessoryLinearCapacityGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in LinearPercentageGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AccessoryLinearCapacityGaugeStyle()
{
  return &type metadata for AccessoryLinearCapacityGaugeStyle;
}

ValueMetadata *type metadata accessor for LinearPercentageGaugeStyle()
{
  return &type metadata for LinearPercentageGaugeStyle;
}

unint64_t lazy protocol witness table accessor for type ProgressViewGauge and conformance ProgressViewGauge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewGauge and conformance ProgressViewGauge;
  if (!lazy protocol witness table cache variable for type ProgressViewGauge and conformance ProgressViewGauge)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewGauge, &type metadata for ProgressViewGauge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewGauge and conformance ProgressViewGauge);
  }
  return result;
}

ValueMetadata *type metadata accessor for ProgressViewGauge()
{
  return &type metadata for ProgressViewGauge;
}

uint64_t associated type witness table accessor for View.Body : View in ProgressViewGauge()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>(uint64_t a1)
{
  type metadata accessor for Range<AttributedString.Index>(a1, &lazy cache variable for type metadata for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>, lazy protocol witness table accessor for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
}

void type metadata accessor for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>)
  {
    type metadata accessor for (GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)();
    v0 = type metadata accessor for TupleView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>);
  }
}

void type metadata accessor for (GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?))
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
    type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(255, &lazy cache variable for type metadata for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ProgressView);
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?));
  }
}

uint64_t lazy protocol witness table accessor for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>, MEMORY[0x1E0CE7EB8]);
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for _VariadicView.Tree();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t outlined init with take of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(0, &lazy cache variable for type metadata for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ProgressView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(0, &lazy cache variable for type metadata for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ProgressView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(0, &lazy cache variable for type metadata for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ProgressView);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  if (!*a2)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
    v9[0] = &type metadata for GaugeStyleConfiguration.Label;
    v9[1] = v6;
    v9[2] = &protocol witness table for GaugeStyleConfiguration.Label;
    v9[3] = lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel? and conformance <A> A?();
    v7 = a3(a1, v9);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t lazy protocol witness table accessor for type VStack<HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>> and conformance VStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type VStack<HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>> and conformance VStack<A>;
  if (!lazy protocol witness table cache variable for type VStack<HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>> and conformance VStack<A>)
  {
    type metadata accessor for Range<AttributedString.Index>(255, &lazy cache variable for type metadata for VStack<HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>, lazy protocol witness table accessor for type HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>> and conformance HStack<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStack<HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>> and conformance VStack<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>> and conformance HStack<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>, MEMORY[0x1E0CE73D0]);
}

uint64_t CarPlay.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t CarPlay.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  _OWORD v23[2];
  __n128 v24;
  __n128 v25;
  uint64_t v26;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  specialized ResolvedUISceneAdaptor.init(id:kind:content:)(0x79616C50726143, 0xE700000000000000, 0, 0, 0, (uint64_t)&v19);
  v23[0] = v20;
  v23[1] = v21;
  v22 = v19;
  v26 = *((_QWORD *)&v21 + 1);
  outlined init with take of UISceneAdaptorConfiguration.Kind((__n128 *)((char *)v23 + 8), &v25);
  outlined init with take of SceneID(&v22, &v24);
  v12 = v19;
  v13 = v20;
  v14 = v21;
  v6 = type metadata accessor for ResolvedUISceneAdaptor(0, v3, v4, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedUISceneAdaptor<A>, v6);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v12, v6, (uint64_t)&v15);
  outlined release of SceneID((uint64_t)&v24);
  outlined release of UISceneAdaptorConfiguration.Kind((uint64_t)&v25);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v26);
  v7 = v15;
  v8 = v16;
  v9 = v17;
  v10 = v18;
  v12 = v15;
  LOBYTE(v13) = v16;
  *((_QWORD *)&v13 + 1) = v17;
  v14 = v18;
  static SceneBuilder.buildBlock<A>(_:)((uint64_t)&v12, v6, a2);
  outlined consume of SceneID(v7.n128_i64[0], v7.n128_i64[1], v8);
  outlined consume of UISceneAdaptorConfiguration.Kind(v9, v10);
  return swift_release();
}

uint64_t associated type witness table accessor for Scene.Body : Scene in CarPlay<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for CarPlay(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187926BB4 + 4 * byte_187C6E8F0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for CarPlay(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for CarPlay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CarPlay);
}

void PrintItem.init(content:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PrintItem.content.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PrintItem.content.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PrintItem.content.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static PrintItem._makePrintContent(content:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t getEnumTagSinglePayload for PrintItem(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187926EC8 + 4 * byte_187C6E938[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PrintItem(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for PrintItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrintItem);
}

uint64_t TableSections.init(list:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[6];

  outlined init with copy of TableRowList((uint64_t)a1, a2);
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  if (v6)
  {
    v24 = a2;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableSections.Item>, (uint64_t)&type metadata for TableSections.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_187BF9830;
    v8 = a1[3];
    v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
    v27[0] = 0;
    v25 = 0u;
    v26 = 0u;
    v11 = *(uint64_t (**)(void))(*(_QWORD *)v6 + 88);
    v12 = swift_retain();
    v13 = ((uint64_t (*)(uint64_t))v11)(v12);
    v14 = *(uint64_t (**)(void))(*(_QWORD *)v6 + 96);
    v15 = v14();
    v16 = v11();
    result = v14();
    if (v13 < v16 || result < v13)
    {
      __break(1u);
    }
    else
    {
      v19 = ((uint64_t (*)(uint64_t))v11)(result);
      result = v14();
      if (v15 >= v19 && result >= v15)
      {
        if (!__OFSUB__(v15, v13))
        {
          *(_QWORD *)(v7 + 32) = 0;
          *(_BYTE *)(v7 + 40) = 0;
          *(_QWORD *)(v7 + 48) = v10;
          outlined init with take of TableRowList?((uint64_t)&v25, v7 + 56);
          *(_QWORD *)(v7 + 96) = v6;
          *(_BYTE *)(v7 + 104) = 0;
          *(_QWORD *)(v7 + 112) = 0;
          *(_QWORD *)(v7 + 120) = v15 - v13;
          swift_release();
          result = outlined destroy of TableRowList((uint64_t)a1);
          *(_QWORD *)(v24 + 40) = v7;
          return result;
        }
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  v21 = outlined init with copy of TableRowList((uint64_t)a1, (uint64_t)v27);
  v25 = MEMORY[0x1E0DEE9D8];
  v26 = 0uLL;
  MEMORY[0x1E0C80A78](v21, v22);
  static Update.ensure<A>(_:)();
  TableSections.Accumulator.finalize()();
  outlined destroy of TableRowList((uint64_t)a1);
  v23 = v25;
  swift_bridgeObjectRetain();
  result = outlined destroy of TableSections.Accumulator((uint64_t)&v25);
  *(_QWORD *)(a2 + 40) = v23;
  return result;
}

uint64_t TableSections.firstIndexPath<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *MatchingID;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[2];
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v31 = a3;
  v42 = *(_QWORD *)(a2 - 8);
  v43 = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  v41 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v5;
  MatchingID = (int *)type metadata accessor for TableSections.FindMatchingID(0, v5, v6, v7);
  v39 = *((_QWORD *)MatchingID - 1);
  MEMORY[0x1E0C80A78](MatchingID, v9);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(v3 + 40);
  v13 = *(_QWORD *)(v12 + 16);
  v34 = (_OWORD *)((char *)v48 + 8);
  v35 = v12 + 32;
  v32 = v3;
  v33 = (char *)&v50 + 8;
  v36 = v54;
  v37 = v12;
  v40 = (uint64_t)&v51 + 8;
  result = swift_bridgeObjectRetain();
  v15 = 0;
  v16 = v41;
  v17 = v44;
  if (v13)
    goto LABEL_3;
LABEL_2:
  v51 = 0u;
  v52 = 0u;
  v50 = 0u;
  *(_QWORD *)&v53 = 0;
  *((_QWORD *)&v53 + 1) = 1;
  v18 = v36;
  *v36 = 0u;
  v18[1] = 0u;
  v15 = v13;
  *((_QWORD *)v18 + 4) = 0;
  while (1)
  {
    outlined init with take of (offset: Int, element: TableSections.Item)?((uint64_t)&v50, (uint64_t)&v55);
    if ((_QWORD)v59 == 1)
    {
      swift_bridgeObjectRelease();
      v27 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v31, 1, 1, v27);
    }
    v24 = v13;
    v38 = v55;
    v52 = v58;
    v53 = v59;
    v54[0] = v60;
    v54[1] = v61;
    v50 = v56;
    v51 = v57;
    v25 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v16, v43, v17);
    v26 = v51;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v11, v16, v17);
    *(_QWORD *)&v11[MatchingID[9]] = v26;
    v11[MatchingID[10]] = 0;
    *(_QWORD *)&v11[MatchingID[11]] = 0;
    outlined init with copy of TableRowList?(v40, (uint64_t)&v45);
    if (*((_QWORD *)&v46 + 1))
    {
      v48[0] = v45;
      v48[1] = v46;
      v49 = v47;
      TableRowList.visitRows<A>(applying:from:)();
      outlined destroy of TableRowList((uint64_t)v48);
    }
    else
    {
      outlined destroy of TableRowList?((uint64_t)&v45);
      TableRowList.visitRows<A>(applying:from:)();
    }
    v13 = v24;
    if (v11[MatchingID[10]] == 1)
    {
      swift_bridgeObjectRelease();
      v28 = v31;
      MEMORY[0x18D754BAC](*(_QWORD *)&v11[MatchingID[11]], v38);
      (*(void (**)(char *, int *))(v39 + 8))(v11, MatchingID);
      outlined destroy of TableSections.Item((uint64_t)&v50);
      v29 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 0, 1, v29);
    }
    (*(void (**)(char *, int *))(v39 + 8))(v11, MatchingID);
    result = outlined destroy of TableSections.Item((uint64_t)&v50);
    if (v15 == v24)
      goto LABEL_2;
LABEL_3:
    if (v15 >= *(_QWORD *)(v37 + 16))
      break;
    v19 = v34;
    outlined init with copy of TableSections.Item(v35 + 96 * v15, (uint64_t)v34);
    *(_QWORD *)&v50 = v15;
    v20 = v19[3];
    v21 = v33;
    *((_OWORD *)v33 + 2) = v19[2];
    v21[3] = v20;
    v22 = v19[5];
    v21[4] = v19[4];
    v21[5] = v22;
    v23 = v19[1];
    ++v15;
    *v21 = *v19;
    v21[1] = v23;
  }
  __break(1u);
  return result;
}

uint64_t TableSections.firstIndexPath(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD v20[7];
  _BYTE v21[104];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v29 = a1;
  v30 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v3 = *(_QWORD *)(v2 + 40);
  v15 = v3 + 32;
  v4 = *(_QWORD *)(v3 + 16);
  v16 = v3;
  result = swift_bridgeObjectRetain();
  i = 0;
  if (v4)
    goto LABEL_3;
LABEL_2:
  memset(v21, 0, 56);
  *(_QWORD *)&v21[56] = 1;
  memset(&v21[64], 0, 40);
  for (i = v4; ; ++i)
  {
    outlined init with take of (offset: Int, element: TableSections.Item)?((uint64_t)v21, (uint64_t)&v22);
    if ((_QWORD)v26 == 1)
    {
      swift_bridgeObjectRelease();
      v12 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 1, 1, v12);
    }
    v7 = v22;
    *(_OWORD *)&v21[32] = v25;
    *(_OWORD *)&v21[48] = v26;
    *(_OWORD *)&v21[64] = v27;
    *(_OWORD *)&v21[80] = v28;
    *(_OWORD *)v21 = v23;
    *(_OWORD *)&v21[16] = v24;
    v31 = v24;
    v32 = 0;
    v8 = outlined init with copy of TableRowList?((uint64_t)&v21[24], (uint64_t)&v17);
    if (*((_QWORD *)&v18 + 1))
    {
      v20[0] = v17;
      v20[1] = v18;
      *(_QWORD *)&v20[2] = v19;
      MEMORY[0x1E0C80A78](v8, v9);
      static Update.ensure<A>(_:)();
      outlined destroy of TableRowList((uint64_t)v20);
    }
    else
    {
      v10 = outlined destroy of TableRowList?((uint64_t)&v17);
      MEMORY[0x1E0C80A78](v10, v11);
      static Update.ensure<A>(_:)();
    }
    if (v30 == 1)
    {
      swift_bridgeObjectRelease();
      MEMORY[0x18D754BAC](v32, v7);
      outlined destroy of TableSections.Item((uint64_t)v21);
      v13 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 0, 1, v13);
    }
    result = outlined destroy of TableSections.Item((uint64_t)v21);
    if (i == v4)
      goto LABEL_2;
LABEL_3:
    if (i >= *(_QWORD *)(v16 + 16))
      break;
    outlined init with copy of TableSections.Item(v15 + 96 * i, (uint64_t)v20 + 8);
    *(_QWORD *)v21 = i;
    *(_OWORD *)&v21[40] = *(_OWORD *)((char *)&v20[2] + 8);
    *(_OWORD *)&v21[56] = *(_OWORD *)((char *)&v20[3] + 8);
    *(_OWORD *)&v21[72] = *(_OWORD *)((char *)&v20[4] + 8);
    *(_OWORD *)&v21[88] = *(_OWORD *)((char *)&v20[5] + 8);
    *(_OWORD *)&v21[8] = *(_OWORD *)((char *)v20 + 8);
    *(_OWORD *)&v21[24] = *(_OWORD *)((char *)&v20[1] + 8);
  }
  __break(1u);
  return result;
}

void TableSections.Accumulator.finalize()()
{
  char **v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE v24[7];
  char v25;
  _QWORD v26[5];

  v1 = *v0;
  if (*((_QWORD *)*v0 + 2))
  {
    v3 = (uint64_t)v0[2];
    v2 = v0[3];
    v4 = v3 - (_QWORD)v2;
    if (v3 <= (uint64_t)v2)
      return;
    outlined init with copy of TableRowList((uint64_t)(v0 + 4), (uint64_t)v26);
    v5 = (uint64_t)v0[1];
    v6 = specialized ResolvedTableRowIDs.init(rowList:start:limit:)(v26, v5, v3);
    v8 = v7;
    v10 = v9;
    v12 = v11;
    v25 = v7 & 1;
    outlined copy of ResolvedTableRowIDs.Storage(v6, v7 & 1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v1 + 2) + 1, 1, v1);
    v14 = *((_QWORD *)v1 + 2);
    v13 = *((_QWORD *)v1 + 3);
    if (v14 >= v13 >> 1)
      v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v1);
    *((_QWORD *)v1 + 2) = v14 + 1;
    v15 = &v1[96 * v14];
    *((_QWORD *)v15 + 4) = v5;
    v15[40] = 0;
    v16 = v26[0];
    *((_DWORD *)v15 + 11) = *(_DWORD *)((char *)v26 + 3);
    *(_DWORD *)(v15 + 41) = v16;
    *((_QWORD *)v15 + 6) = v4;
  }
  else
  {
    outlined init with copy of TableRowList((uint64_t)(v0 + 4), (uint64_t)v26);
    v17 = (uint64_t)v0[2];
    v6 = specialized ResolvedTableRowIDs.init(rowList:start:limit:)(v26, 0, v17);
    v8 = v18;
    v10 = v19;
    v12 = v20;
    v25 = v18 & 1;
    outlined copy of ResolvedTableRowIDs.Storage(v6, v18 & 1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v1 + 2) + 1, 1, v1);
    v22 = *((_QWORD *)v1 + 2);
    v21 = *((_QWORD *)v1 + 3);
    if (v22 >= v21 >> 1)
      v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v1);
    *((_QWORD *)v1 + 2) = v22 + 1;
    v15 = &v1[96 * v22];
    *((_QWORD *)v15 + 4) = 0;
    v15[40] = 0;
    v23 = v26[0];
    *((_DWORD *)v15 + 11) = *(_DWORD *)((char *)v26 + 3);
    *(_DWORD *)(v15 + 41) = v23;
    *((_QWORD *)v15 + 6) = v17;
  }
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *((_QWORD *)v15 + 11) = 0;
  *((_QWORD *)v15 + 12) = v6;
  v15[104] = v25;
  *(_DWORD *)(v15 + 105) = *(_DWORD *)v24;
  *((_DWORD *)v15 + 27) = *(_DWORD *)&v24[3];
  *((_QWORD *)v15 + 14) = v10;
  *((_QWORD *)v15 + 15) = v12;
  outlined consume of ResolvedTableRowIDs.Storage(v6, v8 & 1);
  *v0 = v1;
}

uint64_t closure #1 in TableSections.FindMatchingID.visit<A, B>(rowValue:view:children:traits:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, _BYTE *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  void (*v32)(char *, uint64_t);
  char v33;
  uint64_t v34;
  char *v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t result;
  _QWORD v38[2];
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t TupleTypeMetadata2;

  v44 = a5;
  v38[1] = a4;
  v41 = *(_QWORD *)(a3 - 8);
  v42 = a2;
  MEMORY[0x1E0C80A78](a1, a2);
  v38[0] = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v39 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v8);
  v40 = (char *)v38 - v9;
  v45 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v43 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v38 - v15;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v38 - v19;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v22);
  dispatch thunk of RawRepresentable.rawValue.getter();
  v23 = swift_dynamicCast();
  v24 = v41;
  v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56);
  v25(v20, v23 ^ 1u, 1, a3);
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v16, v42, a3);
  v25(v16, 0, 1, a3);
  v26 = v40;
  v27 = &v40[*(int *)(TupleTypeMetadata2 + 48)];
  v28 = v45;
  v29 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  v42 = v20;
  v29(v40, v20, v7);
  v29(v27, v16, v7);
  v30 = v24;
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v31(v26, 1, a3) != 1)
  {
    v29(v43, v26, v7);
    if (v31(v27, 1, a3) != 1)
    {
      v34 = v38[0];
      (*(void (**)(_QWORD, char *, uint64_t))(v30 + 32))(v38[0], v27, a3);
      v35 = v43;
      v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      v36 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v36(v34, a3);
      v32 = *(void (**)(char *, uint64_t))(v45 + 8);
      v32(v16, v7);
      v36((uint64_t)v35, a3);
      v32(v26, v7);
      goto LABEL_8;
    }
    v32 = *(void (**)(char *, uint64_t))(v45 + 8);
    v32(v16, v7);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v43, a3);
    goto LABEL_6;
  }
  v32 = *(void (**)(char *, uint64_t))(v28 + 8);
  v32(v16, v7);
  if (v31(v27, 1, a3) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v39 + 8))(v26, TupleTypeMetadata2);
    v33 = 0;
    goto LABEL_8;
  }
  v32(v26, v7);
  v33 = 1;
LABEL_8:
  result = ((uint64_t (*)(char *, uint64_t))v32)(v42, v7);
  *v44 = v33 & 1;
  return result;
}

BOOL protocol witness for TableRowVisitor.visit<A, B>(rowValue:view:children:traits:) in conformance TableSections.FindMatchingID<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized TableSections.FindMatchingID.visit<A, B>(rowValue:view:children:traits:)(a1, a3, a4, a9, a5, a6, a7, a8);
}

BOOL protocol witness for TableRowVisitor.visit<A, B>(rowValue:view:children:traits:) in conformance TableSections.FindMatchingRow()
{
  uint64_t v0;
  uint64_t v1;
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 32);
  if (*(_QWORD *)v0 == v1)
  {
    result = 0;
    *(_BYTE *)(v0 + 8) = 1;
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = *(_QWORD *)(v0 + 24) + 1;
    *(_QWORD *)(v0 + 24) = v4;
    *(_QWORD *)(v0 + 32) = v1 + 1;
    return v4 != v3;
  }
  return result;
}

uint64_t TableSections.Accumulator.visit<A, B>(rowValue:view:children:traits:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  BOOL v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  int v54;
  int v55;
  char *v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;
  _OWORD v66[2];
  uint64_t v67;

  v7 = v6;
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v58 - v16;
  outlined init with copy of TableRowList?(a3, (uint64_t)&v59);
  if (*((_QWORD *)&v60 + 1))
  {
    v66[0] = v59;
    v66[1] = v60;
    v18 = v61;
    v67 = v61;
    v19 = *((_QWORD *)&v60 + 1);
    __swift_project_boxed_opaque_existential_1(v66, *((uint64_t *)&v60 + 1));
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v19, v18);
    outlined init with copy of TableRowList((uint64_t)v66, (uint64_t)&v59);
    v21 = specialized ResolvedTableRowIDs.init(rowList:start:limit:)(&v59, 0, 0x7FFFFFFFFFFFFFFFLL);
    v23 = v22;
    v25 = v24;
    v27 = v26;
    v28 = v22 & 1;
    v29 = *(_QWORD *)(v7 + 8);
    v30 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 48))(a2, 1, a6) != 1;
    outlined init with copy of TableRowList((uint64_t)v66, (uint64_t)&v60 + 8);
    *(_QWORD *)&v59 = v29;
    BYTE8(v59) = v30;
    *(_QWORD *)&v60 = v20;
    *(_QWORD *)&v63 = v21;
    BYTE8(v63) = v28;
    *(_QWORD *)&v64 = v25;
    *((_QWORD *)&v64 + 1) = v27;
    v31 = *(char **)v7;
    outlined copy of ResolvedTableRowIDs.Storage(v21, v28);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
    v33 = *((_QWORD *)v31 + 2);
    v32 = *((_QWORD *)v31 + 3);
    if (v33 >= v32 >> 1)
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v31);
    *((_QWORD *)v31 + 2) = v33 + 1;
    v34 = &v31[96 * v33];
    v35 = v60;
    *((_OWORD *)v34 + 2) = v59;
    *((_OWORD *)v34 + 3) = v35;
    v36 = v61;
    v37 = v62;
    v38 = v64;
    *((_OWORD *)v34 + 6) = v63;
    *((_OWORD *)v34 + 7) = v38;
    *((_OWORD *)v34 + 4) = v36;
    *((_OWORD *)v34 + 5) = v37;
    outlined consume of ResolvedTableRowIDs.Storage(v21, v23 & 1);
    *(_QWORD *)v7 = v31;
    *(_QWORD *)(v7 + 16) += v20;
    outlined destroy of TableRowList((uint64_t)v66);
LABEL_7:
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(v7 + 16);
    goto LABEL_16;
  }
  outlined destroy of TableRowList?((uint64_t)&v59);
  ++*(_QWORD *)(v7 + 16);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 48))(a1, 1, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a2, v13);
  if (v39 != 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    goto LABEL_16;
  }
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 48))(v17, 1, a6);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  if (v40 != 1)
  {
    outlined init with copy of TableRowList(v7 + 32, (uint64_t)&v59);
    v41 = *(_QWORD *)(v7 + 8);
    v42 = specialized ResolvedTableRowIDs.init(rowList:start:limit:)(&v59, v41, 1);
    v44 = v43;
    v46 = v45;
    v48 = v47;
    v65 = v43 & 1;
    v49 = *(char **)v7;
    outlined copy of ResolvedTableRowIDs.Storage(v42, v43 & 1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v49 + 2) + 1, 1, v49);
    v51 = *((_QWORD *)v49 + 2);
    v50 = *((_QWORD *)v49 + 3);
    v52 = v51 + 1;
    if (v51 >= v50 >> 1)
    {
      v58 = v51 + 1;
      v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, v49);
      v52 = v58;
      v49 = v57;
    }
    *((_QWORD *)v49 + 2) = v52;
    v53 = &v49[96 * v51];
    *((_QWORD *)v53 + 4) = v41;
    v53[40] = 0;
    v54 = v59;
    *((_DWORD *)v53 + 11) = *(_DWORD *)((char *)&v59 + 3);
    *(_DWORD *)(v53 + 41) = v54;
    *((_QWORD *)v53 + 6) = 1;
    *(_OWORD *)(v53 + 56) = 0u;
    *(_OWORD *)(v53 + 72) = 0u;
    *((_QWORD *)v53 + 11) = 0;
    *((_QWORD *)v53 + 12) = v42;
    v53[104] = v65;
    v55 = *(_DWORD *)((char *)v66 + 3);
    *(_DWORD *)(v53 + 105) = v66[0];
    *((_DWORD *)v53 + 27) = v55;
    *((_QWORD *)v53 + 14) = v46;
    *((_QWORD *)v53 + 15) = v48;
    outlined consume of ResolvedTableRowIDs.Storage(v42, v44 & 1);
    *(_QWORD *)v7 = v49;
    goto LABEL_7;
  }
LABEL_16:
  ++*(_QWORD *)(v7 + 8);
  return 1;
}

uint64_t outlined destroy of TableSections.Accumulator(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 32;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return a1;
}

uint64_t outlined init with take of TableRowList?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of TableRowList?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for TableSections.FindMatchingRow(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TableSections.FindMatchingRow(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableSections.FindMatchingRow()
{
  return &type metadata for TableSections.FindMatchingRow;
}

uint64_t destroy for TableSections.Accumulator(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t initializeWithCopy for TableSections.Accumulator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v3 = a2 + 32;
  v4 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v4;
  v5 = v4;
  v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_bridgeObjectRetain();
  v6(a1 + 32, v3, v5);
  return a1;
}

_QWORD *assignWithCopy for TableSections.Accumulator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  __swift_assign_boxed_opaque_existential_1(a1 + 4, a2 + 4);
  return a1;
}

uint64_t assignWithTake for TableSections.Accumulator(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for TableSections.Accumulator()
{
  return &type metadata for TableSections.Accumulator;
}

uint64_t destroy for TableSections.Item(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  return outlined consume of ResolvedTableRowIDs.Storage(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
}

uint64_t initializeWithCopy for TableSections.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = a1 + 24;
  v5 = a2 + 24;
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v7;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v4, v5);
  }
  else
  {
    v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v8;
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(v5 + 32);
  }
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_BYTE *)(a2 + 72);
  outlined copy of ResolvedTableRowIDs.Storage(v9, v10);
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for TableSections.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = a1 + 24;
  v5 = (__int128 *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
    }
    else
    {
      outlined destroy of TableRowList(a1 + 24);
      v7 = *((_QWORD *)v5 + 4);
      v8 = v5[1];
      *(_OWORD *)v4 = *v5;
      *(_OWORD *)(v4 + 16) = v8;
      *(_QWORD *)(v4 + 32) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 24, a2 + 24);
  }
  else
  {
    v9 = *v5;
    v10 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)v4 = v9;
    *(_OWORD *)(a1 + 40) = v10;
  }
  v11 = *(_QWORD *)(a2 + 64);
  v12 = *(_BYTE *)(a2 + 72);
  outlined copy of ResolvedTableRowIDs.Storage(v11, v12);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v12;
  outlined consume of ResolvedTableRowIDs.Storage(v13, v14);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for TableSections.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = a1 + 24;
  if (*(_QWORD *)(a1 + 48))
  {
    if (*(_QWORD *)(a2 + 48))
      __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    else
      outlined destroy of TableRowList(a1 + 24);
  }
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 56);
  v7 = *(_BYTE *)(a2 + 72);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = v7;
  outlined consume of ResolvedTableRowIDs.Storage(v8, v9);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableSections.Item(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TableSections.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableSections.Item()
{
  return &type metadata for TableSections.Item;
}

uint64_t type metadata accessor for TableSections.FindMatchingID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableSections.FindMatchingID);
}

uint64_t type metadata completion function for TableSections.FindMatchingID()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableSections.FindMatchingID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
    *(_QWORD *)(((unint64_t)v4 + v6 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 23) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for TableSections.FindMatchingID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)((v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for TableSections.FindMatchingID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)((v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for TableSections.FindMatchingID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)((v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TableSections.FindMatchingID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)((v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableSections.FindMatchingID(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 >= 0xFE)
      return (*(uint64_t (**)(void))(v4 + 48))();
    v12 = *(unsigned __int8 *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
    if (v12 >= 2)
      return ((v12 + 2147483646) & 0x7FFFFFFF) + 1;
    return 0;
  }
  if (((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v8 = 2;
  else
    v8 = a2 - v6 + 1;
  if (v8 >= 0x10000)
    v9 = 4;
  else
    v9 = 2;
  if (v8 < 0x100)
    v9 = 1;
  if (v8 >= 2)
    v10 = v9;
  else
    v10 = 0;
  return ((uint64_t (*)(void))((char *)&loc_187928D4C + 4 * byte_187C6E990[v10]))();
}

void storeEnumTagSinglePayload for TableSections.FindMatchingID(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187928EC8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_187928ED0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187928ED8);
}

void sub_187928F18()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_187928F20()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_187928F28(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
LABEL_2:
    JUMPOUT(0x187928F30);
  if (a3 < 0xFE)
  {
    *(_BYTE *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = a2 + 1;
    goto LABEL_2;
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t destroy for TableSections(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableSections(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for TableSections(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TableSections(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TableSections()
{
  return &type metadata for TableSections;
}

BOOL specialized TableSections.FindMatchingID.visit<A, B>(rowValue:view:children:traits:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 result;
  _QWORD v15[8];
  uint64_t v16;
  char v17;

  v10 = *(_QWORD *)(a4 + 24);
  v15[2] = *(_QWORD *)(a4 + 16);
  v15[3] = a5;
  v15[4] = a6;
  v15[5] = v10;
  v15[6] = a7;
  v15[7] = a8;
  v16 = v8;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TableSections.FindMatchingID.visit<A, B>(rowValue:view:children:traits:), (uint64_t)v15, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], v11, (uint64_t)&v17);
  if (v17 != 2 && (v17 & 1) != 0)
  {
    result = 0;
    *(_BYTE *)(v8 + *(int *)(a4 + 40)) = 1;
  }
  else
  {
    v12 = *(int *)(a4 + 44);
    v13 = *(_QWORD *)(v8 + v12) + 1;
    *(_QWORD *)(v8 + v12) = v13;
    return v13 != *(_QWORD *)(v8 + *(int *)(a4 + 36));
  }
  return result;
}

uint64_t partial apply for closure #1 in TableSections.FindMatchingID.visit<A, B>(rowValue:view:children:traits:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in TableSections.FindMatchingID.visit<A, B>(rowValue:view:children:traits:)(a1, *(char **)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 40), a2);
}

uint64_t key path setter for EnvironmentValues.listRowInsets : EnvironmentValues()
{
  return EnvironmentValues.listRowInsets.setter();
}

double DefaultToggleStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  double v28;
  char v29;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v21 = *(_BYTE *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v7 = *(void **)(a1 + 72);
  v9 = v8 & 1;
  if (v7)
    v10 = *(_QWORD *)(a1 + 48);
  else
    v10 = 0;
  if (v7)
    v11 = *(_QWORD *)(a1 + 56);
  else
    v11 = 0;
  if (!v7)
    v9 = 0;
  v22 = v9;
  v23 = v10;
  if (v7)
    v12 = *(_QWORD *)(a1 + 80);
  else
    v12 = 0;
  if (v7)
    v13 = *(_QWORD *)(a1 + 88);
  else
    v13 = 0;
  v19 = v13;
  v20 = v12;
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v5, v6, v8, v7);
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v23, v11, v22, v7);
  swift_release();
  swift_release();
  outlined consume of AppIntentAction?(v23, v11, v22, v7);
  KeyPath = swift_getKeyPath();
  v15 = swift_getKeyPath();
  v16 = swift_getKeyPath();
  v17 = swift_getKeyPath();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  result = v28;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v21;
  *(_QWORD *)(a2 + 24) = v23;
  *(_QWORD *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 40) = v22;
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 56) = v20;
  *(_QWORD *)(a2 + 64) = v19;
  *(_QWORD *)(a2 + 72) = KeyPath;
  *(_BYTE *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = v15;
  *(_BYTE *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = v16;
  *(_BYTE *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = v17;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = v24;
  *(_BYTE *)(a2 + 176) = v25;
  *(_QWORD *)(a2 + 184) = v26;
  *(_BYTE *)(a2 + 192) = v27;
  *(double *)(a2 + 200) = v28;
  *(_BYTE *)(a2 + 208) = v29;
  return result;
}

double protocol witness for ToggleStyle.makeBody(configuration:) in conformance DefaultToggleStyle@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultToggleStyle.makeBody(configuration:)(a1, a2);
}

uint64_t PlatformFallbackToggleStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v20 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v7 = *(void **)(a1 + 72);
  v9 = v8 & 1;
  if (v7)
    v10 = *(_QWORD *)(a1 + 48);
  else
    v10 = 0;
  if (v7)
    v11 = *(_QWORD *)(a1 + 56);
  else
    v11 = 0;
  if (!v7)
    v9 = 0;
  v21 = v9;
  v22 = v11;
  if (v7)
    v12 = *(_QWORD *)(a1 + 80);
  else
    v12 = 0;
  if (v7)
    v13 = *(_QWORD *)(a1 + 88);
  else
    v13 = 0;
  v18 = v13;
  v19 = v12;
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v6, v5, v8, v7);
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v10, v22, v21, v7);
  swift_release();
  swift_release();
  outlined consume of AppIntentAction?(v10, v22, v21, v7);
  KeyPath = swift_getKeyPath();
  v15 = swift_getKeyPath();
  v16 = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v20;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v22;
  *(_QWORD *)(a2 + 40) = v21;
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 56) = v19;
  *(_QWORD *)(a2 + 64) = v18;
  *(_QWORD *)(a2 + 72) = KeyPath;
  *(_BYTE *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = v15;
  *(_BYTE *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = v16;
  *(_BYTE *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = result;
  *(_BYTE *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  return result;
}

uint64_t sub_187929560@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.sizeCategory.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.sizeCategory : EnvironmentValues()
{
  return EnvironmentValues.sizeCategory.setter();
}

uint64_t sub_1879295D4()
{
  return EnvironmentValues.sizeCategory.setter();
}

void sub_187929608(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = EnvironmentValues.listRowInsets.getter();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t sub_187929644()
{
  return EnvironmentValues.listRowInsets.setter();
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in DefaultToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DefaultToggleStyle()
{
  return &type metadata for DefaultToggleStyle;
}

uint64_t sub_18792968C()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>> and conformance <> ModifiedContent<A(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>> and conformance <> ModifiedCon, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>);
    type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<PlatformFallbackToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformFallbackToggleStyle and conformance PlatformFallbackToggleStyle, (uint64_t)&type metadata for PlatformFallbackToggleStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for Toggle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Toggle);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>);
  }
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E0CE4ED8], MEMORY[0x1E0CE4EC8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<ButtonToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonToggleStyle and conformance ButtonToggleStyle, (uint64_t)&type metadata for ButtonToggleStyle);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>);
    type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<DefaultListToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultListToggleStyle and conformance DefaultListToggleStyle, (uint64_t)&type metadata for DefaultListToggleStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultListToggleStyle and conformance DefaultListToggleStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultListToggleStyle and conformance DefaultListToggleStyle;
  if (!lazy protocol witness table cache variable for type DefaultListToggleStyle and conformance DefaultListToggleStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultListToggleStyle, &type metadata for DefaultListToggleStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultListToggleStyle and conformance DefaultListToggleStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<DefaultListToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultListToggleStyle and conformance DefaultListToggleStyle, (uint64_t)&type metadata for DefaultListToggleStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<ToolbarToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarToggleStyle and conformance ToolbarToggleStyle, (uint64_t)&type metadata for ToolbarToggleStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarToggleStyle and conformance ToolbarToggleStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarToggleStyle and conformance ToolbarToggleStyle;
  if (!lazy protocol witness table cache variable for type ToolbarToggleStyle and conformance ToolbarToggleStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarToggleStyle, &type metadata for ToolbarToggleStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarToggleStyle and conformance ToolbarToggleStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<AccessibilityToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityToggleStyle and conformance AccessibilityToggleStyle, (uint64_t)&type metadata for AccessibilityToggleStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityToggleStyle and conformance AccessibilityToggleStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleStyle and conformance AccessibilityToggleStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleStyle and conformance AccessibilityToggleStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityToggleStyle, &type metadata for AccessibilityToggleStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleStyle and conformance AccessibilityToggleStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformFallbackToggleStyle and conformance PlatformFallbackToggleStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformFallbackToggleStyle and conformance PlatformFallbackToggleStyle;
  if (!lazy protocol witness table cache variable for type PlatformFallbackToggleStyle and conformance PlatformFallbackToggleStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformFallbackToggleStyle, &type metadata for PlatformFallbackToggleStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformFallbackToggleStyle and conformance PlatformFallbackToggleStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    v5[0] = &protocol witness table for ToggleStyleModifier<A>;
    v5[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v4, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformFallbackToggleStyle()
{
  return &type metadata for PlatformFallbackToggleStyle;
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in PlatformFallbackToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18792A1A4()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>> and conformance <> ModifiedContent<A(&lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<SwitchToggleStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<SwitchToggleStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>> and conformance <> ModifiedContent<A(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = &protocol witness table for ToggleStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<SwitchToggleStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<SwitchToggleStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for Toggle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Toggle);
    type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<SwitchToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SwitchToggleStyle and conformance SwitchToggleStyle, (uint64_t)&type metadata for SwitchToggleStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<SwitchToggleStyle>>);
  }
}

void type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for ToggleStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type SwitchToggleStyle and conformance SwitchToggleStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwitchToggleStyle and conformance SwitchToggleStyle;
  if (!lazy protocol witness table cache variable for type SwitchToggleStyle and conformance SwitchToggleStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwitchToggleStyle, &type metadata for SwitchToggleStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwitchToggleStyle and conformance SwitchToggleStyle);
  }
  return result;
}

uint64_t Transaction.animationFrameInterval.getter()
{
  return Transaction._animationFrameInterval.getter();
}

uint64_t (*Transaction.animationFrameInterval.modify(uint64_t a1))()
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = Transaction._animationFrameInterval.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return Transaction.animationFrameInterval.modify;
}

uint64_t Transaction.animationFrameInterval.modify()
{
  return Transaction._animationFrameInterval.setter();
}

uint64_t Transaction.animationReason.getter()
{
  unint64_t v0;

  v0 = Transaction._animationReason.getter();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

uint64_t (*Transaction.animationReason.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = Transaction._animationReason.getter();
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = BYTE4(v3) & 1;
  return Transaction.animationReason.modify;
}

uint64_t Transaction.animationReason.modify()
{
  return Transaction._animationReason.setter();
}

uint64_t sub_18792A494@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = Transaction._animationFrameInterval.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_18792A4C4()
{
  return Transaction._animationFrameInterval.setter();
}

uint64_t sub_18792A4F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = Transaction._animationReason.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_18792A520()
{
  return Transaction._animationReason.setter();
}

void View.digitalCrownAccessory<A>(content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.digitalCrownAccessory(visibility:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_18792A57C(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA25SearchSuggestionsModifierVyqd__GGAaBHPxAaBHD1__AgA0cH0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for DigitalCrownAccessoryModifier, (uint64_t)&protocol conformance descriptor for DigitalCrownAccessoryModifier<A>);
}

uint64_t type metadata accessor for DigitalCrownAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DigitalCrownAccessoryModifier);
}

uint64_t sub_18792A59C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_18792A5F8(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA25SearchSuggestionsModifierVyqd__GGAaBHPxAaBHD1__AgA0cH0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for DigitalCrownIndicatorModifier, (uint64_t)&protocol conformance descriptor for DigitalCrownIndicatorModifier<A>);
}

uint64_t type metadata accessor for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DigitalCrownIndicatorModifier);
}

uint64_t destroy for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2)
{
  return destroy for DigitalCrownIndicatorModifier(a1, a2, (void (*)(_QWORD, _QWORD))outlined consume of Environment<ControlSize>.Content);
}

uint64_t initializeWithCopy for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DigitalCrownIndicatorModifier(a1, a2, a3, (void (*)(uint64_t, uint64_t))outlined copy of Environment<ControlSize>.Content);
}

uint64_t assignWithCopy for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DigitalCrownIndicatorModifier(a1, a2, a3, (void (*)(uint64_t, _QWORD))outlined copy of Environment<ControlSize>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<ControlSize>.Content);
}

uint64_t assignWithTake for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DigitalCrownIndicatorModifier(a1, a2, a3, (void (*)(uint64_t, uint64_t))outlined consume of Environment<ControlSize>.Content);
}

uint64_t destroy for DigitalCrownAccessoryModifier(uint64_t a1, uint64_t a2)
{
  return destroy for DigitalCrownIndicatorModifier(a1, a2, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content);
}

uint64_t destroy for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD))
{
  swift_release();
  a3(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  return swift_release();
}

uint64_t initializeWithCopy for DigitalCrownAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DigitalCrownIndicatorModifier(a1, a2, a3, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
}

uint64_t initializeWithCopy for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  a4(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DigitalCrownAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DigitalCrownIndicatorModifier(a1, a2, a3, (void (*)(uint64_t, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
}

uint64_t assignWithCopy for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v9;
  swift_retain();
  swift_release();
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_BYTE *)(a2 + 24);
  a4(v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(unsigned __int8 *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 24) = v11;
  a5(v12, v13);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for DigitalCrownAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DigitalCrownIndicatorModifier(a1, a2, a3, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
}

uint64_t assignWithTake for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  char v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v7 = *(_BYTE *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(unsigned __int8 *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v7;
  a4(v8, v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitalCrownIndicatorModifier(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DigitalCrownIndicatorModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DigitalCrownIndicatorModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t DigitalCrownAccessoryModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v6;
  char v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  char v45;

  v3 = v2;
  v44 = v2[2];
  v45 = *((_BYTE *)v2 + 48);
  v6 = *((_QWORD *)&v44 + 1);
  v7 = v44;
  if (*((_QWORD *)&v44 + 1))
  {
    type metadata accessor for GraphHost();
    swift_retain_n();
    if ((static GraphHost.isUpdating.getter() & 1) != 0)
    {
      outlined release of AnyDynamicChild<A, B>((uint64_t)&v44);
      v8 = v7 & 1;
    }
    else
    {
      dispatch thunk of AnyLocation.get()();
      outlined release of AnyDynamicChild<A, B>((uint64_t)&v44);
      v8 = v36;
    }
    v10 = 0;
  }
  else
  {
    LOBYTE(v30) = v44 & 1;
    static os_log_type_t.fault.getter();
    v9 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    static Binding.constant(_:)();
    v10 = v36;
    v6 = v37;
    v8 = v38;
  }
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DigitalCrownAccessoryModifier<A>, a1);
  v11 = type metadata accessor for _ViewModifier_Content();
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v11);
  View.focused(_:)(v10, v6, v8, v11, v12, (uint64_t)&v36);
  swift_release();
  swift_release();
  v23 = v36;
  v24 = v37;
  v25 = v38;
  v26 = v39;
  v13 = swift_allocObject();
  v14 = *v3;
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v13 + 32) = v14;
  v15 = v3[2];
  *(_OWORD *)(v13 + 48) = v3[1];
  *(_OWORD *)(v13 + 64) = v15;
  *(_BYTE *)(v13 + 80) = *((_BYTE *)v3 + 48);
  v42 = *((_QWORD *)v3 + 2);
  v43 = *((_BYTE *)v3 + 24);
  outlined retain of State<Bool>((uint64_t)&v44);
  swift_retain();
  outlined retain of Environment<PaletteSelectionEffect>((uint64_t)&v42);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for FocusStateBindingModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FocusStateBindingModifier);
  v16 = type metadata accessor for ModifiedContent();
  v29[0] = v12;
  v29[1] = &protocol witness table for FocusStateBindingModifier<A>;
  v17 = MEMORY[0x1E0CE2E70];
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v29);
  View.transformPreference<A>(_:_:)();
  swift_release();
  swift_release();
  swift_release();
  v23 = v30;
  v24 = v31;
  v25 = v32;
  v26 = v33;
  v27 = v34;
  v28 = v35;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<DigitalCrownViewKey>, (uint64_t)&type metadata for DigitalCrownViewKey, (uint64_t)&protocol witness table for DigitalCrownViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v19 = type metadata accessor for ModifiedContent();
  v22[0] = v18;
  v22[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<DigitalCrownViewKey> and conformance _PreferenceTransformModifier<A>();
  v20 = MEMORY[0x18D75FFDC](v17, v19, v22);
  static ViewBuilder.buildExpression<A>(_:)(&v23, v19, v20);
  swift_release();
  swift_release();
  swift_release();
  v30 = v36;
  v31 = v37;
  v32 = v38;
  v33 = v39;
  v34 = v40;
  v35 = v41;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v30, v19, a2);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in DigitalCrownAccessoryModifier.body(content:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  char v25;

  v7 = result;
  v24 = *(_OWORD *)(a2 + 32);
  v25 = *(_BYTE *)(a2 + 48);
  v8 = v24;
  if (!*((_QWORD *)&v24 + 1))
  {
LABEL_4:
    if ((v8 & 1) == 0)
      return result;
    goto LABEL_5;
  }
  type metadata accessor for GraphHost();
  swift_retain();
  if ((static GraphHost.isUpdating.getter() & 1) != 0)
  {
    dispatch thunk of AnyLocation.wasRead.setter();
    result = outlined release of AnyDynamicChild<A, B>((uint64_t)&v24);
    goto LABEL_4;
  }
  dispatch thunk of AnyLocation.get()();
  result = outlined release of AnyDynamicChild<A, B>((uint64_t)&v24);
  if ((v22 & 1) != 0)
  {
LABEL_5:
    *(_QWORD *)&v20 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(_QWORD *)a2);
    *((_QWORD *)&v20 + 1) = v9;
    v10 = *(_QWORD *)(a2 + 16);
    v11 = *(_BYTE *)(a2 + 24);
    swift_retain();
    outlined copy of Environment<Bool>.Content(v10, v11);
    specialized Environment.wrappedValue.getter(v10, v11);
    outlined consume of Environment<Bool>.Content(v10, v11);
    v13 = type metadata accessor for LazyView(0, a3, a4, v12);
    v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyView<A>, v13);
    View.opacity(_:)();
    swift_release();
    v20 = v22;
    v21 = v23;
    v15 = type metadata accessor for ModifiedContent();
    v19[0] = v14;
    v19[1] = MEMORY[0x1E0CE2BA8];
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v15, v19);
    v16 = AnyView.init<A>(_:)();
    v17 = *(_QWORD *)(v7 + 8);
    outlined copy of Environment<Bool>.Content(v10, v11);
    swift_retain();
    LOBYTE(v14) = specialized Environment.wrappedValue.getter(v10, v11);
    outlined consume of Environment<Bool>.Content(v10, v11);
    v18 = *(_BYTE *)(v7 + 17);
    swift_release();
    result = swift_release();
    *(_QWORD *)v7 = v16;
    *(_QWORD *)(v7 + 8) = v17;
    *(_BYTE *)(v7 + 16) = v14;
    *(_BYTE *)(v7 + 17) = v18;
    *(_WORD *)(v7 + 18) = 257;
  }
  return result;
}

uint64_t DigitalCrownIndicatorModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v5;
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  __int128 v46;
  char v47;

  v5 = v2[1];
  v42 = *v2;
  v43 = v5;
  v44 = v2[2];
  v45 = *((_BYTE *)v2 + 48);
  v46 = v44;
  v47 = v45;
  v6 = *((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    type metadata accessor for GraphHost();
    swift_retain_n();
    if ((static GraphHost.isUpdating.getter() & 1) != 0)
    {
      outlined release of AnyDynamicChild<A, B>((uint64_t)&v46);
      v7 = v44 & 1;
    }
    else
    {
      dispatch thunk of AnyLocation.get()();
      outlined release of AnyDynamicChild<A, B>((uint64_t)&v46);
      v7 = v36;
    }
    v9 = 0;
  }
  else
  {
    LOBYTE(v30) = v44 & 1;
    static os_log_type_t.fault.getter();
    v8 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    static Binding.constant(_:)();
    v9 = v36;
    v6 = v37;
    v7 = v38;
  }
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DigitalCrownIndicatorModifier<A>, a1);
  v10 = type metadata accessor for _ViewModifier_Content();
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v10);
  View.focused(_:)(v9, v6, v7, v10, v11, (uint64_t)&v36);
  swift_release();
  swift_release();
  v23 = v36;
  v24 = v37;
  v25 = v38;
  v26 = v39;
  v12 = swift_allocObject();
  v13 = v42;
  v14 = v43;
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v12 + 32) = v13;
  v15 = v44;
  *(_OWORD *)(v12 + 48) = v14;
  *(_OWORD *)(v12 + 64) = v15;
  *(_BYTE *)(v12 + 80) = v45;
  outlined retain of DigitalCrownIndicatorModifier<A>((uint64_t)&v42);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for FocusStateBindingModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FocusStateBindingModifier);
  v16 = type metadata accessor for ModifiedContent();
  v29[0] = v11;
  v29[1] = &protocol witness table for FocusStateBindingModifier<A>;
  v17 = MEMORY[0x1E0CE2E70];
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v29);
  View.transformPreference<A>(_:_:)();
  swift_release();
  swift_release();
  swift_release();
  v23 = v30;
  v24 = v31;
  v25 = v32;
  v26 = v33;
  v27 = v34;
  v28 = v35;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<DigitalCrownViewKey>, (uint64_t)&type metadata for DigitalCrownViewKey, (uint64_t)&protocol witness table for DigitalCrownViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v19 = type metadata accessor for ModifiedContent();
  v22[0] = v18;
  v22[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<DigitalCrownViewKey> and conformance _PreferenceTransformModifier<A>();
  v20 = MEMORY[0x18D75FFDC](v17, v19, v22);
  static ViewBuilder.buildExpression<A>(_:)(&v23, v19, v20);
  swift_release();
  swift_release();
  swift_release();
  v30 = v36;
  v31 = v37;
  v32 = v38;
  v33 = v39;
  v34 = v40;
  v35 = v41;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v30, v19, a2);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in DigitalCrownIndicatorModifier.body(content:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  char v25;

  v7 = result;
  v24 = *(_OWORD *)(a2 + 32);
  v25 = *(_BYTE *)(a2 + 48);
  v8 = v24;
  if (!*((_QWORD *)&v24 + 1))
  {
LABEL_4:
    if ((v8 & 1) == 0)
      return result;
    goto LABEL_5;
  }
  type metadata accessor for GraphHost();
  swift_retain();
  if ((static GraphHost.isUpdating.getter() & 1) != 0)
  {
    dispatch thunk of AnyLocation.wasRead.setter();
    result = outlined release of AnyDynamicChild<A, B>((uint64_t)&v24);
    goto LABEL_4;
  }
  dispatch thunk of AnyLocation.get()();
  result = outlined release of AnyDynamicChild<A, B>((uint64_t)&v24);
  if ((v22 & 1) != 0)
  {
LABEL_5:
    v9 = *(_QWORD *)v7;
    *(_QWORD *)&v20 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(_QWORD *)a2);
    *((_QWORD *)&v20 + 1) = v10;
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_BYTE *)(a2 + 24);
    swift_retain();
    swift_retain();
    outlined copy of Environment<Bool>.Content(v11, v12);
    specialized Environment.wrappedValue.getter(v11, v12, &v22);
    outlined consume of Environment<Bool>.Content(v11, v12);
    v14 = type metadata accessor for LazyView(0, a3, a4, v13);
    v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyView<A>, v14);
    View.opacity(_:)();
    swift_release();
    v20 = v22;
    v21 = v23;
    v16 = type metadata accessor for ModifiedContent();
    v19[0] = v15;
    v19[1] = MEMORY[0x1E0CE2BA8];
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v19);
    v17 = AnyView.init<A>(_:)();
    LOBYTE(v15) = *(_BYTE *)(v7 + 16);
    swift_release();
    swift_release();
    outlined copy of Environment<Bool>.Content(v11, v12);
    specialized Environment.wrappedValue.getter(v11, v12, &v22);
    result = outlined consume of Environment<Bool>.Content(v11, v12);
    v18 = v22;
    *(_QWORD *)v7 = v9;
    *(_QWORD *)(v7 + 8) = v17;
    *(_BYTE *)(v7 + 16) = v15;
    *(_BYTE *)(v7 + 17) = v18;
    *(_WORD *)(v7 + 18) = 257;
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DigitalCrownAccessoryModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18792B4DC()
{
  return objectdestroyTm_29((void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content);
}

uint64_t partial apply for closure #1 in DigitalCrownAccessoryModifier.body(content:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in DigitalCrownAccessoryModifier.body(content:)(a1, v1 + 32, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<DigitalCrownViewKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<DigitalCrownViewKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<DigitalCrownViewKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<DigitalCrownViewKey>, (uint64_t)&type metadata for DigitalCrownViewKey, (uint64_t)&protocol witness table for DigitalCrownViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<DigitalCrownViewKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t sub_18792B55C()
{
  return objectdestroyTm_29((void (*)(_QWORD, _QWORD))outlined consume of Environment<ControlSize>.Content);
}

uint64_t partial apply for closure #1 in DigitalCrownIndicatorModifier.body(content:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in DigitalCrownIndicatorModifier.body(content:)(a1, v1 + 32, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined retain of DigitalCrownIndicatorModifier<A>(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v2, v3);
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for DigitalCrownViewKey()
{
  return &type metadata for DigitalCrownViewKey;
}

uint64_t sub_18792B5D4(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyAA01_c9Modifier_E0VyAA021DigitalCrownAccessoryF0VyxGGAA017FocusStateBindingF033_274D264A38B51DC68ACC48A91353B7D0LLVySbGGAA020_PreferenceTransformF0VyAA0ghC3KeyVGGAaBHPAoaBHPAjaBHPyHC_AnA0cF0HPyHCHC_AtaVHPyHCHCTm(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for DigitalCrownAccessoryModifier, (uint64_t)&protocol conformance descriptor for DigitalCrownAccessoryModifier<A>);
}

uint64_t sub_18792B5E8(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyAA01_c9Modifier_E0VyAA021DigitalCrownAccessoryF0VyxGGAA017FocusStateBindingF033_274D264A38B51DC68ACC48A91353B7D0LLVySbGGAA020_PreferenceTransformF0VyAA0ghC3KeyVGGAaBHPAoaBHPAjaBHPyHC_AnA0cF0HPyHCHC_AtaVHPyHCHCTm(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for DigitalCrownIndicatorModifier, (uint64_t)&protocol conformance descriptor for DigitalCrownIndicatorModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyAA01_c9Modifier_E0VyAA021DigitalCrownAccessoryF0VyxGGAA017FocusStateBindingF033_274D264A38B51DC68ACC48A91353B7D0LLVySbGGAA020_PreferenceTransformF0VyAA0ghC3KeyVGGAaBHPAoaBHPAjaBHPyHC_AnA0cF0HPyHCHC_AtaVHPyHCHCTm(_QWORD *a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];

  v4 = a2(255, *a1, a1[1]);
  MEMORY[0x18D75FFDC](a3, v4);
  v5 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for FocusStateBindingModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FocusStateBindingModifier);
  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<DigitalCrownViewKey>, (uint64_t)&type metadata for DigitalCrownViewKey, (uint64_t)&protocol witness table for DigitalCrownViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v7 = type metadata accessor for ModifiedContent();
  v11[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v5);
  v11[1] = &protocol witness table for FocusStateBindingModifier<A>;
  v8 = MEMORY[0x1E0CE2E70];
  v10[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v11);
  v10[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<DigitalCrownViewKey> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](v8, v7, v10);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance DigitalCrownViewKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int16 v3;
  char v4;
  char v5;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EDF002E8;
  v3 = dword_1EDF002F0;
  v4 = BYTE2(dword_1EDF002F0);
  v5 = HIBYTE(dword_1EDF002F0);
  *(_QWORD *)a1 = static DigitalCrownViewKey.defaultValue;
  *(_QWORD *)(a1 + 8) = v2;
  *(_WORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 18) = v4;
  *(_BYTE *)(a1 + 19) = v5;
  swift_retain();
  return swift_retain();
}

uint64_t specialized static DigitalCrownViewKey.reduce(value:nextValue:)(uint64_t result, void (*a2)(_QWORD *__return_ptr))
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  char v11;
  char v12;
  char v13;

  if ((*(_BYTE *)(result + 19) & 1) == 0)
  {
    v2 = result;
    a2(v10);
    v3 = v10[1];
    v4 = v11;
    v5 = v12;
    v6 = v13;
    v7 = *(_QWORD *)v2;
    v8 = v10[0];
    if (!v10[0])
    {
      swift_retain();
      v8 = v7;
    }
    swift_retain();
    swift_release();
    *(_QWORD *)v2 = v8;
    v9 = *(_QWORD *)(v2 + 8);
    if (!v3)
    {
      swift_retain();
      v3 = v9;
    }
    swift_release();
    result = swift_release();
    *(_QWORD *)(v2 + 8) = v3;
    *(_BYTE *)(v2 + 16) = v4;
    *(_BYTE *)(v2 + 17) = v5;
    *(_BYTE *)(v2 + 18) = (*(_BYTE *)(v2 + 18) | v6) & 1;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DigitalCrownViewStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DigitalCrownViewStorage(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  return a1;
}

uint64_t assignWithTake for DigitalCrownViewStorage(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitalCrownViewStorage(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 20))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DigitalCrownViewStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 20) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalCrownViewStorage()
{
  return &type metadata for DigitalCrownViewStorage;
}

void View.digitalCrownAccessory(_:)()
{
  View.digitalCrownAccessory(visibility:)();
}

void View.digitalCrownIndicator<A>(content:)()
{
  View.digitalCrownAccessory<A>(content:)();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance UpdateFidelityKey(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

uint64_t EnvironmentValues.updateFidelity.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<UpdateFidelityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UpdateFidelityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<UpdateFidelityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<UpdateFidelityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UpdateFidelityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<UpdateFidelityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.updateFidelity.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<UpdateFidelityKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UpdateFidelityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<UpdateFidelityKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t DateSequenceTimeline.requestedFidelityForStartEntry(in:withPreviousEntry:)(_QWORD *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  char *v62;
  id v63;
  char *v64;
  Class isa;
  Class v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  _QWORD *v76;
  id v77;
  id v78;
  char v79;
  _QWORD v80[3];
  uint64_t v81;
  uint64_t v82;

  v78 = a2;
  v76 = a1;
  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v2, v3);
  v75 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v67 - v7;
  type metadata accessor for (lower: Date, upper: Date)();
  v10 = v9;
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v67 - v16;
  v18 = type metadata accessor for Date();
  v19 = *(_QWORD **)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v67 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v67 - v29;
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v67 - v33;
  type metadata accessor for Range<Date>();
  MEMORY[0x1E0C80A78](v35, v36);
  v42 = MEMORY[0x1E0C80A78](v37, v38);
  if (v78)
    return (uint64_t)objc_msgSend(v78, sel_requestedFidelity, v42);
  v71 = v39;
  v72 = v41;
  v73 = (uint64_t)&v67 - v40;
  v74 = v17;
  v78 = v8;
  v67 = v22;
  v68 = v26;
  outlined init with copy of TableColumnList((uint64_t)v77 + OBJC_IVAR____TtC7SwiftUI20DateSequenceTimeline_schedule, (uint64_t)v80);
  v44 = v81;
  v45 = v82;
  v46 = __swift_project_boxed_opaque_existential_1(v80, v81);
  DateInterval.start.getter();
  static Date.distantFuture.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v47 = *(int *)(v10 + 48);
    v76 = v46;
    v48 = v74;
    v49 = &v74[v47];
    v70 = v45;
    v50 = v19;
    v51 = (void (*)(char *, char *, uint64_t))v19[4];
    v51(v74, v34, v18);
    v51(v49, v30, v18);
    v52 = *(int *)(v10 + 48);
    v69 = v44;
    v53 = v13;
    v54 = &v13[v52];
    v55 = (void (*)(char *, char *, uint64_t))v50[2];
    v55(v13, v48, v18);
    v55(v54, v49, v18);
    v56 = v72;
    v51((char *)v72, v53, v18);
    v57 = (void (*)(char *, uint64_t))v50[1];
    v57(v54, v18);
    v58 = &v53[*(int *)(v10 + 48)];
    v51(v53, v48, v18);
    v51(v58, v49, v18);
    v51((char *)(v56 + *(int *)(v71 + 36)), v58, v18);
    v57(v53, v18);
    v59 = v73;
    outlined init with take of Range<Date>(v56, v73);
    v79 = 1;
    TimelineSchedule.entries(within:mode:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v59, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
    v60 = (uint64_t)v78;
    dispatch thunk of _AnyIteratorBoxBase.next()();
    v61 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v50[6];
    if (v61(v60, 1, v18) != 1)
    {
      v62 = v68;
      v51(v68, (char *)v60, v18);
      v60 = (uint64_t)v75;
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (v61(v60, 1, v18) != 1)
      {
        v64 = v67;
        v51(v67, (char *)v60, v18);
        isa = Date._bridgeToObjectiveC()().super.isa;
        v66 = Date._bridgeToObjectiveC()().super.isa;
        v63 = objc_msgSend(v77, sel_estimatedFidelityForPresentationTime_nextPresentationTime_, isa, v66);

        swift_release();
        v57(v64, v18);
        v57(v62, v18);
        return (uint64_t)v63;
      }
      v57(v62, v18);
    }
    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v60, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    return 0;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall TimelineView.Context.invalidateTimelineContent()()
{
  uint64_t Strong;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)Strong + 80))(0xD00000000000001ELL, 0x8000000187BEBB90);
    swift_release();
  }
}

uint64_t type metadata accessor for DateSequenceTimeline()
{
  return objc_opt_self();
}

uint64_t (*TimelineView<>.AlwaysOnTimelinePreferenceWriter.value.getter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(_QWORD *a1)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  objc_class *v15;
  uint64_t Value;
  void (*v17)(char *, uint64_t, uint64_t);
  id v18;
  id v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v21 - v13;
  v15 = (objc_class *)type metadata accessor for DateSequenceTimeline();
  Value = AGGraphGetValue();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v17(v14, Value, a3);
  v17(v10, (uint64_t)v14, a3);
  v18 = a1;
  v19 = specialized DateSequenceTimeline.__allocating_init(identifier:schedule:)((uint64_t)v18, (uint64_t)v10, v15, a3, a5);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, a3);
  *(_QWORD *)(swift_allocObject() + 16) = v19;
  return partial apply for closure #1 in TimelineView<>.AlwaysOnTimelinePreferenceWriter.value.getter;
}

uint64_t closure #1 in TimelineView<>.AlwaysOnTimelinePreferenceWriter.value.getter(_QWORD *a1, void *a2)
{
  id v3;

  v3 = a2;
  MEMORY[0x18D75CF58]();
  if (*(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t protocol witness for Rule.value.getter in conformance TimelineView<A, B><>.AlwaysOnTimelinePreferenceWriter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t (**a3)()@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  TimelineView<>.AlwaysOnTimelinePreferenceWriter.value.getter(*(void **)v3, *(unsigned int *)(v3 + 8), *(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a1 + 32));
  v6 = v5;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = partial apply for closure #1 in TimelineView<>.AlwaysOnTimelinePreferenceWriter.value.getter;
  *(_QWORD *)(result + 24) = v6;
  *a3 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  a3[1] = (uint64_t (*)())result;
  return result;
}

BOOL TimelineIdentifier.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v5;
  _BYTE v6[24];
  uint64_t v7;

  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v6);
  if (v7)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v3 = *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI18TimelineIdentifier_identifier];

      return v3 == *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI18TimelineIdentifier_identifier);
    }
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
  }
  return 0;
}

uint64_t type metadata accessor for TimelineIdentifier()
{
  return objc_opt_self();
}

void type metadata accessor for (lower: Date, upper: Date)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (lower: Date, upper: Date))
  {
    type metadata accessor for Date();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (lower: Date, upper: Date));
  }
}

void type metadata accessor for Range<Date>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Range<Date>)
  {
    type metadata accessor for Date();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
    v0 = type metadata accessor for Range();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<Date>);
  }
}

uint64_t outlined init with take of Range<Date>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Range<Date>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized DateSequenceTimeline.unconfiguredEntries(for:previousEntry:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  Class isa;
  id v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v1 = type metadata accessor for Date();
  v17 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TableColumnList(v0 + OBJC_IVAR____TtC7SwiftUI20DateSequenceTimeline_schedule, (uint64_t)v19);
  __swift_project_boxed_opaque_existential_1(v19, v19[3]);
  LOBYTE(v18) = 1;
  v5 = TimelineSchedule.entries(within:mode:)();
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v7 = (void *)objc_opt_self();
    v8 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v16 = v5;
    v9 = v5 + v8;
    v10 = *(_QWORD *)(v17 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v17 + 16);
    do
    {
      v11(v4, v9, v1);
      isa = Date._bridgeToObjectiveC()().super.isa;
      v13 = objc_msgSend(v7, sel_entryForPresentationTime_withRequestedFidelity_, isa, -1, v16);

      (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v1);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v9 += v10;
      --v6;
    }
    while (v6);
    v14 = v18;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x1E0DEE9D8];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  return v14;
}

unint64_t type metadata accessor for BLSAlwaysOnTimelineUnconfiguredEntry()
{
  unint64_t result;

  result = lazy cache variable for type metadata for BLSAlwaysOnTimelineUnconfiguredEntry;
  if (!lazy cache variable for type metadata for BLSAlwaysOnTimelineUnconfiguredEntry)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BLSAlwaysOnTimelineUnconfiguredEntry);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<UpdateFidelityKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<UpdateFidelityKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UpdateFidelityKey>);
  }
}

ValueMetadata *type metadata accessor for UpdateFidelityKey()
{
  return &type metadata for UpdateFidelityKey;
}

void type metadata accessor for TimelineView<>.AlwaysOnTimelinePreferenceWriter()
{
  JUMPOUT(0x18D75FF28);
}

void base witness table accessor for _AttributeBody in TimelineView<A, B><>.AlwaysOnTimelinePreferenceWriter()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_18792CB3C()
{
  swift_release();
  return swift_deallocObject();
}

id specialized DateSequenceTimeline.__allocating_init(identifier:schedule:)(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  id v10;
  id v11;
  objc_super v13;
  uint64_t v14[5];

  v14[3] = a4;
  v14[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = objc_allocWithZone(a3);
  outlined init with copy of TableColumnList((uint64_t)v14, (uint64_t)v10 + OBJC_IVAR____TtC7SwiftUI20DateSequenceTimeline_schedule);
  v13.receiver = v10;
  v13.super_class = a3;
  v11 = objc_msgSendSuper2(&v13, sel_initWithIdentifier_configure_, a1, 0);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v11;
}

uint64_t sub_18792CC04()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TimelineView<>.AlwaysOnTimelinePreferenceWriter.value.getter(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in TimelineView<>.AlwaysOnTimelinePreferenceWriter.value.getter(a1, *(void **)(v1 + 16));
}

uint64_t (*NavigationStateHost.navigationState.modify())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t NavigationStateHost.seedHost.getter()
{
  return swift_retain();
}

uint64_t NavigationStateHost.createState(environment:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[4];
  __int128 v8;
  _BYTE v9[28];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[26];
  uint64_t v15[20];

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 168) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v7[0] = v2;
  v7[1] = v3;
  v7[2] = 0;
  v7[3] = specialized Dictionary.init(dictionaryLiteral:)(v4);
  v8 = 0u;
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v7);
  swift_beginAccess();
  outlined init with take of NavigationState?(v1 + 16, (uint64_t)v15);
  outlined init with take of NavigationState?((uint64_t)v7, v1 + 16);
  swift_retain();
  swift_retain();
  outlined release of NavigationState?(v15);
  type metadata accessor for NavigationHostingControllerCache_UIKit();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v4);
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v1 + 192) = v5;
  result = swift_release();
  *(_BYTE *)(v1 + 200) = 1;
  return result;
}

uint64_t NavigationStateHost.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v2[19];

  outlined init with take of NavigationState?(v0 + 16, (uint64_t)v2);
  outlined release of NavigationState?(v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t outlined init with take of NavigationState?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for NavigationState?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for NavigationState?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for NavigationState?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationState?);
  }
}

uint64_t *outlined release of NavigationState?(uint64_t *a1)
{
  outlined consume of NavigationState?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17]);
  return a1;
}

double _s7SwiftUI15NavigationStateVSgWOi0_(uint64_t a1)
{
  double result;

  *(_WORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t static Animation.uiViewAnimation(curve:duration:)(uint64_t a1)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
    case 6:
      result = static Animation.easeInOut(duration:)();
      break;
    case 1:
      result = static Animation.easeIn(duration:)();
      break;
    case 2:
      result = static Animation.easeOut(duration:)();
      break;
    case 3:
      result = static Animation.linear(duration:)();
      break;
    case 4:
      result = static Animation.timingCurve(_:_:_:_:duration:)();
      break;
    case 5:
      result = static Animation.coreAnimationDefault(duration:)();
      break;
    case 7:
      result = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t UIUserInterfaceStyle.init(_:)(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;

  v1 = *a1;
  v2 = 1;
  if ((v1 & 1) != 0)
    v2 = 2;
  if (v1 == 2)
    return 0;
  else
    return v2;
}

id UIBezierPath.init(_:)(uint64_t a1)
{
  char v2;
  objc_class *v3;
  objc_class *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  void *ObjCClassFromMetadata;
  void *v14;
  id v15;
  id v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;
  double v26;
  double v27;
  double v28;
  double v29;
  char v30;

  Path.roundedRect()();
  if (v30 == 2 || (FixedRoundedRect.isUniform.getter() & 1) == 0)
  {
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    v14 = (void *)Path.cgPath.getter();
    v15 = objc_msgSend(ObjCClassFromMetadata, sel_bezierPathWithCGPath_, v14);
    outlined release of Path(a1);

    return v15;
  }
  else
  {
    v2 = FixedRoundedRect.needsContinuousCorners.getter();
    v3 = (objc_class *)swift_getObjCClassFromMetadata();
    v4 = v3;
    if ((v2 & 1) != 0)
    {
      FixedRoundedRect.rect.getter();
      v26 = v6;
      v28 = v5;
      v8 = v7;
      v10 = v9;
      FixedRoundedRect.cornerSize.getter();
      v12 = -[objc_class bezierPathWithRoundedRect:cornerRadius:](v4, sel_bezierPathWithRoundedRect_cornerRadius_, v28, v26, v8, v10, v11);
    }
    else
    {
      v17 = objc_allocWithZone(v3);
      FixedRoundedRect.rect.getter();
      v27 = v19;
      v29 = v18;
      v21 = v20;
      v23 = v22;
      FixedRoundedRect.cornerSize.getter();
      v12 = objc_msgSend(v17, sel_initWithArcRoundedRectForSwiftUI_cornerRadius_, v29, v27, v21, v23, v24);
    }
    v25 = v12;
    outlined release of Path(a1);
    return v25;
  }
}

uint64_t LayoutDirection.init(_:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (result == 1)
  {
    *a2 = 1;
  }
  else if (result)
  {
    *a2 = 2;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

id one-time initialization function for dynamicColorCache()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_strongToWeakObjectsMapTable);
  dynamicColorCache = (uint64_t)result;
  return result;
}

uint64_t closure #1 in UIColor.init(_:)()
{
  uint64_t v1;

  UITraitCollection.baseEnvironment.getter(&v1);
  dispatch thunk of AnyColorBox.resolve(in:)();
  swift_release();
  swift_release();
  Color.Resolved.kitColor.getter();
  objc_opt_self();
  return swift_dynamicCastObjCClassUnconditional();
}

uint64_t partial apply for closure #1 in UIColor.init(_:)()
{
  return closure #1 in UIColor.init(_:)();
}

void closure #1 in UIColor.resolve(in:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _DWORD *a4@<X8>)
{
  id v8;
  objc_class *v9;
  char *v10;
  char *v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  objc_super v24;

  v8 = objc_msgSend((id)objc_opt_self(), sel_currentTraitCollection);
  v9 = (objc_class *)type metadata accessor for EnvironmentWrapper();
  v10 = (char *)objc_allocWithZone(v9);
  v11 = &v10[OBJC_IVAR___SwiftUIEnvironmentWrapper_environment];
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  *(_DWORD *)&v10[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase] = 0;
  v12 = &v10[OBJC_IVAR___SwiftUIEnvironmentWrapper_focusedValues];
  *(_QWORD *)v12 = 0;
  v12[8] = 0;
  *((_DWORD *)v12 + 3) = 0;
  v24.receiver = v10;
  v24.super_class = v9;
  swift_retain();
  swift_retain();
  v13 = objc_msgSendSuper2(&v24, sel_init);
  v14 = (void *)UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();

  v15 = objc_msgSend(a3, sel_resolvedColorWithTraitCollection_, v14);
  v16 = Color.Resolved.init(platformColor:)();
  v18 = v17;
  LOBYTE(v8) = v19;

  v20 = 0;
  LODWORD(v21) = 0;
  v22 = 0;
  LODWORD(v23) = 0;
  if ((v8 & 1) == 0)
  {
    v21 = HIDWORD(v16);
    v23 = HIDWORD(v18);
    v20 = v16;
    v22 = v18;
  }
  *a4 = v20;
  a4[1] = v21;
  a4[2] = v22;
  a4[3] = v23;
}

id UIColor.staticColor.getter()
{
  void *v0;

  if (_UIColorDependsOnTraitCollection(v0))
    return 0;
  else
    return objc_msgSend(v0, sel_CGColor);
}

id protocol witness for ColorProvider.staticColor.getter in conformance UIColor()
{
  void **v0;
  void *v1;

  v1 = *v0;
  if (_UIColorDependsOnTraitCollection(*v0))
    return 0;
  else
    return objc_msgSend(v1, sel_CGColor);
}

uint64_t ColorScheme.init(_:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (result == 2)
  {
    *a2 = 1;
  }
  else if (result == 1)
  {
    *a2 = 0;
  }
  else
  {
    *a2 = 2;
  }
  return result;
}

uint64_t ColorSchemeContrast.init(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 2 * (result != 0);
  if (result == 1)
    v2 = 1;
  *a2 = v2;
  return result;
}

uint64_t UIAccessibilityContrast.init(_:)(unsigned __int8 *a1)
{
  int v1;

  v1 = *a1;
  if (v1 == 2)
    return -1;
  else
    return v1 & 1;
}

void ContentSizeCategory.init(_:)(void *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;

  DynamicTypeSize.init(uiSizeCategory:)(a1, &v3);
  *a2 = v3;
}

id UIContentSizeCategory.init(_:)(char *a1)
{
  return **((id **)&unk_1E1B4A230 + *a1);
}

{
  return **((id **)&unk_1E1B4A230 + *a1);
}

uint64_t UITraitEnvironmentLayoutDirection.init(_:)(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t UILegibilityWeight.init(_:)(unsigned __int8 *a1)
{
  int v1;

  v1 = *a1;
  if (v1 == 2)
    return -1;
  else
    return v1 & 1;
}

uint64_t UserInterfaceSizeClass.init(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 2 * (result != 1);
  if (result == 2)
    v2 = 1;
  *a2 = v2;
  return result;
}

uint64_t UIUserInterfaceSizeClass.init(_:)(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;

  v1 = *a1;
  v2 = 1;
  if ((v1 & 1) != 0)
    v2 = 2;
  if (v1 == 2)
    return 0;
  else
    return v2;
}

uint64_t base witness table accessor for Hashable in UIColor()
{
  return _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_0(&lazy protocol witness table cache variable for type UIColor and conformance NSObject, MEMORY[0x1E0DEFCF8]);
}

uint64_t specialized UIRectEdge.init(_:layoutDirection:)(unsigned __int8 a1, unsigned __int8 *a2)
{
  int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  int v13;

  v3 = *a2;
  v4 = a1;
  switch(a1)
  {
    case 1u:
      return v4;
    case 2u:
      v5 = v3 == 0;
      v6 = 2;
      v7 = 8;
      goto LABEL_7;
    case 4u:
      v4 = 4;
      break;
    case 8u:
      v5 = v3 == 0;
      v6 = 8;
      v7 = 2;
LABEL_7:
      if (v5)
        v4 = v6;
      else
        v4 = v7;
      break;
    default:
      if (static Edge.Set.vertical.getter() == a1)
      {
        v4 = 5;
      }
      else if (static Edge.Set.horizontal.getter() == a1)
      {
        v4 = 10;
      }
      else if (static Edge.Set.all.getter() == a1)
      {
        v4 = 15;
      }
      else
      {
        v9 = static Edge.allCases.getter();
        v10 = *(_QWORD *)(v9 + 16);
        if (v10)
        {
          v4 = 0;
          for (i = 0; i != v10; ++i)
          {
            v12 = *(unsigned __int8 *)(v9 + i + 32);
            if ((v12 - 9) < 0xEFu)
              goto LABEL_22;
            v13 = 1 << v12;
            if ((v12 & 0x80) != 0)
              LOBYTE(v13) = 0;
            if ((v13 & ~a1) == 0)
LABEL_22:
              __asm { BR              X13 }
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v4 = 0;
        }
      }
      break;
  }
  return v4;
}

uint64_t specialized UITableViewScrollPosition.init(_:)(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return 0;
  static UnitPoint.bottom.getter();
  if ((static UnitPoint.== infix(_:_:)() & 1) != 0)
    return 3;
  static UnitPoint.bottomLeading.getter();
  if ((static UnitPoint.== infix(_:_:)() & 1) != 0)
    return 3;
  static UnitPoint.bottomTrailing.getter();
  if ((static UnitPoint.== infix(_:_:)() & 1) != 0)
    return 3;
  static UnitPoint.top.getter();
  if ((static UnitPoint.== infix(_:_:)() & 1) != 0)
    return 1;
  static UnitPoint.topLeading.getter();
  if ((static UnitPoint.== infix(_:_:)() & 1) != 0)
    return 1;
  static UnitPoint.topTrailing.getter();
  if ((static UnitPoint.== infix(_:_:)() & 1) != 0)
    return 1;
  else
    return 2;
}

uint64_t sub_18792D894()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in static Transaction.currentUIViewTransaction(canDisableAnimations:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_invalidate);
}

void __swiftcall CarouselListStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static CarouselListStyle._makeView<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static CarouselListStyle._makeViewList<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for CarouselListStyle()
{
  return &type metadata for CarouselListStyle;
}

uint64_t Preview.init(_:traits:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _QWORD v19[2];

  v19[0] = a2;
  v19[1] = a3;
  v7 = type metadata accessor for PreviewSourceContentCategory();
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = type metadata accessor for PreviewSourceContentDomain();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DefaultPreviewSource<ViewPreviewBody>();
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, double))(v10 + 104))(v13, *MEMORY[0x1E0CA9C40], v9, v16);
  PreviewSourceContentCategory.init(stringLiteral:)();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a4;
  *(_QWORD *)(v17 + 24) = a5;
  swift_retain();
  DefaultPreviewSource.init(contentDomain:contentCategory:supportsOnDevicePreviews:supportsInteractivePreviews:body:)();
  type metadata accessor for Preview.ViewTraits();
  lazy protocol witness table accessor for type DefaultPreviewSource<ViewPreviewBody> and conformance DefaultPreviewSource<A>();
  Preview.init<A, B>(displayName:source:traits:)();
  return swift_release();
}

void type metadata accessor for DefaultPreviewSource<ViewPreviewBody>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DefaultPreviewSource<ViewPreviewBody>)
  {
    v0 = type metadata accessor for DefaultPreviewSource();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DefaultPreviewSource<ViewPreviewBody>);
  }
}

uint64_t Preview.init<A>(_:traits:arguments:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD v19[4];

  v19[2] = a2;
  v19[3] = a3;
  v19[1] = a1;
  type metadata accessor for DefaultPreviewSource<ViewPreviewBody>();
  MEMORY[0x1E0C80A78](v11, v12);
  v13 = type metadata accessor for PreviewArguments();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v19 - v16;
  buildArguments #1 <A>() in Preview.init<A>(_:traits:arguments:body:)(a4);
  swift_bridgeObjectRelease();
  static PreviewSource<>.viewGroupSource<A>(arguments:body:)((uint64_t)v17, a5, a6, a7);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  type metadata accessor for Preview.ViewTraits();
  lazy protocol witness table accessor for type DefaultPreviewSource<ViewPreviewBody> and conformance DefaultPreviewSource<A>();
  Preview.init<A, B>(displayName:source:traits:)();
  return swift_release();
}

uint64_t buildArguments #1 <A>() in Preview.init<A>(_:traits:arguments:body:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  _QWORD v13[2];

  v2 = type metadata accessor for PreviewArgumentsBuilder.Component();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2, v5);
  v6 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13[1] = a1;
  v7 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v7);
  v8 = static PreviewArgumentsBuilder.buildExpression<A>(_:)();
  MEMORY[0x1E0C80A78](v8, v9);
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(v10, (char *)v13 - v6, v2);
  _finalizeUninitializedArray<A>(_:)();
  MEMORY[0x18D754FC0]();
  swift_bridgeObjectRelease();
  static PreviewArgumentsBuilder.buildFinalResult(_:)();
  v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11((char *)v13 - v6, v2);
  return ((uint64_t (*)(char *, uint64_t))v11)((char *)v13 - v6, v2);
}

uint64_t static PreviewSource<>.viewGroupSource<A>(arguments:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v8 = type metadata accessor for PreviewSourceContentCategory();
  MEMORY[0x1E0C80A78](v8, v9);
  v10 = type metadata accessor for PreviewSourceContentDomain();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(char *, _QWORD, double))(v14 + 104))((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0CA9C40], v12);
  PreviewSourceContentCategory.init(stringLiteral:)();
  v15 = type metadata accessor for PreviewArguments();
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  (*(void (**)(char *, uint64_t, double))(v18 + 16))((char *)&v22 - v19, a1, v17);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a4;
  v20[3] = a2;
  v20[4] = a3;
  swift_retain();
  return DefaultPreviewSource.init<A>(contentDomain:contentCategory:supportsOnDevicePreviews:supportsInteractivePreviews:arguments:body:)();
}

uint64_t Preview.init<A>(_:traits:body:arguments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(double)@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  _QWORD v21[4];

  v21[2] = a2;
  v21[3] = a3;
  v21[0] = a8;
  v21[1] = a1;
  type metadata accessor for DefaultPreviewSource<ViewPreviewBody>();
  MEMORY[0x1E0C80A78](v12, v13);
  v14 = type metadata accessor for PreviewArguments();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)v21 - v18;
  a6(v17);
  static PreviewSource<>.viewGroupSource<A>(arguments:body:)((uint64_t)v19, a4, a5, a7);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
  type metadata accessor for Preview.ViewTraits();
  lazy protocol witness table accessor for type DefaultPreviewSource<ViewPreviewBody> and conformance DefaultPreviewSource<A>();
  Preview.init<A, B>(displayName:source:traits:)();
  return swift_release();
}

uint64_t ViewPreviewSource.makeView.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t ViewPreviewSource.makeView.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ViewPreviewSource.makeView.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ViewPreviewSource.contentCategory.getter()
{
  return PreviewSourceContentCategory.init(stringLiteral:)();
}

uint64_t static PreviewSourceContentCategory.swiftUIView.getter()
{
  return PreviewSourceContentCategory.init(stringLiteral:)();
}

uint64_t ViewPreviewSource.contentDomain.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0CA9C40];
  v3 = type metadata accessor for PreviewSourceContentDomain();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t protocol witness for PreviewSource.contentDomain.getter in conformance ViewPreviewSource@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0CA9C40];
  v3 = type metadata accessor for PreviewSourceContentDomain();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t protocol witness for PreviewSource.contentCategory.getter in conformance ViewPreviewSource()
{
  return PreviewSourceContentCategory.init(stringLiteral:)();
}

uint64_t closure #1 in static PreviewSource<>.viewSource(body:)@<X0>(void (*a1)(_QWORD *__return_ptr)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t *boxed_opaque_existential_1;
  __int128 v11;
  _QWORD v12[3];
  __int128 v13;

  a1(v12);
  v11 = v13;
  v3 = v13;
  v4 = __swift_project_boxed_opaque_existential_1(v12, v13);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v4, v4);
  v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v6);
  *(_OWORD *)(a2 + 24) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
  (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 32))(boxed_opaque_existential_1, v8, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t sub_18792E2B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PreviewSource<>.viewSource(body:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in static PreviewSource<>.viewSource(body:)(*(void (**)(_QWORD *__return_ptr))(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type DefaultPreviewSource<ViewPreviewBody> and conformance DefaultPreviewSource<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DefaultPreviewSource<ViewPreviewBody> and conformance DefaultPreviewSource<A>;
  if (!lazy protocol witness table cache variable for type DefaultPreviewSource<ViewPreviewBody> and conformance DefaultPreviewSource<A>)
  {
    type metadata accessor for DefaultPreviewSource<ViewPreviewBody>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CA9C18], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultPreviewSource<ViewPreviewBody> and conformance DefaultPreviewSource<A>);
  }
  return result;
}

uint64_t ViewPreviewBody.init<A>(body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
}

uint64_t closure #1 in static PreviewSource<>.viewGroupSource<A>(arguments:body:)@<X0>(void (*a1)(_QWORD *__return_ptr)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t *boxed_opaque_existential_1;
  __int128 v11;
  _QWORD v12[3];
  __int128 v13;

  a1(v12);
  v11 = v13;
  v3 = v13;
  v4 = __swift_project_boxed_opaque_existential_1(v12, v13);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v4, v4);
  v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v6);
  *(_OWORD *)(a2 + 24) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
  (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 32))(boxed_opaque_existential_1, v8, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t ViewPreviewBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TableColumnList(v1, a1);
}

void __swiftcall _Previewable.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;

  v0 = type metadata accessor for Logger();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.runtimeIssuesLog.getter();
  Logger.init(_:)();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_186E48000, v5, v6, "'@Previewable' can only be used in a #Preview body closure", v7, 2u);
    MEMORY[0x18D760108](v7, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_18792E510@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_18792E51C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for ViewPreviewSource()
{
  return &type metadata for ViewPreviewSource;
}

ValueMetadata *type metadata accessor for ViewPreviewBody()
{
  return &type metadata for ViewPreviewBody;
}

ValueMetadata *type metadata accessor for _Previewable()
{
  return &type metadata for _Previewable;
}

uint64_t sub_18792E58C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PreviewSource<>.viewGroupSource<A>(arguments:body:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in static PreviewSource<>.viewGroupSource<A>(arguments:body:)(*(void (**)(_QWORD *__return_ptr))(v1 + 24), a1);
}

ValueMetadata *type metadata accessor for RichTextAttributeResolver()
{
  return &type metadata for RichTextAttributeResolver;
}

uint64_t key path getter for AttributeScopes.swiftUI : AttributeScopes@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  AttributeScopes.swiftUI.getter();
  result = type metadata accessor for AttributeScopes.SwiftUIAttributes();
  *a1 = result;
  return result;
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.BackgroundColorAttribute()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>(0, a4, a5);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>(0, a3, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
  return dispatch thunk of Hashable.hashValue.getter();
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.ForegroundColorAttribute()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.FontAttribute()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.KerningAttribute()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t RichTextAttributeResolver.nsAttributes(for:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  char isUniquelyReferenced_nonNull_native;
  id v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  void *v73;
  id v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  void *v91;
  id v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  void *v98;
  id v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  void *v106;
  uint64_t *boxed_opaque_existential_1;
  id v108;
  uint64_t v109;
  char v110;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t KeyPath;
  uint64_t v122;
  _OWORD v123[2];
  __int128 v124;
  uint64_t v125;
  uint64_t v126;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA7930], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1, v2);
  v119 = (char *)&v117 - v3;
  v4 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v120 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v117 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v0;
  v8 = v0[1];
  v9 = v0[2];
  v126 = v9;
  KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute();
  swift_bridgeObjectRetain();
  AttributeContainer.subscript.getter();
  swift_release();
  v10 = v124;
  v11 = BYTE8(v124);
  RichTextAttributeResolver.markdownFontModifiers(for:)(v124, SBYTE8(v124));
  v12 = (void *)*MEMORY[0x1E0DC11A8];
  if ((v11 & 1) != 0 || (v10 & 0x20) == 0)
  {
    v18 = v12;
    goto LABEL_6;
  }
  v13 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
  v14 = v12;
  v15 = objc_msgSend(v13, sel_initWithInteger_, 1);
  if (!v15)
  {
LABEL_6:
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v12, &v124);

    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v124, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_7;
  }
  v16 = v15;
  v125 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(_QWORD *)&v124 = v16;
  outlined init with take of Any(&v124, v123);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v122 = v9;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v14, isUniquelyReferenced_nonNull_native);
  v126 = v122;

  swift_bridgeObjectRelease();
LABEL_7:
  v19 = swift_getKeyPath();
  MEMORY[0x1E0C80A78](v19, v20);
  *(&v117 - 2) = v21;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  if (*(_QWORD *)&v123[0]
    || (*(_QWORD *)&v124 = v7, *((_QWORD *)&v124 + 1) = v8, EnvironmentValues.font.getter())
    || (*(_QWORD *)&v124 = v7, *((_QWORD *)&v124 + 1) = v8, EnvironmentValues.defaultFont.getter()))
  {
    v22 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)&v124 = v7;
    *((_QWORD *)&v124 + 1) = v8;
    swift_retain();
    v23 = v22;
    swift_retain();
    v24 = Font.platformFont(in:modifiers:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for CTFontRef(0);
    v125 = v25;
    *(_QWORD *)&v124 = v24;
    outlined init with take of Any(&v124, v123);
    v26 = v126;
    v27 = swift_isUniquelyReferenced_nonNull_native();
    v122 = v26;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v23, v27);
    v126 = v122;
    swift_release();
  }
  else
  {
    if ((v11 & 1) != 0)
      goto LABEL_12;
    v112 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)&v124 = v7;
    *((_QWORD *)&v124 + 1) = v8;
    v23 = v112;
    EnvironmentValues.effectiveFont.getter();
    *(_QWORD *)&v124 = v7;
    *((_QWORD *)&v124 + 1) = v8;
    swift_retain();
    swift_retain();
    v113 = Font.platformFont(in:modifiers:)();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for CTFontRef(0);
    v125 = v114;
    *(_QWORD *)&v124 = v113;
    outlined init with take of Any(&v124, v123);
    v115 = v126;
    v116 = swift_isUniquelyReferenced_nonNull_native();
    v122 = v115;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v23, v116);
    v126 = v122;
  }

LABEL_12:
  swift_bridgeObjectRelease();
  v28 = swift_getKeyPath();
  MEMORY[0x1E0C80A78](v28, v29);
  *(&v117 - 2) = v30;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  if (*(_QWORD *)&v123[0]
    || (*(_QWORD *)&v124 = v7, *((_QWORD *)&v124 + 1) = v8, EnvironmentValues.foregroundColor.getter()))
  {
    v31 = (void *)*MEMORY[0x1E0DC1140];
    *(_QWORD *)&v124 = v7;
    *((_QWORD *)&v124 + 1) = v8;
    swift_retain();
    v32 = v31;
    swift_retain();
    dispatch thunk of AnyColorBox.resolve(in:)();
    swift_release();
    swift_release();
    Color.Resolved.kitColor.getter();
    objc_opt_self();
    v33 = swift_dynamicCastObjCClassUnconditional();
    v125 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    *(_QWORD *)&v124 = v33;
    outlined init with take of Any(&v124, v123);
    v34 = v126;
    v35 = swift_isUniquelyReferenced_nonNull_native();
    v122 = v34;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v32, v35);
    v126 = v122;
    swift_release();

    swift_bridgeObjectRelease();
  }
  v36 = swift_getKeyPath();
  MEMORY[0x1E0C80A78](v36, v37);
  *(&v117 - 2) = v38;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  if ((_QWORD)v124)
  {
    v39 = (void *)*MEMORY[0x1E0DC1100];
    *(_QWORD *)&v124 = v7;
    *((_QWORD *)&v124 + 1) = v8;
    swift_retain();
    v40 = v39;
    swift_retain();
    dispatch thunk of AnyColorBox.resolve(in:)();
    swift_release();
    swift_release();
    Color.Resolved.kitColor.getter();
    objc_opt_self();
    v41 = swift_dynamicCastObjCClassUnconditional();
    v125 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    *(_QWORD *)&v124 = v41;
    outlined init with take of Any(&v124, v123);
    v42 = v126;
    v43 = swift_isUniquelyReferenced_nonNull_native();
    v122 = v42;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v40, v43);
    v126 = v122;
    swift_release();

    swift_bridgeObjectRelease();
  }
  v44 = swift_getKeyPath();
  MEMORY[0x1E0C80A78](v44, v45);
  *(&v117 - 2) = v46;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  v47 = *((_QWORD *)&v124 + 1);
  v118 = v4;
  if (*((_QWORD *)&v124 + 1) != 1)
  {
    v48 = v124;
    v49 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    v50 = v12;
    v51 = objc_msgSend(v49, sel_initWithInteger_, v48);
    v125 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    *(_QWORD *)&v124 = v51;
    outlined init with take of Any(&v124, v123);
    v52 = v126;
    v53 = swift_isUniquelyReferenced_nonNull_native();
    v122 = v52;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v50, v53);
    v54 = v122;
    v126 = v122;

    swift_bridgeObjectRelease();
    if (v47)
    {
      v55 = (void *)*MEMORY[0x1E0DC11A0];
      *(_QWORD *)&v124 = v7;
      *((_QWORD *)&v124 + 1) = v8;
      swift_retain();
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v48, v47);
      v56 = v55;
      dispatch thunk of AnyColorBox.resolve(in:)();
      swift_release();
      swift_release();
      Color.Resolved.kitColor.getter();
      objc_opt_self();
      v57 = swift_dynamicCastObjCClassUnconditional();
      v125 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      *(_QWORD *)&v124 = v57;
      outlined init with take of Any(&v124, v123);
      v58 = swift_isUniquelyReferenced_nonNull_native();
      v122 = v54;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v56, v58);
      v126 = v122;

      swift_bridgeObjectRelease();
      outlined consume of Text.LineStyle?(v48, v47);
      v59 = v48;
      v60 = v47;
    }
    else
    {
      v59 = v48;
      v60 = 0;
    }
    outlined consume of Text.LineStyle?(v59, v60);
    v4 = v118;
  }
  v61 = swift_getKeyPath();
  MEMORY[0x1E0C80A78](v61, v62);
  *(&v117 - 2) = v63;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  v64 = *((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1) != 1)
  {
    v65 = v124;
    v66 = (void *)*MEMORY[0x1E0DC1248];
    v67 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    v68 = v66;
    v69 = objc_msgSend(v67, sel_initWithInteger_, v65);
    v125 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    *(_QWORD *)&v124 = v69;
    outlined init with take of Any(&v124, v123);
    v70 = v126;
    v71 = swift_isUniquelyReferenced_nonNull_native();
    v122 = v70;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v68, v71);
    v72 = v122;
    v126 = v122;

    swift_bridgeObjectRelease();
    if (v64)
    {
      v73 = (void *)*MEMORY[0x1E0DC1240];
      *(_QWORD *)&v124 = v7;
      *((_QWORD *)&v124 + 1) = v8;
      swift_retain();
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v65, v64);
      v74 = v73;
      dispatch thunk of AnyColorBox.resolve(in:)();
      swift_release();
      swift_release();
      Color.Resolved.kitColor.getter();
      objc_opt_self();
      v75 = swift_dynamicCastObjCClassUnconditional();
      v125 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      *(_QWORD *)&v124 = v75;
      outlined init with take of Any(&v124, v123);
      v76 = swift_isUniquelyReferenced_nonNull_native();
      v122 = v72;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v74, v76);
      v126 = v122;

      swift_bridgeObjectRelease();
      outlined consume of Text.LineStyle?(v65, v64);
      v77 = v65;
      v78 = v64;
    }
    else
    {
      v77 = v65;
      v78 = 0;
    }
    outlined consume of Text.LineStyle?(v77, v78);
    v4 = v118;
  }
  v79 = swift_getKeyPath();
  MEMORY[0x1E0C80A78](v79, v80);
  *(&v117 - 2) = v81;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  if ((BYTE8(v124) & 1) != 0)
  {
    v83 = (uint64_t)v119;
    v82 = v120;
  }
  else
  {
    v83 = (uint64_t)v119;
    v82 = v120;
    if (*(double *)&v124 != 0.0)
    {
      v84 = (void *)*MEMORY[0x1E0DC1150];
      v125 = MEMORY[0x1E0DEF040];
      outlined init with take of Any(&v124, v123);
      v85 = v84;
      v86 = v126;
      v87 = swift_isUniquelyReferenced_nonNull_native();
      v122 = v86;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v85, v87);
      v126 = v122;

      swift_bridgeObjectRelease();
    }
  }
  v88 = swift_getKeyPath();
  MEMORY[0x1E0C80A78](v88, v89);
  *(&v117 - 2) = v90;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  if ((BYTE8(v124) & 1) == 0 && *(double *)&v124 != 0.0)
  {
    v91 = (void *)*MEMORY[0x1E0DC1238];
    v125 = MEMORY[0x1E0DEF040];
    outlined init with take of Any(&v124, v123);
    v92 = v91;
    v93 = v126;
    v94 = swift_isUniquelyReferenced_nonNull_native();
    v122 = v93;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v92, v94);
    v126 = v122;

    swift_bridgeObjectRelease();
  }
  v95 = swift_getKeyPath();
  MEMORY[0x1E0C80A78](v95, v96);
  *(&v117 - 2) = v97;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  if ((BYTE8(v124) & 1) == 0 && *(double *)&v124 != 0.0)
  {
    v98 = (void *)*MEMORY[0x1E0DC1108];
    v125 = MEMORY[0x1E0DEF040];
    outlined init with take of Any(&v124, v123);
    v99 = v98;
    v100 = v126;
    v101 = swift_isUniquelyReferenced_nonNull_native();
    v122 = v100;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v99, v101);
    v126 = v122;

    swift_bridgeObjectRelease();
  }
  v102 = swift_getKeyPath();
  MEMORY[0x1E0C80A78](v102, v103);
  *(&v117 - 2) = v104;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v83, 1, v4) == 1)
  {
    outlined destroy of TaskPriority?(v83, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA7930]);
  }
  else
  {
    v105 = v117;
    (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(v117, v83, v4);
    v106 = (void *)*MEMORY[0x1E0DC10F0];
    v125 = v4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v124);
    (*(void (**)(uint64_t *, char *, uint64_t))(v82 + 16))(boxed_opaque_existential_1, v105, v4);
    outlined init with take of Any(&v124, v123);
    v108 = v106;
    v109 = v126;
    v110 = swift_isUniquelyReferenced_nonNull_native();
    v122 = v109;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v108, v110);
    v126 = v122;

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v105, v4);
  }
  return v126;
}

uint64_t RichTextAttributeResolver.nsValueFromSwiftValue(nsKey:value:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  id v43;
  uint64_t v44;
  char v45;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  void (*v97)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t inited;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v111 = a2;
  v108 = a3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA7930], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v104 - v11;
  v13 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AttributeContainer();
  v109 = *(_QWORD *)(v18 - 8);
  v110 = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = *v3;
  v105 = v3[1];
  v106 = v3[2];
  AttributeContainer.init()();
  v22 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25 = v24;
  v107 = a1;
  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v25 == v26)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_10;
  }
  v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v28 & 1) != 0)
  {
LABEL_10:
    outlined init with copy of Any(v111, (uint64_t)&v114);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_13;
    swift_bridgeObjectRelease();
    v33 = v112;
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath, v35);
    *(&v104 - 2) = v36;
    swift_getKeyPath();
    v114 = v33;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute();
    goto LABEL_12;
  }
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v31 = v30;
  if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v31 == v32)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }
  v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v47 & 1) != 0)
  {
LABEL_21:
    outlined init with copy of Any(v111, (uint64_t)&v114);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v48 = v112;
      v49 = swift_getKeyPath();
      MEMORY[0x1E0C80A78](v49, v50);
      *(&v104 - 2) = v51;
      swift_getKeyPath();
      v114 = v48;
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
LABEL_12:
      swift_retain();
      AttributeContainer.subscript.setter();
      v114 = v104;
      v115 = v105;
      v116 = v106;
      v22 = RichTextAttributeResolver.nsAttributes(for:)();
      swift_release();
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v54 = v53;
  if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v54 == v55)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_27;
  }
  v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v56 & 1) != 0)
  {
LABEL_27:
    outlined init with copy of Any(v111, (uint64_t)&v114);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v57 = v112;
      v58 = swift_getKeyPath();
      MEMORY[0x1E0C80A78](v58, v59);
      *(&v104 - 2) = v60;
      swift_getKeyPath();
      v114 = v57;
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute();
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v63 = v62;
  if (v61 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v63 == v64)
    goto LABEL_31;
  v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v65 & 1) != 0)
    goto LABEL_33;
  v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v73 = v72;
  if (v71 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v73 == v74)
  {
LABEL_31:
    swift_bridgeObjectRelease_n();
    goto LABEL_33;
  }
  v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v75 & 1) != 0)
  {
LABEL_33:
    outlined init with copy of Any(v111, (uint64_t)&v114);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v67 = v112;
      v66 = v113;
      v68 = swift_getKeyPath();
      MEMORY[0x1E0C80A78](v68, v69);
      *(&v104 - 2) = v70;
      swift_getKeyPath();
      v114 = v67;
      v115 = v66;
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute();
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v78 = v77;
  if (v76 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v78 == v79)
    goto LABEL_40;
  v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v80 & 1) != 0)
    goto LABEL_42;
  v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v88 = v87;
  if (v86 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v88 == v89)
  {
LABEL_40:
    swift_bridgeObjectRelease_n();
    goto LABEL_42;
  }
  v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v90 & 1) != 0)
  {
LABEL_42:
    outlined init with copy of Any(v111, (uint64_t)&v114);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v82 = v112;
      v81 = v113;
      v83 = swift_getKeyPath();
      MEMORY[0x1E0C80A78](v83, v84);
      *(&v104 - 2) = v85;
      swift_getKeyPath();
      v114 = v82;
      v115 = v81;
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute();
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v93 = v92;
  if (v91 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v93 == v94)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v95 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (NSAttributedStringKey, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_187BF9830;
      v102 = v107;
      *(_QWORD *)(inited + 32) = v107;
      outlined init with copy of Any(v111, inited + 40);
      v103 = v102;
      v22 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      goto LABEL_13;
    }
  }
  outlined init with copy of Any(v111, (uint64_t)&v114);
  v96 = swift_dynamicCast();
  v97 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if ((v96 & 1) != 0)
  {
    v97(v12, 0, 1, v13);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v12, v13);
    v98 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v98, v99);
    *(&v104 - 2) = v100;
    swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v8, v17, v13);
    v97(v8, 0, 1, v13);
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute();
    AttributeContainer.subscript.setter();
    v114 = v104;
    v115 = v105;
    v116 = v106;
    v22 = RichTextAttributeResolver.nsAttributes(for:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  else
  {
    v97(v12, 1, 1, v13);
    outlined destroy of TaskPriority?((uint64_t)v12, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA7930]);
  }
LABEL_13:
  v38 = v109;
  v37 = v110;
  v39 = v108;
  type metadata accessor for Any?();
  v39[3] = v40;
  v41 = swift_allocObject();
  v42 = (_OWORD *)(v41 + 16);
  *v39 = v41;
  if (*(_QWORD *)(v22 + 16))
  {
    v43 = v107;
    v44 = specialized __RawDictionaryStorage.find<A>(_:)(v43);
    if ((v45 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v22 + 56) + 32 * v44, (uint64_t)v42);
    }
    else
    {
      *v42 = 0u;
      v42[1] = 0u;
    }

  }
  else
  {
    *v42 = 0u;
    *(_OWORD *)(v41 + 32) = 0u;
  }
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v21, v37);
}

uint64_t RichTextAttributeResolver.swiftUIAttributedString(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void (*v34)(char *, char *, uint64_t);
  id v35;
  id v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;

  v40 = a2;
  v3 = type metadata accessor for AttributedString();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v39 - v10;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v39 - v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v39 - v18;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, v20, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v39 - v27;
  type metadata accessor for NSSwiftMutableAttributedString(0);
  v29 = swift_dynamicCastClass();
  if (v29)
  {
    v30 = v29;
    type metadata accessor for NSSwiftAttributedString(0);
    v31 = swift_dynamicCastClass();
    if (v31)
    {
      v32 = v31 + OBJC_IVAR____TtC7SwiftUI23NSSwiftAttributedString__storage;
    }
    else
    {
      v32 = v30 + OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage;
      swift_beginAccess();
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v19, v32, v3);
    v34 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v34(v28, v19, v3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v28, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v28, 1, v3) == 1)
    {
      v35 = a1;
      AttributedString.init(_:)();
      return outlined destroy of TaskPriority?((uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240]);
    }
    else
    {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v34)(v40, v28, v3);
    }
  }
  else
  {
    type metadata accessor for AttributeScopes.UIKitAttributes();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes and conformance AttributeScopes.UIKitAttributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC1A00], MEMORY[0x1E0DC19F8]);
    v33 = a1;
    AttributedString.init<A>(_:including:)();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v24, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v24, 1, v3) == 1)
    {
      outlined destroy of TaskPriority?((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240]);
      v37 = v33;
      return AttributedString.init(_:)();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v15, v24, v3);
      AttributedString.transformingUIKitAttributedForSwiftUI()((uint64_t)v11);
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v11, v3);
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE0900], MEMORY[0x1E0CE08F8]);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
      AttributedString.init<A, B>(_:including:)();
      v38 = *(void (**)(char *, uint64_t))(v4 + 8);
      v38(v11, v3);
      return ((uint64_t (*)(char *, uint64_t))v38)(v15, v3);
    }
  }
}

uint64_t RichTextAttributeResolver.swiftUIAttributes(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  char v11;
  id v12;
  uint64_t KeyPath;
  uint64_t v14;
  unint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  char v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  char v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  char v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  char v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  uint64_t v48;
  char v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  char v61;
  id v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  char v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  id v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  id v84;
  __int128 v85;
  __int128 v86;

  v4 = type metadata accessor for AttributeContainer();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributeContainer.init()();
  if (!*(_QWORD *)(a1 + 16))
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
  v9 = (id)*MEMORY[0x1E0DC1100];
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v11 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)&v85);
  }
  else
  {
    v85 = 0u;
    v86 = 0u;
  }

  if (!*((_QWORD *)&v86 + 1))
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v85, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_9;
LABEL_12:
    v85 = 0u;
    v86 = 0u;
    goto LABEL_20;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v12 = v84;
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath, v14);
    *(&v83 - 2) = v15;
    swift_getKeyPath();
    *(_QWORD *)&v85 = v12;
    lazy protocol witness table accessor for type UIColor and conformance UIColor();
    v16 = v12;
    *(_QWORD *)&v85 = Color.init<A>(provider:)();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute();
    AttributeContainer.subscript.setter();

  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_12;
LABEL_9:
  v17 = (id)*MEMORY[0x1E0DC1140];
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
  if ((v19 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v18, (uint64_t)&v85);
  }
  else
  {
    v85 = 0u;
    v86 = 0u;
  }

  if (!*((_QWORD *)&v86 + 1))
  {
LABEL_20:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v85, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_18;
LABEL_21:
    v85 = 0u;
    v86 = 0u;
    goto LABEL_29;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v20 = v84;
    v21 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v21, v22);
    *(&v83 - 2) = v23;
    swift_getKeyPath();
    *(_QWORD *)&v85 = v20;
    lazy protocol witness table accessor for type UIColor and conformance UIColor();
    v24 = v20;
    *(_QWORD *)&v85 = Color.init<A>(provider:)();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
    AttributeContainer.subscript.setter();

  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_21;
LABEL_18:
  v25 = (id)*MEMORY[0x1E0DC1138];
  v26 = specialized __RawDictionaryStorage.find<A>(_:)(v25);
  if ((v27 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v26, (uint64_t)&v85);
  }
  else
  {
    v85 = 0u;
    v86 = 0u;
  }

  if (!*((_QWORD *)&v86 + 1))
  {
LABEL_29:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v85, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_27;
LABEL_30:
    v85 = 0u;
    v86 = 0u;
    goto LABEL_38;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v28 = v84;
    v29 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v29, v30);
    *(&v83 - 2) = v31;
    swift_getKeyPath();
    v32 = v28;
    *(_QWORD *)&v85 = Font.init(_:)();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute();
    AttributeContainer.subscript.setter();

  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_30;
LABEL_27:
  v33 = (id)*MEMORY[0x1E0DC1150];
  v34 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
  if ((v35 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v34, (uint64_t)&v85);
  }
  else
  {
    v85 = 0u;
    v86 = 0u;
  }

  if (!*((_QWORD *)&v86 + 1))
  {
LABEL_38:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v85, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_36;
LABEL_39:
    v85 = 0u;
    v86 = 0u;
    goto LABEL_47;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v36 = v84;
    v37 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v37, v38);
    *(&v83 - 2) = v39;
    swift_getKeyPath();
    *(_QWORD *)&v85 = v36;
    BYTE8(v85) = 0;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute();
    AttributeContainer.subscript.setter();
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_39;
LABEL_36:
  v40 = (id)*MEMORY[0x1E0DC1238];
  v41 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
  if ((v42 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v41, (uint64_t)&v85);
  }
  else
  {
    v85 = 0u;
    v86 = 0u;
  }

  if (!*((_QWORD *)&v86 + 1))
  {
LABEL_47:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v85, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_45;
LABEL_48:
    v85 = 0u;
    v86 = 0u;
    goto LABEL_56;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v43 = v84;
    v44 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v44, v45);
    *(&v83 - 2) = v46;
    swift_getKeyPath();
    *(_QWORD *)&v85 = v43;
    BYTE8(v85) = 0;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute();
    AttributeContainer.subscript.setter();
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_48;
LABEL_45:
  v47 = (id)*MEMORY[0x1E0DC1108];
  v48 = specialized __RawDictionaryStorage.find<A>(_:)(v47);
  if ((v49 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v48, (uint64_t)&v85);
  }
  else
  {
    v85 = 0u;
    v86 = 0u;
  }

  if (!*((_QWORD *)&v86 + 1))
  {
LABEL_56:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v85, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_54;
LABEL_57:
    v85 = 0u;
    v86 = 0u;
LABEL_64:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v85, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_65;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v50 = v84;
    v51 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v51, v52);
    *(&v83 - 2) = v53;
    swift_getKeyPath();
    *(_QWORD *)&v85 = v50;
    BYTE8(v85) = 0;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
    AttributeContainer.subscript.setter();
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_57;
LABEL_54:
  v54 = (id)*MEMORY[0x1E0DC11A8];
  v55 = specialized __RawDictionaryStorage.find<A>(_:)(v54);
  if ((v56 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v55, (uint64_t)&v85);
  }
  else
  {
    v85 = 0u;
    v86 = 0u;
  }

  if (!*((_QWORD *)&v86 + 1))
    goto LABEL_64;
  type metadata accessor for NSUnderlineStyle(0);
  if ((swift_dynamicCast() & 1) != 0)
  {
    Text.LineStyle.init(_nsUnderlineStyle:)();
    v57 = *((_QWORD *)&v85 + 1);
    v58 = v85;
    if (*(_QWORD *)(a1 + 16))
    {
      v59 = (id)*MEMORY[0x1E0DC11A0];
      v60 = specialized __RawDictionaryStorage.find<A>(_:)(v59);
      if ((v61 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v60, (uint64_t)&v85);
      }
      else
      {
        v85 = 0u;
        v86 = 0u;
      }

      if (*((_QWORD *)&v86 + 1))
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v70 = v84;
          if (v57 == 1)
          {

          }
          else
          {
            *(_QWORD *)&v85 = v84;
            v83 = lazy protocol witness table accessor for type UIColor and conformance UIColor();
            v79 = v70;
            v80 = Color.init<A>(provider:)();

            swift_release();
            v57 = v80;
          }
        }
LABEL_82:
        v71 = swift_getKeyPath();
        MEMORY[0x1E0C80A78](v71, v72);
        *(&v83 - 2) = v73;
        swift_getKeyPath();
        *(_QWORD *)&v85 = v58;
        *((_QWORD *)&v85 + 1) = v57;
        lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute();
        AttributeContainer.subscript.setter();
        if (!*(_QWORD *)(a1 + 16))
          goto LABEL_83;
        goto LABEL_66;
      }
    }
    else
    {
      v85 = 0u;
      v86 = 0u;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v85, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_82;
  }
LABEL_65:
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_83:
    v85 = 0u;
    v86 = 0u;
LABEL_84:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v85, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
  }
LABEL_66:
  v62 = (id)*MEMORY[0x1E0DC1248];
  v63 = specialized __RawDictionaryStorage.find<A>(_:)(v62);
  if ((v64 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v63, (uint64_t)&v85);
  }
  else
  {
    v85 = 0u;
    v86 = 0u;
  }

  if (!*((_QWORD *)&v86 + 1))
    goto LABEL_84;
  type metadata accessor for NSUnderlineStyle(0);
  if ((swift_dynamicCast() & 1) != 0)
  {
    Text.LineStyle.init(_nsUnderlineStyle:)();
    v65 = *((_QWORD *)&v85 + 1);
    v66 = v85;
    if (*(_QWORD *)(a1 + 16))
    {
      v67 = (id)*MEMORY[0x1E0DC1240];
      v68 = specialized __RawDictionaryStorage.find<A>(_:)(v67);
      if ((v69 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v68, (uint64_t)&v85);
      }
      else
      {
        v85 = 0u;
        v86 = 0u;
      }

      if (*((_QWORD *)&v86 + 1))
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v74 = v84;
          if (v65 == 1)
          {

          }
          else
          {
            *(_QWORD *)&v85 = v84;
            lazy protocol witness table accessor for type UIColor and conformance UIColor();
            v81 = v74;
            v82 = Color.init<A>(provider:)();

            swift_release();
            v65 = v82;
          }
        }
        goto LABEL_91;
      }
    }
    else
    {
      v85 = 0u;
      v86 = 0u;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v85, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
LABEL_91:
    v75 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v75, v76);
    *(&v83 - 2) = v77;
    swift_getKeyPath();
    *(_QWORD *)&v85 = v66;
    *((_QWORD *)&v85 + 1) = v65;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute();
    AttributeContainer.subscript.setter();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
}

id RichTextAttributeResolver.nsAttributedString(for:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char v52;
  void (*v53)(char *, uint64_t);
  void (*v54)(_QWORD *, _QWORD);
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  Class isa;
  uint64_t v61;
  uint64_t v62;
  _QWORD v64[2];
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  void (*v78)(char *, char *, uint64_t);
  char *v79;
  id v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[5];

  v81 = a1;
  type metadata accessor for Range<AttributedString.Index>(0);
  v76 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v75 = (char *)v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttributeContainer();
  v73 = *(_QWORD *)(v5 - 8);
  v74 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v72 = (char *)v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for AttributedString.Runs.Run();
  v64[0] = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89, v8);
  v71 = (char *)v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for AttributedString.Runs.Run?, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v87 = (char *)v64 - v13;
  v14 = type metadata accessor for AttributedString.Runs.Index();
  v88 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v86 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v64 - v19;
  v21 = type metadata accessor for AttributedString.Runs();
  v85 = *(char **)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  v84 = v25;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)v64 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)v64 - v31;
  v33 = type metadata accessor for AttributedString();
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v35);
  v37 = (char *)v64 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = *v1;
  v67 = v1[1];
  v66 = v1[2];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v70 = v33;
  v65 = v38;
  v38(v37, v81, v33);
  v69 = v37;
  v80 = (id)NSAttributedString.init(_:)();
  AttributedString.runs.getter();
  v39 = v85;
  v78 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v85 + 2);
  v78(v28, v24, v21);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF180]);
  dispatch thunk of Collection.startIndex.getter();
  v40 = (void (*)(char *, uint64_t))*((_QWORD *)v39 + 1);
  v41 = v64[0];
  v79 = v24;
  v77 = v40;
  v40(v24, v21);
  v42 = v84;
  v43 = &v28[*((int *)v84 + 9)];
  v44 = v88;
  v45 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
  v85 = v20;
  v83 = v14;
  v45(v43, v20, v14);
  outlined init with take of IndexingIterator<AttributedString.Runs>((uint64_t)v28, (uint64_t)v32);
  v46 = *((int *)v42 + 9);
  v84 = v32;
  v47 = &v32[v46];
  v82 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v64[1] = MEMORY[0x1E0DEE9B8] + 8;
  while (1)
  {
    v48 = v85;
    v49 = v83;
    v82(v85, v47, v83);
    v50 = v86;
    v51 = (uint64_t)v84;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF150], MEMORY[0x1E0CAF158]);
    v52 = dispatch thunk of static Equatable.== infix(_:_:)();
    v53 = *(void (**)(char *, uint64_t))(v88 + 8);
    v53(v50, v49);
    v53(v48, v49);
    if ((v52 & 1) != 0)
      break;
    v54 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v55 = v87;
    v56 = v89;
    (*(void (**)(char *))(v41 + 16))(v87);
    v54(v90, 0);
    v57 = v79;
    v78(v79, (char *)v51, v21);
    dispatch thunk of Collection.formIndex(after:)();
    v77(v57, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v55, 0, 1, v56);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v55, 1, v56) == 1)
      goto LABEL_6;
    v58 = v71;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v71, v55, v56);
    v90[0] = v68;
    v90[1] = v67;
    v90[2] = v66;
    v59 = v72;
    AttributedString.Runs.Run.attributes.getter();
    RichTextAttributeResolver.nsAttributes(for:)();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v59, v74);
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    AttributedString.Runs.Run.range.getter();
    v65(v69, v81, v70);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
    v61 = _NSRange.init<A, B>(_:in:)();
    objc_msgSend(v80, sel_setAttributes_range_, isa, v61, v62);

    (*(void (**)(char *, uint64_t))(v41 + 8))(v58, v89);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v87, 1, 1, v89);
LABEL_6:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v51, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  return v80;
}

uint64_t RichTextAttributeResolver.init(environment:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  id v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  _OWORD v15[2];
  __int128 v16;
  uint64_t v17;

  v3 = *a1;
  v4 = a1[1];
  v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v6 = (void *)*MEMORY[0x1E0DC1138];
  swift_retain();
  v7 = v6;
  swift_retain();
  EnvironmentValues.effectiveFont.getter();
  *((_QWORD *)&v16 + 1) = v4;
  v8 = Font.platformFont(in:)();
  swift_release();
  type metadata accessor for CTFontRef(0);
  v17 = v9;
  *(_QWORD *)&v16 = v8;
  outlined init with take of Any(&v16, v15);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, v7, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  v11 = (id)*MEMORY[0x1E0DC1140];
  static Color.primary.getter();
  *(_QWORD *)&v16 = v3;
  *((_QWORD *)&v16 + 1) = v4;
  dispatch thunk of AnyColorBox.resolve(in:)();
  swift_release();
  swift_release();
  swift_release();
  Color.Resolved.kitColor.getter();
  objc_opt_self();
  v12 = swift_dynamicCastObjCClassUnconditional();
  v17 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  *(_QWORD *)&v16 = v12;
  outlined init with take of Any(&v16, v15);
  v13 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, v11, v13);

  result = swift_bridgeObjectRelease();
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t RichTextAttributeResolver.markdownFontModifiers(for:)(char a1, char a2)
{
  uint64_t result;
  uint64_t v4;

  result = MEMORY[0x1E0DEE9D8];
  v4 = MEMORY[0x1E0DEE9D8];
  if ((a2 & 1) == 0)
  {
    if ((a1 & 2) != 0)
    {
      type metadata accessor for AnyFontModifier();
      static AnyFontModifier.static<A>(_:)();
      MEMORY[0x18D75CF58]();
      if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if ((a1 & 1) == 0)
      {
LABEL_4:
        if ((a1 & 4) == 0)
          return v4;
LABEL_12:
        type metadata accessor for AnyFontModifier();
        static AnyFontModifier.static<A>(_:)();
        MEMORY[0x18D75CF58]();
        if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        return v4;
      }
    }
    else if ((a1 & 1) == 0)
    {
      goto LABEL_4;
    }
    type metadata accessor for AnyFontModifier();
    static AnyFontModifier.static<A>(_:)();
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if ((a1 & 4) == 0)
      return v4;
    goto LABEL_12;
  }
  return result;
}

void sub_187931CB4()
{
  AttributeScopes.FoundationAttributes.inlinePresentationIntent.getter();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAED80], MEMORY[0x1E0CAED90]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute);
  }
  return result;
}

void sub_187931D14()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_187931D38()
{
  return 8;
}

uint64_t sub_187931D44()
{
  return swift_release();
}

uint64_t sub_187931D4C(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_187931D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute>, MEMORY[0x1E0CAEE20]) & 1;
}

uint64_t sub_187931D88(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute>, MEMORY[0x1E0CAEE20]);
}

_QWORD *sub_187931DA4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_187931DB8()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_187931DDC()
{
  return 8;
}

uint64_t sub_187931DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]) & 1;
}

uint64_t sub_187931E18(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

uint64_t keypath_hashTm(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>(0, a3, a4);
  return dispatch thunk of Hashable.hashValue.getter();
}

void sub_187931E88()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_187931EAC()
{
  return 8;
}

uint64_t sub_187931EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]) & 1;
}

uint64_t sub_187931EE8(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

void sub_187931F0C()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_187931F30()
{
  return 8;
}

uint64_t sub_187931F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]) & 1;
}

uint64_t sub_187931F6C(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

void sub_187931F90()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_187931FB4()
{
  return 8;
}

uint64_t sub_187931FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]) & 1;
}

uint64_t sub_187931FF0(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

void sub_187932010()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_187932034()
{
  return 8;
}

uint64_t sub_187932040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]) & 1;
}

uint64_t sub_187932070(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

void sub_187932094()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_1879320B8()
{
  return 8;
}

uint64_t sub_1879320C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]) & 1;
}

uint64_t sub_1879320F4(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

void sub_187932118()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_18793213C()
{
  return 8;
}

uint64_t sub_187932148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]) & 1;
}

uint64_t sub_187932178(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

void sub_18793219C()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_1879321C0()
{
  return 8;
}

uint64_t sub_1879321CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]) & 1;
}

uint64_t sub_1879321FC(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

void sub_187932220()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_187932244()
{
  return 8;
}

uint64_t sub_187932250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]) & 1;
}

uint64_t sub_187932280(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>, (void (*)(uint64_t))MEMORY[0x1E0CE0900]);
}

void type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for KeyPath();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1879322F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  AttributeScopes.swiftUI.getter();
  result = type metadata accessor for AttributeScopes.SwiftUIAttributes();
  *a1 = result;
  return result;
}

uint64_t sub_187932324()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t type metadata accessor for IdentifiedArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IdentifiedArray);
}

uint64_t IdentifiedArray.subscript.getter()
{
  return Array.subscript.getter();
}

uint64_t IdentifiedArray.init()()
{
  uint64_t v0;

  v0 = static Array._allocateUninitialized(_:)();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  swift_getAssociatedConformanceWitness();
  Dictionary.init(dictionaryLiteral:)();
  return v0;
}

void (*MutableCollection<>.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = type metadata accessor for Slice();
  v9[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = (char *)malloc(v12);
  v9[6] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v14 = type metadata accessor for Range();
  v9[7] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v9[8] = v15;
  v9[9] = malloc(*(_QWORD *)(v15 + 64));
  (*(void (**)(void))(v15 + 16))();
  MutableCollection<>.subscript.getter(a2, a3, a4, v13);
  return MutableCollection<>.subscript.modify;
}

void MutableCollection<>.subscript.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);
  uint64_t v10;

  v2 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v3 = *(void **)(*(_QWORD *)a1 + 72);
  v5 = *(void **)(*(_QWORD *)a1 + 48);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(void **)(*(_QWORD *)a1 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, _QWORD))(v7 + 16))(v2[5], v5, v2[3]);
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE48], v8);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    v9 = *(void (**)(void *, uint64_t))(v7 + 8);
    v9(v6, v8);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v10);
  }
  else
  {
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE48], v2[3]);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v10);
    v9 = *(void (**)(void *, uint64_t))(v7 + 8);
  }
  v9(v5, v8);
  free(v3);
  free(v5);
  free(v6);
  free(v2);
}

uint64_t MutableCollection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t TupleTypeMetadata2;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;

  v54 = a1;
  v55 = a4;
  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v46 - v13;
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v46 - v21;
  swift_getAssociatedConformanceWitness();
  v51 = type metadata accessor for Range();
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51, v23);
  v25 = (char *)&v46 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v46 = (char *)&v46 - v28;
  dispatch thunk of Collection.startIndex.getter();
  v52 = a2;
  v53 = v4;
  v50 = v6;
  dispatch thunk of Collection.endIndex.getter();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v31 = v47;
    v30 = TupleTypeMetadata2;
    v32 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
    v33 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
    v33(v14, v22, AssociatedTypeWitness);
    v33(v32, v18, AssociatedTypeWitness);
    v34 = &v10[*(int *)(v30 + 48)];
    v35 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v35(v10, v14, AssociatedTypeWitness);
    v35(v34, v32, AssociatedTypeWitness);
    v33(v25, v10, AssociatedTypeWitness);
    v36 = *(void (**)(char *, uint64_t))(v31 + 8);
    v36(v34, AssociatedTypeWitness);
    v37 = &v10[*(int *)(v30 + 48)];
    v33(v10, v14, AssociatedTypeWitness);
    v33(v37, v32, AssociatedTypeWitness);
    v38 = v51;
    v33(&v25[*(int *)(v51 + 36)], v37, AssociatedTypeWitness);
    v36(v10, AssociatedTypeWitness);
    v39 = v49;
    v40 = v46;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v25, v38);
    v42 = v53;
    v41 = v54;
    v43 = v52;
    dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v38);
    v44 = type metadata accessor for Slice();
    v45 = v55;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(&v55[*(int *)(v44 + 40)], v42, v43);
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v40, v41, v38);
    v33(v45, v40, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, char *, uint64_t))v33)(&v45[*(int *)(v44 + 36)], &v40[*(int *)(v38 + 36)], AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void IdentifiedArray.endIndex.getter()
{
  JUMPOUT(0x18D75D06CLL);
}

uint64_t IdentifiedArray.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedTypeWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD *, uint64_t, uint64_t);
  int v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD v72[2];
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;

  v61 = a3;
  v8 = a2;
  v57 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v58 = (char *)v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v13, v14);
  v70 = (_QWORD *)((char *)v51 - v15);
  type metadata accessor for Range<Int>(255, (unint64_t *)&lazy cache variable for type metadata for PartialRangeFrom<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DEC910]);
  v17 = v16;
  v18 = lazy protocol witness table accessor for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>();
  v60 = a6;
  v19 = *(_QWORD *)(a6 + 8);
  v73 = v17;
  v74 = a5;
  v75 = v18;
  v76 = v19;
  v52 = type metadata accessor for Zip2Sequence();
  MEMORY[0x1E0C80A78](v52, v20);
  v51[2] = (char *)v51 - v21;
  v55 = v17;
  v73 = v17;
  v74 = a5;
  v62 = a5;
  v54 = v18;
  v75 = v18;
  v76 = v19;
  v53 = v19;
  v68 = type metadata accessor for Zip2Sequence.Iterator();
  v56 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68, v22);
  v67 = (char *)v51 - v23;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v25);
  v66 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)v51 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = a1;
  if (a1 != v8)
  {
    result = v63;
    if (v8 < v63)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    if (v63 >= v8)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v64 = (void (*)(char *, char *, uint64_t))(v69 + 1);
    v31 = v66;
    do
    {
      v32 = v8;
      v33 = result + 1;
      Array.subscript.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v12);
      v73 = 0;
      LOBYTE(v74) = 1;
      swift_getAssociatedConformanceWitness();
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      result = v33;
      v34 = v32 == v33;
      v8 = v32;
    }
    while (!v34);
  }
  v64 = (void (*)(char *, char *, uint64_t))dispatch thunk of Collection.count.getter();
  v35 = v63;
  v73 = (char *)v63;
  v74 = v8;
  type metadata accessor for Range<Int>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DEB848]);
  v37 = v36;
  v38 = lazy protocol witness table accessor for type Int and conformance Int();
  v72[0] = MEMORY[0x1E0DEB458];
  v72[1] = v38;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEB8C0], v37, v72);
  result = Collection.count.getter();
  v39 = __OFSUB__(v64, result);
  v64 = (void (*)(char *, char *, uint64_t))((char *)v64 - result);
  if (v39)
    goto LABEL_18;
  v73 = (char *)v35;
  v74 = v8;
  v51[1] = v37;
  v51[0] = v38;
  Range<>.endIndex.getter();
  v40 = v71;
  result = MEMORY[0x18D75D06C](*v69, v12);
  if (result < v40)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v41 = result;
  v59 = v8;
  v42 = v63;
  if (v40 != result)
  {
    if (v40 >= result)
    {
LABEL_22:
      __break(1u);
      return result;
    }
    while (1)
    {
      Array.subscript.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v29, v12);
      v43 = (char *)v64 + v40;
      if (__OFADD__(v40, v64))
        break;
      ++v40;
      v73 = v43;
      LOBYTE(v74) = 0;
      swift_getAssociatedConformanceWitness();
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      if (v41 == v40)
        goto LABEL_13;
    }
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_13:
  v73 = (char *)v42;
  v74 = v59;
  Range<>.startIndex.getter();
  zip<A, B>(_:_:)();
  Zip2Sequence.makeIterator()();
  v44 = v70;
  Zip2Sequence.Iterator.next()();
  v45 = TupleTypeMetadata2;
  v46 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48);
  v47 = v46(v44, 1, TupleTypeMetadata2);
  v48 = v66;
  if (v47 != 1)
  {
    v64 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
    do
    {
      v49 = (char *)*v70;
      v64(v29, (char *)v70 + *(int *)(v45 + 48), v12);
      dispatch thunk of RawRepresentable.rawValue.getter();
      v73 = v49;
      v50 = v70;
      LOBYTE(v74) = 0;
      swift_getAssociatedConformanceWitness();
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v12);
      Zip2Sequence.Iterator.next()();
      v45 = TupleTypeMetadata2;
    }
    while (v46(v50, 1, TupleTypeMetadata2) != 1);
  }
  (*(void (**)(char *, uint64_t))(v56 + 8))(v67, v68);
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v58, v61, v62);
  type metadata accessor for Array();
  return Array.replaceSubrange<A>(_:with:)();
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance IdentifiedArray<A>(uint64_t a1, Swift::Int *a2, uint64_t a3)
{
  specialized IdentifiedArray.subscript.setter(a1, *a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a1);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance IdentifiedArray<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  *v7 = v3;
  v7[1] = a3;
  v8 = *(_QWORD *)(a3 + 16);
  v7[2] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[3] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[4] = malloc(v10);
  v11 = malloc(v10);
  v12 = *a2;
  v7[5] = v11;
  v7[6] = v12;
  IdentifiedArray.subscript.getter();
  return protocol witness for MutableCollection.subscript.modify in conformance IdentifiedArray<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance IdentifiedArray<A>(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  Swift::Int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(void **)(*(_QWORD *)a1 + 32);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32), v3, v7);
    specialized IdentifiedArray.subscript.setter((uint64_t)v5, v4, v8);
    v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v5, v7);
  }
  else
  {
    specialized IdentifiedArray.subscript.setter(*(_QWORD *)(*(_QWORD *)a1 + 40), v4, v8);
    v9 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v9(v3, v7);
  free(v3);
  free(v5);
  free(v2);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance IdentifiedArray<A>()
{
  specialized MutableCollection<>.subscript.setter();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance IdentifiedArray<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = MutableCollection<>.subscript.modify(v8, a2, a3, a4);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance IdentifiedArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedArray<A>, a3);
  return MutableCollection<>.partition(by:)();
}

uint64_t protocol witness for RangeReplaceableCollection.init() in conformance IdentifiedArray<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = IdentifiedArray.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance IdentifiedArray<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  IdentifiedArray.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a5, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection._customRemoveLast(_:) in conformance IdentifiedArray<A>()
{
  return protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance IdentifiedArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedArray<A>, a3);
  return RangeReplaceableCollection<>.removeAll(where:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance IdentifiedArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedArray<A>, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance IdentifiedArray<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedArray<A>, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance IdentifiedArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedArray<A>, a3);
  return RandomAccessCollection<>.distance(from:to:)();
}

void protocol witness for Collection.endIndex.getter in conformance IdentifiedArray<A>()
{
  IdentifiedArray.endIndex.getter();
}

uint64_t sub_187933644(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IdentifiedArray<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t *v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = IdentifiedArray.subscript.read(v7, *a2, *v3, v3[1], *(_QWORD *)(a3 + 16));
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void (*IdentifiedArray.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(_QWORD *a1)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a5 - 8);
  *a1 = a5;
  a1[1] = v5;
  a1[2] = malloc(*(_QWORD *)(v5 + 64));
  Array.subscript.getter();
  return CoalescingAdjacentDuplicates.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance IdentifiedArray<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedArray<A>);
  return MutableCollection<>.subscript.getter(a1, a2, v6, a3);
}

uint64_t protocol witness for Collection.indices.getter in conformance IdentifiedArray<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedArray<A>, a1);
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance IdentifiedArray<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedArray<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IdentifiedArray<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedArray<A>, a1);
  return Collection._copyToContiguousArray()();
}

void base witness table accessor for Sequence in IdentifiedArray<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Collection in IdentifiedArray<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in IdentifiedArray<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedArray<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE28], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RangeReplaceableCollection in IdentifiedArray<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedArray<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE50], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in IdentifiedArray<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedArray<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE30], a1, &v3);
}

void base witness table accessor for BidirectionalCollection in IdentifiedArray<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in IdentifiedArray<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedArray<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE40], a1, &v3);
}

uint64_t specialized IdentifiedArray.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  Swift::Int v27;
  char isClassOrObjCExistentialType;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t *v33;
  Swift::Int v34;
  uint64_t v35;
  Swift::Int v36;
  char v37;

  v4 = v3;
  v35 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v32 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v32 - v20;
  v33 = v4;
  v34 = a2;
  Array.subscript.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v22 = v35;
  dispatch thunk of RawRepresentable.rawValue.getter();
  swift_getAssociatedConformanceWitness();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    v23 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    v23(v13, v21, AssociatedTypeWitness);
    v36 = 0;
    v37 = 1;
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    v23(v13, v17, AssociatedTypeWitness);
    v22 = v35;
    v36 = v34;
    v37 = 0;
    Dictionary.subscript.setter();
  }
  v24 = type metadata accessor for Array();
  v25 = v33;
  Array._makeMutableAndUnique()();
  v26 = *v25;
  v27 = v34;
  Array._checkSubscript_mutating(_:)(v34);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  v29 = v26 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0)
    v29 = v26;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 24))(v29+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v27, v22, v6);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v24);
  v30 = *(void (**)(char *, uint64_t))(v32 + 8);
  v30(v17, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v30)(v21, AssociatedTypeWitness);
}

uint64_t specialized MutableCollection<>.subscript.setter()
{
  uint64_t v0;

  v0 = type metadata accessor for Slice();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE48], v0);
  return _writeBackMutableSlice<A, B>(_:bounds:slice:)();
}

unint64_t lazy protocol witness table accessor for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>)
  {
    type metadata accessor for Range<Int>(255, (unint64_t *)&lazy cache variable for type metadata for PartialRangeFrom<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DEC910]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type Int and conformance Int();
    v4[0] = MEMORY[0x1E0DEB458];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC920], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>);
  }
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(char **a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
  v5 = *((_QWORD *)v4 + 2);
  v7[0] = (uint64_t)(v4 + 32);
  v7[1] = v5;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  *a1 = v4;
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;

  v4 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
    return MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = a3;
    type metadata accessor for _LayoutTrait<PositionKey>(0, &lazy cache variable for type metadata for _LayoutTrait<PriorityKey>);
    result = swift_unknownObjectRetain();
    v5 = MEMORY[0x1E0DEE9D8];
    while (v6 < v4)
    {
      LayoutSubviews.subscript.getter();
      lazy protocol witness table accessor for type _LayoutTrait<PriorityKey> and conformance _LayoutTrait<A>();
      result = LayoutProxy.subscript.getter();
      if ((v11 & 1) == 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1, (char *)v5);
          v5 = result;
        }
        v9 = *(_QWORD *)(v5 + 16);
        v8 = *(_QWORD *)(v5 + 24);
        if (v9 >= v8 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, (char *)v5);
          v5 = result;
        }
        *(_QWORD *)(v5 + 16) = v9 + 1;
        *(_QWORD *)(v5 + 8 * v9 + 32) = v10;
      }
      if (v4 == ++v6)
      {
        swift_unknownObjectRelease();
        return v5;
      }
    }
    __break(1u);
  }
  return result;
}

double JindoTripleVStack.Configuration.notchSize.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void JindoTripleVStack.Configuration.notchSize.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*JindoTripleVStack.Configuration.notchSize.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void JindoTripleVStack.Configuration.mode.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t (*JindoTripleVStack.Configuration.mode.modify(_BYTE *a1))(_QWORD)
{
  *a1 = 1;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double JindoTripleVStack.Configuration.defaultInsets.getter()
{
  return 0.0;
}

uint64_t (*JindoTripleVStack.Configuration.defaultInsets.modify(_OWORD *a1))(_QWORD)
{
  *a1 = 0u;
  a1[1] = 0u;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t JindoTripleVStack.Configuration.centerAlignment.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t JindoTripleVStack.Configuration.centerAlignment.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 57) = result;
  return result;
}

uint64_t (*JindoTripleVStack.Configuration.centerAlignment.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t JindoTripleVStack.Configuration.bottomAlignment.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 58);
}

uint64_t JindoTripleVStack.Configuration.bottomAlignment.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 58) = result;
  return result;
}

uint64_t (*JindoTripleVStack.Configuration.bottomAlignment.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t JindoTripleVStack.Configuration.uniformSpacing.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t JindoTripleVStack.Configuration.uniformSpacing.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = result;
  *(_BYTE *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t (*JindoTripleVStack.Configuration.uniformSpacing.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void JindoTripleVStack.Configuration.init(notchSize:mode:defaultInsets:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = 1;
  *(double *)(a1 + 24) = a4;
  *(double *)(a1 + 32) = a5;
  *(double *)(a1 + 40) = a6;
  *(double *)(a1 + 48) = a7;
  *(_WORD *)(a1 + 56) = 256;
  *(_BYTE *)(a1 + 58) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
}

char *JindoTripleVStack.Configuration.init(notchSize:horizontalSizing:layoutMargins:)@<X0>(char *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  char v8;

  v8 = *result;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(_BYTE *)(a2 + 16) = v8;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  *(double *)(a2 + 40) = a7;
  *(double *)(a2 + 48) = a8;
  *(_WORD *)(a2 + 56) = 257;
  *(_BYTE *)(a2 + 58) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  return result;
}

__n128 JindoTripleVStack.init(configuration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  char v3;
  __int16 v4;
  uint64_t v5;
  char v6;
  __n128 result;

  v2 = *(_BYTE *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 56);
  v4 = *(_WORD *)(a1 + 57);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_BYTE *)(a1 + 72);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  *(_BYTE *)(a2 + 56) = v3;
  *(_WORD *)(a2 + 57) = v4;
  *(_QWORD *)(a2 + 64) = v5;
  *(_BYTE *)(a2 + 72) = v6;
  return result;
}

BOOL static JindoTripleVStack.HorizontalMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void JindoTripleVStack.HorizontalMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int JindoTripleVStack.HorizontalMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static JindoTripleVStack.HorizontalSizing.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static JindoTripleVStack.HorizontalSizing.leading.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static JindoTripleVStack.HorizontalSizing.trailing.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static JindoTripleVStack.HorizontalSizing.split.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

BOOL static JindoTripleVStack.HorizontalSizing.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t JindoTripleVStack.Implementation.init(configuration:proxies:)@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  double v5;
  char v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_BYTE *)a1 + 16);
  v7 = a1[3];
  v8 = *((_QWORD *)a1 + 4);
  v9 = *((_QWORD *)a1 + 5);
  v10 = *((_QWORD *)a1 + 6);
  v11 = *((_BYTE *)a1 + 56);
  v45 = *((_BYTE *)a1 + 58);
  v46 = *((_BYTE *)a1 + 57);
  v12 = *((_QWORD *)a1 + 8);
  v13 = *((_BYTE *)a1 + 72);
  v14 = *a2;
  v15 = *((_QWORD *)a2 + 1);
  v16 = *((unsigned __int8 *)a2 + 16);
  v17 = *((unsigned __int8 *)a2 + 17);
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v19 = result;
  v42 = v11;
  v43 = v6;
  v44 = v13;
  swift_bridgeObjectRetain();
  if (v17)
    v20 = 256;
  else
    v20 = 0;
  v41 = specialized Sequence.filter(_:)(0, v19, v14, v15, v20 | v16, 0);
  swift_bridgeObjectRelease();
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
    goto LABEL_15;
  v21 = result;
  swift_bridgeObjectRetain();
  v22 = specialized Sequence.filter(_:)(0, v21, v14, v15, v20 | v16, 1u);
  swift_bridgeObjectRelease();
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v23 = result;
  v39 = v22;
  v40 = v12;
  swift_bridgeObjectRetain();
  v24 = specialized Sequence.filter(_:)(0, v23, v14, v15, v20 | v16, 2u);
  swift_bridgeObjectRelease();
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v25 = result;
  swift_bridgeObjectRetain();
  v26 = specialized Sequence.filter(_:)(0, v25, v14, v15, v20 | v16, 3u);
  swift_bridgeObjectRelease();
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v27 = result;
  swift_bridgeObjectRetain();
  v28 = v20 | v16;
  specialized Sequence.filter(_:)(0, v27, v14, v15, v28, 4u);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  v29 = result;
  swift_bridgeObjectRetain();
  v30 = specialized Sequence.filter(_:)(0, v29, v14, v15, v28, 4u);
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
    v38 = *(_QWORD *)(v30 + 32);
  else
    v38 = 0;
  v36 = v31 == 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v26);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v26);
  v37 = v24;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v26);
  v32 = *(_QWORD *)(v41 + 16);
  swift_bridgeObjectRelease();
  v33 = *(_QWORD *)(v24 + 16);
  swift_bridgeObjectRelease();
  v34 = *(_QWORD *)(v39 + 16);
  swift_bridgeObjectRelease();
  *(double *)a3 = v4;
  *(double *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = v43;
  *(double *)(a3 + 24) = v7;
  *(_QWORD *)(a3 + 32) = v8;
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 48) = v10;
  *(_BYTE *)(a3 + 56) = v42;
  *(_BYTE *)(a3 + 57) = v46;
  *(_BYTE *)(a3 + 58) = v45;
  *(_QWORD *)(a3 + 64) = v40;
  *(_BYTE *)(a3 + 72) = v44;
  *(_QWORD *)(a3 + 80) = v38;
  *(_BYTE *)(a3 + 88) = v36;
  *(_DWORD *)(a3 + 96) = v14;
  *(_QWORD *)(a3 + 104) = v15;
  *(_BYTE *)(a3 + 112) = v16;
  *(_BYTE *)(a3 + 113) = v17;
  *(_QWORD *)(a3 + 120) = 0xFFF0000000000000;
  *(_QWORD *)(a3 + 128) = 0xFFF0000000000000;
  *(_BYTE *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 160) = v41;
  *(_QWORD *)(a3 + 168) = v32;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 192) = v40;
  *(_BYTE *)(a3 + 200) = v44;
  v35 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a3 + 208) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a3 + 216) = 0;
  *(_QWORD *)(a3 + 224) = v37;
  *(_QWORD *)(a3 + 232) = v33;
  *(double *)(a3 + 240) = v5 - v7;
  *(_QWORD *)(a3 + 248) = 0;
  *(_QWORD *)(a3 + 256) = v40;
  *(_BYTE *)(a3 + 264) = v44;
  *(_QWORD *)(a3 + 272) = v35;
  *(_QWORD *)(a3 + 280) = 0;
  *(_QWORD *)(a3 + 288) = v39;
  *(_QWORD *)(a3 + 296) = v34;
  *(_QWORD *)(a3 + 304) = 0;
  *(_QWORD *)(a3 + 312) = 0;
  *(_QWORD *)(a3 + 320) = v40;
  *(_BYTE *)(a3 + 328) = v44;
  *(_QWORD *)(a3 + 336) = v35;
  *(_QWORD *)(a3 + 344) = 0;
  *(_WORD *)(a3 + 352) = 3;
  *(_QWORD *)(a3 + 360) = v35;
  *(_QWORD *)(a3 + 368) = v35;
  JindoTripleVStack.Implementation.determineHorizontalMode()();
  return JindoTripleVStack.Implementation.makeChildren()();
}

void JindoTripleVStack.Implementation.determineHorizontalMode()()
{
  uint64_t v0;
  char v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  char v8;
  char v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  char v17;
  char v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;

  v1 = *(_BYTE *)(v0 + 16);
  if (v1)
    goto LABEL_16;
  v2 = *(_QWORD *)(v0 + 168);
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v3 = *(_QWORD *)(v0 + 160);
  if (*(_QWORD *)(v3 + 16) < v2)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v4 = (2 * v2) | 1;
  v5 = swift_bridgeObjectRetain();
  v6 = specialized Sequence.compactMap<A>(_:)(v5, v3 + 32, 0, v4);
  swift_bridgeObjectRelease();
  v7 = COERCE_DOUBLE(specialized Sequence<>.max()(v6));
  v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    v10 = 0.0;
  else
    v10 = v7;
  v11 = *(_QWORD *)(v0 + 296);
  if ((v11 & 0x8000000000000000) != 0)
    goto LABEL_32;
  v12 = *(_QWORD *)(v0 + 288);
  if (*(_QWORD *)(v12 + 16) >= v11)
  {
    v13 = (2 * v11) | 1;
    v14 = swift_bridgeObjectRetain();
    v15 = specialized Sequence.compactMap<A>(_:)(v14, v12 + 32, 0, v13);
    swift_bridgeObjectRelease();
    v16 = COERCE_DOUBLE(specialized Sequence<>.max()(v15));
    v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      v19 = v10 < 0.0;
      if (v10 > 0.0)
        goto LABEL_11;
    }
    else
    {
      v19 = v10 < v16;
      if (v10 > v16)
      {
LABEL_11:
        v1 = 1;
        goto LABEL_16;
      }
    }
    if (v19)
      v1 = 2;
    else
      v1 = 3;
LABEL_16:
    v20 = *(_QWORD *)(v0 + 296);
    if ((v20 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(*(_QWORD *)(v0 + 288) + 16) >= v20)
    {
      if (!v20)
      {
        v1 = 1;
        v22 = 1;
LABEL_25:
        *(_BYTE *)(v0 + 352) = v1;
        *(_BYTE *)(v0 + 353) = v22;
        return;
      }
      v21 = *(_QWORD *)(v0 + 168);
      if ((v21 & 0x8000000000000000) == 0)
      {
        if (*(_QWORD *)(*(_QWORD *)(v0 + 160) + 16) >= v21)
        {
          v22 = v21 == 0;
          if (v22)
            v1 = 2;
          goto LABEL_25;
        }
        goto LABEL_29;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    __break(1u);
    goto LABEL_28;
  }
LABEL_33:
  __break(1u);
}

uint64_t JindoTripleVStack.Implementation.makeChildren()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  char *v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  int v55;
  char v56;
  int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t *v76;
  uint64_t v77;
  char v78;
  char v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  int v83[2];
  uint64_t v84;
  char v85;
  char v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  int v99;
  __int16 v100;
  char v101;
  _DWORD v102[2];
  char v103;
  _DWORD v104[2];
  char v105;
  _DWORD v106[2];
  char v107;
  _DWORD v108[2];
  char v109;
  _DWORD v110[2];
  char v111;
  char v112;
  char v113;
  char v114;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_BYTE *)(v0 + 113);
  v79 = *(_BYTE *)(v0 + 112);
  v80 = *(_DWORD *)(v0 + 96);
  LODWORD(v87) = v80;
  *((_QWORD *)&v87 + 1) = v2;
  LOBYTE(v88) = v79;
  v78 = v3;
  BYTE1(v88) = v3;
  swift_bridgeObjectRetain();
  v4 = LayoutSubviews.endIndex.getter();
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  v6 = LayoutSubviews.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v4 < 0 || v6 < v4)
    goto LABEL_35;
  v7 = *(char **)(v1 + 360);
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (unint64_t)v4 > *((_QWORD *)v7 + 3) >> 1)
  {
    if (*((_QWORD *)v7 + 2) <= v4)
      v9 = v4;
    else
      v9 = *((_QWORD *)v7 + 2);
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 0, v7);
  }
  *(_QWORD *)(v1 + 360) = v7;
  v10 = *(char **)(v1 + 368);
  v11 = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)v11 || (unint64_t)v4 > *((_QWORD *)v10 + 3) >> 1)
  {
    if (*((_QWORD *)v10 + 2) <= v4)
      v12 = v4;
    else
      v12 = *((_QWORD *)v10 + 2);
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v11, v12, 0, v10);
  }
  *(_QWORD *)(v1 + 368) = v10;
  LODWORD(v87) = v80;
  *((_QWORD *)&v87 + 1) = v2;
  LOBYTE(v88) = v79;
  BYTE1(v88) = v78;
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
    goto LABEL_36;
  v76 = (uint64_t *)(v1 + 360);
  v77 = v2;
  if (result)
  {
    v13 = 0;
    v14 = result - 1;
    while (1)
    {
      LOBYTE(v88) = v79;
      BYTE1(v88) = v78;
      LayoutSubviews.subscript.getter();
      *(_QWORD *)&v87 = v81;
      *((_QWORD *)&v87 + 1) = __PAIR64__(HIDWORD(v2), v82);
      LayoutProxy.layoutPriority.getter();
      v16 = v15;
      static ViewGeometry.invalidValue.getter();
      v17 = v87;
      v18 = v88;
      v19 = v89;
      v20 = v90;
      v22 = *((_QWORD *)v7 + 2);
      v21 = *((_QWORD *)v7 + 3);
      if (v22 >= v21 >> 1)
      {
        v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v7);
        v20 = v90;
        v19 = v89;
        v17 = v87;
        v7 = v34;
      }
      v114 = 1;
      v113 = 1;
      v112 = 1;
      v111 = 1;
      v109 = 1;
      v107 = 1;
      v105 = 1;
      v103 = 1;
      v101 = 1;
      *((_QWORD *)v7 + 2) = v22 + 1;
      v23 = &v7[256 * v22];
      *((_QWORD *)v23 + 4) = v16;
      v23 += 32;
      *((_QWORD *)v23 + 1) = 0;
      v23[16] = v114;
      v24 = *(_DWORD *)((char *)&v87 + 3);
      *(_DWORD *)(v23 + 17) = v87;
      *((_DWORD *)v23 + 5) = v24;
      *((_QWORD *)v23 + 3) = 0;
      v23[32] = v113;
      *((_DWORD *)v23 + 9) = *(_DWORD *)((char *)&v81 + 3);
      *(_DWORD *)(v23 + 33) = v81;
      *((_QWORD *)v23 + 5) = 0;
      v23[48] = v112;
      v25 = v83[0];
      *((_DWORD *)v23 + 13) = *(int *)((char *)v83 + 3);
      *(_DWORD *)(v23 + 49) = v25;
      *((_QWORD *)v23 + 7) = 0;
      v23[64] = v111;
      v26 = v110[0];
      *((_DWORD *)v23 + 17) = *(_DWORD *)((char *)v110 + 3);
      *(_DWORD *)(v23 + 65) = v26;
      *((_QWORD *)v23 + 9) = 0;
      v23[80] = v109;
      v27 = v108[0];
      *((_DWORD *)v23 + 21) = *(_DWORD *)((char *)v108 + 3);
      *(_DWORD *)(v23 + 81) = v27;
      *((_QWORD *)v23 + 11) = 0;
      v23[96] = v107;
      v28 = v106[0];
      *((_DWORD *)v23 + 25) = *(_DWORD *)((char *)v106 + 3);
      *(_DWORD *)(v23 + 97) = v28;
      *((_QWORD *)v23 + 13) = 0;
      v23[112] = v105;
      v29 = v104[0];
      *((_DWORD *)v23 + 29) = *(_DWORD *)((char *)v104 + 3);
      *(_DWORD *)(v23 + 113) = v29;
      *((_QWORD *)v23 + 15) = 0;
      v23[128] = v103;
      v30 = v102[0];
      *((_DWORD *)v23 + 33) = *(_DWORD *)((char *)v102 + 3);
      *(_DWORD *)(v23 + 129) = v30;
      *(_OWORD *)(v23 + 136) = v17;
      *(_OWORD *)(v23 + 152) = v18;
      *(_OWORD *)(v23 + 168) = v19;
      *(_OWORD *)(v23 + 184) = v20;
      *((_QWORD *)v23 + 25) = 0;
      v23[208] = v101;
      v23[209] = 0;
      v31 = v99;
      *((_WORD *)v23 + 107) = v100;
      *(_DWORD *)(v23 + 210) = v31;
      v23[248] = 0;
      *(_OWORD *)(v23 + 232) = 0u;
      *(_OWORD *)(v23 + 216) = 0u;
      v33 = *((_QWORD *)v10 + 2);
      v32 = *((_QWORD *)v10 + 3);
      if (v33 >= v32 >> 1)
        v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v10);
      HIDWORD(v2) = HIDWORD(v77);
      *((_QWORD *)v10 + 2) = v33 + 1;
      *(_QWORD *)&v10[8 * v33 + 32] = v13;
      if (v14 == v13)
        break;
      ++v13;
    }
    *(_QWORD *)(v1 + 360) = v7;
    *(_QWORD *)(v1 + 368) = v10;
  }
  v35 = *(_OWORD *)(v1 + 288);
  v36 = *(_OWORD *)(v1 + 320);
  v37 = *(_OWORD *)(v1 + 336);
  v96 = *(_OWORD *)(v1 + 304);
  v97 = v36;
  v98 = v37;
  v38 = *(_OWORD *)(v1 + 224);
  v39 = *(_OWORD *)(v1 + 256);
  v40 = *(_OWORD *)(v1 + 272);
  v92 = *(_OWORD *)(v1 + 240);
  v93 = v39;
  v94 = v40;
  v95 = v35;
  v41 = *(_OWORD *)(v1 + 176);
  v87 = *(_OWORD *)(v1 + 160);
  v88 = v41;
  v42 = *(_OWORD *)(v1 + 208);
  v89 = *(_OWORD *)(v1 + 192);
  v90 = v42;
  v91 = v38;
  v43 = v35;
  v73 = *((_QWORD *)&v96 + 1);
  v74 = v96;
  v72 = v97;
  v44 = v98;
  v45 = v38;
  v70 = *((_QWORD *)&v92 + 1);
  v71 = v92;
  v66 = BYTE8(v39);
  v67 = BYTE8(v97);
  v46 = v40;
  v47 = v87;
  v69 = v39;
  v48 = v88;
  v68 = v89;
  v49 = v42;
  v65 = BYTE8(v89);
  LOBYTE(v104[0]) = BYTE8(v89);
  v110[0] = *(_DWORD *)((char *)&v89 + 9);
  *(_DWORD *)((char *)v110 + 3) = HIDWORD(v89);
  LOBYTE(v102[0]) = BYTE8(v39);
  v108[0] = *((_QWORD *)&v39 + 1) >> 8;
  *(_DWORD *)((char *)v108 + 3) = HIDWORD(v39);
  LOBYTE(v99) = BYTE8(v97);
  *(_DWORD *)((char *)v106 + 3) = HIDWORD(v97);
  v106[0] = *(_DWORD *)((char *)&v97 + 9);
  v50 = *(double *)(v1 + 24);
  v51 = *(double *)(v1 + 32);
  v52 = *(double *)(v1 + 40);
  v53 = *(double *)(v1 + 48);
  v75 = *(_BYTE *)(v1 + 353);
  outlined retain of JindoTripleVStack.StackIndexedStorage<JindoTripleVStack.StackHeader>((uint64_t)&v87);
  v54 = 0;
  v59 = v47;
  v60 = v49;
  v61 = v46;
  v62 = v45;
  v63 = v44;
  v64 = v43;
  do
  {
    v55 = outlined read-only object #0 of JindoTripleVStack.Implementation.makeChildren()[v54 + 32];
    v83[0] = v80;
    v84 = v77;
    v85 = v79;
    v86 = v78;
    if (v55)
    {
      if (v55 == 1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        JindoTripleVStack.StackHeader.computeSpacingAndPadding(stack:layoutMargins:horizontalFullWidth:proxies:children:)(1, v75, v83, v76, v50, v51, v52, v53);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v66 &= 1u;
        LOBYTE(v102[0]) = v66;
        v61 = v46;
        v62 = v45;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        JindoTripleVStack.StackHeader.computeSpacingAndPadding(stack:layoutMargins:horizontalFullWidth:proxies:children:)(2, v75, v83, v76, v50, v51, v52, v53);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v67 &= 1u;
        LOBYTE(v99) = v67;
        v63 = v44;
        v64 = v43;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      JindoTripleVStack.StackHeader.computeSpacingAndPadding(stack:layoutMargins:horizontalFullWidth:proxies:children:)(0, v75, v83, v76, v50, v51, v52, v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v65 &= 1u;
      LOBYTE(v104[0]) = v65;
      v59 = v47;
      v60 = v49;
    }
    ++v54;
  }
  while (v54 != 3);
  result = outlined release of JindoTripleVStack.StackIndexedStorage<JindoTripleVStack.StackHeader>((uint64_t)&v87);
  v56 = v104[0];
  v57 = v110[0];
  *(_QWORD *)(v1 + 160) = v59;
  *(_DWORD *)(v1 + 201) = v57;
  *(_DWORD *)(v1 + 204) = *(_DWORD *)((char *)v110 + 3);
  LOBYTE(v57) = v102[0];
  *(_DWORD *)(v1 + 265) = v108[0];
  *(_DWORD *)(v1 + 268) = *(_DWORD *)((char *)v108 + 3);
  v58 = v99;
  *(_DWORD *)(v1 + 329) = v106[0];
  *(_DWORD *)(v1 + 332) = *(_DWORD *)((char *)v106 + 3);
  *(_QWORD *)(v1 + 168) = *((_QWORD *)&v47 + 1);
  *(_OWORD *)(v1 + 176) = v48;
  *(_QWORD *)(v1 + 192) = v68;
  *(_BYTE *)(v1 + 200) = v56;
  *(_QWORD *)(v1 + 208) = v60;
  *(_QWORD *)(v1 + 216) = *((_QWORD *)&v49 + 1);
  *(_QWORD *)(v1 + 224) = v62;
  *(_QWORD *)(v1 + 232) = *((_QWORD *)&v45 + 1);
  *(_QWORD *)(v1 + 240) = v71;
  *(_QWORD *)(v1 + 248) = v70;
  *(_QWORD *)(v1 + 256) = v69;
  *(_BYTE *)(v1 + 264) = v57;
  *(_QWORD *)(v1 + 272) = v61;
  *(_QWORD *)(v1 + 280) = *((_QWORD *)&v46 + 1);
  *(_QWORD *)(v1 + 288) = v64;
  *(_QWORD *)(v1 + 296) = *((_QWORD *)&v43 + 1);
  *(_QWORD *)(v1 + 304) = v74;
  *(_QWORD *)(v1 + 312) = v73;
  *(_QWORD *)(v1 + 320) = v72;
  *(_BYTE *)(v1 + 328) = v58;
  *(_QWORD *)(v1 + 336) = v63;
  *(_QWORD *)(v1 + 344) = *((_QWORD *)&v44 + 1);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance JindoTripleVStack.FixedProposal(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(double *)a1 == *(double *)a2)
  {
    v2 = *(_BYTE *)(a2 + 16);
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    {
      if (*(_BYTE *)(a2 + 16))
        return 1;
    }
    else
    {
      if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
        v2 = 1;
      if ((v2 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

void protocol witness for static CaseIterable.allCases.getter in conformance JindoTripleVStack.Stack(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance JindoTripleVStack.Stack;
}

char *specialized JindoTripleVStack.StackIndexedStorage.compactMap<A>(_:)(uint64_t a1, int64_t *a2)
{
  char *v4;
  int64_t v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  double v30;
  double v31;
  int64_t v32;
  unint64_t v33;
  double v34;
  _BYTE v35[16];
  _BYTE v36[16];
  _BYTE v37[16];
  unint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  char v43;

  outlined init with take of Int?(a1, (uint64_t)v37);
  outlined init with take of Int?(a1 + 16, (uint64_t)v36);
  outlined init with take of Int?(a1 + 32, (uint64_t)v35);
  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0, MEMORY[0x1E0DEE9D8]);
  outlined init with take of Int?((uint64_t)v37, (uint64_t)&v38);
  if ((v39 & 1) != 0)
    goto LABEL_9;
  v8 = v38;
  if ((v38 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *a2;
  v6 = *(_QWORD *)(*a2 + 16);
  if (v38 >= v6)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 + 32;
  if ((*(_BYTE *)(v9 + 80 * v38 + 40) & 1) != 0)
    goto LABEL_9;
  v7 = *(double *)(v9 + 80 * v38 + 32) / (double)*(uint64_t *)(v9 + 80 * v38 + 24);
  if (v7 < 0.0)
    v7 = 0.0;
  v8 = *((_QWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 3);
  v5 = v8 + 1;
  if (v8 >= v6 >> 1)
    goto LABEL_34;
  while (1)
  {
    *((_QWORD *)v4 + 2) = v5;
    *(double *)&v4[8 * v8 + 32] = v7;
LABEL_9:
    outlined init with take of Int?((uint64_t)v36, (uint64_t)&v40);
    if ((v41 & 1) == 0)
    {
      v8 = v40;
      if ((v40 & 0x8000000000000000) != 0)
      {
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      v5 = *a2;
      v6 = *(_QWORD *)(*a2 + 16);
      if (v40 >= v6)
        goto LABEL_31;
      v10 = v5 + 32;
      if ((*(_BYTE *)(v10 + 80 * v40 + 40) & 1) == 0)
      {
        v11 = *(double *)(v10 + 80 * v40 + 32) / (double)*(uint64_t *)(v10 + 80 * v40 + 24);
        if (v11 < 0.0)
          v11 = 0.0;
        v12 = *((_QWORD *)v4 + 2);
        v13 = *((_QWORD *)v4 + 3);
        v14 = v12 + 1;
        if (v12 >= v13 >> 1)
        {
          v33 = v12 + 1;
          v24 = v4;
          v31 = v11;
          v25 = *((_QWORD *)v4 + 2);
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v12 + 1, 1, v24);
          v12 = v25;
          v11 = v31;
          v14 = v33;
          v4 = v26;
        }
        *((_QWORD *)v4 + 2) = v14;
        *(double *)&v4[8 * v12 + 32] = v11;
      }
    }
    outlined init with take of Int?((uint64_t)v35, (uint64_t)&v42);
    if ((v43 & 1) != 0)
      return v4;
    v8 = v42;
    if ((v42 & 0x8000000000000000) != 0)
      goto LABEL_32;
    v5 = *a2;
    v6 = *(_QWORD *)(*a2 + 16);
    if (v42 < v6)
      break;
LABEL_33:
    __break(1u);
LABEL_34:
    v32 = v5;
    v21 = v4;
    v30 = v7;
    v22 = v8;
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v5, 1, v21);
    v8 = v22;
    v7 = v30;
    v5 = v32;
    v4 = v23;
  }
  v15 = v5 + 32;
  if ((*(_BYTE *)(v15 + 80 * v42 + 40) & 1) == 0)
  {
    v16 = *(double *)(v15 + 80 * v42 + 32) / (double)*(uint64_t *)(v15 + 80 * v42 + 24);
    if (v16 < 0.0)
      v16 = 0.0;
    v17 = *((_QWORD *)v4 + 2);
    v18 = *((_QWORD *)v4 + 3);
    v19 = v17 + 1;
    if (v17 >= v18 >> 1)
    {
      v27 = v4;
      v34 = v16;
      v28 = *((_QWORD *)v4 + 2);
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v17 + 1, 1, v27);
      v17 = v28;
      v16 = v34;
      v4 = v29;
    }
    *((_QWORD *)v4 + 2) = v19;
    *(double *)&v4[8 * v17 + 32] = v16;
  }
  return v4;
}

char *specialized JindoTripleVStack.StackIndexedStorage.compactMap<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21[2];
  uint64_t v22[2];
  uint64_t v23[2];
  _BYTE v24[16];
  _BYTE v25[16];
  _BYTE v26[16];

  outlined init with take of Int?(a1, (uint64_t)v26);
  outlined init with take of Int?(a1 + 16, (uint64_t)v25);
  outlined init with take of Int?(a1 + 32, (uint64_t)v24);
  outlined init with take of Int?((uint64_t)v26, (uint64_t)v23);
  outlined init with take of Int?((uint64_t)v25, (uint64_t)v22);
  outlined init with take of Int?((uint64_t)v24, (uint64_t)v21);
  v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0, MEMORY[0x1E0DEE9D8]);
  closure #7 in JindoTripleVStack.Implementation.resize(in:groups:)(0, v23, a2, a3, a4, (uint64_t)&v19);
  if ((v20 & 1) == 0)
  {
    v9 = v19;
    v11 = *((_QWORD *)v8 + 2);
    v10 = *((_QWORD *)v8 + 3);
    if (v11 >= v10 >> 1)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v8);
    *((_QWORD *)v8 + 2) = v11 + 1;
    *(_QWORD *)&v8[8 * v11 + 32] = v9;
  }
  closure #7 in JindoTripleVStack.Implementation.resize(in:groups:)(1, v22, a2, a3, a4, (uint64_t)&v19);
  if ((v20 & 1) == 0)
  {
    v12 = v19;
    v14 = *((_QWORD *)v8 + 2);
    v13 = *((_QWORD *)v8 + 3);
    if (v14 >= v13 >> 1)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v8);
    *((_QWORD *)v8 + 2) = v14 + 1;
    *(_QWORD *)&v8[8 * v14 + 32] = v12;
  }
  closure #7 in JindoTripleVStack.Implementation.resize(in:groups:)(2, v21, a2, a3, a4, (uint64_t)&v19);
  if ((v20 & 1) == 0)
  {
    v15 = v19;
    v17 = *((_QWORD *)v8 + 2);
    v16 = *((_QWORD *)v8 + 3);
    if (v17 >= v16 >> 1)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v8);
    *((_QWORD *)v8 + 2) = v17 + 1;
    *(_QWORD *)&v8[8 * v17 + 32] = v15;
  }
  return v8;
}

char *JindoTripleVStack.MajorAxisGroup.allGroups.getter(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  int64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;

  v10 = *(_QWORD *)(a4 + 16);
  if (__OFADD__(v10, 2))
  {
    __break(1u);
  }
  else
  {
    v8 = a2;
    v9 = a1;
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 + 2, 0, MEMORY[0x1E0DEE9D8]);
    v7 = *((_QWORD *)a6 + 2);
    v10 = *((_QWORD *)a6 + 3);
    v6 = v7 + 1;
    if (v7 < v10 >> 1)
      goto LABEL_3;
  }
  a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v6, 1, a6);
LABEL_3:
  *((_QWORD *)a6 + 2) = v6;
  v11 = &a6[24 * v7];
  *((_QWORD *)v11 + 4) = 0;
  *((double *)v11 + 5) = v9;
  v11[48] = 0;
  v18 = a6;
  v12 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v12);
  v13 = v18;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
  v15 = *((_QWORD *)v13 + 2);
  v14 = *((_QWORD *)v13 + 3);
  if (v15 >= v14 >> 1)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, v13);
  *((_QWORD *)v13 + 2) = v15 + 1;
  v16 = &v13[24 * v15];
  *((_QWORD *)v16 + 4) = 0;
  *((double *)v16 + 5) = v8;
  v16[48] = 0;
  return v13;
}

uint64_t JindoTripleVStack.MajorAxisGroup.updateWithSplit(at:before:)(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  char *v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  double v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  double v24;
  double v25;
  char *v26;
  double v27;
  char *v28;

  v11 = a2;
  if (!result)
  {
    v13 = *(double *)(v2 + 8);
    if (v13 < v11)
      v13 = v11;
    *(double *)(v2 + 8) = v13;
    v12 = *(char **)(v2 + 24);
    if (*((_QWORD *)v12 + 2))
    {
      v10 = *((double *)v12 + 5);
      v3 = v12[48];
      if ((v3 & 1) == 0)
      {
        if (v10 - v11 < 0.0)
          v10 = 0.0;
        else
          v10 = v10 - v11;
      }
      v4 = *((_QWORD *)v12 + 4);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        if (!*((_QWORD *)v12 + 2))
        {
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
LABEL_16:
        *((_QWORD *)v12 + 4) = v4;
        *((double *)v12 + 5) = v10;
        v12[48] = v3;
        goto LABEL_17;
      }
LABEL_51:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
      v12 = (char *)result;
      if (!*(_QWORD *)(result + 16))
        goto LABEL_52;
      goto LABEL_16;
    }
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v3 = result;
  if (*(_QWORD *)v2 == result)
  {
    v12 = *(char **)(v2 + 24);
    if (*((_QWORD *)v12 + 2))
    {
      v3 = *((_QWORD *)v12 + 4);
      v10 = *(double *)(v2 + 8);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        if (*((_QWORD *)v12 + 2))
        {
LABEL_6:
          *((_QWORD *)v12 + 4) = v3;
          *((double *)v12 + 5) = v11 - v10;
          v12[48] = 0;
LABEL_17:
          *(_QWORD *)(v2 + 24) = v12;
          return result;
        }
        goto LABEL_55;
      }
LABEL_54:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
      v12 = (char *)result;
      if (*(_QWORD *)(result + 16))
        goto LABEL_6;
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v14 = *(_QWORD *)(v2 + 24);
  v2 += 24;
  v12 = (char *)v14;
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
    return result;
  v11 = a2 - *(double *)(v2 - 16);
  v16 = v12 + 32;
  v17 = *((_QWORD *)v12 + 4);
  if (v17 > result)
  {
    v8 = 0;
    v4 = 1;
LABEL_22:
    v9 = 24 * v8;
    v18 = &v16[24 * v8];
    v5 = *(_QWORD *)v18 - v3;
    if (!__OFSUB__(*(_QWORD *)v18, v3))
    {
      v7 = *((double *)v18 + 1);
      v6 = v18[16];
      if ((v6 & 1) == 0)
      {
        v19 = v7 - v11;
        if (v7 - v11 < 0.0)
          v19 = 0.0;
        v7 = v19;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_28;
      goto LABEL_57;
    }
LABEL_56:
    __break(1u);
LABEL_57:
    v12 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
LABEL_28:
    if (v8 >= *((_QWORD *)v12 + 2))
    {
      __break(1u);
    }
    else
    {
      v20 = &v12[v9];
      *((_QWORD *)v20 + 4) = v3;
      *((double *)v20 + 5) = v11;
      v20[48] = 0;
      *(_QWORD *)v2 = v12;
      if (*((_QWORD *)v12 + 2) >= v4)
        return (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(v4, v4, v5, *(uint64_t *)&v7, v6);
    }
    __break(1u);
    goto LABEL_60;
  }
  v4 = 0;
  if (v17 != result)
  {
    v21 = (uint64_t *)(v12 + 56);
    while (1)
    {
      v22 = *(v21 - 3);
      v23 = __OFSUB__(v3, v22);
      v3 -= v22;
      if (v23)
        break;
      v24 = *((double *)v21 - 2);
      if (*((_BYTE *)v21 - 8))
        v24 = 0.0;
      if (v15 - 1 == v4)
        return result;
      v11 = v11 - v24;
      v25 = *(double *)v21;
      if (v3 < *v21)
      {
        v8 = v4 + 1;
        v4 += 2;
        goto LABEL_22;
      }
      ++v4;
      v21 += 3;
      if (v3 == *(_QWORD *)&v25)
        goto LABEL_39;
    }
    __break(1u);
    goto LABEL_50;
  }
LABEL_39:
  if (v4 < v15)
  {
    v3 = 24 * v4;
    v26 = &v16[24 * v4];
    v6 = *(_QWORD *)v26;
    LOBYTE(v5) = v26[16];
    v27 = *((double *)v26 + 1);
    if (v11 >= v27)
      v27 = v11;
    if (v26[16])
      v7 = *((double *)v26 + 1);
    else
      v7 = v27;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_46;
    goto LABEL_61;
  }
LABEL_60:
  __break(1u);
LABEL_61:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
  v12 = (char *)result;
LABEL_46:
  if (v4 >= *((_QWORD *)v12 + 2))
  {
    __break(1u);
  }
  else
  {
    v28 = &v12[v3];
    *((_QWORD *)v28 + 4) = v6;
    *((double *)v28 + 5) = v7;
    v28[48] = v5;
    *(_QWORD *)v2 = v12;
  }
  return result;
}

double JindoTripleVStack.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, int *a5)
{
  __int128 *v5;
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  uint64_t v21;
  char v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char v29;
  char v30;
  double v31;
  uint64_t v32;
  double v33;
  __int128 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  char v39;
  __int16 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  int v45;
  uint64_t v46;
  char v47;
  char v48;
  double v49;
  double v50;
  char v51;
  double v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  char v71;
  __int128 v72;
  __int128 v73;
  char v74;
  __int16 v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  int v80;
  uint64_t v81;
  char v82;
  char v83;
  double v84;
  double v85;
  char v86;
  double v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  char v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  char v107;

  v10 = *a5;
  v11 = *((_QWORD *)a5 + 1);
  v12 = *((_BYTE *)a5 + 16);
  v13 = *((_BYTE *)a5 + 17);
  v14 = *((_BYTE *)v5 + 16);
  v15 = *((_QWORD *)v5 + 3);
  v16 = *((_QWORD *)v5 + 4);
  v17 = *((_QWORD *)v5 + 5);
  v18 = *((_QWORD *)v5 + 6);
  v19 = *((_BYTE *)v5 + 56);
  v20 = *(_WORD *)((char *)v5 + 57);
  v21 = *((_QWORD *)v5 + 8);
  v22 = *((_BYTE *)v5 + 72);
  v35 = *v5;
  v36 = v14;
  *(_QWORD *)&v37 = v15;
  *((_QWORD *)&v37 + 1) = v16;
  *(_QWORD *)&v38 = v17;
  *((_QWORD *)&v38 + 1) = v18;
  v39 = v19;
  v40 = v20;
  v41 = v21;
  v42 = v22;
  LODWORD(v105) = v10;
  *((_QWORD *)&v105 + 1) = v11;
  LOBYTE(v106) = v12;
  BYTE1(v106) = v13;
  swift_bridgeObjectRetain();
  JindoTripleVStack.Implementation.init(configuration:proxies:)((double *)&v35, (int *)&v105, (uint64_t)&v70);
  if ((v19 & 1) != 0)
  {
    v23 = a4 & 1;
  }
  else
  {
    if ((a2 & 1) == 0)
    {
      EdgeInsets.horizontal.getter();
      *(double *)&a1 = *(double *)&a1 - v24;
    }
    if ((a4 & 1) != 0)
    {
      v23 = 1;
    }
    else
    {
      EdgeInsets.vertical.getter();
      v23 = 0;
      *(double *)&a3 = *(double *)&a3 - v25;
    }
  }
  v26 = *(double *)&a1;
  if ((a2 & 1) != 0)
    v26 = 0.0;
  v27 = v84;
  if (v84 != v26)
    goto LABEL_18;
  v28 = v85;
  if ((v86 & 1) == 0)
  {
    if (v85 == *(double *)&a3)
      v30 = v23;
    else
      v30 = 1;
    if ((v30 & 1) == 0)
    {
      v29 = 0;
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (!v23)
  {
LABEL_18:
    v84 = v26;
    v85 = *(double *)&a3;
    v86 = v23;
    v105 = 0u;
    v106 = 0u;
    v107 = 1;
    JindoTripleVStack.Implementation.sizeAndPlaceChildren(in:bounds:)(a3, v23, (uint64_t)&v105, v26);
    v87 = v31;
    v88 = v32;
    v27 = v84;
    v28 = v85;
    v29 = v86;
    goto LABEL_19;
  }
  v29 = 1;
LABEL_19:
  v33 = v87;
  v56 = v91;
  v57 = v92;
  v54 = v89;
  v55 = v90;
  v60 = v95;
  v61 = v96;
  v58 = v93;
  v59 = v94;
  v64 = v99;
  v65 = v100;
  v62 = v97;
  v63 = v98;
  v35 = v70;
  v36 = v71;
  v37 = v72;
  v38 = v73;
  v39 = v74;
  v40 = v75;
  v41 = v76;
  v42 = v77;
  v43 = v78;
  v44 = v79;
  v45 = v80;
  v46 = v81;
  v47 = v82;
  v48 = v83;
  v49 = v27;
  v50 = v28;
  v51 = v29;
  v52 = v87;
  v53 = v88;
  v66 = v101;
  v67 = v102;
  v68 = v103;
  v69 = v104;
  outlined release of JindoTripleVStack.Implementation((uint64_t)&v35);
  return v33;
}

uint64_t JindoTripleVStack.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, double *a5, double a6, double a7, double a8, double a9)
{
  __int128 *v9;
  int v18;
  double v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int16 v28;
  uint64_t v29;
  char v30;
  char v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v42;
  char v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int16 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  int v52;
  uint64_t v53;
  char v54;
  char v55;
  double v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  char v78;
  __int128 v79;
  __int128 v80;
  char v81;
  __int16 v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  int v87;
  uint64_t v88;
  char v89;
  char v90;
  double v91;
  uint64_t v92;
  char v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  double v113;
  char v114;

  v18 = *(_DWORD *)a5;
  v19 = a5[1];
  v20 = *((_BYTE *)a5 + 16);
  v21 = *((_BYTE *)a5 + 17);
  v22 = *((_BYTE *)v9 + 16);
  v23 = *((_QWORD *)v9 + 3);
  v24 = *((_QWORD *)v9 + 4);
  v25 = *((_QWORD *)v9 + 5);
  v26 = *((_QWORD *)v9 + 6);
  v27 = *((_BYTE *)v9 + 56);
  v28 = *(_WORD *)((char *)v9 + 57);
  v29 = *((_QWORD *)v9 + 8);
  v30 = *((_BYTE *)v9 + 72);
  v42 = *v9;
  v43 = v22;
  *(_QWORD *)&v44 = v23;
  *((_QWORD *)&v44 + 1) = v24;
  *(_QWORD *)&v45 = v25;
  *((_QWORD *)&v45 + 1) = v26;
  v46 = v27;
  v47 = v28;
  v48 = v29;
  v49 = v30;
  LODWORD(v110) = v18;
  v111 = v19;
  LOBYTE(v112) = v20;
  BYTE1(v112) = v21;
  swift_bridgeObjectRetain();
  JindoTripleVStack.Implementation.init(configuration:proxies:)((double *)&v42, (int *)&v110, (uint64_t)&v77);
  if ((v27 & 1) != 0)
  {
    v31 = a4 & 1;
  }
  else
  {
    CGRect.inset(by:)();
    a6 = v32;
    a7 = v33;
    a8 = v34;
    a9 = v35;
    if ((a2 & 1) == 0)
    {
      EdgeInsets.horizontal.getter();
      *(double *)&a1 = *(double *)&a1 - v36;
    }
    if ((a4 & 1) != 0)
    {
      v31 = 1;
    }
    else
    {
      EdgeInsets.vertical.getter();
      v31 = 0;
      *(double *)&a3 = *(double *)&a3 - v37;
    }
  }
  v38 = *(double *)&a1;
  if ((a2 & 1) != 0)
    v38 = 0.0;
  v91 = v38;
  v92 = a3;
  v93 = v31;
  v110 = a6;
  v111 = a7;
  v112 = a8;
  v113 = a9;
  v114 = 0;
  JindoTripleVStack.Implementation.sizeAndPlaceChildren(in:bounds:)(a3, v31, (uint64_t)&v110, v38);
  v63 = v96;
  v64 = v97;
  v61 = v94;
  v62 = v95;
  v67 = v100;
  v68 = v101;
  v65 = v98;
  v66 = v99;
  v71 = v104;
  v72 = v105;
  v69 = v102;
  v70 = v103;
  v42 = v77;
  v43 = v78;
  v44 = v79;
  v45 = v80;
  v46 = v81;
  v47 = v82;
  v48 = v83;
  v49 = v84;
  v50 = v85;
  v51 = v86;
  v52 = v87;
  v53 = v88;
  v54 = v89;
  v55 = v90;
  v56 = v91;
  v57 = v92;
  v58 = v93;
  v59 = v39;
  v60 = v40;
  v73 = v106;
  v74 = v107;
  v75 = v108;
  v76 = v109;
  return outlined release of JindoTripleVStack.Implementation((uint64_t)&v42);
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance JindoTripleVStack(uint64_t a1, char a2, uint64_t a3, char a4, int *a5)
{
  return JindoTripleVStack.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a5);
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance JindoTripleVStack(uint64_t a1, char a2, uint64_t a3, char a4, double *a5, double a6, double a7, double a8, double a9)
{
  return JindoTripleVStack.placeSubviews(in:proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a5, a6, a7, a8, a9);
}

void one-time initialization function for leading()
{
  static JindoTripleVStack.Position.leading = 0;
  qword_1EDDD40A0 = 0;
  byte_1EDDD40A8 = 1;
  qword_1EDDD40B0 = 0;
  byte_1EDDD40B8 = 1;
}

uint64_t static JindoTripleVStack.Position.leading.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t result;

  if (one-time initialization token for leading != -1)
    result = swift_once();
  v2 = qword_1EDDD40A0;
  v3 = byte_1EDDD40A8;
  v4 = qword_1EDDD40B0;
  v5 = byte_1EDDD40B8;
  *(_BYTE *)a1 = static JindoTripleVStack.Position.leading;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t static JindoTripleVStack.Position.leading(inset:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return static JindoTripleVStack.Position.leading(inset:)(a1, a2, 0, a3);
}

void one-time initialization function for trailing()
{
  static JindoTripleVStack.Position.trailing = 1;
  qword_1EDDD40C8 = 0;
  byte_1EDDD40D0 = 1;
  qword_1EDDD40D8 = 0;
  byte_1EDDD40E0 = 1;
}

uint64_t static JindoTripleVStack.Position.trailing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t result;

  if (one-time initialization token for trailing != -1)
    result = swift_once();
  v2 = qword_1EDDD40C8;
  v3 = byte_1EDDD40D0;
  v4 = qword_1EDDD40D8;
  v5 = byte_1EDDD40E0;
  *(_BYTE *)a1 = static JindoTripleVStack.Position.trailing;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t static JindoTripleVStack.Position.trailing(inset:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return static JindoTripleVStack.Position.leading(inset:)(a1, a2, 1, a3);
}

uint64_t static JindoTripleVStack.Position.leading(inset:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = a3;
  *(_QWORD *)(a4 + 8) = result;
  *(_BYTE *)(a4 + 16) = a2 & 1;
  *(_QWORD *)(a4 + 24) = 0;
  *(_BYTE *)(a4 + 32) = 1;
  return result;
}

void one-time initialization function for center()
{
  static JindoTripleVStack.Position.center = 2;
  qword_1EDDD4068 = 0;
  byte_1EDDD4070 = 1;
  qword_1EDDD4078 = 0;
  byte_1EDDD4080 = 1;
}

uint64_t static JindoTripleVStack.Position.center.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t result;

  if (one-time initialization token for center != -1)
    result = swift_once();
  v2 = qword_1EDDD4068;
  v3 = byte_1EDDD4070;
  v4 = qword_1EDDD4078;
  v5 = byte_1EDDD4080;
  *(_BYTE *)a1 = static JindoTripleVStack.Position.center;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

void one-time initialization function for bottom()
{
  static JindoTripleVStack.Position.bottom = 3;
  qword_1EDDD4038 = 0;
  byte_1EDDD4040 = 1;
  qword_1EDDD4048 = 0;
  byte_1EDDD4050 = 1;
}

uint64_t static JindoTripleVStack.Position.bottom.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t result;

  if (one-time initialization token for bottom != -1)
    result = swift_once();
  v2 = qword_1EDDD4038;
  v3 = byte_1EDDD4040;
  v4 = qword_1EDDD4048;
  v5 = byte_1EDDD4050;
  *(_BYTE *)a1 = static JindoTripleVStack.Position.bottom;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t static JindoTripleVStack.Position.bottom(leadingInset:trailingInset:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(_BYTE *)a5 = 3;
  *(_QWORD *)(a5 + 8) = result;
  *(_BYTE *)(a5 + 16) = a2 & 1;
  *(_QWORD *)(a5 + 24) = a3;
  *(_BYTE *)(a5 + 32) = a4 & 1;
  return result;
}

void one-time initialization function for notch()
{
  static JindoTripleVStack.Position.notch = 4;
  qword_1EDE383C0 = 0;
  byte_1EDE383C8 = 1;
  qword_1EDE383D0 = 0;
  byte_1EDE383D8 = 1;
}

uint64_t static JindoTripleVStack.Position.notch.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t result;

  if (one-time initialization token for notch != -1)
    result = swift_once();
  v2 = qword_1EDE383C0;
  v3 = byte_1EDE383C8;
  v4 = qword_1EDE383D0;
  v5 = byte_1EDE383D8;
  *(_BYTE *)a1 = static JindoTripleVStack.Position.notch;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t JindoTripleVStack.StackHeader.computeSpacingAndPadding(stack:layoutMargins:horizontalFullWidth:proxies:children:)(char a1, char a2, int *a3, uint64_t *a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  char v40;
  unint64_t v41;
  double v42;
  uint64_t *v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  int v50;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  char v56;
  double v57;
  char v58;
  double v59;
  char v60;
  char v61;

  v9 = v8;
  v50 = *a3;
  v16 = *((_QWORD *)a3 + 1);
  v48 = *((_BYTE *)a3 + 17);
  v49 = *((_BYTE *)a3 + 16);
  v17 = *(_QWORD *)v9;
  v18 = *(_QWORD *)(*(_QWORD *)v9 + 16);
  v19 = *(_QWORD *)(v9 + 48);
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v18 > *(_QWORD *)(v19 + 24) >> 1)
  {
    if (*(_QWORD *)(v19 + 16) <= v18)
      v21 = v18;
    else
      v21 = *(_QWORD *)(v19 + 16);
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v21, 0, (char *)v19);
    v19 = result;
  }
  *(_QWORD *)(v9 + 48) = v19;
  v22 = *(_QWORD *)(v17 + 16);
  if (a1)
  {
    if (a1 == 1)
    {
      if (!v22)
        return result;
      v44 = 0;
      v23 = 1;
      goto LABEL_20;
    }
    if ((a2 & 1) == 0)
    {
      if (!v22)
        return result;
      v23 = 0;
      v24 = 8;
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  if ((a2 & 1) != 0)
  {
LABEL_15:
    if (!v22)
      return result;
    v23 = 0;
    v24 = 10;
    goto LABEL_19;
  }
  if (!v22)
    return result;
  v23 = 0;
  v24 = 2;
LABEL_19:
  v44 = v24;
LABEL_20:
  v25 = *(double *)(v9 + 56);
  v26 = *a4;
  result = swift_isUniquelyReferenced_nonNull_native();
  v43 = a4;
  if ((result & 1) == 0)
  {
LABEL_56:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
    v26 = result;
  }
  v27 = 0;
  v28 = *(_QWORD *)(v17 + 32);
  v46 = v17 + 40;
  v47 = v26 + 32;
  v52 = v22 - 1;
  v29 = 0.0;
  v45 = v26;
  while (1)
  {
    v17 = *(_QWORD *)(v19 + 16);
    v30 = *(_QWORD *)(v19 + 24);
    if (v17 >= v30 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v17 + 1, 1, (char *)v19);
      v19 = result;
    }
    v25 = v29 + v25;
    *(_QWORD *)(v19 + 16) = v17 + 1;
    *(double *)(v19 + 8 * v17 + 32) = v25;
    if ((v28 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v28 >= *(_QWORD *)(v26 + 16))
      goto LABEL_54;
    v22 = v47 + (v28 << 8);
    if (a1)
    {
      if (a1 == 1)
      {
        *(double *)(v22 + 56) = v29;
        *(_BYTE *)(v22 + 64) = 0;
        if ((v23 & 1) != 0)
          goto LABEL_48;
      }
      else
      {
        *(double *)(v22 + 72) = v29;
        *(_BYTE *)(v22 + 80) = 0;
        if ((v23 & 1) != 0)
          goto LABEL_48;
      }
    }
    else
    {
      *(double *)(v22 + 40) = v29;
      *(_BYTE *)(v22 + 48) = 0;
      if ((v23 & 1) != 0)
        goto LABEL_48;
    }
    LODWORD(v54) = v50;
    LOBYTE(v55) = v49;
    BYTE1(v55) = v48;
    LayoutSubviews.subscript.getter();
    type metadata accessor for _LayoutTrait<PositionKey>(0, &lazy cache variable for type metadata for _LayoutTrait<ContentMarginsKey>);
    v17 = v31;
    lazy protocol witness table accessor for type _LayoutTrait<ContentMarginsKey> and conformance _LayoutTrait<A>();
    result = LayoutProxy.subscript.getter();
    if ((v61 & 1) == 0)
    {
      if (v28 >= *(_QWORD *)(v26 + 16))
        goto LABEL_55;
      v32 = v59;
      v33 = v57;
      v34 = v55;
      v35 = v54;
      if ((v60 & 1) != 0)
        v32 = a8;
      v36 = v32 - a8;
      if ((v58 & 1) != 0)
        v33 = a7;
      v37 = v33 - a7;
      if ((v56 & 1) != 0)
        v34 = a6;
      v38 = v34 - a6;
      if ((v16 & 1) != 0)
        v35 = a5;
      v39 = v35 - a5;
      v40 = v44 | (v27 == 0);
      if (v52 == v27)
        v40 |= 4u;
      *(double *)(v22 + 216) = v39;
      *(double *)(v22 + 224) = v38;
      *(double *)(v22 + 232) = v37;
      *(double *)(v22 + 240) = v36;
      *(_BYTE *)(v22 + 248) = v40;
    }
LABEL_48:
    if (v52 == v27)
      break;
    v41 = *(_QWORD *)(v46 + 8 * v27);
    if ((*(_BYTE *)(v9 + 40) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      LayoutSubviews.subscript.getter();
      LayoutSubview.spacing.getter();
      v26 = v45;
      LayoutSubviews.subscript.getter();
      swift_bridgeObjectRelease();
      LayoutSubview.spacing.getter();
      v22 = v53;
      HIDWORD(v54) = HIDWORD(v53);
      ViewSpacing.distance(to:along:)();
      v29 = v42;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v29 = *(double *)(v9 + 32);
    }
    ++v27;
    v28 = v41;
  }
  *v43 = v26;
  *(_QWORD *)(v9 + 48) = v19;
  *(double *)(v9 + 56) = v25;
  return result;
}

uint64_t JindoTripleVStack.Implementation.sizeAndPlaceChildren(in:bounds:)(uint64_t a1, char a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  int v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  int v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  double v34;
  double v35;
  double v36;
  char v37;
  double v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  unint64_t v50;
  _OWORD *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  double v91;
  double v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  CGFloat v96;
  CGFloat v97;
  CGFloat v98;
  CGFloat v99;
  __int128 v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double Width;
  double Height;
  double v107;
  double v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  double v112;
  uint64_t result;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char v127;
  double v128;
  char v129;
  unsigned int v130;
  char v131;
  char v132;
  uint64_t v133;
  char v134;
  double v135;
  double v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  char v152;
  char v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  char rect;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  unint64_t v173;
  _OWORD v174[16];
  __int128 v175;
  char v176;
  __int128 v177;
  char v178;
  _OWORD v179[24];
  _OWORD __dst[24];
  double v181[4];
  char v182;
  double v183[6];
  int v184;
  __int16 v185;
  char v186;
  _DWORD v187[2];
  _DWORD v188[2];
  _DWORD v189[2];
  __int128 v190;
  _OWORD v191[2];
  char v192;
  char v193;
  _OWORD v194[2];
  int v195;
  char v196;
  _DWORD v197[6];
  CGRect v198;
  CGRect v199;
  CGRect v200;
  CGRect v201;
  CGRect v202;

  v5 = v4;
  v7 = *(double *)v4;
  v6 = *(_QWORD *)(v4 + 8);
  v8 = *(_BYTE *)(v4 + 16);
  v172 = a2 & 1;
  v197[0] = *(_DWORD *)(v4 + 17);
  *(_DWORD *)((char *)v197 + 3) = *(_DWORD *)(v4 + 20);
  v9 = *(_QWORD *)(v4 + 24);
  v10 = *(_QWORD *)(v4 + 32);
  v12 = *(_QWORD *)(v4 + 40);
  v11 = *(_QWORD *)(v4 + 48);
  v13 = *(_BYTE *)(v4 + 56);
  v14 = *(_BYTE *)(v4 + 57);
  v15 = *(_BYTE *)(v4 + 58);
  v16 = *(_DWORD *)(v4 + 59);
  v196 = *(_BYTE *)(v4 + 63);
  v195 = v16;
  v154 = *(_QWORD *)(v4 + 64);
  v17 = *(_BYTE *)(v4 + 72);
  v150 = v17;
  v151 = v13;
  v18 = *(_OWORD *)(v4 + 73);
  *(_QWORD *)((char *)v194 + 15) = *(_QWORD *)(v4 + 88);
  v194[0] = v18;
  v170 = *(_DWORD *)(v4 + 96);
  v155 = *(_DWORD *)(v4 + 100);
  v19 = *(_QWORD *)(v4 + 104);
  v193 = *(_BYTE *)(v4 + 112);
  v131 = v193;
  v192 = *(_BYTE *)(v4 + 113);
  v134 = v192;
  v20 = *(_OWORD *)(v4 + 114);
  v21 = *(_OWORD *)(v4 + 130);
  *(_OWORD *)((char *)v191 + 14) = *(_OWORD *)(v4 + 144);
  v191[0] = v21;
  v190 = v20;
  v22 = *(_QWORD *)(v4 + 168);
  v162 = *(_QWORD *)(v4 + 160);
  v144 = *(_QWORD *)(v4 + 184);
  v145 = *(_QWORD *)(v4 + 176);
  v143 = *(_QWORD *)(v4 + 192);
  v23 = *(_BYTE *)(v4 + 200);
  v24 = *(_DWORD *)(v4 + 201);
  *(_DWORD *)((char *)v189 + 3) = *(_DWORD *)(v4 + 204);
  v189[0] = v24;
  v156 = *(_QWORD *)(v4 + 208);
  v25 = *(_QWORD *)(v4 + 232);
  v171 = *(_QWORD *)(v4 + 224);
  v137 = *(_QWORD *)(v4 + 216);
  v138 = *(_OWORD *)(v4 + 240);
  v148 = *(_QWORD *)(v4 + 256);
  v146 = v23;
  v147 = *(_BYTE *)(v4 + 264);
  v26 = *(_DWORD *)(v4 + 265);
  *(_DWORD *)((char *)v188 + 3) = *(_DWORD *)(v4 + 268);
  v188[0] = v26;
  v27 = *(_DWORD *)(v4 + 329);
  *(_DWORD *)((char *)v187 + 3) = *(_DWORD *)(v4 + 332);
  v187[0] = v27;
  v185 = *(_WORD *)(v4 + 358);
  v184 = *(_DWORD *)(v4 + 354);
  *(_DWORD *)((char *)&__dst[1] + 1) = *(_DWORD *)(v4 + 17);
  DWORD1(__dst[1]) = *(_DWORD *)(v4 + 20);
  *(_DWORD *)((char *)&__dst[3] + 11) = *(_DWORD *)(v4 + 59);
  HIBYTE(__dst[3]) = *(_BYTE *)(v4 + 63);
  *((_QWORD *)&__dst[5] + 1) = *(_QWORD *)(v4 + 88);
  *(_DWORD *)((char *)&__dst[12] + 9) = *(_DWORD *)(v4 + 201);
  HIDWORD(__dst[12]) = *(_DWORD *)(v4 + 204);
  *(_DWORD *)((char *)&__dst[16] + 9) = *(_DWORD *)(v4 + 265);
  HIDWORD(__dst[16]) = *(_DWORD *)(v4 + 268);
  *(_DWORD *)((char *)&__dst[20] + 9) = *(_DWORD *)(v4 + 329);
  HIDWORD(__dst[20]) = *(_DWORD *)(v4 + 332);
  v186 = *(_BYTE *)(v4 + 353);
  BYTE1(__dst[22]) = v186;
  *(_DWORD *)((char *)&__dst[22] + 2) = *(_DWORD *)(v4 + 354);
  WORD3(__dst[22]) = *(_WORD *)(v4 + 358);
  v157 = *(_QWORD *)(v4 + 272);
  v139 = *(_QWORD *)(v4 + 280);
  v29 = *(_QWORD *)(v4 + 304);
  v28 = *(_QWORD *)(v4 + 312);
  v128 = *(double *)(v4 + 344);
  *(double *)__dst = v7;
  *((_QWORD *)&__dst[0] + 1) = v6;
  v153 = v14;
  LOBYTE(__dst[1]) = v8;
  *((_QWORD *)&__dst[1] + 1) = v9;
  *(_QWORD *)&__dst[2] = v10;
  *((_QWORD *)&__dst[2] + 1) = v12;
  *(_QWORD *)&__dst[3] = v11;
  BYTE8(__dst[3]) = v13;
  v30 = v14;
  BYTE9(__dst[3]) = v14;
  v31 = v15;
  v152 = v15;
  BYTE10(__dst[3]) = v15;
  *(_QWORD *)&__dst[4] = v154;
  BYTE8(__dst[4]) = v17;
  *(_OWORD *)((char *)&__dst[4] + 9) = *(_OWORD *)(v4 + 73);
  *(_QWORD *)&__dst[6] = __PAIR64__(v155, v170);
  v32 = v19;
  v167 = v19;
  *((_QWORD *)&__dst[6] + 1) = v19;
  LOBYTE(__dst[7]) = v193;
  BYTE1(__dst[7]) = v192;
  __dst[9] = *(_OWORD *)(v4 + 144);
  *(_OWORD *)((char *)&__dst[7] + 2) = *(_OWORD *)(v4 + 114);
  *(_OWORD *)((char *)&__dst[8] + 2) = *(_OWORD *)(v4 + 130);
  *(_QWORD *)&__dst[10] = v162;
  *((_QWORD *)&__dst[10] + 1) = v22;
  *(_QWORD *)&__dst[11] = v145;
  *((_QWORD *)&__dst[11] + 1) = v144;
  *(_QWORD *)&__dst[12] = v143;
  BYTE8(__dst[12]) = v23;
  *(_QWORD *)&__dst[13] = v156;
  *((_QWORD *)&__dst[13] + 1) = v137;
  *(_QWORD *)&__dst[14] = v171;
  *((_QWORD *)&__dst[14] + 1) = v25;
  v33 = v25;
  __dst[15] = v138;
  *(_QWORD *)&__dst[16] = v148;
  BYTE8(__dst[16]) = v147;
  *(_QWORD *)&__dst[17] = v157;
  *((_QWORD *)&__dst[17] + 1) = v139;
  v163 = v25;
  v168 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&__dst[18] = *(_QWORD *)(v4 + 288);
  v164 = *(_QWORD *)&__dst[18];
  *((_QWORD *)&__dst[18] + 1) = v168;
  *(_QWORD *)&__dst[19] = v29;
  *((_QWORD *)&__dst[19] + 1) = v28;
  v140 = v29;
  *(_QWORD *)&__dst[20] = *(_QWORD *)(v4 + 320);
  v160 = *(_QWORD *)&__dst[20];
  BYTE8(__dst[20]) = *(_BYTE *)(v4 + 328);
  v158 = BYTE8(__dst[20]);
  *(_QWORD *)&__dst[21] = *(_QWORD *)(v4 + 336);
  v161 = *(_QWORD *)&__dst[21];
  *((double *)&__dst[21] + 1) = v128;
  LOBYTE(__dst[22]) = *(_BYTE *)(v4 + 352);
  rect = __dst[22];
  v149 = *(_QWORD *)(v4 + 368);
  *((_QWORD *)&__dst[22] + 1) = *(_QWORD *)(v4 + 360);
  v166 = *((_QWORD *)&__dst[22] + 1);
  *(_QWORD *)&__dst[23] = v149;
  JindoTripleVStack.Implementation.computeMinWidth(of:in:)(0, a1, a2 & 1, a4);
  v136 = v34;
  *(_DWORD *)((char *)&__dst[1] + 1) = v197[0];
  DWORD1(__dst[1]) = *(_DWORD *)((char *)v197 + 3);
  *(_DWORD *)((char *)&__dst[3] + 11) = v195;
  HIBYTE(__dst[3]) = v196;
  *(_OWORD *)((char *)&__dst[4] + 9) = v194[0];
  *((_QWORD *)&__dst[5] + 1) = *(_QWORD *)((char *)v194 + 15);
  LOBYTE(__dst[7]) = v131;
  *(double *)__dst = v7;
  *((_QWORD *)&__dst[0] + 1) = v6;
  v141 = v10;
  LOBYTE(__dst[1]) = v8;
  *((_QWORD *)&__dst[1] + 1) = v9;
  *(_QWORD *)&__dst[2] = v10;
  *((_QWORD *)&__dst[2] + 1) = v12;
  *(_QWORD *)&__dst[3] = v11;
  BYTE8(__dst[3]) = v151;
  BYTE9(__dst[3]) = v30;
  BYTE10(__dst[3]) = v31;
  *(_QWORD *)&__dst[4] = v154;
  BYTE8(__dst[4]) = v150;
  *(_QWORD *)&__dst[6] = __PAIR64__(v155, v170);
  *((_QWORD *)&__dst[6] + 1) = v32;
  BYTE1(__dst[7]) = v134;
  *(_OWORD *)((char *)&__dst[7] + 2) = v190;
  *(_OWORD *)((char *)&__dst[8] + 2) = v191[0];
  __dst[9] = *(_OWORD *)((char *)v191 + 14);
  *(_QWORD *)&__dst[10] = v162;
  *((_QWORD *)&__dst[10] + 1) = v22;
  *(_QWORD *)&__dst[11] = v145;
  *((_QWORD *)&__dst[11] + 1) = v144;
  *(_QWORD *)&__dst[12] = v143;
  BYTE8(__dst[12]) = v146;
  HIDWORD(__dst[12]) = *(_DWORD *)((char *)v189 + 3);
  *(_DWORD *)((char *)&__dst[12] + 9) = v189[0];
  *(_QWORD *)&__dst[13] = v156;
  *((_QWORD *)&__dst[13] + 1) = v137;
  *(_QWORD *)&__dst[14] = v171;
  *((_QWORD *)&__dst[14] + 1) = v33;
  __dst[15] = v138;
  *(_QWORD *)&__dst[16] = v148;
  BYTE8(__dst[16]) = v147;
  *(_DWORD *)((char *)&__dst[16] + 9) = v188[0];
  HIDWORD(__dst[16]) = *(_DWORD *)((char *)v188 + 3);
  *(_QWORD *)&__dst[17] = v157;
  *((_QWORD *)&__dst[17] + 1) = v139;
  *(_QWORD *)&__dst[18] = v164;
  *((_QWORD *)&__dst[18] + 1) = v168;
  *(_QWORD *)&__dst[19] = v29;
  *((_QWORD *)&__dst[19] + 1) = v28;
  *(_QWORD *)&__dst[20] = v160;
  BYTE8(__dst[20]) = v158;
  *(_DWORD *)((char *)&__dst[20] + 9) = v187[0];
  HIDWORD(__dst[20]) = *(_DWORD *)((char *)v187 + 3);
  *(_QWORD *)&__dst[21] = v161;
  v35 = v128;
  *((double *)&__dst[21] + 1) = v128;
  LOBYTE(__dst[22]) = rect;
  *(_DWORD *)((char *)&__dst[22] + 2) = v184;
  WORD3(__dst[22]) = v185;
  v132 = v186;
  BYTE1(__dst[22]) = v186;
  *((_QWORD *)&__dst[22] + 1) = v166;
  *(_QWORD *)&__dst[23] = v149;
  JindoTripleVStack.Implementation.computeMinWidth(of:in:)(2, a1, v172, a4);
  v135 = v36;
  *(double *)__dst = v7;
  *((_QWORD *)&__dst[0] + 1) = v6;
  LOBYTE(__dst[1]) = v8;
  *(_DWORD *)((char *)&__dst[1] + 1) = v197[0];
  DWORD1(__dst[1]) = *(_DWORD *)((char *)v197 + 3);
  *((_QWORD *)&__dst[1] + 1) = v9;
  *(_QWORD *)&__dst[2] = v10;
  *((_QWORD *)&__dst[2] + 1) = v12;
  *(_QWORD *)&__dst[3] = v11;
  BYTE8(__dst[3]) = v151;
  BYTE9(__dst[3]) = v153;
  BYTE10(__dst[3]) = v152;
  *(_DWORD *)((char *)&__dst[3] + 11) = v195;
  HIBYTE(__dst[3]) = v196;
  *(_QWORD *)&__dst[4] = v154;
  BYTE8(__dst[4]) = v150;
  *(_OWORD *)((char *)&__dst[4] + 9) = v194[0];
  *((_QWORD *)&__dst[5] + 1) = *(_QWORD *)((char *)v194 + 15);
  *(_QWORD *)&__dst[6] = __PAIR64__(v155, v170);
  *((_QWORD *)&__dst[6] + 1) = v167;
  HIDWORD(__dst[12]) = *(_DWORD *)((char *)v189 + 3);
  *(_DWORD *)((char *)&__dst[12] + 9) = v189[0];
  *(_DWORD *)((char *)&__dst[16] + 9) = v188[0];
  HIDWORD(__dst[16]) = *(_DWORD *)((char *)v188 + 3);
  *(_DWORD *)((char *)&__dst[20] + 9) = v187[0];
  HIDWORD(__dst[20]) = *(_DWORD *)((char *)v187 + 3);
  v129 = v193;
  LOBYTE(__dst[7]) = v193;
  BYTE1(__dst[22]) = v132;
  *(_DWORD *)((char *)&__dst[22] + 2) = v184;
  WORD3(__dst[22]) = v185;
  v127 = v192;
  BYTE1(__dst[7]) = v192;
  *(_OWORD *)((char *)&__dst[7] + 2) = v190;
  *(_OWORD *)((char *)&__dst[8] + 2) = v191[0];
  __dst[9] = *(_OWORD *)((char *)v191 + 14);
  *(_QWORD *)&__dst[10] = v162;
  *((_QWORD *)&__dst[10] + 1) = v22;
  *(_QWORD *)&__dst[11] = v145;
  *((_QWORD *)&__dst[11] + 1) = v144;
  *(_QWORD *)&__dst[12] = v143;
  BYTE8(__dst[12]) = v146;
  *(_QWORD *)&__dst[13] = v156;
  *((_QWORD *)&__dst[13] + 1) = v137;
  *(_QWORD *)&__dst[14] = v171;
  *((_QWORD *)&__dst[14] + 1) = v163;
  __dst[15] = v138;
  *(_QWORD *)&__dst[16] = v148;
  BYTE8(__dst[16]) = v147;
  *(_QWORD *)&__dst[17] = v157;
  *((_QWORD *)&__dst[17] + 1) = v139;
  *(_QWORD *)&__dst[18] = v164;
  *((_QWORD *)&__dst[18] + 1) = v168;
  *(_QWORD *)&__dst[19] = v140;
  *((_QWORD *)&__dst[19] + 1) = v28;
  *(_QWORD *)&__dst[20] = v160;
  BYTE8(__dst[20]) = v158;
  *(_QWORD *)&__dst[21] = v161;
  *((double *)&__dst[21] + 1) = v128;
  LOBYTE(__dst[22]) = rect;
  *((_QWORD *)&__dst[22] + 1) = v166;
  *(_QWORD *)&__dst[23] = v149;
  JindoTripleVStack.Implementation.spacing(_:axis:)(0, (uint64_t)v179);
  *(_DWORD *)((char *)&__dst[1] + 1) = v197[0];
  DWORD1(__dst[1]) = *(_DWORD *)((char *)v197 + 3);
  *(_DWORD *)((char *)&__dst[3] + 11) = v195;
  HIBYTE(__dst[3]) = v196;
  *((_QWORD *)&__dst[5] + 1) = *(_QWORD *)((char *)v194 + 15);
  v133 = *(_QWORD *)&v179[0];
  LOBYTE(__dst[7]) = v129;
  v130 = BYTE8(v179[0]);
  *(double *)__dst = v7;
  *((_QWORD *)&__dst[0] + 1) = v6;
  LOBYTE(__dst[1]) = v8;
  *((_QWORD *)&__dst[1] + 1) = v9;
  *(_QWORD *)&__dst[2] = v10;
  *((_QWORD *)&__dst[2] + 1) = v12;
  *(_QWORD *)&__dst[3] = v11;
  BYTE8(__dst[3]) = v151;
  BYTE9(__dst[3]) = v153;
  BYTE10(__dst[3]) = v152;
  *(_QWORD *)&__dst[4] = v154;
  BYTE8(__dst[4]) = v150;
  *(_OWORD *)((char *)&__dst[4] + 9) = v194[0];
  *(_QWORD *)&__dst[6] = __PAIR64__(v155, v170);
  *((_QWORD *)&__dst[6] + 1) = v167;
  BYTE1(__dst[7]) = v127;
  __dst[9] = *(_OWORD *)((char *)v191 + 14);
  *(_OWORD *)((char *)&__dst[8] + 2) = v191[0];
  *(_OWORD *)((char *)&__dst[7] + 2) = v190;
  *(_QWORD *)&__dst[10] = v162;
  *((_QWORD *)&__dst[10] + 1) = v22;
  *(_QWORD *)&__dst[11] = v145;
  *((_QWORD *)&__dst[11] + 1) = v144;
  *(_QWORD *)&__dst[12] = v143;
  BYTE8(__dst[12]) = v146;
  HIDWORD(__dst[12]) = *(_DWORD *)((char *)v189 + 3);
  *(_DWORD *)((char *)&__dst[12] + 9) = v189[0];
  *(_QWORD *)&__dst[13] = v156;
  *((_QWORD *)&__dst[13] + 1) = v137;
  *(_QWORD *)&__dst[14] = v171;
  *((_QWORD *)&__dst[14] + 1) = v163;
  __dst[15] = v138;
  *(_QWORD *)&__dst[16] = v148;
  BYTE8(__dst[16]) = v147;
  *(_DWORD *)((char *)&__dst[16] + 9) = v188[0];
  HIDWORD(__dst[16]) = *(_DWORD *)((char *)v188 + 3);
  *(_QWORD *)&__dst[17] = v157;
  *((_QWORD *)&__dst[17] + 1) = v139;
  *(_QWORD *)&__dst[18] = v164;
  *((_QWORD *)&__dst[18] + 1) = v168;
  *(_QWORD *)&__dst[19] = v140;
  *((_QWORD *)&__dst[19] + 1) = v28;
  *(_QWORD *)&__dst[20] = v160;
  BYTE8(__dst[20]) = v158;
  *(_DWORD *)((char *)&__dst[20] + 9) = v187[0];
  HIDWORD(__dst[20]) = *(_DWORD *)((char *)v187 + 3);
  *(_QWORD *)&__dst[21] = v161;
  *((double *)&__dst[21] + 1) = v128;
  LOBYTE(__dst[22]) = rect;
  *(_DWORD *)((char *)&__dst[22] + 2) = v184;
  WORD3(__dst[22]) = v185;
  v37 = v186;
  BYTE1(__dst[22]) = v186;
  *((_QWORD *)&__dst[22] + 1) = v166;
  *(_QWORD *)&__dst[23] = v149;
  JindoTripleVStack.Implementation.spacing(_:axis:)(2, (uint64_t)v179);
  *(_DWORD *)((char *)&__dst[16] + 9) = v188[0];
  *(_DWORD *)((char *)&__dst[20] + 9) = v187[0];
  *(_DWORD *)((char *)&__dst[22] + 2) = v184;
  LOBYTE(__dst[1]) = v8;
  *(_DWORD *)((char *)&__dst[1] + 1) = v197[0];
  DWORD1(__dst[1]) = *(_DWORD *)((char *)v197 + 3);
  BYTE8(__dst[3]) = v151;
  BYTE9(__dst[3]) = v153;
  BYTE10(__dst[3]) = v152;
  *(_DWORD *)((char *)&__dst[3] + 11) = v195;
  HIBYTE(__dst[3]) = v196;
  *(_QWORD *)&__dst[4] = v154;
  BYTE8(__dst[4]) = v150;
  *((_QWORD *)&__dst[5] + 1) = *(_QWORD *)((char *)v194 + 15);
  LOBYTE(__dst[7]) = v193;
  BYTE1(__dst[7]) = v192;
  *(_QWORD *)&__dst[12] = v143;
  BYTE8(__dst[12]) = v146;
  HIDWORD(__dst[12]) = *(_DWORD *)((char *)v189 + 3);
  *(_DWORD *)((char *)&__dst[12] + 9) = v189[0];
  *(_QWORD *)&__dst[13] = v156;
  *(_QWORD *)&__dst[16] = v148;
  BYTE8(__dst[16]) = v147;
  HIDWORD(__dst[16]) = *(_DWORD *)((char *)v188 + 3);
  *(_QWORD *)&__dst[17] = v157;
  *(_QWORD *)&__dst[20] = v160;
  BYTE8(__dst[20]) = v158;
  HIDWORD(__dst[20]) = *(_DWORD *)((char *)v187 + 3);
  *(_QWORD *)&__dst[21] = v161;
  *(_QWORD *)&__dst[6] = __PAIR64__(v155, v170);
  v38 = v7;
  *(double *)__dst = v7;
  *((_QWORD *)&__dst[0] + 1) = v6;
  *((_QWORD *)&__dst[1] + 1) = v9;
  *(_QWORD *)&__dst[2] = v141;
  BYTE1(__dst[22]) = v37;
  WORD3(__dst[22]) = v185;
  v39 = *(uint64_t *)&v179[0];
  *((_QWORD *)&__dst[22] + 1) = v166;
  *(_QWORD *)&__dst[23] = v149;
  v40 = BYTE8(v179[0]);
  *((_QWORD *)&__dst[2] + 1) = v12;
  *(_QWORD *)&__dst[3] = v11;
  *(_OWORD *)((char *)&__dst[4] + 9) = v194[0];
  *((_QWORD *)&__dst[6] + 1) = v167;
  __dst[9] = *(_OWORD *)((char *)v191 + 14);
  *(_OWORD *)((char *)&__dst[8] + 2) = v191[0];
  *(_OWORD *)((char *)&__dst[7] + 2) = v190;
  *(_QWORD *)&__dst[10] = v162;
  *((_QWORD *)&__dst[10] + 1) = v22;
  *(_QWORD *)&__dst[11] = v145;
  *((_QWORD *)&__dst[11] + 1) = v144;
  *((_QWORD *)&__dst[13] + 1) = v137;
  *(_QWORD *)&__dst[14] = v171;
  *((_QWORD *)&__dst[14] + 1) = v163;
  __dst[15] = v138;
  *((_QWORD *)&__dst[17] + 1) = v139;
  *(_QWORD *)&__dst[18] = v164;
  *((_QWORD *)&__dst[18] + 1) = v168;
  *(_QWORD *)&__dst[19] = v140;
  *((_QWORD *)&__dst[19] + 1) = v28;
  *((double *)&__dst[21] + 1) = v128;
  LOBYTE(__dst[22]) = rect;
  JindoTripleVStack.Implementation.spacing(_:axis:)(1, (uint64_t)v179);
  v41 = *(_QWORD *)&v179[0];
  v42 = BYTE8(v179[0]);
  v43 = v133;
  *(_QWORD *)&__dst[0] = v133;
  v44 = v130;
  BYTE8(__dst[0]) = v130;
  ViewSpacing.distance(to:along:)();
  v46 = v45;
  *(_QWORD *)&__dst[0] = v39;
  BYTE8(__dst[0]) = v40;
  *(_QWORD *)&v179[0] = v41;
  BYTE8(v179[0]) = v42;
  ViewSpacing.distance(to:along:)();
  v48 = v47;
  v49 = v163;
  swift_bridgeObjectRelease();
  *(_QWORD *)&__dst[0] = v133;
  BYTE8(__dst[0]) = v130;
  v50 = (unint64_t)v174;
  *(_QWORD *)&v179[0] = v39;
  BYTE8(v179[0]) = v40;
  v51 = __dst;
  ViewSpacing.distance(to:along:)();
  v53 = v52;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v46 > v48)
    v54 = v46;
  else
    v54 = v48;
  v55 = v54 + v54;
  v56 = v136;
  if (v136 <= v135)
    v56 = v135;
  v57 = v38 - v55;
  v58 = a4 - (v56 + v56) - v55;
  if (v57 > v58)
    v59 = v57;
  else
    v59 = v58;
  if ((v163 & 0x8000000000000000) != 0)
    goto LABEL_107;
  v51 = (_OWORD *)v171;
  if (*(_QWORD *)(v171 + 16) < v163)
    goto LABEL_108;
  LOBYTE(v161) = v192;
  LOBYTE(v160) = v193;
  if (!v163)
  {
    swift_bridgeObjectRetain();
    v59 = 0.0;
    v43 = v172;
    v44 = v162;
LABEL_20:
    v40 = v168;
    goto LABEL_21;
  }
  v43 = v172;
  LODWORD(__dst[0]) = v170;
  *((_QWORD *)&__dst[0] + 1) = v167;
  LOBYTE(__dst[1]) = v193;
  BYTE1(__dst[1]) = v192;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v49 = v163;
  LayoutSubviews.subscript.getter();
  __dst[0] = v179[0];
  LOBYTE(__dst[1]) = v179[1];
  LOBYTE(v174[0]) = 0;
  LayoutSubview.sizeThatFits(_:)();
  v59 = v60;
  v61 = v163 - 1;
  v44 = v162;
  v40 = v168;
  if (v163 != 1)
  {
    v159 = v5;
    v62 = 0;
    do
    {
      v63 = v61;
      LODWORD(__dst[0]) = v170;
      *((_QWORD *)&__dst[0] + 1) = v167;
      LOBYTE(__dst[1]) = v160;
      BYTE1(__dst[1]) = v161;
      LayoutSubviews.subscript.getter();
      __dst[0] = v179[0];
      LOBYTE(__dst[1]) = v179[1];
      LOBYTE(v174[0]) = 0;
      LayoutSubview.sizeThatFits(_:)();
      v61 = v63;
      if (v59 < v64)
        v59 = v64;
      ++v62;
    }
    while (v63 != v62);
    v51 = (_OWORD *)v171;
    swift_bridgeObjectRelease();
    v5 = v159;
    v43 = v172;
    v44 = v162;
    v49 = v163;
    goto LABEL_20;
  }
  v51 = (_OWORD *)v171;
  swift_bridgeObjectRelease();
LABEL_21:
  if (v59 > v57)
    v35 = v59;
  else
    v35 = v57;
  v65 = (a4 - v35) * 0.5;
  if (v65 - v46 < 0.0)
    v66 = 0.0;
  else
    v66 = v65 - v46;
  v67 = v65 - v48;
  if (v67 < 0.0)
    v48 = 0.0;
  else
    v48 = v67;
  v68 = specialized closure #1 in JindoTripleVStack.ProposedMetrics.init(stacks:notchSize:centerWidth:horizontalSizing:fullWidth:leadingCenterSpacing:trailingCenterSpacing:leadingTrailingSpacing:proposal:)(v186, rect, a4, v53, v48, v66);
  v183[0] = v68;
  v183[1] = v69;
  if (a4 < 0.0)
    v53 = 0.0;
  else
    v53 = a4;
  v183[2] = v35;
  v183[3] = v53;
  v183[4] = v66;
  v183[5] = v48;
  v39 = a1;
  v50 = v166;
  if (v22 < 0)
    goto LABEL_109;
  if (*(_QWORD *)(v44 + 16) < (unint64_t)v22)
    goto LABEL_110;
  v59 = v69;
  if (v22)
  {
    v70 = v68;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v50 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v166);
    v71 = 0;
    do
    {
      v72 = *(_QWORD *)(v44 + 8 * v71 + 32);
      if ((v72 & 0x8000000000000000) != 0)
      {
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      if (v72 >= *(_QWORD *)(v50 + 16))
        goto LABEL_102;
      ++v71;
      v73 = v50 + 32 + (v72 << 8);
      *(double *)(v73 + 200) = v70;
      *(_BYTE *)(v73 + 208) = 0;
    }
    while (v22 != v71);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 + 360) = v50;
  }
  if (*((_QWORD *)v51 + 2) < v49)
    goto LABEL_111;
  if (!v49)
    goto LABEL_52;
  if (v49 == 0x8000000000000000)
    goto LABEL_115;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_116;
  while (1)
  {
    v74 = 0;
    do
    {
      v75 = *((_QWORD *)v51 + v74 + 4);
      if ((v75 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_100:
        __break(1u);
        goto LABEL_101;
      }
      if (v75 >= *(_QWORD *)(v50 + 16))
        goto LABEL_100;
      ++v74;
      v76 = v50 + 32 + (v75 << 8);
      *(double *)(v76 + 200) = v35;
      *(_BYTE *)(v76 + 208) = 0;
    }
    while (v49 != v74);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 + 360) = v50;
LABEL_52:
    v51 = (_OWORD *)v164;
    if ((v40 & 0x8000000000000000) != 0)
      goto LABEL_112;
    if (*(_QWORD *)(v164 + 16) < v40)
      goto LABEL_113;
    if (v40)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v50 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v50);
      v77 = 0;
      while (1)
      {
        v78 = *(_QWORD *)(v164 + 8 * v77 + 32);
        if ((v78 & 0x8000000000000000) != 0)
          break;
        if (v78 >= *(_QWORD *)(v50 + 16))
          goto LABEL_104;
        ++v77;
        v79 = v50 + 32 + (v78 << 8);
        *(double *)(v79 + 200) = v59;
        *(_BYTE *)(v79 + 208) = 0;
        if (v40 == v77)
        {
          swift_bridgeObjectRelease();
          *(_QWORD *)(v5 + 360) = v50;
          goto LABEL_62;
        }
      }
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
      goto LABEL_114;
    }
LABEL_62:
    v51 = *(_OWORD **)(v44 + 16);
    if ((uint64_t)v51 >= v22)
      break;
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    v50 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v50);
  }
  if ((_OWORD *)v22 != v51)
  {
    if (v22 < (uint64_t)v51)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_67;
    }
    else
    {
      __break(1u);
    }
    v50 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v50);
LABEL_67:
    while (1)
    {
      v80 = *(_QWORD *)(v44 + 8 * v22 + 32);
      if ((v80 & 0x8000000000000000) != 0)
        goto LABEL_105;
      if (v80 >= *(_QWORD *)(v50 + 16))
        goto LABEL_106;
      ++v22;
      v81 = v50 + 32 + (v80 << 8);
      *(double *)(v81 + 200) = v53;
      *(_BYTE *)(v81 + 208) = 0;
      if (v51 == (_OWORD *)v22)
      {
        swift_bridgeObjectRelease();
        *(_QWORD *)(v5 + 360) = v50;
        break;
      }
    }
  }
  JindoTripleVStack.Implementation.prioritizeAndSizeChildren(in:resetCache:)(v39, v43, 1, a4);
  JindoTripleVStack.Implementation.equalizeHeightOfLeadingAndTrailing(in:)(v39, v43, a4);
  if (*(_QWORD *)(v5 + 296) <= *(_QWORD *)(v5 + 168))
    v82 = *(_QWORD *)(v5 + 168);
  else
    v82 = *(_QWORD *)(v5 + 296);
  if (v82 >= 1
    && (specialized JindoTripleVStack.Implementation.resizeChildrenAdjacentToNotch(in:metrics:)((uint64_t)v183) & 1) != 0)
  {
    v83 = *(double *)&v39;
    v84 = v82 + 1;
    v50 = v172;
    do
    {
      JindoTripleVStack.Implementation.prioritizeAndSizeChildren(in:resetCache:)(v39, v172, 0, a4);
      v85 = *(double *)(v5 + 176);
      v86 = *(double *)(v5 + 184);
      v87 = *(_QWORD *)(*(_QWORD *)(v5 + 160) + 16);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>, (uint64_t)&type metadata for JindoTripleVStack.MajorAxisGroup.Group, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v88 = swift_allocObject();
      v89 = v88;
      v90 = v172 != 0;
      *(_OWORD *)(v88 + 16) = xmmword_187BF9830;
      v91 = v83 - v85 - v86;
      if (v172)
        v91 = *(double *)&v39;
      *(_QWORD *)(v88 + 32) = v87;
      *(double *)(v88 + 40) = v91;
      *(_BYTE *)(v88 + 48) = v90;
      v92 = *(double *)(v5 + 304);
      v48 = *(double *)(v5 + 312);
      v93 = *(_QWORD *)(*(_QWORD *)(v5 + 288) + 16);
      if (v172)
        v94 = *(double *)&a1;
      else
        v94 = v83 - v92 - v48;
      v95 = swift_allocObject();
      *(_OWORD *)(v95 + 16) = xmmword_187BF9830;
      *(_QWORD *)(v95 + 32) = v93;
      *(double *)(v95 + 40) = v94;
      v39 = a1;
      *(_BYTE *)(v95 + 48) = v90;
      JindoTripleVStack.Implementation.equalizeHeightOfLeadingAndTrailing(in:leading:trailing:)(a1, v172, v87, v89, v93, v95, a4, v85, v86, v92, v48);
      swift_setDeallocating();
      swift_deallocClassInstance();
      swift_setDeallocating();
      swift_deallocClassInstance();
      --v84;
    }
    while (v84 >= 2
         && (specialized JindoTripleVStack.Implementation.resizeChildrenAdjacentToNotch(in:metrics:)((uint64_t)v183) & 1) != 0);
  }
  JindoTripleVStack.Implementation.pushBelowNotchIfNeeded(in:metrics:)(v39, v172, (uint64_t)v183, a4);
  outlined init with take of CGRect?(a3, (uint64_t)v181);
  if (v182 == 1)
    return swift_bridgeObjectRelease();
  v96 = v181[0];
  v97 = v181[1];
  v98 = v181[2];
  v99 = v181[3];
  memcpy(__dst, (const void *)v5, 0x178uLL);
  v100 = __dst[10];
  v101 = *((_QWORD *)&__dst[18] + 1);
  v102 = *(_QWORD *)&__dst[18];
  v103 = *(_QWORD *)&__dst[14];
  memcpy(v179, (const void *)v5, 0x178uLL);
  if ((*((_QWORD *)&__dst[10] + 1) & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_119;
  }
  if (*(_QWORD *)(*(_QWORD *)&__dst[10] + 16) < *((_QWORD *)&__dst[10] + 1))
  {
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  v173 = *((_QWORD *)&__dst[14] + 1);
  swift_bridgeObjectRetain();
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  specialized JindoTripleVStack.Implementation.place(indices:of:minorAxisAnchor:bounds:)(0.0, v96, v97, v98, v99, v100, v100 + 32, 0, (2 * *((_QWORD *)&v100 + 1)) | 1);
  swift_bridgeObjectRelease();
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  v48 = *(double *)__dst;
  v50 = BYTE10(__dst[3]);
  memcpy(v179, __dst, 0x178uLL);
  if ((v101 & 0x8000000000000000) != 0)
  {
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  if (*(_QWORD *)(v102 + 16) < v101)
  {
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  v168 = *((_QWORD *)&__dst[0] + 1);
  v101 = (2 * v101) | 1;
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  v104 = swift_bridgeObjectRetain();
  specialized JindoTripleVStack.Implementation.place(indices:of:minorAxisAnchor:bounds:)(1.0, v96, v97, v98, v99, v104, v102 + 32, 0, v101);
  swift_bridgeObjectRelease();
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  v198.origin.x = v96;
  v198.origin.y = v97;
  v198.size.width = v98;
  v198.size.height = v99;
  Width = CGRectGetWidth(v198);
  v199.origin.x = v96;
  v199.origin.y = v97;
  v199.size.width = v98;
  v199.size.height = v99;
  Height = CGRectGetHeight(v199);
  v200.origin.x = v96;
  v200.origin.y = v97;
  v200.size.width = v98;
  v200.size.height = v99;
  v107 = CGRectGetHeight(v200);
  memcpy(v179, __dst, 0x178uLL);
  if ((v173 & 0x8000000000000000) != 0)
  {
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  if (*(_QWORD *)(v103 + 16) < v173)
  {
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  v101 = (2 * v173) | 1;
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  swift_bridgeObjectRetain();
  TextAlignment.value.getter();
  specialized JindoTripleVStack.Implementation.place(indices:of:minorAxisAnchor:bounds:)(v108, v96 + Width * 0.5 - v48 * 0.5, v97 + Height * 0.5 - v107 * 0.5, v48, v107, v103, v103 + 32, 0, v101);
  swift_bridgeObjectRelease();
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  v50 = *(_QWORD *)&__dst[5];
  v109 = BYTE8(__dst[5]);
  memcpy(v179, __dst, 0x178uLL);
  v110 = *(_QWORD *)(v100 + 16);
  if (v110 < *((_QWORD *)&v100 + 1))
  {
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
  v111 = (2 * v110) | 1;
  swift_bridgeObjectRetain();
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  TextAlignment.value.getter();
  specialized JindoTripleVStack.Implementation.place(indices:of:minorAxisAnchor:bounds:)(v112, v96, v97, v98, v99, v100, v100 + 32, *((uint64_t *)&v100 + 1), v111);
  swift_bridgeObjectRelease();
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  if (v109)
    return swift_bridgeObjectRelease();
  v103 = *((_QWORD *)&__dst[22] + 1);
  v101 = (unint64_t)v174;
  LODWORD(v179[0]) = v170;
  *((_QWORD *)&v179[0] + 1) = v167;
  LOBYTE(v179[1]) = v160;
  BYTE1(v179[1]) = v161;
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  LayoutSubviews.subscript.getter();
  v175 = v177;
  v176 = v178;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((v50 & 0x8000000000000000) == 0)
      goto LABEL_96;
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
LABEL_125:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v103);
  v103 = result;
  if ((v50 & 0x8000000000000000) != 0)
    goto LABEL_126;
LABEL_96:
  if (v50 >= *(_QWORD *)(v103 + 16))
  {
LABEL_127:
    __break(1u);
  }
  else
  {
    LOBYTE(v179[0]) = 0;
    LOBYTE(v174[0]) = 0;
    JindoTripleVStack.Implementation.resize(_:proposal:proxy:)(v103 + (v50 << 8) + 32, *(uint64_t *)&v48, 0, v168, 0, &v175);
    result = outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
    *(_QWORD *)(v5 + 360) = v103;
    if (v50 < *(_QWORD *)(v103 + 16))
    {
      v114 = *(_OWORD *)(v103 + (v50 << 8) + 32);
      v115 = *(_OWORD *)(v103 + (v50 << 8) + 48);
      v116 = *(_OWORD *)(v103 + (v50 << 8) + 80);
      v174[2] = *(_OWORD *)(v103 + (v50 << 8) + 64);
      v174[3] = v116;
      v174[0] = v114;
      v174[1] = v115;
      v117 = *(_OWORD *)(v103 + (v50 << 8) + 96);
      v118 = *(_OWORD *)(v103 + (v50 << 8) + 112);
      v119 = *(_OWORD *)(v103 + (v50 << 8) + 144);
      v174[6] = *(_OWORD *)(v103 + (v50 << 8) + 128);
      v174[7] = v119;
      v174[4] = v117;
      v174[5] = v118;
      v120 = *(_OWORD *)(v103 + (v50 << 8) + 160);
      v121 = *(_OWORD *)(v103 + (v50 << 8) + 176);
      v122 = *(_OWORD *)(v103 + (v50 << 8) + 208);
      v174[10] = *(_OWORD *)(v103 + (v50 << 8) + 192);
      v174[11] = v122;
      v174[8] = v120;
      v174[9] = v121;
      v123 = *(_OWORD *)(v103 + (v50 << 8) + 224);
      v124 = *(_OWORD *)(v103 + (v50 << 8) + 240);
      v125 = *(_OWORD *)(v103 + (v50 << 8) + 256);
      *(_OWORD *)(v101 + 233) = *(_OWORD *)(v103 + (v50 << 8) + 265);
      *(_OWORD *)(v101 + 208) = v124;
      *(_OWORD *)(v101 + 224) = v125;
      *(_OWORD *)(v101 + 192) = v123;
      outlined retain of JindoTripleVStack.Child((uint64_t)v174);
      v201.origin.x = v96;
      v201.origin.y = v97;
      v201.size.width = v98;
      v201.size.height = v99;
      CGRectGetMidX(v201);
      ViewDimensions.width.getter();
      ViewOrigin.x.setter();
      v202.origin.x = v96;
      v202.origin.y = v97;
      v202.size.width = v98;
      v202.size.height = v99;
      CGRectGetMinY(v202);
      ViewOrigin.y.setter();
      LayoutSubviews.subscript.getter();
      swift_retain();
      swift_bridgeObjectRelease();
      LayoutSubview.place(in:layoutDirection:)();
      return swift_release_n();
    }
  }
  __break(1u);
  return result;
}

__n128 JindoTripleVStack.Implementation.resize(_:proposal:proxy:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, __int128 *a6)
{
  char v9;
  double v10;
  double v11;
  void (*v12)(__int128 *, _QWORD);
  double *v13;
  double v14;
  double v15;
  void (*v16)(__int128 *, _QWORD);
  double *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 result;
  __int128 v24;
  __n128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v24 = *a6;
  v9 = *((_BYTE *)a6 + 16);
  EdgeInsets.in(_:)();
  if ((a3 & 1) == 0)
    EdgeInsets.horizontal.getter();
  if ((a5 & 1) == 0)
    EdgeInsets.vertical.getter();
  v26 = v24;
  LOBYTE(v27) = v9;
  LOBYTE(v32) = a3 & 1;
  LayoutSubview.dimensions(in:)();
  EdgeInsets.horizontal.getter();
  v11 = v10;
  v12 = (void (*)(__int128 *, _QWORD))ViewSize.width.modify();
  *v13 = v11 + *v13;
  v12(&v26, 0);
  EdgeInsets.vertical.getter();
  v15 = v14;
  v16 = (void (*)(__int128 *, _QWORD))ViewSize.height.modify();
  *v17 = v15 + *v17;
  v16(&v26, 0);
  swift_retain();
  ViewGeometry.init(origin:dimensions:)();
  swift_release();
  v18 = v26;
  v19 = v27;
  v20 = v28;
  v25 = v29;
  v21 = v30;
  v22 = v31;
  swift_release();
  *(_OWORD *)(a1 + 136) = v18;
  *(_QWORD *)(a1 + 152) = v19;
  *(_QWORD *)(a1 + 160) = v20;
  result = v25;
  *(__n128 *)(a1 + 168) = v25;
  *(_QWORD *)(a1 + 184) = v21;
  *(_QWORD *)(a1 + 192) = v22;
  return result;
}

uint64_t JindoTripleVStack.Implementation.prioritize(resetCache:)(uint64_t result)
{
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  double v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  char *v30;
  double v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  char v67;
  char v68;
  __int128 v69;
  char v70;
  char *v71;

  v2 = *(char **)(v1 + 360);
  v3 = *((_QWORD *)v2 + 2);
  if (!v3)
    return result;
  v4 = result;
  v5 = *(char **)(v1 + 368);
  v71 = v5;
  swift_bridgeObjectRetain();
  if ((v4 & 1) == 0)
  {
    v6 = v64;
    goto LABEL_9;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_99;
  while (1)
  {
    v6 = v64;
    v7 = 0;
    v8 = *((_QWORD *)v2 + 2);
    v9 = v2 + 64;
    do
    {
      if (v7 >= v8)
      {
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }
      ++v7;
      *((_QWORD *)v9 - 3) = 0;
      *(v9 - 16) = 1;
      *((_QWORD *)v9 - 1) = 0;
      *v9 = 1;
      v9 += 256;
    }
    while (v3 != v7);
    *(_QWORD *)(v64 + 360) = v2;
    v3 = *((_QWORD *)v2 + 2);
LABEL_9:
    if (v3 <= 0x20)
    {
      v10 = *((_QWORD *)v5 + 2);
      if (v10 >= 2)
      {
        v23 = 0;
        v24 = 1;
        while (v24 < v10)
        {
          v25 = *(_QWORD *)&v5[8 * v24 + 32];
          if (v25 < 0)
            goto LABEL_94;
          v26 = 0;
          v27 = v25 << 8;
          v62 = v24;
          v63 = v23;
          v60 = v25 << 8;
          v61 = *(_QWORD *)&v5[8 * v24 + 32];
          while (1)
          {
            v3 = v24 + v26;
            if (v24 + v26 - 1 >= *((_QWORD *)v5 + 2))
            {
              __break(1u);
LABEL_78:
              __break(1u);
LABEL_79:
              __break(1u);
LABEL_80:
              __break(1u);
LABEL_81:
              __break(1u);
LABEL_82:
              __break(1u);
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
              goto LABEL_87;
            }
            v28 = *((_QWORD *)v2 + 2);
            if (v25 >= v28)
              goto LABEL_78;
            v29 = *(_QWORD *)&v5[8 * v26 + 32 + v23];
            if (v29 >= v28)
              goto LABEL_79;
            v30 = &v2[v27 + 32];
            v31 = *(double *)&v2[256 * v29 + 32];
            if (v31 >= *(double *)v30)
            {
              if (*(double *)v30 < v31)
                break;
              v65 = v29 << 8;
              if ((v30[16] & 1) != 0)
              {
                ProposedViewSize.init(_:in:by:)();
                v32 = *(_QWORD *)(v6 + 104);
                v33 = *(_BYTE *)(v6 + 112);
                v34 = *(_BYTE *)(v6 + 113);
                LODWORD(v66) = *(_DWORD *)(v6 + 96);
                *((_QWORD *)&v66 + 1) = v32;
                v67 = v33;
                v68 = v34;
                LayoutSubviews.subscript.getter();
                v66 = v69;
                v67 = v70;
                LayoutSubview.lengthThatFits(_:in:)();
                v36 = v35;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
                v27 = v60;
                v25 = v61;
                v23 = v63;
                v6 = v64;
                v24 = v62;
                if (v61 >= *((_QWORD *)v2 + 2))
                  goto LABEL_88;
                v37 = &v2[v60];
                *((_QWORD *)v37 + 5) = v36;
                v37[48] = 0;
                *(_QWORD *)(v64 + 360) = v2;
                v28 = *((_QWORD *)v2 + 2);
              }
              if (v25 >= v28)
                goto LABEL_84;
              if ((v2[v27 + 64] & 1) != 0)
              {
                ProposedViewSize.init(_:in:by:)();
                v38 = *(_QWORD *)(v6 + 104);
                v39 = *(_BYTE *)(v6 + 112);
                v40 = *(_BYTE *)(v6 + 113);
                LODWORD(v66) = *(_DWORD *)(v6 + 96);
                *((_QWORD *)&v66 + 1) = v38;
                v67 = v39;
                v68 = v40;
                LayoutSubviews.subscript.getter();
                v66 = v69;
                v67 = v70;
                LayoutSubview.lengthThatFits(_:in:)();
                v42 = v41;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
                v25 = v61;
                v24 = v62;
                v23 = v63;
                v6 = v64;
                v27 = v60;
                if (v61 >= *((_QWORD *)v2 + 2))
                  goto LABEL_89;
                v43 = &v2[v60];
                *((_QWORD *)v43 + 7) = v42;
                v43[64] = 0;
                *(_QWORD *)(v64 + 360) = v2;
              }
              _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
              v44 = *((_QWORD *)v2 + 2);
              if (v29 >= v44)
                goto LABEL_85;
              v45 = v66;
              v46 = v29 << 8;
              if ((v2[v65 + 48] & 1) != 0)
              {
                ProposedViewSize.init(_:in:by:)();
                v47 = *(_QWORD *)(v6 + 104);
                v48 = *(_BYTE *)(v6 + 112);
                v49 = *(_BYTE *)(v6 + 113);
                LODWORD(v66) = *(_DWORD *)(v6 + 96);
                *((_QWORD *)&v66 + 1) = v47;
                v67 = v48;
                v68 = v49;
                LayoutSubviews.subscript.getter();
                v66 = v69;
                v67 = v70;
                LayoutSubview.lengthThatFits(_:in:)();
                v51 = v50;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
                v23 = v63;
                v6 = v64;
                v25 = v61;
                v24 = v62;
                v27 = v60;
                v46 = v29 << 8;
                if (v29 >= *((_QWORD *)v2 + 2))
                  goto LABEL_90;
                v52 = &v2[v65];
                *((_QWORD *)v52 + 5) = v51;
                v52[48] = 0;
                *(_QWORD *)(v64 + 360) = v2;
                v44 = *((_QWORD *)v2 + 2);
              }
              if (v29 >= v44)
                goto LABEL_86;
              if ((v2[v46 + 64] & 1) != 0)
              {
                ProposedViewSize.init(_:in:by:)();
                v53 = *(_QWORD *)(v6 + 104);
                v54 = *(_BYTE *)(v6 + 112);
                v55 = *(_BYTE *)(v6 + 113);
                LODWORD(v66) = *(_DWORD *)(v6 + 96);
                *((_QWORD *)&v66 + 1) = v53;
                v67 = v54;
                v68 = v55;
                LayoutSubviews.subscript.getter();
                v66 = v69;
                v67 = v70;
                LayoutSubview.lengthThatFits(_:in:)();
                v57 = v56;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
                v23 = v63;
                v6 = v64;
                v25 = v61;
                v24 = v62;
                v27 = v60;
                if (v29 >= *((_QWORD *)v2 + 2))
                  goto LABEL_91;
                v58 = &v2[v65];
                *((_QWORD *)v58 + 7) = v57;
                v58[64] = 0;
                *(_QWORD *)(v64 + 360) = v2;
              }
              _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
              v59 = v66;
              v66 = v45;
              v69 = v59;
              if ((MEMORY[0x18D7574C8](&v66, &v69) & 1) == 0)
              {
                v66 = v45;
                v69 = v59;
                if ((MEMORY[0x18D7574C8](&v69, &v66) & 1) != 0 || v25 >= (uint64_t)v29)
                  break;
              }
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
            if (v3 >= *((_QWORD *)v5 + 2))
              goto LABEL_80;
            *(_QWORD *)&v5[8 * v26 + 40 + v23] = v29;
            v71 = v5;
            --v26;
            if (!(v24 + v26))
            {
              v3 = 0;
              goto LABEL_73;
            }
          }
          if (!v26)
            goto LABEL_31;
          v3 = v24 + v26;
LABEL_73:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
          if (v3 >= *((_QWORD *)v5 + 2))
            goto LABEL_95;
          *(_QWORD *)&v5[8 * v3 + 32] = v25;
          v71 = v5;
LABEL_31:
          ++v24;
          v10 = *((_QWORD *)v5 + 2);
          v23 += 8;
          if (v24 == v10)
            goto LABEL_12;
        }
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
    }
    else
    {
      slowPath #1 (_:) in JindoTripleVStack.Implementation.prioritize(resetCache:)(&v71, v6);
    }
LABEL_12:
    v2 = v71;
    v3 = *((_QWORD *)v71 + 2);
    if (!v3)
      goto LABEL_96;
    v11 = *((_QWORD *)v71 + 4);
    if ((v11 & 0x8000000000000000) != 0)
      goto LABEL_97;
    v5 = *(char **)(v6 + 360);
    if (v11 < *((_QWORD *)v5 + 2))
      break;
LABEL_98:
    __break(1u);
LABEL_99:
    v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  v12 = *(double *)&v5[256 * v11 + 32];
  swift_bridgeObjectRetain();
  do
  {
    if ((int64_t)v3 > *((_QWORD *)v2 + 2))
      goto LABEL_81;
    v14 = *(_QWORD *)&v2[8 * v3 + 24];
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_82;
    if (v14 >= *((_QWORD *)v5 + 2))
      goto LABEL_83;
    v15 = &v5[256 * v14];
    v17 = *((double *)v15 + 4);
    v16 = v15 + 32;
    if (v17 == v12)
      break;
    if ((v16[16] & 1) != 0)
    {
      ProposedViewSize.init(_:in:by:)();
      v18 = *(_QWORD *)(v6 + 104);
      v19 = *(_BYTE *)(v6 + 112);
      v20 = *(_BYTE *)(v6 + 113);
      LODWORD(v66) = *(_DWORD *)(v6 + 96);
      *((_QWORD *)&v66 + 1) = v18;
      v67 = v19;
      v68 = v20;
      LayoutSubviews.subscript.getter();
      v66 = v69;
      v67 = v70;
      LayoutSubview.lengthThatFits(_:in:)();
      v22 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
      v6 = v64;
      if (v14 >= *((_QWORD *)v5 + 2))
        goto LABEL_92;
      v13 = &v5[256 * v14];
      *((_QWORD *)v13 + 5) = v22;
      v13[48] = 0;
      *(_QWORD *)(v64 + 360) = v5;
    }
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + 368) = v2;
  return result;
}

Swift::Int slowPath #1 (_:) in JindoTripleVStack.Implementation.prioritize(resetCache:)(char **a1, uint64_t a2)
{
  return specialized MutableCollection<>.sort(by:)(a1, a2);
}

uint64_t JindoTripleVStack.Implementation.spacing(_:axis:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v3 = *(_QWORD *)(v2 + 160);
  v4 = *(_QWORD *)(v2 + 168);
  v5 = v3;
  v6 = v4;
  if (a1)
  {
    if (a1 == 1)
      v5 = *(_QWORD *)(v2 + 224);
    else
      v5 = *(_QWORD *)(v2 + 288);
    if (a1 == 1)
      v6 = *(_QWORD *)(v2 + 232);
    else
      v6 = *(_QWORD *)(v2 + 296);
  }
  v22 = *(_QWORD *)(v2 + 224);
  v23 = *(_QWORD *)(v2 + 232);
  v19 = *(_QWORD *)(v2 + 288);
  v20 = *(_QWORD *)(v2 + 296);
  v8 = *(_BYTE *)(v2 + 113);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  v9 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9 < v6)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (!v6)
  {
    result = static Spacing.zero.getter();
    v17 = v24;
    v18 = a2;
LABEL_38:
    *(_QWORD *)v18 = v17;
    *(_BYTE *)(v18 + 8) = v8;
    return result;
  }
  v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v11 = v3;
  v12 = v4;
  if (a1)
  {
    if (a1 == 1)
      v11 = v22;
    else
      v11 = v19;
    if (a1 == 1)
      v12 = v23;
    else
      v12 = v20;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v12 & 0x8000000000000000) != 0)
    goto LABEL_41;
  if (*(_QWORD *)(v11 + 16) < v12)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  swift_bridgeObjectRelease();
  if (!v12)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_48;
  }
  swift_bridgeObjectRelease();
  v13 = v3;
  v14 = v4;
  if (a1)
  {
    v13 = v22;
    v14 = v23;
    if (a1 != 1)
    {
      v13 = v19;
      v14 = v20;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v14 & 0x8000000000000000) != 0)
    goto LABEL_43;
  if (*(_QWORD *)(v13 + 16) < v14)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
  if (v14)
  {
    swift_bridgeObjectRelease();
    if (a1)
    {
      v3 = v22;
      v4 = v23;
      if (a1 != 1)
      {
        v3 = v19;
        v4 = v20;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (*(_QWORD *)(v3 + 16) >= v4)
      {
        swift_bridgeObjectRelease();
        if (v4)
        {
          v15 = 0;
          do
          {
            ++v15;
            AbsoluteEdge.Set.init(_:layoutDirection:)();
            LayoutSubviews.subscript.getter();
            LayoutSubview.spacing.getter();
            Spacing.incorporate(_:of:)();
            swift_bridgeObjectRelease();
          }
          while (v4 != v15);
          result = swift_bridgeObjectRelease();
          v17 = v10;
          v18 = a2;
        }
        else
        {
          result = swift_bridgeObjectRelease();
          v18 = a2;
          v17 = v10;
        }
        goto LABEL_38;
      }
      goto LABEL_46;
    }
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_48:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t JindoTripleVStack.Implementation.computeMinWidth(of:in:)(char a1, uint64_t a2, char a3, double a4)
{
  const void *v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  char v20;
  _BYTE __dst[376];
  _QWORD v22[47];
  __int16 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  memcpy(__dst, v4, sizeof(__dst));
  memcpy(v22, v4, 0x162uLL);
  v32 = *(_OWORD *)&v22[36];
  v33 = *(_OWORD *)&v22[38];
  v34 = *(_OWORD *)&v22[40];
  v35 = *(_OWORD *)&v22[42];
  v28 = *(_OWORD *)&v22[28];
  v29 = *(_OWORD *)&v22[30];
  v30 = *(_OWORD *)&v22[32];
  v31 = *(_OWORD *)&v22[34];
  v24 = *(_OWORD *)&v22[20];
  v25 = *(_OWORD *)&v22[22];
  v26 = *(_OWORD *)&v22[24];
  v27 = *(_OWORD *)&v22[26];
  if (a1)
  {
    if (a1 == 1)
    {
      v36 = v28;
      v37 = v29;
      v8 = v30;
      v9 = v31;
    }
    else
    {
      v36 = v32;
      v37 = v33;
      v8 = v34;
      v9 = v35;
    }
  }
  else
  {
    v36 = *(_OWORD *)&v22[20];
    v37 = *(_OWORD *)&v22[22];
    v8 = *(_OWORD *)&v22[24];
    v9 = *(_OWORD *)&v22[26];
  }
  v38 = v8;
  v39 = v9;
  v10 = v36;
  result = outlined retain of JindoTripleVStack.StackHeader((uint64_t)&v36);
  if ((*((_QWORD *)&v10 + 1) & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (*(_QWORD *)(v10 + 16) < *((_QWORD *)&v10 + 1))
  {
LABEL_19:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v12 = swift_allocObject();
  memcpy((void *)(v12 + 16), __dst, 0x178uLL);
  v13 = swift_allocObject();
  memcpy((void *)(v13 + 16), __dst, 0x178uLL);
  *(double *)(v13 + 392) = a4;
  *(_QWORD *)(v13 + 400) = a2;
  *(_BYTE *)(v13 + 408) = a3 & 1;
  if (*((_QWORD *)&v10 + 1))
  {
    *(_OWORD *)&v22[45] = *(_OWORD *)&v22[12];
    v23 = v22[14];
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    swift_bridgeObjectRetain();
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    swift_retain();
    swift_retain();
    LayoutSubviews.subscript.getter();
    type metadata accessor for _LayoutTrait<PositionKey>(0, &lazy cache variable for type metadata for _LayoutTrait<VerticalPlacementKey>);
    lazy protocol witness table accessor for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>();
    LayoutProxy.subscript.getter();
    if (v20 != 1)
    {
      LayoutSubviews.subscript.getter();
      LayoutSubview.sizeThatFits(_:)();
      v15 = v14;
      v16 = *((_QWORD *)&v10 + 1) - 1;
      if (*((_QWORD *)&v10 + 1) != 1)
      {
        v17 = v10 + 40;
        do
        {
          LayoutSubviews.subscript.getter();
          LayoutProxy.subscript.getter();
          LayoutSubviews.subscript.getter();
          LayoutSubview.sizeThatFits(_:)();
          if (v15 < v18)
            v15 = v18;
          v17 += 8;
          --v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    swift_bridgeObjectRetain();
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    swift_retain();
    swift_retain();
  }
  swift_release();
  swift_release_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  swift_release();
  return outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
}

uint64_t JindoTripleVStack.Implementation.prioritizeAndSizeChildren(in:resetCache:)(uint64_t a1, char a2, uint64_t a3, double a4)
{
  uint64_t v4;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  __int128 v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;

  JindoTripleVStack.Implementation.prioritize(resetCache:)(a3);
  v8 = *(double *)(v4 + 176);
  v9 = *(double *)(v4 + 184);
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 160) + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>, (uint64_t)&type metadata for JindoTripleVStack.MajorAxisGroup.Group, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  v12 = inited;
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  v13 = *(double *)&a1 - v8 - v9;
  if ((a2 & 1) != 0)
    v13 = *(double *)&a1;
  *(_QWORD *)(inited + 32) = v10;
  *(double *)(inited + 40) = v13;
  *(_BYTE *)(inited + 48) = a2 & 1;
  v14 = *(double *)(v4 + 240);
  v15 = *(double *)(v4 + 248);
  v16 = *(_QWORD *)(*(_QWORD *)(v4 + 224) + 16);
  v17 = swift_initStackObject();
  v18 = v17;
  v19 = a2 & 1;
  *(_OWORD *)(v17 + 16) = xmmword_187BF9830;
  v20 = *(double *)&a1 - v14 - v15;
  if ((_DWORD)v19)
    v20 = *(double *)&a1;
  *(_QWORD *)(v17 + 32) = v16;
  *(double *)(v17 + 40) = v20;
  *(_BYTE *)(v17 + 48) = v19;
  v21 = *(double *)(v4 + 304);
  v22 = *(double *)(v4 + 312);
  v23 = *(_QWORD *)(*(_QWORD *)(v4 + 288) + 16);
  if ((_DWORD)v19)
    v24 = *(double *)&a1;
  else
    v24 = *(double *)&a1 - v21 - v22;
  v25 = swift_initStackObject();
  *(_OWORD *)(v25 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v25 + 32) = v23;
  *(double *)(v25 + 40) = v24;
  *(_BYTE *)(v25 + 48) = v19;
  *(_QWORD *)&v27 = v10;
  *((double *)&v27 + 1) = v8;
  v28 = v9;
  v29 = v12;
  v30 = v16;
  v31 = v14;
  v32 = v15;
  v33 = v18;
  v34 = v23;
  v35 = v21;
  v36 = v22;
  v37 = v25;
  JindoTripleVStack.Implementation.resize(in:groups:)(a4, a1, v19, &v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t JindoTripleVStack.Implementation.equalizeHeightOfLeadingAndTrailing(in:)(uint64_t a1, char a2, double a3)
{
  uint64_t v3;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  double v12;
  int v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;

  v7 = *(double *)(v3 + 176);
  v8 = *(double *)(v3 + 184);
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 160) + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>, (uint64_t)&type metadata for JindoTripleVStack.MajorAxisGroup.Group, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  v11 = inited;
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  v12 = *(double *)&a1 - v7 - v8;
  v13 = a2 & 1;
  if (v13)
    v12 = *(double *)&a1;
  *(_QWORD *)(inited + 32) = v9;
  *(double *)(inited + 40) = v12;
  *(_BYTE *)(inited + 48) = v13;
  v14 = *(double *)(v3 + 304);
  v15 = *(double *)(v3 + 312);
  v16 = *(_QWORD *)(*(_QWORD *)(v3 + 288) + 16);
  if (v13)
    v17 = *(double *)&a1;
  else
    v17 = *(double *)&a1 - v14 - v15;
  v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v18 + 32) = v16;
  *(double *)(v18 + 40) = v17;
  *(_BYTE *)(v18 + 48) = v13;
  JindoTripleVStack.Implementation.equalizeHeightOfLeadingAndTrailing(in:leading:trailing:)(a1, v13, v9, v11, v16, v18, a3, v7, v8, v14, v15);
  swift_setDeallocating();
  return swift_setDeallocating();
}

uint64_t JindoTripleVStack.Implementation.pushBelowNotchIfNeeded(in:metrics:)(uint64_t a1, char a2, uint64_t a3, double a4)
{
  const void *v4;
  uint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  uint64_t result;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  char v24;
  char v25;
  double v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  double v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  unint64_t v46;
  int v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  _BYTE v53[376];
  _QWORD __dst[48];

  memcpy(__dst, v4, 0x178uLL);
  v9 = __dst[20];
  v10 = __dst[21];
  v11 = *(double *)&__dst[22];
  v12 = *(double *)&__dst[23];
  v49 = __dst[28];
  v13 = *(double *)&__dst[30];
  v14 = *(double *)&__dst[31];
  v15 = __dst[36];
  v16 = __dst[37];
  v17 = *(double *)&__dst[38];
  v18 = *(double *)&__dst[39];
  memcpy(v53, v4, sizeof(v53));
  result = JindoTripleVStack.Implementation.bottomOf(previousChild:in:includeSpacing:)(__dst[29], 1, 0);
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (*(_QWORD *)(v9 + 16) < v10)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = v20;
  v48 = v13;
  v22 = *(double *)(a3 + 32);
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  v23 = specialized Sequence.first(where:)(0, v10, (uint64_t)__dst, 0, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, double, double))closure #1 in closure #1 in JindoTripleVStack.Implementation.indexToPushBelowNotch(_:availableWidth:centerHeight:), v22, v21);
  v25 = v24;
  result = outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  if ((v16 & 0x8000000000000000) != 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (*(_QWORD *)(v15 + 16) < v16)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v26 = *(double *)(a3 + 40);
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  v27 = specialized Sequence.first(where:)(0, v16, (uint64_t)__dst, 2, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, double, double))closure #1 in closure #1 in JindoTripleVStack.Implementation.indexToPushBelowNotch(_:availableWidth:centerHeight:), v26, v21);
  v29 = v28;
  result = outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  if ((v25 & 1) == 0 || (v29 & 1) == 0)
  {
    v46 = v23;
    v30 = *(_QWORD *)(v9 + 16);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>, (uint64_t)&type metadata for JindoTripleVStack.MajorAxisGroup.Group, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v31 = swift_allocObject();
    v47 = a2 & 1;
    v32 = v47 != 0;
    *(_OWORD *)(v31 + 16) = xmmword_187BF9830;
    v33 = *(double *)&a1 - v11 - v12;
    if ((a2 & 1) != 0)
      v33 = *(double *)&a1;
    *(_QWORD *)(v31 + 32) = v30;
    *(double *)(v31 + 40) = v33;
    *(_BYTE *)(v31 + 48) = v32;
    v50 = v30;
    v51 = v11;
    v52 = v31;
    v34 = *(_QWORD *)(v15 + 16);
    if ((a2 & 1) != 0)
      v35 = *(double *)&a1;
    else
      v35 = *(double *)&a1 - v17 - v18;
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_187BF9830;
    *(_QWORD *)(v36 + 32) = v34;
    *(double *)(v36 + 40) = v35;
    *(_BYTE *)(v36 + 48) = v32;
    if ((v25 & 1) == 0)
    {
      memcpy(v53, __dst, sizeof(v53));
      JindoTripleVStack.Implementation.distanceToCenterBottom(from:stack:)(v46, 0);
      v38 = v21 + v37;
      memcpy(v53, __dst, sizeof(v53));
      JindoTripleVStack.Implementation.distanceToPrevious(_:stack:)(v46, 0);
      JindoTripleVStack.MajorAxisGroup.updateWithSplit(at:before:)(v46, v38 - v39);
    }
    if ((v29 & 1) == 0)
    {
      memcpy(v53, __dst, sizeof(v53));
      JindoTripleVStack.Implementation.distanceToCenterBottom(from:stack:)(v27, 2);
      v41 = v21 + v40;
      memcpy(v53, __dst, sizeof(v53));
      JindoTripleVStack.Implementation.distanceToPrevious(_:stack:)(v27, 2);
      JindoTripleVStack.MajorAxisGroup.updateWithSplit(at:before:)(v27, v41 - v42);
    }
    v43 = *(_QWORD *)(v49 + 16);
    v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_187BF9830;
    v45 = *(double *)&a1 - v48 - v14;
    if ((a2 & 1) != 0)
      v45 = *(double *)&a1;
    *(_QWORD *)(v44 + 32) = v43;
    *(double *)(v44 + 40) = v45;
    *(_BYTE *)(v44 + 48) = v47 != 0;
    *(_QWORD *)v53 = v50;
    *(double *)&v53[8] = v51;
    *(double *)&v53[16] = v12;
    *(_QWORD *)&v53[24] = v52;
    *(_QWORD *)&v53[32] = v43;
    *(double *)&v53[40] = v48;
    *(double *)&v53[48] = v14;
    *(_QWORD *)&v53[56] = v44;
    *(_QWORD *)&v53[64] = v34;
    *(double *)&v53[72] = v17;
    *(double *)&v53[80] = v18;
    *(_QWORD *)&v53[88] = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    JindoTripleVStack.Implementation.resize(in:groups:)(a4, a1, a2 & 1, v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    JindoTripleVStack.Implementation.equalizeHeightOfLeadingAndTrailing(in:leading:trailing:)(a1, v47, v50, v52, v34, v36, a4, v51, v12, v17, v18);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t JindoTripleVStack.Implementation.equalizeHeightOfLeadingAndTrailing(in:leading:trailing:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t *v11;
  uint64_t *v12;
  char v13;
  uint64_t *v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  double v28;
  double v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t result;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  __int128 v48;
  double v49;
  double v61;
  double v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  char v106;
  char v107;
  int v108;
  __int16 v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  _BYTE v113[7];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  _BYTE v122[7];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  double v128;
  uint64_t v129;
  char v130;
  _BYTE v131[7];
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  _BYTE v140[7];
  uint64_t v141;
  uint64_t v142;
  char v143;
  char v144;
  int v145;
  __int16 v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  char v155;
  int v156;
  __int16 v157;
  _BYTE v158[7];
  _BYTE v159[7];
  _BYTE v160[7];
  _BYTE v161[7];
  int v162;
  __int16 v163;
  _BYTE v164[7];
  _BYTE v165[7];
  int v166;
  char v167;
  _DWORD v168[3];

  v12 = v11;
  v75 = v11[1];
  v76 = *v11;
  v13 = *((_BYTE *)v11 + 16);
  v67 = v13;
  v73 = v11[4];
  v74 = v11[3];
  v14 = v11 + 33;
  v71 = *((double *)v11 + 6);
  v72 = *((double *)v11 + 5);
  v15 = *((_BYTE *)v11 + 56);
  v66 = v15;
  v16 = *((_BYTE *)v11 + 57);
  v65 = v16;
  v17 = *((_BYTE *)v11 + 58);
  v64 = v17;
  v68 = v11[8];
  v18 = *((_BYTE *)v11 + 72);
  v70 = v18;
  v63 = v11[10];
  v19 = *((_BYTE *)v11 + 88);
  v77 = v19;
  v87 = *((_DWORD *)v11 + 24);
  v20 = *((_BYTE *)v11 + 112);
  v80 = v20;
  v21 = *((_BYTE *)v11 + 113);
  v78 = v21;
  v69 = v11[15];
  v84 = v11[16];
  v85 = v11[13];
  v22 = *((_BYTE *)v11 + 136);
  v88 = v11[18];
  v86 = v11[19];
  v23 = v11[21];
  v24 = v11[22];
  v25 = v11[23];
  v82 = v11[24];
  v83 = v11[20];
  v26 = *((_BYTE *)v11 + 200);
  v27 = v11[27];
  v93 = v11[28];
  v89 = v11[29];
  v90 = v11[26];
  v28 = *((double *)v11 + 30);
  v29 = *((double *)v11 + 31);
  v30 = *((_BYTE *)v11 + 264);
  v31 = v12[35];
  v32 = v12[38];
  v33 = v12[39];
  v34 = *((_BYTE *)v14 + 64);
  v91 = v12[43];
  v151 = v26;
  v81 = v26;
  v150 = v30;
  v149 = v34;
  v92 = *((_BYTE *)v14 + 89);
  v155 = v18;
  v154 = v19;
  v153 = v20;
  v152 = v22;
  v79 = v22;
  v94 = v76;
  *(_QWORD *)&v95 = v75;
  BYTE8(v95) = v13;
  v96 = v74;
  v97 = v73;
  v98 = v72;
  v99 = v71;
  LOBYTE(v100) = v15;
  BYTE1(v100) = v16;
  BYTE2(v100) = v17;
  v101 = v68;
  LOBYTE(v102) = v18;
  *((_QWORD *)&v102 + 1) = v63;
  LOBYTE(v103) = v19;
  v104 = v87;
  v105 = v85;
  v106 = v20;
  v107 = v21;
  v110 = v69;
  v111 = v84;
  v112 = v22;
  v114 = v88;
  v115 = v86;
  v116 = v83;
  v117 = v23;
  v118 = v24;
  v119 = v25;
  v120 = v82;
  v121 = v26;
  v123 = v90;
  v124 = v27;
  v125 = v93;
  v126 = v89;
  v127 = v28;
  v128 = v29;
  v129 = v12[32];
  v130 = v30;
  v132 = v12[34];
  v133 = v31;
  v35 = v12[37];
  v134 = v12[36];
  v135 = v35;
  v136 = v32;
  v137 = v33;
  v138 = v12[40];
  v139 = v34;
  v141 = v12[42];
  v142 = v91;
  v143 = *((_BYTE *)v12 + 352);
  v144 = v92;
  v37 = v12[45];
  v36 = v12[46];
  JindoTripleVStack.Implementation.bottomOf(previousChild:in:includeSpacing:)(v23, 0, 1);
  v61 = v38;
  *(_DWORD *)((char *)&v100 + 3) = v166;
  HIBYTE(v100) = v167;
  DWORD1(v102) = *(_DWORD *)&v165[3];
  *(_DWORD *)((char *)&v102 + 1) = *(_DWORD *)v165;
  HIDWORD(v103) = *(_DWORD *)&v164[3];
  *(_DWORD *)((char *)&v103 + 1) = *(_DWORD *)v164;
  v109 = v163;
  v108 = v162;
  *(_DWORD *)&v113[3] = *(_DWORD *)&v161[3];
  *(_DWORD *)v113 = *(_DWORD *)v161;
  *(_DWORD *)&v122[3] = *(_DWORD *)&v160[3];
  *(_DWORD *)v122 = *(_DWORD *)v160;
  *(_DWORD *)v131 = *(_DWORD *)v159;
  *(_DWORD *)&v131[3] = *(_DWORD *)&v159[3];
  *(_DWORD *)v140 = *(_DWORD *)v158;
  *(_DWORD *)&v140[3] = *(_DWORD *)&v158[3];
  v145 = v156;
  v146 = v157;
  v94 = v76;
  *(_QWORD *)&v95 = v75;
  BYTE8(v95) = v67;
  v96 = v74;
  v97 = v73;
  v98 = v72;
  v99 = v71;
  LOBYTE(v100) = v66;
  BYTE1(v100) = v65;
  BYTE2(v100) = v64;
  v101 = v68;
  LOBYTE(v102) = v70;
  *((_QWORD *)&v102 + 1) = v63;
  LOBYTE(v103) = v77;
  v104 = v87;
  v105 = v85;
  v106 = v80;
  v107 = v78;
  v110 = v69;
  v111 = v84;
  v112 = v79;
  v114 = v88;
  v115 = v86;
  v116 = v83;
  v117 = v23;
  v118 = v24;
  v119 = v25;
  v120 = v82;
  v121 = v81;
  v123 = v90;
  v124 = v27;
  v125 = v93;
  v126 = v89;
  v127 = v28;
  v128 = v29;
  v130 = v30;
  v133 = v31;
  v135 = v35;
  v136 = v32;
  v137 = v33;
  v139 = v34;
  v142 = v91;
  v144 = v92;
  v147 = v37;
  v148 = v36;
  result = JindoTripleVStack.Implementation.bottomOf(previousChild:in:includeSpacing:)(v35, 2, 1);
  if (v61 != v40)
  {
    *(_DWORD *)((char *)&v95 + 9) = v168[0];
    HIDWORD(v95) = *(_DWORD *)((char *)v168 + 3);
    *(_DWORD *)((char *)&v100 + 3) = v166;
    HIBYTE(v100) = v167;
    *(_DWORD *)((char *)&v102 + 1) = *(_DWORD *)v165;
    DWORD1(v102) = *(_DWORD *)&v165[3];
    *(_DWORD *)((char *)&v103 + 1) = *(_DWORD *)v164;
    HIDWORD(v103) = *(_DWORD *)&v164[3];
    v109 = v163;
    v108 = v162;
    *(_DWORD *)&v113[3] = *(_DWORD *)&v161[3];
    *(_DWORD *)v113 = *(_DWORD *)v161;
    *(_DWORD *)&v122[3] = *(_DWORD *)&v160[3];
    *(_DWORD *)v122 = *(_DWORD *)v160;
    *(_DWORD *)v131 = *(_DWORD *)v159;
    *(_DWORD *)&v131[3] = *(_DWORD *)&v159[3];
    *(_DWORD *)v140 = *(_DWORD *)v158;
    *(_DWORD *)&v140[3] = *(_DWORD *)&v158[3];
    v145 = v156;
    v146 = v157;
    if (v61 > v40)
      v40 = v61;
    v62 = v40;
    JindoTripleVStack.Implementation.distanceToPrevious(_:stack:)(v23, 0);
    v49 = v41;
    LOBYTE(v100) = v66;
    BYTE1(v100) = v65;
    BYTE2(v100) = v64;
    *(_DWORD *)((char *)&v100 + 3) = v166;
    HIBYTE(v100) = v167;
    v97 = v73;
    v98 = v72;
    v99 = v71;
    v101 = v68;
    LOBYTE(v102) = v70;
    *(_DWORD *)((char *)&v102 + 1) = *(_DWORD *)v165;
    DWORD1(v102) = *(_DWORD *)&v165[3];
    *((_QWORD *)&v102 + 1) = v63;
    LOBYTE(v103) = v77;
    *(_DWORD *)((char *)&v103 + 1) = *(_DWORD *)v164;
    HIDWORD(v103) = *(_DWORD *)&v164[3];
    v104 = v87;
    v105 = v85;
    v106 = v80;
    v107 = v78;
    v109 = v163;
    v108 = v162;
    v110 = v69;
    v111 = v84;
    v112 = v79;
    *(_DWORD *)&v113[3] = *(_DWORD *)&v161[3];
    *(_DWORD *)v113 = *(_DWORD *)v161;
    v114 = v88;
    v115 = v86;
    v116 = v83;
    v117 = v23;
    v118 = v24;
    v119 = v25;
    v120 = v82;
    v121 = v81;
    *(_DWORD *)&v122[3] = *(_DWORD *)&v160[3];
    *(_DWORD *)v122 = *(_DWORD *)v160;
    v123 = v90;
    v124 = v27;
    v125 = v93;
    v126 = v89;
    v127 = v28;
    v128 = v29;
    v130 = v30;
    *(_DWORD *)v131 = *(_DWORD *)v159;
    *(_DWORD *)&v131[3] = *(_DWORD *)&v159[3];
    v133 = v31;
    v135 = v35;
    v136 = v32;
    v137 = v33;
    v139 = v34;
    *(_DWORD *)v140 = *(_DWORD *)v158;
    *(_DWORD *)&v140[3] = *(_DWORD *)&v158[3];
    v142 = v91;
    v144 = v92;
    v145 = v156;
    v146 = v157;
    v147 = v37;
    v148 = v36;
    JindoTripleVStack.Implementation.distanceToPrevious(_:stack:)(v35, 2);
    v43 = v42;
    v94 = a3;
    *(double *)&v95 = a8;
    *((double *)&v95 + 1) = a9;
    v96 = a4;
    swift_bridgeObjectRetain();
    JindoTripleVStack.MajorAxisGroup.updateWithSplit(at:before:)(v23, v62 - v49);
    v44 = *(_QWORD *)(v93 + 16);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>, (uint64_t)&type metadata for JindoTripleVStack.MajorAxisGroup.Group, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v45 = swift_allocObject();
    v46 = v45;
    *(_OWORD *)(v45 + 16) = xmmword_187BF9830;
    v47 = *(double *)&a1 - v28 - v29;
    if ((a2 & 1) != 0)
      v47 = *(double *)&a1;
    *(_QWORD *)(v45 + 32) = v44;
    *(double *)(v45 + 40) = v47;
    *(_BYTE *)(v45 + 48) = a2 & 1;
    *(double *)&v95 = a10;
    *((double *)&v95 + 1) = a11;
    swift_bridgeObjectRetain();
    JindoTripleVStack.MajorAxisGroup.updateWithSplit(at:before:)(v35, v62 - v43);
    v48 = v95;
    v94 = a3;
    *(double *)&v95 = a8;
    *((double *)&v95 + 1) = a9;
    v96 = a4;
    v97 = v44;
    v98 = v28;
    v99 = v29;
    v100 = v46;
    v101 = a5;
    v102 = v48;
    v103 = a6;
    JindoTripleVStack.Implementation.resize(in:groups:)(a7, a1, a2 & 1, &v94);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t JindoTripleVStack.Implementation.bottomOf(previousChild:in:includeSpacing:)(unint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;

  v6 = v3[20];
  v7 = v3[28];
  v8 = v3[36];
  v9 = v6;
  if (a2)
  {
    if (a2 == 1)
      v9 = v3[28];
    else
      v9 = v3[36];
  }
  v20 = v3[45];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v10 || !a1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v11 = v6;
  if (a2)
  {
    if (a2 == 1)
      v11 = v7;
    else
      v11 = v8;
  }
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v13 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
    goto LABEL_40;
  }
  if ((v13 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v13 >= *(_QWORD *)(v11 + 16))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v14 = *(_QWORD *)(v11 + 8 * v13 + 32);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v14 >= *(_QWORD *)(v20 + 16))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  ViewOrigin.y.getter();
  result = ViewDimensions.height.getter();
  if ((a3 & 1) != 0)
  {
    v15 = v6;
    if (a2)
    {
      if (a2 == 1)
        v15 = v7;
      else
        v15 = v8;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = *(_QWORD *)(v15 + 16);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v16 > (uint64_t)a1)
    {
      if (a2)
      {
        if (a2 == 1)
          v6 = v7;
        else
          v6 = v8;
      }
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
      if ((a1 & 0x8000000000000000) == 0)
      {
        if (*(_QWORD *)(v6 + 16) > a1)
        {
          v17 = *(_QWORD *)(v6 + 8 * a1 + 32);
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v17 & 0x8000000000000000) == 0)
          {
            if (v17 < *(_QWORD *)(v20 + 16))
            {
              v18 = v20 + 32 + (v17 << 8);
              if (a2)
              {
                if (a2 == 1)
                  v19 = (_BYTE *)(v18 + 64);
                else
                  v19 = (_BYTE *)(v18 + 80);
              }
              else
              {
                v19 = (_BYTE *)(v18 + 48);
              }
              if ((*v19 & 1) == 0)
                return result;
LABEL_48:
              __break(1u);
              return result;
            }
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
  }
  return result;
}

uint64_t JindoTripleVStack.Implementation.distanceToPrevious(_:stack:)(unint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = v2[20];
  v5 = v2[28];
  v6 = v2[36];
  v7 = v4;
  if (a2)
  {
    if (a2 == 1)
      v7 = v2[28];
    else
      v7 = v2[36];
  }
  v14 = v2[45];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v8 > (uint64_t)a1)
  {
    if (a2)
    {
      if (a2 == 1)
        v4 = v5;
      else
        v4 = v6;
    }
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if ((a1 & 0x8000000000000000) == 0)
    {
      if (*(_QWORD *)(v4 + 16) <= a1)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      v10 = *(_QWORD *)(v4 + 8 * a1 + 32);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v10 & 0x8000000000000000) != 0)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      if (v10 >= *(_QWORD *)(v14 + 16))
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v11 = v14 + (v10 << 8);
      if (a2)
      {
        v12 = v11 + 32;
        if (a2 == 1)
          v13 = (_BYTE *)(v12 + 64);
        else
          v13 = (_BYTE *)(v12 + 80);
        if ((*v13 & 1) == 0)
          return result;
      }
      else if ((*(_BYTE *)(v11 + 80) & 1) == 0)
      {
        return result;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
  return result;
}

void JindoTripleVStack.Implementation.resize(in:groups:)(double a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  double v31;
  char *v32;
  double v33;
  double v34;
  char *v35;
  double v36;
  double v37;
  char *v38;
  double v39;
  uint64_t v40;
  char *v41;
  double v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  double v50;
  char *v51;
  double v52;
  double v53;
  char *v54;
  double v55;
  double v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  char *v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  double *v110;
  double v111;
  double v112;
  uint64_t v113;
  char v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  char *v120;
  uint64_t v121;
  __int128 v122;
  double v123;
  double v124;
  double v125;
  unint64_t v126;
  char v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  double v134;
  BOOL v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  double v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  char v163;
  __int16 v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  double v179;
  double v180;
  double v181;
  double v182;
  char *v183;
  int v184;
  double v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  double *v189;
  uint64_t v190;
  unint64_t v191;
  double v192;
  unint64_t v193;
  double v194;
  double v195;
  uint64_t v196;
  double v197;
  uint64_t v198;
  unint64_t v199;
  double v200;
  unint64_t v201;
  uint64_t v202;
  _BYTE *v203;
  double *v204;
  double v205;
  double v206;
  unint64_t v207;
  char *v208;
  double v209;
  double v210;
  double v211;
  double v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  double v218;
  double v219;
  double v220;
  char *v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  char v232;
  char v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  double v240;
  BOOL v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _BYTE *v246;
  double *v247;
  double v248;
  unint64_t v249;
  char *v250;
  double v251;
  double v252;
  double v253;
  double v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  double v261;
  uint64_t v262;
  char *v263;
  int64_t v264;
  int64_t v265;
  char *v266;
  __int128 v267;
  __int128 v268;
  char *v269;
  uint64_t v270;
  double v271;
  uint64_t v272;
  double *v273;
  double v274;
  double v275;
  uint64_t v276;
  __int128 v277;
  double v278;
  uint64_t v279;
  uint64_t v280;
  double v281;
  unint64_t v282;
  char v283;
  unint64_t v284;
  char v285;
  unint64_t v286;
  double v287;
  uint64_t v288;
  uint64_t v289;
  char v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  double v306;
  double v307;
  uint64_t v308;
  uint64_t v309;
  char v310;
  char v311;
  char v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  char v316;
  char v317;
  char v318;
  uint64_t v319;
  __int128 *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  char v335;
  uint64_t v336;
  uint64_t v337;
  char v338;
  unint64_t v339;
  uint64_t v340;
  char v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  __int128 v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  char *v357;
  char *v358;
  uint64_t v359;
  __int128 v360;
  char v361;
  __int128 v362;
  char v363;
  _OWORD __dst[24];
  _OWORD __src[24];
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  char *v387;
  __int128 v388;
  _OWORD v389[3];

  v5 = v4;
  *(_QWORD *)&__dst[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 9, 0, MEMORY[0x1E0DEE9D8]);
  v8 = a4[3];
  __src[2] = a4[2];
  __src[3] = v8;
  v9 = a4[5];
  __src[4] = a4[4];
  __src[5] = v9;
  v10 = a4[1];
  __src[0] = *a4;
  __src[1] = v10;
  closure #1 in JindoTripleVStack.Implementation.prepareChildren(with:)(0, (uint64_t)__src, v4, (char *)__dst);
  closure #1 in JindoTripleVStack.Implementation.prepareChildren(with:)(1, (uint64_t)&__src[2], v4, (char *)__dst);
  closure #1 in JindoTripleVStack.Implementation.prepareChildren(with:)(2, (uint64_t)&__src[4], v4, (char *)__dst);
  v11 = *(char **)&__dst[0];
  v387 = *(char **)&__dst[0];
  v12 = *(_QWORD *)(v4 + 368);
  v322 = v4;
  v354 = v12;
  if (!*(_QWORD *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    goto LABEL_201;
  }
  v350 = (_QWORD *)(v12 + 32);
  v320 = (__int128 *)(v4 + 114);
  v326 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRetain();
  v13 = v326;
  v14 = 0;
  while (1)
  {
    if (v14 >= v13)
      goto LABEL_417;
    v323 = v14;
    v15 = v350[v14];
    if ((v15 & 0x8000000000000000) != 0)
    {
LABEL_418:
      __break(1u);
LABEL_419:
      __break(1u);
LABEL_420:
      __break(1u);
LABEL_421:
      __break(1u);
LABEL_422:
      __break(1u);
LABEL_423:
      __break(1u);
LABEL_424:
      __break(1u);
LABEL_425:
      __break(1u);
LABEL_426:
      __break(1u);
LABEL_427:
      __break(1u);
LABEL_428:
      __break(1u);
LABEL_429:
      __break(1u);
LABEL_430:
      __break(1u);
LABEL_431:
      __break(1u);
LABEL_432:
      __break(1u);
LABEL_433:
      __break(1u);
      goto LABEL_434;
    }
    v16 = *(_QWORD *)(v5 + 360);
    v17 = *(_QWORD *)(v16 + 16);
    if (v15 >= v17)
      goto LABEL_419;
    v18 = v16 + 32;
    v19 = v323;
    do
    {
      v20 = *(_QWORD *)(v354 + 8 * v19 + 32);
      if (v20 >= v17)
      {
LABEL_356:
        __break(1u);
LABEL_357:
        __break(1u);
LABEL_358:
        __break(1u);
LABEL_359:
        __break(1u);
LABEL_360:
        __break(1u);
LABEL_361:
        __break(1u);
LABEL_362:
        __break(1u);
LABEL_363:
        __break(1u);
LABEL_364:
        __break(1u);
LABEL_365:
        __break(1u);
LABEL_366:
        __break(1u);
LABEL_367:
        __break(1u);
LABEL_368:
        __break(1u);
        goto LABEL_369;
      }
      if (*(double *)(v18 + (v20 << 8)) != *(double *)(v16 + 32 + (v15 << 8)))
        goto LABEL_12;
      v21 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_357;
      ++v19;
    }
    while (v21 != v13);
    v19 = v13;
LABEL_12:
    if (v19 < v323)
      goto LABEL_420;
    if (v13 < v19)
      goto LABEL_421;
    if (v19 < 0)
      goto LABEL_422;
    v355 = *(_QWORD *)(v5 + 360);
    v347 = v16 + 32;
    if (!*(_QWORD *)(v354 + 16) || v15 != *v350)
    {
      swift_unknownObjectRetain();
      if (v323 == v19)
        goto LABEL_96;
      swift_unknownObjectRetain();
      v40 = v323;
      while (v40 < v19)
      {
        v43 = v350[v40];
        if ((v43 & 0x8000000000000000) != 0)
          goto LABEL_370;
        if (v43 >= *(_QWORD *)(v16 + 16))
          goto LABEL_371;
        v44 = v18 + (v43 << 8);
        v45 = *(_QWORD *)(v44 + 104);
        v46 = *(_BYTE *)(v44 + 112);
        v47 = *(_QWORD *)(v44 + 120);
        v48 = *(_BYTE *)(v44 + 128);
        if ((*(_BYTE *)(v44 + 96) & 1) == 0)
        {
          if ((*(_BYTE *)(v44 + 16) & 1) != 0)
            goto LABEL_445;
          v49 = *(_QWORD *)(v44 + 88);
          v50 = *(double *)(v44 + 8);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            if ((v49 & 0x8000000000000000) != 0)
              goto LABEL_390;
          }
          else
          {
            v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if ((v49 & 0x8000000000000000) != 0)
              goto LABEL_390;
          }
          if (v49 >= *((_QWORD *)v11 + 2))
            goto LABEL_391;
          v51 = &v11[80 * v49];
          v52 = *((double *)v51 + 8);
          if (!v51[72])
            v52 = v50 + *((double *)v51 + 8);
          *((double *)v51 + 8) = v52;
          v387 = v11;
        }
        if ((v46 & 1) == 0)
        {
          if (v43 >= *(_QWORD *)(v355 + 16))
            goto LABEL_392;
          if ((*(_BYTE *)(v44 + 16) & 1) != 0)
            goto LABEL_446;
          v53 = *(double *)(v44 + 8);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            if ((v45 & 0x8000000000000000) != 0)
              goto LABEL_393;
          }
          else
          {
            v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if ((v45 & 0x8000000000000000) != 0)
              goto LABEL_393;
          }
          if (v45 >= *((_QWORD *)v11 + 2))
            goto LABEL_395;
          v54 = &v11[80 * v45];
          v55 = *((double *)v54 + 8);
          if (!v54[72])
            v55 = v53 + *((double *)v54 + 8);
          *((double *)v54 + 8) = v55;
          v387 = v11;
        }
        v16 = v355;
        v18 = v347;
        if ((v48 & 1) == 0)
        {
          if (v43 >= *(_QWORD *)(v355 + 16))
            goto LABEL_394;
          if ((*(_BYTE *)(v44 + 16) & 1) != 0)
            goto LABEL_447;
          v56 = *(double *)(v44 + 8);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            if ((v47 & 0x8000000000000000) != 0)
              goto LABEL_396;
          }
          else
          {
            v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if ((v47 & 0x8000000000000000) != 0)
              goto LABEL_396;
          }
          if (v47 >= *((_QWORD *)v11 + 2))
            goto LABEL_397;
          v41 = &v11[80 * v47];
          v42 = *((double *)v41 + 8);
          if (!v41[72])
            v42 = v56 + *((double *)v41 + 8);
          *((double *)v41 + 8) = v42;
          v387 = v11;
        }
        if (v19 == ++v40)
          goto LABEL_95;
      }
LABEL_369:
      __break(1u);
LABEL_370:
      __break(1u);
LABEL_371:
      __break(1u);
LABEL_372:
      __break(1u);
LABEL_373:
      __break(1u);
LABEL_374:
      __break(1u);
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
LABEL_378:
      __break(1u);
LABEL_379:
      __break(1u);
LABEL_380:
      __break(1u);
LABEL_381:
      __break(1u);
LABEL_382:
      __break(1u);
LABEL_383:
      __break(1u);
LABEL_384:
      __break(1u);
LABEL_385:
      __break(1u);
LABEL_386:
      __break(1u);
LABEL_387:
      __break(1u);
LABEL_388:
      __break(1u);
LABEL_389:
      __break(1u);
LABEL_390:
      __break(1u);
LABEL_391:
      __break(1u);
LABEL_392:
      __break(1u);
LABEL_393:
      __break(1u);
LABEL_394:
      __break(1u);
LABEL_395:
      __break(1u);
LABEL_396:
      __break(1u);
LABEL_397:
      __break(1u);
LABEL_398:
      __break(1u);
LABEL_399:
      __break(1u);
LABEL_400:
      __break(1u);
LABEL_401:
      __break(1u);
LABEL_402:
      __break(1u);
LABEL_403:
      __break(1u);
LABEL_404:
      __break(1u);
LABEL_405:
      __break(1u);
LABEL_406:
      __break(1u);
LABEL_407:
      __break(1u);
LABEL_408:
      __break(1u);
LABEL_409:
      __break(1u);
LABEL_410:
      __break(1u);
LABEL_411:
      __break(1u);
LABEL_412:
      __break(1u);
LABEL_413:
      __break(1u);
LABEL_414:
      __break(1u);
LABEL_415:
      __break(1u);
      goto LABEL_416;
    }
    swift_unknownObjectRetain();
    if (v19 != v326)
    {
      swift_unknownObjectRetain_n();
      v22 = v326;
      v23 = v19;
      do
      {
        if (v23 >= v22)
          goto LABEL_398;
        v24 = *(_QWORD *)(v354 + 8 * v23 + 32);
        if ((v24 & 0x8000000000000000) != 0)
          goto LABEL_399;
        if (v24 >= *(_QWORD *)(v16 + 16))
          goto LABEL_400;
        v25 = v18 + (v24 << 8);
        v26 = *(_QWORD *)(v25 + 104);
        v27 = *(_BYTE *)(v25 + 112);
        v28 = *(_QWORD *)(v25 + 120);
        v29 = *(_BYTE *)(v25 + 128);
        if ((*(_BYTE *)(v25 + 96) & 1) == 0)
        {
          if ((*(_BYTE *)(v25 + 16) & 1) != 0)
            goto LABEL_448;
          v30 = *(_QWORD *)(v25 + 88);
          v31 = *(double *)(v25 + 8);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            if ((v30 & 0x8000000000000000) != 0)
              goto LABEL_401;
          }
          else
          {
            v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if ((v30 & 0x8000000000000000) != 0)
              goto LABEL_401;
          }
          if (v30 >= *((_QWORD *)v11 + 2))
            goto LABEL_402;
          v32 = &v11[80 * v30];
          v33 = *((double *)v32 + 8);
          if (!v32[72])
            v33 = *((double *)v32 + 8) - v31;
          *((double *)v32 + 8) = v33;
          v387 = v11;
          v22 = v326;
        }
        if ((v27 & 1) == 0)
        {
          if (v24 >= *(_QWORD *)(v355 + 16))
            goto LABEL_403;
          if ((*(_BYTE *)(v25 + 16) & 1) != 0)
            goto LABEL_449;
          v34 = *(double *)(v25 + 8);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            if ((v26 & 0x8000000000000000) != 0)
              goto LABEL_404;
          }
          else
          {
            v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if ((v26 & 0x8000000000000000) != 0)
              goto LABEL_404;
          }
          if (v26 >= *((_QWORD *)v11 + 2))
            goto LABEL_406;
          v35 = &v11[80 * v26];
          v36 = *((double *)v35 + 8);
          if (!v35[72])
            v36 = *((double *)v35 + 8) - v34;
          *((double *)v35 + 8) = v36;
          v387 = v11;
          v22 = v326;
        }
        v16 = v355;
        v18 = v347;
        if ((v29 & 1) == 0)
        {
          if (v24 >= *(_QWORD *)(v355 + 16))
            goto LABEL_405;
          if ((*(_BYTE *)(v25 + 16) & 1) != 0)
            goto LABEL_450;
          v37 = *(double *)(v25 + 8);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            if ((v28 & 0x8000000000000000) != 0)
              goto LABEL_407;
          }
          else
          {
            v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if ((v28 & 0x8000000000000000) != 0)
              goto LABEL_407;
          }
          if (v28 >= *((_QWORD *)v11 + 2))
            goto LABEL_408;
          v38 = &v11[80 * v28];
          v39 = *((double *)v38 + 8);
          if (!v38[72])
            v39 = *((double *)v38 + 8) - v37;
          *((double *)v38 + 8) = v39;
          v387 = v11;
          v22 = v326;
        }
        ++v23;
      }
      while (v22 != v23);
      swift_unknownObjectRelease();
LABEL_95:
      swift_unknownObjectRelease();
    }
LABEL_96:
    v57 = *((_QWORD *)v11 + 2);
    if (v57)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if (v57 < 2)
          goto LABEL_99;
LABEL_101:
        v58 = v57 & 0x7FFFFFFFFFFFFFFELL;
        v59 = v11 + 136;
        v60 = v57 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          *(v59 - 10) = 0;
          *v59 = 0;
          v59 += 20;
          v60 -= 2;
        }
        while (v60);
        if (v57 != v58)
          goto LABEL_104;
      }
      else
      {
        v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
        if (v57 >= 2)
          goto LABEL_101;
LABEL_99:
        v58 = 0;
LABEL_104:
        v61 = &v11[80 * v58 + 56];
        v62 = v57 - v58;
        do
        {
          *(_QWORD *)v61 = 0;
          v61 += 80;
          --v62;
        }
        while (v62);
      }
      v387 = v11;
    }
    v5 = v322;
    v63 = v323;
    if (v323 != v19)
      break;
    swift_unknownObjectRelease();
LABEL_196:
    v13 = v326;
    if (v326 < v63)
      goto LABEL_425;
    if (v63 < v323)
      goto LABEL_426;
    v14 = v63;
    if (v63 == v326)
    {
LABEL_201:
      v147 = (char *)(v5 + 264);
      v334 = v5 + 264;
      v336 = *((_QWORD *)v11 + 2);
      if (v336)
      {
        v357 = v11;
        v287 = a1;
        v148 = v5;
        v149 = 0;
        v151 = *(_QWORD *)(v148 + 160);
        v150 = *(_QWORD *)(v148 + 168);
        v152 = *(_QWORD *)(v148 + 192);
        v153 = *(_BYTE *)(v148 + 200);
        v154 = *(_QWORD *)(v148 + 208);
        v155 = *(_QWORD *)(v148 + 216);
        v156 = *(_QWORD *)(v148 + 224);
        v157 = *(_QWORD *)(v148 + 232);
        v158 = *(_QWORD *)(v148 + 256);
        v159 = *v147;
        v160 = *(_QWORD *)(v148 + 272);
        v161 = *(_QWORD *)(v148 + 280);
        v162 = *(_BYTE *)(v148 + 16);
        LOBYTE(v381) = *(_BYTE *)(v148 + 88);
        LOBYTE(v362) = *(_BYTE *)(v148 + 112);
        LOBYTE(v360) = *(_BYTE *)(v148 + 136);
        v163 = *(_BYTE *)(v148 + 56);
        LOBYTE(__src[1]) = v162;
        v164 = *(_WORD *)(v148 + 57);
        BYTE8(__src[3]) = v163;
        v165 = *(_QWORD *)(v148 + 64);
        *(_WORD *)((char *)&__src[3] + 9) = v164;
        LOBYTE(v164) = *(_BYTE *)(v148 + 72);
        *(_QWORD *)&__src[4] = v165;
        v166 = *(_QWORD *)(v148 + 80);
        LOBYTE(v366) = v164;
        BYTE8(__src[4]) = v164;
        v167 = *(_DWORD *)(v148 + 96);
        *(_QWORD *)&__src[5] = v166;
        BYTE8(__src[5]) = v381;
        v168 = *(_QWORD *)(v148 + 104);
        LODWORD(__src[6]) = v167;
        LOBYTE(v167) = *(_BYTE *)(v148 + 113);
        *((_QWORD *)&__src[6] + 1) = v168;
        LOBYTE(__src[7]) = v362;
        v169 = *(_QWORD *)(v148 + 128);
        BYTE1(__src[7]) = v167;
        *(_QWORD *)&__src[8] = v169;
        BYTE8(__src[8]) = v360;
        v170 = *(_QWORD *)(v148 + 288);
        v171 = *(_QWORD *)(v148 + 296);
        *(_QWORD *)&__src[12] = v152;
        v172 = *(_QWORD *)(v148 + 320);
        BYTE8(__src[12]) = v153;
        v173 = v147[64];
        *(_QWORD *)&__src[16] = v158;
        v174 = *(_QWORD *)(v148 + 336);
        v175 = *(_QWORD *)(v148 + 344);
        v176 = *(_QWORD *)(v148 + 120);
        BYTE8(__src[16]) = v159;
        v177 = *(_BYTE *)(v148 + 352);
        *(_QWORD *)&__src[20] = v172;
        LOBYTE(v172) = v147[89];
        BYTE8(__src[20]) = v173;
        v178 = *(_QWORD *)(v148 + 360);
        __src[0] = *(_OWORD *)v148;
        *(_OWORD *)((char *)&__src[1] + 8) = *(_OWORD *)(v148 + 24);
        *(_OWORD *)((char *)&__src[2] + 8) = *(_OWORD *)(v148 + 40);
        *((_QWORD *)&__src[7] + 1) = v176;
        __src[9] = *(_OWORD *)(v148 + 144);
        v351 = v151;
        *(_QWORD *)&__src[10] = v151;
        v339 = v150;
        *((_QWORD *)&__src[10] + 1) = v150;
        __src[11] = *(_OWORD *)(v148 + 176);
        *(_QWORD *)&__src[13] = v154;
        *((_QWORD *)&__src[13] + 1) = v155;
        v344 = v156;
        *(_QWORD *)&__src[14] = v156;
        v328 = v170;
        v331 = v157;
        *((_QWORD *)&__src[14] + 1) = v157;
        __src[15] = *(_OWORD *)(v148 + 240);
        *(_QWORD *)&__src[17] = v160;
        *((_QWORD *)&__src[17] + 1) = v161;
        *(_QWORD *)&__src[18] = v170;
        v324 = v171;
        *((_QWORD *)&__src[18] + 1) = v171;
        __src[19] = *(_OWORD *)(v148 + 304);
        *(_QWORD *)&__src[21] = v174;
        LOBYTE(__src[22]) = v177;
        BYTE1(__src[22]) = v172;
        *((_QWORD *)&__src[21] + 1) = v175;
        v179 = 0.0;
        v180 = 0.0;
        v181 = 0.0;
        v182 = 0.0;
        *((_QWORD *)&__src[22] + 1) = v178;
        *(_QWORD *)&__src[23] = v354;
        while (v149 < *((_QWORD *)v357 + 2))
        {
          v183 = &v357[80 * v149];
          v184 = v183[32];
          v185 = v182;
          if (v183[32])
          {
            v185 = v181;
            if (v184 != 1)
              v185 = v180;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v357 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v357);
          if (v149 >= *((_QWORD *)v357 + 2))
            goto LABEL_410;
          v186 = v357 + 32;
          v187 = (uint64_t)&v357[80 * v149 + 32];
          v190 = *(_QWORD *)(v187 + 8);
          v189 = (double *)(v187 + 8);
          v188 = v190;
          v189[8] = v185;
          v191 = v339;
          if (v184)
          {
            v191 = v331;
            if (v184 != 1)
              v191 = v324;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v188 == v191)
          {
            if (v184)
            {
              if (v184 == 1)
              {
                v192 = v181;
                v193 = v331;
              }
              else
              {
                v192 = v180;
                v193 = v324;
              }
            }
            else
            {
              v192 = v182;
              v193 = v339;
            }
            memcpy(__dst, __src, 0x178uLL);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined retain of JindoTripleVStack.Implementation((uint64_t)__src);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            JindoTripleVStack.Implementation.distanceToPrevious(_:stack:)(v193, v184);
            v195 = v194;
            outlined release of JindoTripleVStack.Implementation((uint64_t)__src);
            if (v179 <= v192 + v195)
              v179 = v192 + v195;
          }
          if (v149 >= *((_QWORD *)v357 + 2))
            goto LABEL_411;
          v196 = v351;
          if (v184)
          {
            v196 = v344;
            if (v184 != 1)
              v196 = v328;
          }
          v197 = *v189;
          v198 = *(_QWORD *)&v186[80 * v149 + 16];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((*(_QWORD *)&v197 & 0x8000000000000000) != 0)
            goto LABEL_412;
          v199 = *(_QWORD *)(v196 + 16);
          if (v199 < *(_QWORD *)&v197 || (uint64_t)v199 < v198)
            goto LABEL_413;
          if (v198 < 0)
            goto LABEL_414;
          outlined retain of JindoTripleVStack.Implementation((uint64_t)__src);
          swift_bridgeObjectRelease();
          v200 = 0.0;
          if (*(_QWORD *)&v197 != v198)
          {
            swift_bridgeObjectRetain();
            while (*(uint64_t *)&v197 < v198)
            {
              v201 = *(_QWORD *)(v196 + 8 * *(_QWORD *)&v197 + 32);
              if ((v201 & 0x8000000000000000) != 0)
                goto LABEL_354;
              if (v201 >= *(_QWORD *)(v178 + 16))
                goto LABEL_355;
              v202 = v178 + 32 + (v201 << 8);
              if (v184)
              {
                v203 = (_BYTE *)(v202 + 64);
                v204 = (double *)(v202 + 56);
                if (v184 != 1)
                {
                  v204 = (double *)(v202 + 72);
                  v203 = (_BYTE *)(v202 + 80);
                }
                if ((*v203 & 1) != 0)
                  goto LABEL_444;
              }
              else
              {
                v204 = (double *)(v202 + 40);
                if ((*(_BYTE *)(v202 + 48) & 1) != 0)
                  goto LABEL_444;
              }
              ++*(_QWORD *)&v197;
              v205 = v200 + *v204;
              __dst[0] = *(_OWORD *)(v202 + 168);
              __dst[1] = *(_OWORD *)(v202 + 184);
              ViewSize.subscript.getter();
              v200 = v205 + v206;
              if (v198 == *(_QWORD *)&v197)
              {
                swift_bridgeObjectRelease();
                goto LABEL_242;
              }
            }
LABEL_353:
            __break(1u);
LABEL_354:
            __break(1u);
LABEL_355:
            __break(1u);
            goto LABEL_356;
          }
LABEL_242:
          swift_bridgeObjectRelease();
          outlined release of JindoTripleVStack.Implementation((uint64_t)__src);
          if (v149 >= *((_QWORD *)v357 + 2))
            goto LABEL_415;
          v207 = v149 + 1;
          v208 = &v186[80 * v149];
          *((double *)v208 + 8) = v200;
          v209 = *((double *)v208 + 6);
          if (v208[56])
            v209 = 0.0;
          if (v209 <= v200)
            v209 = v200;
          v210 = v182 + v209;
          v211 = v181 + v209;
          v212 = v180 + v209;
          if (v184 == 1)
            v212 = v180;
          else
            v211 = v181;
          if (v184)
          {
            v180 = v212;
            v181 = v211;
          }
          else
          {
            v182 = v210;
          }
          ++v149;
          if (v207 == v336)
          {
            v11 = v357;
            v387 = v357;
            v213 = *((_QWORD *)v357 + 2);
            if (!v213)
            {
LABEL_306:
              v5 = v322;
              a1 = v287;
              goto LABEL_307;
            }
            v214 = 0;
            v215 = 0;
            v216 = *(_QWORD *)(v322 + 160);
            v217 = *(_QWORD *)(v322 + 168);
            v302 = *(_QWORD *)(v322 + 184);
            v303 = *(_QWORD *)(v322 + 176);
            v301 = *(_QWORD *)(v322 + 192);
            v300 = *(_BYTE *)(v322 + 200);
            v352 = *(_QWORD *)(v322 + 208);
            v349 = *(_QWORD *)(v322 + 224);
            v298 = *(_QWORD *)(v322 + 240);
            v299 = *(_QWORD *)(v322 + 216);
            v297 = *(_QWORD *)(v322 + 248);
            v296 = *(_QWORD *)(v322 + 256);
            v295 = *(_BYTE *)v334;
            v342 = *(_QWORD *)(v322 + 232);
            v345 = *(_QWORD *)(v322 + 272);
            v332 = *(_QWORD *)(v322 + 296);
            v293 = *(_QWORD *)(v322 + 304);
            v294 = *(_QWORD *)(v322 + 280);
            v292 = *(_QWORD *)(v322 + 312);
            v291 = *(_QWORD *)(v322 + 320);
            v290 = *(_BYTE *)(v334 + 64);
            v218 = 0.0;
            v337 = *(_QWORD *)(v322 + 336);
            v340 = *(_QWORD *)(v322 + 288);
            v219 = 0.0;
            v220 = 0.0;
            v289 = *(_QWORD *)(v322 + 344);
            v306 = v179;
            v288 = *((_QWORD *)v357 + 2);
            v304 = v217;
            v305 = v216;
            while (v215 < *((_QWORD *)v11 + 2))
            {
              v358 = v11;
              v221 = &v11[v214];
              v222 = v11[v214 + 32];
              v223 = v217;
              if (v222)
              {
                v223 = v342;
                if (v222 != 1)
                  v223 = v332;
              }
              v224 = *((_QWORD *)v221 + 5);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v224 == v223)
              {
                v307 = v220;
                v327 = *(_QWORD *)(v322 + 360);
                v329 = v215;
                v225 = v216;
                v226 = v217;
                if (v222)
                {
                  v225 = v349;
                  v226 = v342;
                  if (v222 != 1)
                  {
                    v225 = v340;
                    v226 = v332;
                  }
                }
                v325 = *(_QWORD *)v322;
                v227 = *(_BYTE *)(v322 + 16);
                v228 = *(_QWORD *)(v322 + 32);
                v319 = *(_QWORD *)(v322 + 24);
                v321 = *(_QWORD *)(v322 + 8);
                v229 = *(_QWORD *)(v322 + 40);
                v230 = *(_QWORD *)(v322 + 48);
                v311 = *(_BYTE *)(v322 + 57);
                v312 = *(_BYTE *)(v322 + 56);
                v310 = *(_BYTE *)(v322 + 58);
                v231 = *(_BYTE *)(v322 + 72);
                v308 = *(_QWORD *)(v322 + 80);
                v309 = *(_QWORD *)(v322 + 64);
                v232 = *(_BYTE *)(v322 + 88);
                v314 = *(_DWORD *)(v322 + 96);
                v313 = *(_QWORD *)(v322 + 104);
                v233 = *(_BYTE *)(v322 + 112);
                v234 = *(_QWORD *)(v322 + 120);
                v315 = *(_QWORD *)(v322 + 128);
                v235 = *(_BYTE *)(v322 + 136);
                v236 = *(_QWORD *)(v322 + 144);
                v237 = *(_QWORD *)(v322 + 152);
                v316 = *(_BYTE *)(v322 + 113);
                v317 = *(_BYTE *)(v322 + 352);
                v318 = *(_BYTE *)(v334 + 89);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                LOBYTE(v366) = v232;
                LOBYTE(v381) = v233;
                LOBYTE(v362) = v235;
                v238 = v226;
                LOBYTE(__src[1]) = v227;
                BYTE8(__src[3]) = v312;
                BYTE9(__src[3]) = v311;
                BYTE10(__src[3]) = v310;
                *(_QWORD *)&__src[4] = v309;
                LOBYTE(__dst[0]) = v231;
                BYTE8(__src[4]) = v231;
                *(_QWORD *)&__src[5] = v308;
                BYTE8(__src[5]) = v232;
                LODWORD(__src[6]) = v314;
                *((_QWORD *)&__src[6] + 1) = v313;
                LOBYTE(__src[7]) = v233;
                BYTE1(__src[7]) = v316;
                *(_QWORD *)&__src[8] = v315;
                BYTE8(__src[8]) = v362;
                BYTE8(__src[16]) = v295;
                BYTE8(__src[20]) = v290;
                LOBYTE(__src[22]) = v317;
                LOBYTE(v360) = v300;
                *(_QWORD *)&__src[0] = v325;
                *((_QWORD *)&__src[0] + 1) = v321;
                *((_QWORD *)&__src[1] + 1) = v319;
                *(_QWORD *)&__src[2] = v228;
                *((_QWORD *)&__src[2] + 1) = v229;
                *(_QWORD *)&__src[3] = v230;
                *((_QWORD *)&__src[7] + 1) = v234;
                *(_QWORD *)&__src[9] = v236;
                *((_QWORD *)&__src[9] + 1) = v237;
                v217 = v304;
                v216 = v305;
                *(_QWORD *)&__src[10] = v305;
                *((_QWORD *)&__src[10] + 1) = v304;
                *(_QWORD *)&__src[11] = v303;
                *((_QWORD *)&__src[11] + 1) = v302;
                *(_QWORD *)&__src[12] = v301;
                BYTE8(__src[12]) = v300;
                *(_QWORD *)&__src[13] = v352;
                *((_QWORD *)&__src[13] + 1) = v299;
                *(_QWORD *)&__src[14] = v349;
                *((_QWORD *)&__src[14] + 1) = v342;
                *(_QWORD *)&__src[15] = v298;
                *((_QWORD *)&__src[15] + 1) = v297;
                *(_QWORD *)&__src[16] = v296;
                *(_QWORD *)&__src[17] = v345;
                *((_QWORD *)&__src[17] + 1) = v294;
                *(_QWORD *)&__src[18] = v340;
                *((_QWORD *)&__src[18] + 1) = v332;
                *(_QWORD *)&__src[19] = v293;
                *((_QWORD *)&__src[19] + 1) = v292;
                *(_QWORD *)&__src[20] = v291;
                *(_QWORD *)&__src[21] = v337;
                *((_QWORD *)&__src[21] + 1) = v289;
                BYTE1(__src[22]) = v318;
                *((_QWORD *)&__src[22] + 1) = v327;
                *(_QWORD *)&__src[23] = v354;
                v239 = *(_QWORD *)(v225 + 16);
                outlined retain of JindoTripleVStack.Implementation((uint64_t)__src);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v240 = 0.0;
                v241 = v226 < v239;
                v215 = v329;
                if (v241)
                {
                  v242 = v305;
                  if (v222)
                  {
                    v242 = v349;
                    if (v222 != 1)
                      v242 = v340;
                  }
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if ((v238 & 0x8000000000000000) != 0)
                    goto LABEL_440;
                  if (v238 >= *(_QWORD *)(v242 + 16))
                    goto LABEL_441;
                  v243 = *(_QWORD *)(v242 + 8 * v238 + 32);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v243 & 0x8000000000000000) != 0)
                    goto LABEL_442;
                  if (v243 >= *(_QWORD *)(v327 + 16))
                    goto LABEL_443;
                  v244 = v327 + (v243 << 8);
                  if (v222)
                  {
                    v245 = v244 + 32;
                    if (v222 == 1)
                    {
                      v246 = (_BYTE *)(v244 + 96);
                      v247 = (double *)(v245 + 56);
                    }
                    else
                    {
                      v246 = (_BYTE *)(v244 + 112);
                      v247 = (double *)(v245 + 72);
                    }
                  }
                  else
                  {
                    v247 = (double *)(v244 + 72);
                    v246 = (_BYTE *)(v244 + 80);
                  }
                  if ((*v246 & 1) != 0)
                    goto LABEL_451;
                  v240 = *v247;
                }
                outlined release of JindoTripleVStack.Implementation((uint64_t)__src);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v358 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v358);
                v213 = v288;
                v220 = v307;
                if (v329 >= *((_QWORD *)v358 + 2))
                  goto LABEL_433;
                *(double *)&v358[v214 + 104] = v306 - v240;
                v249 = *((_QWORD *)v358 + 2);
              }
              else
              {
                v248 = v220;
                if (v222)
                {
                  v248 = v219;
                  if (v222 != 1)
                    v248 = v218;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v358 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v358);
                v249 = *((_QWORD *)v358 + 2);
                if (v215 >= v249)
                  goto LABEL_432;
                *(double *)&v358[v214 + 104] = v248;
              }
              if (v215 >= v249)
                goto LABEL_424;
              ++v215;
              v250 = &v358[v214];
              v251 = *(double *)&v358[v214 + 80];
              if (v358[v214 + 88])
                v251 = 0.0;
              if (v251 <= *((double *)v250 + 12))
                v251 = *((double *)v250 + 12);
              v252 = v220 + v251;
              v253 = v219 + v251;
              v254 = v218 + v251;
              if (v222 == 1)
                v254 = v218;
              else
                v253 = v219;
              if (v222)
              {
                v218 = v254;
                v219 = v253;
              }
              else
              {
                v220 = v252;
              }
              v214 += 80;
              v11 = v358;
              if (v213 == v215)
              {
                v387 = v358;
                goto LABEL_306;
              }
            }
            goto LABEL_423;
          }
        }
        goto LABEL_409;
      }
LABEL_307:
      v255 = *(_OWORD *)(v5 + 48);
      __src[2] = *(_OWORD *)(v5 + 32);
      __src[3] = v255;
      __src[4] = *(_OWORD *)(v5 + 64);
      v256 = *(_OWORD *)(v5 + 16);
      __src[0] = *(_OWORD *)v5;
      __src[1] = v256;
      v257 = *(_QWORD *)(v5 + 80);
      v258 = *(unsigned __int8 *)(v5 + 88);
      memcpy((char *)&__src[5] + 9, (const void *)(v5 + 89), 0x10FuLL);
      v359 = v257;
      *(_QWORD *)&__src[5] = v257;
      BYTE8(__src[5]) = v258;
      v346 = *(_OWORD *)(v334 + 96);
      *(_OWORD *)((char *)&__src[22] + 8) = v346;
      JindoTripleVStack.Implementation.placementOrder.getter(__dst);
      v259 = *(_QWORD *)&__dst[1];
      v260 = *((_QWORD *)&__dst[1] + 1) >> 1;
      v261 = 0.0;
      if (*(_QWORD *)&__dst[1] == *((_QWORD *)&__dst[1] + 1) >> 1)
      {
LABEL_308:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        *(double *)(v322 + 144) = a1;
        *(double *)(v322 + 152) = v261;
        return;
      }
      v262 = *((_QWORD *)&__dst[0] + 1);
      v263 = (char *)v346;
      v353 = *((_QWORD *)&__dst[1] + 1) >> 1;
      while (v259 < v260)
      {
        v264 = *(_QWORD *)(v262 + 8 * v259);
        if ((v258 & 1) != 0 || v264 != v359)
        {
          if (v264 < 0)
            goto LABEL_427;
          if ((unint64_t)v264 >= *((_QWORD *)v263 + 2))
            goto LABEL_428;
          v265 = v264 << 8;
          v266 = &v263[256 * v264];
          v267 = *(_OWORD *)(v266 + 120);
          v268 = *(_OWORD *)(v266 + 136);
          *(_OWORD *)((char *)&__src[1] + 9) = *(_OWORD *)(v266 + 145);
          __src[0] = v267;
          __src[1] = v268;
          v269 = specialized JindoTripleVStack.StackIndexedStorage.compactMap<A>(_:)((uint64_t)__src, v322, v264, (uint64_t)&v387);
          v270 = *((_QWORD *)v269 + 2);
          if (v270)
          {
            v271 = *((double *)v269 + 4);
            v272 = v270 - 1;
            if (v272)
            {
              v273 = (double *)(v269 + 40);
              do
              {
                v274 = *v273++;
                v275 = v274;
                if (v271 < v274)
                  v271 = v275;
                --v272;
              }
              while (v272);
            }
          }
          else
          {
            v271 = 0.0;
          }
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v263 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v263);
          if (v264 >= *((_QWORD *)v263 + 2))
            goto LABEL_429;
          ViewOrigin.subscript.setter();
          *(_QWORD *)(v334 + 96) = v263;
          if (v264 >= *((_QWORD *)v263 + 2))
            goto LABEL_430;
          v276 = (uint64_t)&v263[v265 + 32];
          v277 = *(_OWORD *)&v263[v265 + 216];
          __dst[0] = *(_OWORD *)&v263[v265 + 200];
          __dst[1] = v277;
          ViewSize.subscript.getter();
          if (v264 >= *((_QWORD *)v263 + 2))
            goto LABEL_431;
          v279 = v258;
          v280 = v262;
          v281 = v271 + v278;
          v282 = *(_QWORD *)&v263[v265 + 136];
          v283 = v263[v265 + 144];
          v284 = *(_QWORD *)&v263[v265 + 152];
          v285 = *(_BYTE *)(v276 + 128);
          if ((*(_BYTE *)(v276 + 96) & 1) == 0)
          {
            v286 = *(_QWORD *)(v276 + 88);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              if ((v286 & 0x8000000000000000) != 0)
                goto LABEL_435;
            }
            else
            {
              v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
              if ((v286 & 0x8000000000000000) != 0)
                goto LABEL_435;
            }
            if (v286 >= *((_QWORD *)v11 + 2))
              goto LABEL_436;
            *(double *)&v11[80 * v286 + 104] = v281;
            v387 = v11;
          }
          if ((v283 & 1) == 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              if ((v282 & 0x8000000000000000) != 0)
                goto LABEL_437;
            }
            else
            {
              v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
              if ((v282 & 0x8000000000000000) != 0)
                goto LABEL_437;
            }
            if (v282 >= *((_QWORD *)v11 + 2))
              goto LABEL_438;
            *(double *)&v11[80 * v282 + 104] = v281;
            v387 = v11;
          }
          v262 = v280;
          if ((v285 & 1) != 0)
          {
            v258 = v279;
            v260 = v353;
          }
          else
          {
            v258 = v279;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v260 = v353;
              if ((v284 & 0x8000000000000000) != 0)
                goto LABEL_352;
            }
            else
            {
              v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
              v260 = v353;
              if ((v284 & 0x8000000000000000) != 0)
              {
LABEL_352:
                __break(1u);
                goto LABEL_353;
              }
            }
            if (v284 >= *((_QWORD *)v11 + 2))
              goto LABEL_439;
            *(double *)&v11[80 * v284 + 104] = v281;
            v387 = v11;
          }
          if (v261 <= v281)
            v261 = v281;
        }
        if (++v259 == v260)
          goto LABEL_308;
      }
LABEL_416:
      __break(1u);
LABEL_417:
      __break(1u);
      goto LABEL_418;
    }
  }
  if (v323 < v19)
  {
    swift_unknownObjectRetain();
    v64 = v323;
    do
    {
      v65 = *(_QWORD *)(v354 + 8 * v64 + 32);
      if ((v65 & 0x8000000000000000) != 0)
        goto LABEL_358;
      if (v65 >= *(_QWORD *)(v16 + 16))
        goto LABEL_359;
      v66 = v18 + (v65 << 8);
      v67 = *(_QWORD *)(v66 + 104);
      v68 = *(_BYTE *)(v66 + 112);
      v69 = *(_QWORD *)(v66 + 120);
      v70 = *(_BYTE *)(v66 + 128);
      if ((*(_BYTE *)(v66 + 96) & 1) == 0)
      {
        v71 = *(_QWORD *)(v66 + 88);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if ((v71 & 0x8000000000000000) != 0)
            goto LABEL_372;
        }
        else
        {
          v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
          if ((v71 & 0x8000000000000000) != 0)
            goto LABEL_372;
        }
        if (v71 >= *((_QWORD *)v11 + 2))
          goto LABEL_373;
        v72 = &v11[80 * v71];
        v74 = *((_QWORD *)v72 + 7);
        v73 = v72 + 56;
        v75 = v74 + 1;
        if (__OFADD__(v74, 1))
          goto LABEL_375;
        *v73 = v75;
        v387 = v11;
      }
      if ((v68 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if ((v67 & 0x8000000000000000) != 0)
            goto LABEL_374;
        }
        else
        {
          v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
          if ((v67 & 0x8000000000000000) != 0)
            goto LABEL_374;
        }
        if (v67 >= *((_QWORD *)v11 + 2))
          goto LABEL_376;
        v76 = &v11[80 * v67];
        v78 = *((_QWORD *)v76 + 7);
        v77 = v76 + 56;
        v79 = v78 + 1;
        if (__OFADD__(v78, 1))
          goto LABEL_378;
        *v77 = v79;
        v387 = v11;
      }
      if ((v70 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if ((v69 & 0x8000000000000000) != 0)
            goto LABEL_377;
        }
        else
        {
          v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
          if ((v69 & 0x8000000000000000) != 0)
            goto LABEL_377;
        }
        if (v69 >= *((_QWORD *)v11 + 2))
          goto LABEL_379;
        v80 = &v11[80 * v69];
        v82 = *((_QWORD *)v80 + 7);
        v81 = v80 + 56;
        v83 = v82 + 1;
        if (__OFADD__(v82, 1))
          goto LABEL_380;
        *v81 = v83;
        v387 = v11;
      }
      ++v64;
    }
    while (v19 != v64);
    swift_unknownObjectRelease();
    v84 = *(_OWORD *)(v322 + 32);
    v85 = *(_OWORD *)(v322 + 64);
    v86 = *(_OWORD *)(v322 + 80);
    v384 = *(_OWORD *)(v322 + 48);
    v385 = v85;
    v386 = v86;
    v87 = *(_OWORD *)v322;
    v382 = *(_OWORD *)(v322 + 16);
    v383 = v84;
    v88 = *(_QWORD *)(v322 + 96);
    v343 = *(_QWORD *)(v322 + 104);
    v341 = *(_BYTE *)(v322 + 112);
    v89 = *(_BYTE *)(v322 + 113);
    v90 = v320[1];
    v366 = *v320;
    v367 = v90;
    v91 = v320[2];
    v92 = v320[3];
    v93 = v320[5];
    v370 = v320[4];
    v371 = v93;
    v368 = v91;
    v369 = v92;
    v94 = v320[6];
    v95 = v320[7];
    v96 = v320[9];
    v374 = v320[8];
    v375 = v96;
    v372 = v94;
    v373 = v95;
    v97 = v320[10];
    v98 = v320[11];
    v380 = v320[14];
    v381 = v87;
    v99 = v320[13];
    v378 = v320[12];
    v379 = v99;
    v338 = v89;
    v335 = v89 & 1;
    v348 = v88;
    v333 = v88;
    v100 = v19;
    v101 = v323;
    v376 = v97;
    v377 = v98;
    v330 = v19 & 0x7FFFFFFFFFFFFFFFLL;
    while (2)
    {
      if (v100 <= v101)
        goto LABEL_360;
      if (v19 < v100)
        goto LABEL_361;
      v102 = v350[v101];
      if (v102 < 0)
        goto LABEL_362;
      if ((unint64_t)v102 >= *(_QWORD *)(v16 + 16))
        goto LABEL_363;
      v103 = v16 + (v102 << 8);
      v104 = *(_OWORD *)(v103 + 120);
      v105 = *(_OWORD *)(v103 + 136);
      *(_OWORD *)((char *)v389 + 9) = *(_OWORD *)(v103 + 145);
      v388 = v104;
      v389[0] = v105;
      v106 = specialized JindoTripleVStack.StackIndexedStorage.compactMap<A>(_:)((uint64_t)&v388, (int64_t *)&v387);
      v107 = *((_QWORD *)v106 + 2);
      if (v107)
      {
        v108 = *((double *)v106 + 4);
        v109 = v107 - 1;
        if (v107 != 1)
        {
          v110 = (double *)(v106 + 40);
          do
          {
            v111 = *v110++;
            v112 = v111;
            if (v111 < v108)
              v108 = v112;
            --v109;
          }
          while (v109);
        }
      }
      swift_bridgeObjectRelease();
      if (v102 >= *(_QWORD *)(v16 + 16))
        goto LABEL_364;
      v356 = (uint64_t)v11;
      v113 = ProposedViewSize.init(_:in:by:)();
      v115 = v114;
      v117 = v116;
      v119 = v118;
      __src[2] = v383;
      __src[3] = v384;
      __src[4] = v385;
      __src[5] = v386;
      __src[0] = v381;
      __src[1] = v382;
      *(_QWORD *)&__src[6] = v348;
      *((_QWORD *)&__src[6] + 1) = v343;
      LOBYTE(__src[7]) = v341;
      BYTE1(__src[7]) = v338;
      *(_OWORD *)((char *)&__src[19] + 2) = v378;
      *(_OWORD *)((char *)&__src[20] + 2) = v379;
      *(_OWORD *)((char *)&__src[21] + 2) = v380;
      *(_OWORD *)((char *)&__src[15] + 2) = v374;
      *(_OWORD *)((char *)&__src[16] + 2) = v375;
      *(_OWORD *)((char *)&__src[17] + 2) = v376;
      *(_OWORD *)((char *)&__src[18] + 2) = v377;
      *(_OWORD *)((char *)&__src[11] + 2) = v370;
      *(_OWORD *)((char *)&__src[12] + 2) = v371;
      *(_OWORD *)((char *)&__src[13] + 2) = v372;
      *(_OWORD *)((char *)&__src[14] + 2) = v373;
      *(_OWORD *)((char *)&__src[7] + 2) = v366;
      *(_OWORD *)((char *)&__src[8] + 2) = v367;
      *(_OWORD *)((char *)&__src[9] + 2) = v368;
      *(_OWORD *)((char *)&__src[10] + 2) = v369;
      *((_QWORD *)&__src[22] + 1) = v16;
      *(_QWORD *)&__src[23] = v354;
      LODWORD(__dst[0]) = v333;
      *((_QWORD *)&__dst[0] + 1) = v343;
      LOBYTE(__dst[1]) = v341 & 1;
      BYTE1(__dst[1]) = v335;
      outlined retain of JindoTripleVStack.Implementation((uint64_t)__src);
      LayoutSubviews.subscript.getter();
      v360 = v362;
      v361 = v363;
      v120 = (char *)v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v120 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
      if (v102 >= *((_QWORD *)v120 + 2))
        goto LABEL_365;
      v16 = (uint64_t)v120;
      v121 = (uint64_t)&v120[256 * v102 + 32];
      LOBYTE(__dst[0]) = v115 & 1;
      JindoTripleVStack.Implementation.resize(_:proposal:proxy:)(v121, v113, v115 & 1, v117, v119 & 1, &v360);
      outlined release of JindoTripleVStack.Implementation((uint64_t)__src);
      if (v102 >= *((_QWORD *)v120 + 2))
        goto LABEL_366;
      v122 = *(_OWORD *)&v120[256 * v102 + 216];
      __dst[0] = *(_OWORD *)&v120[256 * v102 + 200];
      __dst[1] = v122;
      ViewSize.subscript.getter();
      if ((*(_QWORD *)&v123 & 0xFFFFFFFFFFFFFLL) != 0)
        v124 = 0.0;
      else
        v124 = v123;
      if ((~*(_QWORD *)&v123 & 0x7FF0000000000000) != 0)
        v125 = v123;
      else
        v125 = v124;
      if (v102 >= *((_QWORD *)v120 + 2))
        goto LABEL_367;
      v126 = *(_QWORD *)&v120[256 * v102 + 136];
      v127 = v120[256 * v102 + 144];
      v128 = *(_QWORD *)&v120[256 * v102 + 152];
      v129 = *(_BYTE *)(v121 + 128);
      if ((*(_BYTE *)(v121 + 96) & 1) != 0)
      {
        v11 = (char *)v356;
        if ((*(_BYTE *)(v121 + 112) & 1) != 0)
          goto LABEL_163;
LABEL_172:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if ((v126 & 0x8000000000000000) != 0)
            goto LABEL_383;
        }
        else
        {
          v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
          if ((v126 & 0x8000000000000000) != 0)
            goto LABEL_383;
        }
        if (v126 >= *((_QWORD *)v11 + 2))
          goto LABEL_385;
        v137 = &v11[80 * v126];
        v139 = *((_QWORD *)v137 + 7);
        v140 = *((double *)v137 + 8);
        v138 = v137 + 56;
        if (!v138[16])
          v140 = v140 - v125;
        *((double *)v138 + 1) = v140;
        v135 = __OFSUB__(v139, 1);
        v141 = v139 - 1;
        if (v135)
          goto LABEL_387;
        *(_QWORD *)v138 = v141;
        v387 = v11;
        if ((v129 & 1) == 0)
          goto LABEL_179;
      }
      else
      {
        v130 = *(_QWORD *)(v121 + 88);
        v11 = (char *)v356;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if ((v130 & 0x8000000000000000) != 0)
            goto LABEL_381;
        }
        else
        {
          v11 = specialized _ArrayBuffer._consumeAndCreateNew()(v356);
          if ((v130 & 0x8000000000000000) != 0)
            goto LABEL_381;
        }
        if (v130 >= *((_QWORD *)v11 + 2))
          goto LABEL_382;
        v131 = &v11[80 * v130];
        v133 = *((_QWORD *)v131 + 7);
        v134 = *((double *)v131 + 8);
        v132 = v131 + 56;
        if (!v132[16])
          v134 = v134 - v125;
        *((double *)v132 + 1) = v134;
        v135 = __OFSUB__(v133, 1);
        v136 = v133 - 1;
        if (v135)
          goto LABEL_384;
        *(_QWORD *)v132 = v136;
        v387 = v11;
        if ((v127 & 1) == 0)
          goto LABEL_172;
LABEL_163:
        if ((v129 & 1) == 0)
        {
LABEL_179:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            if ((v128 & 0x8000000000000000) != 0)
              goto LABEL_386;
          }
          else
          {
            v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if ((v128 & 0x8000000000000000) != 0)
              goto LABEL_386;
          }
          if (v128 >= *((_QWORD *)v11 + 2))
            goto LABEL_388;
          v142 = &v11[80 * v128];
          v144 = *((_QWORD *)v142 + 7);
          v145 = *((double *)v142 + 8);
          v143 = v142 + 56;
          if (!v143[16])
            v145 = v145 - v125;
          *((double *)v143 + 1) = v145;
          v135 = __OFSUB__(v144, 1);
          v146 = v144 - 1;
          if (v135)
            goto LABEL_389;
          *(_QWORD *)v143 = v146;
          v387 = v11;
        }
      }
      ++v101;
      v63 = v330;
      if (v101 == v330)
      {
        swift_unknownObjectRelease();
        v5 = v322;
        *(_QWORD *)(v322 + 360) = v16;
        goto LABEL_196;
      }
      v19 = v100 & 0x7FFFFFFFFFFFFFFFLL;
      v100 = v330;
      if (v101 >= v19)
        goto LABEL_368;
      continue;
    }
  }
LABEL_434:
  __break(1u);
LABEL_435:
  __break(1u);
LABEL_436:
  __break(1u);
LABEL_437:
  __break(1u);
LABEL_438:
  __break(1u);
LABEL_439:
  __break(1u);
LABEL_440:
  __break(1u);
LABEL_441:
  __break(1u);
LABEL_442:
  __break(1u);
LABEL_443:
  __break(1u);
LABEL_444:
  __break(1u);
LABEL_445:
  __break(1u);
LABEL_446:
  __break(1u);
LABEL_447:
  __break(1u);
LABEL_448:
  __break(1u);
LABEL_449:
  __break(1u);
LABEL_450:
  __break(1u);
LABEL_451:
  __break(1u);
}

uint64_t JindoTripleVStack.Implementation.distanceToCenterBottom(from:stack:)(uint64_t result, char a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = v2[29];
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v4 = v2[28];
  if (*(_QWORD *)(v4 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v3)
  {
    v5 = result;
    if (a2)
    {
      if (a2 != 1)
        v4 = v2[36];
    }
    else
    {
      v4 = v2[20];
    }
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if ((v5 & 0x8000000000000000) == 0)
    {
      if (*(_QWORD *)(v4 + 16) > v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        LayoutSubviews.subscript.getter();
        LayoutSubview.spacing.getter();
        LayoutSubviews.subscript.getter();
        LayoutSubview.spacing.getter();
        ViewSpacing.distance(to:along:)();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in JindoTripleVStack.Implementation.indexToPushBelowNotch(_:availableWidth:centerHeight:)(unint64_t *a1, _QWORD *a2, char a3, double a4, double a5)
{
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  double v19;
  double v20;
  double v21;
  double v22;
  _BYTE v23[376];
  char v24;
  uint64_t v25;
  int v26;
  _QWORD __dst[53];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v9 = *a1;
  memcpy(__dst, a2, 0x162uLL);
  v32 = *(_OWORD *)&__dst[36];
  v33 = *(_OWORD *)&__dst[38];
  v34 = *(_OWORD *)&__dst[40];
  v35 = *(_OWORD *)&__dst[42];
  v28 = *(_OWORD *)&__dst[28];
  v29 = *(_OWORD *)&__dst[30];
  v30 = *(_OWORD *)&__dst[32];
  v31 = *(_OWORD *)&__dst[34];
  *(_OWORD *)&__dst[45] = *(_OWORD *)&__dst[20];
  *(_OWORD *)&__dst[47] = *(_OWORD *)&__dst[22];
  *(_OWORD *)&__dst[49] = *(_OWORD *)&__dst[24];
  *(_OWORD *)&__dst[51] = *(_OWORD *)&__dst[26];
  if (a3)
  {
    if (a3 == 1)
    {
      v36 = v28;
      v37 = v29;
      v10 = v30;
      v11 = v31;
    }
    else
    {
      v36 = v32;
      v37 = v33;
      v10 = v34;
      v11 = v35;
    }
  }
  else
  {
    v36 = *(_OWORD *)&__dst[20];
    v37 = *(_OWORD *)&__dst[22];
    v10 = *(_OWORD *)&__dst[24];
    v11 = *(_OWORD *)&__dst[26];
  }
  v38 = v10;
  v39 = v11;
  v12 = v36;
  result = outlined retain of JindoTripleVStack.StackHeader((uint64_t)&v36);
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v9 >= *(_QWORD *)(v12 + 16))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v14 = *(_QWORD *)(v12 + 8 * v9 + 32);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15 = a2[45];
  if (v14 >= *(_QWORD *)(v15 + 16))
  {
LABEL_17:
    __break(1u);
    return result;
  }
  v16 = v15 + (v14 << 8);
  v17 = *(_QWORD *)(v16 + 192);
  *(_QWORD *)v23 = *(_QWORD *)(v16 + 184);
  *(_QWORD *)&v23[8] = v17;
  v18 = *(_OWORD *)(v16 + 216);
  *(_OWORD *)&v23[16] = *(_OWORD *)(v16 + 200);
  *(_OWORD *)&v23[32] = v18;
  ViewDimensions.width.getter();
  if (v19 <= a4)
    return 0;
  *(_DWORD *)&v23[12] = HIDWORD(__dst[13]);
  *(_WORD *)&v23[16] = __dst[14];
  LayoutSubviews.subscript.getter();
  type metadata accessor for _LayoutTrait<PositionKey>(0, &lazy cache variable for type metadata for _LayoutTrait<VerticalPlacementKey>);
  *(_QWORD *)v23 = v25;
  *(_DWORD *)&v23[8] = v26;
  lazy protocol witness table accessor for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>();
  LayoutProxy.subscript.getter();
  if (v24 != 1)
    return 0;
  memcpy(v23, a2, sizeof(v23));
  JindoTripleVStack.Implementation.bottomOf(previousChild:in:includeSpacing:)(v9, a3, 1);
  v21 = v20;
  memcpy(v23, a2, sizeof(v23));
  JindoTripleVStack.Implementation.distanceToCenterBottom(from:stack:)(v9, a3);
  return v21 < v22 + a5;
}

uint64_t closure #2 in closure #1 in JindoTripleVStack.Implementation.indexToResizeInNotch(_:availableWidth:centerHeight:)(unint64_t *a1, _QWORD *a2, char a3, double a4, double a5)
{
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  double v19;
  double v20;
  double v21;
  double v22;
  _BYTE v23[376];
  char v24;
  uint64_t v25;
  int v26;
  _QWORD __dst[53];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v9 = *a1;
  memcpy(__dst, a2, 0x162uLL);
  v32 = *(_OWORD *)&__dst[36];
  v33 = *(_OWORD *)&__dst[38];
  v34 = *(_OWORD *)&__dst[40];
  v35 = *(_OWORD *)&__dst[42];
  v28 = *(_OWORD *)&__dst[28];
  v29 = *(_OWORD *)&__dst[30];
  v30 = *(_OWORD *)&__dst[32];
  v31 = *(_OWORD *)&__dst[34];
  *(_OWORD *)&__dst[45] = *(_OWORD *)&__dst[20];
  *(_OWORD *)&__dst[47] = *(_OWORD *)&__dst[22];
  *(_OWORD *)&__dst[49] = *(_OWORD *)&__dst[24];
  *(_OWORD *)&__dst[51] = *(_OWORD *)&__dst[26];
  if (a3)
  {
    if (a3 == 1)
    {
      v36 = v28;
      v37 = v29;
      v10 = v30;
      v11 = v31;
    }
    else
    {
      v36 = v32;
      v37 = v33;
      v10 = v34;
      v11 = v35;
    }
  }
  else
  {
    v36 = *(_OWORD *)&__dst[20];
    v37 = *(_OWORD *)&__dst[22];
    v10 = *(_OWORD *)&__dst[24];
    v11 = *(_OWORD *)&__dst[26];
  }
  v38 = v10;
  v39 = v11;
  v12 = v36;
  result = outlined retain of JindoTripleVStack.StackHeader((uint64_t)&v36);
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v9 >= *(_QWORD *)(v12 + 16))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v14 = *(_QWORD *)(v12 + 8 * v9 + 32);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v15 = a2[45];
  if (v14 >= *(_QWORD *)(v15 + 16))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v16 = v15 + (v14 << 8);
  v17 = *(_QWORD *)(v16 + 192);
  *(_QWORD *)v23 = *(_QWORD *)(v16 + 184);
  *(_QWORD *)&v23[8] = v17;
  v18 = *(_OWORD *)(v16 + 216);
  *(_OWORD *)&v23[16] = *(_OWORD *)(v16 + 200);
  *(_OWORD *)&v23[32] = v18;
  ViewDimensions.width.getter();
  if (v19 <= a4)
    return 0;
  if ((*(_BYTE *)(v16 + 241) & 1) != 0)
    return 0;
  *(_DWORD *)&v23[12] = HIDWORD(__dst[13]);
  *(_WORD *)&v23[16] = __dst[14];
  LayoutSubviews.subscript.getter();
  type metadata accessor for _LayoutTrait<PositionKey>(0, &lazy cache variable for type metadata for _LayoutTrait<VerticalPlacementKey>);
  *(_QWORD *)v23 = v25;
  *(_DWORD *)&v23[8] = v26;
  lazy protocol witness table accessor for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>();
  LayoutProxy.subscript.getter();
  if (v24 == 1)
    return 0;
  memcpy(v23, a2, sizeof(v23));
  JindoTripleVStack.Implementation.bottomOf(previousChild:in:includeSpacing:)(v9, a3, 1);
  v21 = v20;
  memcpy(v23, a2, sizeof(v23));
  JindoTripleVStack.Implementation.distanceToCenterBottom(from:stack:)(v9, a3);
  return v21 < v22 + a5;
}

void JindoTripleVStack.Implementation.placementOrder.getter(_OWORD *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;

  v2 = v1[21];
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = v1[20];
  if (*(_QWORD *)(v4 + 16) < v2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v5 = v1[29];
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v6 = v1[28];
  if (*(_QWORD *)(v6 + 16) < v5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v7 = v1[36];
  v8 = v1[37];
  *(_QWORD *)&v15 = v1[20];
  v9 = (2 * v5) | 1;
  *(_QWORD *)&v16 = 0;
  swift_bridgeObjectRetain();
  v10 = (_QWORD *)swift_bridgeObjectRetain();
  specialized ArraySlice.append<A>(contentsOf:)(v10, v6 + 32, 0, v9);
  swift_bridgeObjectRelease();
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (*(_QWORD *)(v7 + 16) < v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v11 = (_QWORD *)swift_bridgeObjectRetain();
  specialized ArraySlice.append<A>(contentsOf:)(v11, v7 + 32, 0, (2 * v8) | 1);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v4 + 16);
  if (v12 >= v2)
  {
    v13 = (2 * v12) | 1;
    v14 = (_QWORD *)swift_bridgeObjectRetain();
    specialized ArraySlice.append<A>(contentsOf:)(v14, v4 + 32, v2, v13);
    swift_bridgeObjectRelease();
    *((_QWORD *)&v15 + 1) = v4 + 32;
    *a1 = v15;
    *((_QWORD *)&v16 + 1) = (2 * v2) | 1;
    a1[1] = v16;
    return;
  }
LABEL_15:
  __break(1u);
}

uint64_t closure #7 in JindoTripleVStack.Implementation.resize(in:groups:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  double *v12;
  _BYTE *v13;
  double *v14;
  _BYTE *v15;
  unint64_t v16;

  v6 = *((_BYTE *)a2 + 8);
  v7 = 0.0;
  if ((v6 & 1) != 0)
    goto LABEL_12;
  if ((a4 & 0x8000000000000000) != 0)
    goto LABEL_15;
  v8 = *(_QWORD *)(a3 + 360);
  if (*(_QWORD *)(v8 + 16) <= a4)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v9 = v8 + (a4 << 8);
  if (!(_BYTE)result)
  {
    v12 = (double *)(v9 + 72);
    if ((*(_BYTE *)(v9 + 80) & 1) == 0)
      goto LABEL_9;
    goto LABEL_14;
  }
  v10 = v9 + 32;
  v11 = (_BYTE *)(v10 + 64);
  v12 = (double *)(v10 + 56);
  v13 = (_BYTE *)(v10 + 80);
  v14 = (double *)(v10 + 72);
  if (result == 1)
  {
    v15 = v11;
  }
  else
  {
    v12 = v14;
    v15 = v13;
  }
  if ((*v15 & 1) != 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_9:
  v16 = *a2;
  if (*a2 < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v16 < *(_QWORD *)(*(_QWORD *)a5 + 16))
  {
    v7 = *v12 + *(double *)(*(_QWORD *)a5 + 80 * v16 + 104);
LABEL_12:
    *(double *)a6 = v7;
    *(_BYTE *)(a6 + 8) = v6;
    return result;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t closure #1 in JindoTripleVStack.Implementation.prepareChildren(with:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  char *v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;

  v6 = a1;
  result = (uint64_t)JindoTripleVStack.MajorAxisGroup.allGroups.getter(*(double *)(a2 + 8), *(double *)(a2 + 16), a1, *(_QWORD *)(a2 + 24), a3, a4);
  v35 = *(_QWORD *)(result + 16);
  if (!v35)
    return swift_bridgeObjectRelease();
  v8 = 0;
  v9 = 0;
  v33 = result;
  v34 = result + 32;
  while (v8 < *(_QWORD *)(result + 16))
  {
    v10 = v34 + 24 * v8;
    if ((*(_QWORD *)v10 & 0x8000000000000000) != 0)
      goto LABEL_49;
    v36 = v8;
    v11 = *(double *)(v10 + 8);
    v37 = *(_BYTE *)(v10 + 16);
    v38 = *(_QWORD *)v10;
    if (*(_QWORD *)v10)
    {
      v12 = *(_QWORD *)v10;
      v13 = v9;
      while (1)
      {
        v15 = (uint64_t *)(a3 + 160);
        if (v6)
        {
          v15 = (uint64_t *)(a3 + 224);
          if (v6 != 1)
            v15 = (uint64_t *)(a3 + 288);
        }
        v16 = *v15;
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRetain();
        if (v9 < 0)
          break;
        if (v13 >= *(_QWORD *)(v16 + 16))
          goto LABEL_45;
        v17 = *(_QWORD *)(v16 + 8 * v13 + 32);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v18 = *(_QWORD *)(*(_QWORD *)a4 + 16);
        v19 = *(_QWORD *)(a3 + 360);
        result = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(a3 + 360) = v19;
        if ((result & 1) != 0)
        {
          if ((v17 & 0x8000000000000000) != 0)
            goto LABEL_47;
        }
        else
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          v19 = result;
          if ((v17 & 0x8000000000000000) != 0)
            goto LABEL_47;
        }
        if (v17 >= *(_QWORD *)(v19 + 16))
          goto LABEL_46;
        if (v6)
        {
          if (v6 == 1)
          {
            *(_QWORD *)(v19 + (v17 << 8) + 136) = v18;
            v14 = (_BYTE *)(v19 + (v17 << 8) + 144);
          }
          else
          {
            *(_QWORD *)(v19 + (v17 << 8) + 152) = v18;
            v14 = (_BYTE *)(v19 + (v17 << 8) + 160);
          }
        }
        else
        {
          *(_QWORD *)(v19 + (v17 << 8) + 120) = v18;
          v14 = (_BYTE *)(v19 + (v17 << 8) + 128);
        }
        *v14 = 0;
        *(_QWORD *)(a3 + 360) = v19;
        ++v13;
        if (!--v12)
          goto LABEL_23;
      }
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      break;
    }
LABEL_23:
    v20 = v9 + v38;
    if (__OFADD__(v9, v38))
      goto LABEL_50;
    if (v20 < v9)
      goto LABEL_51;
    v21 = v11;
    if ((v37 & 1) == 0)
    {
      v22 = (uint64_t *)(a3 + 208);
      if (v6)
      {
        v22 = (uint64_t *)(a3 + 272);
        if (v6 != 1)
          v22 = (uint64_t *)(a3 + 336);
      }
      v23 = *v22;
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
      if (v9 == v20)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v21 = v11 - 0.0;
      }
      else
      {
        v24 = v20 - 1;
        if (v20 - 1 < 0)
          goto LABEL_52;
        v25 = *(_QWORD *)(v23 + 16);
        if (v24 >= v25)
          goto LABEL_53;
        v26 = *(double *)(v23 + 32 + 8 * v24);
        if (v9 <= 0)
        {
          v27 = 0.0;
        }
        else
        {
          if (v9 - 1 >= v25)
            goto LABEL_54;
          v27 = *(double *)(v23 + 32 + 8 * (v9 - 1));
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v21 = v11 - (v26 - v27);
      }
    }
    v28 = *(char **)a4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)a4 = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
      *(_QWORD *)a4 = v28;
    }
    v31 = *((_QWORD *)v28 + 2);
    v30 = *((_QWORD *)v28 + 3);
    if (v31 >= v30 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v31 + 1;
    v32 = &v28[80 * v31];
    v32[32] = v6;
    v8 = v36 + 1;
    *((_QWORD *)v32 + 5) = v9;
    *((_QWORD *)v32 + 6) = v20;
    *((_QWORD *)v32 + 7) = 0;
    *((double *)v32 + 8) = v21;
    v32[72] = v37;
    *((double *)v32 + 10) = v11;
    v32[88] = v37;
    *((_QWORD *)v32 + 12) = 0;
    *((_QWORD *)v32 + 13) = 0;
    *(_QWORD *)a4 = v28;
    v9 += v38;
    result = v33;
    if (v36 + 1 == v35)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t protocol witness for static LayoutValueKey.defaultValue.getter in conformance PositionKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t result;

  if (one-time initialization token for defaultValue != -1)
    result = swift_once();
  v2 = qword_1EDDD3F60;
  v3 = byte_1EDDD3F68;
  v4 = qword_1EDDD3F70;
  v5 = byte_1EDDD3F78;
  *(_BYTE *)a1 = static PositionKey.defaultValue;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

double protocol witness for static LayoutValueKey.defaultValue.getter in conformance ContentMarginsKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 57) = 1;
  return result;
}

uint64_t JindoTripleVStack.ContentMargins.init(top:leading:bottom:trailing:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  *(_QWORD *)a9 = result;
  *(_BYTE *)(a9 + 8) = a2 & 1;
  *(_QWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = a4 & 1;
  *(_QWORD *)(a9 + 32) = a5;
  *(_BYTE *)(a9 + 40) = a6 & 1;
  *(_QWORD *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 56) = a8 & 1;
  return result;
}

uint64_t View.jindoPosition(_:)()
{
  return View.layoutValue<A>(key:value:)();
}

uint64_t View.jindoVerticalPlacement(_:)()
{
  return View.layoutValue<A>(key:value:)();
}

uint64_t View.jindoPriority(_:)()
{
  return View.layoutValue<A>(key:value:)();
}

uint64_t View.jindoContentMargins(_:)()
{
  return View.layoutValue<A>(key:value:)();
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  Swift::Int result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  Swift::Int v23;
  Swift::Int v24;
  _BOOL4 v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  char *v34;
  char v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  char *v44;
  char *v45;
  unint64_t v46;
  __int128 v47;
  char v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  char v57;
  char v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char v65;
  char *v66;
  __int128 v67;
  Swift::Int v68;
  Swift::Int v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  char v78;
  char v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char *v86;
  char v87;
  char v88;
  uint64_t v89;
  char v90;
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char v96;
  char *v97;
  char *v98;
  unint64_t v99;
  __int128 v100;
  char v101;
  char v102;
  uint64_t v103;
  char v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char *v110;
  char v111;
  char v112;
  uint64_t v113;
  char v114;
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char v120;
  char *v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  Swift::Int v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  char v136;
  char v137;
  uint64_t v138;
  char v139;
  char v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  char *v145;
  char v146;
  char v147;
  uint64_t v148;
  char v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char v154;
  char *v155;
  char *v156;
  unint64_t v157;
  __int128 v158;
  char v159;
  char v160;
  uint64_t v161;
  char v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  char *v167;
  char v168;
  char v169;
  uint64_t v170;
  char v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char v176;
  char *v177;
  __int128 v178;
  char v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  char *v184;
  char *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  BOOL v197;
  unint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  BOOL v207;
  uint64_t v208;
  char v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  BOOL v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  unint64_t v230;
  char *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  Swift::Int v241;
  char *v242;
  Swift::Int v243;
  unint64_t *v244;
  uint64_t v245;
  Swift::Int v246;
  char *__dst;
  uint64_t v248;
  Swift::Int v249;
  Swift::Int v250;
  _BOOL4 v251;
  uint64_t v252;
  uint64_t v253;
  __int128 v254;
  char v255;
  char v256;
  __int128 v257;
  char v258;
  char v259;

  v5 = a1[1];
  result = _minimumMergeRunLength(_:)(v5);
  if (result < v5)
  {
    if (v5 >= 0)
      v7 = v5;
    else
      v7 = v5 + 1;
    if (v5 < -1)
    {
LABEL_279:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v246 = v5;
    v241 = result;
    v239 = a1;
    if (v5 >= 2)
    {
      v8 = v7 >> 1;
      v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v9 + 16) = v8;
      v240 = v9;
      __dst = (char *)(v9 + 32);
LABEL_12:
      v11 = 0;
      v12 = *a1;
      v238 = *a1 - 8;
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v253 = a2;
      v13 = v246;
      v248 = *a1;
      while (1)
      {
        v245 = v11;
        v14 = v11 + 1;
        if (v11 + 1 >= v13)
          goto LABEL_109;
        v242 = v10;
        v15 = *(_QWORD *)(v12 + 8 * v14);
        if ((v15 & 0x8000000000000000) != 0)
          goto LABEL_256;
        v16 = *(char **)(a2 + 360);
        v17 = *((_QWORD *)v16 + 2);
        if (v15 >= v17)
          goto LABEL_257;
        v18 = *(_QWORD *)(v12 + 8 * v11);
        if (v18 >= v17)
          goto LABEL_258;
        v19 = v15 << 8;
        v20 = (uint64_t)&v16[256 * v15 + 32];
        v21 = v18 << 8;
        v22 = *(double *)&v16[256 * v18 + 32];
        if (v22 < *(double *)v20)
        {
          v23 = v245 + 2;
          if (v245 + 2 >= v246)
            goto LABEL_49;
          v24 = v14;
          v25 = 1;
          goto LABEL_54;
        }
        if (*(double *)v20 < v22)
          break;
        if ((*(_BYTE *)(v20 + 16) & 1) != 0)
        {
          ProposedViewSize.init(_:in:by:)();
          v27 = v26;
          v28 = *(_QWORD *)(a2 + 104);
          v29 = *(_BYTE *)(a2 + 112);
          v30 = *(_BYTE *)(a2 + 113);
          LODWORD(v254) = *(_DWORD *)(a2 + 96);
          *((_QWORD *)&v254 + 1) = v28;
          v255 = v29;
          v256 = v30;
          LayoutSubviews.subscript.getter();
          v254 = v257;
          v255 = v258;
          v259 = v27 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          v32 = v31;
          v16 = *(char **)(a2 + 360);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(a2 + 360) = v16;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v16 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
          if (v15 >= *((_QWORD *)v16 + 2))
            goto LABEL_271;
          v34 = &v16[v19];
          *((_QWORD *)v34 + 5) = v32;
          v34[48] = 0;
          *(_QWORD *)(a2 + 360) = v16;
          v17 = *((_QWORD *)v16 + 2);
        }
        if (v15 >= v17)
          goto LABEL_268;
        if ((v16[v19 + 64] & 1) != 0)
        {
          ProposedViewSize.init(_:in:by:)();
          v36 = v35;
          v37 = *(_QWORD *)(a2 + 104);
          v38 = *(_BYTE *)(a2 + 112);
          v39 = *(_BYTE *)(a2 + 113);
          LODWORD(v254) = *(_DWORD *)(a2 + 96);
          *((_QWORD *)&v254 + 1) = v37;
          v255 = v38;
          v256 = v39;
          LayoutSubviews.subscript.getter();
          v254 = v257;
          v255 = v258;
          v259 = v36 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          v41 = v40;
          v42 = *(char **)(a2 + 360);
          v43 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(a2 + 360) = v42;
          if ((v43 & 1) == 0)
            v42 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v42);
          if (v15 >= *((_QWORD *)v42 + 2))
            goto LABEL_272;
          v44 = &v42[v19];
          *((_QWORD *)v44 + 7) = v41;
          v44[64] = 0;
          *(_QWORD *)(a2 + 360) = v42;
        }
        _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
        v45 = *(char **)(a2 + 360);
        v46 = *((_QWORD *)v45 + 2);
        if (v18 >= v46)
          goto LABEL_269;
        v47 = v254;
        if ((v45[v21 + 48] & 1) != 0)
        {
          ProposedViewSize.init(_:in:by:)();
          v49 = v48;
          v50 = *(_QWORD *)(a2 + 104);
          v51 = *(_BYTE *)(a2 + 112);
          v52 = *(_BYTE *)(a2 + 113);
          LODWORD(v254) = *(_DWORD *)(a2 + 96);
          *((_QWORD *)&v254 + 1) = v50;
          v255 = v51;
          v256 = v52;
          LayoutSubviews.subscript.getter();
          v254 = v257;
          v255 = v258;
          v259 = v49 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          v54 = v53;
          v45 = *(char **)(a2 + 360);
          v55 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(a2 + 360) = v45;
          if ((v55 & 1) == 0)
            v45 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v45);
          if (v18 >= *((_QWORD *)v45 + 2))
            goto LABEL_273;
          v56 = &v45[v21];
          *((_QWORD *)v56 + 5) = v54;
          v56[48] = 0;
          *(_QWORD *)(a2 + 360) = v45;
          v46 = *((_QWORD *)v45 + 2);
        }
        if (v18 >= v46)
          goto LABEL_270;
        if ((v45[v21 + 64] & 1) != 0)
        {
          ProposedViewSize.init(_:in:by:)();
          v58 = v57;
          v59 = *(_QWORD *)(a2 + 104);
          v60 = *(_BYTE *)(a2 + 112);
          v61 = *(_BYTE *)(a2 + 113);
          LODWORD(v254) = *(_DWORD *)(a2 + 96);
          *((_QWORD *)&v254 + 1) = v59;
          v255 = v60;
          v256 = v61;
          LayoutSubviews.subscript.getter();
          v254 = v257;
          v255 = v258;
          v259 = v58 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          v63 = v62;
          v64 = *(char **)(a2 + 360);
          v65 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(a2 + 360) = v64;
          if ((v65 & 1) == 0)
            v64 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v64);
          if (v18 >= *((_QWORD *)v64 + 2))
            goto LABEL_274;
          v66 = &v64[v21];
          *((_QWORD *)v66 + 7) = v63;
          v66[64] = 0;
          *(_QWORD *)(a2 + 360) = v64;
        }
        _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
        v67 = v254;
        v254 = v47;
        v257 = v67;
        v24 = v14;
        if ((MEMORY[0x18D7574C8](&v254, &v257) & 1) != 0)
        {
          v23 = v245 + 2;
          v12 = v248;
          if (v245 + 2 >= v246)
          {
LABEL_49:
            v10 = v242;
            v68 = v245;
            goto LABEL_101;
          }
          v25 = 1;
          goto LABEL_54;
        }
        v254 = v47;
        v257 = v67;
        if ((MEMORY[0x18D7574C8](&v257, &v254) & 1) != 0)
        {
          v23 = v245 + 2;
          v12 = v248;
          if (v245 + 2 >= v246)
          {
LABEL_95:
            v14 = v23;
            v10 = v242;
            goto LABEL_109;
          }
          v25 = 0;
          goto LABEL_54;
        }
        v25 = v15 < v18;
        v23 = v245 + 2;
        v12 = v248;
        if (v245 + 2 < v246)
          goto LABEL_54;
LABEL_97:
        v10 = v242;
        v14 = v23;
        if (!v25)
          goto LABEL_109;
LABEL_100:
        v68 = v245;
        if (v23 < v245)
          goto LABEL_265;
LABEL_101:
        if (v68 < v23)
        {
          v123 = v23 - 1;
          do
          {
            if (v68 != v123)
            {
              if (!v12)
                goto LABEL_277;
              v124 = *(_QWORD *)(v12 + 8 * v68);
              *(_QWORD *)(v12 + 8 * v68) = *(_QWORD *)(v12 + 8 * v123);
              *(_QWORD *)(v12 + 8 * v123) = v124;
            }
            v214 = ++v68 < v123--;
          }
          while (v214);
        }
        v14 = v23;
LABEL_109:
        if (v14 >= v246)
          goto LABEL_156;
        if (__OFSUB__(v14, v245))
          goto LABEL_259;
        if (v14 - v245 >= v241)
          goto LABEL_156;
        if (__OFADD__(v245, v241))
          goto LABEL_266;
        v125 = v246;
        if (v245 + v241 < v246)
          v125 = v245 + v241;
        if (v125 < v245)
          goto LABEL_267;
        if (v14 == v125)
          goto LABEL_156;
        v243 = v125;
        v126 = (unint64_t *)(v238 + 8 * v14);
        while (2)
        {
          v249 = v14;
          v127 = *(_QWORD *)(v12 + 8 * v14);
          v128 = v245;
          v244 = v126;
          while (1)
          {
            if ((v127 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_221:
              __break(1u);
LABEL_222:
              __break(1u);
LABEL_223:
              __break(1u);
LABEL_224:
              __break(1u);
LABEL_225:
              __break(1u);
LABEL_226:
              __break(1u);
LABEL_227:
              __break(1u);
LABEL_228:
              __break(1u);
LABEL_229:
              __break(1u);
LABEL_230:
              __break(1u);
LABEL_231:
              __break(1u);
LABEL_232:
              __break(1u);
LABEL_233:
              __break(1u);
LABEL_234:
              __break(1u);
LABEL_235:
              __break(1u);
LABEL_236:
              __break(1u);
LABEL_237:
              __break(1u);
LABEL_238:
              __break(1u);
LABEL_239:
              __break(1u);
LABEL_240:
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              __break(1u);
LABEL_244:
              __break(1u);
LABEL_245:
              __break(1u);
LABEL_246:
              __break(1u);
LABEL_247:
              __break(1u);
              goto LABEL_248;
            }
            v129 = *(char **)(a2 + 360);
            v130 = *((_QWORD *)v129 + 2);
            if (v127 >= v130)
              goto LABEL_221;
            v131 = *v126;
            if (*v126 >= v130)
              goto LABEL_222;
            v132 = v127 << 8;
            v133 = (uint64_t)&v129[256 * v127 + 32];
            v134 = v131 << 8;
            v135 = *(double *)&v129[256 * v131 + 32];
            if (v135 < *(double *)v133)
              goto LABEL_152;
            if (*(double *)v133 < v135)
              goto LABEL_119;
            v252 = v131 << 8;
            if ((*(_BYTE *)(v133 + 16) & 1) != 0)
            {
              ProposedViewSize.init(_:in:by:)();
              v137 = v136;
              v138 = *(_QWORD *)(v253 + 104);
              v139 = *(_BYTE *)(v253 + 112);
              v140 = *(_BYTE *)(v253 + 113);
              LODWORD(v254) = *(_DWORD *)(v253 + 96);
              *((_QWORD *)&v254 + 1) = v138;
              v255 = v139;
              v256 = v140;
              LayoutSubviews.subscript.getter();
              v254 = v257;
              v255 = v258;
              v141 = v137 & 1;
              a2 = v253;
              v259 = v141;
              LayoutSubview.lengthThatFits(_:in:)();
              v143 = v142;
              v129 = *(char **)(v253 + 360);
              v144 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v253 + 360) = v129;
              if ((v144 & 1) == 0)
                v129 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v129);
              v134 = v131 << 8;
              if (v127 >= *((_QWORD *)v129 + 2))
                goto LABEL_227;
              v145 = &v129[v132];
              *((_QWORD *)v145 + 5) = v143;
              v145[48] = 0;
              *(_QWORD *)(v253 + 360) = v129;
              v130 = *((_QWORD *)v129 + 2);
            }
            if (v127 >= v130)
              goto LABEL_223;
            if ((v129[v132 + 64] & 1) != 0)
            {
              ProposedViewSize.init(_:in:by:)();
              v147 = v146;
              v148 = *(_QWORD *)(v253 + 104);
              v149 = *(_BYTE *)(v253 + 112);
              v150 = *(_BYTE *)(v253 + 113);
              LODWORD(v254) = *(_DWORD *)(v253 + 96);
              *((_QWORD *)&v254 + 1) = v148;
              v255 = v149;
              v256 = v150;
              LayoutSubviews.subscript.getter();
              v254 = v257;
              v255 = v258;
              v259 = v147 & 1;
              a2 = v253;
              LayoutSubview.lengthThatFits(_:in:)();
              v152 = v151;
              v153 = *(char **)(v253 + 360);
              v154 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v253 + 360) = v153;
              if ((v154 & 1) == 0)
                v153 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v153);
              v134 = v131 << 8;
              if (v127 >= *((_QWORD *)v153 + 2))
                goto LABEL_228;
              v155 = &v153[v132];
              *((_QWORD *)v155 + 7) = v152;
              v155[64] = 0;
              *(_QWORD *)(v253 + 360) = v153;
            }
            _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
            v156 = *(char **)(a2 + 360);
            v157 = *((_QWORD *)v156 + 2);
            if (v131 >= v157)
              goto LABEL_224;
            v158 = v254;
            if ((v156[v134 + 48] & 1) != 0)
            {
              ProposedViewSize.init(_:in:by:)();
              v160 = v159;
              v161 = *(_QWORD *)(v253 + 104);
              v162 = *(_BYTE *)(v253 + 112);
              v163 = *(_BYTE *)(v253 + 113);
              LODWORD(v254) = *(_DWORD *)(v253 + 96);
              *((_QWORD *)&v254 + 1) = v161;
              v255 = v162;
              v256 = v163;
              LayoutSubviews.subscript.getter();
              v254 = v257;
              v255 = v258;
              v259 = v160 & 1;
              a2 = v253;
              LayoutSubview.lengthThatFits(_:in:)();
              v165 = v164;
              v156 = *(char **)(v253 + 360);
              v166 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v253 + 360) = v156;
              if ((v166 & 1) == 0)
                v156 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v156);
              v134 = v131 << 8;
              if (v131 >= *((_QWORD *)v156 + 2))
                goto LABEL_229;
              v167 = &v156[v252];
              *((_QWORD *)v167 + 5) = v165;
              v167[48] = 0;
              *(_QWORD *)(v253 + 360) = v156;
              v157 = *((_QWORD *)v156 + 2);
            }
            if (v131 >= v157)
              goto LABEL_225;
            if ((v156[v134 + 64] & 1) != 0)
            {
              ProposedViewSize.init(_:in:by:)();
              v169 = v168;
              v170 = *(_QWORD *)(v253 + 104);
              v171 = *(_BYTE *)(v253 + 112);
              v172 = *(_BYTE *)(v253 + 113);
              LODWORD(v254) = *(_DWORD *)(v253 + 96);
              *((_QWORD *)&v254 + 1) = v170;
              v255 = v171;
              v256 = v172;
              LayoutSubviews.subscript.getter();
              v254 = v257;
              v255 = v258;
              v259 = v169 & 1;
              a2 = v253;
              LayoutSubview.lengthThatFits(_:in:)();
              v174 = v173;
              v175 = *(char **)(v253 + 360);
              v176 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v253 + 360) = v175;
              if ((v176 & 1) == 0)
                v175 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v175);
              if (v131 >= *((_QWORD *)v175 + 2))
                goto LABEL_230;
              v177 = &v175[v252];
              *((_QWORD *)v177 + 7) = v174;
              v177[64] = 0;
              *(_QWORD *)(v253 + 360) = v175;
            }
            _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
            v178 = v254;
            v254 = v158;
            v257 = v178;
            v179 = MEMORY[0x18D7574C8](&v254, &v257);
            v12 = v248;
            if ((v179 & 1) != 0)
              goto LABEL_152;
            v254 = v158;
            v257 = v178;
            if ((MEMORY[0x18D7574C8](&v257, &v254) & 1) != 0)
              break;
            v12 = v248;
            if (v127 >= v131)
              goto LABEL_119;
LABEL_152:
            if (!v12)
              goto LABEL_275;
            v180 = *v126;
            v127 = v126[1];
            *v126 = v127;
            v126[1] = v180;
            --v126;
            if (v249 == ++v128)
              goto LABEL_119;
          }
          v12 = v248;
LABEL_119:
          v14 = v249 + 1;
          v126 = v244 + 1;
          if (v249 + 1 != v243)
            continue;
          break;
        }
        v14 = v243;
LABEL_156:
        if (v14 < v245)
          goto LABEL_255;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
        v182 = *((_QWORD *)v10 + 2);
        v181 = *((_QWORD *)v10 + 3);
        v183 = v182 + 1;
        v12 = v248;
        v250 = v14;
        if (v182 >= v181 >> 1)
        {
          v231 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v181 > 1), v182 + 1, 1, v10);
          v12 = v248;
          v10 = v231;
        }
        *((_QWORD *)v10 + 2) = v183;
        v184 = v10 + 32;
        v185 = &v10[16 * v182 + 32];
        *(_QWORD *)v185 = v245;
        *((_QWORD *)v185 + 1) = v14;
        if (v182)
        {
          while (1)
          {
            v186 = v183 - 1;
            if (v183 >= 4)
            {
              v191 = &v184[16 * v183];
              v192 = *((_QWORD *)v191 - 8);
              v193 = *((_QWORD *)v191 - 7);
              v197 = __OFSUB__(v193, v192);
              v194 = v193 - v192;
              if (v197)
                goto LABEL_237;
              v196 = *((_QWORD *)v191 - 6);
              v195 = *((_QWORD *)v191 - 5);
              v197 = __OFSUB__(v195, v196);
              v189 = v195 - v196;
              v190 = v197;
              if (v197)
                goto LABEL_238;
              v198 = v183 - 2;
              v199 = &v184[16 * v183 - 32];
              v201 = *(_QWORD *)v199;
              v200 = *((_QWORD *)v199 + 1);
              v197 = __OFSUB__(v200, v201);
              v202 = v200 - v201;
              if (v197)
                goto LABEL_240;
              v197 = __OFADD__(v189, v202);
              v203 = v189 + v202;
              if (v197)
                goto LABEL_243;
              if (v203 >= v194)
              {
                v221 = &v184[16 * v186];
                v223 = *(_QWORD *)v221;
                v222 = *((_QWORD *)v221 + 1);
                v197 = __OFSUB__(v222, v223);
                v224 = v222 - v223;
                if (v197)
                  goto LABEL_247;
                v214 = v189 < v224;
                goto LABEL_193;
              }
            }
            else
            {
              if (v183 != 3)
              {
                v215 = *((_QWORD *)v10 + 4);
                v216 = *((_QWORD *)v10 + 5);
                v197 = __OFSUB__(v216, v215);
                v208 = v216 - v215;
                v209 = v197;
                goto LABEL_187;
              }
              v188 = *((_QWORD *)v10 + 4);
              v187 = *((_QWORD *)v10 + 5);
              v197 = __OFSUB__(v187, v188);
              v189 = v187 - v188;
              v190 = v197;
            }
            if ((v190 & 1) != 0)
              goto LABEL_239;
            v198 = v183 - 2;
            v204 = &v184[16 * v183 - 32];
            v206 = *(_QWORD *)v204;
            v205 = *((_QWORD *)v204 + 1);
            v207 = __OFSUB__(v205, v206);
            v208 = v205 - v206;
            v209 = v207;
            if (v207)
              goto LABEL_242;
            v210 = &v184[16 * v186];
            v212 = *(_QWORD *)v210;
            v211 = *((_QWORD *)v210 + 1);
            v197 = __OFSUB__(v211, v212);
            v213 = v211 - v212;
            if (v197)
              goto LABEL_245;
            if (__OFADD__(v208, v213))
              goto LABEL_246;
            if (v208 + v213 >= v189)
            {
              v214 = v189 < v213;
LABEL_193:
              if (v214)
                v186 = v198;
              goto LABEL_195;
            }
LABEL_187:
            if ((v209 & 1) != 0)
              goto LABEL_241;
            v217 = &v184[16 * v186];
            v219 = *(_QWORD *)v217;
            v218 = *((_QWORD *)v217 + 1);
            v197 = __OFSUB__(v218, v219);
            v220 = v218 - v219;
            if (v197)
              goto LABEL_244;
            if (v220 < v208)
              goto LABEL_204;
LABEL_195:
            v225 = v186 - 1;
            if (v186 - 1 >= v183)
              goto LABEL_226;
            if (!v12)
              goto LABEL_276;
            v226 = &v184[16 * v225];
            v227 = *(_QWORD *)v226;
            v228 = &v184[16 * v186];
            v229 = *((_QWORD *)v228 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v12 + 8 * *(_QWORD *)v226), (char *)(v12 + 8 * *(_QWORD *)v228), v12 + 8 * v229, __dst, a2);
            if (v2)
              goto LABEL_219;
            if (v229 < v227)
              goto LABEL_231;
            if (v186 > *((_QWORD *)v10 + 2))
              goto LABEL_232;
            *(_QWORD *)v226 = v227;
            *(_QWORD *)&v184[16 * v225 + 8] = v229;
            v230 = *((_QWORD *)v10 + 2);
            if (v186 >= v230)
              goto LABEL_233;
            v183 = v230 - 1;
            memmove(&v184[16 * v186], v228 + 16, 16 * (v230 - 1 - v186));
            *((_QWORD *)v10 + 2) = v230 - 1;
            v12 = v248;
            if (v230 <= 2)
              goto LABEL_204;
          }
        }
        v183 = 1;
LABEL_204:
        v13 = v246;
        v11 = v250;
        if (v250 >= v246)
          goto LABEL_208;
      }
      v23 = v245 + 2;
      if (v245 + 2 >= v246)
        goto LABEL_95;
      v25 = 0;
      v24 = v14;
LABEL_54:
      v69 = v23;
      v251 = v25;
      do
      {
        v70 = *(_QWORD *)(v12 + 8 * v69);
        if ((v70 & 0x8000000000000000) != 0)
          goto LABEL_234;
        v23 = v69;
        v71 = *(char **)(a2 + 360);
        v72 = *((_QWORD *)v71 + 2);
        if (v70 >= v72)
          goto LABEL_235;
        v73 = *(_QWORD *)(v12 + 8 * v24);
        if (v73 >= v72)
          goto LABEL_236;
        v74 = v70 << 8;
        v75 = (uint64_t)&v71[256 * v70 + 32];
        v76 = v73 << 8;
        v77 = *(double *)&v71[256 * v73 + 32];
        if (v77 < *(double *)v75)
        {
          if (!v25)
            goto LABEL_95;
        }
        else if (*(double *)v75 >= v77)
        {
          if ((*(_BYTE *)(v75 + 16) & 1) != 0)
          {
            ProposedViewSize.init(_:in:by:)();
            v79 = v78;
            v80 = *(_QWORD *)(v253 + 104);
            v81 = *(_BYTE *)(v253 + 112);
            v82 = *(_BYTE *)(v253 + 113);
            LODWORD(v254) = *(_DWORD *)(v253 + 96);
            *((_QWORD *)&v254 + 1) = v80;
            v255 = v81;
            v256 = v82;
            LayoutSubviews.subscript.getter();
            v254 = v257;
            v255 = v258;
            v259 = v79 & 1;
            a2 = v253;
            LayoutSubview.lengthThatFits(_:in:)();
            v84 = v83;
            v71 = *(char **)(v253 + 360);
            v85 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v253 + 360) = v71;
            if ((v85 & 1) == 0)
              v71 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v71);
            if (v70 >= *((_QWORD *)v71 + 2))
              goto LABEL_260;
            v86 = &v71[v74];
            *((_QWORD *)v86 + 5) = v84;
            v86[48] = 0;
            *(_QWORD *)(v253 + 360) = v71;
            v72 = *((_QWORD *)v71 + 2);
          }
          if (v70 >= v72)
            goto LABEL_252;
          if ((v71[v74 + 64] & 1) != 0)
          {
            ProposedViewSize.init(_:in:by:)();
            v88 = v87;
            v89 = *(_QWORD *)(v253 + 104);
            v90 = *(_BYTE *)(v253 + 112);
            v91 = *(_BYTE *)(v253 + 113);
            LODWORD(v254) = *(_DWORD *)(v253 + 96);
            *((_QWORD *)&v254 + 1) = v89;
            v255 = v90;
            v256 = v91;
            LayoutSubviews.subscript.getter();
            v254 = v257;
            v255 = v258;
            v92 = v88 & 1;
            a2 = v253;
            v259 = v92;
            LayoutSubview.lengthThatFits(_:in:)();
            v94 = v93;
            v95 = *(char **)(v253 + 360);
            v96 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v253 + 360) = v95;
            if ((v96 & 1) == 0)
              v95 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v95);
            if (v70 >= *((_QWORD *)v95 + 2))
              goto LABEL_261;
            v97 = &v95[v74];
            *((_QWORD *)v97 + 7) = v94;
            v97[64] = 0;
            *(_QWORD *)(v253 + 360) = v95;
          }
          _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
          v98 = *(char **)(a2 + 360);
          v99 = *((_QWORD *)v98 + 2);
          if (v73 >= v99)
            goto LABEL_253;
          v100 = v254;
          if ((v98[v76 + 48] & 1) != 0)
          {
            ProposedViewSize.init(_:in:by:)();
            v102 = v101;
            v103 = *(_QWORD *)(v253 + 104);
            v104 = *(_BYTE *)(v253 + 112);
            v105 = *(_BYTE *)(v253 + 113);
            LODWORD(v254) = *(_DWORD *)(v253 + 96);
            *((_QWORD *)&v254 + 1) = v103;
            v255 = v104;
            v256 = v105;
            LayoutSubviews.subscript.getter();
            v254 = v257;
            v255 = v258;
            v106 = v102 & 1;
            a2 = v253;
            v259 = v106;
            LayoutSubview.lengthThatFits(_:in:)();
            v108 = v107;
            v98 = *(char **)(v253 + 360);
            v109 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v253 + 360) = v98;
            if ((v109 & 1) == 0)
              v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
            if (v73 >= *((_QWORD *)v98 + 2))
              goto LABEL_262;
            v110 = &v98[v76];
            *((_QWORD *)v110 + 5) = v108;
            v110[48] = 0;
            *(_QWORD *)(v253 + 360) = v98;
            v99 = *((_QWORD *)v98 + 2);
          }
          if (v73 >= v99)
            goto LABEL_254;
          if ((v98[v76 + 64] & 1) != 0)
          {
            ProposedViewSize.init(_:in:by:)();
            v112 = v111;
            v113 = *(_QWORD *)(v253 + 104);
            v114 = *(_BYTE *)(v253 + 112);
            v115 = *(_BYTE *)(v253 + 113);
            LODWORD(v254) = *(_DWORD *)(v253 + 96);
            *((_QWORD *)&v254 + 1) = v113;
            v255 = v114;
            v256 = v115;
            LayoutSubviews.subscript.getter();
            v254 = v257;
            v255 = v258;
            v116 = v112 & 1;
            a2 = v253;
            v259 = v116;
            LayoutSubview.lengthThatFits(_:in:)();
            v118 = v117;
            v119 = *(char **)(v253 + 360);
            v120 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v253 + 360) = v119;
            if ((v120 & 1) == 0)
              v119 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v119);
            if (v73 >= *((_QWORD *)v119 + 2))
              goto LABEL_263;
            v121 = &v119[v76];
            *((_QWORD *)v121 + 7) = v118;
            v121[64] = 0;
            *(_QWORD *)(v253 + 360) = v119;
          }
          _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
          v122 = v254;
          v254 = v100;
          v257 = v122;
          if ((MEMORY[0x18D7574C8](&v254, &v257) & 1) != 0)
          {
            v12 = v248;
            v25 = v251;
            if (!v251)
              goto LABEL_95;
          }
          else
          {
            v254 = v100;
            v257 = v122;
            if ((MEMORY[0x18D7574C8](&v257, &v254) & 1) != 0)
            {
              v12 = v248;
              v25 = v251;
              if (v251)
              {
LABEL_99:
                v10 = v242;
                goto LABEL_100;
              }
            }
            else
            {
              v25 = v251;
              v12 = v248;
              if (((v251 ^ (v70 >= v73)) & 1) == 0)
                goto LABEL_97;
            }
          }
        }
        else if (v25)
        {
          goto LABEL_99;
        }
        v69 = v23 + 1;
        v24 = v23;
      }
      while (v23 + 1 < v246);
      ++v23;
      goto LABEL_97;
    }
    v10 = (char *)MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    v240 = MEMORY[0x1E0DEE9D8];
    if (v5 == 1)
      goto LABEL_12;
    v183 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_208:
    if (v183 < 2)
    {
LABEL_219:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v240 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v232 = *v239;
    while (1)
    {
      v233 = v183 - 2;
      if (v183 < 2)
        break;
      if (!v232)
        goto LABEL_278;
      v234 = *(_QWORD *)&v10[16 * v233 + 32];
      v235 = *(_QWORD *)&v10[16 * v183 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v232 + 8 * v234), (char *)(v232 + 8 * *(_QWORD *)&v10[16 * v183 + 16]), v232 + 8 * v235, __dst, a2);
      if (v2)
        goto LABEL_219;
      if (v235 < v234)
        goto LABEL_249;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
      if (v233 >= *((_QWORD *)v10 + 2))
        goto LABEL_250;
      v236 = &v10[16 * v233 + 32];
      *(_QWORD *)v236 = v234;
      *((_QWORD *)v236 + 1) = v235;
      v237 = *((_QWORD *)v10 + 2);
      if (v183 > v237)
        goto LABEL_251;
      memmove(&v10[16 * v183 + 16], &v10[16 * v183 + 32], 16 * (v237 - v183));
      *((_QWORD *)v10 + 2) = v237 - 1;
      v183 = v237 - 1;
      if (v237 <= 2)
        goto LABEL_219;
    }
LABEL_248:
    __break(1u);
LABEL_249:
    __break(1u);
LABEL_250:
    __break(1u);
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
LABEL_275:
    __break(1u);
LABEL_276:
    __break(1u);
LABEL_277:
    __break(1u);
LABEL_278:
    __break(1u);
    goto LABEL_279;
  }
  if (v5 < 0)
    goto LABEL_264;
  if (v5)
    return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v5, 1, a1, a2);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *__src, unint64_t a3, char *__dst, uint64_t a5)
{
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  char *v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  char v62;
  char v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int128 v100;
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  char v119;
  char v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t result;
  unint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  char *__srcb;
  uint64_t v132;
  __int128 v133;
  char v134;
  char v135;
  __int128 v136;
  char v137;
  char *v138;
  char *v139;
  char *v140;

  v5 = a3;
  v6 = __src;
  v7 = a1;
  v8 = __src - a1;
  v9 = __src - a1 + 7;
  if (__src - a1 >= 0)
    v9 = __src - a1;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 3;
  v140 = a1;
  v139 = __dst;
  v132 = a5;
  v128 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != __src || &__src[8 * v13] <= __dst)
      {
        memmove(__dst, __src, 8 * v13);
        __dst = v128;
        v7 = a1;
        a5 = v132;
      }
      v68 = &__dst[8 * v13];
      v138 = v68;
      v140 = v6;
      if (v11 >= 8 && v7 < v6)
      {
        v69 = (char *)(v5 - 8);
        while (1)
        {
          v70 = v68 - 8;
          v71 = *((_QWORD *)v68 - 1);
          if ((v71 & 0x8000000000000000) != 0)
            break;
          v72 = *(_QWORD *)(a5 + 360);
          v73 = *(_QWORD *)(v72 + 16);
          if (v71 >= v73)
            goto LABEL_113;
          v74 = v6 - 8;
          v75 = *((_QWORD *)v6 - 1);
          if (v75 >= v73)
            goto LABEL_114;
          v76 = v69 + 8;
          v77 = v71 << 8;
          v78 = v72 + 32 + (v71 << 8);
          v79 = v75 << 8;
          v80 = *(double *)(v72 + 32 + (v75 << 8));
          if (v80 < *(double *)v78)
            goto LABEL_69;
          if (*(double *)v78 < v80)
            goto LABEL_74;
          v127 = v68;
          if ((*(_BYTE *)(v78 + 16) & 1) != 0)
          {
            ProposedViewSize.init(_:in:by:)();
            v81 = *(_QWORD *)(v132 + 104);
            v82 = *(_BYTE *)(v132 + 112);
            v83 = *(_BYTE *)(v132 + 113);
            LODWORD(v133) = *(_DWORD *)(v132 + 96);
            *((_QWORD *)&v133 + 1) = v81;
            v134 = v82;
            v135 = v83;
            LayoutSubviews.subscript.getter();
            v133 = v136;
            v134 = v137;
            LayoutSubview.lengthThatFits(_:in:)();
            v85 = v84;
            v72 = *(_QWORD *)(v132 + 360);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            a5 = v132;
            *(_QWORD *)(v132 + 360) = v72;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v121 = specialized _ArrayBuffer._consumeAndCreateNew()(v72);
              a5 = v132;
              v72 = (uint64_t)v121;
            }
            if (v71 >= *(_QWORD *)(v72 + 16))
              goto LABEL_124;
            v87 = v72 + v77;
            *(_QWORD *)(v87 + 40) = v85;
            *(_BYTE *)(v87 + 48) = 0;
            *(_QWORD *)(a5 + 360) = v72;
            v73 = *(_QWORD *)(v72 + 16);
          }
          if (v71 >= v73)
            goto LABEL_118;
          if ((*(_BYTE *)(v72 + v77 + 64) & 1) != 0)
          {
            ProposedViewSize.init(_:in:by:)();
            v88 = *(_QWORD *)(v132 + 104);
            v89 = *(_BYTE *)(v132 + 112);
            v90 = *(_BYTE *)(v132 + 113);
            LODWORD(v133) = *(_DWORD *)(v132 + 96);
            *((_QWORD *)&v133 + 1) = v88;
            v134 = v89;
            v135 = v90;
            LayoutSubviews.subscript.getter();
            v133 = v136;
            v134 = v137;
            LayoutSubview.lengthThatFits(_:in:)();
            v92 = v91;
            v93 = *(_QWORD *)(v132 + 360);
            v94 = swift_isUniquelyReferenced_nonNull_native();
            v95 = v132;
            *(_QWORD *)(v132 + 360) = v93;
            if ((v94 & 1) == 0)
            {
              v122 = specialized _ArrayBuffer._consumeAndCreateNew()(v93);
              v95 = v132;
              v93 = (uint64_t)v122;
            }
            if (v71 >= *(_QWORD *)(v93 + 16))
              goto LABEL_125;
            v96 = v93 + v77;
            *(_QWORD *)(v96 + 56) = v92;
            *(_BYTE *)(v96 + 64) = 0;
            *(_QWORD *)(v95 + 360) = v93;
            v97 = v95;
          }
          else
          {
            v97 = a5;
          }
          _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
          v98 = *(_QWORD *)(v97 + 360);
          v99 = *(_QWORD *)(v98 + 16);
          if (v75 >= v99)
            goto LABEL_119;
          v100 = v133;
          if ((*(_BYTE *)(v98 + v79 + 48) & 1) != 0)
          {
            ProposedViewSize.init(_:in:by:)();
            v101 = *(_QWORD *)(v132 + 104);
            v102 = *(_BYTE *)(v132 + 112);
            v103 = *(_BYTE *)(v132 + 113);
            LODWORD(v133) = *(_DWORD *)(v132 + 96);
            *((_QWORD *)&v133 + 1) = v101;
            v134 = v102;
            v135 = v103;
            LayoutSubviews.subscript.getter();
            v133 = v136;
            v134 = v137;
            LayoutSubview.lengthThatFits(_:in:)();
            v105 = v104;
            v98 = *(_QWORD *)(v132 + 360);
            v106 = swift_isUniquelyReferenced_nonNull_native();
            v107 = v132;
            *(_QWORD *)(v132 + 360) = v98;
            if ((v106 & 1) == 0)
            {
              v123 = specialized _ArrayBuffer._consumeAndCreateNew()(v98);
              v107 = v132;
              v98 = (uint64_t)v123;
            }
            if (v75 >= *(_QWORD *)(v98 + 16))
              goto LABEL_126;
            v108 = v98 + v79;
            *(_QWORD *)(v108 + 40) = v105;
            *(_BYTE *)(v108 + 48) = 0;
            *(_QWORD *)(v107 + 360) = v98;
            v99 = *(_QWORD *)(v98 + 16);
          }
          if (v75 >= v99)
            goto LABEL_120;
          if ((*(_BYTE *)(v98 + v79 + 64) & 1) != 0)
          {
            ProposedViewSize.init(_:in:by:)();
            v109 = *(_QWORD *)(v132 + 104);
            v110 = *(_BYTE *)(v132 + 112);
            v111 = *(_BYTE *)(v132 + 113);
            LODWORD(v133) = *(_DWORD *)(v132 + 96);
            *((_QWORD *)&v133 + 1) = v109;
            v134 = v110;
            v135 = v111;
            LayoutSubviews.subscript.getter();
            v133 = v136;
            v134 = v137;
            LayoutSubview.lengthThatFits(_:in:)();
            v113 = v112;
            v114 = *(_QWORD *)(v132 + 360);
            v115 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v132 + 360) = v114;
            if ((v115 & 1) != 0)
            {
              v116 = v132;
            }
            else
            {
              v124 = specialized _ArrayBuffer._consumeAndCreateNew()(v114);
              v116 = v132;
              v114 = (uint64_t)v124;
            }
            if (v75 >= *(_QWORD *)(v114 + 16))
              goto LABEL_127;
            v117 = v114 + v79;
            *(_QWORD *)(v117 + 56) = v113;
            *(_BYTE *)(v117 + 64) = 0;
            *(_QWORD *)(v116 + 360) = v114;
          }
          _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
          v118 = v133;
          v133 = v100;
          v136 = v118;
          v119 = MEMORY[0x18D7574C8](&v133, &v136);
          v7 = a1;
          a5 = v132;
          v68 = v127;
          __dst = v128;
          v76 = v69 + 8;
          if ((v119 & 1) != 0)
            goto LABEL_69;
          v133 = v100;
          v136 = v118;
          v120 = MEMORY[0x18D7574C8](&v136, &v133);
          v76 = v69 + 8;
          v68 = v127;
          __dst = v128;
          v7 = a1;
          a5 = v132;
          if ((v120 & 1) != 0)
            goto LABEL_74;
          if (v71 < v75)
          {
LABEL_69:
            if (v76 != v6 || v69 >= v6)
              *(_QWORD *)v69 = *(_QWORD *)v74;
            v140 = v6 - 8;
            if (v68 <= __dst)
              goto LABEL_111;
          }
          else
          {
LABEL_74:
            v138 = v70;
            if (v76 < v68 || v69 >= v68 || v76 != v68)
              *(_QWORD *)v69 = *(_QWORD *)v70;
            v74 = v6;
            v68 = v70;
            if (v70 <= __dst)
              goto LABEL_111;
          }
          v69 -= 8;
          v6 = v74;
          if (v74 <= v7)
            goto LABEL_111;
        }
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        goto LABEL_115;
      }
LABEL_111:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v140, (const void **)&v139, &v138);
      return 1;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != a1 || &a1[8 * v10] <= __dst)
    {
      memmove(__dst, a1, 8 * v10);
      __dst = v128;
      v7 = a1;
      a5 = v132;
    }
    v14 = &__dst[8 * v10];
    v138 = v14;
    if (v8 >= 8 && (unint64_t)v6 < v5)
    {
      v126 = v5;
      while (1)
      {
        v15 = *(_QWORD *)v6;
        if ((*(_QWORD *)v6 & 0x8000000000000000) != 0)
          break;
        v16 = *(_QWORD *)(a5 + 360);
        v17 = *(_QWORD *)(v16 + 16);
        if (v15 >= v17)
          goto LABEL_116;
        v18 = *(_QWORD *)__dst;
        if (*(_QWORD *)__dst >= v17)
          goto LABEL_117;
        v19 = v15 << 8;
        v20 = v16 + 32 + (v15 << 8);
        v21 = v18 << 8;
        v22 = *(double *)(v16 + 32 + (v18 << 8));
        if (v22 < *(double *)v20)
          goto LABEL_17;
        if (*(double *)v20 < v22)
          goto LABEL_22;
        v129 = __dst;
        __srcb = v7;
        if ((*(_BYTE *)(v20 + 16) & 1) != 0)
        {
          ProposedViewSize.init(_:in:by:)();
          v24 = *(_QWORD *)(v132 + 104);
          v25 = *(_BYTE *)(v132 + 112);
          v26 = *(_BYTE *)(v132 + 113);
          LODWORD(v133) = *(_DWORD *)(v132 + 96);
          *((_QWORD *)&v133 + 1) = v24;
          v134 = v25;
          v135 = v26;
          LayoutSubviews.subscript.getter();
          v133 = v136;
          v134 = v137;
          LayoutSubview.lengthThatFits(_:in:)();
          v28 = v27;
          v16 = *(_QWORD *)(v132 + 360);
          v29 = swift_isUniquelyReferenced_nonNull_native();
          a5 = v132;
          *(_QWORD *)(v132 + 360) = v16;
          if ((v29 & 1) == 0)
          {
            v64 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
            a5 = v132;
            v16 = (uint64_t)v64;
          }
          v5 = v126;
          if (v15 >= *(_QWORD *)(v16 + 16))
            goto LABEL_128;
          v30 = v16 + v19;
          *(_QWORD *)(v30 + 40) = v28;
          *(_BYTE *)(v30 + 48) = 0;
          *(_QWORD *)(a5 + 360) = v16;
          v17 = *(_QWORD *)(v16 + 16);
        }
        if (v15 >= v17)
          goto LABEL_121;
        if ((*(_BYTE *)(v16 + v19 + 64) & 1) != 0)
        {
          ProposedViewSize.init(_:in:by:)();
          v31 = *(_QWORD *)(v132 + 104);
          v32 = *(_BYTE *)(v132 + 112);
          v33 = *(_BYTE *)(v132 + 113);
          LODWORD(v133) = *(_DWORD *)(v132 + 96);
          *((_QWORD *)&v133 + 1) = v31;
          v134 = v32;
          v135 = v33;
          LayoutSubviews.subscript.getter();
          v133 = v136;
          v134 = v137;
          LayoutSubview.lengthThatFits(_:in:)();
          v35 = v34;
          v36 = *(_QWORD *)(v132 + 360);
          v37 = swift_isUniquelyReferenced_nonNull_native();
          v38 = v132;
          *(_QWORD *)(v132 + 360) = v36;
          if ((v37 & 1) == 0)
          {
            v65 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
            v38 = v132;
            v36 = (uint64_t)v65;
          }
          v5 = v126;
          if (v15 >= *(_QWORD *)(v36 + 16))
            goto LABEL_129;
          v39 = v36 + v19;
          *(_QWORD *)(v39 + 56) = v35;
          *(_BYTE *)(v39 + 64) = 0;
          *(_QWORD *)(v38 + 360) = v36;
          v40 = v38;
        }
        else
        {
          v40 = a5;
        }
        _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
        v41 = *(_QWORD *)(v40 + 360);
        v42 = *(_QWORD *)(v41 + 16);
        if (v18 >= v42)
          goto LABEL_122;
        v43 = v133;
        if ((*(_BYTE *)(v41 + v21 + 48) & 1) != 0)
        {
          ProposedViewSize.init(_:in:by:)();
          v44 = *(_QWORD *)(v132 + 104);
          v45 = *(_BYTE *)(v132 + 112);
          v46 = *(_BYTE *)(v132 + 113);
          LODWORD(v133) = *(_DWORD *)(v132 + 96);
          *((_QWORD *)&v133 + 1) = v44;
          v134 = v45;
          v135 = v46;
          LayoutSubviews.subscript.getter();
          v133 = v136;
          v134 = v137;
          LayoutSubview.lengthThatFits(_:in:)();
          v48 = v47;
          v41 = *(_QWORD *)(v132 + 360);
          v49 = swift_isUniquelyReferenced_nonNull_native();
          v50 = v132;
          *(_QWORD *)(v132 + 360) = v41;
          if ((v49 & 1) == 0)
          {
            v66 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
            v50 = v132;
            v41 = (uint64_t)v66;
          }
          v5 = v126;
          if (v18 >= *(_QWORD *)(v41 + 16))
            goto LABEL_130;
          v51 = v41 + v21;
          *(_QWORD *)(v51 + 40) = v48;
          *(_BYTE *)(v51 + 48) = 0;
          *(_QWORD *)(v50 + 360) = v41;
          v42 = *(_QWORD *)(v41 + 16);
        }
        if (v18 >= v42)
          goto LABEL_123;
        if ((*(_BYTE *)(v41 + v21 + 64) & 1) != 0)
        {
          ProposedViewSize.init(_:in:by:)();
          v52 = *(_QWORD *)(v132 + 104);
          v53 = *(_BYTE *)(v132 + 112);
          v54 = *(_BYTE *)(v132 + 113);
          LODWORD(v133) = *(_DWORD *)(v132 + 96);
          *((_QWORD *)&v133 + 1) = v52;
          v134 = v53;
          v135 = v54;
          LayoutSubviews.subscript.getter();
          v133 = v136;
          v134 = v137;
          LayoutSubview.lengthThatFits(_:in:)();
          v56 = v55;
          v57 = *(_QWORD *)(v132 + 360);
          v58 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v132 + 360) = v57;
          if ((v58 & 1) != 0)
          {
            v59 = v132;
          }
          else
          {
            v67 = specialized _ArrayBuffer._consumeAndCreateNew()(v57);
            v59 = v132;
            v57 = (uint64_t)v67;
          }
          v5 = v126;
          if (v18 >= *(_QWORD *)(v57 + 16))
            goto LABEL_131;
          v60 = v57 + v21;
          *(_QWORD *)(v60 + 56) = v56;
          *(_BYTE *)(v60 + 64) = 0;
          *(_QWORD *)(v59 + 360) = v57;
        }
        _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
        v61 = v133;
        v133 = v43;
        v136 = v61;
        v62 = MEMORY[0x18D7574C8](&v133, &v136);
        v7 = __srcb;
        a5 = v132;
        __dst = v129;
        if ((v62 & 1) != 0
          || (v133 = v43,
              v136 = v61,
              v63 = MEMORY[0x18D7574C8](&v136, &v133),
              __dst = v129,
              v7 = __srcb,
              a5 = v132,
              (v63 & 1) == 0)
          && v15 < v18)
        {
LABEL_17:
          v23 = v6 + 8;
          if (v7 < v6 || v7 >= v23 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        else
        {
LABEL_22:
          if (v7 != __dst)
            *(_QWORD *)v7 = *(_QWORD *)__dst;
          __dst += 8;
          v139 = __dst;
          v23 = v6;
        }
        v7 += 8;
        if (__dst < v14)
        {
          v6 = v23;
          if ((unint64_t)v23 < v5)
            continue;
        }
        v140 = v7;
        goto LABEL_111;
      }
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    goto LABEL_111;
  }
LABEL_132:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ArraySlice.reserveCapacity(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;

  v2 = result;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD **)v1;
  v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(), *(_QWORD *)v1 = v4, (result & 1) == 0))
  {
    v9 = v4;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
    goto LABEL_33;
  v8 = *(_QWORD *)(v1 + 8);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x1E0DEE9D8];
  }
  v9 = *(_QWORD **)(result + 16);
  if (v8 + 8 * v6 + 8 * v7 == result + 8 * (_QWORD)v9 + 32)
    goto LABEL_25;
  result = swift_release();
  while (1)
  {
    if (v7 >= v2)
      goto LABEL_22;
    v9 = *(_QWORD **)v1;
LABEL_9:
    v7 = *(_QWORD *)(v1 + 16);
    v10 = v5 - v7;
    if (__OFSUB__(v5, v7))
    {
      __break(1u);
      goto LABEL_29;
    }
    v11 = *(_QWORD *)(v1 + 8);
    if (v10 <= v2 ? v2 : v5 - v7)
      break;
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v5 >= v7)
      goto LABEL_17;
LABEL_24:
    __break(1u);
LABEL_25:
    v16 = *(_QWORD *)(result + 24);
    result = swift_release();
    v17 = (v16 >> 1) - (_QWORD)v9;
    v18 = __OFADD__(v7, v17);
    v7 += v17;
    if (v18)
      goto LABEL_34;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size_2(v4);
  v13 = result - 32;
  if (result < 32)
    v13 = result - 25;
  v4[2] = v10;
  v4[3] = 2 * (v13 >> 3);
  if (v5 < v7)
    goto LABEL_24;
LABEL_17:
  result = (uint64_t)memcpy(v4 + 4, (const void *)(v11 + 8 * v7), 8 * v10);
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v14 = v4[2];
  v15 = v7 + v14;
  if (__OFADD__(v7, v14))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v15 < v7)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  result = swift_unknownObjectRelease();
  if ((v15 & 0x8000000000000000) == 0)
  {
    *(_QWORD *)(v1 + 8) = &v4[-v7 + 4];
    *(_QWORD *)(v1 + 16) = v7;
    *(_QWORD *)(v1 + 24) = (2 * v15) | 1;
LABEL_22:
    *(_QWORD *)v1 = v4;
    return result;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  char *__dst;

  v6 = v4[2];
  v7 = v4[3] >> 1;
  v8 = v7 - v6;
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_32;
  }
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 16);
  v30 = __OFSUB__(v11, a2);
  v12 = v11 - a2;
  if (v30)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v15 = v8 - a2;
  if (__OFSUB__(v8, a2))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v30 = __OFSUB__(v15, v14);
  v16 = v15 - v14;
  if (v30)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v38 = v16;
  __dst = (char *)(v10 + 32);
  v18 = specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(v8);
  v37 = (char *)(v10 + 32 + 8 * a2 + 8 * a3);
  if (v18)
  {
    v36 = a4;
    if (a2 < 0)
      goto LABEL_46;
    v19 = v18;
    v20 = v4[2];
    v21 = (char *)(v4[1] + 8 * v20);
    v22 = &v21[8 * a2];
    if (__dst != v21 || __dst >= v22)
      memmove(__dst, v21, 8 * a2);
    v36(v10 + 32 + 8 * a2, a3);
    if (v14 < 0)
      goto LABEL_46;
    v23 = &v22[8 * v38];
    if (v37 != v23 || v37 >= &v23[8 * v14])
      memmove(v37, v23, 8 * v14);
    *(_QWORD *)(v19 + 16) = 0;
    swift_release();
LABEL_26:
    swift_retain();
    result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      v34 = *(_QWORD *)(v10 + 16);
      v30 = __OFADD__(v20, v34);
      v35 = v20 + v34;
      if (!v30)
      {
        if (v35 >= v20)
        {
          if ((v35 & 0x8000000000000000) == 0)
          {
            *v4 = v10;
            v4[1] = &__dst[-8 * v20];
            v4[2] = v20;
            v4[3] = (2 * v35) | 1;
            return result;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v25 = (void (*)(char *, uint64_t))a4;
  v20 = v4[2];
  v26 = v20 + a2;
  if (__OFADD__(v20, a2))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v26 < v20)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (__OFSUB__(v26, v20))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v27 = v4[1];
  memcpy(__dst, (const void *)(v27 + 8 * v20), 8 * a2);
  v25(&__dst[8 * a2], a3);
  v28 = v26 + v38;
  if (__OFADD__(v26, v38))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v29 = v4[3] >> 1;
  v30 = __OFSUB__(v29, v28);
  v31 = v29 < v28;
  v32 = v29 - v28;
  if (v31)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (!v30)
  {
    memcpy(v37, (const void *)(v27 + 8 * v28), 8 * v32);
    goto LABEL_26;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _SliceBuffer.count.setter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = v3 >> 1;
  v5 = __OFSUB__(v3 >> 1, v2);
  v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7)
    return result;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x1E0DEE9D8];
  }
  v8 = *(_QWORD *)(result + 16);
  v5 = __OFADD__(v8, v7);
  v9 = v8 + v7;
  if (v5)
    goto LABEL_13;
  *(_QWORD *)(result + 16) = v9;
  result = swift_release();
  v10 = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v1 + 24) = v3 & 1 | (2 * v10);
  return result;
}

uint64_t specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7)
      goto LABEL_21;
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_34;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  v13 = a4 + 8 * a5 + 8 * v8;
  if (v13 == v11 + 8 * v12 + 32)
  {
    v15 = *(_QWORD *)(v11 + 24);
    result = swift_release();
    v16 = (v15 >> 1) - v12;
    v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release();
    v14 = v8;
  }
  swift_unknownObjectRetain();
  v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      v17 = MEMORY[0x1E0DEE9D8];
    }
    v18 = *(_QWORD *)(v17 + 16);
    if (v13 == v17 + 8 * v18 + 32)
    {
      v20 = *(_QWORD *)(v17 + 24);
      result = swift_release();
      v21 = (v20 >> 1) - v18;
      v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
  }
  v19 = *(_QWORD *)(v17 + 16);
  if (v13 == v17 + 8 * v19 + 32)
  {
    v23 = *(_QWORD *)(v17 + 24);
    result = swift_release();
    v24 = (v23 >> 1) - v19;
    v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22)
      goto LABEL_21;
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7)
    v25 = v7;
  else
    v25 = v8;
  if (v25 <= v6)
    v26 = v6;
  else
    v26 = v25;
  if (!v26)
    return MEMORY[0x1E0DEE9D8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v27 = (_QWORD *)swift_allocObject();
  v28 = _swift_stdlib_malloc_size_2(v27);
  v29 = v28 - 32;
  if (v28 < 32)
    v29 = v28 - 25;
  v27[2] = v6;
  v27[3] = 2 * (v29 >> 3);
  return (uint64_t)v27;
}

uint64_t (*specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(uint64_t a1)
{
  _QWORD *v1;
  int64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (v8 + 8 * v6 + 8 * v7 != v9 + 8 * v10 + 32)
  {
    swift_release();
LABEL_8:
    v11 = v7;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v9 + 24);
  result = swift_release();
  v14 = (v12 >> 1) - v10;
  v15 = __OFADD__(v7, v14);
  v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1)
      return 0;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x1E0DEE9D8];
    }
    v16 = v8 + 8 * v6 - a1;
    v17 = v16 - 32;
    v18 = v16 - 25;
    if (v17 >= 0)
      v18 = v17;
    isUniquelyReferenced_nonNull = v7 + (v18 >> 3);
    if (!__OFADD__(v7, v18 >> 3))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4)
        return a1;
LABEL_21:
      specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

BOOL specialized static JindoTripleVStack.Position.== infix(_:_:)(double *a1, double *a2)
{
  char v2;
  char v3;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v2 = *((_BYTE *)a2 + 16);
  v3 = *((_BYTE *)a2 + 32);
  if (((_BYTE)a1[2] & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 16))
      return 0;
  }
  else
  {
    if (a1[1] != a2[1])
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if (((_BYTE)a1[4] & 1) == 0)
  {
    if (a1[3] != a2[3])
      v3 = 1;
    return (v3 & 1) == 0;
  }
  return ((_BYTE)a2[4] & 1) != 0;
}

uint64_t outlined release of JindoTripleVStack.Implementation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type JindoTripleVStack.HorizontalMode and conformance JindoTripleVStack.HorizontalMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JindoTripleVStack.HorizontalMode and conformance JindoTripleVStack.HorizontalMode;
  if (!lazy protocol witness table cache variable for type JindoTripleVStack.HorizontalMode and conformance JindoTripleVStack.HorizontalMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for JindoTripleVStack.HorizontalMode, &type metadata for JindoTripleVStack.HorizontalMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JindoTripleVStack.HorizontalMode and conformance JindoTripleVStack.HorizontalMode);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for JindoTripleVStack(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type JindoTripleVStack and conformance JindoTripleVStack();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type JindoTripleVStack and conformance JindoTripleVStack()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JindoTripleVStack and conformance JindoTripleVStack;
  if (!lazy protocol witness table cache variable for type JindoTripleVStack and conformance JindoTripleVStack)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for JindoTripleVStack, &type metadata for JindoTripleVStack);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JindoTripleVStack and conformance JindoTripleVStack);
  }
  return result;
}

void sub_187940284(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

double sub_187940294@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

ValueMetadata *type metadata accessor for JindoTripleVStack()
{
  return &type metadata for JindoTripleVStack;
}

uint64_t getEnumTagSinglePayload for JindoTripleVStack(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 56);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for JindoTripleVStack(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.Configuration()
{
  return &type metadata for JindoTripleVStack.Configuration;
}

uint64_t getEnumTagSinglePayload for JindoTripleVStack.Position(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && a1[33])
    return (*(_DWORD *)a1 + 252);
  v3 = *a1;
  v4 = v3 >= 5;
  v5 = v3 - 5;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for JindoTripleVStack.Position(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.Position()
{
  return &type metadata for JindoTripleVStack.Position;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.VerticalPlacement()
{
  return &type metadata for JindoTripleVStack.VerticalPlacement;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.HorizontalMode()
{
  return &type metadata for JindoTripleVStack.HorizontalMode;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.HorizontalSizing()
{
  return &type metadata for JindoTripleVStack.HorizontalSizing;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.ContentMargins()
{
  return &type metadata for JindoTripleVStack.ContentMargins;
}

uint64_t sub_187940448(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA07_LayoutF0VyAA11PositionKey33_92DCAEF653F89C7A009F5FFAA858DAF3LLVGGGAaBHPxAaBHD1__AmA0cH0HPyHCHCTm(a1, (uint64_t (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<PositionKey>>, &lazy protocol witness table cache variable for type _TraitWritingModifier<_LayoutTrait<PositionKey>> and conformance _TraitWritingModifier<A>);
}

void type metadata accessor for _TraitWritingModifier<_LayoutTrait<PositionKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<PositionKey>>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<PositionKey>);
    lazy protocol witness table accessor for type _LayoutTrait<PositionKey> and conformance _LayoutTrait<A>();
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<PositionKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type _LayoutTrait<PositionKey> and conformance _LayoutTrait<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutTrait<PositionKey> and conformance _LayoutTrait<A>;
  if (!lazy protocol witness table cache variable for type _LayoutTrait<PositionKey> and conformance _LayoutTrait<A>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<PositionKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1BC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutTrait<PositionKey> and conformance _LayoutTrait<A>);
  }
  return result;
}

uint64_t sub_187940534(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA07_LayoutF0VyAA11PositionKey33_92DCAEF653F89C7A009F5FFAA858DAF3LLVGGGAaBHPxAaBHD1__AmA0cH0HPyHCHCTm(a1, (uint64_t (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<VerticalPlacementKey>>, &lazy protocol witness table cache variable for type _TraitWritingModifier<_LayoutTrait<VerticalPlacementKey>> and conformance _TraitWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA07_LayoutF0VyAA11PositionKey33_92DCAEF653F89C7A009F5FFAA858DAF3LLVGGGAaBHPxAaBHD1__AmA0cH0HPyHCHCTm(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v5 = *(_QWORD *)(a1 + 8);
  a2(255);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v5;
  v8[1] = lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<ContentMarginsKey>> and conformance _TraitWritingModifier<A>(a3, a2);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

void type metadata accessor for _TraitWritingModifier<_LayoutTrait<VerticalPlacementKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<VerticalPlacementKey>>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<VerticalPlacementKey>);
    lazy protocol witness table accessor for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>();
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<VerticalPlacementKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>;
  if (!lazy protocol witness table cache variable for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<VerticalPlacementKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1BC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>);
  }
  return result;
}

uint64_t sub_187940694(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA07_LayoutF0VyAA11PositionKey33_92DCAEF653F89C7A009F5FFAA858DAF3LLVGGGAaBHPxAaBHD1__AmA0cH0HPyHCHCTm(a1, (uint64_t (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<PriorityKey>>, &lazy protocol witness table cache variable for type _TraitWritingModifier<_LayoutTrait<PriorityKey>> and conformance _TraitWritingModifier<A>);
}

void type metadata accessor for _TraitWritingModifier<_LayoutTrait<PriorityKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<PriorityKey>>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<PriorityKey>);
    lazy protocol witness table accessor for type _LayoutTrait<PriorityKey> and conformance _LayoutTrait<A>();
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<PriorityKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type _LayoutTrait<PriorityKey> and conformance _LayoutTrait<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutTrait<PriorityKey> and conformance _LayoutTrait<A>;
  if (!lazy protocol witness table cache variable for type _LayoutTrait<PriorityKey> and conformance _LayoutTrait<A>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<PriorityKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1BC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutTrait<PriorityKey> and conformance _LayoutTrait<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<ContentMarginsKey>> and conformance _TraitWritingModifier<A>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1879407C0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA07_LayoutF0VyAA11PositionKey33_92DCAEF653F89C7A009F5FFAA858DAF3LLVGGGAaBHPxAaBHD1__AmA0cH0HPyHCHCTm(a1, (uint64_t (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<ContentMarginsKey>>, &lazy protocol witness table cache variable for type _TraitWritingModifier<_LayoutTrait<ContentMarginsKey>> and conformance _TraitWritingModifier<A>);
}

void type metadata accessor for _TraitWritingModifier<_LayoutTrait<ContentMarginsKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<ContentMarginsKey>>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<ContentMarginsKey>);
    lazy protocol witness table accessor for type _LayoutTrait<ContentMarginsKey> and conformance _LayoutTrait<A>();
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<ContentMarginsKey>>);
  }
}

void type metadata accessor for _LayoutTrait<PositionKey>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for _LayoutTrait();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t lazy protocol witness table accessor for type _LayoutTrait<ContentMarginsKey> and conformance _LayoutTrait<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutTrait<ContentMarginsKey> and conformance _LayoutTrait<A>;
  if (!lazy protocol witness table cache variable for type _LayoutTrait<ContentMarginsKey> and conformance _LayoutTrait<A>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<ContentMarginsKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1BC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutTrait<ContentMarginsKey> and conformance _LayoutTrait<A>);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for JindoTripleVStack.Position.Region(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_187940940 + 4 * byte_187C6F805[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_187940974 + 4 * byte_187C6F800[v4]))();
}

uint64_t sub_187940974(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18794097C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187940984);
  return result;
}

uint64_t sub_187940990(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187940998);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_18794099C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879409A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for JindoTripleVStack.Position.Region()
{
  return &unk_1E1AC51E0;
}

uint64_t storeEnumTagSinglePayload for JindoTripleVStack.Configuration.Sizing(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187940A0C + 4 * byte_187C6F80F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187940A40 + 4 * byte_187C6F80A[v4]))();
}

uint64_t sub_187940A40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187940A48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187940A50);
  return result;
}

uint64_t sub_187940A5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187940A64);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187940A68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187940A70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.Configuration.Sizing()
{
  return &type metadata for JindoTripleVStack.Configuration.Sizing;
}

void *type metadata accessor for ContentMarginsKey()
{
  return &unk_1E1AC2C88;
}

void *type metadata accessor for PriorityKey()
{
  return &unk_1E1AB0078;
}

void *type metadata accessor for VerticalPlacementKey()
{
  return &unk_1E1AD5E88;
}

void *type metadata accessor for PositionKey()
{
  return &unk_1E1AB0058;
}

unint64_t lazy protocol witness table accessor for type JindoTripleVStack.Configuration.Sizing and conformance JindoTripleVStack.Configuration.Sizing()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JindoTripleVStack.Configuration.Sizing and conformance JindoTripleVStack.Configuration.Sizing;
  if (!lazy protocol witness table cache variable for type JindoTripleVStack.Configuration.Sizing and conformance JindoTripleVStack.Configuration.Sizing)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for JindoTripleVStack.Configuration.Sizing, &type metadata for JindoTripleVStack.Configuration.Sizing);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JindoTripleVStack.Configuration.Sizing and conformance JindoTripleVStack.Configuration.Sizing);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type JindoTripleVStack.Position.Region and conformance JindoTripleVStack.Position.Region()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JindoTripleVStack.Position.Region and conformance JindoTripleVStack.Position.Region;
  if (!lazy protocol witness table cache variable for type JindoTripleVStack.Position.Region and conformance JindoTripleVStack.Position.Region)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for JindoTripleVStack.Position.Region, &unk_1E1AC51E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JindoTripleVStack.Position.Region and conformance JindoTripleVStack.Position.Region);
  }
  return result;
}

uint64_t specialized Sequence.first(where:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t, uint64_t, double, double), double a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v15;

  if (result == a2)
  {
    return 0;
  }
  else
  {
    v8 = result;
    if (a2 >= result)
    {
      while (v8 < a2)
      {
        v15 = v8;
        result = a5(&v15, a3, a4, a6, a7);
        if (v7 || (result & 1) != 0)
          return v8;
        if (a2 == ++v8)
          return 0;
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;

  v16 = a6;
  v15 = MEMORY[0x1E0DEE9D8];
  v8 = a1;
LABEL_2:
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  result = v8;
  while (1)
  {
    if (a2 == result)
      return v15;
    if (a2 < a1)
      break;
    if (v8 < a1)
      goto LABEL_18;
    if (v9 == result)
      goto LABEL_19;
    v11 = result + 1;
    LayoutSubviews.subscript.getter();
    type metadata accessor for _LayoutTrait<PositionKey>(0, &lazy cache variable for type metadata for _LayoutTrait<PositionKey>);
    lazy protocol witness table accessor for type _LayoutTrait<PositionKey> and conformance _LayoutTrait<A>();
    LayoutProxy.subscript.getter();
    result = v11;
    if (a3 == v16)
    {
      v12 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v12 = v15;
      }
      v14 = *(_QWORD *)(v12 + 16);
      v13 = *(_QWORD *)(v12 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
        v12 = v15;
      }
      *(_QWORD *)(v12 + 16) = v14 + 1;
      v15 = v12;
      *(_QWORD *)(v12 + 8 * v14 + 32) = v11 - 1;
      v8 = v11;
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

void specialized Collection.prefix(while:)(void *__src@<X4>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, unint64_t a5@<X3>, _QWORD *a6@<X8>)
{
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD __dst[47];
  __int16 v15;

  v10 = a5 >> 1;
  v11 = a4;
  if (a5 >> 1 != a4)
  {
    v12 = a2;
    memcpy(__dst, __src, 0x162uLL);
    *(_OWORD *)&__dst[45] = *(_OWORD *)&__dst[12];
    v15 = __dst[14];
    type metadata accessor for _LayoutTrait<PositionKey>(0, &lazy cache variable for type metadata for _LayoutTrait<VerticalPlacementKey>);
    v11 = a4;
    while (v11 < v10)
    {
      LayoutSubviews.subscript.getter();
      lazy protocol witness table accessor for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>();
      LayoutProxy.subscript.getter();
      if (v13 == 1)
        goto LABEL_7;
      if (v10 == ++v11)
      {
        v11 = v10;
LABEL_7:
        a2 = v12;
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_8:
  if (v10 < a4 || v11 < a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v10 >= v11)
  {
    *a6 = a4;
    a6[1] = v11;
    a6[2] = a2;
    a6[3] = a3;
    a6[4] = a4;
    a6[5] = a5;
    return;
  }
LABEL_14:
  __break(1u);
}

double specialized closure #1 in JindoTripleVStack.ProposedMetrics.init(stacks:notchSize:centerWidth:horizontalSizing:fullWidth:leadingCenterSpacing:trailingCenterSpacing:leadingTrailingSpacing:proposal:)(char a1, char a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;

  if ((a1 & 1) != 0)
    a4 = 0.0;
  v6 = a3 - a4;
  if (v6 < 0.0)
    v6 = 0.0;
  if ((a1 & 1) != 0)
  {
    if (a2 == 1)
      return v6;
    if (a2 == 2)
      return 0.0;
    goto LABEL_14;
  }
  if (a2 == 2)
    return a6;
  if (a2 != 1)
  {
LABEL_14:
    v8 = v6 * 0.5;
    if (v8 < 0.0)
      return 0.0;
    else
      return v8;
  }
  v7 = v6 - a5;
  if (v7 < 0.0)
    return 0.0;
  else
    return v7;
}

unint64_t specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  const void *v11;
  uint64_t v13;
  uint64_t v14;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = a3 - v4;
  if (__OFSUB__(a3, v4))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v6)
    goto LABEL_14;
  v7 = *v3;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = __OFSUB__(v8, a2);
  v10 = v8 - a2;
  if (v9)
    goto LABEL_18;
  if (v10 < 0)
  {
LABEL_21:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result = v7 + 32 + 8 * result + 8 * a3;
  v11 = (const void *)(v7 + 32 + 8 * a2);
  if ((const void *)result != v11 || result >= (unint64_t)v11 + 8 * v10)
    result = (unint64_t)memmove((void *)result, v11, 8 * v10);
  v13 = *(_QWORD *)(v7 + 16);
  v9 = __OFADD__(v13, v6);
  v14 = v13 + v6;
  if (v9)
    goto LABEL_19;
  *(_QWORD *)(v7 + 16) = v14;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

_QWORD *specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1[2];
  v3 = v1[3];
  v4 = (v3 >> 1) - v2;
  if (__OFSUB__(v3 >> 1, v2))
    goto LABEL_48;
  v5 = result[4];
  v35 = result[3] >> 1;
  if (v5 == v35)
    return result;
  v6 = result[2];
  if (v5 < v6 || v5 >= v35)
    goto LABEL_49;
  v8 = v5 + 1;
  v9 = *(_QWORD *)(result[1] + 8 * v5);
  v28 = result[1];
  v29 = result[2];
  v30 = v1;
  while (!__OFADD__(v4, 1))
  {
    v36 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v4, v4 + 1, *v1, v1[1], v2, v3);
    v10 = (void (*)(uint64_t, uint64_t))specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
    specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v36, v4, 0, v10);
    swift_release();
    result = (_QWORD *)swift_release();
    v2 = v1[2];
    v3 = v1[3];
    v11 = (v3 >> 1) - v2;
    if (__OFSUB__(v3 >> 1, v2))
      goto LABEL_43;
    v31 = v4 + 1;
    v32 = v3 >> 1;
    v12 = v1[1];
    if ((v3 & 1) != 0)
    {
      v33 = v4;
      v13 = v1[2];
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain();
      v14 = swift_dynamicCastClass();
      if (!v14)
      {
        swift_unknownObjectRelease();
        v14 = MEMORY[0x1E0DEE9D8];
      }
      v15 = *(_QWORD *)(v14 + 16);
      if (v12 + 8 * v13 + 8 * v11 == v14 + 8 * v15 + 32)
      {
        v17 = *(_QWORD *)(v14 + 24);
        result = (_QWORD *)swift_release();
        v18 = (v17 >> 1) - v15;
        v19 = __OFADD__(v11, v18);
        v16 = v11 + v18;
        if (v19)
          goto LABEL_47;
        v6 = v29;
      }
      else
      {
        result = (_QWORD *)swift_release();
        v16 = v11;
      }
      v2 = v13;
      v4 = v33;
      if (v33 >= v16)
      {
LABEL_32:
        v20 = 0;
        goto LABEL_33;
      }
    }
    else
    {
      v16 = (v3 >> 1) - v2;
      if (v4 >= v11)
        goto LABEL_32;
    }
    *(_QWORD *)(v12 + 8 * v2 + 8 * v4) = v9;
    if (v8 != v35)
    {
      v21 = 0;
      v22 = ~v4 + v16;
      while (v8 >= v6 && v8 + v21 < v35)
      {
        v9 = *(_QWORD *)(v28 + 8 * v8 + 8 * v21);
        v20 = v22 != v21;
        if (v22 == v21)
        {
          v8 += v21 + 1;
          v4 = v16;
          goto LABEL_33;
        }
        *(_QWORD *)(v12 + 8 * v4 + 8 * v2 + 8 + 8 * v21++) = v9;
        if (!(v8 - v35 + v21))
        {
          v9 = 0;
          v4 = v31 + v21;
          v8 = v35;
          goto LABEL_33;
        }
      }
      goto LABEL_41;
    }
    v9 = 0;
    v20 = 1;
    v4 = v31;
    v8 = v35;
LABEL_33:
    v23 = v4 - v11;
    if (__OFSUB__(v4, v11))
      goto LABEL_44;
    v1 = v30;
    if (v23)
    {
      v34 = v4;
      v24 = v2;
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain();
      result = (_QWORD *)swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        result = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v25 = result[2];
      v19 = __OFADD__(v25, v23);
      v26 = v25 + v23;
      if (v19)
        goto LABEL_45;
      result[2] = v26;
      result = (_QWORD *)swift_release();
      v27 = v32 + v23;
      if (__OFADD__(v32, v23))
        goto LABEL_46;
      if ((v27 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
        break;
      }
      v3 = v3 & 1 | (2 * v27);
      v30[3] = v3;
      v6 = v29;
      v2 = v24;
      v4 = v34;
    }
    if (v20)
      return result;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

_QWORD *specialized ArraySlice.append<A>(contentsOf:)(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD v32[5];

  v30 = result;
  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_35;
  }
  v8 = v4[2];
  v7 = v4[3];
  v9 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if ((v7 & 1) == 0)
  {
LABEL_8:
    v15 = v9;
    goto LABEL_10;
  }
  v12 = v4[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
  }
  v14 = *(_QWORD *)(v13 + 16);
  if (v12 + 8 * v8 + 8 * v9 != v13 + 8 * v14 + 32)
  {
    swift_release();
    goto LABEL_8;
  }
  v16 = *(_QWORD *)(v13 + 24);
  result = (_QWORD *)swift_release();
  v17 = (v16 >> 1) - v14;
  v18 = __OFADD__(v9, v17);
  v15 = v9 + v17;
  if (v18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
LABEL_10:
  result = (_QWORD *)(v9 + v6);
  if (__OFADD__(v9, v6))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v15 < (uint64_t)result)
  {
    if (v15 + 0x4000000000000000 < 0)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v19 = 2 * v15;
    if (v19 > (uint64_t)result)
      result = (_QWORD *)v19;
  }
  result = (_QWORD *)specialized ArraySlice.reserveCapacity(_:)((uint64_t)result);
  v21 = v4[2];
  v20 = v4[3];
  v22 = (v20 >> 1) - v21;
  if (__OFSUB__(v20 >> 1, v21))
    goto LABEL_37;
  v23 = (void *)(v4[1] + 8 * v21 + 8 * v22);
  if ((v20 & 1) == 0)
  {
LABEL_21:
    v26 = v22;
    goto LABEL_23;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v24 = swift_dynamicCastClass();
  if (!v24)
  {
    swift_unknownObjectRelease();
    v24 = MEMORY[0x1E0DEE9D8];
  }
  v25 = *(_QWORD *)(v24 + 16);
  if (v23 != (void *)(v24 + 8 * v25 + 32))
  {
    result = (_QWORD *)swift_release();
    goto LABEL_21;
  }
  v27 = *(_QWORD *)(v24 + 24);
  result = (_QWORD *)swift_release();
  v28 = (v27 >> 1) - v25;
  v18 = __OFADD__(v22, v28);
  v26 = v22 + v28;
  if (v18)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_23:
  v29 = v26 - v22;
  if (__OFSUB__(v26, v22))
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      v6 = 0;
      v5 = a3;
      goto LABEL_31;
    }
    goto LABEL_39;
  }
  if (v29 < v6)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  result = memcpy(v23, (const void *)(a2 + 8 * a3), 8 * v6);
  if (v6 > 0)
  {
    result = (_QWORD *)(v22 + v6);
    if (__OFADD__(v22, v6))
    {
LABEL_44:
      __break(1u);
      return result;
    }
    result = (_QWORD *)specialized _SliceBuffer.count.setter((uint64_t)result);
  }
LABEL_31:
  if (v6 == v29)
  {
    v32[0] = v30;
    v32[1] = a2;
    v32[2] = a3;
    v32[3] = a4;
    v32[4] = v5;
    return specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(v32);
  }
  return result;
}

uint64_t specialized JindoTripleVStack.Implementation.resizeChildrenAdjacentToNotch(in:metrics:)(uint64_t a1)
{
  const void *v1;
  double v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _BYTE *v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  char *v20;
  uint64_t result;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[376];
  _OWORD v29[3];
  _QWORD __dst[47];
  uint64_t v31;
  uint64_t v32[3];

  memcpy(__dst, v1, sizeof(__dst));
  v4 = __dst[20];
  v5 = __dst[21];
  v6 = __dst[29];
  v7 = __dst[36];
  v8 = (char *)__dst[45];
  v9 = __dst[37];
  v23 = v1;
  memcpy(v28, v1, sizeof(v28));
  v10 = v28;
  JindoTripleVStack.Implementation.bottomOf(previousChild:in:includeSpacing:)(__dst[29], 1, 0);
  v12 = *(double *)(a1 + 32);
  v31 = v4;
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (*(_QWORD *)(v4 + 16) < v5)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v13 = v11;
  outlined retain of [Text.Modifier]((uint64_t)&v31);
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  v14 = (2 * v5) | 1;
  v5 = 0;
  specialized Collection.prefix(while:)(__dst, v4, v4 + 32, 0, v14, v29);
  *(_OWORD *)v28 = v29[0];
  *(_OWORD *)&v28[16] = v29[1];
  *(_OWORD *)&v28[32] = v29[2];
  type metadata accessor for Slice<LazySequence<ArraySlice<Int>>>();
  v6 = v15;
  Slice.indices.getter();
  outlined release of Slice<LazySequence<ArraySlice<Int>>>((uint64_t)v29);
  LOBYTE(v10) = v24;
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  v16 = specialized Sequence.first(where:)(v24, v25, (uint64_t)__dst, 0, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, double, double))closure #2 in closure #1 in JindoTripleVStack.Implementation.indexToResizeInNotch(_:availableWidth:centerHeight:), v12, v13);
  v18 = v17;
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  v2 = *(double *)(a1 + 40);
  v32[0] = v7;
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (*(_QWORD *)(v7 + 16) < v9)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  a1 = v7 + 32;
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  outlined retain of [Text.Modifier]((uint64_t)v32);
  specialized Collection.prefix(while:)(__dst, v7, v7 + 32, 0, (2 * v9) | 1, v28);
  Slice.indices.getter();
  outlined release of Slice<LazySequence<ArraySlice<Int>>>((uint64_t)v28);
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  v6 = specialized Sequence.first(where:)(v26, v27, (uint64_t)__dst, 2, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, double, double))closure #2 in closure #1 in JindoTripleVStack.Implementation.indexToResizeInNotch(_:availableWidth:centerHeight:), v2, v13);
  LOBYTE(v10) = v19;
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  if ((v18 & 1) != 0)
  {
    if ((v10 & 1) != 0)
      return 0;
LABEL_14:
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6 < *(_QWORD *)(v7 + 16))
      {
        v6 = *(_QWORD *)(a1 + 8 * v6);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          if ((v6 & 0x8000000000000000) == 0)
            goto LABEL_18;
          goto LABEL_33;
        }
LABEL_32:
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
        v8 = (char *)result;
        if ((v6 & 0x8000000000000000) == 0)
        {
LABEL_18:
          if (v6 < *((_QWORD *)v8 + 2))
          {
            v22 = &v8[256 * v6];
            *((double *)v22 + 29) = v2;
            *((_WORD *)v22 + 120) = 256;
            *((_QWORD *)v22 + 5) = 0;
            result = 1;
            v22[48] = 1;
            *((_QWORD *)v22 + 7) = 0;
            v22[64] = 1;
            v22[280] = v22[280] & 0xF5 | 8;
            v23[45] = v8;
            return result;
          }
          goto LABEL_34;
        }
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        return result;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if ((v16 & 0x8000000000000000) != 0)
    goto LABEL_25;
  if (v16 >= *(_QWORD *)(v4 + 16))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v5 = *(_QWORD *)(v4 + 32 + 8 * v16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_10;
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_27:
  v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_28;
LABEL_10:
  if (v5 >= *((_QWORD *)v8 + 2))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v20 = &v8[256 * v5];
  *((double *)v20 + 29) = v12;
  *((_WORD *)v20 + 120) = 256;
  *((_QWORD *)v20 + 5) = 0;
  result = 1;
  v20[48] = 1;
  *((_QWORD *)v20 + 7) = 0;
  v20[64] = 1;
  v20[280] = v20[280] & 0xF5 | 2;
  v23[45] = v8;
  if ((v10 & 1) == 0)
    goto LABEL_14;
  return result;
}

uint64_t specialized JindoTripleVStack.Implementation.place(indices:of:minorAxisAnchor:bounds:)(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v9;
  unint64_t v10;
  char v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  double v22;
  double v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  double v36;
  double v37;
  void (*v38)(__int128 *, _QWORD);
  double *v39;
  double v40;
  double v41;
  void (*v42)(__int128 *, _QWORD);
  double *v43;
  double v44;
  void (*v45)(__int128 *, _QWORD);
  double *v46;
  uint64_t v47;
  double MinX;
  void (*v49)(__int128 *, _QWORD);
  double *v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  int v54;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char v62;
  __int128 v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[8];
  _BYTE v70[80];
  __int128 v71;
  _OWORD v72[3];
  CGRect v73;
  CGRect v74;
  CGRect v75;

  v10 = a9 >> 1;
  if (a9 >> 1 != a8)
  {
    if ((uint64_t)(a9 >> 1) <= a8)
    {
LABEL_12:
      __break(1u);
      return result;
    }
    v54 = *(_DWORD *)(v9 + 96);
    v53 = *(_QWORD *)(v9 + 104);
    v52 = *(_BYTE *)(v9 + 112);
    v16 = *(_BYTE *)(v9 + 113);
    v56 = *(_QWORD *)(v9 + 360);
    result = swift_unknownObjectRetain();
    v18 = *(_QWORD *)(a7 + 8 * a8);
    if ((v18 & 0x8000000000000000) == 0)
    {
      v19 = ~a8 + v10;
      v20 = (unint64_t *)(a7 + 8 * a8 + 8);
      while (v18 < *(_QWORD *)(v56 + 16))
      {
        v21 = v56 + 32 + (v18 << 8);
        EdgeInsets.in(_:)();
        v23 = v22;
        v24 = *(_OWORD *)v21;
        v25 = *(_OWORD *)(v21 + 16);
        v26 = *(_OWORD *)(v21 + 48);
        v69[2] = *(_OWORD *)(v21 + 32);
        v69[3] = v26;
        v69[0] = v24;
        v69[1] = v25;
        v27 = *(_OWORD *)(v21 + 64);
        v28 = *(_OWORD *)(v21 + 80);
        v29 = *(_OWORD *)(v21 + 112);
        v69[6] = *(_OWORD *)(v21 + 96);
        v69[7] = v29;
        v69[4] = v27;
        v69[5] = v28;
        v30 = *(_OWORD *)(v21 + 128);
        v31 = *(_OWORD *)(v21 + 144);
        v32 = *(_OWORD *)(v21 + 176);
        *(_OWORD *)&v70[32] = *(_OWORD *)(v21 + 160);
        *(_OWORD *)&v70[48] = v32;
        *(_OWORD *)v70 = v30;
        *(_OWORD *)&v70[16] = v31;
        v33 = *(_OWORD *)(v21 + 192);
        v34 = *(_OWORD *)(v21 + 208);
        v35 = *(_OWORD *)(v21 + 224);
        *(_OWORD *)((char *)v72 + 9) = *(_OWORD *)(v21 + 233);
        v71 = v34;
        v72[0] = v35;
        *(_OWORD *)&v70[64] = v33;
        v65 = *(_OWORD *)&v70[8];
        v66 = *(_OWORD *)&v70[24];
        v67 = *(_OWORD *)&v70[40];
        v68 = *(_OWORD *)&v70[56];
        outlined retain of JindoTripleVStack.Child((uint64_t)v69);
        EdgeInsets.horizontal.getter();
        v37 = v36;
        v38 = (void (*)(__int128 *, _QWORD))ViewSize.width.modify();
        *v39 = *v39 - v37;
        v38(&v57, 0);
        EdgeInsets.vertical.getter();
        v41 = v40;
        v42 = (void (*)(__int128 *, _QWORD))ViewSize.height.modify();
        *v43 = *v43 - v41;
        v42(&v57, 0);
        v73.origin.x = a2;
        v73.origin.y = a3;
        v73.size.width = a4;
        v73.size.height = a5;
        v44 = v23 + CGRectGetMinY(v73);
        v45 = (void (*)(__int128 *, _QWORD))ViewOrigin.y.modify();
        *v46 = v44 + *v46;
        v45(&v57, 0);
        v74.origin.x = a2;
        v74.origin.y = a3;
        v74.size.width = a4;
        v74.size.height = a5;
        CGRectGetWidth(v74);
        v47 = *(_QWORD *)(v21 + 160);
        *(_QWORD *)&v57 = *(_QWORD *)(v21 + 152);
        *((_QWORD *)&v57 + 1) = v47;
        v58 = *(_OWORD *)(v21 + 168);
        v59 = *(_OWORD *)(v21 + 184);
        ViewDimensions.width.getter();
        ViewOrigin.x.setter();
        LOBYTE(v57) = v16;
        ViewGeometry.finalizeLayoutDirection(_:parentSize:)();
        v75.origin.x = a2;
        v75.origin.y = a3;
        v75.size.width = a4;
        v75.size.height = a5;
        MinX = CGRectGetMinX(v75);
        v49 = (void (*)(__int128 *, _QWORD))ViewOrigin.x.modify();
        *v50 = MinX + *v50;
        v49(&v57, 0);
        LODWORD(v57) = v54;
        *((_QWORD *)&v57 + 1) = v53;
        LOBYTE(v58) = v52;
        BYTE1(v58) = v16;
        LayoutSubviews.subscript.getter();
        v62 = v64;
        v57 = v65;
        v58 = v66;
        v59 = v67;
        v60 = v68;
        v61 = v63;
        LayoutSubview.place(in:layoutDirection:)();
        result = swift_release();
        if (!v19)
          return swift_unknownObjectRelease();
        v51 = *v20++;
        v18 = v51;
        --v19;
        if ((v51 & 0x8000000000000000) != 0)
          goto LABEL_8;
      }
      __break(1u);
      goto LABEL_12;
    }
LABEL_8:
    __break(1u);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t outlined retain of JindoTripleVStack.Implementation(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined retain of JindoTripleVStack.Child(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t outlined init with take of Int?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Slice<LazySequence<ArraySlice<Int>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Slice<LazySequence<ArraySlice<Int>>>)
  {
    type metadata accessor for LazySequence<ArraySlice<Int>>();
    lazy protocol witness table accessor for type LazySequence<ArraySlice<Int>> and conformance <> LazySequence<A>();
    v0 = type metadata accessor for Slice();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Slice<LazySequence<ArraySlice<Int>>>);
  }
}

void type metadata accessor for LazySequence<ArraySlice<Int>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LazySequence<ArraySlice<Int>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for ArraySlice<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEBF30]);
    lazy protocol witness table accessor for type ArraySlice<Int> and conformance ArraySlice<A>();
    v0 = type metadata accessor for LazySequence();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazySequence<ArraySlice<Int>>);
  }
}

unint64_t lazy protocol witness table accessor for type ArraySlice<Int> and conformance ArraySlice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for ArraySlice<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEBF30]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEBF78], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for ArraySlice<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEBF30]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEBF88], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazySequence<ArraySlice<Int>> and conformance <> LazySequence<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type LazySequence<ArraySlice<Int>> and conformance <> LazySequence<A>;
  if (!lazy protocol witness table cache variable for type LazySequence<ArraySlice<Int>> and conformance <> LazySequence<A>)
  {
    type metadata accessor for LazySequence<ArraySlice<Int>>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ArraySlice<Int> and conformance ArraySlice<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC328], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazySequence<ArraySlice<Int>> and conformance <> LazySequence<A>);
  }
  return result;
}

uint64_t outlined release of Slice<LazySequence<ArraySlice<Int>>>(uint64_t a1)
{
  swift_unknownObjectRelease();
  return a1;
}

uint64_t outlined retain of JindoTripleVStack.StackHeader(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_187942090()
{
  return objectdestroyTm_30();
}

uint64_t sub_187942098()
{
  return objectdestroyTm_30();
}

uint64_t outlined retain of JindoTripleVStack.StackIndexedStorage<JindoTripleVStack.StackHeader>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of JindoTripleVStack.StackIndexedStorage<JindoTripleVStack.StackHeader>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for JindoTripleVStack.Child()
{
  return swift_release();
}

uint64_t initializeWithCopy for JindoTripleVStack.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v3 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v3;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for JindoTripleVStack.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v10;
  v11 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v11;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v12 = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v12;
  *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

uint64_t assignWithTake for JindoTripleVStack.Child(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_release();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

uint64_t getEnumTagSinglePayload for JindoTripleVStack.Child(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 249))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 152);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JindoTripleVStack.Child(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 248) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 249) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 152) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 249) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.Child()
{
  return &type metadata for JindoTripleVStack.Child;
}

uint64_t getEnumTagSinglePayload for JindoTripleVStack.MajorAxisGroupState(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[80])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for JindoTripleVStack.MajorAxisGroupState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.MajorAxisGroupState()
{
  return &type metadata for JindoTripleVStack.MajorAxisGroupState;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.MajorAxisGroup.Group()
{
  return &type metadata for JindoTripleVStack.MajorAxisGroup.Group;
}

uint64_t destroy for JindoTripleVStack.Header()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for JindoTripleVStack.Header(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v5 = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = v5;
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  v6 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v6;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v7 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v7;
  v8 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v8;
  v9 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v9;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v10 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v10;
  v11 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v11;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  v12 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v12;
  v13 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v13;
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_BYTE *)(a1 + 353) = *(_BYTE *)(a2 + 353);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JindoTripleVStack.Header(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  v5 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v5;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  LOBYTE(v5) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v6 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v7 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v7;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v8 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v8;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  v9 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v9;
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_BYTE *)(a1 + 353) = *(_BYTE *)(a2 + 353);
  return a1;
}

void *__swift_memcpy354_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x162uLL);
}

uint64_t assignWithTake for JindoTripleVStack.Header(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v4;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v5 = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_BYTE *)(a1 + 353) = *(_BYTE *)(a2 + 353);
  return a1;
}

uint64_t getEnumTagSinglePayload for JindoTripleVStack.Header(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 354))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JindoTripleVStack.Header(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 344) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_WORD *)(result + 352) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 354) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 160) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 354) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for JindoTripleVStack.Header()
{
  return &unk_1E1AC5148;
}

uint64_t type metadata completion function for JindoTripleVStack.StackIndexedStorage()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for JindoTripleVStack.StackIndexedStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v16;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  v11 = ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, *(_QWORD *)(a3 + 16));
    v16 = ((unint64_t)a2 + v10) & v9;
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)v16, v5);
    v15((uint64_t *)((v10 + (((unint64_t)v4 + v10) & v9)) & v9), (uint64_t *)((v10 + v16) & v9), v5);
  }
  return v4;
}

uint64_t destroy for JindoTripleVStack.StackIndexedStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(a1, v3);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  v8 = (v5 + v6 + a1) & ~v6;
  v10(v8, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)((v7 + v8) & ~v6, v3);
}

uint64_t initializeWithCopy for JindoTripleVStack.StackIndexedStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t assignWithCopy for JindoTripleVStack.StackIndexedStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t initializeWithTake for JindoTripleVStack.StackIndexedStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t assignWithTake for JindoTripleVStack.StackIndexedStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for JindoTripleVStack.StackIndexedStorage(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = ((*(_QWORD *)(v4 + 64)
       + *(unsigned __int8 *)(v4 + 80)
       + ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187943180 + 4 * byte_187C6F814[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for JindoTripleVStack.StackIndexedStorage(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, ((*(_QWORD *)(v6 + 64)+ *(unsigned __int8 *)(v6 + 80)+ ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for JindoTripleVStack.StackIndexedStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JindoTripleVStack.StackIndexedStorage);
}

void *type metadata accessor for JindoTripleVStack.MajorAxisRangeCache()
{
  return &unk_1E1AC4F18;
}

uint64_t storeEnumTagSinglePayload for JindoTripleVStack.HorizontalMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187943400 + 4 * byte_187C6F827[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187943434 + 4 * byte_187C6F822[v4]))();
}

uint64_t sub_187943434(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18794343C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187943444);
  return result;
}

uint64_t sub_187943450(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187943458);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18794345C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187943464(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for JindoTripleVStack.Stack()
{
  return &unk_1E1AC5090;
}

uint64_t destroy for JindoTripleVStack.MajorAxisGroup()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for JindoTripleVStack.MajorAxisGroup(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for JindoTripleVStack.MajorAxisGroup(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for JindoTripleVStack.MajorAxisGroup(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.MajorAxisGroup()
{
  return &type metadata for JindoTripleVStack.MajorAxisGroup;
}

unint64_t lazy protocol witness table accessor for type [JindoTripleVStack.Stack] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [JindoTripleVStack.Stack] and conformance [A];
  if (!lazy protocol witness table cache variable for type [JindoTripleVStack.Stack] and conformance [A])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [JindoTripleVStack.Stack], (uint64_t)&unk_1E1AC5090, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [JindoTripleVStack.Stack] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type JindoTripleVStack.Stack and conformance JindoTripleVStack.Stack()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JindoTripleVStack.Stack and conformance JindoTripleVStack.Stack;
  if (!lazy protocol witness table cache variable for type JindoTripleVStack.Stack and conformance JindoTripleVStack.Stack)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for JindoTripleVStack.Stack, &unk_1E1AC5090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JindoTripleVStack.Stack and conformance JindoTripleVStack.Stack);
  }
  return result;
}

uint64_t destroy for JindoTripleVStack.StackHeader()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for JindoTripleVStack.StackHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JindoTripleVStack.StackHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for JindoTripleVStack.StackHeader(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

void *type metadata accessor for JindoTripleVStack.StackHeader()
{
  return &unk_1E1AC49B0;
}

void *type metadata accessor for JindoTripleVStack.FixedProposal()
{
  return &unk_1E1AC4B68;
}

void CGDrawingView.options.didset(unsigned __int8 *a1)
{
  char *v1;
  char *v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v9;
  id v11;
  id v12;

  v2 = &v1[OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options];
  v3 = *(_DWORD *)&v1[OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options + 12];
  if (*a1 != v1[OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options])
  {
LABEL_20:
    objc_msgSend(v1, sel_setOpaque_, (v3 >> 1) & 1);
    v11 = objc_msgSend(v1, sel_layer);
    v12 = (id)PlatformDrawableOptions.caLayerContentsFormat.getter();
    objc_msgSend(v11, sel_setContentsFormat_, v12);

    return;
  }
  v4 = *((_DWORD *)a1 + 3);
  v5 = a1[16];
  v6 = v2[16];
  if (a1[8] == 1)
  {
    if (v4 == v3)
      v7 = v2[8];
    else
      v7 = 0;
    if (v7 != 1 || v5 != v6)
      goto LABEL_20;
  }
  else
  {
    if ((v2[8] & 1) != 0)
      goto LABEL_20;
    v9 = *((_DWORD *)a1 + 1) == *((_DWORD *)v2 + 1) && v4 == v3;
    if (!v9 || v5 != v6)
      goto LABEL_20;
  }
}

void (*CGDrawingView.options.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char v6;
  int v7;
  char v8;
  int v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options;
  *v3 = v1;
  v3[1] = v4;
  v5 = (char *)(v1 + v4);
  v6 = *v5;
  v7 = *((_DWORD *)v5 + 1);
  v8 = v5[8];
  v9 = *((_DWORD *)v5 + 3);
  LOBYTE(v5) = v5[16];
  *((_DWORD *)v3 + 5) = v7;
  *((_BYTE *)v3 + 24) = v8;
  *((_DWORD *)v3 + 7) = v9;
  *((_BYTE *)v3 + 32) = (_BYTE)v5;
  *((_BYTE *)v3 + 16) = v6;
  return CGDrawingView.options.modify;
}

void CGDrawingView.options.modify(uint64_t a1, uint64_t a2)
{
  CGDrawingView.options.modify(a1, a2, CGDrawingView.options.didset);
}

uint64_t CGDrawingView.drawForTesting(in:)()
{
  void *v0;
  _BYTE *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v1 = objc_msgSend(v0, sel_layer);
  v2 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content];
  v3 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 8];
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 16];
  v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 24];
  v6 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 32];
  v7 = v1[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 40];
  outlined copy of PlatformDrawableContent.Storage(v2, v3, v4, v5, v6, v7);

  LOBYTE(v9) = v7;
  objc_msgSend(v0, sel_bounds, v2, v3, v4, v5, v6, v9);
  PlatformDrawableContent.draw(in:size:state:)();
  outlined consume of PlatformDrawableContent.Storage(v2, v3, v4, v5, v6, v7);
  return swift_release();
}

uint64_t type metadata accessor for CGDrawingView()
{
  return objc_opt_self();
}

void protocol witness for PlatformDrawable.options.getter in conformance CGDrawingView(uint64_t a1@<X8>)
{
  protocol witness for PlatformDrawable.options.getter in conformance CGDrawingView(&OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options, a1);
}

uint64_t protocol witness for PlatformDrawable.options.setter in conformance CGDrawingView(char *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for PlatformDrawable.options.setter in conformance CGDrawingView(a1, a2, a3, &OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options, (uint64_t (*)(_BYTE *))CGDrawingView.options.didset);
}

uint64_t (*protocol witness for PlatformDrawable.options.modify in conformance CGDrawingView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CGDrawingView.options.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for PlatformDrawable.update(content:required:) in conformance CGDrawingView(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  void *v10;
  char *v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v2 = v1;
  v3 = *(void **)a1;
  v4 = *(void **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(unsigned __int8 *)(a1 + 40);
  v9 = (char *)objc_msgSend(v2, sel_layer);
  v10 = v9;
  if (v8 != 255)
  {
    v11 = &v9[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content];
    v12 = *(void **)&v9[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 8];
    v13 = *(_QWORD *)&v9[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 16];
    v17 = *(_QWORD *)&v9[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 24];
    v18 = *(void **)&v9[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content];
    v16 = *(_QWORD *)&v9[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 32];
    *(_QWORD *)v11 = v3;
    *((_QWORD *)v11 + 1) = v4;
    *((_QWORD *)v11 + 2) = v5;
    *((_QWORD *)v11 + 3) = v6;
    *((_QWORD *)v11 + 4) = v7;
    v14 = v11[40];
    v11[40] = v8;
    outlined copy of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
    outlined consume of PlatformDrawableContent.Storage(v18, v12, v13, v17, v16, v14);
  }
  objc_msgSend(v10, sel_setNeedsDisplay);

  return 1;
}

void protocol witness for PlatformDrawable.setContentsScale(_:) in conformance CGDrawingView(double a1)
{
  void *v1;
  id v3;

  v3 = objc_msgSend(v1, sel_layer);
  objc_msgSend(v3, sel_setContentsScale_, a1);

}

uint64_t type metadata accessor for CGDrawingLayer()
{
  return objc_opt_self();
}

void RBDrawingView.options.didset(unsigned __int8 *a1)
{
  char *v1;
  char *v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v9;
  id v11;

  v2 = &v1[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options];
  v3 = *(_DWORD *)&v1[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options + 12];
  if (*a1 != v1[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options])
  {
LABEL_20:
    objc_msgSend(v1, sel_setOpaque_, (v3 >> 1) & 1);
    v11 = objc_msgSend(v1, sel_layer);
    PlatformDrawableOptions.update(rbLayer:)();

    v1[OBJC_IVAR____TtC7SwiftUI13RenderBoxView_rendersFirstFrameAsynchronously] = (v2[12] & 0x10) != 0;
    return;
  }
  v4 = *((_DWORD *)a1 + 3);
  v5 = a1[16];
  v6 = v2[16];
  if (a1[8] == 1)
  {
    if (v4 == v3)
      v7 = v2[8];
    else
      v7 = 0;
    if (v7 != 1 || v5 != v6)
      goto LABEL_20;
  }
  else
  {
    if ((v2[8] & 1) != 0)
      goto LABEL_20;
    v9 = *((_DWORD *)a1 + 1) == *((_DWORD *)v2 + 1) && v4 == v3;
    if (!v9 || v5 != v6)
      goto LABEL_20;
  }
}

void (*RBDrawingView.options.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char v6;
  int v7;
  char v8;
  int v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options;
  *v3 = v1;
  v3[1] = v4;
  v5 = (char *)(v1 + v4);
  v6 = *v5;
  v7 = *((_DWORD *)v5 + 1);
  v8 = v5[8];
  v9 = *((_DWORD *)v5 + 3);
  LOBYTE(v5) = v5[16];
  *((_DWORD *)v3 + 5) = v7;
  *((_BYTE *)v3 + 24) = v8;
  *((_DWORD *)v3 + 7) = v9;
  *((_BYTE *)v3 + 32) = (_BYTE)v5;
  *((_BYTE *)v3 + 16) = v6;
  return RBDrawingView.options.modify;
}

void RBDrawingView.options.modify(uint64_t a1, uint64_t a2)
{
  CGDrawingView.options.modify(a1, a2, RBDrawingView.options.didset);
}

void CGDrawingView.options.modify(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  void *v3;
  char v4;
  char *v5;
  int v6;
  char v7;
  int v8;
  char v9;
  char v10;
  int v11;
  char v12;
  int v13;
  char v14;
  _BYTE v15[4];
  int v16;
  char v17;
  int v18;
  char v19;

  v3 = *(void **)a1;
  v4 = *(_BYTE *)(*(_QWORD *)a1 + 16);
  v5 = (char *)(**(_QWORD **)a1 + *(_QWORD *)(*(_QWORD *)a1 + 8));
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 20);
  v7 = *(_BYTE *)(*(_QWORD *)a1 + 24);
  v8 = *(_DWORD *)(*(_QWORD *)a1 + 28);
  v9 = *(_BYTE *)(*(_QWORD *)a1 + 32);
  v10 = *v5;
  v11 = *((_DWORD *)v5 + 1);
  v12 = v5[8];
  v13 = *((_DWORD *)v5 + 3);
  v14 = v5[16];
  *v5 = v4;
  *((_DWORD *)v5 + 1) = v6;
  v5[8] = v7;
  *((_DWORD *)v5 + 3) = v8;
  v5[16] = v9;
  v15[0] = v10;
  v16 = v11;
  v17 = v12;
  v18 = v13;
  v19 = v14;
  a3(v15);
  free(v3);
}

char *RBDrawingView.init(options:)(char *a1)
{
  char *v1;
  objc_class *ObjectType;
  char v4;
  int v5;
  char v6;
  int v7;
  char v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  char v17;
  int v18;
  char v19;
  id v20;
  objc_super v22[3];
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  objc_super v28;
  objc_super v29;
  uint64_t v30;
  char v31;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = *a1;
  v5 = *((_DWORD *)a1 + 1);
  v6 = a1[8];
  v7 = *((_DWORD *)a1 + 3);
  v8 = a1[16];
  v9 = OBJC_IVAR____TtC7SwiftUI13RBDrawingView__state;
  v10 = v1;
  PlatformDrawableContent.init()();
  v22[1] = v28;
  v22[2] = v29;
  v23 = v30;
  v24 = v31;
  v25 = 3;
  v26 = 0;
  AtomicBox.init(wrappedValue:)();
  *(_QWORD *)&v1[v9] = v27;
  v11 = &v10[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options];
  *v11 = v4;
  *((_DWORD *)v11 + 1) = v5;
  v11[8] = v6;
  *((_DWORD *)v11 + 3) = v7;
  v11[16] = v8;

  v22[0].receiver = v10;
  v22[0].super_class = ObjectType;
  v12 = (char *)-[objc_super initWithFrame:](v22, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v13 = &v12[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options];
  v14 = (*(_DWORD *)&v12[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options + 12] >> 1) & 1;
  v15 = v12;
  objc_msgSend(v15, sel_setOpaque_, v14);
  v16 = *((_DWORD *)v13 + 1);
  v17 = v13[8];
  v18 = *((_DWORD *)v13 + 3);
  v19 = v13[16];
  LOBYTE(v28.receiver) = *v13;
  HIDWORD(v28.receiver) = v16;
  LOBYTE(v28.super_class) = v17;
  HIDWORD(v28.super_class) = v18;
  LOBYTE(v29.receiver) = v19;
  v20 = objc_msgSend(v15, sel_layer);
  PlatformDrawableOptions.update(rbLayer:)();

  v15[OBJC_IVAR____TtC7SwiftUI13RenderBoxView_rendersFirstFrameAsynchronously] = (v13[12] & 0x10) != 0;
  return v15;
}

uint64_t RBDrawingView.update(content:required:)(uint64_t a1, char a2)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  id v10;
  unsigned int v11;
  void (*v12)(char *, _QWORD);
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  id v20;
  char v22[32];
  uint64_t v23;

  v3 = v2;
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(unsigned __int8 *)(a1 + 40);
  if ((a2 & 1) == 0 && (v2[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options + 12] & 4) != 0)
  {
    v10 = objc_msgSend(v2, sel_layer);
    v11 = objc_msgSend(v10, sel_isDrawableAvailable);

    if (!v11)
      return 0;
  }
  if (v9 != 255)
  {
    v23 = *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI13RBDrawingView__state];
    outlined copy of PlatformDrawableContent?(v4, v5, v6, v7, v8, v9);
    outlined copy of PlatformDrawableContent?(v4, v5, v6, v7, v8, v9);
    swift_retain();
    type metadata accessor for AtomicBox<RBDrawingView.State>();
    v12 = (void (*)(char *, _QWORD))AtomicBox.wrappedValue.modify();
    v14 = *(void **)v13;
    v15 = *(void **)(v13 + 8);
    v16 = *(_QWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    v18 = *(_QWORD *)(v13 + 32);
    *(_QWORD *)v13 = v4;
    *(_QWORD *)(v13 + 8) = v5;
    *(_QWORD *)(v13 + 16) = v6;
    *(_QWORD *)(v13 + 24) = v7;
    *(_QWORD *)(v13 + 32) = v8;
    v19 = *(_BYTE *)(v13 + 40);
    *(_BYTE *)(v13 + 40) = v9;
    outlined consume of PlatformDrawableContent.Storage(v14, v15, v16, v17, v18, v19);
    v12(v22, 0);
    swift_release();
    outlined consume of PlatformDrawableContent?(v4, v5, v6, v7, v8, v9);
  }
  v20 = objc_msgSend(v3, sel_layer);
  objc_msgSend(v20, sel_setNeedsDisplay);

  return 1;
}

uint64_t (*RBDrawingView.makeAsyncUpdate(content:required:layer:bounds:)(__int128 *a1, char a2, void *a3, double a4, double a5, double a6, double a7))()
{
  char *v7;
  __int128 v15;
  void *v16;
  id v17;
  int v18;
  id v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  __int128 v25;
  _OWORD v26[2];

  v15 = a1[1];
  v25 = *a1;
  v26[0] = v15;
  *(_OWORD *)((char *)v26 + 9) = *(__int128 *)((char *)a1 + 25);
  objc_opt_self();
  v16 = (void *)swift_dynamicCastObjCClassUnconditional();
  if ((a2 & 1) != 0)
  {
    v17 = a3;
LABEL_5:
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v7;
    v22 = a1[1];
    *(_OWORD *)(v21 + 24) = *a1;
    *(_OWORD *)(v21 + 40) = v22;
    *(_OWORD *)(v21 + 49) = *(__int128 *)((char *)a1 + 25);
    *(_QWORD *)(v21 + 72) = v16;
    *(double *)(v21 + 80) = a4;
    *(double *)(v21 + 88) = a5;
    *(double *)(v21 + 96) = a6;
    *(double *)(v21 + 104) = a7;
    v23 = v7;
    outlined retain of PlatformDrawableContent((uint64_t)&v25);
    return partial apply for closure #1 in RBDrawingView.makeAsyncUpdate(content:required:layer:bounds:);
  }
  v18 = *(_DWORD *)&v7[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options + 12];
  v19 = a3;
  if ((v18 & 4) == 0)
    goto LABEL_5;
  v20 = v19;
  if (objc_msgSend(v16, sel_isDrawableAvailable, v25, v26[0], *(_QWORD *)&v26[1], *((_QWORD *)&v26[1] + 1)))goto LABEL_5;

  return 0;
}

uint64_t closure #1 in RBDrawingView.makeAsyncUpdate(content:required:layer:bounds:)(char *a1, uint64_t a2, void *a3, double a4, double a5, double a6, double a7)
{
  void (*v14)(_QWORD *, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t result;
  _QWORD aBlock[7];

  aBlock[6] = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUI13RBDrawingView__state];
  outlined retain of PlatformDrawableContent(a2);
  swift_retain();
  type metadata accessor for AtomicBox<RBDrawingView.State>();
  v14 = (void (*)(_QWORD *, _QWORD))AtomicBox.wrappedValue.modify();
  outlined assign with take of PlatformDrawableContent(a2, v15);
  v14(aBlock, 0);
  swift_release();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a1;
  *(double *)(v16 + 24) = a4;
  *(double *)(v16 + 32) = a5;
  *(double *)(v16 + 40) = a6;
  *(double *)(v16 + 48) = a7;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = partial apply for closure #1 in closure #1 in RBDrawingView.makeAsyncUpdate(content:required:layer:bounds:);
  *(_QWORD *)(v17 + 24) = v16;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ();
  aBlock[3] = &block_descriptor_72;
  v18 = _Block_copy(aBlock);
  v19 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(a3, sel_displayWithBounds_callback_, v18, a4, a5, a6, a7);
  _Block_release(v18);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a3 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t RBDrawingView.drawForTesting(in:)()
{
  void *v0;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  type metadata accessor for AtomicBox<RBDrawingView.State>();
  AtomicBox.wrappedValue.getter();
  outlined copy of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  outlined consume of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  swift_release();
  LOBYTE(v2) = v8;
  objc_msgSend(v0, sel_bounds, v3, v4, v5, v6, v7, v2);
  PlatformDrawableContent.draw(in:size:state:)();
  outlined consume of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  return swift_release();
}

uint64_t RBDrawingView.draw(inDisplayList:)()
{
  void *v0;

  objc_msgSend(v0, sel_bounds);
  return specialized RBDrawingView.draw(in:size:)();
}

void @objc CGDrawingView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t RBDrawingView.__ivar_destroyer()
{
  return swift_release();
}

uint64_t type metadata accessor for RBDrawingView()
{
  return objc_opt_self();
}

id outlined copy of PlatformDrawableContent.Storage(id result, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
      result = (id)swift_retain();
      break;
    case 2:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 3:
      result = (id)swift_unknownObjectRetain();
      break;
    case 4:
      result = result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for RBDrawingView.State(uint64_t a1)
{
  outlined consume of PlatformDrawableContent.Storage(*(void **)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return swift_release();
}

void outlined consume of PlatformDrawableContent.Storage(void *a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
      swift_release();
      break;
    case 2:
      swift_bridgeObjectRelease();
      break;
    case 3:
      swift_unknownObjectRelease();
      break;
    case 4:

      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for RBDrawingView.State(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(id *)a2;
  v5 = *(void **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  outlined copy of PlatformDrawableContent.Storage(*(id *)a2, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RBDrawingView.State(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *(id *)a2;
  v5 = *(void **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  outlined copy of PlatformDrawableContent.Storage(*(id *)a2, v5, v6, v7, v8, v9);
  v10 = *(void **)a1;
  v11 = *(void **)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v15 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v9;
  outlined consume of PlatformDrawableContent.Storage(v10, v11, v12, v13, v14, v15);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for RBDrawingView.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 32) = v4;
  v12 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v5;
  outlined consume of PlatformDrawableContent.Storage(v6, v7, v8, v9, v10, v12);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RBDrawingView.State(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RBDrawingView.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 56) = a2;
  }
  return result;
}

void *type metadata accessor for RBDrawingView.State()
{
  return &unk_1E1B19CC0;
}

void protocol witness for PlatformDrawable.options.getter in conformance RBDrawingView(uint64_t a1@<X8>)
{
  protocol witness for PlatformDrawable.options.getter in conformance CGDrawingView(&OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options, a1);
}

void protocol witness for PlatformDrawable.options.getter in conformance CGDrawingView(_QWORD *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  char v4;
  int v5;
  char v6;
  int v7;

  v3 = (char *)(v2 + *a1);
  v4 = *v3;
  v5 = *((_DWORD *)v3 + 1);
  v6 = v3[8];
  v7 = *((_DWORD *)v3 + 3);
  LOBYTE(v3) = v3[16];
  *(_BYTE *)a2 = v4;
  *(_DWORD *)(a2 + 4) = v5;
  *(_BYTE *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = v7;
  *(_BYTE *)(a2 + 16) = (_BYTE)v3;
}

uint64_t protocol witness for PlatformDrawable.options.setter in conformance RBDrawingView(char *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for PlatformDrawable.options.setter in conformance CGDrawingView(a1, a2, a3, &OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options, (uint64_t (*)(_BYTE *))RBDrawingView.options.didset);
}

uint64_t protocol witness for PlatformDrawable.options.setter in conformance CGDrawingView(char *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_BYTE *))
{
  uint64_t v5;
  char v6;
  int v7;
  char v8;
  int v9;
  char v10;
  char *v11;
  char v12;
  int v13;
  char v14;
  int v15;
  char v16;
  _BYTE v18[4];
  int v19;
  char v20;
  int v21;
  char v22;

  v6 = *a1;
  v7 = *((_DWORD *)a1 + 1);
  v8 = a1[8];
  v9 = *((_DWORD *)a1 + 3);
  v10 = a1[16];
  v11 = (char *)(v5 + *a4);
  v12 = *v11;
  v13 = *((_DWORD *)v11 + 1);
  v14 = v11[8];
  v15 = *((_DWORD *)v11 + 3);
  v16 = v11[16];
  *v11 = v6;
  *((_DWORD *)v11 + 1) = v7;
  v11[8] = v8;
  *((_DWORD *)v11 + 3) = v9;
  v11[16] = v10;
  v18[0] = v12;
  v19 = v13;
  v20 = v14;
  v21 = v15;
  v22 = v16;
  return a5(v18);
}

uint64_t (*protocol witness for PlatformDrawable.options.modify in conformance RBDrawingView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = RBDrawingView.options.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void type metadata accessor for AtomicBox<RBDrawingView.State>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AtomicBox<RBDrawingView.State>)
  {
    v0 = type metadata accessor for AtomicBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AtomicBox<RBDrawingView.State>);
  }
}

uint64_t sub_187944F0C()
{
  uint64_t v0;

  outlined consume of PlatformDrawableContent.Storage(*(void **)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RBDrawingView.makeAsyncUpdate(content:required:layer:bounds:)()
{
  uint64_t v0;

  return closure #1 in RBDrawingView.makeAsyncUpdate(content:required:layer:bounds:)(*(char **)(v0 + 16), v0 + 24, *(void **)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96), *(double *)(v0 + 104));
}

uint64_t outlined retain of PlatformDrawableContent(uint64_t a1)
{
  outlined copy of PlatformDrawableContent.Storage(*(id *)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return a1;
}

uint64_t outlined assign with take of PlatformDrawableContent(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE5AF8] - 8) + 40))(a2, a1);
  return a2;
}

uint64_t sub_187944FD4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RBDrawingView.makeAsyncUpdate(content:required:layer:bounds:)()
{
  return specialized RBDrawingView.draw(in:size:)();
}

uint64_t sub_187945018()
{
  return swift_deallocObject();
}

uint64_t specialized RBDrawingView.draw(in:size:)()
{
  char *v0;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI13RBDrawingView__state];
  type metadata accessor for AtomicBox<RBDrawingView.State>();
  swift_retain();
  AtomicBox.access<A>(_:)();
  swift_release();
  AtomicBox.wrappedValue.getter();
  outlined copy of PlatformDrawableContent.Storage(v2, v3, v4, v5, v6, v7);
  outlined consume of PlatformDrawableContent.Storage(v2, v3, v4, v5, v6, v7);
  swift_release();
  objc_msgSend(v0, sel_bounds);
  PlatformDrawableContent.draw(in:size:state:)();
  outlined consume of PlatformDrawableContent.Storage(v2, v3, v4, v5, v6, v7);
  swift_retain();
  AtomicBox.access<A>(_:)();
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #1 in RBDrawingView.draw(in:size:)(uint64_t a1)
{
  return partial apply for closure #1 in RBDrawingView.draw(in:size:)(a1);
}

uint64_t partial apply for closure #1 in RBDrawingView.draw(in:size:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_BYTE *)(result + 48);
  v4 = *(_QWORD *)(result + 56);
  v5 = *(_QWORD *)(v2 + 8);
  *(_BYTE *)(result + 48) = *(_BYTE *)v2;
  *(_QWORD *)(result + 56) = v5;
  *(_BYTE *)v2 = v3;
  *(_QWORD *)(v2 + 8) = v4;
  return result;
}

id outlined copy of PlatformDrawableContent?(id result, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 != -1)
    return outlined copy of PlatformDrawableContent.Storage(result, a2, a3, a4, a5, a6);
  return result;
}

void outlined consume of PlatformDrawableContent?(void *a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 != -1)
    outlined consume of PlatformDrawableContent.Storage(a1, a2, a3, a4, a5, a6);
}

void specialized RBDrawingView.init(coder:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR____TtC7SwiftUI13RBDrawingView__state;
  PlatformDrawableContent.init()();
  AtomicBox.init(wrappedValue:)();
  *(_QWORD *)&v0[v1] = v2;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void View.onReselect(isEnabled:perform:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_1879452F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<ReselectionTraitState.Key>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<ReselectionTraitState.Key> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _TraitWritingModifier<ReselectionTraitState.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<ReselectionTraitState.Key>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ReselectionTraitState.Key>);
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ReselectionTraitState.Key> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<ReselectionTraitState.Key> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ReselectionTraitState.Key> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<ReselectionTraitState.Key>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ReselectionTraitState.Key> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t assignWithCopy for ReselectionTraitState(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (!*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ReselectionTraitState(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (!*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v7;
      return a1;
    }
LABEL_7:
    *v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v6;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ReselectionTraitState()
{
  return &type metadata for ReselectionTraitState;
}

ValueMetadata *type metadata accessor for ReselectionTraitState.Key()
{
  return &type metadata for ReselectionTraitState.Key;
}

uint64_t View.transformAnchorPreference<A, B>(key:value:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  _QWORD v13[3];

  v13[0] = a2;
  v13[1] = a3;
  v13[2] = a4;
  v11 = type metadata accessor for _AnchorTransformModifier(0, a6, a7, a9);
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B4AC](v13, a5, v11, a8);
  swift_release();
  return swift_release();
}

uint64_t _AnchorTransformModifier.anchor.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_AnchorTransformModifier.anchor.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t key path getter for _AnchorTransformModifier.transform : <A, B>_AnchorTransformModifier<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a3 + a2;
  v6 = *(_QWORD *)(a3 + a2 - 8);
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 24);
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v8;
  *(_QWORD *)(v9 + 48) = v7;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@inout B.PreferenceKey.Value, @guaranteed Anchor<A>) -> ();
  a4[1] = v9;
  return swift_retain();
}

uint64_t key path setter for _AnchorTransformModifier.transform : <A, B>_AnchorTransformModifier<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = a4 + a3;
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *a1;
  v7 = a1[1];
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 24);
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v8;
  *(_QWORD *)(v9 + 48) = v7;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 8) = partial apply for thunk for @escaping @callee_guaranteed (@inout B.PreferenceKey.Value, @in_guaranteed Anchor<A>) -> (@out ());
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t _AnchorTransformModifier.transform.getter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  return a2;
}

uint64_t _AnchorTransformModifier.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*_AnchorTransformModifier.transform.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _AnchorTransformModifier2.base.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t _AnchorTransformModifier2.base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  swift_release();
  result = swift_release();
  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*_AnchorTransformModifier2.base.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void static _AnchorTransformModifier2._makeView(modifier:inputs:body:)(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, double *a7@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;

  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  v14 = a2[2];
  v15 = *((_DWORD *)a2 + 20);
  LODWORD(v22) = *a1;
  type metadata accessor for _AnchorTransformModifier2(255, a4, a5, a6);
  type metadata accessor for _GraphValue();
  type metadata accessor for _AnchorTransformModifier(0, a4, a5, a6);
  v16 = a2[3];
  v17 = a2[4];
  v19 = *(_OWORD *)(a2 + 7);
  v20 = *(_OWORD *)(a2 + 5);
  v18 = a2[9];
  _GraphValue.subscript.getter();
  v22 = v12;
  v23 = v13;
  v24 = v14;
  v25 = v16;
  v26 = v17;
  v27 = v20;
  v28 = v19;
  v29 = v18;
  v30 = v15;
  static _AnchorTransformModifier.makeView(modifier:inputs:animated:body:)((uint64_t)&v22, 0, a3, a4, a5, a6, a7);
}

uint64_t closure #1 in static _AnchorTransformModifier2._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v11[2] = type metadata accessor for _AnchorTransformModifier2(0, a2, a3, a4);
  v12 = type metadata accessor for _AnchorTransformModifier(0, a2, a3, a4);
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, v12, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v13;
}

uint64_t partial apply for closure #1 in static _AnchorTransformModifier2._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static _AnchorTransformModifier2._makeView(modifier:inputs:body:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for _AnchorTransformModifier2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnchorTransformModifier2);
}

_UNKNOWN **base witness table accessor for ViewModifier in _AnchorTransformModifier<A, B>()
{
  return &protocol witness table for _AnchorTransformModifier<A, B>;
}

uint64_t AnchorTransform.modifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  type metadata accessor for _AnchorTransformModifier(0, a3, a4, a5);
  v5 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  return v5;
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AnchorTransformModifier2<A, B>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t *a4@<X4>, double *a5@<X8>)
{
  static _AnchorTransformModifier2._makeView(modifier:inputs:body:)(a1, a2, a3, a4[2], a4[3], a4[4], a5);
}

_UNKNOWN **base witness table accessor for ViewModifier in _AnchorTransformModifier2<A, B>()
{
  return &protocol witness table for _AnchorTransformModifier2<A, B>;
}

uint64_t sub_187945AA0()
{
  return 24;
}

__n128 sub_187945AAC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_187945AC0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = a1[3];
  type metadata accessor for _AnchorTransformModifier(255, a1[1], a1[2], a1[4]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _AnchorTransformModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t (*AnchorTransform.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*result)(uint64_t);
  uint64_t v17;
  int v18;

  AnchorGeometry.init(position:size:transform:)();
  v10 = AnchorTransform.modifier.getter(a1, a2, a3, a4, a5);
  v12 = v11;
  v14 = v13;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a4;
  *(_QWORD *)(v15 + 32) = a5;
  *(_QWORD *)(v15 + 40) = v10;
  *(_QWORD *)(v15 + 48) = v12;
  *(_QWORD *)(v15 + 56) = v14;
  result = partial apply for closure #1 in AnchorTransform.value.getter;
  *(_QWORD *)(v15 + 64) = v17;
  *(_DWORD *)(v15 + 72) = v18;
  return result;
}

uint64_t sub_187945BE8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnchorTransform.value.getter(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v3 = *(void (**)(uint64_t, uint64_t))(v1 + 48);
  v4 = Anchor.Source.prepare(geometry:)();
  v3(a1, v4);
  return swift_release();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@inout B.PreferenceKey.Value, @in_guaranteed Anchor<A>) -> (@out ())(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t *);
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, uint64_t *))(v2 + 40);
  v5 = a2;
  return v3(a1, &v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@inout B.PreferenceKey.Value, @guaranteed Anchor<A>) -> ()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 40))(a1, *a2);
}

uint64_t (*protocol witness for Rule.value.getter in conformance AnchorTransform<A, B>@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>))()
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*result)();

  v5 = *v2;
  v4 = v2[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = AnchorTransform.value.getter(v5, v4, v6, v7, v8);
  v11 = v10;
  result = (uint64_t (*)())swift_allocObject();
  *((_QWORD *)result + 2) = v6;
  *((_QWORD *)result + 3) = v7;
  *((_QWORD *)result + 4) = v8;
  *((_QWORD *)result + 5) = v9;
  *((_QWORD *)result + 6) = v11;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Gesture.Value, @inout B, @inout Transaction) -> (@out ());
  a2[1] = result;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnchorTransform<A, B>()
{
  return specialized AnchorTransform.description.getter();
}

uint64_t sub_187945D68()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t specialized AnchorTransform.description.getter()
{
  Swift::String v0;

  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000011;
}

void TuplePrintContent.init(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void TuplePrintContent.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static TuplePrintContent._makePrintContent(content:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t getEnumTagSinglePayload for TuplePrintContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187945F04 + 4 * byte_187C70080[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TuplePrintContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for TuplePrintContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TuplePrintContent);
}

uint64_t static _PreferenceTransformModifier._makeWidgetConfiguration(modifier:inputs:body:)@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  int v6;

  a1(&v5);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  result = swift_bridgeObjectRelease();
  v4 = v6;
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

uint64_t static _PreferenceWritingModifier._makeWidgetConfiguration(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v6 = a1[5];
  v5 = a1[6];
  v7 = *((_DWORD *)a1 + 14);
  v22 = *a1;
  v23 = v3;
  v25 = *(_OWORD *)(a1 + 3);
  v24 = v4;
  v26 = v6;
  v27 = v5;
  v28 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)();
  v13 = v22;
  v14 = v23;
  v15 = v4;
  v16 = v25;
  v17 = v6;
  v18 = v5;
  v19 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v8 = swift_bridgeObjectRetain();
  a2(&v20, v8, &v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v13 = v5;
  v14 = v7;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  v10 = v21;
  *(_QWORD *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v10;
  return result;
}

uint64_t protocol witness for static WidgetConfigurationModifier._makeWidgetConfiguration(modifier:inputs:body:) in conformance _PreferenceWritingModifier<A>@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  return static _PreferenceWritingModifier._makeWidgetConfiguration(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t implicit closure #1 in static _PreferenceTransformModifier._makeWidgetConfiguration(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t OffsetAttribute2;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = a1;
  type metadata accessor for _PreferenceTransformModifier();
  type metadata accessor for _GraphValue();
  v5 = _GraphValue.value.getter();
  v18 = a2;
  v19 = a3;
  KeyPath = swift_getKeyPath();
  v7 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v8 & 1) != 0)
  {
    v16 = v5;
    v17 = KeyPath;
    MEMORY[0x1E0C80A78](v7, v8);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v13[2] = swift_getFunctionTypeMetadata();
    v14 = type metadata accessor for Focus();
    v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE8], v14);
    v10 = type metadata accessor for Attribute();
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v16, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v13, v14, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
    swift_release();
    swift_release();
    return AssociatedTypeWitness;
  }
  else
  {
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    swift_release();
  }
  return OffsetAttribute2;
}

uint64_t partial apply for implicit closure #1 in static _PreferenceTransformModifier._makeWidgetConfiguration(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static _PreferenceTransformModifier._makeWidgetConfiguration(modifier:inputs:body:)(*(_DWORD *)(v0 + 32), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t protocol witness for static WidgetConfigurationModifier._makeWidgetConfiguration(modifier:inputs:body:) in conformance _PreferenceTransformModifier<A>@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  return static _PreferenceTransformModifier._makeWidgetConfiguration(modifier:inputs:body:)(a1, a2);
}

uint64_t WidgetConfiguration.preference<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a5;
  v20 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v19 - v10;
  v12 = type metadata accessor for _PreferenceWritingModifier();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, a2, AssociatedTypeWitness, v15);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a4);
  _PreferenceWritingModifier.init(key:value:)();
  WidgetConfiguration.modifier<A>(_:)((uint64_t)v17, v20, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, v12);
}

uint64_t WidgetConfiguration.transformPreference<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a5);
  swift_retain();
  v9[0] = _PreferenceTransformModifier.init(key:transform:)();
  v9[1] = v6;
  v7 = type metadata accessor for _PreferenceTransformModifier();
  WidgetConfiguration.modifier<A>(_:)((uint64_t)v9, a4, v7);
  return swift_release();
}

uint64_t sub_1879467B4(_QWORD *a1)
{
  return get_witness_table_7SwiftUI19WidgetConfigurationRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_E15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdJ0HpyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))MEMORY[0x1E0CE60E0], (uint64_t)&protocol witness table for _PreferenceWritingModifier<A>);
}

uint64_t sub_1879467C8(_QWORD *a1)
{
  return get_witness_table_7SwiftUI19WidgetConfigurationRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_E15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdJ0HpyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))MEMORY[0x1E0CE63C0], (uint64_t)&protocol witness table for _PreferenceTransformModifier<A>);
}

uint64_t get_witness_table_7SwiftUI19WidgetConfigurationRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_E15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdJ0HpyHCHCTm(_QWORD *a1, void (*a2)(uint64_t, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  a2(255, a1[1], a1[3]);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = a3;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v5, v7);
}

uint64_t sub_18794684C()
{
  return 16;
}

__n128 sub_187946858(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for UniversalList()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UniversalList(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 - 1 >= a2)
    goto LABEL_24;
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 > 3)
    goto LABEL_7;
  v12 = (((1 << v9) + a2 - v6) >> v9) + 1;
  if (HIWORD(v12))
  {
    v10 = *(_DWORD *)(a1 + v8);
    if (v10)
      goto LABEL_15;
LABEL_24:
    v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      v17 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
    }
    else
    {
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      v17 = v16 + 1;
    }
    if (v17 >= 2)
      return v17 - 1;
    else
      return 0;
  }
  if (v12 > 0xFF)
  {
    v10 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8))
      goto LABEL_15;
    goto LABEL_24;
  }
  if (v12 < 2)
    goto LABEL_24;
LABEL_7:
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_24;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v14 = ((v7 + 16) & ~(_DWORD)v7) + *(_DWORD *)(v4 + 64);
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  return (v13 + v6);
}

void storeEnumTagSinglePayload for UniversalList(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64);
  if (v6 - 1 >= a3)
  {
    v10 = 0u;
  }
  else
  {
    v10 = 1u;
    if (v9 <= 3)
    {
      v11 = (((v10 << (8 * v9)) + a3 - v6) >> (8 * v9)) + 1;
      if (HIWORD(v11))
      {
        v10 = 4u;
        if (v7 >= a2)
          goto LABEL_21;
      }
      else
      {
        if (v11 >= 0x100)
          v10 = 2;
        else
          v10 = v11 > 1;
        if (v7 >= a2)
LABEL_21:
          __asm { BR              X14 }
      }
LABEL_14:
      v12 = a2 - v6;
      if (v9 < 4)
      {
        if ((_DWORD)v9)
        {
          v13 = v12 & ~(-1 << (8 * v9));
          bzero(a1, v9);
          if ((_DWORD)v9 == 3)
          {
            *a1 = v13;
            *((_BYTE *)a1 + 2) = BYTE2(v13);
          }
          else if ((_DWORD)v9 == 2)
          {
            *a1 = v13;
          }
          else
          {
            *(_BYTE *)a1 = v13;
          }
        }
      }
      else
      {
        bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64));
        *(_DWORD *)a1 = v12;
      }
      __asm { BR              X10 }
    }
  }
  if (v7 >= a2)
    goto LABEL_21;
  goto LABEL_14;
}

void sub_187946C64()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187946CD0);
}

void sub_187946C6C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187946CD0);
}

void sub_187946C74()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187946CD0);
}

void sub_187946CA4()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187946CD0);
}

void sub_187946CB4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187946CD0);
}

void sub_187946CBC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187946CD0);
}

uint64_t type metadata accessor for UniversalList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UniversalList);
}

uint64_t instantiation function for generic protocol witness table for UniversalList<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalList<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in UniversalList<A>()
{
  return swift_getOpaqueTypeConformance2();
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI21_ScrollableLayoutItemVs5NeverOTg5(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  _OWORD v22[6];
  uint64_t v23;
  uint64_t v24;

  v20 = result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = MEMORY[0x1E0DEE9D8];
  if (!v5)
    return (char *)v7;
  v24 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v24;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v11 = a3;
    while (a4 != v11)
    {
      v21 = v11;
      result = (char *)((char *(*)(_OWORD *__return_ptr, uint64_t *))v20)(v22, &v21);
      if (v6)
      {
        swift_release();
        return (char *)v7;
      }
      v6 = 0;
      v24 = v7;
      v13 = *(_QWORD *)(v7 + 16);
      v12 = *(_QWORD *)(v7 + 24);
      if (v13 >= v12 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
        v7 = v24;
      }
      *(_QWORD *)(v7 + 16) = v13 + 1;
      v14 = v7 + 104 * v13;
      v15 = v22[0];
      v16 = v22[2];
      *(_OWORD *)(v14 + 48) = v22[1];
      *(_OWORD *)(v14 + 64) = v16;
      *(_OWORD *)(v14 + 32) = v15;
      v17 = v22[3];
      v18 = v22[4];
      v19 = v22[5];
      *(_QWORD *)(v14 + 128) = v23;
      *(_OWORD *)(v14 + 96) = v18;
      *(_OWORD *)(v14 + 112) = v19;
      *(_OWORD *)(v14 + 80) = v17;
      if (a4 < a3)
        goto LABEL_19;
      if (v10 == v11)
        goto LABEL_20;
      if (a4 == ++v11)
        return (char *)v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t UniversalList.init(selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t static UniversalList._viewListOptions.getter()
{
  return 12;
}

uint64_t UniversalList.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  _QWORD v25[2];
  uint64_t v26;
  _BYTE v27[56];

  v26 = a3;
  v5 = *(_QWORD *)(a2 + 16);
  type metadata accessor for Binding();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v25 - v9;
  v11 = *(_QWORD *)(a2 + 24);
  v13 = type metadata accessor for UniversalList.BodyContent(0, v5, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v25 - v20;
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v27);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 16))(v10, v25[1], v6);
  UniversalList.BodyContent.init(children:selection:)((uint64_t)v27, (uint64_t)v10, v5, v11, (uint64_t)v17);
  v22 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalList<A>.BodyContent, v13);
  static ViewBuilder.buildExpression<A>(_:)(v17, v13, v22);
  v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  v23(v17, v13);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v21, v13, v26);
  return ((uint64_t (*)(char *, uint64_t))v23)(v21, v13);
}

uint64_t UniversalList.BodyContent.init(children:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)a5 = swift_getKeyPath();
  *(_BYTE *)(a5 + 8) = 0;
  v11 = a5 + *(int *)(type metadata accessor for UniversalList.BodyContent(0, a3, a4, v10) + 40);
  v12 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a5 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 32) = v13;
  *(_OWORD *)(a5 + 48) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a5 + 64) = *(_QWORD *)(a1 + 48);
  v14 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v11, a2, v14);
}

void UniversalList.BodyContent.body.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[7];

  v22 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  type metadata accessor for Binding();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v23[-1] - v8;
  v10 = *(_QWORD *)(a1 + 24);
  v12 = type metadata accessor for UniversalListContentProvider(0, v4, v10, v11);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v23[-1] - v14;
  outlined init with copy of _VariadicView_Children(v2 + 16, (uint64_t)v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v2 + *(int *)(a1 + 40), v5);
  v16 = *(_QWORD *)v2;
  v17 = *(_BYTE *)(v2 + 8);
  outlined copy of Environment<Bool>.Content(v16, v17);
  v18 = specialized Environment.wrappedValue.getter(v16, v17);
  outlined consume of Environment<Bool>.Content(v16, v17);
  UniversalListContentProvider.init(children:selection:rowHeight:)(v23, (uint64_t)v9, v4, v10, (uint64_t)v15, v18);
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>, v12);
  v21 = type metadata accessor for UniversalListContentProvider.Index(255, v4, v10, v20);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>.Index, v21);
  _ScrollableLayout<>.subscript.getter(v12, v19);
}

void sub_187947314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v0);
  *(_QWORD *)(v7 - 152) = v0;
  *(_QWORD *)(v7 - 144) = v0;
  *(_QWORD *)(v7 - 136) = v4;
  *(_QWORD *)(v7 - 128) = v5;
  *(_QWORD *)(v7 - 120) = v3;
  *(_QWORD *)(v7 - 112) = v2;
  type metadata accessor for _ScrollableLayoutView();
}

uint64_t sub_18794733C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollableLayoutView<A, B>, a1);
  result = type metadata accessor for _ScrollView(0, a1, v3, v4);
  *(_BYTE *)(v1 + *(int *)(result + 36) + 80) = 1;
  return result;
}

uint64_t UniversalListContentProvider.init(children:selection:rowHeight:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  outlined init with copy of _VariadicView_Children((uint64_t)a1, a5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12 = ViewList.allViewIDs.getter();
  outlined destroy of _VariadicView_Children((uint64_t)a1);
  *(_QWORD *)(a5 + 56) = v12;
  v14 = type metadata accessor for UniversalListContentProvider(0, a3, a4, v13);
  v15 = a5 + *(int *)(v14 + 40);
  type metadata accessor for Binding();
  v16 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a2, v16);
  *(double *)(a5 + *(int *)(v14 + 44)) = a6;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance UniversalList<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalList<A>, a5);
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

uint64_t type metadata accessor for UniversalList.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UniversalList.BodyContent);
}

uint64_t type metadata completion function for UniversalList.BodyContent()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for UniversalList.BodyContent(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  int v33;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = v7 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v10 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v11 = v7 & 0x100000;
  if (v8 <= 7 && v11 == 0 && (v9 & (v8 + 72)) + v10 <= 0x18)
  {
    v33 = *(_DWORD *)(v6 + 84);
    v15 = *(_QWORD *)a2;
    v16 = *(_BYTE *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v16);
    *(_QWORD *)a1 = v15;
    *(_BYTE *)(a1 + 8) = v16;
    v17 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
    v18 = a2 & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
    v17[5] = v19;
    v17[6] = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
    (**(void (***)(unint64_t, unint64_t))(v19 - 8))((a1 & 0xFFFFFFFFFFFFFFF8) + 16, (a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    v20 = *(void **)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
    v17[7] = v20;
    v17[8] = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
    v21 = (_QWORD *)(v9 & ((a1 & 0xFFFFFFFFFFFFFFF8) + 79));
    v22 = (_QWORD *)(v9 & (v18 + 79));
    v23 = (uint64_t *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    v24 = v20;
    swift_bridgeObjectRetain();
    if (v33 < 0)
    {
      v27 = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v23 + v8 + 8) & ~v8);
      v26 = ~v8;
      if (v27)
      {
LABEL_14:
        memcpy(v21, v22, v10);
        return a1;
      }
    }
    else
    {
      v25 = *v23;
      if ((unint64_t)*v23 >= 0xFFFFFFFF)
        LODWORD(v25) = -1;
      v26 = ~v8;
      if ((_DWORD)v25 != -1)
        goto LABEL_14;
    }
    *v21 = *v22;
    v28 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v28 = *v23;
    v29 = ((unint64_t)v28 + v8 + 8) & v26;
    v30 = ((unint64_t)v23 + v8 + 8) & v26;
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v31(v29, v30, v5);
    return a1;
  }
  v14 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  a1 = v14 + (v9 & (v8 + 16));
  swift_retain();
  return a1;
}

uint64_t destroy for UniversalList.BodyContent(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1((a1 & 0xFFFFFFFFFFFFFFF8) + 16);

  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + (v7 | 7) + 72) & ~(v7 | 7);
  v9 = ~v7;
  v10 = (uint64_t *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v9);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v10 + v7 + 8) & v9, v5);
  }
  v11 = *v10;
  if ((unint64_t)*v10 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  result = (v11 + 1);
  if ((_DWORD)v11 == -1)
    goto LABEL_7;
  return result;
}

uint64_t initializeWithCopy for UniversalList.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void (*v25)(uint64_t, unint64_t, uint64_t);
  uint64_t v27;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  v8[5] = v10;
  v8[6] = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  (**(void (***)(unint64_t, unint64_t))(v10 - 8))((a1 & 0xFFFFFFFFFFFFFFF8) + 16, (a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v11 = *(void **)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  v8[7] = v11;
  v8[8] = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = *(_DWORD *)(v13 + 80);
  v16 = *(_DWORD *)(v13 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v17 = (_QWORD *)((v15 + 72 + (a1 & 0xFFFFFFFFFFFFFFF8)) & v16);
  v18 = (_QWORD *)((v15 + 72 + v9) & v16);
  v19 = ~v15;
  v27 = *(_QWORD *)(v13 + 64);
  v20 = (uint64_t *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = v11;
  swift_bridgeObjectRetain();
  if ((v14 & 0x80000000) == 0)
  {
    v22 = *v20;
    if ((unint64_t)*v20 >= 0xFFFFFFFF)
      LODWORD(v22) = -1;
    if ((_DWORD)v22 != -1)
      goto LABEL_5;
LABEL_7:
    *v17 = *v18;
    v23 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v23 = *v20;
    v24 = ((unint64_t)v23 + v15 + 8) & v19;
    v25 = *(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16);
    swift_retain();
    swift_retain();
    v25(v24, ((unint64_t)v20 + v15 + 8) & v19, v12);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(((unint64_t)v20 + v15 + 8) & v19, v14, v12))goto LABEL_7;
LABEL_5:
  memcpy(v17, v18, ((v15 + 16) & ~v15) + v27);
  return a1;
}

uint64_t assignWithCopy for UniversalList.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t (*v27)(unint64_t, uint64_t, uint64_t);
  int v28;
  uint64_t (*v29)(unint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  int v36;
  uint64_t __n;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16));
  v12 = *(void **)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  v13 = *(void **)((a1 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_QWORD *)(v10 + 56) = v12;
  v14 = v12;

  *(_QWORD *)(v10 + 64) = *(_QWORD *)(v11 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int *)(v16 + 84);
  v18 = *(_DWORD *)(v16 + 80);
  v19 = *(_DWORD *)(v16 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v20 = (_QWORD *)((v18 + 72 + (a1 & 0xFFFFFFFFFFFFFFF8)) & v19);
  v21 = (_QWORD *)((v18 + 72 + v11) & v19);
  v22 = ~v18;
  __n = ((v18 + 16) & ~v18) + *(_QWORD *)(v16 + 64);
  v23 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v17 & 0x80000000) != 0)
  {
    v27 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v16 + 48);
    v28 = v27(((unint64_t)v23 + v18 + 8) & ~v18, v17, v15);
    v29 = v27;
    v36 = v28;
    v24 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    v22 = ~v18;
    v26 = v29(((unint64_t)v24 + v18 + 8) & ~v18, v17, v15);
    if (!v36)
    {
LABEL_5:
      if (!v26)
      {
        *v20 = *v21;
        swift_retain();
        swift_release();
        *v23 = *v24;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 24))(((unint64_t)v23 + v18 + 8) & v22, ((unint64_t)v24 + v18 + 8) & v22, v15);
        return a1;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v16 + 8))(((unint64_t)v23 + v18 + 8) & v22, v15);
      goto LABEL_9;
    }
  }
  else
  {
    v24 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    v25 = *v24;
    if (*v24 >= 0xFFFFFFFFuLL)
      LODWORD(v25) = -1;
    v26 = v25 + 1;
    if (*v23 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v26)
  {
    *v20 = *v21;
    *v23 = *v24;
    v30 = v22;
    v31 = ((unint64_t)v23 + v18 + 8) & v22;
    v32 = ((unint64_t)v24 + v18 + 8) & v30;
    v33 = v15;
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
    swift_retain();
    swift_retain();
    v34(v31, v32, v33);
    return a1;
  }
LABEL_9:
  memcpy(v20, v21, __n);
  return a1;
}

uint64_t initializeWithTake for UniversalList.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_DWORD *)(v9 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v12 = (char *)((v10 + 72 + (a1 & 0xFFFFFFFFFFFFFFF8)) & v11);
  v13 = (_QWORD *)((v10 + 72 + (a2 & 0xFFFFFFFFFFFFFFF8)) & v11);
  v14 = ~v10;
  v15 = *(_QWORD *)(v9 + 64);
  v16 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v9 + 84) & 0x80000000) == 0)
  {
    v17 = *v16;
    if ((unint64_t)*v16 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    if ((_DWORD)v17 != -1)
      goto LABEL_5;
LABEL_7:
    *(_QWORD *)v12 = *v13;
    v18 = (unint64_t)(v12 + 15);
    *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8) = *v16;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((v10 + 8 + (v18 & 0xFFFFFFFFFFFFFFF8)) & v14, ((unint64_t)v16 + v10 + 8) & v14, v8);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v9 + 48))(((unint64_t)v16 + v10 + 8) & v14))
    goto LABEL_7;
LABEL_5:
  memcpy(v12, v13, ((v10 + 16) & ~v10) + v15);
  return a1;
}

uint64_t assignWithTake for UniversalList.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  size_t v29;
  void *v30;
  const void *v31;
  uint64_t (*v32)(unint64_t, uint64_t, uint64_t);
  int v33;
  uint64_t (*v34)(unint64_t, uint64_t, uint64_t);
  int v36;
  size_t __n;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  v12 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v13 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_QWORD *)(v10 + 48) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v10 + 16) = v12;
  *(_OWORD *)(v10 + 32) = v13;
  v14 = *(void **)((a1 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_QWORD *)(v10 + 56) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);

  *(_QWORD *)(v10 + 64) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int *)(v16 + 84);
  v18 = *(_DWORD *)(v16 + 80);
  v19 = *(_DWORD *)(v16 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v20 = (_QWORD *)((v18 + 72 + (a1 & 0xFFFFFFFFFFFFFFF8)) & v19);
  v21 = (_QWORD *)((v18 + 72 + v11) & v19);
  v22 = ~v18;
  v23 = *(_QWORD *)(v16 + 64);
  v24 = ((v18 + 16) & ~v18) + v23;
  v25 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v17 & 0x80000000) != 0)
  {
    __n = ((v18 + 16) & ~v18) + v23;
    v32 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v16 + 48);
    v33 = v32(((unint64_t)v25 + v18 + 8) & ~v18, v17, v15);
    v34 = v32;
    v36 = v33;
    v26 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    v22 = ~v18;
    v28 = v34(((unint64_t)v26 + v18 + 8) & ~v18, v17, v15);
    v24 = __n;
    if (!v36)
    {
LABEL_5:
      if (!v28)
      {
        *v20 = *v21;
        swift_release();
        *v25 = *v26;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 40))(((unint64_t)v25 + v18 + 8) & v22, ((unint64_t)v26 + v18 + 8) & v22, v15);
        return a1;
      }
      v29 = v24;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v16 + 8))(((unint64_t)v25 + v18 + 8) & v22, v15);
      v30 = v20;
      v31 = v21;
      v24 = v29;
      goto LABEL_10;
    }
  }
  else
  {
    v26 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    v27 = *v26;
    if (*v26 >= 0xFFFFFFFFuLL)
      LODWORD(v27) = -1;
    v28 = v27 + 1;
    if (*v25 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v28)
  {
    *v20 = *v21;
    *v25 = *v26;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32))(((unint64_t)v25 + v18 + 8) & v22, ((unint64_t)v26 + v18 + 8) & v22, v15);
    return a1;
  }
  v30 = v20;
  v31 = v21;
LABEL_10:
  memcpy(v30, v31, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for UniversalList.BodyContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  v7 = v6 - 1;
  if ((v6 - 1) <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v6 - 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v9 | 7;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v12 = ((v9 + 16) & ~v9) + *(_QWORD *)(v4 + 64) + ((v9 + 72) & ~v10);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v16 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v16))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v16 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v16 < 2)
    {
LABEL_25:
      v18 = a1 & 0xFFFFFFFFFFFFFFF8;
      if (v7 < 0)
      {
        v20 = (unint64_t *)((((v18 + v10 + 72) & ~v10) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v5 & 0x80000000) != 0)
        {
          v22 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v20 + v9 + 8) & ~v9);
        }
        else
        {
          v21 = *v20;
          if (v21 >= 0xFFFFFFFF)
            LODWORD(v21) = -1;
          v22 = v21 + 1;
        }
        if (v22 >= 2)
          return v22 - 1;
        else
          return 0;
      }
      else
      {
        v19 = *(_QWORD *)(v18 + 40);
        if (v19 >= 0xFFFFFFFF)
          LODWORD(v19) = -1;
        return (v19 + 1);
      }
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_25;
LABEL_18:
  v17 = (v14 - 1) << v13;
  if (v12 > 3)
    v17 = 0;
  if ((_DWORD)v12)
  {
    if (v12 > 3)
      LODWORD(v12) = 4;
    __asm { BR              X12 }
  }
  return v8 + v17 + 1;
}

void storeEnumTagSinglePayload for UniversalList.BodyContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if ((v6 - 1) <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64) + ((v8 + 72) & ~(v8 | 7));
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64) + ((v8 + 72) & ~(v8 | 7)));
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64) + ((v8 + 72) & ~(v8 | 7)));
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

void sub_187948510(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for UniversalList.BodyContent(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for View.Body : View in UniversalList<A>.BodyContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for UniversalListContentProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UniversalListContentProvider);
}

uint64_t type metadata accessor for UniversalListContentProvider.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UniversalListContentProvider.Index);
}

uint64_t destroy for UniversalListContentProvider.Index(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result != 1)
    return swift_release();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UniversalListContentProvider.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_retain();
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for UniversalListContentProvider.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) != 1)
  {
    if (v4 != 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of _ViewList_ID.Canonical(a1);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
LABEL_8:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

_QWORD *assignWithTake for UniversalListContentProvider.Index(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1[1] != 1)
  {
    v4 = a2[1];
    if (v4 != 1)
    {
      *a1 = *a2;
      a1[1] = v4;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of _ViewList_ID.Canonical((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for UniversalListContentProvider.Index(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for UniversalListContentProvider.Index(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t type metadata completion function for UniversalListContentProvider()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for UniversalListContentProvider(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, unint64_t, uint64_t);
  _QWORD *__dst;
  uint64_t v35;

  v4 = (_QWORD *)a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64);
  v10 = v6 & 0x100000;
  if (v7 <= 7 && v10 == 0 && ((v9 + 7 + (v8 & (v7 + 64))) & 0xFFFFFFFFFFFFFFF8) + 8 <= 0x18)
  {
    v35 = *(_QWORD *)(a3 + 16);
    v14 = *(unsigned int *)(v5 + 84);
    v15 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v15;
    (**(void (***)(uint64_t, uint64_t *))(v15 - 8))(a1, a2);
    v16 = (void *)a2[5];
    v17 = a2[6];
    v4[5] = v16;
    v4[6] = v17;
    v18 = (_QWORD *)(((unint64_t)v4 + 63) & 0xFFFFFFFFFFFFF8);
    v19 = (_QWORD *)(((unint64_t)a2 + 63) & 0xFFFFFFFFFFFFF8);
    *v18 = *v19;
    __dst = (_QWORD *)(v8 & ((unint64_t)v18 + 15));
    v20 = (_QWORD *)(v8 & ((unint64_t)v19 + 15));
    v21 = (uint64_t *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    v22 = v16;
    swift_bridgeObjectRetain();
    swift_retain();
    if ((v14 & 0x80000000) != 0)
    {
      v24 = v35;
      v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v21 + v7 + 8) & ~v7, v14, v35);
      v25 = ~v7;
      if (v27)
      {
LABEL_14:
        v26 = __dst;
        memcpy(__dst, v20, v9);
LABEL_17:
        *(_QWORD *)(((unint64_t)v26 + v9 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v20 + v9 + 7) & 0xFFFFFFFFFFFFF8);
        return v4;
      }
    }
    else
    {
      v23 = *v21;
      if ((unint64_t)*v21 >= 0xFFFFFFFF)
        LODWORD(v23) = -1;
      v24 = v35;
      v25 = ~v7;
      if ((_DWORD)v23 != -1)
        goto LABEL_14;
    }
    v26 = __dst;
    *__dst = *v20;
    v28 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v28 = *v21;
    v29 = v7 + 8;
    v30 = ((unint64_t)v28 + v7 + 8) & v25;
    v31 = ((unint64_t)v21 + v29) & v25;
    v32 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v32(v30, v31, v24);
    goto LABEL_17;
  }
  v13 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v13 + (v8 & (v7 + 16)));
  swift_retain();
  return v4;
}

uint64_t destroy for UniversalListContentProvider(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;

  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  v4 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + (v7 | 7) + 8) & ~(v7 | 7);
  v9 = ~v7;
  v10 = (uint64_t *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v9);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v10 + v7 + 8) & v9, v5);
  }
  v11 = *v10;
  if ((unint64_t)*v10 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  result = (v11 + 1);
  if ((_DWORD)v11 == -1)
    goto LABEL_7;
  return result;
}

uint64_t initializeWithCopy for UniversalListContentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  id v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(unint64_t, unint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _QWORD *__dst;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(void **)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = (_QWORD *)((a1 + 63) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((a2 + 63) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = *(_DWORD *)(v12 + 80);
  v15 = v14 + 8;
  v16 = *(_DWORD *)(v12 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  __dst = (_QWORD *)(((unint64_t)v9 + v14 + 8) & v16);
  v17 = (_QWORD *)(((unint64_t)v10 + v14 + 8) & v16);
  v18 = ~v14;
  v29 = (v14 + 16) & ~v14;
  v28 = *(_QWORD *)(v12 + 64);
  v19 = (uint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v20 = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  if ((v13 & 0x80000000) != 0)
  {
    v22 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))(((unint64_t)v19 + v15) & v18, v13, v11);
  }
  else
  {
    v21 = *v19;
    if ((unint64_t)*v19 >= 0xFFFFFFFF)
      LODWORD(v21) = -1;
    v22 = v21 + 1;
  }
  if (v22)
  {
    memcpy(__dst, v17, v29 + v28);
  }
  else
  {
    *__dst = *v17;
    v23 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v23 = *v19;
    v24 = ((unint64_t)v23 + v15) & v18;
    v25 = ((unint64_t)v19 + v15) & v18;
    v26 = *(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16);
    swift_retain();
    swift_retain();
    v26(v24, v25, v11);
  }
  *(_QWORD *)(((unint64_t)__dst + v29 + v28 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v17
                                                                                           + v29
                                                                                           + v28
                                                                                           + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t *assignWithCopy for UniversalListContentProvider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t (*v24)(unint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  void (*v31)(unint64_t, unint64_t, uint64_t);
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v6 = (void *)a2[5];
  v7 = (void *)a1[5];
  a1[5] = (uint64_t)v6;
  v8 = v6;

  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)(((unint64_t)a1 + 63) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)a2 + 63) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  swift_retain();
  swift_release();
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = *(_DWORD *)(v12 + 80);
  v15 = v14 + 8;
  v16 = *(_DWORD *)(v12 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v17 = (_QWORD *)(((unint64_t)v9 + v14 + 8) & v16);
  v18 = (_QWORD *)(((unint64_t)v10 + v14 + 8) & v16);
  v19 = ((v14 + 16) & ~v14) + *(_QWORD *)(v12 + 64);
  v20 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v36 = ~v14;
  if ((v13 & 0x80000000) != 0)
  {
    v34 = v17;
    v35 = ((v14 + 16) & ~v14) + *(_QWORD *)(v12 + 64);
    v24 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48);
    v25 = ((unint64_t)v10 + v14 + 8) & v16;
    v26 = ~v14;
    v33 = v24(((unint64_t)v20 + v15) & ~v14, v13, v11);
    v21 = (_QWORD *)((v25 + 15) & 0xFFFFFFFFFFFFFFF8);
    v27 = ((unint64_t)v21 + v15) & v26;
    v18 = (_QWORD *)v25;
    v17 = v34;
    v23 = v24(v27, v13, v11);
    v19 = v35;
    if (!v33)
    {
LABEL_5:
      if (!v23)
      {
        *v17 = *v18;
        swift_retain();
        swift_release();
        *v20 = *v21;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 24))(((unint64_t)v20 + v15) & v36, ((unint64_t)v21 + v15) & v36, v11);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v12 + 8))(((unint64_t)v20 + v15) & v36, v11);
      goto LABEL_9;
    }
  }
  else
  {
    v21 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    v22 = *v21;
    if (*v21 >= 0xFFFFFFFFuLL)
      LODWORD(v22) = -1;
    v23 = v22 + 1;
    if (*v20 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v23)
  {
    *v17 = *v18;
    *v20 = *v21;
    v28 = ((unint64_t)v20 + v15) & v36;
    v29 = ((unint64_t)v21 + v15) & v36;
    v30 = v19;
    v31 = *(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16);
    swift_retain();
    swift_retain();
    v31(v28, v29, v11);
    v19 = v30;
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v17, v18, v19);
LABEL_12:
  *(_QWORD *)(((unint64_t)v17 + v19 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + v19 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for UniversalListContentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  size_t v19;
  _QWORD *v20;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = (_QWORD *)((a1 + 63) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)((a2 + 63) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9 + 8;
  v11 = *(_DWORD *)(v8 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v12 = (_QWORD *)(((unint64_t)v5 + v9 + 8) & v11);
  v13 = (_QWORD *)(((unint64_t)v6 + v9 + 8) & v11);
  v14 = ~v9;
  v15 = (v9 + 16) & ~v9;
  v16 = *(_QWORD *)(v8 + 64);
  v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF)
      LODWORD(v18) = -1;
    v19 = v15 + v16;
    if ((_DWORD)v18 != -1)
      goto LABEL_5;
LABEL_7:
    *v12 = *v13;
    v20 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v20 + v10) & v14, ((unint64_t)v17 + v10) & v14, v7);
    goto LABEL_8;
  }
  v19 = v15 + v16;
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v17 + v10) & v14))
    goto LABEL_7;
LABEL_5:
  memcpy(v12, v13, v19);
LABEL_8:
  *(_QWORD *)(((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for UniversalListContentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t (*v25)(unint64_t, uint64_t, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t (*v29)(unint64_t, uint64_t, uint64_t);
  unint64_t v30;
  uint64_t v31;
  int v33;
  uint64_t v34;
  uint64_t v35;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)((a1 + 63) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((a2 + 63) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  swift_release();
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = *(_DWORD *)(v12 + 80);
  v15 = v14 + 8;
  v16 = *(_DWORD *)(v12 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v17 = (_QWORD *)(((unint64_t)v9 + v14 + 8) & v16);
  v18 = (_QWORD *)(((unint64_t)v10 + v14 + 8) & v16);
  v19 = ((v14 + 16) & ~v14) + *(_QWORD *)(v12 + 64);
  v20 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v35 = ~v14;
  if ((v13 & 0x80000000) != 0)
  {
    v34 = ((v14 + 16) & ~v14) + *(_QWORD *)(v12 + 64);
    v25 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48);
    v26 = v18;
    v27 = ~v14;
    v28 = v25(((unint64_t)v20 + v15) & ~v14, v13, v11);
    v29 = v25;
    v33 = v28;
    v22 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    v30 = ((unint64_t)v22 + v15) & v27;
    v18 = v26;
    v31 = v13;
    v21 = v11;
    v24 = v29(v30, v31, v11);
    v19 = v34;
    if (!v33)
    {
LABEL_5:
      if (!v24)
      {
        *v17 = *v18;
        swift_release();
        *v20 = *v22;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 40))(((unint64_t)v20 + v15) & v35, ((unint64_t)v22 + v15) & v35, v21);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v12 + 8))(((unint64_t)v20 + v15) & v35, v21);
      goto LABEL_9;
    }
  }
  else
  {
    v21 = v11;
    v22 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    v23 = *v22;
    if (*v22 >= 0xFFFFFFFFuLL)
      LODWORD(v23) = -1;
    v24 = v23 + 1;
    if (*v20 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v24)
  {
    *v17 = *v18;
    *v20 = *v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 32))(((unint64_t)v20 + v15) & v35, ((unint64_t)v22 + v15) & v35, v21);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v17, v18, v19);
LABEL_12:
  *(_QWORD *)(((unint64_t)v17 + v19 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + v19 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for UniversalListContentProvider(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  v7 = v6 - 1;
  if ((v6 - 1) <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v6 - 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v9 | 7;
  if (v8 < a2)
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v9 + 16) & ~v9) + ((v9 + 64) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v11 = 2;
    else
      v11 = a2 - v8 + 1;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    __asm { BR              X17 }
  }
  if (v7 < 0)
  {
    v16 = (unint64_t *)((((((a1 + 63) & 0xFFFFFFFFFFFFFFF8) + v10 + 8) & ~v10) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v9 + 8) & ~v9);
    }
    else
    {
      v17 = *v16;
      if (v17 >= 0xFFFFFFFF)
        LODWORD(v17) = -1;
      v18 = v17 + 1;
    }
    if (v18 >= 2)
      return v18 - 1;
    else
      return 0;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 24);
    if (v15 >= 0xFFFFFFFF)
      LODWORD(v15) = -1;
    return (v15 + 1);
  }
}

void storeEnumTagSinglePayload for UniversalListContentProvider(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if ((v6 - 1) <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_20;
  }
  else
  {
    if ((((((_DWORD)v8 + 16) & ~(_DWORD)v8) + *(_DWORD *)(v5 + 64) + (((_DWORD)v8 + 64) & ~(v8 | 7)) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_20:
      __asm { BR              X0 }
  }
  if ((((((_DWORD)v8 + 16) & ~(_DWORD)v8) + *(_DWORD *)(v5 + 64) + (((_DWORD)v8 + 64) & ~(v8 | 7)) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64) + ((v8 + 64) & ~(v8 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_1879495C0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187949688);
}

void sub_1879495C8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1879495D0);
  JUMPOUT(0x187949688);
}

void sub_1879495E4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187949688);
}

void sub_1879495EC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187949688);
}

void sub_1879495F4(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (v2 < 0)
      JUMPOUT(0x187949600);
    if (a2 < 0)
      JUMPOUT(0x187949670);
    *(_QWORD *)(v3 + 24) = (a2 - 1);
  }
  JUMPOUT(0x187949688);
}

void sub_1879496FC()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x187949688);
}

void sub_187949724()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187949688);
}

void sub_187949734()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187949688);
}

void sub_18794973C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187949688);
}

void sub_187949780(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for UniversalListContentProvider(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>, v6);
  v8 = type metadata accessor for UniversalListContentProvider.Index(255, v4, v5, v7);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>.Index, v8);
  type metadata accessor for _ScrollableLayoutView();
}

uint64_t sub_187949818(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollableLayoutView<A, B>, a1);
  v4 = type metadata accessor for _ScrollView(255, a1, v2, v3);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollView<A>, v4);
}

void UniversalListContentProvider.Index.hash(into:)()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    _ViewList_ID.Canonical.hash(into:)();
  }
}

BOOL static UniversalListContentProvider.Index.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16);
}

BOOL static UniversalListContentProvider.Index.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD v10[2];
  _QWORD v11[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v6 = *a2;
  v5 = a2[1];
  v7 = a2[2];
  if (v2 == 1)
  {
    if (v5 == 1)
      return v4 == v7;
    goto LABEL_6;
  }
  v11[0] = *a1;
  v11[1] = v2;
  if (v5 == 1)
  {
    outlined copy of _ViewList_ID.Canonical?(v3, v2);
LABEL_6:
    outlined copy of _ViewList_ID.Canonical?(v6, v5);
    outlined consume of Text.LineStyle?(v3, v2);
    outlined consume of Text.LineStyle?(v6, v5);
    return 0;
  }
  v10[0] = v6;
  v10[1] = v5;
  outlined copy of _ViewList_ID.Canonical?(v3, v2);
  swift_retain();
  v8 = MEMORY[0x18D756E68](v11, v10);
  swift_release();
  outlined consume of Text.LineStyle?(v3, v2);
  if ((v8 & 1) != 0)
    return v4 == v7;
  return 0;
}

Swift::Int UniversalListContentProvider.Index.hashValue.getter()
{
  Hasher.init(_seed:)();
  UniversalListContentProvider.Index.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance UniversalListContentProvider<A>.Index(uint64_t a1, uint64_t a2)
{
  return static UniversalListContentProvider.Index.< infix(_:_:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UniversalListContentProvider<A>.Index()
{
  Hasher.init(_seed:)();
  UniversalListContentProvider.Index.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UniversalListContentProvider<A>.Index(uint64_t *a1, uint64_t *a2)
{
  return static UniversalListContentProvider.Index.== infix(_:_:)(a1, a2);
}

uint64_t UniversalListContentProvider._index(atOffset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;

  swift_retain();
  v4 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  result = swift_release();
  if (v4)
  {
    dispatch thunk of _ViewList_ID_Views.subscript.getter();
    _ViewList_ID.canonicalID.getter();
    result = swift_bridgeObjectRelease();
    v6 = v7;
  }
  else
  {
    v6 = xmmword_187BF9840;
  }
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = a1;
  return result;
}

uint64_t UniversalListContentProvider.startIndex.getter@<X0>(uint64_t a1@<X8>)
{
  return UniversalListContentProvider._index(atOffset:)(0, a1);
}

double UniversalListContentProvider.endIndex.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  result = 0.0;
  *(_OWORD *)a1 = xmmword_187BF9840;
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t UniversalListContentProvider.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  result = v2 + 1;
  if (!__OFADD__(v2, 1))
    return UniversalListContentProvider._index(atOffset:)(result, a2);
  __break(1u);
  return result;
}

uint64_t UniversalListContentProvider.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  result = v2 - 1;
  if (!__OFSUB__(v2, 1))
    return UniversalListContentProvider._index(atOffset:)(result, a2);
  __break(1u);
  return result;
}

uint64_t UniversalListContentProvider.index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  result = v3 + a2;
  if (!__OFADD__(v3, a2))
    return UniversalListContentProvider._index(atOffset:)(result, a3);
  __break(1u);
  return result;
}

uint64_t UniversalListContentProvider.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t IsSelected;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _OWORD v50[11];
  char v51;
  char v52;
  char v53;
  __int128 v54;
  char v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  _BYTE v73[112];

  v49 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v7, v8);
  v48 = (char *)&v45 - v9;
  IsSelected = type metadata accessor for IsSelected(0, v5, v4, v10);
  v46 = *(_QWORD *)(IsSelected - 8);
  v47 = IsSelected;
  MEMORY[0x1E0C80A78](IsSelected, v12);
  v45 = (char *)&v45 - v13;
  v14 = type metadata accessor for Binding();
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v45 - v18;
  _VariadicView_Children.subscript.getter();
  outlined init with copy of _VariadicView_Children.Element((uint64_t)v73, (uint64_t)v50);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v2 + *(int *)(a2 + 40), v15);
  v20 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    LOBYTE(v56) = 0;
    static Binding.constant(_:)();
    v22 = *((_QWORD *)&v54 + 1);
    v21 = v54;
    v23 = v55;
LABEL_5:
    KeyPath = swift_getKeyPath();
    v53 = 0;
    v30 = swift_getKeyPath();
    v52 = 0;
    v31 = swift_getKeyPath();
    v51 = 0;
    v58 = v50[2];
    v59 = v50[3];
    v60 = v50[4];
    v61 = v50[5];
    v56 = v50[0];
    v57 = v50[1];
    v62 = v21;
    v63 = v22;
    v64 = v23;
    v65 = 0;
    v66 = 0;
    v67 = KeyPath;
    v68 = v53;
    v69 = v30;
    v70 = v52;
    v71 = v31;
    v72 = 0;
    outlined init with copy of SystemListCell<_VariadicView_Children.Element>((uint64_t)&v56, (uint64_t)v50, v32, v33);
    type metadata accessor for SystemListCell<_VariadicView_Children.Element>(0, v34, v35, v36);
    lazy protocol witness table accessor for type SystemListCell<_VariadicView_Children.Element> and conformance SystemListCell<A>(v37, v38, v39, v40);
    v41 = AnyView.init<A>(_:)();
    outlined destroy of SystemListCell<_VariadicView_Children.Element>((uint64_t)&v56, v42, v43, v44);
    outlined destroy of _VariadicView_Children.Element((uint64_t)v73);
    return v41;
  }
  swift_getAssociatedConformanceWitness();
  v24 = v48;
  _VariadicView_Children.Element.id<A>(as:)();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v24, 1, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
  {
    v26 = swift_getAssociatedTypeWitness();
    v27 = v45;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v45, v24, v26);
    v28 = v47;
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsSelected<A>, v47);
    Binding.projecting<A>(_:)();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v27, v28);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v14);
    v22 = *((_QWORD *)&v56 + 1);
    v21 = v56;
    v23 = v57;
    v54 = v56;
    v55 = v57;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void UniversalListContentProvider.update(state:proxy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  CGFloat v9;
  CGFloat v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _OWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  CGRect v22;

  v4 = *(double *)(v3 + *(int *)(a3 + 44));
  v5 = *(double *)(a2 + 40);
  v6 = floor(v5 / v4);
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v9 = *(double *)(a2 + 32);
  v10 = *(double *)(a2 + 48);
  v22.size.height = *(CGFloat *)(a2 + 56);
  v22.origin.x = v9;
  v22.origin.y = *(CGFloat *)(a2 + 40);
  v22.size.width = v10;
  v11 = ceil((v5 + CGRectGetHeight(v22)) / v4);
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = (uint64_t)v11;
  v13 = (uint64_t)v6 & ~((uint64_t)v6 >> 63);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>, a3);
  v14 = Collection.count.getter();
  if (v14 < v13)
    v13 = v14;
  if (v13 > v12)
    v12 = v13;
  v15 = Collection.count.getter();
  if (v15 < v12)
    v12 = v15;
  *(CGFloat *)(a2 + 128) = v9;
  *(double *)(a2 + 136) = v4 * (double)v13;
  *(CGFloat *)(a2 + 144) = v10;
  if (__OFSUB__(v12, v13))
    goto LABEL_22;
  *(double *)(a2 + 152) = v4 * (double)(v12 - v13);
  v16 = Collection.count.getter();
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 16);
  *(double *)(a2 + 120) = v4 * (double)v16;
  if (v12 >= v13)
  {
    MEMORY[0x1E0C80A78](v16, v17);
    v19[1] = *(_OWORD *)(a3 + 16);
    v20 = v3;
    v21 = a2;
    v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI21_ScrollableLayoutItemVs5NeverOTg5((char *)partial apply for closure #1 in UniversalListContentProvider.update(state:proxy:), (uint64_t)v19, v13, v12);
    swift_bridgeObjectRelease();
    *(_QWORD *)(a2 + 104) = v18;
    return;
  }
LABEL_23:
  __break(1u);
}

double closure #1 in UniversalListContentProvider.update(state:proxy:)@<D0>(uint64_t *a1@<X0>, int *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double result;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void (*v27)(_QWORD);
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v7 = *a1;
  type metadata accessor for UniversalListContentProvider(0, a3, a4, a3);
  v8 = *((_QWORD *)a2 + 1);
  v9 = *((_QWORD *)a2 + 8);
  v10 = (void (*)(_QWORD))*((_QWORD *)a2 + 9);
  v21 = *a2;
  v22 = v8;
  v11 = *((_OWORD *)a2 + 2);
  v23 = *((_OWORD *)a2 + 1);
  v24 = v11;
  v25 = *((_OWORD *)a2 + 3);
  v26 = v9;
  v27 = v10;
  v12 = *((_OWORD *)a2 + 6);
  v28 = *((_OWORD *)a2 + 5);
  v29 = v12;
  v13 = *((_OWORD *)a2 + 8);
  v30 = *((_OWORD *)a2 + 7);
  v31 = v13;
  v32 = *((_OWORD *)a2 + 9);
  outlined retain of _ScrollableLayoutProxy((uint64_t)&v21);
  v10(v7);
  outlined release of _ScrollableLayoutProxy((uint64_t)&v21);
  static UnitPoint.topLeading.getter();
  _Placement.init(proposedSize:anchoring:at:)();
  *(_QWORD *)(a5 + 40) = v15;
  *(_BYTE *)(a5 + 48) = v16;
  *(_QWORD *)(a5 + 56) = v17;
  *(_BYTE *)(a5 + 64) = v18;
  result = *(double *)&v19;
  *(_OWORD *)(a5 + 72) = v19;
  *(_OWORD *)(a5 + 88) = v20;
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance UniversalListContentProvider<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance UniversalListContentProvider<A>(a1, a2, a3, (void (*)(__int128 *__return_ptr))UniversalListContentProvider.index(before:));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance UniversalListContentProvider<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance UniversalListContentProvider<A>(uint64_t a1, uint64_t a2)
{
  return specialized UniversalListContentProvider.distance(from:to:)(a1, a2);
}

void (*protocol witness for Collection.subscript.read in conformance UniversalListContentProvider<A>(uint64_t **a1, __int128 *a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v6;
  uint64_t (*v7)();
  uint64_t v8;

  v6 = (uint64_t *)malloc(0x30uLL);
  *a1 = v6;
  v7 = UniversalListContentProvider.subscript.read(v6, a2, a3);
  v6[4] = v8;
  v6[5] = (uint64_t)v7;
  return protocol witness for Collection.subscript.read in conformance UniversalListContentProvider<A>;
}

void protocol witness for Collection.subscript.read in conformance UniversalListContentProvider<A>(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 40))(*a1);
  free(v1);
}

uint64_t (*UniversalListContentProvider.subscript.read(uint64_t *a1, __int128 *a2, uint64_t a3))()
{
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  v3 = *((_QWORD *)a2 + 2);
  v5 = *a2;
  v6 = v3;
  *a1 = UniversalListContentProvider.subscript.getter((uint64_t)&v5, a3);
  return destroy for NavigationDestinationModifier.SeededResolver;
}

double protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance UniversalListContentProvider<A>@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_187C70770;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

double protocol witness for Collection.formIndex(after:) in conformance UniversalListContentProvider<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance UniversalListContentProvider<A>(a1, a2, a3, (void (*)(__int128 *__return_ptr))UniversalListContentProvider.index(after:));
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance UniversalListContentProvider<A>(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(__int128 *__return_ptr))
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  a4(&v7);
  outlined consume of Text.LineStyle?(*a1, a1[1]);
  v5 = v8;
  result = *(double *)&v7;
  *(_OWORD *)a1 = v7;
  a1[2] = v5;
  return result;
}

double protocol witness for Sequence.makeIterator() in conformance UniversalListContentProvider<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  UniversalListContentProvider.startIndex.getter((uint64_t)&v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>, a1);
  v6 = a2 + *(int *)(type metadata accessor for IndexingIterator() + 36);
  v7 = v10;
  result = *(double *)&v9;
  *(_OWORD *)v6 = v9;
  *(_QWORD *)(v6 + 16) = v7;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance UniversalListContentProvider<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance UniversalListContentProvider<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>, a1);
  return Collection._copyToContiguousArray()();
}

void base witness table accessor for Sequence in UniversalListContentProvider<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void associated type witness table accessor for Collection.Index : Comparable in UniversalListContentProvider<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Collection in UniversalListContentProvider<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in UniversalListContentProvider<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA210], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in UniversalListContentProvider<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE28], a1, &v3);
}

void base witness table accessor for Equatable in UniversalListContentProvider<A>.Index()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t instantiation function for generic protocol witness table for UniversalListContentProvider<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for BidirectionalCollection in UniversalListContentProvider<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in UniversalListContentProvider<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA220], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in UniversalListContentProvider<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalListContentProvider<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE40], a1, &v3);
}

uint64_t IsSelected.get(base:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 56))(v2, *(_QWORD *)(a2 + 16)) & 1;
}

uint64_t IsSelected.set(base:newValue:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = 40;
  if ((a2 & 1) != 0)
    v4 = 32;
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a3 + 24) + v4))(v3, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t IsSelected.hash(into:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static IsSelected.== infix(_:_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int IsSelected.hashValue.getter()
{
  Hasher.init(_seed:)();
  IsSelected.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.get(base:) in conformance IsSelected<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = IsSelected.get(base:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance IsSelected<A>(uint64_t a1, char *a2, uint64_t a3)
{
  return IsSelected.set(base:newValue:)(a1, *a2, a3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IsSelected<A>()
{
  Hasher.init(_seed:)();
  IsSelected.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IsSelected<A>()
{
  return static IsSelected.== infix(_:_:)();
}

double key path getter for EnvironmentValues.rowInset : EnvironmentValues@<D0>(double *a1@<X8>)
{
  double v2;
  double v3;
  double result;

  swift_retain();
  swift_retain();
  EnvironmentValues.defaultPadding.getter();
  EdgeInsets.horizontal.getter();
  v3 = v2;
  swift_release();
  swift_release();
  result = v3 * 0.5;
  *a1 = v3 * 0.5;
  return result;
}

uint64_t specialized UniversalListContentProvider.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  result = v3 - v2;
  if (__OFSUB__(v3, v2))
    __break(1u);
  return result;
}

double partial apply for closure #1 in UniversalListContentProvider.update(state:proxy:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in UniversalListContentProvider.update(state:proxy:)(a1, *(int **)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t type metadata accessor for IsSelected(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IsSelected);
}

uint64_t outlined init with copy of SystemListCell<_VariadicView_Children.Element>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for SystemListCell<_VariadicView_Children.Element>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for SystemListCell<_VariadicView_Children.Element>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for SystemListCell<_VariadicView_Children.Element>)
  {
    v4 = type metadata accessor for SystemListCell(0, MEMORY[0x1E0CE55D8], MEMORY[0x1E0CE55C8], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for SystemListCell<_VariadicView_Children.Element>);
  }
}

unint64_t lazy protocol witness table accessor for type SystemListCell<_VariadicView_Children.Element> and conformance SystemListCell<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;

  result = lazy protocol witness table cache variable for type SystemListCell<_VariadicView_Children.Element> and conformance SystemListCell<A>;
  if (!lazy protocol witness table cache variable for type SystemListCell<_VariadicView_Children.Element> and conformance SystemListCell<A>)
  {
    type metadata accessor for SystemListCell<_VariadicView_Children.Element>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemListCell<A>, v5);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemListCell<_VariadicView_Children.Element> and conformance SystemListCell<A>);
  }
  return result;
}

uint64_t outlined destroy of SystemListCell<_VariadicView_Children.Element>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for SystemListCell<_VariadicView_Children.Element>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t type metadata completion function for IsSelected()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IsSelected(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for IsSelected(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for IsSelected(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void storeEnumTagSinglePayload for IsSelected(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void base witness table accessor for Equatable in IsSelected<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in IsSelected<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t closure #1 in AccessibilityFocus.filtered(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void *v3;
  char v4;

  result = MEMORY[0x18D760234](a2);
  if (result)
  {
    v3 = (void *)result;
    swift_getObjectType();
    v4 = ViewRendererHost.containsAccessibilityElement(_:)(v3);

    return v4 & 1;
  }
  return result;
}

id AccessibilityFocus.Target.ancestorAccessibilityNode.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v12;

  v1 = MEMORY[0x18D760234](v0);
  if (v1)
  {
    v2 = (void *)v1;
    type metadata accessor for AccessibilityNode();
    v3 = swift_dynamicCastClass();
    if (v3)
    {
      v4 = (id)v3;
      outlined init with copy of AccessibilityFocus.Target(v0, (uint64_t)&v12);
      outlined destroy of AccessibilityFocus.Target((uint64_t)&v12);
      return v4;
    }

  }
  outlined init with copy of AccessibilityFocus.Target(v0, (uint64_t)&v12);
  v5 = (void *)MEMORY[0x18D760234](&v12);
  if (v5)
  {
    v6 = v5;
    v4 = objc_msgSend(v5, sel_accessibilityNodeForPlatformElement);

    outlined destroy of AccessibilityFocus.Target((uint64_t)&v12);
    if (v4)
      return v4;
  }
  else
  {
    outlined destroy of AccessibilityFocus.Target((uint64_t)&v12);
  }
  v7 = MEMORY[0x18D760234](v0);
  if (!v7)
    return 0;
  v8 = (void *)v7;
  swift_getObjectType();
  v9 = objc_msgSend(v8, sel_accessibilityNodeForPlatformElement);
  if (v9)
  {
    v4 = v9;

  }
  else
  {
    v12 = 0;
    MEMORY[0x1E0C80A78](0, v10);
    PlatformAccessibilityElementProtocol<>.traverseAncestors(_:)((uint64_t (*)(void))partial apply for closure #1 in AccessibilityFocus.Target.ancestorAccessibilityNode.getter);

    return (id)v12;
  }
  return v4;
}

uint64_t closure #1 in AccessibilityFocus.Target.ancestorAccessibilityNode.getter(void *a1, void **a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  type metadata accessor for AccessibilityNode();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = *a2;
    *a2 = (void *)v4;
    v6 = a1;
LABEL_5:

    return 0;
  }
  v7 = objc_msgSend(a1, sel_accessibilityNodeForPlatformElement);
  if (v7)
  {
    v5 = *a2;
    *a2 = v7;
    goto LABEL_5;
  }
  return 1;
}

ValueMetadata *type metadata accessor for AccessibilityFocusInputKey()
{
  return &type metadata for AccessibilityFocusInputKey;
}

uint64_t storeEnumTagSinglePayload for AccessibilityFocus.Match(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_18794B3A4 + 4 * byte_187C70785[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18794B3D8 + 4 * byte_187C70780[v4]))();
}

uint64_t sub_18794B3D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18794B3E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18794B3E8);
  return result;
}

uint64_t sub_18794B3F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18794B3FCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_18794B400(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18794B408(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type [AccessibilityFocus.Match] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [AccessibilityFocus.Match] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AccessibilityFocus.Match] and conformance [A])
  {
    type metadata accessor for [AccessibilityFocus.Match]();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AccessibilityFocus.Match] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [AccessibilityFocus.Match]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [AccessibilityFocus.Match])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityFocus.Match]);
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance AccessibilityFocus.Match(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance AccessibilityFocus.Match;
}

uint64_t AccessibilityFocus.Target.match(focusStoreNode:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v17;
  void *v18;
  char v19;
  id v20;
  void *v21;
  id v22;
  char v23;
  _BYTE v24[8];

  v2 = v1;
  v4 = MEMORY[0x18D760234](v1);
  if (v4)
  {
    v5 = (void *)v4;
    type metadata accessor for AccessibilityNode();
    v6 = swift_dynamicCastClass();
    if (v6)
    {
      v7 = (id)v6;
      outlined init with copy of AccessibilityFocus.Target(v2, (uint64_t)v24);
      outlined destroy of AccessibilityFocus.Target((uint64_t)v24);
      goto LABEL_7;
    }

  }
  outlined init with copy of AccessibilityFocus.Target(v2, (uint64_t)v24);
  v8 = (void *)MEMORY[0x18D760234](v24);
  if (!v8)
  {
    outlined destroy of AccessibilityFocus.Target((uint64_t)v24);
    goto LABEL_10;
  }
  v9 = v8;
  v7 = objc_msgSend(v8, sel_accessibilityNodeForPlatformElement);

  outlined destroy of AccessibilityFocus.Target((uint64_t)v24);
  if (!v7)
    goto LABEL_10;
LABEL_7:
  type metadata accessor for AccessibilityNode();
  v10 = a1;
  v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) != 0)
    return 0;
LABEL_10:
  AccessibilityNode.platformElement.getter();
  if (v12)
  {
    v13 = v12;
    v14 = (void *)MEMORY[0x18D760234](v2);
    if (v14)
    {
      v15 = v14;

      if (v15 == v13)
        return 0;
    }
    else
    {

    }
  }
  v17 = AccessibilityFocus.Target.ancestorAccessibilityNode.getter();
  if (v17)
  {
    v18 = v17;
    type metadata accessor for NSObject();
    v19 = static NSObject.== infix(_:_:)();

    if ((v19 & 1) != 0)
      return 2;
  }
  v20 = AccessibilityFocus.Target.ancestorAccessibilityNode.getter();
  if (!v20)
    return 4;
  v21 = v20;
  v23 = 0;
  v22 = a1;
  specialized PlatformAccessibilityElementProtocol<>.traverseAncestors(_:)(v21, v22, &v23);

  if (v23)
    return 3;
  else
    return 4;
}

BOOL specialized closure #1 in AccessibilityFocus.Target.match(focusStoreNode:)(id a1, void *a2, _BYTE *a3)
{
  id v6;
  id v7;

  AccessibilityNode.platformElement.getter();
  if (!v6)
    v6 = a2;
  v7 = v6;

  if (v7 == a1)
    *a3 = 1;
  return v7 != a1;
}

BOOL specialized AccessibilityFocus.Match.takesPriority(over:)(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;

  if (a1)
  {
    v2 = 0;
    while (v2 != 3)
    {
      v4 = *((unsigned __int8 *)&outlined read-only object #0 of AccessibilityFocus.Match.takesPriority(over:)
           + v2++
           + 33);
      if (v4 == a1)
      {
        v1 = 0;
        while (v1 != 3)
        {
          v5 = *((unsigned __int8 *)&outlined read-only object #0 of AccessibilityFocus.Match.takesPriority(over:)
               + v1++
               + 33);
          if (v5 == a1)
            return v2 < v1;
        }
        return 0;
      }
    }
    return 0;
  }
  else
  {
    v1 = 0;
    v2 = 0;
    return v2 < v1;
  }
}

SwiftUI::BorderedListStyle __swiftcall BorderedListStyle.init(alternatesRowBackgrounds:)(Swift::Bool alternatesRowBackgrounds)
{
  SwiftUI::BorderedListStyle result;

  result.options.rawValue = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::BorderedListStyle __swiftcall BorderedListStyle.init()()
{
  SwiftUI::BorderedListStyle result;

  result.options.rawValue = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void static BorderedListStyle._makeView<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static BorderedListStyle._makeViewList<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for BorderedListStyle()
{
  return &type metadata for BorderedListStyle;
}

void View.unanimatable()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t sub_18794B820(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for UnanimatableModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void *type metadata accessor for UnanimatableModifier()
{
  return &unk_1E1AD5DA0;
}

_UNKNOWN **base witness table accessor for ViewModifier in UnanimatableModifier()
{
  return &protocol witness table for UnanimatableModifier;
}

void protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance UnanimatableModifier(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 36) |= 1u;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance UnanimatableModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 8);
  v7 = a2[5];
  v8 = a2[6];
  v9 = *((_DWORD *)a2 + 20);
  v10 = *((_DWORD *)a2 + 9) | 1;
  v13 = *a2;
  v14 = v4;
  v15 = v5;
  v16 = a2[3];
  v17 = v6;
  v18 = v10;
  v19 = v7;
  v20 = v8;
  v21 = *(_OWORD *)(a2 + 7);
  v22 = a2[9];
  v23 = v9;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v11 = swift_bridgeObjectRetain_n();
  a3(v11, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance UnanimatableModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  char v24;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 8);
  v7 = a2[5];
  v8 = *((_DWORD *)a2 + 16);
  v9 = a2[9];
  v10 = *((_BYTE *)a2 + 80);
  v11 = *((_DWORD *)a2 + 9) | 1;
  v14 = *a2;
  v15 = v4;
  v16 = v5;
  v17 = a2[3];
  v18 = v6;
  v19 = v11;
  v20 = v7;
  v21 = *((_OWORD *)a2 + 3);
  v22 = v8;
  v23 = v9;
  v24 = v10;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_retain_n();
  v12 = swift_bridgeObjectRetain_n();
  a3(v12, &v14);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance UnanimatableModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for DynamicPropertyBox.reset() in conformance IdentityLinkBox()
{
  _DWORD *v0;

  *v0 = 0;
}

ValueMetadata *type metadata accessor for ViewIdentity.Tracker()
{
  return &type metadata for ViewIdentity.Tracker;
}

uint64_t specialized static IdentityLink._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  lazy protocol witness table accessor for type IdentityLinkBox and conformance IdentityLinkBox();
  return _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
}

unint64_t lazy protocol witness table accessor for type IdentityLinkBox and conformance IdentityLinkBox()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IdentityLinkBox and conformance IdentityLinkBox;
  if (!lazy protocol witness table cache variable for type IdentityLinkBox and conformance IdentityLinkBox)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentityLinkBox, &unk_1E1ABB658);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IdentityLinkBox and conformance IdentityLinkBox);
  }
  return result;
}

void *type metadata accessor for IdentityLinkBox()
{
  return &unk_1E1ABB658;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in IdentityLinkBox()
{
  return &protocol witness table for IdentityLink;
}

uint64_t _ContentShapeModifier.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ContentShapeModifier.shape.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ContentShapeModifier.shape.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ContentShapeModifier.eoFill.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t _ContentShapeModifier.eoFill.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_ContentShapeModifier.eoFill.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ContentShapeResponderFilter.responder.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v1 + 120))
  {
    v2 = *(_QWORD *)(v1 + 120);
  }
  else
  {
    v2 = closure #1 in ContentShapeResponderFilter.responder.getter(v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    *(_QWORD *)(v1 + 120) = v2;
    swift_retain();
  }
  swift_retain();
  return v2;
}

uint64_t closure #1 in ContentShapeResponderFilter.responder.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v10;

  v6 = *(id *)(a1 + 112);
  AGGraphClearUpdate();
  v7 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in closure #1 in ContentShapeResponderFilter.responder.getter(a1, a2, a3, v8, &v10);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return v10;
}

uint64_t closure #1 in closure #1 in ContentShapeResponderFilter.responder.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  type metadata accessor for ContentShapeResponder(0, a2, a3, a4);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_DWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = v7;
  v18 = v8;
  v19 = *(_OWORD *)(a1 + 48);
  v20 = v9;
  v21 = v10;
  v22 = *(_OWORD *)(a1 + 80);
  v23 = *(_QWORD *)(a1 + 96);
  v24 = v11;
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = ContentShapeResponder.init(inputs:)((uint64_t)&v16, v12, v13, v14);
  *a5 = result;
  return result;
}

uint64_t ContentShapeResponder.__allocating_init(inputs:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_allocObject();
  return ContentShapeResponder.init(inputs:)(a1, v2, v3, v4);
}

uint64_t ContentShapeResponderFilter.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Value;
  char v11;
  char v12;
  __int128 *v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  _DWORD v20[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = type metadata accessor for _ContentShapeModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v21 = *(_QWORD *)(v5 - 8);
  v6 = v21;
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v20 - v8;
  ContentShapeResponderFilter.responder.getter(a1);
  Value = AGGraphGetValue();
  v12 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, Value, v5);
  v20[1] = v12 & 1;
  v13 = (__int128 *)AGGraphGetValue();
  v20[0] = v14 & 1;
  v15 = v13[1];
  v23 = *v13;
  v24 = v15;
  v22 = *(_OWORD *)AGGraphGetValue();
  v16 = AGGraphGetValue();
  v25 = *(_QWORD *)v16;
  v26 = *(_OWORD *)(v16 + 8);
  v27 = *(_OWORD *)(v16 + 24);
  swift_retain();
  ContentShapeResponderFilter.responder.getter(a1);
  swift_beginAccess();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeModifier<A>, v5);
  type metadata accessor for ContentResponderHelper();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v5);
  ContentShapeResponderFilter.responder.getter(a1);
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if ((v17 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  swift_release();
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v19 + 32) = ContentShapeResponderFilter.responder.getter(a1);
    v25 = v19;
    specialized Array._endMutation()();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ContentShapeResponder.containsGlobalPoints(_:cacheKey:options:)(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *, uint64_t, uint64_t, uint64_t *);
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;

  v8 = *v4;
  v9 = *a4;
  static Semantics.v6.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
  {
    v16 = v9;
    type metadata accessor for DefaultLayoutViewResponder();
    v10 = (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t *))method lookup function for ViewResponder();
    v10(v14, a2, a3 | ((HIDWORD(a3) & 1) << 32), &v16);
  }
  v15 = v9;
  swift_beginAccess();
  v12 = type metadata accessor for _ContentShapeModifier(255, *(_QWORD *)(v8 + class metadata base offset for ContentShapeResponder), *(_QWORD *)(v8 + class metadata base offset for ContentShapeResponder + 8), v11);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeModifier<A>, v12);
  type metadata accessor for ContentResponderHelper();
  ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:)();
  result = swift_endAccess();
  *a1 = v16;
  return result;
}

uint64_t ContentShapeResponder.addContentPath(to:kind:in:observer:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_beginAccess();
  v3 = type metadata accessor for _ContentShapeModifier(255, *(_QWORD *)(v1 + class metadata base offset for ContentShapeResponder), *(_QWORD *)(v1 + class metadata base offset for ContentShapeResponder + 8), v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeModifier<A>, v3);
  type metadata accessor for ContentResponderHelper();
  ContentResponderHelper.addContentPath(to:kind:in:observer:)();
  return swift_endAccess();
}

unint64_t ContentShapeResponder.descriptionName.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  v1 = *v0;
  swift_beginAccess();
  v3 = type metadata accessor for _ContentShapeModifier(255, *(_QWORD *)(v1 + class metadata base offset for ContentShapeResponder), *(_QWORD *)(v1 + class metadata base offset for ContentShapeResponder + 8), v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeModifier<A>, v3);
  type metadata accessor for ContentResponderHelper();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 2629694;
  v5._object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 8236;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8745;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  return 0xD000000000000016;
}

uint64_t ContentShapeResponder.extendPrintTree(string:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  _QWORD v23[3];
  Swift::String v24;

  v5 = (uint64_t *)(*v4 + class metadata base offset for ContentShapeResponder);
  v6 = type metadata accessor for _ContentShapeModifier(255, *v5, v5[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeModifier<A>, v6);
  v7 = type metadata accessor for ContentResponderHelper();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v23 - v10;
  v12 = (char *)v4 + v5[2];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v12, v7);
  ContentResponderHelper.globalPosition.getter();
  v14 = v13;
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v17._countAndFlagsBits = 91;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  swift_beginAccess();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v18._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 8236;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  swift_beginAccess();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v20._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 4202589;
  v21._object = (void *)0xE300000000000000;
  String.append(_:)(v21);
  v23[0] = v14;
  v23[1] = v16;
  type metadata accessor for (CGFloat, CGFloat)();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v24);
  return swift_bridgeObjectRelease();
}

uint64_t ContentShapeResponder.init(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v5 = type metadata accessor for _ContentShapeModifier(0, *(_QWORD *)(*v4 + class metadata base offset for ContentShapeResponder), *(_QWORD *)(*v4 + class metadata base offset for ContentShapeResponder + 8), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeModifier<A>, v5);
  ContentResponderHelper.init()();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t ContentShapeResponder.__allocating_init(inputs:viewSubgraph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_allocObject();
  return ContentShapeResponder.init(inputs:viewSubgraph:)(a1, a2, v4, v5);
}

uint64_t ContentShapeResponder.init(inputs:viewSubgraph:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v5 = type metadata accessor for _ContentShapeModifier(0, *(_QWORD *)(*v4 + class metadata base offset for ContentShapeResponder), *(_QWORD *)(*v4 + class metadata base offset for ContentShapeResponder + 8), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeModifier<A>, v5);
  ContentResponderHelper.init()();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t ContentShapeResponder.__ivar_destroyer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (uint64_t *)(*v4 + class metadata base offset for ContentShapeResponder);
  v6 = (char *)v4 + v5[2];
  v7 = type metadata accessor for _ContentShapeModifier(255, *v5, v5[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeModifier<A>, v7);
  v8 = type metadata accessor for ContentResponderHelper();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
}

_QWORD *ContentShapeResponder.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = (_QWORD *)DefaultLayoutViewResponder.deinit();
  v3 = (char *)v2 + *(_QWORD *)(class metadata base offset for ContentShapeResponder + *v2 + 16);
  v5 = type metadata accessor for _ContentShapeModifier(255, *(_QWORD *)(v1 + class metadata base offset for ContentShapeResponder), *(_QWORD *)(v1 + class metadata base offset for ContentShapeResponder + 8), v4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeModifier<A>, v5);
  v6 = type metadata accessor for ContentResponderHelper();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v3, v6);
  return v2;
}

uint64_t ContentShapeResponder.__deallocating_deinit()
{
  ContentShapeResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t _ContentShapeModifier.contains(points:size:)()
{
  _BYTE v1[40];

  Shape.effectivePath(in:)();
  default argument 2 of Path.contains(points:eoFill:origin:)();
  Path.contains(points:eoFill:origin:)();
  return outlined release of Path((uint64_t)v1);
}

double _ContentShapeModifier.contentPath(size:)@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  char v5;

  Shape.effectivePath(in:)();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:) in conformance _ContentShapeModifier<A>@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  char v5;

  _ContentShapeModifier.contentPath(size:)((uint64_t)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t type metadata accessor for ContentShapeResponderFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContentShapeResponderFilter);
}

uint64_t outlined release of ContentShapeResponderFilter<A>(uint64_t a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in _ContentShapeModifier<A>()
{
  return &protocol witness table for _ContentShapeModifier<A>;
}

uint64_t getEnumTagSinglePayload for _ContentShapeModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -1)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_18794CC54 + 4 * byte_187C70AB0[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

uint64_t type metadata completion function for ContentShapeResponder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;

  v4 = type metadata accessor for _ContentShapeModifier(255, *(_QWORD *)(a1 + class metadata base offset for ContentShapeResponder), *(_QWORD *)(a1 + class metadata base offset for ContentShapeResponder + 8), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeModifier<A>, v4);
  result = type metadata accessor for ContentResponderHelper();
  if (v6 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ContentShapeResponder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContentShapeResponder);
}

uint64_t sub_18794CD80(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for _ContentShapeModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for _ContentShapeModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t destroy for ContentShapeResponderFilter(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for ContentShapeResponderFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v3;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v5 = *(void **)(a2 + 112);
  v4 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v5;
  *(_QWORD *)(a1 + 120) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ContentShapeResponderFilter(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v4 = *(void **)(a2 + 112);
  v5 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ContentShapeResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);

  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentShapeResponderFilter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentShapeResponderFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in ContentShapeResponderFilter<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t destroy for RepresentableContextValues(uint64_t a1)
{
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for RepresentableContextValues(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, v6);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  return a1;
}

uint64_t assignWithCopy for RepresentableContextValues(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = v2[1];
  swift_retain();
  swift_release();
  v4 = v2[2];
  v5 = v2[3];
  LOBYTE(v2) = *((_BYTE *)v2 + 32);
  outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, (char)v2);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = (_BYTE)v2;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RepresentableContextValues(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, v7);
  return a1;
}

ValueMetadata *type metadata accessor for RepresentableContextValues()
{
  return &type metadata for RepresentableContextValues;
}

uint64_t closure #1 in RepresentableContextValues.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *InputValue;
  uint64_t v3;
  uint64_t v4;

  InputValue = (uint64_t *)AGGraphGetInputValue();
  v4 = *InputValue;
  v3 = InputValue[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t destroy for RepresentableContextValues.EnvironmentStorage(uint64_t a1)
{
  return outlined consume of RepresentableContextValues.EnvironmentStorage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for RepresentableContextValues.EnvironmentStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of RepresentableContextValues.EnvironmentStorage(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for RepresentableContextValues.EnvironmentStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of RepresentableContextValues.EnvironmentStorage(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RepresentableContextValues.EnvironmentStorage(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for RepresentableContextValues.EnvironmentStorage()
{
  return &type metadata for RepresentableContextValues.EnvironmentStorage;
}

void type metadata completion function for OutlinePrimitive()
{
  type metadata accessor for OutlinePrimitive.Base();
}

uint64_t *initializeBufferWithCopyOfBuffer for OutlinePrimitive(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80);
  if ((v10 & 0x1000F8) != 0
    || (((((((((((((v9 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 31) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + (((v10 & 0xF8 | 7u) + 16) & ~(unint64_t)(v10 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    v11 = v9 + 1;
    v12 = *((unsigned __int8 *)a2 + v9);
    if (v12 >= 2)
    {
      if (v9 <= 3)
        v13 = v9;
      else
        v13 = 4;
      __asm { BR              X14 }
    }
    v15 = v12 == 1;
    if (v12 == 1)
    {
      v7 = *(_QWORD *)(v5 - 8);
      v16 = v5;
    }
    else
    {
      v16 = AssociatedTypeWitness;
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v16);
    *((_BYTE *)a1 + v9) = v15;
    v17 = (_QWORD *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    v18 = (_QWORD *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = (_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = (_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = (_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFF8);
    v27 = (_QWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFF8);
    *v26 = *v27;
    v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = (_QWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
    v32 = (_QWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v31 = *v32;
    v31[1] = v32[1];
    v31[2] = v32[2];
    *(_QWORD *)(((unint64_t)v31 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v32 + 31) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for OutlinePrimitive(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v3 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a1 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X14 }
  }
  if (v8 == 1)
  {
    v5 = *(_QWORD *)(v3 - 8);
    v10 = v3;
  }
  else
  {
    v10 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OutlinePrimitive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X14 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v7 = *(_QWORD *)(v5 - 8);
    v13 = v5;
  }
  else
  {
    v13 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v13);
  *(_BYTE *)(a1 + v9) = v12;
  v14 = (_QWORD *)((v9 + 8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)((v9 + 8 + a2) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = (_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = (_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  v28[1] = v29[1];
  v28[2] = v29[2];
  *(_QWORD *)(((unint64_t)v28 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v29 + 31) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OutlinePrimitive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;

  v5 = *(_QWORD *)(a3 + 16);
  if (a1 == a2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  }
  else
  {
    v6 = swift_getAssociatedTypeWitness();
    AssociatedTypeWitness = v6;
    v8 = *(_QWORD *)(v6 - 8);
    v9 = *(_QWORD *)(v5 - 8);
    v10 = *(_QWORD *)(v9 + 64);
    if (v10 <= *(_QWORD *)(v8 + 64))
      v11 = *(_QWORD *)(v8 + 64);
    else
      v11 = *(_QWORD *)(v9 + 64);
    v12 = *(unsigned __int8 *)(a1 + v11);
    if (v12 >= 2)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 1)
      v14 = *(_QWORD *)(v5 - 8);
    else
      v14 = *(_QWORD *)(v6 - 8);
    if (v12 == 1)
      v15 = v5;
    else
      v15 = v6;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v15);
    v16 = *(unsigned __int8 *)(a2 + v11);
    if (v16 >= 2)
    {
      if (v11 <= 3)
        v17 = v11;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a2, v5);
      *(_BYTE *)(a1 + v11) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, AssociatedTypeWitness);
      *(_BYTE *)(a1 + v11) = 0;
    }
  }
  v18 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (v10 > v18)
    v18 = v10;
  v19 = v18 + 8;
  v20 = (_QWORD *)((v19 + a1) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)((v19 + a2) & 0xFFFFFFFFFFFFFFF8);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_retain();
  swift_release();
  v23 = (_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  swift_retain();
  swift_release();
  v26 = (_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  swift_retain();
  swift_release();
  v29 = (_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFF8);
  *v29 = *v30;
  swift_retain();
  swift_release();
  v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  swift_retain();
  swift_release();
  v34 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v34 = *v35;
  swift_retain();
  swift_release();
  v34[1] = v35[1];
  swift_retain();
  swift_release();
  v34[2] = v35[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v34 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v35 + 31) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for OutlinePrimitive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X14 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v7 = *(_QWORD *)(v5 - 8);
    v13 = v5;
  }
  else
  {
    v13 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v13);
  *(_BYTE *)(a1 + v9) = v12;
  v14 = (_OWORD *)((v9 + 8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)((v9 + 8 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = (_OWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFF8);
  v17 = (_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (_OWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFF8);
  v19 = (_OWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
  v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = ((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_OWORD *)v25;
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
  *(_OWORD *)v24 = v26;
  *(_QWORD *)((v24 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v25 + 31) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for OutlinePrimitive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _OWORD *v28;
  _OWORD *v29;
  _QWORD *v30;
  _QWORD *v31;

  v5 = *(_QWORD *)(a3 + 16);
  if (a1 == a2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  }
  else
  {
    v6 = swift_getAssociatedTypeWitness();
    AssociatedTypeWitness = v6;
    v8 = *(_QWORD *)(v6 - 8);
    v9 = *(_QWORD *)(v5 - 8);
    v10 = *(_QWORD *)(v9 + 64);
    if (v10 <= *(_QWORD *)(v8 + 64))
      v11 = *(_QWORD *)(v8 + 64);
    else
      v11 = *(_QWORD *)(v9 + 64);
    v12 = *(unsigned __int8 *)(a1 + v11);
    if (v12 >= 2)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 1)
      v14 = *(_QWORD *)(v5 - 8);
    else
      v14 = *(_QWORD *)(v6 - 8);
    if (v12 == 1)
      v15 = v5;
    else
      v15 = v6;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v15);
    v16 = *(unsigned __int8 *)(a2 + v11);
    if (v16 >= 2)
    {
      if (v11 <= 3)
        v17 = v11;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a1, a2, v5);
      *(_BYTE *)(a1 + v11) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, AssociatedTypeWitness);
      *(_BYTE *)(a1 + v11) = 0;
    }
  }
  v18 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (v10 > v18)
    v18 = v10;
  v19 = v18 + 8;
  v20 = (_OWORD *)((v19 + a1) & 0xFFFFFFFFFFFFFFF8);
  v21 = v19 + a2;
  v22 = (v21 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v20 = *(_OWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v23 = (_OWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  v22 &= 0xFFFFFFFFFFFFF8uLL;
  *v23 = *(_OWORD *)v22;
  swift_release();
  v24 = (_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_OWORD *)((v22 + 23) & 0xFFFFFFFFFFFFF8);
  *v24 = *v25;
  swift_release();
  v26 = (_QWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFF8);
  *v26 = *v27;
  swift_release();
  v28 = (_OWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_OWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
  *v28 = *v29;
  swift_release();
  v30 = (_QWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  swift_release();
  v30[1] = v31[1];
  swift_release();
  v30[2] = v31[2];
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v30 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v31 + 31) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for OutlinePrimitive(_DWORD *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  if (!a2)
    return 0;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_5;
  v9 = (((((((((((((v6 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 31) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  v10 = v9 & 0xFFFFFFF8;
  v11 = a2 - 2147483646;
  if ((v9 & 0xFFFFFFF8) != 0)
    v11 = 2;
  if (v11 >= 0x10000)
    v12 = 4;
  else
    v12 = 2;
  if (v11 < 0x100)
    v13 = 1;
  else
    v13 = v12;
  if (v13 == 4)
  {
    v14 = *(_DWORD *)((char *)a1 + v9);
    if (!v14)
      goto LABEL_5;
  }
  else if (v13 == 2)
  {
    v14 = *(unsigned __int16 *)((char *)a1 + v9);
    if (!v14)
      goto LABEL_5;
  }
  else
  {
    v14 = *((unsigned __int8 *)a1 + v9);
    if (!v14)
    {
LABEL_5:
      v7 = *(_QWORD *)(((unint64_t)a1 + v6 + 8) & 0xFFFFFFFFFFFFF8);
      if (v7 >= 0xFFFFFFFF)
        LODWORD(v7) = -1;
      return (v7 + 1);
    }
  }
  v15 = v14 - 1;
  if (v10)
  {
    v15 = 0;
    LODWORD(v10) = *a1;
  }
  return (v10 | v15) ^ 0x80000000;
}

void storeEnumTagSinglePayload for OutlinePrimitive(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  int v11;

  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v8)
    v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  if (a3 < 0)
  {
    v10 = a3 - 2147483646;
    if ((((((((((((((v8 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 31) & 0xFFFFFFF8) != 0xFFFFFFF8)
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v9 = 1;
    else
      v9 = v11;
    if ((a2 & 0x80000000) == 0)
LABEL_5:
      __asm { BR              X11 }
  }
  else
  {
    v9 = 0u;
    if ((a2 & 0x80000000) == 0)
      goto LABEL_5;
  }
  if ((((((((((((((v8 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
       + 31) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    bzero(a1, (((((((((((((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 31) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = a2 ^ 0x80000000;
  }
  __asm { BR              X10 }
}

void sub_18794E5CC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (!v1)
    JUMPOUT(0x18794E5B8);
  JUMPOUT(0x18794E5A4);
}

void sub_18794E5D8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18794E5B8);
}

void sub_18794E5E0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18794E5B8);
}

void type metadata accessor for OutlinePrimitive()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for OutlinePrimitive.Base()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for OutlinePrimitive.Base()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for OutlinePrimitive.Base(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = (*(_BYTE *)(v8 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 <= 7
    && (unint64_t)(v9 + 1) <= 0x18
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0)
  {
    v14 = *((unsigned __int8 *)a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X14 }
    }
    if (v14 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v9) = 0;
    }
  }
  else
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for OutlinePrimitive.Base(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(v3 - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (v8 >= 2)
  {
    if (v6 <= 3)
      v9 = v6;
    else
      v9 = 4;
    __asm { BR              X15 }
  }
  if (v8 == 1)
  {
    v5 = *(_QWORD *)(v3 - 8);
    v10 = v3;
  }
  else
  {
    v10 = AssociatedTypeWitness;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v10);
}

uint64_t initializeWithCopy for OutlinePrimitive.Base(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X14 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v7 = *(_QWORD *)(v5 - 8);
    v13 = v5;
  }
  else
  {
    v13 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v13);
  *(_BYTE *)(a1 + v9) = v12;
  return a1;
}

uint64_t assignWithCopy for OutlinePrimitive.Base(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v7 = AssociatedTypeWitness;
    v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v9 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v9 + 64) <= *(_QWORD *)(v8 + 64))
      v10 = *(_QWORD *)(v8 + 64);
    else
      v10 = *(_QWORD *)(v9 + 64);
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(v5 - 8);
    else
      v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (v11 == 1)
      v14 = v5;
    else
      v14 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
      v18 = v9;
    else
      v18 = v8;
    if (v15 == 1)
      v19 = v5;
    else
      v19 = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a1, a2, v19);
    *(_BYTE *)(a1 + v10) = v17;
  }
  return a1;
}

uint64_t initializeWithTake for OutlinePrimitive.Base(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X14 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v7 = *(_QWORD *)(v5 - 8);
    v13 = v5;
  }
  else
  {
    v13 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v13);
  *(_BYTE *)(a1 + v9) = v12;
  return a1;
}

uint64_t assignWithTake for OutlinePrimitive.Base(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v7 = AssociatedTypeWitness;
    v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v9 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v9 + 64) <= *(_QWORD *)(v8 + 64))
      v10 = *(_QWORD *)(v8 + 64);
    else
      v10 = *(_QWORD *)(v9 + 64);
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(v5 - 8);
    else
      v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (v11 == 1)
      v14 = v5;
    else
      v14 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
      v18 = v9;
    else
      v18 = v8;
    if (v15 == 1)
      v19 = v5;
    else
      v19 = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(a1, a2, v19);
    *(_BYTE *)(a1 + v10) = v17;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for OutlinePrimitive.Base(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  unint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  if (v7 <= *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64))
    v7 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 254) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v12 < 2)
    {
LABEL_21:
      v14 = *(unsigned __int8 *)(a1 + v7);
      if (v14 >= 2)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_21;
LABEL_14:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 > 3)
      LODWORD(v8) = 4;
    __asm { BR              X11 }
  }
  return (v13 + 255);
}

void storeEnumTagSinglePayload for OutlinePrimitive.Base(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v8)
    v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v9 = v8 + 1;
  if (a3 < 0xFF)
  {
    v10 = 0u;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 254) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v11 = a2 - 255;
  if (v9 < 4)
  {
    if ((_DWORD)v8 != -1)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v8 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for OutlinePrimitive.Base(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  result = *(unsigned __int8 *)(a1 + v4);
  if (result >= 2)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void destructiveInjectEnumTag for OutlinePrimitive.Base(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  if (a2 > 1)
  {
    v7 = *(_QWORD *)(a3 + 16);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64))
      v9 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
    else
      v9 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
    v10 = a2 - 2;
    if (v9 < 4)
    {
      v11 = v10 >> (8 * v9);
      v12 = v10 & ~(-1 << (8 * v9));
      a1[v9] = v11 + 2;
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
    else
    {
      a1[v9] = 2;
      bzero(a1, v9);
      *(_DWORD *)a1 = v10;
    }
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v5 > v6)
      v6 = v5;
    a1[v6] = a2;
  }
}

uint64_t associated type witness table accessor for View.Body : View in <> OutlinePrimitive<A, B, C, D, E>()
{
  return swift_getOpaqueTypeConformance2();
}

void OutlinePrimitive.init(base:id:children:expandedElements:parentContent:leafContent:grouping:)()
{
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_18794F4E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
  type metadata accessor for OutlinePrimitive();
}

uint64_t sub_18794F51C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v1 + a1[22]) = v12;
  v5 = (_QWORD *)(v1 + a1[23]);
  *v5 = v14;
  v5[1] = v16;
  v6 = (_QWORD *)(v1 + a1[24]);
  *v6 = v19;
  v6[1] = v21;
  v6[2] = v22;
  v7 = (_QWORD *)(v1 + a1[19]);
  *v7 = v24;
  v7[1] = v15;
  v8 = (_QWORD *)(v1 + a1[20]);
  *v8 = v18;
  v8[1] = v20;
  v9 = (_QWORD *)(v1 + a1[21]);
  *v9 = v23;
  v9[1] = v17;
  v10 = dynamicContentID++;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v2, v3);
  *(_QWORD *)(v1 + a1[25]) = v10;
  return result;
}

uint64_t OutlinePrimitive.Base.count.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, v2);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v9 + 16))(v13, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v13, v4);
    v14 = dispatch thunk of Collection.count.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, a1);
    return 1;
  }
  return v14;
}

uint64_t OutlinePrimitive.Base.itemAt(index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v27)(char *, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42[32];

  v40 = a3;
  v41 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v36 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = OutlinePrimitive.Base.count.getter(a2);
  if (v21 <= v41)
  {
    v33 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v40, 1, 1, v33);
  }
  else
  {
    v36 = v15;
    v37 = v7;
    v38 = AssociatedTypeWitness;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, v3, a2);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v23 = v40;
    if (EnumCaseMultiPayload == 1)
    {
      v24 = v11;
      v25 = v36;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v20, v5);
      v26 = v10;
      Collection.index(atOffset:)();
      v27 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v29 = v28;
      v30 = swift_getAssociatedTypeWitness();
      v31 = *(_QWORD *)(v30 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v23, v29, v30);
      v27(v42, 0);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v38);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v5);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v23, 0, 1, v30);
    }
    else
    {
      v34 = swift_getAssociatedTypeWitness();
      v35 = *(_QWORD *)(v34 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v23, v20, v34);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v23, 0, 1, v34);
    }
  }
}

uint64_t OutlinePrimitive.expandedElements.getter()
{
  uint64_t v0;
  uint64_t v2;

  type metadata accessor for Set();
  v0 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](&v2, v0);
  return v2;
}

uint64_t OutlinePrimitive.$expandedElements.getter()
{
  uint64_t v1;

  type metadata accessor for Set();
  type metadata accessor for Binding();
  Binding.projectedValue.getter();
  return v1;
}

uint64_t OutlinePrimitive<>.expansion(for:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, _QWORD *);
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  void (*v49)(char *, uint64_t, _QWORD *, double);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v51 = a3;
  v52 = a4;
  v53 = a5;
  v48 = a1;
  v7 = a2[3];
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v15 = MEMORY[0x1E0C80A78](v14, v11);
  v16 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = *(void (**)(char *, uint64_t, _QWORD *, double))(v12 + 16);
  v49(v16, v17, a2, v15);
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v47(v10, a1, v7);
  v18 = *(unsigned __int8 *)(v12 + 80);
  v19 = *(unsigned __int8 *)(v8 + 80);
  v20 = v13 + ((v18 + 112) & ~v18);
  v21 = (v18 + 112) & ~v18;
  v22 = (v20 + v19) & ~v19;
  v23 = v22 + v9;
  v24 = v22;
  v39 = v22;
  v45 = v18 | v19 | 7;
  v46 = v23;
  v25 = (char *)swift_allocObject();
  *((_QWORD *)v25 + 2) = 0;
  *((_QWORD *)v25 + 3) = 0;
  v44 = a2[2];
  *((_QWORD *)v25 + 4) = v44;
  *((_QWORD *)v25 + 5) = v7;
  v26 = a2[5];
  v42 = a2[4];
  v43 = v26;
  *((_QWORD *)v25 + 6) = v42;
  *((_QWORD *)v25 + 7) = v26;
  v27 = a2[7];
  v40 = a2[6];
  v41 = v27;
  *((_QWORD *)v25 + 8) = v40;
  *((_QWORD *)v25 + 9) = v27;
  v28 = a2[8];
  v29 = v51;
  *((_QWORD *)v25 + 10) = v28;
  *((_QWORD *)v25 + 11) = v29;
  v30 = v53;
  *((_QWORD *)v25 + 12) = v52;
  *((_QWORD *)v25 + 13) = v30;
  v31 = *(void (**)(char *, char *, _QWORD *))(v12 + 32);
  v31(&v25[v21], v16, a2);
  v32 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v32(&v25[v24], v10, v7);
  ((void (*)(char *, uint64_t, _QWORD *))v49)(v16, v50, a2);
  v47(v10, v48, v7);
  v33 = (char *)swift_allocObject();
  *((_QWORD *)v33 + 2) = 0;
  *((_QWORD *)v33 + 3) = 0;
  *((_QWORD *)v33 + 4) = v44;
  *((_QWORD *)v33 + 5) = v7;
  v34 = v43;
  *((_QWORD *)v33 + 6) = v42;
  *((_QWORD *)v33 + 7) = v34;
  v35 = v41;
  *((_QWORD *)v33 + 8) = v40;
  *((_QWORD *)v33 + 9) = v35;
  v36 = v51;
  *((_QWORD *)v33 + 10) = v28;
  *((_QWORD *)v33 + 11) = v36;
  v37 = v53;
  *((_QWORD *)v33 + 12) = v52;
  *((_QWORD *)v33 + 13) = v37;
  v31(&v33[v21], v16, a2);
  v32(&v33[v39], v10, v7);
  Binding.init(get:set:)();
  return v54;
}

void closure #1 in OutlinePrimitive<>.expansion(for:)()
{
  type metadata accessor for OutlinePrimitive();
}

uint64_t sub_18794FD24()
{
  _BYTE *v0;
  char v1;
  uint64_t result;

  OutlinePrimitive.expandedElements.getter();
  v1 = Set.contains(_:)();
  result = swift_bridgeObjectRelease();
  *v0 = v1 & 1;
  return result;
}

void closure #2 in OutlinePrimitive<>.expansion(for:)(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v26 = a8;
  v27 = a4;
  v28 = a5;
  v25 = a11;
  v15 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v15, v16);
  v17 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  if (*a1 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v21, v28, a7, v24);
    v29 = a6;
    v30 = a7;
    v31 = v26;
    v32 = a9;
    v33 = a10;
    v34 = v25;
    v35 = a12;
    type metadata accessor for OutlinePrimitive();
  }
  v29 = a6;
  v30 = a7;
  v31 = v26;
  v32 = a9;
  v33 = a10;
  v34 = v25;
  v35 = a12;
  type metadata accessor for OutlinePrimitive();
}

void sub_18794FF5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = (uint64_t *)(*(_QWORD *)(v4 - 176) + *(int *)(a1 + 96));
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  *(_QWORD *)(v4 - 144) = *v5;
  *(_QWORD *)(v4 - 136) = v7;
  *(_QWORD *)(v4 - 128) = v8;
  type metadata accessor for Set();
  v9 = type metadata accessor for Binding();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75B9C8](v9);
  Set.remove(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  v10 = *(_QWORD *)(v4 - 152);
  *(_QWORD *)(v4 - 144) = v6;
  *(_QWORD *)(v4 - 136) = v7;
  *(_QWORD *)(v4 - 128) = v8;
  *(_QWORD *)(v4 - 160) = v10;
  specialized Binding.wrappedValue.setter();
  swift_bridgeObjectRelease();
  swift_release();
  JUMPOUT(0x18795001CLL);
}

void OutlinePrimitive<>.root.getter()
{
  type metadata accessor for OutlinePrimitive.Base();
}

uint64_t sub_187950094(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[64];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v13[-v7];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v5 + 16))(&v13[-v7], v3, a1, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, a1);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v2, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    v11 = swift_getAssociatedTypeWitness();
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(v2, v8, v11);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v2, 0, 1, v11);
  }
}

void OutlinePrimitive<>.nodes.getter()
{
  type metadata accessor for OutlinePrimitive.Base();
}

uint64_t sub_18795020C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  double v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[64];

  v6 = *(_QWORD *)(a1 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = &v13[-v8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v6 + 16))(&v13[-v8], v3, a1, v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v4 - 128) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v10 + 32))(v2, v9);
    v11 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, a1);
    v10 = *(_QWORD *)(*(_QWORD *)(v4 - 128) - 8);
    v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v10 + 56))(v2, v11, 1, *(_QWORD *)(v4 - 128));
}

void OutlinePrimitive<>.body.getter(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[73];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a3;
  v28 = a2;
  v22[52] = a4;
  v4 = a1[3];
  v27 = a1[2];
  v5 = a1[7];
  v6 = a1[8];
  v29 = v27;
  v30 = v4;
  v31 = a1;
  v32 = v5;
  v25 = v5;
  v33 = v6;
  v8 = type metadata accessor for ForEach();
  v22[7] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v22[9] = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v22[8] = (char *)v22 - v13;
  type metadata accessor for ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>>();
  v22[63] = v8;
  v22[32] = v14;
  v23 = type metadata accessor for _ConditionalContent();
  v22[34] = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v15);
  v22[33] = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v22[47] = (char *)v22 - v19;
  v24 = a1[5];
  v20 = v24;
  v21 = type metadata accessor for HStack();
  v29 = MEMORY[0x1E0CE4C68];
  v30 = v20;
  v22[72] = v21;
  v31 = (_QWORD *)v21;
  v32 = MEMORY[0x1E0CE4C58];
  type metadata accessor for StaticIf();
}

void sub_187950450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t AssociatedTypeWitness;
  uint64_t v36;
  uint64_t v37;

  v9[25] = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9[24] = (char *)&a9 - v17;
  type metadata accessor for _TraitWritingModifier<IsLeafTraitKey>();
  v9[71] = a1;
  v18 = type metadata accessor for ModifiedContent();
  v9[27] = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v9[26] = (char *)&a9 - v20;
  v9[80] = v13;
  v21 = type metadata accessor for TagValueTraitKey();
  v22 = MEMORY[0x1E0CE3440];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3440], v21);
  type metadata accessor for _TraitWritingModifier();
  v9[57] = v18;
  v23 = type metadata accessor for ModifiedContent();
  v9[81] = v11;
  v24 = type metadata accessor for Optional();
  *(_QWORD *)(v15 - 96) = v13;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v24, v15 - 96);
  v25 = type metadata accessor for TagValueTraitKey();
  MEMORY[0x18D75FFDC](v22, v25);
  type metadata accessor for _TraitWritingModifier();
  v9[70] = v23;
  v26 = type metadata accessor for ModifiedContent();
  v9[82] = v26;
  v9[23] = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v9[29] = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v9[28] = (char *)&a9 - v31;
  v9[40] = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v32, v33);
  v9[45] = (char *)&a9 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[31] = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(v12 + 32);
  v37 = *(_QWORD *)(v12 + 48);
  *(_QWORD *)(v15 - 168) = AssociatedTypeWitness;
  *(_QWORD *)(v15 - 160) = v36;
  v9[75] = v36;
  *(_QWORD *)(v15 - 152) = v37;
  *(_QWORD *)(v15 - 144) = v14;
  v9[76] = v37;
  *(_QWORD *)(v15 - 136) = v9[83];
  type metadata accessor for _OutlineGenerator_Configuration();
}

void sub_187950698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v9 + 112) = (char *)&a9 - v16;
  *(_QWORD *)(v15 - 168) = v10;
  *(_QWORD *)(v15 - 160) = v12;
  *(_QWORD *)(v15 - 152) = v11;
  *(_QWORD *)(v15 - 144) = v14;
  *(_QWORD *)(v15 - 136) = v13;
  type metadata accessor for _OutlineGenerator_Configuration.Subtree();
}

void sub_1879506DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v9 = lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren();
  *(_QWORD *)(v7 - 168) = v2;
  *(_QWORD *)(v7 - 160) = v4;
  *(_QWORD *)(v7 - 152) = v3;
  *(_QWORD *)(v7 - 144) = &type metadata for OutlineSubgroupChildren;
  *(_QWORD *)(v7 - 136) = a1;
  *(_QWORD *)(v7 - 128) = v6;
  *(_QWORD *)(v1 + 624) = v6;
  *(_QWORD *)(v7 - 120) = v5;
  *(_QWORD *)(v7 - 112) = v9;
  *(_QWORD *)(v1 + 96) = v9;
  *(_QWORD *)(v7 - 104) = &protocol witness table for _OutlineGenerator_Configuration<A, B, C>.Subtree;
  type metadata accessor for OutlineGenerator();
}

void sub_18795071C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9[18] = *(_QWORD *)(a1 - 8);
  v15 = MEMORY[0x1E0C80A78](a1, a2);
  v9[17] = (char *)&a9 - v16;
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _OutlineGenerator_Configuration<A, B, C>.Subtree, v11, v15);
  v18 = v9[86];
  *(_QWORD *)(v14 - 192) = v13;
  *(_QWORD *)(v14 - 184) = v18;
  *(_QWORD *)(v14 - 176) = v12;
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlinePrimitive<A, B, C, D, E>, v10, v14 - 192);
  v9[20] = v11;
  *(_QWORD *)(v14 - 168) = v11;
  *(_QWORD *)(v14 - 160) = v10;
  v9[13] = v17;
  *(_QWORD *)(v14 - 152) = v17;
  *(_QWORD *)(v14 - 144) = v19;
  v9[64] = v19;
  type metadata accessor for StaticSourceWriter();
}

void sub_1879507A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  char *v63;
  void (*v64)(char *, uint64_t, double);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;

  v9[67] = v13;
  v15 = type metadata accessor for ModifiedContent();
  v9[16] = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v15);
  v9[15] = (char *)&a9 - v16;
  v9[66] = v17;
  v9[69] = v14;
  v9[65] = type metadata accessor for ModifiedContent();
  v9[68] = v12;
  v18 = type metadata accessor for ModifiedContent();
  v9[19] = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v9[22] = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v9[21] = (char *)&a9 - v23;
  v24 = v9[85];
  v25 = type metadata accessor for Optional();
  v9[10] = *(_QWORD *)(v25 - 8);
  v9[11] = v25;
  MEMORY[0x1E0C80A78](v25, v26);
  v9[38] = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v9[39] = (char *)&a9 - v30;
  v9[60] = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v31, v32);
  v9[30] = (char *)&a9 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v35);
  v9[46] = (char *)&a9 - v36;
  MEMORY[0x1E0C80A78](v37, v38);
  v9[44] = (char *)&a9 - v39;
  v9[62] = v18;
  v40 = type metadata accessor for _ConditionalContent();
  v9[43] = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v41);
  v9[42] = (char *)&a9 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43, v44);
  v9[41] = (char *)&a9 - v45;
  v9[58] = v10;
  v46 = type metadata accessor for Optional();
  v9[35] = *(_QWORD *)(v46 - 8);
  v9[36] = v46;
  MEMORY[0x1E0C80A78](v46, v47);
  v9[53] = (char *)&a9 - v48;
  v9[59] = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v49, v50);
  v9[37] = (char *)&a9 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v52, v53);
  v9[61] = (char *)&a9 - v54;
  v9[51] = v40;
  v55 = type metadata accessor for _ConditionalContent();
  v9[49] = *(_QWORD *)(v55 - 8);
  v9[50] = v55;
  MEMORY[0x1E0C80A78](v55, v56);
  v9[48] = (char *)&a9 - v57;
  v9[84] = v11;
  v58 = *(_QWORD *)(v11 - 8);
  v59 = *(_QWORD *)(v58 + 64);
  v62 = MEMORY[0x1E0C80A78](v60, v61);
  v63 = (char *)&a9 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = *(void (**)(char *, uint64_t, double))(v58 + 16);
  v65 = v9[74];
  v64(v63, v65, v62);
  type metadata accessor for MainActor();
  v66 = static MainActor.shared.getter();
  v67 = *(unsigned __int8 *)(v58 + 80);
  v68 = (v67 + 112) & ~v67;
  v9[5] = v59;
  v9[55] = v68 + v59;
  v9[56] = v68;
  v9[1] = v67;
  v69 = v67 | 7;
  v70 = (_QWORD *)swift_allocObject();
  v71 = MEMORY[0x1E0DF06E8];
  v70[2] = v66;
  v70[3] = v71;
  v72 = v9[85];
  v73 = v9[81];
  v70[4] = v72;
  v70[5] = v73;
  v74 = v9[77];
  v70[6] = v9[75];
  v70[7] = v74;
  v75 = v9[79];
  v70[8] = v9[76];
  v70[9] = v75;
  v76 = v9[78];
  v70[10] = v9[80];
  v70[11] = v76;
  v77 = v9[83];
  v70[12] = v9[86];
  v70[13] = v77;
  v78 = (char *)v70 + v68;
  v79 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
  v80 = v72;
  v81 = v9[84];
  v79(v78, v63, v81);
  v9[4] = v64;
  ((void (*)(char *, uint64_t, uint64_t))v64)(v63, v65, v81);
  v82 = static MainActor.shared.getter();
  v9[3] = v69;
  v83 = (_QWORD *)swift_allocObject();
  v83[2] = v82;
  v83[3] = MEMORY[0x1E0DF06E8];
  v83[4] = v80;
  v84 = v9[75];
  v83[5] = v9[81];
  v83[6] = v84;
  v85 = v9[76];
  v83[7] = v9[77];
  v83[8] = v85;
  v86 = v9[80];
  v83[9] = v9[79];
  v83[10] = v86;
  v83[11] = v9[78];
  v87 = (char *)v83 + v9[56];
  v88 = v9[83];
  v83[12] = v9[86];
  v83[13] = v88;
  v9[6] = v63;
  v89 = v9[84];
  v9[2] = v79;
  v79(v87, v63, v89);
  type metadata accessor for Set();
  Binding.init(get:set:)();
  OutlinePrimitive<>.root.getter();
}

void sub_187950C7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, _QWORD);
  uint64_t v20;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v1, 1, v2);
  v0[55] = v4;
  v0[56] = v3;
  v0[54] = v5;
  if (v8 == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(v0[35] + 8))(v1, v0[36]);
    OutlinePrimitive<>.nodes.getter();
  }
  v9 = v0[61];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v1, v2);
  v10 = v0[39];
  (*(void (**)(uint64_t))(v7 + *(int *)(v0[84] + 92)))(v9);
  v11 = v0[60];
  v12 = v0[85];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v10, 1, v12) == 1)
  {
    v13 = (*(uint64_t (**)(uint64_t, _QWORD))(v0[10] + 8))(v10, v0[11]);
    v0[60] = &v20;
    MEMORY[0x1E0C80A78](v13, v14);
    v15 = MEMORY[0x1E0C80A78](v0[75], v0[80]);
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v0[72], v15);
    StaticIf<>.init(_:then:else:)(MEMORY[0x1E0CE4C68], (void (*)(void))partial apply for closure #4 in OutlinePrimitive<>.body.getter);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v11 + 32))(v0[44], v10, v12);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v6 + 16))(v0[37], v0[61], v2);
  v16 = v0[84];
  v0[47] = *(int *)(v16 + 88);
  v17 = v0[45];
  swift_getAtKeyPath();
  v0[46] = OutlinePrimitive<>.expansion(for:)(v17, (_QWORD *)v16, v0[78], v0[86], v0[83]);
  v0[39] = v18;
  v19 = *(void (**)(uint64_t, _QWORD))(v0[40] + 8);
  v0[53] = v19;
  v19(v17, v0[81]);
  _OutlineGenerator_Configuration.init(element:isExpanded:grouping:parentContent:)(v0[37], v0[14], v2);
}

void sub_187951230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_retain();
  swift_retain();
  OutlineGenerator<>.init(configuration:)(v1, v2, *(_QWORD *)(v0 + 136));
}

void sub_187951274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;

  v3 = MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutlineGenerator<A, B, C, D, E>, *(_QWORD *)(v2 + 536), v3);
  View.viewAlias<A, B>(_:_:)(*(_QWORD *)(v2 + 160), (uint64_t)partial apply for closure #3 in OutlinePrimitive<>.body.getter);
}

void sub_187951320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t IsLeafTrait;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 144) + 8))(v4, v3);
  v6 = *(_QWORD *)(v0 + 360);
  swift_getAtKeyPath();
  *(_QWORD *)(v0 + 792) = v1;
  *(_QWORD *)(v0 + 800) = &protocol witness table for StaticSourceWriter<A, B>;
  v7 = MEMORY[0x1E0CE2E70];
  v8 = *(_QWORD *)(v0 + 528);
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v0 + 792);
  v10 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 648);
  View.tag<A>(_:includeOptional:)(v6, 1, v11, v9, v2, v10);
  (*(void (**)(uint64_t, uint64_t))(v0 + 424))(v6, v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 128) + 8))(v5, v8);
  v12 = MEMORY[0x1E0CE52E0];
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], *(_QWORD *)(v0 + 552));
  *(_QWORD *)(v0 + 776) = v9;
  *(_QWORD *)(v0 + 784) = v13;
  v14 = MEMORY[0x18D75FFDC](v7, *(_QWORD *)(v0 + 520), v0 + 776);
  v15 = MEMORY[0x18D75FFDC](v12, *(_QWORD *)(v0 + 544));
  *(_QWORD *)(v0 + 760) = v14;
  *(_QWORD *)(v0 + 768) = v15;
  v16 = *(_QWORD *)(v0 + 496);
  v17 = MEMORY[0x18D75FFDC](v7, v16, v0 + 760);
  v18 = *(_QWORD *)(v0 + 168);
  static ViewBuilder.buildExpression<A>(_:)(v10, v16, v17);
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 152) + 8);
  v19(v10, v16);
  static ViewBuilder.buildBlock<A>(_:)(v18, v16, v10);
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], *(_QWORD *)(v0 + 576));
  *(_QWORD *)(v0 + 744) = *(_QWORD *)(v0 + 688);
  *(_QWORD *)(v0 + 752) = v20;
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, *(_QWORD *)(v0 + 568), v0 + 744);
  IsLeafTrait = lazy protocol witness table accessor for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>();
  *(_QWORD *)(v0 + 728) = v21;
  *(_QWORD *)(v0 + 736) = IsLeafTrait;
  *(_QWORD *)(v0 + 712) = MEMORY[0x18D75FFDC](v7, *(_QWORD *)(v0 + 456), v0 + 728);
  *(_QWORD *)(v0 + 720) = v13;
  *(_QWORD *)(v0 + 696) = MEMORY[0x18D75FFDC](v7, *(_QWORD *)(v0 + 560), v0 + 712);
  *(_QWORD *)(v0 + 704) = v15;
  MEMORY[0x18D75FFDC](v7, *(_QWORD *)(v0 + 656), v0 + 696);
  static ViewBuilder.buildEither<A, B>(first:)(v10, v16);
  v19(v10, v16);
  v19(v18, v16);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 480) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 680));
  JUMPOUT(0x187951554);
}

void closure #2 in OutlinePrimitive<>.body.getter()
{
  swift_bridgeObjectRetain();
  type metadata accessor for OutlinePrimitive();
}

uint64_t sub_187951D80()
{
  specialized OutlinePrimitive.expandedElements.setter();
  return swift_bridgeObjectRelease();
}

void closure #3 in OutlinePrimitive<>.body.getter()
{
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_187951E40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v9 - 144) = v6;
  *(_QWORD *)(v9 - 136) = v2;
  *(_QWORD *)(v9 - 128) = v3;
  *(_QWORD *)(v9 - 120) = v4;
  *(_QWORD *)(v9 - 112) = v5;
  *(_QWORD *)(v9 - 104) = v7;
  *(_QWORD *)(v9 - 96) = v8;
  type metadata accessor for OutlinePrimitive();
}

void sub_187951E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v12 - 216) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v12 - 272) = (char *)&a9 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v12 - 224) = (char *)&a9 - v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(*(_QWORD *)(v11 - 8) + 16))(v9, *(_QWORD *)(v12 - 280), v11, v17);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v12 - 280) = *(_QWORD *)(v10 + *(int *)(a1 + 92));
  swift_retain();
  swift_retain();
  *(_QWORD *)(v12 - 288) = OutlinePrimitive.$expandedElements.getter();
  *(_QWORD *)(v12 - 296) = v19;
  *(_QWORD *)(v12 - 304) = v20;
  *(_QWORD *)(v12 - 312) = *(_QWORD *)(v10 + *(int *)(a1 + 76));
  swift_retain();
  swift_retain();
  swift_retain();
  OutlinePrimitive.init(base:id:children:expandedElements:parentContent:leafContent:grouping:)();
}

uint64_t sub_187952018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  *(_OWORD *)(v2 - 168) = *(_OWORD *)(v2 - 208);
  *(_QWORD *)(v2 - 152) = *(_QWORD *)(v2 - 184);
  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlinePrimitive<A, B, C, D, E>, v1, v2 - 168);
  v4 = *(_QWORD *)(v2 - 224);
  v5 = v0;
  static ViewBuilder.buildExpression<A>(_:)(v0, v1, v3);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 216) + 8);
  v6(v5, v1);
  static ViewBuilder.buildBlock<A>(_:)(v4, v1, *(_QWORD *)(v2 - 176));
  return v6(v4, v1);
}

uint64_t closure #5 in OutlinePrimitive<>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v33 = a8;
  v34 = a2;
  v30 = a5;
  v31 = a7;
  v32 = a1;
  v35 = a9;
  v29 = a13;
  v16 = type metadata accessor for HStack();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v28 - v23;
  v36 = a3;
  v37 = a4;
  v38 = v30;
  v39 = a6;
  v40 = v31;
  v41 = v33;
  v42 = a10;
  v43 = a11;
  v44 = a12;
  v45 = v29;
  v46 = v32;
  v47 = v34;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v16);
  static ViewBuilder.buildExpression<A>(_:)(v20, v16, v25);
  v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  v26(v20, v16);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v24, v16, v35);
  return ((uint64_t (*)(char *, uint64_t))v26)(v24, v16);
}

void closure #4 in OutlinePrimitive<>.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for OutlinePrimitive();
}

uint64_t sub_1879522D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t))(v4 + *(int *)(a1 + 80)))(v7);
  static ViewBuilder.buildExpression<A>(_:)(v5, v1, v2);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v5, v1);
  static ViewBuilder.buildBlock<A>(_:)(v6, v1, v3);
  return v9(v6, v1);
}

void closure #6 in OutlinePrimitive<>.body.getter()
{
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_1879523E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v9 - 144) = v3;
  *(_QWORD *)(v9 - 136) = v6;
  *(_QWORD *)(v9 - 304) = v3;
  *(_QWORD *)(v9 - 128) = v4;
  *(_QWORD *)(v9 - 120) = v5;
  *(_QWORD *)(v9 - 112) = v8;
  *(_QWORD *)(v9 - 104) = v2;
  *(_QWORD *)(v9 - 296) = v2;
  *(_QWORD *)(v9 - 96) = v7;
  type metadata accessor for OutlinePrimitive();
}

void sub_187952438(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;

  *(_QWORD *)(v11 - 216) = *((_QWORD *)a1 - 1);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v11 - 280) = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  *(_QWORD *)(v11 - 240) = (char *)&a9 - v16;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v10, *(_QWORD *)(v11 - 288), AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v11 - 312) = *(_QWORD *)(v9 + a1[23]);
  v18 = a1[20];
  *(_QWORD *)(v11 - 288) = *(_QWORD *)(v9 + a1[19]);
  *(_QWORD *)(v11 - 320) = *(_QWORD *)(v9 + v18);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  OutlinePrimitive.init(base:id:children:expandedElements:parentContent:leafContent:grouping:)();
}

uint64_t sub_187952604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  *(_OWORD *)(v2 - 168) = *(_OWORD *)(v2 - 208);
  *(_QWORD *)(v2 - 152) = *(_QWORD *)(v2 - 192);
  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlinePrimitive<A, B, C, D, E>, v1, v2 - 168);
  v4 = *(_QWORD *)(v2 - 240);
  static ViewBuilder.buildExpression<A>(_:)(v0, v1, v3);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 216) + 8);
  v5(v0, v1);
  static ViewBuilder.buildBlock<A>(_:)(v4, v1, *(_QWORD *)(v2 - 184));
  return v5(v4, v1);
}

void protocol witness for View.body.getter in conformance <> OutlinePrimitive<A, B, C, D, E>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  OutlinePrimitive<>.body.getter(a1, *(_QWORD *)(a2 - 16), *(_QWORD *)(a2 - 24), a3);
}

void type metadata accessor for ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>>)
  {
    type metadata accessor for _TraitWritingModifier<IsLeafTraitKey>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>>);
  }
}

void type metadata accessor for _TraitWritingModifier<IsLeafTraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<IsLeafTraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<IsLeafTraitKey>);
  }
}

void partial apply for closure #1 in OutlinePrimitive<>.body.getter()
{
  type metadata accessor for OutlinePrimitive();
}

void sub_1879527B8()
{
  type metadata accessor for OutlinePrimitive();
}

uint64_t sub_1879527E8()
{
  uint64_t *v0;
  uint64_t result;

  result = OutlinePrimitive.expandedElements.getter();
  *v0 = result;
  return result;
}

void partial apply for closure #2 in OutlinePrimitive<>.body.getter()
{
  type metadata accessor for OutlinePrimitive();
}

void sub_187952870()
{
  closure #2 in OutlinePrimitive<>.body.getter();
}

void sub_1879528D4()
{
  type metadata accessor for OutlinePrimitive();
}

void sub_187952920()
{
  type metadata accessor for OutlinePrimitive.Base();
}

uint64_t sub_187952960()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;

  if (swift_getEnumCaseMultiPayload() != 1)
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v0, AssociatedTypeWitness);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #6 in OutlinePrimitive<>.body.getter()
{
  type metadata accessor for OutlinePrimitive();
}

void sub_187952AE4()
{
  closure #6 in OutlinePrimitive<>.body.getter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t IsLeafTrait;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>>();
    v2 = v1;
    IsLeafTrait = lazy protocol witness table accessor for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>();
    v4[0] = MEMORY[0x1E0CE7C28];
    v4[1] = IsLeafTrait;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<IsLeafTraitKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t partial apply for closure #5 in OutlinePrimitive<>.body.getter()
{
  return partial apply for closure #3 in OutlinePrimitive<>.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #5 in OutlinePrimitive<>.body.getter);
}

uint64_t partial apply for closure #3 in OutlinePrimitive<>.body.getter(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[12], v1[13], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11]);
}

uint64_t partial apply for closure #3 in OutlinePrimitive<>.body.getter()
{
  return partial apply for closure #3 in OutlinePrimitive<>.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #3 in OutlinePrimitive<>.body.getter);
}

void partial apply for closure #1 in OutlinePrimitive<>.expansion(for:)()
{
  type metadata accessor for OutlinePrimitive();
}

void sub_187952CCC()
{
  closure #1 in OutlinePrimitive<>.expansion(for:)();
}

void objectdestroy_8Tm_2()
{
  type metadata accessor for OutlinePrimitive();
}

void sub_187952D9C()
{
  swift_unknownObjectRelease();
  type metadata accessor for OutlinePrimitive.Base();
}

uint64_t sub_187952DF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload() != 1)
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(v7 + 8))(v0 + ((v6 + v5 + v4) & ~v4));
  return swift_deallocObject();
}

void partial apply for closure #2 in OutlinePrimitive<>.expansion(for:)()
{
  type metadata accessor for OutlinePrimitive();
}

#error "187952FD4: call analysis failed (funcsize=23)"

void partial apply for closure #4 in OutlinePrimitive<>.body.getter()
{
  uint64_t v0;

  closure #4 in OutlinePrimitive<>.body.getter(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
}

uint64_t specialized OutlinePrimitive.expandedElements.setter()
{
  type metadata accessor for Set();
  type metadata accessor for Binding();
  return specialized Binding.wrappedValue.setter();
}

void sub_18795309C()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for _OutlineGenerator_Configuration.Subtree();
}

void sub_187953124(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v8 = lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren();
  *(_QWORD *)(v6 - 160) = v1;
  *(_QWORD *)(v6 - 152) = v4;
  *(_QWORD *)(v6 - 144) = v5;
  *(_QWORD *)(v6 - 136) = &type metadata for OutlineSubgroupChildren;
  *(_QWORD *)(v6 - 128) = a1;
  *(_QWORD *)(v6 - 120) = v2;
  *(_QWORD *)(v6 - 112) = v3;
  *(_QWORD *)(v6 - 104) = v8;
  *(_QWORD *)(v6 - 96) = &protocol witness table for _OutlineGenerator_Configuration<A, B, C>.Subtree;
  type metadata accessor for OutlineGenerator();
}

void sub_18795315C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v25 - 160) = v21;
  *(_QWORD *)(v25 - 152) = a10;
  *(_QWORD *)(v25 - 144) = v23;
  *(_QWORD *)(v25 - 136) = a21;
  *(_QWORD *)(v25 - 128) = v24;
  *(_QWORD *)(v25 - 120) = v22;
  *(_QWORD *)(v25 - 112) = a11;
  type metadata accessor for OutlinePrimitive();
}

void sub_187953190(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _OutlineGenerator_Configuration<A, B, C>.Subtree, v1);
  *(_QWORD *)(v5 - 184) = v2;
  *(_QWORD *)(v5 - 176) = v4;
  *(_QWORD *)(v5 - 168) = v3;
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlinePrimitive<A, B, C, D, E>, a1, v5 - 184);
  *(_QWORD *)(v5 - 160) = v1;
  *(_QWORD *)(v5 - 152) = a1;
  *(_QWORD *)(v5 - 144) = v7;
  *(_QWORD *)(v5 - 136) = v8;
  type metadata accessor for StaticSourceWriter();
}

void sub_1879531E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  type metadata accessor for ModifiedContent();
  v23 = type metadata accessor for TagValueTraitKey();
  v24 = MEMORY[0x1E0CE3440];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3440], v23);
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  v25 = type metadata accessor for Optional();
  *(_QWORD *)(v22 - 192) = v21;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v25, v22 - 192);
  v26 = type metadata accessor for TagValueTraitKey();
  MEMORY[0x18D75FFDC](v24, v26);
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  v27 = type metadata accessor for HStack();
  *(_QWORD *)(v22 - 160) = MEMORY[0x1E0CE4C68];
  *(_QWORD *)(v22 - 152) = a21;
  v28 = MEMORY[0x1E0CE4C58];
  *(_QWORD *)(v22 - 144) = v27;
  *(_QWORD *)(v22 - 136) = v28;
  type metadata accessor for StaticIf();
}

uint64_t sub_1879532FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  _QWORD v35[2];
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[32];

  type metadata accessor for _TraitWritingModifier<IsLeafTraitKey>();
  v10 = type metadata accessor for ModifiedContent();
  v24 = type metadata accessor for ModifiedContent();
  v25 = type metadata accessor for ModifiedContent();
  v11 = type metadata accessor for _ConditionalContent();
  *(_QWORD *)(v8 - 160) = v30;
  *(_QWORD *)(v8 - 152) = v3;
  *(_QWORD *)(v8 - 144) = v6;
  *(_QWORD *)(v8 - 136) = v28;
  *(_QWORD *)(v8 - 128) = v4;
  v29 = type metadata accessor for ForEach();
  type metadata accessor for ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>>();
  v31 = type metadata accessor for _ConditionalContent();
  v12 = v11;
  v33 = type metadata accessor for _ConditionalContent();
  *(_QWORD *)(v8 - 208) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutlineGenerator<A, B, C, D, E>);
  *(_QWORD *)(v8 - 200) = &protocol witness table for StaticSourceWriter<A, B>;
  v13 = MEMORY[0x1E0CE2E70];
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v27, v8 - 208);
  v15 = MEMORY[0x1E0CE52E0];
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v2);
  *(_QWORD *)(v8 - 224) = v14;
  *(_QWORD *)(v8 - 216) = v16;
  v17 = MEMORY[0x18D75FFDC](v13, v23, v8 - 224);
  v18 = MEMORY[0x18D75FFDC](v15, v1);
  v42[0] = v17;
  v42[1] = v18;
  v19 = MEMORY[0x18D75FFDC](v13, v5, v42);
  v41[0] = v26;
  v41[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v7);
  v40[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v41);
  v40[1] = lazy protocol witness table accessor for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>();
  v39[0] = MEMORY[0x18D75FFDC](v13, v10, v40);
  v39[1] = v16;
  v38[0] = MEMORY[0x18D75FFDC](v13, v24, v39);
  v38[1] = v18;
  v37[0] = v19;
  v37[1] = MEMORY[0x18D75FFDC](v13, v25, v38);
  v20 = MEMORY[0x1E0CE4BD0];
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v12, v37);
  v36 = v32;
  v35[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v29, &v36);
  v35[1] = lazy protocol witness table accessor for type ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>> and conformance <> ModifiedContent<A, B>();
  v34[0] = v21;
  v34[1] = MEMORY[0x18D75FFDC](v20, v31, v35);
  return MEMORY[0x18D75FFDC](v20, v33, v34);
}

uint64_t TableRowList.visitRows<A>(applying:from:)()
{
  return static Update.ensure<A>(_:)();
}

uint64_t static TableRowBuilder.buildBlock<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t specialized static TableRowContent._makeRows(content:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  char v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  __int128 v18;
  char v19;
  int v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  static DynamicPropertyCache.fields(of:)();
  v5 = v33;
  v6 = v34;
  v7 = DWORD1(v34);
  v8 = *(_OWORD *)(a2 + 112);
  v29 = *(_OWORD *)(a2 + 96);
  v30 = v8;
  v31 = *(_OWORD *)(a2 + 128);
  v32 = *(_QWORD *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 48);
  v25 = *(_OWORD *)(a2 + 32);
  v26 = v9;
  v10 = *(_OWORD *)(a2 + 80);
  v27 = *(_OWORD *)(a2 + 64);
  v28 = v10;
  v11 = *(_OWORD *)(a2 + 16);
  v23 = *(_OWORD *)a2;
  v24 = v11;
  outlined retain of _TableRowInputs(a2);
  LOBYTE(v33) = v34;
  specialized static TableRowContent.makeContent(content:inputs:fields:)();
  v12 = v33;
  v13 = v34;
  v39 = v29;
  v40 = v30;
  v41 = v31;
  v42 = v32;
  v35 = v25;
  v36 = v26;
  v37 = v27;
  v38 = v28;
  v33 = v23;
  v34 = v24;
  outlined retain of _TableRowInputs((uint64_t)&v33);
  specialized static TableRowContent._makeRows(content:inputs:)(&v18, v18, &v33);
  outlined release of _TableRowInputs((uint64_t)&v33);
  v14 = v18;
  v15 = DWORD2(v18);
  if ((v13 & 1) == 0)
  {
    v22 = v12;
    v21 = a1;
    v18 = v5;
    v19 = v6;
    v20 = v7;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)&v33);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a3 = v14;
  *(_DWORD *)(a3 + 8) = v15;
  return result;
}

uint64_t static TableRowContent._makeRows(content:inputs:)@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v7 = *a1;
  v8 = a2[7];
  v54 = a2[6];
  v55 = v8;
  v56 = a2[8];
  v57 = *((_QWORD *)a2 + 18);
  v9 = a2[3];
  v50 = a2[2];
  v51 = v9;
  v10 = a2[5];
  v52 = a2[4];
  v53 = v10;
  v11 = a2[1];
  v48 = *a2;
  v49 = v11;
  static DynamicPropertyCache.fields(of:)();
  v12 = v58;
  v13 = v59;
  v14 = DWORD1(v59);
  v44 = v54;
  v45 = v55;
  v46 = v56;
  v47 = v57;
  v40 = v50;
  v41 = v51;
  v42 = v52;
  v43 = v53;
  v38 = v48;
  v39 = v49;
  v23 = v7;
  LODWORD(v25) = v7;
  outlined retain of _TableRowInputs((uint64_t)&v48);
  static TableRowContent.makeContent(content:inputs:fields:)((uint64_t)&v37, (uint64_t)&v27, (uint64_t)&v25, (uint64_t)&v38, (uint64_t)&v58, a3, a4);
  v15 = *((_QWORD *)&v27 + 1);
  v22 = v27;
  v16 = v28;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v64 = v44;
  v65 = v45;
  v66 = v46;
  v60 = v40;
  v61 = v41;
  v62 = v42;
  v63 = v43;
  v58 = v38;
  v59 = v39;
  v33 = v44;
  v34 = v45;
  v35 = v46;
  v29 = v40;
  v30 = v41;
  v31 = v42;
  v32 = v43;
  v67 = v47;
  v36 = v47;
  v27 = v38;
  v28 = v39;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, int *, __int128 *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(&v25, &v37, &v27, AssociatedTypeWitness, AssociatedConformanceWitness);
  v19 = v25;
  v20 = v26;
  if ((v16 & 1) == 0)
  {
    v25 = v22;
    v26 = v15;
    v37 = v23;
    v27 = v12;
    LOBYTE(v28) = v13;
    DWORD1(v28) = v14;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)&v58);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a5 = v19;
  *(_DWORD *)(a5 + 8) = v20;
  return result;
}

uint64_t static TableRowContent._tableRowCount(inputs:)(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _OWORD v8[9];
  uint64_t v9;

  v1 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v2 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v3;
  v4 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance TableOutlineGroupContent<A>(uint64_t a1)
{
  return static TableRowContent._containsOutlineSymbol(inputs:)(a1) & 1;
}

uint64_t static TableRowContent._containsOutlineSymbol(inputs:)(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _OWORD v8[9];
  uint64_t v9;

  v1 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v2 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v3;
  v4 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(v8, AssociatedTypeWitness, AssociatedConformanceWitness) & 1;
}

uint64_t WrappedTableRowIDs.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 128) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 144), a1);
  return v2;
}

BOOL TableRowGenerator.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))() == 0;
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance <> Section<A, B, C>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance OutlineGroup<A, B, C, D, E><>.OutlineGroupSubgroup(uint64_t a1)
{
  return static TableRowContent._tableRowCount(inputs:)(a1);
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance <> _ConditionalContent<A, B>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance <A> A?()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance TableRowList.Key(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for EmptyTableRowGenerator;
  *(_QWORD *)(a1 + 32) = &protocol witness table for EmptyTableRowGenerator;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance TableRowList.Key(__int128 *a1, uint64_t (*a2)(void))
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowList>, (uint64_t)&type metadata for TableRowList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  v5 = *a1;
  v6 = a1[1];
  *(_OWORD *)(v4 + 16) = xmmword_187BF9820;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = v6;
  *(_QWORD *)(v4 + 64) = *((_QWORD *)a1 + 4);
  result = a2();
  *((_QWORD *)a1 + 3) = &type metadata for MergedTableRowGenerator;
  *((_QWORD *)a1 + 4) = &protocol witness table for MergedTableRowGenerator;
  *(_QWORD *)a1 = v4;
  return result;
}

unint64_t TableRowID.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  unint64_t v2;
  Swift::String v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;
  char v9;

  outlined init with copy of TableRowID(v0, (uint64_t)v7);
  if ((v9 & 1) != 0)
  {
    v5[0] = v7[0];
    v5[1] = v7[1];
    v6 = v8;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = AnyHashable.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2 = 0xD000000000000014;
    outlined destroy of AnyHashable((uint64_t)v5);
  }
  else
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    *((_QWORD *)&v5[0] + 1) = 0x8000000187BEBF90;
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    return 0xD000000000000013;
  }
  return v2;
}

Swift::Int TableRowID.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  _OWORD v3[2];
  uint64_t v4;
  _OWORD v5[2];
  uint64_t v6;
  char v7;

  Hasher.init(_seed:)();
  outlined init with copy of TableRowID(v0, (uint64_t)v5);
  if ((v7 & 1) != 0)
  {
    v3[0] = v5[0];
    v3[1] = v5[1];
    v4 = v6;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v3);
  }
  else
  {
    v1 = *(_QWORD *)&v5[0];
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TableRowID()
{
  uint64_t v0;
  Swift::UInt v1;
  _OWORD v2[2];
  uint64_t v3;
  _OWORD v4[2];
  uint64_t v5;
  char v6;

  outlined init with copy of TableRowID(v0, (uint64_t)v4);
  if ((v6 & 1) != 0)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    v3 = v5;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v2);
  }
  else
  {
    v1 = *(_QWORD *)&v4[0];
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableRowID()
{
  uint64_t v0;
  Swift::UInt v1;
  _OWORD v3[2];
  uint64_t v4;
  _OWORD v5[2];
  uint64_t v6;
  char v7;

  Hasher.init(_seed:)();
  outlined init with copy of TableRowID(v0, (uint64_t)v5);
  if ((v7 & 1) != 0)
  {
    v3[0] = v5[0];
    v3[1] = v5[1];
    v4 = v6;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v3);
  }
  else
  {
    v1 = *(_QWORD *)&v5[0];
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void AnyTableRowIDs.startIndex.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTableRowIDs.endIndex.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTableRowIDs.subscript.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Int __swiftcall AnyTableRowIDs.index(before:)(Swift::Int before)
{
  Swift::Int result;

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int __swiftcall AnyTableRowIDs.index(after:)(Swift::Int after)
{
  Swift::Int result;

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AnyTableRowIDs(void **a1, _QWORD *a2))(uint64_t *a1)
{
  uint64_t v2;

  *a1 = malloc(0x29uLL);
  (*(void (**)(_QWORD))(**(_QWORD **)v2 + 104))(*a2);
  return protocol witness for Collection.subscript.read in conformance AnyTableRowIDs;
}

void protocol witness for Collection.subscript.read in conformance AnyTableRowIDs(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  outlined destroy of TableRowID(*a1);
  free(v1);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AnyTableRowIDs(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyTableRowIDs, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AnyTableRowIDs()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AnyTableRowIDs(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AnyTableRowIDs()
{
  type metadata accessor for AnyTableRowIDs();
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t WrappedTableRowIDs.startIndex.getter(uint64_t a1, uint64_t a2)
{
  return WrappedTableRowIDs.startIndex.getter((void (*)(uint64_t *__return_ptr, uint64_t, _QWORD))MEMORY[0x1E0DEB528], a2);
}

uint64_t WrappedTableRowIDs.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return WrappedTableRowIDs.startIndex.getter((void (*)(uint64_t *__return_ptr, uint64_t, _QWORD))MEMORY[0x1E0DEB5A8], a2);
}

uint64_t WrappedTableRowIDs.startIndex.getter(void (*a1)(uint64_t *__return_ptr, uint64_t, _QWORD), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 128);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t)v2 + *(_QWORD *)(v4 + 144);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  a1(&v11, v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 136) + 8) + 8));
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v11;
}

uint64_t WrappedTableRowIDs.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void (*v12)(_BYTE *, _QWORD);
  uint64_t v13;
  _BYTE v15[32];
  uint64_t v16;

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 128);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = (uint64_t)v3 + *(_QWORD *)(v6 + 144);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  v16 = a1;
  v12 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  outlined init with copy of TableRowID(v13, a3);
  v12(v15, 0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int __swiftcall WrappedTableRowIDs.index(before:)(Swift::Int before)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[6];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 128);
  v5 = *(_QWORD *)(v4 - 8);
  ((void (*)(Swift::Int))MEMORY[0x1E0C80A78])(before);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)v1 + *(_QWORD *)(v3 + 144);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v10[1] = before;
  dispatch thunk of BidirectionalCollection.index(before:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v10[5];
}

Swift::Int __swiftcall WrappedTableRowIDs.index(after:)(Swift::Int after)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[6];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 128);
  v5 = *(_QWORD *)(v4 - 8);
  ((void (*)(Swift::Int))MEMORY[0x1E0C80A78])(after);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)v1 + *(_QWORD *)(v3 + 144);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v10[1] = after;
  dispatch thunk of Collection.index(after:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v10[5];
}

uint64_t MergedTableRowGenerator.visitRows<A>(applying:from:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return 1;
  v9 = a3 + 32;
  swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    outlined init with copy of TableRowList(v9, (uint64_t)v22);
    v11 = v23;
    v12 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
    v14 = v10 + result;
    if (__OFADD__(v10, result))
      break;
    v15 = *a2;
    if (*a2 < v14)
    {
      v16 = __OFSUB__(v15, v10);
      v17 = v15 - v10;
      if (v16)
        goto LABEL_13;
      v21 = v17 & ~(v17 >> 63);
      v18 = v23;
      v19 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 8))(a1, &v21, a4, a5, v18, v19) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        outlined destroy of TableRowList((uint64_t)v22);
        return 0;
      }
    }
    outlined destroy of TableRowList((uint64_t)v22);
    v9 += 40;
    v10 = v14;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t MergedTableRowGenerator.count.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[40];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1 + 32;
    swift_bridgeObjectRetain();
    v3 = 0;
    while (1)
    {
      outlined init with copy of TableRowList(v2, (uint64_t)v11);
      outlined init with copy of TableColumnList((uint64_t)v11, (uint64_t)v8);
      outlined destroy of TableRowList((uint64_t)v11);
      v4 = v9;
      v5 = v10;
      __swift_project_boxed_opaque_existential_1(v8, v9);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
      v7 = __OFADD__(v3, result);
      v3 += result;
      if (v7)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      v2 += 40;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t MergedTableRowGenerator.rowIDs.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for WrappedTableRowIDs<[TableRowID]>(0);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of TableRowList(v4, (uint64_t)v9);
      v5 = v10;
      v6 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      if (!(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6))
        break;
      swift_beginAccess();
      v7 = swift_retain();
      specialized Array.append<A>(contentsOf:)(v7);
      swift_endAccess();
      swift_release();
      outlined destroy of TableRowList((uint64_t)v9);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return v2;
      }
    }
    swift_release();
    outlined destroy of TableRowList((uint64_t)v9);
    swift_bridgeObjectRelease();
    return 0;
  }
  return v2;
}

uint64_t protocol witness for TableRowGenerator.visitRows<A>(applying:from:) in conformance MergedTableRowGenerator(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return MergedTableRowGenerator.visitRows<A>(applying:from:)(a1, a2, *v4, a3, a4);
}

uint64_t protocol witness for TableRowGenerator.count.getter in conformance MergedTableRowGenerator()
{
  uint64_t *v0;

  return MergedTableRowGenerator.count.getter(*v0);
}

uint64_t protocol witness for TableRowGenerator.rowIDs.getter in conformance MergedTableRowGenerator()
{
  uint64_t *v0;

  return MergedTableRowGenerator.rowIDs.getter(*v0);
}

uint64_t specialized static TableRowContent.makeContent(content:inputs:fields:)()
{
  uint64_t result;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for TableRowContentBodyAccessor<Never>, MEMORY[0x1E0DEDCE8], (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TableRowContentBodyAccessor);
    lazy protocol witness table accessor for type TableRowContentBodyAccessor<Never> and conformance TableRowContentBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(75);
    v1._object = (void *)0x8000000187BEBFB0;
    v1._countAndFlagsBits = 0xD00000000000003DLL;
    String.append(_:)(v1);
    v2._countAndFlagsBits = 0x726576654ELL;
    v2._object = (void *)0xE500000000000000;
    String.append(_:)(v2);
    v3._countAndFlagsBits = 0x6C63206120736920;
    v3._object = (void *)0xEC0000002E737361;
    String.append(_:)(v3);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static TableRowContent.makeContent(content:inputs:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    v10 = type metadata accessor for TableRowContentBodyAccessor(0, a6, a7, v9);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowContentBodyAccessor<A>, v10);
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(75);
    v12._object = (void *)0x8000000187BEBFB0;
    v12._countAndFlagsBits = 0xD00000000000003DLL;
    String.append(_:)(v12);
    v13._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0x6C63206120736920;
    v14._object = (void *)0xEC0000002E737361;
    String.append(_:)(v14);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t TableRowContentBodyAccessor.updateBody(of:changed:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, a2);
    v4 = type metadata accessor for TableRowContentBodyAccessor(0, v2, v3, v3);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowContentBodyAccessor<A>, v4);
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance TableRowContentBodyAccessor<A>(uint64_t result, uint64_t a2)
{
  return TableRowContentBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t static Never._tableRowCount(inputs:)()
{
  return 0;
}

void static Never._containsOutlineSymbol(inputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance Never@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[9];
  uint64_t v10;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 112);
  v9[6] = *(_OWORD *)(a2 + 96);
  v9[7] = v4;
  v9[8] = *(_OWORD *)(a2 + 128);
  v10 = *(_QWORD *)(a2 + 144);
  v5 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v5;
  v6 = *(_OWORD *)(a2 + 80);
  v9[4] = *(_OWORD *)(a2 + 64);
  v9[5] = v6;
  v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  return specialized static TableRowContent._makeRows(content:inputs:)(v3, (uint64_t)v9, a3);
}

void protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance Never()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance TableRowDescriptor()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance TableRowDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  static TableRowDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance TableRowDescriptor())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance TupleTableRowContent<A, B>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance <A> Group<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_UNKNOWN **associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in Never()
{
  return &protocol witness table for Never;
}

uint64_t default associated conformance accessor for TableRowContent.TableRowContent.TableRowValue: Identifiable()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t dispatch thunk of TableRowContent.tableRowBody.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static TableRowContent._makeRows(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of static TableRowContent._tableRowCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of static TableRowContent._containsOutlineSymbol(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t destroy for _TableRowInputs()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _TableRowInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _TableRowInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  return a1;
}

uint64_t assignWithTake for _TableRowInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TableRowInputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _TableRowInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _TableRowInputs()
{
  return &type metadata for _TableRowInputs;
}

ValueMetadata *type metadata accessor for _TableRowOutputs()
{
  return &type metadata for _TableRowOutputs;
}

uint64_t type metadata accessor for AnyTableRowIDs()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for WrappedTableRowIDs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WrappedTableRowIDs);
}

uint64_t type metadata accessor for TableRowBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableRowBuilder);
}

uint64_t initializeWithCopy for TableRowID(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  char v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_QWORD *)a1 = *(_QWORD *)a2;
  }
  *(_BYTE *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithCopy for TableRowID(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  char v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t assignWithTake for TableRowID(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

ValueMetadata *type metadata accessor for TableRowID()
{
  return &type metadata for TableRowID;
}

ValueMetadata *type metadata accessor for TableRowDescriptor()
{
  return &type metadata for TableRowDescriptor;
}

ValueMetadata *type metadata accessor for TableRowList()
{
  return &type metadata for TableRowList;
}

ValueMetadata *type metadata accessor for TableRowList.Key()
{
  return &type metadata for TableRowList.Key;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AnyTableRowIDs()
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type IndexingIterator<AnyTableRowIDs> and conformance IndexingIterator<A>, 255, (uint64_t (*)(uint64_t))type metadata accessor for IndexingIterator<AnyTableRowIDs>, MEMORY[0x1E0DEC908]);
}

void type metadata accessor for IndexingIterator<AnyTableRowIDs>(uint64_t a1)
{
  type metadata accessor for IndexingIterator<AnyTableRowIDs>(a1, &lazy cache variable for type metadata for IndexingIterator<AnyTableRowIDs>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8]);
}

uint64_t base witness table accessor for Sequence in AnyTableRowIDs(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type AnyTableRowIDs and conformance AnyTableRowIDs, a2, (uint64_t (*)(uint64_t))type metadata accessor for AnyTableRowIDs, (uint64_t)&protocol conformance descriptor for AnyTableRowIDs);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AnyTableRowIDs()
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type Slice<AnyTableRowIDs> and conformance Slice<A>, 255, (uint64_t (*)(uint64_t))type metadata accessor for Slice<AnyTableRowIDs>, MEMORY[0x1E0DEDE48]);
}

void type metadata accessor for Slice<AnyTableRowIDs>(uint64_t a1)
{
  type metadata accessor for IndexingIterator<AnyTableRowIDs>(a1, &lazy cache variable for type metadata for Slice<AnyTableRowIDs>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
}

void type metadata accessor for IndexingIterator<AnyTableRowIDs>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v6 = type metadata accessor for AnyTableRowIDs();
    v8 = lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type AnyTableRowIDs and conformance AnyTableRowIDs, v7, (uint64_t (*)(uint64_t))type metadata accessor for AnyTableRowIDs, (uint64_t)&protocol conformance descriptor for AnyTableRowIDs);
    v9 = a3(a1, v6, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t base witness table accessor for Collection in AnyTableRowIDs(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type AnyTableRowIDs and conformance AnyTableRowIDs, a2, (uint64_t (*)(uint64_t))type metadata accessor for AnyTableRowIDs, (uint64_t)&protocol conformance descriptor for AnyTableRowIDs);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AnyTableRowIDs()
{
  return lazy protocol witness table accessor for type Slice<AnyTableRowIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<AnyTableRowIDs> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyTableRowIDs and conformance AnyTableRowIDs, MEMORY[0x1E0DEDE28]);
}

uint64_t lazy protocol witness table accessor for type AnyTableRowIDs and conformance AnyTableRowIDs(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type AnyTableRowIDs and conformance AnyTableRowIDs, a2, (uint64_t (*)(uint64_t))type metadata accessor for AnyTableRowIDs, (uint64_t)&protocol conformance descriptor for AnyTableRowIDs);
}

{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type AnyTableRowIDs and conformance AnyTableRowIDs, a2, (uint64_t (*)(uint64_t))type metadata accessor for AnyTableRowIDs, (uint64_t)&protocol conformance descriptor for AnyTableRowIDs);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in AnyTableRowIDs()
{
  return lazy protocol witness table accessor for type Slice<AnyTableRowIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<AnyTableRowIDs> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyTableRowIDs and conformance AnyTableRowIDs, MEMORY[0x1E0DEDE40]);
}

uint64_t lazy protocol witness table accessor for type Slice<AnyTableRowIDs> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<AnyTableRowIDs>(255);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x18D75FFDC](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableRowDescriptor and conformance TableRowDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableRowDescriptor and conformance TableRowDescriptor;
  if (!lazy protocol witness table cache variable for type TableRowDescriptor and conformance TableRowDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowDescriptor, &type metadata for TableRowDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowDescriptor and conformance TableRowDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableRowDescriptor and conformance TableRowDescriptor;
  if (!lazy protocol witness table cache variable for type TableRowDescriptor and conformance TableRowDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowDescriptor, &type metadata for TableRowDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowDescriptor and conformance TableRowDescriptor);
  }
  return result;
}

uint64_t partial apply for closure #1 in TableRowList.visitRows<A>(applying:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v3 = (_QWORD *)v0[5];
  v5 = v0[6];
  v9 = v4;
  v6 = v3[3];
  v7 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8))(v5, &v9, v1, v2, v6, v7);
}

uint64_t specialized static TableRowID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v3;
  _OWORD v5[2];
  uint64_t v6;
  _QWORD v7[6];
  _BYTE v8[48];
  _OWORD v9[2];
  uint64_t v10;
  char v11;

  outlined init with copy of TableRowID(a1, (uint64_t)v8);
  outlined init with copy of TableRowID(a2, (uint64_t)v9);
  if ((v8[40] & 1) == 0)
  {
    outlined init with copy of TableRowID((uint64_t)v8, (uint64_t)v7);
    if ((v11 & 1) == 0)
    {
      v3 = v7[0] == *(_QWORD *)&v9[0];
      goto LABEL_6;
    }
LABEL_8:
    outlined destroy of (TableRowID, TableRowID)((uint64_t)v8);
    v3 = 0;
    return v3 & 1;
  }
  outlined init with copy of TableRowID((uint64_t)v8, (uint64_t)v7);
  if (v11 != 1)
  {
    outlined destroy of AnyHashable((uint64_t)v7);
    goto LABEL_8;
  }
  v5[0] = v9[0];
  v5[1] = v9[1];
  v6 = v10;
  v3 = MEMORY[0x18D75E284](v7, v5);
  outlined destroy of AnyHashable((uint64_t)v5);
  outlined destroy of AnyHashable((uint64_t)v7);
LABEL_6:
  outlined destroy of TableRowID((uint64_t)v8);
  return v3 & 1;
}

uint64_t outlined destroy of (TableRowID, TableRowID)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (TableRowID, TableRowID)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for TableRowContentBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableRowContentBodyAccessor);
}

unint64_t lazy protocol witness table accessor for type TableRowContentBodyAccessor<Never> and conformance TableRowContentBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TableRowContentBodyAccessor<Never> and conformance TableRowContentBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type TableRowContentBodyAccessor<Never> and conformance TableRowContentBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TableRowContentBodyAccessor<Never>, MEMORY[0x1E0DEDCE8], (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TableRowContentBodyAccessor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowContentBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowContentBodyAccessor<Never> and conformance TableRowContentBodyAccessor<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for MergedTableRowGenerator()
{
  return &type metadata for MergedTableRowGenerator;
}

uint64_t partial apply for closure #1 in TableRowContentBodyAccessor.updateBody(of:changed:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 24) + 40))(*(_QWORD *)(v0 + 16));
}

uint64_t _IdentifiedViewTree.forEach(_:)(void (*a1)(_OWORD *), uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[10];
  _OWORD v9[10];
  char v10;

  result = outlined init with copy of _IdentifiedViewTree(v2, (uint64_t)v9);
  if (v10)
  {
    if (v10 == 1)
    {
      v6 = *(_QWORD *)(*(_QWORD *)&v9[0] + 16);
      if (v6)
      {
        v7 = *(_QWORD *)&v9[0] + 32;
        do
        {
          outlined init with copy of _IdentifiedViewTree(v7, (uint64_t)v8);
          _IdentifiedViewTree.forEach(_:)(a1, a2);
          outlined destroy of _IdentifiedViewTree((uint64_t)v8);
          v7 += 168;
          --v6;
        }
        while (v6);
      }
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v8[6] = v9[6];
    v8[7] = v9[7];
    v8[8] = v9[8];
    v8[9] = v9[9];
    v8[2] = v9[2];
    v8[3] = v9[3];
    v8[4] = v9[4];
    v8[5] = v9[5];
    v8[0] = v9[0];
    v8[1] = v9[1];
    a1(v8);
    return outlined destroy of _IdentifiedViewProxy((uint64_t)v8);
  }
  return result;
}

uint64_t outlined destroy of _IdentifiedViewProxy(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE4F10] - 8) + 8))();
  return a1;
}

uint64_t View._identified<A>(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _IdentifiedModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for _IdentifiedModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _IdentifiedModifier);
}

uint64_t _IdentifiedViewProxy.accessibilityNode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;
  _OWORD v5[11];
  __int128 v6;
  uint64_t v7;

  outlined init with copy of Any?(v1 + 128, (uint64_t)&v6);
  if (v7)
  {
    outlined init with take of Any(&v6, v5);
    outlined init with copy of Any((uint64_t)v5, (uint64_t)&v4);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1);
  }
  else
  {
    _s7SwiftUI22AccessibilityNodeProxyVSgWOi0_((uint64_t)v5);
    return outlined init with take of AccessibilityNodeProxy?((uint64_t)v5, a1);
  }
}

uint64_t static _IdentifiedViewsKey.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of _IdentifiedViewTree((uint64_t)&static _IdentifiedViewsKey.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance _IdentifiedViewsKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of _IdentifiedViewTree((uint64_t)&static _IdentifiedViewsKey.defaultValue, a1);
}

uint64_t _IdentifiedModifier.identifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _IdentifiedModifier.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_IdentifiedModifier.identifier.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _IdentifiedModifier.init(identifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

double _s7SwiftUI22AccessibilityNodeProxyVSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 176) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t outlined init with take of AccessibilityNodeProxy?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityNodeProxy?, (uint64_t)&type metadata for AccessibilityNodeProxy, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double static _IdentifiedModifier._makeView(modifier:inputs:body:)@<D0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X4>, uint64_t a3@<X5>, double *a4@<X8>)
{
  uint64_t v4;
  double result;
  uint64_t v9;
  double v10;

  a1(&v9);
  type metadata accessor for _IdentifiedModifier(255, a2, a3, v4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  _ViewInputs.animatedSize()();
  _ViewInputs.animatedPosition()();
  _ViewInputs.transform.getter();
  _ViewInputs.environment.getter();
  _ViewOutputs.subscript.getter();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v9;
  result = v10;
  a4[1] = v10;
  return result;
}

uint64_t implicit closure #1 in static _IdentifiedModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  _QWORD v9[3];
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9[0] = a1;
  v9[1] = a2;
  v9[2] = a3;
  v11 = type metadata accessor for IdentifiedViewTransform(0, a4, a5, a4);
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedViewTransform<A>, v11);
  type metadata accessor for Attribute<(_:)>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_29, (uint64_t)v10, v11, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8;
}

uint64_t static _IdentifiedModifier.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t IdentifiedViewTransform.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for _IdentifiedModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

uint64_t IdentifiedViewTransform.nodeList.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *Value;
  uint64_t v5;

  result = *(unsigned int *)(v1 + 20);
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    Value = (_QWORD *)AGGraphGetValue();
    v5 = Value[1];
    *a1 = *Value;
    a1[1] = v5;
    return swift_bridgeObjectRetain();
  }
  return result;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _IdentifiedModifier<A>@<D0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X4>, double *a3@<X8>)
{
  return static _IdentifiedModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _IdentifiedModifier<A>()
{
  return static _IdentifiedModifier.== infix(_:_:)();
}

uint64_t (*IdentifiedViewTransform.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(__int128 *a1)
{
  unsigned int *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  __int128 *Value;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t (*result)(__int128 *);
  __int128 v36;
  unsigned int v37;
  unsigned int v38;
  __int128 v39;
  _OWORD v40[11];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[12];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for _IdentifiedModifier(0, v6, *(_QWORD *)(a1 + 24), a4);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v36 - v9;
  v12 = *v4;
  v11 = v4[1];
  v13 = v4[2];
  v14 = v4[3];
  LODWORD(v9) = v4[4];
  v37 = v4[5];
  v38 = v9;
  *(_QWORD *)&v48 = __PAIR64__(v11, v12);
  *((_QWORD *)&v48 + 1) = __PAIR64__(v14, v13);
  *(_QWORD *)&v49 = __PAIR64__(v37, v9);
  IdentifiedViewTransform.modifier.getter(a1, v15, (uint64_t)v10);
  _convertToAnyHashable<A>(_:)();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v10, v6);
  Value = (__int128 *)AGGraphGetValue();
  v17 = Value[1];
  v48 = *Value;
  v49 = v17;
  MEMORY[0x18D75BE3C]();
  v48 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v18 = AGGraphGetValue();
  v19 = *(_QWORD *)v18;
  v36 = *(_OWORD *)(v18 + 8);
  v20 = *(_QWORD *)(v18 + 24);
  v21 = *(_QWORD *)(v18 + 32);
  swift_retain();
  v43 = v19;
  v44 = v36;
  v45 = v20;
  v46 = v21;
  *(_QWORD *)&v48 = __PAIR64__(v11, v12);
  *((_QWORD *)&v48 + 1) = __PAIR64__(v14, v13);
  LODWORD(v10) = v37;
  v22 = v38;
  *(_QWORD *)&v49 = __PAIR64__(v37, v38);
  IdentifiedViewTransform.nodeList.getter(v47);
  v36 = v47[0];
  v41 = v47[0];
  *(_QWORD *)&v48 = __PAIR64__(v11, v12);
  *((_QWORD *)&v48 + 1) = __PAIR64__(v14, v13);
  *(_QWORD *)&v49 = __PAIR64__(v10, v22);
  PropertiesTransform.environment.getter(&v39);
  v48 = v39;
  static AccessibilityNodeProxy.makeProxyForIdentifiedView(with:environment:)((unint64_t *)&v41, (uint64_t *)&v48, (uint64_t)v40);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined init with take of AccessibilityNodeProxy?((uint64_t)v40, (uint64_t)v47);
  outlined init with take of AccessibilityNodeProxy?((uint64_t)v47, (uint64_t)&v48);
  if (_s7SwiftUI22AccessibilityNodeProxyVSgWOg((uint64_t)&v48) == 1)
  {
    v41 = 0u;
    v42 = 0u;
  }
  else
  {
    *((_QWORD *)&v42 + 1) = &type metadata for AccessibilityNodeProxy;
    v23 = swift_allocObject();
    *(_QWORD *)&v41 = v23;
    v24 = v57;
    *(_OWORD *)(v23 + 144) = v56;
    *(_OWORD *)(v23 + 160) = v24;
    *(_OWORD *)(v23 + 176) = v58;
    *(_QWORD *)(v23 + 192) = v59;
    v25 = v53;
    *(_OWORD *)(v23 + 80) = v52;
    *(_OWORD *)(v23 + 96) = v25;
    v26 = v55;
    *(_OWORD *)(v23 + 112) = v54;
    *(_OWORD *)(v23 + 128) = v26;
    v27 = v49;
    *(_OWORD *)(v23 + 16) = v48;
    *(_OWORD *)(v23 + 32) = v27;
    v28 = v51;
    *(_OWORD *)(v23 + 48) = v50;
    *(_OWORD *)(v23 + 64) = v28;
  }
  _IdentifiedViewProxy.init(identifier:size:position:transform:accessibilityNode:platform:)();
  v29 = (_OWORD *)swift_allocObject();
  v30 = v40[7];
  v29[7] = v40[6];
  v29[8] = v30;
  v31 = v40[9];
  v29[9] = v40[8];
  v29[10] = v31;
  v32 = v40[3];
  v29[3] = v40[2];
  v29[4] = v32;
  v33 = v40[5];
  v29[5] = v40[4];
  v29[6] = v33;
  v34 = v40[1];
  result = partial apply for closure #1 in IdentifiedViewTransform.value.getter;
  v29[1] = v40[0];
  v29[2] = v34;
  return result;
}

uint64_t closure #1 in IdentifiedViewTransform.value.getter(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6[10];
  char v7;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_IdentifiedViewTree>, (uint64_t)&type metadata for _IdentifiedViewTree, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_187BF9820;
  outlined init with copy of _IdentifiedViewProxy(a2, v4 + 32);
  *(_BYTE *)(v4 + 192) = 0;
  outlined init with take of _IdentifiedViewTree(a1, v4 + 200);
  *(_QWORD *)&v6[0] = v4;
  v7 = 1;
  return outlined init with take of _IdentifiedViewTree(v6, (uint64_t)a1);
}

uint64_t protocol witness for Rule.value.getter in conformance IdentifiedViewTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)()@<X8>)
{
  uint64_t (*v6)(__int128 *);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = IdentifiedViewTransform.value.getter(a1, a2, a3, a4);
  v8 = v7;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = v8;
  *a5 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  a5[1] = (uint64_t (*)())result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IdentifiedViewTransform<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedViewTransform<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t specialized static _IdentifiedViewsKey.reduce(value:nextValue:)(uint64_t a1, void (*a2)(__int128 *__return_ptr))
{
  int8x16_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12[10];
  char v13;
  _QWORD v14[21];
  __int128 v15[10];
  char v16;
  int8x16_t v17[10];
  char v18;
  __int128 v19[10];

  a2(v19);
  outlined init with copy of _IdentifiedViewTree(a1, (uint64_t)v15);
  outlined init with take of _IdentifiedViewTree(v19, (uint64_t)v17);
  if (v18 == 2)
  {
    v3 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v17[2], v17[6]), vorrq_s8(v17[4], v17[8])), vorrq_s8(vorrq_s8(v17[3], v17[7]), vorrq_s8(v17[5], v17[9]))), vorrq_s8(v17[0], v17[1]));
    if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)))
      return outlined destroy of _IdentifiedViewTree((uint64_t)v15);
  }
  outlined destroy of _IdentifiedViewTree(a1);
  if (!v16)
  {
    if (v18 != 1)
    {
      outlined init with take of _IdentifiedViewTree(v15, (uint64_t)v14);
      outlined init with take of _IdentifiedViewTree((__int128 *)v17[0].i8, (uint64_t)v12);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_IdentifiedViewTree>, (uint64_t)&type metadata for _IdentifiedViewTree, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_187BF9820;
      outlined init with copy of _IdentifiedViewTree((uint64_t)v14, v9 + 32);
      outlined init with take of _IdentifiedViewTree(v12, v9 + 200);
      outlined destroy of _IdentifiedViewTree((uint64_t)v14);
      v10 = v9;
      v11 = 1;
      v8 = (__int128 *)&v10;
      return outlined init with take of _IdentifiedViewTree(v8, a1);
    }
    v6 = v17[0].i64[0];
    outlined init with take of _IdentifiedViewTree(v15, (uint64_t)v14);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_IdentifiedViewTree>, (uint64_t)&type metadata for _IdentifiedViewTree, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_187BF9830;
    outlined init with copy of _IdentifiedViewTree((uint64_t)v14, v7 + 32);
    *(_QWORD *)&v12[0] = v7;
    goto LABEL_12;
  }
  if (v16 == 1)
  {
    v4 = *(_QWORD *)&v15[0];
    if (v18 == 1)
    {
      v14[0] = *(_QWORD *)&v15[0];
      result = specialized Array.append<A>(contentsOf:)(v17[0].i64[0]);
      *(_QWORD *)a1 = v14[0];
      *(_BYTE *)(a1 + 160) = 1;
      return result;
    }
    outlined init with take of _IdentifiedViewTree((__int128 *)v17[0].i8, (uint64_t)v14);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_IdentifiedViewTree>, (uint64_t)&type metadata for _IdentifiedViewTree, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_187BF9830;
    outlined init with copy of _IdentifiedViewTree((uint64_t)v14, v6 + 32);
    *(_QWORD *)&v12[0] = v4;
LABEL_12:
    specialized Array.append<A>(contentsOf:)(v6);
    outlined destroy of _IdentifiedViewTree((uint64_t)v14);
    v13 = 1;
    v8 = v12;
    return outlined init with take of _IdentifiedViewTree(v8, a1);
  }
  v8 = (__int128 *)v17;
  return outlined init with take of _IdentifiedViewTree(v8, a1);
}

uint64_t partial apply for implicit closure #1 in static _IdentifiedModifier._makeView(modifier:inputs:body:)()
{
  uint64_t *v0;

  return implicit closure #1 in static _IdentifiedModifier._makeView(modifier:inputs:body:)(v0[4], v0[5], v0[6], v0[2], v0[3]);
}

_UNKNOWN **base witness table accessor for ViewModifier in _IdentifiedModifier<A>()
{
  return &protocol witness table for _IdentifiedModifier<A>;
}

uint64_t destroy for _IdentifiedViewTree(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 160);
  if (v2 >= 2)
    v2 = *(_DWORD *)result + 2;
  if (v2 == 1)
    return swift_bridgeObjectRelease();
  if (!v2)
  {
    __swift_destroy_boxed_opaque_existential_1(result);
    result = swift_release();
    if (*(_QWORD *)(v1 + 112))
      result = swift_release();
    if (*(_QWORD *)(v1 + 152))
      return __swift_destroy_boxed_opaque_existential_1(v1 + 128);
  }
  return result;
}

uint64_t initializeWithCopy for _IdentifiedViewTree(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;

  v4 = *(unsigned __int8 *)(a2 + 160);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 160) = 1;
    swift_bridgeObjectRetain();
  }
  else if (v4)
  {
    v9 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v9;
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    v6 = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    v7 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v7;
    swift_retain();
    if (v6)
    {
      v8 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v6;
      *(_QWORD *)(a1 + 120) = v8;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    }
    v14 = (_OWORD *)(a1 + 128);
    v15 = (_OWORD *)(a2 + 128);
    v16 = *(_QWORD *)(a2 + 152);
    if (v16)
    {
      *(_QWORD *)(a1 + 152) = v16;
      (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v14, v15);
    }
    else
    {
      v17 = *(_OWORD *)(a2 + 144);
      *v14 = *v15;
      *(_OWORD *)(a1 + 144) = v17;
    }
    *(_BYTE *)(a1 + 160) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for _IdentifiedViewTree(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 160);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      swift_release();
      if (*(_QWORD *)(a1 + 112))
        swift_release();
      if (*(_QWORD *)(a1 + 152))
        __swift_destroy_boxed_opaque_existential_1(a1 + 128);
    }
    v5 = *((unsigned __int8 *)a2 + 160);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 160) = 1;
      swift_bridgeObjectRetain();
    }
    else if (v5)
    {
      v9 = *a2;
      v10 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)a1 = v9;
      v11 = a2[3];
      v12 = a2[4];
      v13 = a2[6];
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = v13;
      *(_OWORD *)(a1 + 48) = v11;
      *(_OWORD *)(a1 + 64) = v12;
      v14 = a2[7];
      v15 = a2[8];
      v16 = a2[9];
      *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
      *(_OWORD *)(a1 + 128) = v15;
      *(_OWORD *)(a1 + 144) = v16;
      *(_OWORD *)(a1 + 112) = v14;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
      *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = a2[6];
      v7 = *((_QWORD *)a2 + 14);
      swift_retain();
      if (v7)
      {
        v8 = *((_QWORD *)a2 + 15);
        *(_QWORD *)(a1 + 112) = v7;
        *(_QWORD *)(a1 + 120) = v8;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 112) = a2[7];
      }
      v17 = (_OWORD *)(a1 + 128);
      v18 = a2 + 8;
      v19 = *((_QWORD *)a2 + 19);
      if (v19)
      {
        *(_QWORD *)(a1 + 152) = v19;
        (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v17, v18);
      }
      else
      {
        v20 = a2[9];
        *v17 = *v18;
        *(_OWORD *)(a1 + 144) = v20;
      }
      *(_BYTE *)(a1 + 160) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for _IdentifiedViewTree(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 160);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      swift_release();
      if (*(_QWORD *)(a1 + 112))
        swift_release();
      if (*(_QWORD *)(a1 + 152))
        __swift_destroy_boxed_opaque_existential_1(a1 + 128);
    }
    v5 = *(unsigned __int8 *)(a2 + 160);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 160) = 1;
    }
    else if (v5)
    {
      v11 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v11;
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      v12 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v12;
      v13 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v13;
      v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
      v15 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v15;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v6;
      v7 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v7;
      v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v8;
      v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      v10 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      *(_BYTE *)(a1 + 160) = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for _IdentifiedViewTree(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 161))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 160);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _IdentifiedViewTree(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 160) = 0;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 161) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 161) = 0;
    if (a2)
      *(_BYTE *)(result + 160) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for _IdentifiedViewTree(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 160);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for _IdentifiedViewTree(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 > 1)
  {
    v2 = a2 - 2;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    LOBYTE(a2) = 2;
    *(_DWORD *)result = v2;
  }
  *(_BYTE *)(result + 160) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _IdentifiedViewsKey()
{
  return &type metadata for _IdentifiedViewsKey;
}

uint64_t getEnumTagSinglePayload for _IdentifiedModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187957374 + 4 * byte_187C71330[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _IdentifiedModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_187957574(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for _IdentifiedModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for _IdentifiedModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t specialized _IdentifiedViewTree.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *), uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[160];
  _OWORD v13[10];
  _OWORD v14[10];
  char v15;

  result = outlined init with copy of _IdentifiedViewTree(a1, (uint64_t)v14);
  if (v15)
  {
    if (v15 == 1)
    {
      v10 = *(_QWORD *)(*(_QWORD *)&v14[0] + 16);
      if (v10)
      {
        v11 = *(_QWORD *)&v14[0] + 32;
        swift_retain();
        do
        {
          outlined init with copy of _IdentifiedViewTree(v11, (uint64_t)v13);
          swift_retain();
          specialized _IdentifiedViewTree.forEach(_:)(v13, a2, a3, a4, a5);
          swift_release();
          outlined destroy of _IdentifiedViewTree((uint64_t)v13);
          v11 += 168;
          --v10;
        }
        while (v10);
        swift_release();
      }
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v13[6] = v14[6];
    v13[7] = v14[7];
    v13[8] = v14[8];
    v13[9] = v14[9];
    v13[2] = v14[2];
    v13[3] = v14[3];
    v13[4] = v14[4];
    v13[5] = v14[5];
    v13[0] = v14[0];
    v13[1] = v14[1];
    outlined init with copy of _IdentifiedViewProxy((uint64_t)v13, (uint64_t)v12);
    swift_retain();
    _IdentifiedViewProxy.adjustment.setter();
    a4(v12);
    outlined destroy of _IdentifiedViewProxy((uint64_t)v12);
    return outlined destroy of _IdentifiedViewProxy((uint64_t)v13);
  }
  return result;
}

uint64_t outlined init with copy of _IdentifiedViewProxy(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE4F10] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for IdentifiedViewTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IdentifiedViewTransform);
}

void base witness table accessor for _AttributeBody in IdentifiedViewTransform<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187957824()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s7SwiftUI22AccessibilityNodeProxyVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 144);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_187957860()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  if (*(_QWORD *)(v0 + 128))
    swift_release();
  if (*(_QWORD *)(v0 + 168))
    __swift_destroy_boxed_opaque_existential_1(v0 + 144);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IdentifiedViewTransform.value.getter(__int128 *a1)
{
  uint64_t v1;

  return closure #1 in IdentifiedViewTransform.value.getter(a1, v1 + 16);
}

uint64_t sub_1879578B4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for MultiEventListener(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18795796C + 4 * byte_187C71555[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1879579A0 + 4 * byte_187C71550[v4]))();
}

uint64_t sub_1879579A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879579A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1879579B0);
  return result;
}

uint64_t sub_1879579BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1879579C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1879579C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879579D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for MultiEventListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MultiEventListener);
}

void base witness table accessor for Gesture in MultiEventListener<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t static MultiEventListener._makeGesture(gesture:inputs:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  uint64_t v51;

  v6 = a2;
  v51 = *MEMORY[0x1E0C80C00];
  v7 = a2[3];
  v37 = a2[4];
  v8 = a2[4];
  v9 = a2[6];
  v38 = a2[5];
  v39 = v9;
  v10 = a2[1];
  v33 = *a2;
  v34 = v10;
  v11 = a2[3];
  v13 = *a2;
  v12 = a2[1];
  v35 = a2[2];
  v36 = v11;
  v46 = v8;
  v47 = v38;
  v48 = a2[6];
  v42 = v13;
  v43 = v12;
  v40 = *((_QWORD *)a2 + 14);
  v14 = *((_DWORD *)a2 + 30);
  v49 = *((_QWORD *)a2 + 14);
  v44 = v35;
  v45 = v7;
  v50 = v14;
  v15 = _GestureInputs.events.getter();
  v16 = v6[5];
  v46 = v6[4];
  v47 = v16;
  v48 = v6[6];
  v49 = *((_QWORD *)v6 + 14);
  v17 = v6[1];
  v42 = *v6;
  v43 = v17;
  v18 = v6[3];
  v44 = v6[2];
  v45 = v18;
  v50 = v14;
  v19 = _GestureInputs.animatedPosition()();
  v20 = v6[5];
  v46 = v6[4];
  v47 = v20;
  v48 = v6[6];
  v49 = *((_QWORD *)v6 + 14);
  v21 = v6[1];
  v42 = *v6;
  v43 = v21;
  v22 = v6[3];
  v44 = v6[2];
  v45 = v22;
  v50 = v14;
  LODWORD(v6) = _GestureInputs.transform.getter();
  v41 = v14;
  v23 = _GestureInputs.resetSeed.getter();
  type metadata accessor for MultiEventListener(255, a3, a4, v24);
  type metadata accessor for _GraphValue();
  *(_QWORD *)&v42 = __PAIR64__(v19, v15);
  *((_QWORD *)&v42 + 1) = __PAIR64__(v23, v6);
  LODWORD(v43) = _GraphValue.value.getter();
  BYTE4(v43) = v14 & 1;
  BYTE5(v43) = (v14 & 2) != 0;
  *((_QWORD *)&v43 + 1) = default argument 7 of MultiEventListenerPhase.init(events:position:transform:resetSeed:listener:preconvertedEventLocations:allowsIncompleteEventSequences:latestEvents:endedEventIDs:lastResetSeed:)();
  *(_QWORD *)&v44 = MEMORY[0x1E0DEE9E8];
  DWORD2(v44) = 0;
  lazy protocol witness table accessor for type EventID and conformance EventID();
  type metadata accessor for Dictionary();
  v30 = type metadata accessor for GesturePhase();
  v31 = type metadata accessor for MultiEventListenerPhase(0, a3, a4, v25);
  v32 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultiEventListenerPhase<A>, v31);
  v26 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v42, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v29, v31, MEMORY[0x1E0DEDCE8], v26, MEMORY[0x1E0DEDD18], v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _GestureOutputs.init(phase:)();
}

uint64_t default argument 7 of MultiEventListenerPhase.init(events:position:transform:resetSeed:listener:preconvertedEventLocations:allowsIncompleteEventSequences:latestEvents:endedEventIDs:lastResetSeed:)()
{
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  lazy protocol witness table accessor for type EventID and conformance EventID();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t MultiEventListenerPhase.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;

  Value = AGGraphGetValue();
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
  return swift_retain();
}

uint64_t MultiEventListenerPhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance MultiEventListener<A>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  return static MultiEventListener._makeGesture(gesture:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void protocol witness for Gesture.body.getter in conformance MultiEventListener<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultiEventListener<A>, a1);
  specialized PrimitiveGesture.body.getter();
}

uint64_t MultiEventListenerPhase.resetPhase()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  lazy protocol witness table accessor for type EventID and conformance EventID();
  type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(0);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = MEMORY[0x1E0DEE9E8];
  v9 = 0;
  v10 = 0;
  v7 = a1;
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultiEventListenerPhase<A>, a1);
  v3 = type metadata accessor for GesturePhase();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v9, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)v6, v3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v4);
  return outlined consume of GesturePhase<[EventID : PanEvent]>(v9, v10);
}

uint64_t MultiEventListenerPhase.updateValue()(int64_t a1)
{
  int64_t v1;
  int64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  char *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  uint64_t v55;
  uint64_t v56;
  Swift::UInt v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(Swift::UInt *__return_ptr, uint64_t, uint64_t);
  uint64_t v67;
  void (**v68)(_QWORD *__return_ptr, uint64_t, _QWORD);
  char *v69;
  char *v70;
  Swift::UInt v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)();
  uint64_t v83;
  uint64_t v84;
  int64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int64_t v95;
  int64_t v96;
  uint64_t i;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  int64_t v107;
  unint64_t v108;
  uint64_t v109;
  Swift::UInt *v110;
  unsigned int (*v111)(Swift::UInt *, uint64_t, uint64_t);
  uint64_t v112;
  Swift::UInt v113;
  Swift::UInt v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  int64_t v122;
  char *v123;
  char *v124;
  char *v125;
  int v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  int64_t v130;
  uint64_t v131;
  int64_t v132;
  int64_t v133;
  Swift::UInt *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  __int128 *v138;
  uint64_t v139;
  int64_t v140;
  __int128 *v141;
  uint64_t *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t TupleTypeMetadata2;
  char v147;
  Swift::UInt v149;
  Swift::UInt v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;

  v2 = v1;
  v158 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v137 = type metadata accessor for Optional();
  v136 = *(_QWORD *)(v137 - 8);
  MEMORY[0x1E0C80A78](v137, v5);
  v7 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (Swift::UInt *)((char *)&v122 - v10);
  v145 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v143 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v122 - v17;
  v19 = v4;
  v128 = type metadata accessor for Optional();
  v129 = *(_QWORD *)(v128 - 8);
  MEMORY[0x1E0C80A78](v128, v20);
  v22 = (char *)&v122 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v122 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v127 = (char *)&v122 - v29;
  v32 = MEMORY[0x1E0C80A78](v30, v31);
  v34 = (char *)&v122 - v33;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultiEventListenerPhase<A>, a1, v32);
  v130 = a1;
  result = ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) == 0)
    return result;
  v123 = v22;
  v125 = v26;
  v124 = v18;
  v134 = v11;
  v135 = v7;
  v132 = v2 + 32;
  type metadata accessor for [EventID : EventType]();
  v36 = *(_QWORD *)AGGraphGetValue();
  v37 = *(_QWORD *)(v36 + 64);
  v131 = v36 + 64;
  v38 = 1 << *(_BYTE *)(v36 + 32);
  v39 = -1;
  if (v38 < 64)
    v39 = ~(-1 << v38);
  v40 = v39 & v37;
  v138 = &v152;
  v141 = &v156;
  v142 = (uint64_t *)(v2 + 24);
  v133 = (unint64_t)(v38 + 63) >> 6;
  v122 = v133 - 1;
  v139 = v36;
  swift_bridgeObjectRetain();
  v126 = 0;
  v144 = 0;
  v140 = v2;
  v41 = v128;
  v42 = v129;
  v43 = v19;
  while (1)
  {
    if (v40)
    {
      v44 = __clz(__rbit64(v40));
      v40 &= v40 - 1;
      v45 = v44 | (v144 << 6);
LABEL_7:
      v46 = *(_QWORD *)(v139 + 56);
      v47 = (uint64_t *)(*(_QWORD *)(v139 + 48) + 16 * v45);
      v49 = *v47;
      v48 = v47[1];
      *(_QWORD *)&v151 = v49;
      *((_QWORD *)&v151 + 1) = v48;
      outlined init with copy of TableColumnList(v46 + 40 * v45, (uint64_t)v138);
      goto LABEL_26;
    }
    v50 = v144 + 1;
    if (__OFADD__(v144, 1))
    {
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
    }
    if (v50 < v133)
    {
      v51 = *(_QWORD *)(v131 + 8 * v50);
      if (v51)
        goto LABEL_11;
      v52 = v144 + 2;
      ++v144;
      if (v50 + 1 < v133)
      {
        v51 = *(_QWORD *)(v131 + 8 * v52);
        if (v51)
          goto LABEL_14;
        v144 = v50 + 1;
        if (v50 + 2 < v133)
        {
          v51 = *(_QWORD *)(v131 + 8 * (v50 + 2));
          if (v51)
          {
            v50 += 2;
            goto LABEL_11;
          }
          v52 = v50 + 3;
          v144 = v50 + 2;
          if (v50 + 3 < v133)
          {
            v51 = *(_QWORD *)(v131 + 8 * v52);
            if (v51)
            {
LABEL_14:
              v50 = v52;
LABEL_11:
              v40 = (v51 - 1) & v51;
              v45 = __clz(__rbit64(v51)) + (v50 << 6);
              v144 = v50;
              goto LABEL_7;
            }
            while (1)
            {
              v50 = v52 + 1;
              if (__OFADD__(v52, 1))
                goto LABEL_83;
              if (v50 >= v133)
                break;
              v51 = *(_QWORD *)(v131 + 8 * v50);
              ++v52;
              if (v51)
                goto LABEL_11;
            }
            v144 = v122;
          }
        }
      }
    }
    v40 = 0;
    v154 = 0;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
LABEL_26:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v151, (uint64_t)&v155);
    v53 = v155;
    if (!(_QWORD)v155)
      break;
    v54 = *((_QWORD *)&v155 + 1);
    outlined init with take of OptionalBinaryInteger(v141, (uint64_t)&v151);
    if ((*(_BYTE *)(v2 + 21) & 1) != 0)
      goto LABEL_33;
    v55 = *((_QWORD *)&v152 + 1);
    v56 = v153;
    __swift_project_boxed_opaque_existential_1(&v151, *((uint64_t *)&v152 + 1));
    (*(void (**)(Swift::UInt *__return_ptr, uint64_t, uint64_t))(v56 + 24))(&v149, v55, v56);
    v57 = v149;
    swift_release();
    v58 = *v142;
    if (v57)
    {
      v149 = v53;
      v150 = v54;
      v61 = lazy protocol witness table accessor for type EventID and conformance EventID();
      v62 = v127;
      MEMORY[0x18D75CA24](&v149, v58, MEMORY[0x1E0CE7610], v43, v61);
      v63 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v145 + 48))(v62, 1, v43);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v62, v41);
      v2 = v140;
      if (v63 == 1)
      {
        v64 = *((_QWORD *)&v152 + 1);
        v65 = v153;
        __swift_project_boxed_opaque_existential_1(&v151, *((uint64_t *)&v152 + 1));
        v66 = *(void (**)(Swift::UInt *__return_ptr, uint64_t, uint64_t))(v65 + 8);
        v67 = v65;
        v2 = v140;
        v66(&v149, v64, v67);
        if ((_BYTE)v149)
          goto LABEL_77;
      }
LABEL_33:
      outlined init with copy of TableColumnList((uint64_t)&v151, (uint64_t)&v149);
      v68 = *(void (***)(_QWORD *__return_ptr, uint64_t, _QWORD))(v130 + 24);
      v69 = v125;
      v68[6](&v149, v43, v68);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v69, 1, v43) == 1)
      {
        swift_release();
        (*(void (**)(char *, uint64_t))(v129 + 8))(v69, v41);
        goto LABEL_78;
      }
      v70 = v124;
      (*(void (**)(char *, char *, uint64_t))(v145 + 32))(v124, v69, v43);
      v68[3](&v149, v43, v68);
      v71 = v149;
      swift_release();
      if (!v71)
      {
        (*(void (**)(char *, uint64_t))(v145 + 8))(v70, v43);
LABEL_77:
        swift_release();
LABEL_78:
        v119 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
        *(_QWORD *)&v155 = 0;
        BYTE8(v155) = 3;
        v121 = MEMORY[0x1E0C80A78](v119, v120);
        *(&v122 - 2) = v130;
        *(&v122 - 1) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultiEventListenerPhase<A>, v121);
        lazy protocol witness table accessor for type EventID and conformance EventID();
        type metadata accessor for Dictionary();
        v86 = type metadata accessor for GesturePhase();
        v81 = MEMORY[0x1E0DEE9C0] + 8;
        v82 = closure #1 in StatefulRule.value.setterpartial apply;
        v83 = MEMORY[0x1E0DEDCE8];
        v84 = MEMORY[0x1E0DEDD18];
        v85 = &v122 - 4;
LABEL_79:
        _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v155, (uint64_t)v82, (uint64_t)v85, v86, v83, v81, v84, v80);
        return outlined consume of GesturePhase<[EventID : PanEvent]>(v155, BYTE8(v155));
      }
      v72 = v145;
      v73 = v123;
      (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v123, v70, v43);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v73, 0, 1, v43);
      v149 = v53;
      v150 = v54;
      lazy protocol witness table accessor for type EventID and conformance EventID();
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      v68[1](&v149, v43, v68);
      if (!(_BYTE)v149)
        specialized Set._Variant.remove(_:)(v53, v54, &v149);
      (*(void (**)(char *, uint64_t))(v145 + 8))(v70, v43);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
      v126 = 1;
      v41 = v128;
      v42 = v129;
    }
    else
    {
      v149 = v53;
      v150 = v54;
      v59 = lazy protocol witness table accessor for type EventID and conformance EventID();
      MEMORY[0x18D75CA24](&v149, v58, MEMORY[0x1E0CE7610], v43, v59);
      v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v145 + 48))(v34, 1, v43);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v41);
      if (v60 != 1)
        goto LABEL_77;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
      v2 = v140;
    }
  }
  swift_release();
  if ((v126 & 1) != 0)
  {
    v149 = *(_QWORD *)(v2 + 24);
    if ((*(_BYTE *)(v2 + 20) & 1) != 0)
    {
      v74 = swift_bridgeObjectRetain();
      v76 = *(_QWORD *)(v130 + 24);
    }
    else
    {
      swift_bridgeObjectRetain();
      AGGraphClearUpdate();
      v76 = *(_QWORD *)(v130 + 24);
      closure #1 in MultiEventListenerPhase.updateValue()(v43, v76, v87, (uint64_t)&v151);
      v88 = AGGraphSetUpdate();
      v155 = v151;
      v156 = v152;
      v157 = v153;
      MEMORY[0x1E0C80A78](v88, v89);
      *(&v122 - 2) = (int64_t)&v155;
      defaultConvertEventLocations<A>(_:converter:)();
      v74 = outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v155);
    }
    MEMORY[0x1E0C80A78](v74, v75);
    *(&v122 - 4) = v43;
    *(&v122 - 3) = v76;
    *(&v122 - 2) = v2;
    v142 = (uint64_t *)lazy protocol witness table accessor for type EventID and conformance EventID();
    v90 = Dictionary.optimisticFilter(_:)();
    swift_bridgeObjectRelease();
    v91 = *(_QWORD *)(v90 + 64);
    v144 = v90 + 64;
    v149 = v90;
    v92 = 1 << *(_BYTE *)(v90 + 32);
    v93 = -1;
    if (v92 < 64)
      v93 = ~(-1 << v92);
    v94 = v93 & v91;
    v95 = (unint64_t)(v92 + 63) >> 6;
    v138 = (__int128 *)(v95 - 1);
    swift_bridgeObjectRetain_n();
    v96 = 0;
    v141 = (__int128 *)(v95 - 4);
    v139 = v90 + 96;
    for (i = v145; ; (*(void (**)(char *, uint64_t))(i + 8))(v143, v43))
    {
      v98 = TupleTypeMetadata2;
      if (v94)
      {
        v99 = __clz(__rbit64(v94));
        v94 &= v94 - 1;
        v100 = v99 | (v96 << 6);
        goto LABEL_51;
      }
      v107 = v96 + 1;
      if (__OFADD__(v96, 1))
        goto LABEL_82;
      if (v107 >= v95)
        break;
      v108 = *(_QWORD *)(v144 + 8 * v107);
      if (v108)
        goto LABEL_55;
      if (v96 + 2 >= v95)
      {
        v94 = 0;
        v106 = 1;
        ++v96;
        goto LABEL_57;
      }
      v108 = *(_QWORD *)(v144 + 8 * (v96 + 2));
      if (v108)
      {
        v107 = v96 + 2;
        goto LABEL_65;
      }
      v107 = v96 + 3;
      if (v96 + 3 >= v95)
      {
        v94 = 0;
        v106 = 1;
        v96 += 2;
        goto LABEL_57;
      }
      v108 = *(_QWORD *)(v144 + 8 * v107);
      i = v145;
      if (v108)
        goto LABEL_55;
      do
      {
        if (v141 == (__int128 *)v96)
        {
          v94 = 0;
          v106 = 1;
          v96 = (int64_t)v138;
          goto LABEL_57;
        }
        v108 = *(_QWORD *)(v139 + 8 * v96++);
      }
      while (!v108);
      v107 = v96 + 3;
LABEL_65:
      i = v145;
LABEL_55:
      v94 = (v108 - 1) & v108;
      v100 = __clz(__rbit64(v108)) + (v107 << 6);
      v96 = v107;
LABEL_51:
      v101 = *(_QWORD *)(v90 + 56);
      v102 = (uint64_t *)(*(_QWORD *)(v90 + 48) + 16 * v100);
      v104 = *v102;
      v103 = v102[1];
      v105 = v135;
      *(_QWORD *)v135 = v104;
      *((_QWORD *)v105 + 1) = v103;
      (*(void (**)(char *, unint64_t, uint64_t))(i + 16))(&v105[*(int *)(v98 + 48)], v101 + *(_QWORD *)(i + 72) * v100, v43);
      v106 = 0;
LABEL_58:
      v109 = *(_QWORD *)(TupleTypeMetadata2 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v109 + 56))(v105, v106, 1, TupleTypeMetadata2);
      v110 = v134;
      (*(void (**)(Swift::UInt *, char *, uint64_t))(v136 + 32))(v134, v105, v137);
      v111 = *(unsigned int (**)(Swift::UInt *, uint64_t, uint64_t))(v109 + 48);
      v112 = TupleTypeMetadata2;
      if (v111(v110, 1, TupleTypeMetadata2) == 1)
      {
        v116 = swift_release();
        *(_QWORD *)&v151 = v90;
        v147 = 3;
        MEMORY[0x1E0C80A78](v116, v117);
        *(&v122 - 2) = v43;
        *(&v122 - 1) = v76;
        v118 = type metadata accessor for Dictionary.Values();
        swift_bridgeObjectRetain();
        MEMORY[0x18D75FFDC](MEMORY[0x1E0DE9F98], v118);
        Sequence.reduce<A>(_:_:)();
        swift_bridgeObjectRelease();
        __asm { BR              X10 }
      }
      v113 = *v110;
      v114 = v110[1];
      v115 = (char *)v110 + *(int *)(v112 + 48);
      i = v145;
      (*(void (**)(char *, char *, uint64_t))(v145 + 32))(v143, v115, v43);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v76 + 8))(&v151, v43, v76);
      if (v151 == 2 || v151 == 3)
        specialized Set._Variant.insert(_:)((Swift::UInt *)&v151, v113, v114);
    }
    v94 = 0;
    v106 = 1;
LABEL_57:
    v105 = v135;
    goto LABEL_58;
  }
  lazy protocol witness table accessor for type EventID and conformance EventID();
  type metadata accessor for Dictionary();
  v77 = type metadata accessor for GesturePhase();
  result = AGGraphGetOutputValue();
  if (!result)
  {
    *(_QWORD *)&v155 = 0;
    BYTE8(v155) = 0;
    v79 = MEMORY[0x1E0C80A78](0, v78);
    *(&v122 - 2) = v130;
    *(&v122 - 1) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultiEventListenerPhase<A>, v79);
    v81 = MEMORY[0x1E0DEE9C0] + 8;
    v82 = partial apply for closure #1 in StatefulRule.value.setter;
    v83 = MEMORY[0x1E0DEDCE8];
    v84 = MEMORY[0x1E0DEDD18];
    v85 = &v122 - 4;
    v86 = v77;
    goto LABEL_79;
  }
  return result;
}

void sub_187958F90()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x187958FD4);
}

void closure #1 in MultiEventListenerPhase.updateValue()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  type metadata accessor for MultiEventListenerPhase(0, a1, a2, a3);
  MultiEventListenerPhase.transform.getter(a4);
  Value = AGGraphGetValue();
  *(double *)&v13 = MEMORY[0x18D755E9C](Value, v6, v7, v8, v9, v10, v11, v12);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v14, v13));
}

uint64_t closure #2 in MultiEventListenerPhase.updateValue()(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  char v7;
  _OWORD v8[2];
  uint64_t v9;
  char v10;
  _BYTE v11[48];
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v2 = a2[1];
  v12 = *a2;
  v13 = v2;
  v14 = *((_QWORD *)a2 + 4);
  v4 = 1;
  v5 = 0u;
  v6 = 0u;
  v7 = 2;
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  v10 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)&v4, (uint64_t)v11);
  v11[41] = 4;
  outlined destroy of CoordinateSpace((uint64_t)&v4);
  ViewTransform.convert(_:points:)();
  return outlined destroy of ViewTransform.Conversion((uint64_t)v8);
}

uint64_t closure #4 in MultiEventListenerPhase.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  int v20;
  void (*v21)(char *);
  void (*v22)(char *, uint64_t);
  void (*v23)(uint64_t *__return_ptr, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t result;
  char v27;
  char *v28;
  char v29;
  int v30;
  _QWORD v31[2];
  char *v32;
  char *v33;
  int v34;
  uint64_t v35;

  v33 = a5;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v32 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)v31 - v14;
  v17 = (unsigned __int8 *)MEMORY[0x1E0C80A78](v13, v16);
  v19 = (char *)v31 - v18;
  v20 = *v17;
  v21 = *(void (**)(char *))(v9 + 16);
  v21((char *)v31 - v18);
  if (v20 == 1)
  {
    v22 = *(void (**)(char *, uint64_t))(v9 + 8);
    v22(v19, a3);
    ((void (*)(char *, uint64_t, uint64_t))v21)(v15, a2, a3);
LABEL_6:
    result = ((uint64_t (*)(char *, uint64_t))v22)(v15, a3);
    v27 = 1;
    goto LABEL_7;
  }
  v34 = v20;
  v31[1] = v5;
  v23 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 8);
  v23((uint64_t *)((char *)&v35 + 2), a3, a4);
  v24 = BYTE2(v35);
  v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v19, a3);
  ((void (*)(char *, uint64_t, uint64_t))v21)(v15, a2, a3);
  if (!v24)
    goto LABEL_6;
  v23((uint64_t *)((char *)&v35 + 1), a3, a4);
  v25 = BYTE1(v35);
  result = ((uint64_t (*)(char *, uint64_t))v22)(v15, a3);
  if (v25 == 1)
  {
    v27 = 1;
  }
  else
  {
    v28 = v32;
    ((void (*)(char *, uint64_t, uint64_t))v21)(v32, a2, a3);
    v29 = v34;
    if (v34 == 2)
    {
      result = ((uint64_t (*)(char *, uint64_t))v22)(v28, a3);
      v27 = 2;
    }
    else
    {
      v23(&v35, a3, a4);
      v30 = v35;
      result = ((uint64_t (*)(char *, uint64_t))v22)(v28, a3);
      if (v30 == 2)
        v27 = 2;
      else
        v27 = v29;
    }
  }
LABEL_7:
  *v33 = v27;
  return result;
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance MultiEventListenerPhase<A>()
{
  return MultiEventListenerPhase.resetSeed.getter();
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance MultiEventListenerPhase<A>()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40);
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance MultiEventListenerPhase<A>(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 40) = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MultiEventListenerPhase<A>()
{
  return specialized MultiEventListenerPhase.description.getter();
}

uint64_t specialized MultiEventListenerPhase.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  _QWORD v3[2];

  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v3, "MultiListener[");
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return v3[0];
}

uint64_t type metadata accessor for MultiEventListenerPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MultiEventListenerPhase);
}

uint64_t destroy for MultiEventListenerPhase()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MultiEventListenerPhase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MultiEventListenerPhase(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for MultiEventListenerPhase(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiEventListenerPhase(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 44))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MultiEventListenerPhase(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 44) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for StatefulRule in MultiEventListenerPhase<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in MultiEventListenerPhase<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #2 in MultiEventListenerPhase.updateValue()(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in MultiEventListenerPhase.updateValue()(a1, *(__int128 **)(v1 + 16));
}

BOOL partial apply for closure #3 in MultiEventListenerPhase.updateValue()(Swift::UInt *a1)
{
  uint64_t v1;

  return (specialized Set.contains(_:)(*a1, a1[1], *(_QWORD *)(*(_QWORD *)(v1 + 32) + 32)) & 1) == 0;
}

uint64_t partial apply for closure #4 in MultiEventListenerPhase.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;

  return closure #4 in MultiEventListenerPhase.updateValue()(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t NavigationLinkSelectionIdentifier.matches(_:)(_QWORD *a1)
{
  _QWORD *v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  _QWORD v14[2];

  if (*v1)
    v2 = *a1 == 0;
  else
    v2 = 1;
  if (v2)
  {
    v3 = a1[2];
    v4 = v1[2];
    if (v4 == 1 || v3 == 1)
    {
      v12 = v1[3] == a1[3];
    }
    else
    {
      v10 = a1[1];
      v11 = v1[1];
      v14[0] = v11;
      v14[1] = v4;
      v13[0] = v10;
      v13[1] = v3;
      v12 = MEMORY[0x18D756E68](v14, v13);
    }
    return v12 & 1;
  }
  else
  {
    v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*v1 + 176);
    swift_retain();
    v7 = swift_retain();
    v8 = v6(v7);
    swift_release();
    swift_release();
    return v8 & 1;
  }
}

void NavigationLinkSelectionIdentifier.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  uint64_t v4;
  void (*v5)(_QWORD *__return_ptr, uint64_t);
  uint64_t v6;
  _QWORD v7[5];

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  if (!*v0)
  {
    Hasher._combine(_:)(0);
    if (v4 == 1)
      goto LABEL_3;
LABEL_5:
    v7[0] = v2;
    v7[1] = v4;
    Hasher._combine(_:)(1u);
    _ViewList_ID.Canonical.hash(into:)();
    goto LABEL_6;
  }
  Hasher._combine(_:)(1u);
  v5 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v1 + 96);
  v6 = swift_retain();
  v5(v7, v6);
  AnyHashable.hash(into:)();
  outlined destroy of AnyHashable((uint64_t)v7);
  swift_release();
  if (v4 != 1)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(0);
LABEL_6:
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NavigationLinkSelectionIdentifier()
{
  Hasher.init(_seed:)();
  NavigationLinkSelectionIdentifier.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NavigationLinkSelectionIdentifier()
{
  Hasher.init(_seed:)();
  NavigationLinkSelectionIdentifier.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance NavigationLinkTraitValueModifier@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *(_QWORD *)a1 = *v1;
  *(_OWORD *)(a1 + 8) = xmmword_187BF9840;
  *(_QWORD *)(a1 + 24) = v2;
  return swift_retain();
}

void protocol witness for static _ViewTraitKey.defaultValue.getter in conformance LinkValueTraitKey(_QWORD *a1@<X8>)
{
  *a1 = 1;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

BOOL specialized static NavigationLinkSelectionIdentifier.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  char v11;
  _QWORD v12[2];
  _QWORD v13[2];

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v6 = *a2;
  v5 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  if (*a1)
  {
    if (!v6)
      return 0;
    v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 176);
    swift_retain();
    swift_retain();
    LOBYTE(v9) = v9(v6);
    swift_release();
    swift_release();
    if ((v9 & 1) == 0)
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  if (v3 == 1)
  {
    if (v7 == 1)
      return v4 == v8;
    goto LABEL_11;
  }
  v13[0] = v2;
  v13[1] = v3;
  if (v7 == 1)
  {
    swift_retain();
LABEL_11:
    outlined copy of _ViewList_ID.Canonical?(v5, v7);
    outlined consume of Text.LineStyle?(v2, v3);
    outlined consume of Text.LineStyle?(v5, v7);
    return 0;
  }
  v12[0] = v5;
  v12[1] = v7;
  swift_retain_n();
  v11 = MEMORY[0x18D756E68](v13, v12);
  swift_release();
  outlined consume of Text.LineStyle?(v2, v3);
  if ((v11 & 1) == 0)
    return 0;
  return v4 == v8;
}

ValueMetadata *type metadata accessor for LinkValueTraitKey()
{
  return &type metadata for LinkValueTraitKey;
}

uint64_t destroy for NavigationLinkSelectionIdentifier(uint64_t a1)
{
  uint64_t result;

  swift_release();
  result = *(_QWORD *)(a1 + 16);
  if (result != 1)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for NavigationLinkSelectionIdentifier(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  uint64_t v5;

  *(_QWORD *)a1 = *a2;
  v4 = a2 + 1;
  v5 = a2[2];
  swift_retain();
  if (v5 == 1)
  {
    *(_OWORD *)(a1 + 8) = *v4;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)v4;
    *(_QWORD *)(a1 + 16) = v5;
    swift_retain();
  }
  *(_QWORD *)(a1 + 24) = a2[3];
  return a1;
}

uint64_t assignWithCopy for NavigationLinkSelectionIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) != 1)
  {
    if (v4 != 1)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of _ViewList_ID.Canonical(a1 + 8);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    goto LABEL_8;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
LABEL_8:
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

_QWORD *assignWithTake for NavigationLinkSelectionIdentifier(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;

  *a1 = *a2;
  swift_release();
  v4 = a2 + 1;
  if (a1[2] != 1)
  {
    v5 = a2[2];
    if (v5 != 1)
    {
      a1[1] = *v4;
      a1[2] = v5;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of _ViewList_ID.Canonical((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)v4;
LABEL_6:
  a1[3] = a2[3];
  return a1;
}

ValueMetadata *type metadata accessor for NavigationLinkSelectionIdentifier()
{
  return &type metadata for NavigationLinkSelectionIdentifier;
}

_QWORD *assignWithCopy for NavigationLinkTraitValueModifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for NavigationLinkTraitValueModifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for NavigationLinkTraitValueModifier()
{
  return &type metadata for NavigationLinkTraitValueModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in NavigationLinkTraitValueModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationLinkTraitValueModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<NavigationLinkTraitValueModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _TraitWritingModifier<LinkValueTraitKey> and conformance _TraitWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _TraitWritingModifier<LinkValueTraitKey>, MEMORY[0x1E0CE52E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>>)
  {
    type metadata accessor for _ViewModifier_Content<NavigationLinkTraitValueModifier>();
    type metadata accessor for _TraitWritingModifier<LinkValueTraitKey>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>>);
  }
}

void type metadata accessor for _ViewModifier_Content<NavigationLinkTraitValueModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<NavigationLinkTraitValueModifier>)
  {
    lazy protocol witness table accessor for type NavigationLinkTraitValueModifier and conformance NavigationLinkTraitValueModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<NavigationLinkTraitValueModifier>);
  }
}

void type metadata accessor for _TraitWritingModifier<LinkValueTraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<LinkValueTraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<LinkValueTraitKey>);
  }
}

uint64_t type metadata accessor for IdentifiedPreferenceTransformModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IdentifiedPreferenceTransformModifier);
}

_UNKNOWN **base witness table accessor for ViewModifier in IdentifiedPreferenceTransformModifier<A>()
{
  return &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
}

uint64_t View.transformIdentifiedPreference<A>(_:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  v9 = type metadata accessor for IdentifiedPreferenceTransformModifier(0, a5, a7, a4);
  swift_retain();
  MEMORY[0x18D75B4AC](v11, a4, v9, a6);
  return swift_release();
}

double static IdentifiedPreferenceTransformModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  double result;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v26;
  double v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;

  v14 = *a1;
  v6 = a1[2];
  v12 = *((_DWORD *)a1 + 6);
  v13 = *((_DWORD *)a1 + 2);
  v15 = *((_DWORD *)a1 + 7);
  v16 = *((_DWORD *)a1 + 8);
  v23 = a1[5];
  v17 = a1[6];
  v7 = *((_DWORD *)a1 + 15);
  v10 = *((_DWORD *)a1 + 14);
  v11 = *((_DWORD *)a1 + 9);
  v21 = *((_DWORD *)a1 + 17);
  v22 = *((_DWORD *)a1 + 16);
  v19 = *((_DWORD *)a1 + 19);
  v20 = *((_DWORD *)a1 + 18);
  v18 = *((_DWORD *)a1 + 20);
  type metadata accessor for IdentifiedPreferenceTransformModifier(255, a4, a5, a3);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v8 = _ViewInputs.viewPhase.getter();
  v28 = v14;
  v29 = v13;
  v30 = v6;
  v31 = v12;
  v32 = v15;
  v33 = v16;
  v34 = v11;
  v35 = v23;
  v36 = v17;
  v37 = v10;
  v38 = v7;
  v39 = v22;
  v40 = v21;
  v41 = v20;
  v42 = v19;
  v43 = v18;
  a2(&v26, v8, &v28);
  v28 = v17;
  v29 = v10;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)a6 = v26;
  result = v27;
  a6[1] = v27;
  return result;
}

uint64_t implicit closure #1 in static IdentifiedPreferenceTransformModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _BYTE v11[16];
  uint64_t FunctionTypeMetadata;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v10[0] = a1;
  v10[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  v13 = type metadata accessor for IdentifiedPreferenceTransformModifier.Transform(0, a3, a4, v6);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedPreferenceTransformModifier<A>.Transform, v13);
  v7 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v11, v13, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return AssociatedTypeWitness;
}

uint64_t IdentifiedPreferenceTransformModifier.Transform.updateValue()(uint64_t a1)
{
  uint64_t v1;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;
  uint64_t *Value;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t FunctionTypeMetadata;
  uint64_t v19;
  _QWORD v21[6];
  _QWORD v22[4];

  v22[3] = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v1 + 12);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v8 != v3 || v4 == 0)
  {
    v4 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1)
      v10 = static ViewIdentity.nextSeed + 1;
    else
      v10 = 1;
    static ViewIdentity.nextSeed = v10;
    *(_DWORD *)(v1 + 8) = v4;
    *(_DWORD *)(v1 + 12) = v8;
  }
  type metadata accessor for IdentifiedPreferenceTransformModifier(0, v5, v6, v7);
  Value = (uint64_t *)AGGraphGetValue();
  v12 = *Value;
  v13 = Value[1];
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v5;
  *(_QWORD *)(v14 + 24) = v6;
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v13;
  *(_DWORD *)(v14 + 48) = v4;
  v22[0] = partial apply for closure #1 in IdentifiedPreferenceTransformModifier.Transform.updateValue();
  v22[1] = v14;
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v21[2] = a1;
  v21[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedPreferenceTransformModifier<A>.Transform, a1, v16);
  swift_retain_n();
  v22[2] = swift_getAssociatedTypeWitness();
  v17 = MEMORY[0x1E0DEE9C0] + 8;
  FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v22, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v21, FunctionTypeMetadata, MEMORY[0x1E0DEDCE8], v17, MEMORY[0x1E0DEDD18], v19);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IdentifiedPreferenceTransformModifier<A>.Transform(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedPreferenceTransformModifier<A>.Transform, a1);
  return static AsyncAttribute.flags.getter();
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IdentifiedPreferenceTransformModifier<A>@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static IdentifiedPreferenceTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IdentifiedPreferenceTransformModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedPreferenceTransformModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t partial apply for implicit closure #1 in static IdentifiedPreferenceTransformModifier._makeView(modifier:inputs:body:)()
{
  uint64_t *v0;

  return implicit closure #1 in static IdentifiedPreferenceTransformModifier._makeView(modifier:inputs:body:)(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t type metadata accessor for IdentifiedPreferenceTransformModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IdentifiedPreferenceTransformModifier.Transform);
}

void base witness table accessor for _AttributeBody in IdentifiedPreferenceTransformModifier<A>.Transform()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_18795A54C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IdentifiedPreferenceTransformModifier.Transform.updateValue()(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 32))(a1, *(unsigned int *)(v1 + 48));
}

void View.complicationIdiom()()
{
  JUMPOUT(0x18D75B4ACLL);
}

void View.widgetIdiom()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t sub_18795A5C0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for ComplicationIdiomModifier, (uint64_t)&protocol witness table for ComplicationIdiomModifier);
}

uint64_t sub_18795A5D4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for WidgetIdiomModifier, (uint64_t)&protocol witness table for WidgetIdiomModifier);
}

ValueMetadata *type metadata accessor for WidgetIdiomModifier()
{
  return &type metadata for WidgetIdiomModifier;
}

ValueMetadata *type metadata accessor for ComplicationIdiomModifier()
{
  return &type metadata for ComplicationIdiomModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ComplicationIdiomModifier()
{
  return &protocol witness table for ComplicationIdiomModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ComplicationIdiomModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ComplicationIdiomModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance ComplicationIdiomModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ComplicationIdiomModifier()
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ComplicationIdiomModifier();
}

{
  AnyInterfaceIdiom.init<A>(_:)();
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for ViewModifier in WidgetIdiomModifier()
{
  return &protocol witness table for WidgetIdiomModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance WidgetIdiomModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance WidgetIdiomModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance WidgetIdiomModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance WidgetIdiomModifier()
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ComplicationIdiomModifier();
}

uint64_t getEnumTagSinglePayload for MainMenuItem.Content()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18795A7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MainMenuItem(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MainMenuItem.Content()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18795A83C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MainMenuItem(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MainMenuItem.Content()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MainMenuItem.Content;
  if (!type metadata singleton initialization cache for MainMenuItem.Content)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in MainMenuItem.Content()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 MainMenuItem.Content.body.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  _QWORD v14[4];
  __int128 v15;
  __n128 v16;
  __int128 v17;
  uint64_t v18;

  v3 = type metadata accessor for MainMenuItem.Content();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3, v6);
  v7 = *(_QWORD *)(*(_QWORD *)(v1 + *(int *)(type metadata accessor for MainMenuItem(0) + 24)) + 16);
  KeyPath = swift_getKeyPath();
  outlined init with copy of MainMenuItem.Content(v1, (uint64_t)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v10 = swift_allocObject();
  outlined init with take of MainMenuItem.Content((uint64_t)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  v14[2] = 0;
  v14[3] = v7;
  v14[1] = KeyPath;
  type metadata accessor for Range<Int>();
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  ForEach.init(_:idGenerator:content:)();
  v11 = v18;
  result = v16;
  v13 = v17;
  *(_OWORD *)a1 = v15;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 48) = v11;
  return result;
}

uint64_t closure #1 in MainMenuItem.Content.body.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = *a1;
  result = type metadata accessor for MainMenuItem(0);
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + *(int *)(result + 24));
    if (v5 < *(_QWORD *)(v7 + 16))
    {
      *a3 = *(_QWORD *)(v7 + 8 * v5 + 32);
      return swift_retain();
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of MainMenuItem.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MainMenuItem.Content();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18795AAB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MainMenuItem.Content() - 8) + 80);
  swift_bridgeObjectRelease();
  v2 = v0 + ((v1 + 16) & ~v1) + *(int *)(type metadata accessor for MainMenuItem(0) + 20);
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 10, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of MainMenuItem.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MainMenuItem.Content();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in MainMenuItem.Content.body.getter@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MainMenuItem.Content() - 8) + 80);
  return closure #1 in MainMenuItem.Content.body.getter(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, AnyView> and conformance <> ForEach<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, AnyView> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, AnyView> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, AnyView>();
    v2 = MEMORY[0x1E0CE7508];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, AnyView> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

void type metadata accessor for ForEach<Range<Int>, Int, AnyView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ForEach<Range<Int>, Int, AnyView>)
  {
    type metadata accessor for Range<Int>();
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    v0 = type metadata accessor for ForEach();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Range<Int>, Int, AnyView>);
  }
}

uint64_t View.textContentType(_:)(uint64_t a1)
{
  swift_getKeyPath();
  if (a1)
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  View.environment<A>(_:_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t EnvironmentValues.textContentType.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t sub_18795AE84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.textContentType.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_18795AEAC(uint64_t *a1)
{
  return key path setter for EnvironmentValues.textContentType : EnvironmentValues, serialized(a1);
}

void type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<TextContentTypeKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextContentTypeKey>);
  }
}

uint64_t EnvironmentValues.textContentType.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>, MEMORY[0x1E0CE53F0]);
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t key path setter for EnvironmentValues.textContentType : EnvironmentValues, serialized(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v1, v2);
  return swift_bridgeObjectRelease();
}

void (*EnvironmentValues.textContentType.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(_OWORD *)v3 = *((_OWORD *)v3 + 1);
  return EnvironmentValues.textContentType.modify;
}

void EnvironmentValues.textContentType.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = (*a1)[4];
  v5 = (*a1)[1];
  v3[2] = **a1;
  v3[3] = v5;
  type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>, MEMORY[0x1E0CE53F0]);
  swift_bridgeObjectRetain();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  free(v3);
}

uint64_t sub_18795B308@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.textContentType.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_18795B340(uint64_t *a1)
{
  return key path setter for EnvironmentValues.textContentType : EnvironmentValues, serialized(a1);
}

ValueMetadata *type metadata accessor for TextContentTypeKey()
{
  return &type metadata for TextContentTypeKey;
}

ValueMetadata *type metadata accessor for ToolbarButtonContentModifier()
{
  return &type metadata for ToolbarButtonContentModifier;
}

uint64_t destroy for ToolbarButtonLabelModifier(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 8;
  if ((*(_BYTE *)(a1 + 49) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 48) == 1)
      __swift_destroy_boxed_opaque_existential_1(v2);
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
}

uint64_t initializeWithCopy for ToolbarButtonLabelModifier(uint64_t a1, char *a2)
{
  _OWORD *v4;
  char v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  v5 = *a2;
  v4 = a2 + 8;
  *(_BYTE *)a1 = v5;
  v6 = (_OWORD *)(a1 + 8);
  if ((a2[49] & 1) != 0)
  {
    if (a2[48] == 1)
    {
      v7 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 32) = v7;
      (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v6, v4);
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      v8 = v4[1];
      *v6 = *v4;
      v6[1] = v8;
      *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v4 + 25);
    }
    *(_BYTE *)(a1 + 49) = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)v4;
    *(_BYTE *)(a1 + 49) = 0;
    swift_retain();
  }
  v9 = *((_QWORD *)a2 + 7);
  v10 = a2[64];
  outlined copy of Environment<Bool>.Content(v9, v10);
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = v10;
  v11 = *((_QWORD *)a2 + 9);
  v12 = a2[80];
  outlined copy of Environment<Bool>.Content(v11, v12);
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = v12;
  v13 = *((_QWORD *)a2 + 11);
  v14 = a2[96];
  outlined copy of Environment<Bool>.Content(v13, v14);
  *(_QWORD *)(a1 + 88) = v13;
  *(_BYTE *)(a1 + 96) = v14;
  return a1;
}

uint64_t assignWithCopy for ToolbarButtonLabelModifier(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  if (a1 != a2)
  {
    v5 = (__int128 *)(a2 + 8);
    outlined destroy of Environment<ToolbarItemPlacement.Role>.Content(a1 + 8);
    if ((*(_BYTE *)(a2 + 49) & 1) != 0)
    {
      if (*(_BYTE *)(a2 + 48) == 1)
      {
        v6 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 32) = v6;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        (**(void (***)(_OWORD *, uint64_t))(v6 - 8))(v4, a2 + 8);
        *(_BYTE *)(a1 + 48) = 1;
      }
      else
      {
        v7 = *v5;
        v8 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)(a2 + 33);
        *v4 = v7;
        v4[1] = v8;
      }
      *(_BYTE *)(a1 + 49) = 1;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)v5;
      *(_BYTE *)(a1 + 49) = 0;
      swift_retain();
    }
  }
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_BYTE *)(a2 + 64);
  outlined copy of Environment<Bool>.Content(v9, v10);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_BYTE *)(a2 + 80);
  outlined copy of Environment<Bool>.Content(v13, v14);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = v14;
  outlined consume of Environment<Bool>.Content(v15, v16);
  v17 = *(_QWORD *)(a2 + 88);
  v18 = *(_BYTE *)(a2 + 96);
  outlined copy of Environment<Bool>.Content(v17, v18);
  v19 = *(_QWORD *)(a1 + 88);
  v20 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v17;
  *(_BYTE *)(a1 + 96) = v18;
  outlined consume of Environment<Bool>.Content(v19, v20);
  return a1;
}

uint64_t assignWithTake for ToolbarButtonLabelModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  if (a1 != a2)
  {
    outlined destroy of Environment<ToolbarItemPlacement.Role>.Content(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
  }
  v4 = *(_BYTE *)(a2 + 64);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  v7 = *(_BYTE *)(a2 + 80);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *(_BYTE *)(a2 + 96);
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarButtonLabelModifier(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[97])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarButtonLabelModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarButtonLabelModifier()
{
  return &type metadata for ToolbarButtonLabelModifier;
}

uint64_t assignWithTake for ToolbarButtonStyle(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;

  if (a1 != a2)
  {
    outlined destroy of Environment<ToolbarItemPlacement.Role>.Content(a1);
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  }
  v5 = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_BYTE *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarButtonStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_BYTE *)(result + 41) = -(char)a2;
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ToolbarButtonContentModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v25 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_OWORD *)(a9 + 56) = v30;
  *(_OWORD *)(a9 + 72) = v31;
  *(_OWORD *)(a9 + 88) = v32;
  *(_OWORD *)(a9 + 104) = v33;
  *(_OWORD *)(a9 + 8) = v27;
  *(_OWORD *)(a9 + 24) = v28;
  *(_QWORD *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v29;
  return swift_retain();
}

uint64_t specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  uint64_t v13;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v24 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v24;
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(_BYTE *)(a9 + 112) = *(_BYTE *)(v13 + 112);
  v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  v26 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v26;
  *(_OWORD *)(a9 + 152) = v30;
  *(_OWORD *)(a9 + 136) = v29;
  *(_OWORD *)(a9 + 120) = v28;
  *(_OWORD *)(a9 + 216) = v34;
  *(_OWORD *)(a9 + 200) = v33;
  *(_OWORD *)(a9 + 184) = v32;
  *(_OWORD *)(a9 + 168) = v31;
  return outlined retain of ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>(v13);
}

{
  uint64_t v13;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v24;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 152) = v31;
  *(_OWORD *)(a9 + 168) = v32;
  *(_OWORD *)(a9 + 184) = v33;
  *(_OWORD *)(a9 + 88) = v27;
  *(_OWORD *)(a9 + 104) = v28;
  *(_BYTE *)(a9 + 80) = *(_BYTE *)(v13 + 80);
  *(_OWORD *)(a9 + 120) = v29;
  return outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>(v13);
}

{
  uint64_t v13;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v24 = *(_OWORD *)(v13 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(_OWORD *)(a9 + 112) = v24;
  v25 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v25;
  v26 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v26;
  v27 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v27;
  *(_OWORD *)(a9 + 184) = v32;
  *(_OWORD *)(a9 + 200) = v33;
  *(_OWORD *)(a9 + 216) = v34;
  *(_OWORD *)(a9 + 232) = v35;
  *(_OWORD *)(a9 + 136) = v29;
  *(_OWORD *)(a9 + 152) = v30;
  *(_BYTE *)(a9 + 128) = *(_BYTE *)(v13 + 128);
  *(_OWORD *)(a9 + 168) = v31;
  return outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>(v13);
}

{
  uint64_t v13;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v24;
  v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 120) = v30;
  *(_OWORD *)(a9 + 136) = v31;
  *(_OWORD *)(a9 + 152) = v32;
  *(_OWORD *)(a9 + 168) = v33;
  *(_OWORD *)(a9 + 72) = v27;
  *(_OWORD *)(a9 + 88) = v28;
  *(_QWORD *)(a9 + 64) = *(_QWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 104) = v29;
  return outlined retain of ModifiedContent<ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>, _FlexFrameLayout>(v13);
}

__n128 specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  void *v22;
  __n128 result;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v22 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  a9[4] = v28;
  a9[5] = v29;
  a9[6] = v30;
  *a9 = v24;
  a9[1] = v25;
  result = v27;
  a9[2] = v26;
  a9[3] = v27;
  return result;
}

{
  _OWORD *v13;
  void *v23;
  __int128 v24;
  __n128 result;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v24 = v13[1];
  *a9 = *v13;
  a9[1] = v24;
  *(_OWORD *)((char *)a9 + 27) = *(_OWORD *)((char *)v13 + 27);
  a9[7] = v30;
  a9[8] = v31;
  a9[9] = v32;
  a9[3] = v26;
  a9[4] = v27;
  result = v29;
  a9[5] = v28;
  a9[6] = v29;
  return result;
}

{
  _OWORD *v13;
  void *v23;
  __int128 v24;
  __n128 result;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v24 = v13[1];
  *a9 = *v13;
  a9[1] = v24;
  *(_OWORD *)((char *)a9 + 25) = *(_OWORD *)((char *)v13 + 25);
  a9[7] = v30;
  a9[8] = v31;
  a9[9] = v32;
  a9[3] = v26;
  a9[4] = v27;
  result = v29;
  a9[5] = v28;
  a9[6] = v29;
  return result;
}

double specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (void (*)(uint64_t, uint64_t))outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent).n128_u64[0];
  return result;
}

{
  double result;

  *(_QWORD *)&result = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (void (*)(uint64_t, uint64_t))outlined init with copy of ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>).n128_u64[0];
  return result;
}

{
  double result;

  *(_QWORD *)&result = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (void (*)(uint64_t, uint64_t))outlined init with copy of ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>).n128_u64[0];
  return result;
}

double specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  uint64_t v13;
  void *v23;
  double result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  outlined init with copy of _VariadicView_Children(v13, a9);
  *(_OWORD *)(a9 + 104) = v28;
  *(_OWORD *)(a9 + 120) = v29;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 152) = v31;
  result = *(double *)&v25;
  *(_OWORD *)(a9 + 56) = v25;
  *(_OWORD *)(a9 + 72) = v26;
  *(_OWORD *)(a9 + 88) = v27;
  return result;
}

{
  uint64_t v13;
  void *v23;
  double result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  outlined init with copy of _TraitWritingTableRowModifier<DropOntoTraitKey>(v13, a9, &lazy cache variable for type metadata for _UnaryViewAdaptor<_VariadicView_Children>, MEMORY[0x1E0CE5600], MEMORY[0x1E0CE55F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE40F0]);
  *(_OWORD *)(a9 + 104) = v28;
  *(_OWORD *)(a9 + 120) = v29;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 152) = v31;
  result = *(double *)&v25;
  *(_OWORD *)(a9 + 56) = v25;
  *(_OWORD *)(a9 + 72) = v26;
  *(_OWORD *)(a9 + 88) = v27;
  return result;
}

