uint64_t sub_187486588(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  _BYTE v15[96];

  *(_QWORD *)(v3 - 16) = a1;
  *(_QWORD *)(v3 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListGenerator<A, B>, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v7 = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v1 + 40) = v2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 200, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1, v4, a1, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  v9 = *(void **)(v1 + 200);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  v10 = *(_DWORD *)(v1 + 112);
  _ViewOutputs.init()();
  v11 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 112) = v11;
  *(_DWORD *)(v1 + 120) = *(_OWORD *)(v1 + 64);
  MEMORY[0x1E0C80A78](v11, v12);
  *(_DWORD *)&v15[-16] = *(_DWORD *)(v1 + 60);
  *(_DWORD *)&v15[-12] = v10;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v14 = *(_QWORD **)(v1 + 96);
  *v14 = *(_QWORD *)(v1 + 200);
  v14[1] = *(_QWORD *)(v1 + 208);
  return result;
}

uint64_t closure #1 in static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView(0, a2, a3, a4);
  v5 = type metadata accessor for TokenFieldConfiguration(0);
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, v5, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t closure #2 in static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 36);
  v11[2] = v6;
  v11[3] = a2;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a2, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t implicit closure #1 in static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle.MakeConfiguration and conformance SearchFieldConfigurationTokenFieldStyle.MakeConfiguration();
  return Attribute.init<A>(body:value:flags:update:)();
}

void protocol witness for static View._makeView(view:inputs:) in conformance SearchFieldConfigurationTokenFieldStyle.BodyView<A>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SearchFieldConfigurationTokenFieldStyle.BodyView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldConfigurationTokenFieldStyle.BodyView<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SearchFieldConfigurationTokenFieldStyle.BodyView<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldConfigurationTokenFieldStyle.BodyView<A>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance SearchFieldConfigurationTokenFieldStyle.BodyView<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldConfigurationTokenFieldStyle.BodyView<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t SearchFieldConfigurationTokenFieldStyle.MakeConfiguration.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Value;
  uint64_t v16;
  uint64_t result;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = MEMORY[0x1E0CAF240];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v27 - v5;
  v7 = type metadata accessor for TokenFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v27 - v13;
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v14, type metadata accessor for TokenFieldConfiguration);
  outlined init with copy of Binding<AnyToken>((uint64_t)v14, (uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t)v2, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, type metadata accessor for TokenFieldConfiguration);
  v16 = AGGraphGetValue();
  result = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v16, (uint64_t)v10, type metadata accessor for TokenFieldConfiguration);
  v18 = &v10[*(int *)(v7 + 24)];
  v19 = *((_QWORD *)v18 + 3);
  if (v19)
  {
    v21 = *(_QWORD *)v18;
    v20 = *((_QWORD *)v18 + 1);
    v22 = *((_DWORD *)v18 + 4) & 1;
    outlined copy of Text.Storage(*(_QWORD *)v18, v20, v18[16] & 1);
    swift_bridgeObjectRetain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for TokenFieldConfiguration);
    v23 = AGCreateWeakAttribute();
    outlined init with take of Binding<AttributedString>((uint64_t)v6, a1);
    v24 = type metadata accessor for SearchFieldConfiguration.Data(0);
    v25 = a1 + *(int *)(v24 + 20);
    *(_QWORD *)v25 = v21;
    *(_QWORD *)(v25 + 8) = v20;
    *(_BYTE *)(v25 + 16) = v22;
    *(_QWORD *)(v25 + 24) = v19;
    v26 = a1 + *(int *)(v24 + 24);
    *(_QWORD *)v26 = v23;
    *(_BYTE *)(v26 + 8) = 0;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a1, 0, 1, v24);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SearchFieldConfigurationTokenFieldStyle.MakeConfiguration@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance SearchFieldConfigurationTokenFieldStyle.MakeConfiguration@<X0>(uint64_t a1@<X8>)
{
  return SearchFieldConfigurationTokenFieldStyle.MakeConfiguration.value.getter(a1);
}

void type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>)
  {
    type metadata accessor for ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>> and conformance <> ForEach<A, B, C>();
    v6 = type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>);
  }
}

void type metadata accessor for ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>)
  {
    type metadata accessor for Binding<[AnyToken]>();
    type metadata accessor for ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    lazy protocol witness table accessor for type Binding<[AnyToken]> and conformance <A> Binding<A>();
    v0 = type metadata accessor for ForEach();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>);
  }
}

void type metadata accessor for Binding<[AnyToken]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<[AnyToken]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [AnyToken], (uint64_t)&type metadata for AnyToken, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<[AnyToken]>);
  }
}

void type metadata accessor for ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for MergePlatformItemsView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for MergePlatformItemsView);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>);
  }
}

unint64_t lazy protocol witness table accessor for type Binding<[AnyToken]> and conformance <A> Binding<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type Binding<[AnyToken]> and conformance <A> Binding<A>;
  if (!lazy protocol witness table cache variable for type Binding<[AnyToken]> and conformance <A> Binding<A>)
  {
    type metadata accessor for Binding<[AnyToken]>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type [AnyToken] and conformance [A](&lazy protocol witness table cache variable for type [AnyToken] and conformance [A], MEMORY[0x1E0DEAF28]);
    v3[1] = lazy protocol witness table accessor for type [AnyToken] and conformance [A](&lazy protocol witness table cache variable for type [AnyToken] and conformance [A], MEMORY[0x1E0DEAF48]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Binding<[AnyToken]> and conformance <A> Binding<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [AnyToken] and conformance [A](unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [AnyToken], (uint64_t)&type metadata for AnyToken, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    v2 = v1;
    v3[0] = &protocol witness table for MergePlatformItemsView<A>;
    v3[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchFieldConfigurationTokenFieldStyle.BodyView);
}

void type metadata accessor for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>)
  {
    type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PickerStyleWriter<SectionPickerStyle>, (uint64_t)&type metadata for SectionPickerStyle, (uint64_t)&protocol witness table for SectionPickerStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PickerStyleWriter);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>)
  {
    type metadata accessor for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE3238], MEMORY[0x1E0CE3228], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>);
  }
}

uint64_t outlined init with copy of Binding<AnyToken>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;

  v7 = a5(0, a3, a4, MEMORY[0x1E0CE75A0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_1874871CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

unint64_t lazy protocol witness table accessor for type WritableKeyPath<AttributedString, SearchAttributedString> and conformance WritableKeyPath<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type WritableKeyPath<AttributedString, SearchAttributedString> and conformance WritableKeyPath<A, B>;
  if (!lazy protocol witness table cache variable for type WritableKeyPath<AttributedString, SearchAttributedString> and conformance WritableKeyPath<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for WritableKeyPath<AttributedString, SearchAttributedString>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t))type metadata accessor for SearchAttributedString, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC870]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WritableKeyPath<AttributedString, SearchAttributedString> and conformance WritableKeyPath<A, B>);
  }
  return result;
}

char *sub_187487274@<X0>(char **a1@<X8>)
{
  char *result;

  result = SearchAttributedString.tokens.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18748729C()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  SearchAttributedString.update(tokens:)((Swift::OpaquePointer)v0);
  return swift_bridgeObjectRelease();
}

void type metadata accessor for WritableKeyPath<SearchAttributedString, [AnyToken]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WritableKeyPath<SearchAttributedString, [AnyToken]>)
  {
    type metadata accessor for SearchAttributedString();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [AnyToken], (uint64_t)&type metadata for AnyToken, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for WritableKeyPath();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<SearchAttributedString, [AnyToken]>);
  }
}

unint64_t lazy protocol witness table accessor for type WritableKeyPath<SearchAttributedString, [AnyToken]> and conformance WritableKeyPath<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type WritableKeyPath<SearchAttributedString, [AnyToken]> and conformance WritableKeyPath<A, B>;
  if (!lazy protocol witness table cache variable for type WritableKeyPath<SearchAttributedString, [AnyToken]> and conformance WritableKeyPath<A, B>)
  {
    type metadata accessor for WritableKeyPath<SearchAttributedString, [AnyToken]>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WritableKeyPath<SearchAttributedString, [AnyToken]> and conformance WritableKeyPath<A, B>);
  }
  return result;
}

uint64_t outlined destroy of Binding<AnyToken>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v5;

  v5 = a4(0, a2, a3, MEMORY[0x1E0CE75A0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_1874873D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for TokenFieldConfiguration(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = v3 + *(int *)(v4 + 32);
  v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v3 + *(int *)(v1 + 24);
  if (*(_QWORD *)(v7 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in SearchFieldConfigurationTokenFieldStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TokenFieldConfiguration(0) - 8) + 80);
  return implicit closure #1 in closure #1 in SearchFieldConfigurationTokenFieldStyle.makeBody(configuration:)(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t lazy protocol witness table accessor for type Binding<AnyToken> and conformance <A> Binding<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Binding<AnyToken> and conformance <A> Binding<A>;
  if (!lazy protocol witness table cache variable for type Binding<AnyToken> and conformance <A> Binding<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyToken>, (uint64_t)&type metadata for AnyToken, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type AnyToken and conformance AnyToken();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75C0], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Binding<AnyToken> and conformance <A> Binding<A>);
  }
  return result;
}

uint64_t type metadata completion function for SearchFieldConfigurationTokenFieldStyle.BodyView()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for TokenFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SearchFieldConfigurationTokenFieldStyle.BodyView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(unint64_t, unint64_t, uint64_t);
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  void (*v38)(unint64_t, unint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8 | 7;
  v10 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64) + 7;
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = (((v10 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + v12 + 16;
  v14 = v8 | 7 | v12;
  if (v14 != 7
    || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v13 & ~v12) + *(_QWORD *)(v11 + 64) > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    v18 = (_QWORD *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  else
  {
    v19 = v6;
    v20 = ~v8;
    v40 = ~v12;
    v41 = *(_QWORD *)(a3 + 16);
    v42 = a2;
    v43 = a1;
    v21 = (_QWORD *)(((unint64_t)a1 + v9) & ~v9);
    v22 = (_QWORD *)(((unint64_t)a2 + v9) & ~v9);
    *v21 = *v22;
    v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v23 = *v24;
    v25 = v8 + 8;
    v26 = ((unint64_t)v23 + v25) & v20;
    v27 = ((unint64_t)v24 + v25) & v20;
    v28 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v28(v26, v27, v19);
    v29 = ((unint64_t)v21 + v10) & 0xFFFFFFFFFFFFFFF8;
    v30 = ((unint64_t)v22 + v10) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v30 + 24) < 0xFFFFFFFFuLL)
    {
      v34 = *(_OWORD *)(v30 + 16);
      *(_OWORD *)v29 = *(_OWORD *)v30;
      *(_OWORD *)(v29 + 16) = v34;
    }
    else
    {
      v31 = *(_QWORD *)v30;
      v32 = *(_QWORD *)(v30 + 8);
      v33 = *(_BYTE *)(v30 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v30, v32, v33);
      *(_QWORD *)v29 = v31;
      *(_QWORD *)(v29 + 8) = v32;
      *(_BYTE *)(v29 + 16) = v33;
      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v30 + 24);
      swift_bridgeObjectRetain();
    }
    v35 = (_QWORD *)((v29 + 39) & 0xFFFFFFFFFFFFFFF8);
    v36 = (_QWORD *)((v30 + 39) & 0xFFFFFFFFFFFFFFF8);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v18 = v43;
    v38 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16);
    swift_retain();
    v38(((unint64_t)v43 + v13) & v40, ((unint64_t)v42 + v13) & v40, v41);
  }
  return v18;
}

uint64_t destroy for SearchFieldConfigurationTokenFieldStyle.BodyView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = type metadata accessor for AttributedString();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + (((((v6 | 7) + a1) & ~(v6 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6, v4);
  v7 = *(_QWORD *)(v5 + 64) + ((v6 + 16) & ~v6) + 7;
  v8 = (v7 + (((v6 | 7) + a1) & ~(v6 | 7))) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v8 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + (((v7 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for SearchFieldConfigurationTokenFieldStyle.BodyView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void (*v31)(unint64_t, unint64_t, uint64_t);
  uint64_t v34;

  v5 = type metadata accessor for AttributedString();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v34 = a2;
  v8 = (_QWORD *)(((v7 | 7) + a2) & ~(v7 | 7));
  v9 = (_QWORD *)(((v7 | 7) + a1) & ~(v7 | 7));
  *v9 = *v8;
  v10 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = ((unint64_t)v10 + v7 + 8) & ~v7;
  v13 = ((unint64_t)v11 + v7 + 8) & ~v7;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  swift_retain();
  v14(v12, v13, v5);
  v15 = *(_QWORD *)(v6 + 64) + ((v7 + 16) & ~v7) + 7;
  v16 = (v15 + (((v7 | 7) + a1) & ~(v7 | 7))) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v8 + v15) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v17 + 24) < 0xFFFFFFFFuLL)
  {
    v21 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v21;
  }
  else
  {
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v17, v19, v20);
    *(_QWORD *)v16 = v18;
    *(_QWORD *)(v16 + 8) = v19;
    *(_BYTE *)(v16 + 16) = v20;
    *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
    swift_bridgeObjectRetain();
  }
  v22 = (_QWORD *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)((v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = *(_QWORD *)(a3 + 16);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (((v15 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + v27 + 16;
  v29 = (v28 + a1) & ~v27;
  v30 = (v28 + v34) & ~v27;
  v31 = *(void (**)(unint64_t, unint64_t, uint64_t))(v26 + 16);
  swift_retain();
  v31(v29, v30, v25);
  return a1;
}

uint64_t assignWithCopy for SearchFieldConfigurationTokenFieldStyle.BodyView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v5 = type metadata accessor for AttributedString();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (_QWORD *)(((v7 | 7) + a1) & ~(v7 | 7));
  v9 = (_QWORD *)(((v7 | 7) + a2) & ~(v7 | 7));
  *v8 = *v9;
  swift_retain();
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v10 + v7 + 8) & ~v7, ((unint64_t)v11 + v7 + 8) & ~v7, v5);
  v12 = *(_QWORD *)(v6 + 64) + ((v7 + 16) & ~v7) + 7;
  v13 = ((unint64_t)v8 + v12) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v9 + v12) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)(v14 + 24);
  if (*(_QWORD *)(v13 + 24) < 0xFFFFFFFFuLL)
  {
    if (v15 >= 0xFFFFFFFF)
    {
      v22 = *(_QWORD *)v14;
      v23 = *(_QWORD *)(v14 + 8);
      v24 = *(_BYTE *)(v14 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v14, v23, v24);
      *(_QWORD *)v13 = v22;
      *(_QWORD *)(v13 + 8) = v23;
      *(_BYTE *)(v13 + 16) = v24;
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    v25 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v25;
    goto LABEL_8;
  }
  if (v15 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v16 = *(_QWORD *)v14;
  v17 = *(_QWORD *)(v14 + 8);
  v18 = *(_BYTE *)(v14 + 16);
  outlined copy of Text.Storage(*(_QWORD *)v14, v17, v18);
  v19 = *(_QWORD *)v13;
  v20 = *(_QWORD *)(v13 + 8);
  v21 = *(_BYTE *)(v13 + 16);
  *(_QWORD *)v13 = v16;
  *(_QWORD *)(v13 + 8) = v17;
  *(_BYTE *)(v13 + 16) = v18;
  outlined consume of Text.Storage(v19, v20, v21);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  v26 = (_QWORD *)((v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)((v14 + 39) & 0xFFFFFFFFFFFFFFF8);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  swift_retain();
  swift_release();
  v29 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = (((v12 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + v30 + 16;
  (*(void (**)(unint64_t, unint64_t))(v29 + 24))((v31 + a1) & ~v30, (v31 + a2) & ~v30);
  return a1;
}

uint64_t initializeWithTake for SearchFieldConfigurationTokenFieldStyle.BodyView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (_QWORD *)(((v8 | 7) + a2) & ~(v8 | 7));
  v10 = (_QWORD *)(((v8 | 7) + a1) & ~(v8 | 7));
  *v10 = *v9;
  v11 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v11 + v8 + 8) & ~v8, ((unint64_t)v12 + v8 + 8) & ~v8, v6);
  v13 = *(_QWORD *)(v7 + 64) + ((v8 + 16) & ~v8) + 7;
  v14 = (_OWORD *)((v13 + (((v8 | 7) + a1) & ~(v8 | 7))) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)((v13 + (((v8 | 7) + a2) & ~(v8 | 7))) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_OWORD *)(((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v15 + 39) & 0xFFFFFFFFFFFFF8);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (((v13 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + v18 + 16;
  (*(void (**)(unint64_t, unint64_t))(v17 + 32))((v19 + a1) & ~v18, (v19 + a2) & ~v18);
  return a1;
}

uint64_t assignWithTake for SearchFieldConfigurationTokenFieldStyle.BodyView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (_QWORD *)(((v8 | 7) + a2) & ~(v8 | 7));
  v10 = (_QWORD *)(((v8 | 7) + a1) & ~(v8 | 7));
  *v10 = *v9;
  swift_release();
  v11 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)v11 + v8 + 8) & ~v8, ((unint64_t)v12 + v8 + 8) & ~v8, v6);
  v13 = *(_QWORD *)(v7 + 64) + ((v8 + 16) & ~v8) + 7;
  v14 = (v13 + (((v8 | 7) + a1) & ~(v8 | 7))) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + (((v8 | 7) + a2) & ~(v8 | 7))) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v14 + 24) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)(v15 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));
    swift_bridgeObjectRelease();
LABEL_5:
    v20 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + 16) = v20;
    goto LABEL_6;
  }
  v16 = *(_BYTE *)(v15 + 16);
  v17 = *(_QWORD *)v14;
  v18 = *(_QWORD *)(v14 + 8);
  v19 = *(_BYTE *)(v14 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_BYTE *)(v14 + 16) = v16;
  outlined consume of Text.Storage(v17, v18, v19);
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)((v14 + 39) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v15 + 39) & 0xFFFFFFFFFFFFF8);
  swift_release();
  v21 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (((v13 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + v22 + 16;
  (*(void (**)(unint64_t, unint64_t))(v21 + 40))((v23 + a1) & ~v22, (v23 + a2) & ~v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchFieldConfigurationTokenFieldStyle.BodyView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  int v20;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v7 + 84);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 84);
  if (v12 <= v9)
    v13 = v9;
  else
    v13 = *(_DWORD *)(v11 + 84);
  if (!a2)
    return 0;
  v14 = v6;
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = *(unsigned __int8 *)(v11 + 80);
  v17 = ((((*(_QWORD *)(v7 + 64) + ((v15 + 16) & ~v15) + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
      + v16
      + 16;
  if (a2 <= v13)
    goto LABEL_27;
  v18 = (v17 & ~v16) + *(_QWORD *)(v11 + 64);
  v19 = 8 * v18;
  if (v18 <= 3)
  {
    v22 = ((a2 - v13 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      v20 = *(_DWORD *)(a1 + v18);
      if (!v20)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v22 > 0xFF)
    {
      v20 = *(unsigned __int16 *)(a1 + v18);
      if (!*(_WORD *)(a1 + v18))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v22 < 2)
    {
LABEL_27:
      if (v9 < v12)
        return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v11 + 48))((v17 + a1) & ~v16, *(unsigned int *)(v11 + 84), v10);
      v25 = (uint64_t *)(((((v15 | 7) + a1) & ~(v15 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v8 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)v25 + v15 + 8) & ~v15, v8, v14);
      v26 = *v25;
      if ((unint64_t)*v25 >= 0xFFFFFFFF)
        LODWORD(v26) = -1;
      return (v26 + 1);
    }
  }
  v20 = *(unsigned __int8 *)(a1 + v18);
  if (!*(_BYTE *)(a1 + v18))
    goto LABEL_27;
LABEL_18:
  v23 = (v20 - 1) << v19;
  if (v18 > 3)
    v23 = 0;
  if ((_DWORD)v18)
  {
    if (v18 <= 3)
      v24 = (v17 & ~(_DWORD)v16) + *(_DWORD *)(v11 + 64);
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  return v13 + v23 + 1;
}

void storeEnumTagSinglePayload for SearchFieldConfigurationTokenFieldStyle.BodyView(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v8 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  if (*(_DWORD *)(v8 + 84) <= 0x7FFFFFFFu)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= v9)
    v11 = v9;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = ((((*(_QWORD *)(v8 + 64)
          + ((*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
          + 7) & 0xFFFFFFFFFFFFFFF8)
        + 39) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = ((v12 + v13) & ~v13) + *(_QWORD *)(v10 + 64);
  if (a3 <= v11)
  {
    v15 = 0u;
  }
  else if (v14 <= 3)
  {
    v17 = ((a3 - v11 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v15 = 4u;
    }
    else if (v17 >= 0x100)
    {
      v15 = 2;
    }
    else
    {
      v15 = v17 > 1;
    }
  }
  else
  {
    v15 = 1u;
  }
  if (v11 < a2)
  {
    v16 = ~v11 + a2;
    if (v14 < 4)
    {
      if ((_DWORD)v14)
      {
        v18 = v16 & ~(-1 << (8 * v14));
        bzero(a1, ((v12 + v13) & ~v13) + *(_QWORD *)(v10 + 64));
        if ((_DWORD)v14 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if ((_DWORD)v14 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, ((v12 + v13) & ~v13) + *(_QWORD *)(v10 + 64));
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, ViewInputFlagModifier<AllowSectionPickerLabels>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, ViewInputFlagModifier<AllowSectionPickerLabels>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, ViewInputFlagModifier<AllowSectionPickerLabels>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, ViewInputFlagModifier<AllowSectionPickerLabels>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewInputFlagModifier<AllowSectionPickerLabels>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, ViewInputFlagModifier<AllowSectionPickerLabels>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ViewInputFlagModifier<AllowSectionPickerLabels>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<AllowSectionPickerLabels>)
  {
    v2 = lazy protocol witness table accessor for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for AllowSectionPickerLabels, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AllowSectionPickerLabels>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>();
    v2[0] = &protocol witness table for SearchFieldConfigurationTokenFieldStyle.BodyView<A>;
    v2[1] = &protocol witness table for PickerStyleWriter<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in SearchFieldConfigurationTokenFieldStyle.BodyView<A>()
{
  return &protocol witness table for SearchFieldConfigurationTokenFieldStyle.BodyView<A>;
}

uint64_t partial apply for implicit closure #1 in static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)()
{
  return implicit closure #1 in static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)();
}

unint64_t lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle.MakeConfiguration and conformance SearchFieldConfigurationTokenFieldStyle.MakeConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchFieldConfigurationTokenFieldStyle.MakeConfiguration and conformance SearchFieldConfigurationTokenFieldStyle.MakeConfiguration;
  if (!lazy protocol witness table cache variable for type SearchFieldConfigurationTokenFieldStyle.MakeConfiguration and conformance SearchFieldConfigurationTokenFieldStyle.MakeConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldConfigurationTokenFieldStyle.MakeConfiguration, &unk_1E1AAC910);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfigurationTokenFieldStyle.MakeConfiguration and conformance SearchFieldConfigurationTokenFieldStyle.MakeConfiguration);
  }
  return result;
}

void *type metadata accessor for SearchFieldConfigurationTokenFieldStyle.MakeConfiguration()
{
  return &unk_1E1AAC910;
}

_QWORD *initializeWithTake for ItemBoundNavigationDestinationModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  size_t v13;
  size_t v14;
  size_t v15;
  _OWORD *v16;
  _OWORD *v17;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7))
  {
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
    if (v12)
      v14 = v13;
    else
      v14 = v13 + 1;
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
  }
  v15 = v13 + ((v9 + 16) & ~v9);
  if (!v12)
    ++v15;
  v16 = (_OWORD *)(((unint64_t)a1 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  v17 = (_OWORD *)(((unint64_t)a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  *(_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void type metadata accessor for ItemBoundNavigationDestinationModifier()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ItemBoundNavigationDestinationModifier<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

void ItemBoundNavigationDestinationModifier.init(item:destination:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  type metadata accessor for Optional();
  v4 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for ItemBoundNavigationDestinationModifier();
}

uint64_t sub_187488848(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(result + 52));
  *v4 = v2;
  v4[1] = v1;
  *(_QWORD *)(v3 + *(int *)(result + 56)) = 0;
  return result;
}

void ItemBoundNavigationDestinationModifier.body(content:)(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t updated;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t FunctionTypeMetadata1;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v23 = a2;
  v3 = a1[2];
  v4 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v4, v5);
  v20 = &v14[-v6];
  v17 = a1[3];
  v7 = v17;
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  v15 = a1[4];
  v8 = v15;
  updated = type metadata accessor for UpdateViewDestinationRequestProcessor(0, FunctionTypeMetadata1, v3, v15);
  v22 = *(_QWORD *)(updated - 8);
  v18 = updated;
  MEMORY[0x1E0C80A78](updated, v10);
  v19 = &v14[-v11];
  v12 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v12, v13);
  v16 = a1[5];
  v24 = v3;
  v25 = v7;
  v26 = v8;
  v27 = v16;
  type metadata accessor for BaseModifier();
}

void sub_1874889B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;

  *(_QWORD *)(v14 - 216) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v14 - 232) = a1;
  MEMORY[0x1E0C80A78](a1, a1);
  v16 = (char *)&a9 - v15;
  v17 = type metadata accessor for ModifiedContent();
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v14 - 248) = v17;
  *(_QWORD *)(v14 - 208) = v18;
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  *(_QWORD *)(v14 - 288) = (char *)&a9 - v21;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemBoundNavigationDestinationModifier<A, B>, v9, v20);
  *(_QWORD *)(v14 - 256) = type metadata accessor for _ViewModifier_Content();
  v22 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 200) = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  *(_QWORD *)(v14 - 296) = (char *)&a9 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25, v26);
  *(_QWORD *)(v14 - 224) = (char *)&a9 - v28;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v11 + 16))(v12, v13, v10, v27);
  swift_retain();
  Namespace.wrappedValue.getter();
  BaseModifier.init(item:transform:id:)(v12, (uint64_t)v16);
}

uint64_t sub_187488B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);

  v8 = *(_QWORD *)(v7 - 184);
  MEMORY[0x18D75B9C8](v4);
  *(_QWORD *)(v7 - 120) = v0;
  *(_QWORD *)(v7 - 112) = v2;
  swift_retain();
  v9 = Namespace.wrappedValue.getter();
  v10 = *(_QWORD *)(v7 - 192);
  UpdateViewDestinationRequestProcessor.init(presentationData:destination:linkID:)(v8, v7 - 120, v9, *(_QWORD *)(v7 - 176), v1, v3, v10);
  v11 = *(_QWORD *)(v7 - 288);
  v12 = *(_QWORD *)(v7 - 240);
  v13 = *(_QWORD *)(v7 - 232);
  MEMORY[0x18D756BEC](v10, v13, v12, &protocol witness table for BaseModifier<A, B>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 168) + 8))(v10, v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 216) + 8))(v6, v13);
  v14 = *(_QWORD *)(v7 - 256);
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v14);
  v16 = *(_QWORD *)(v7 - 296);
  v17 = v14;
  v18 = *(_QWORD *)(v7 - 248);
  MEMORY[0x18D75B4AC](v11, v17, v18, v15);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 208) + 8))(v11, v18);
  *(_QWORD *)(v7 - 136) = &protocol witness table for BaseModifier<A, B>;
  *(_QWORD *)(v7 - 128) = &protocol witness table for UpdateViewDestinationRequestProcessor<A, B>;
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], v18, v7 - 136);
  *(_QWORD *)(v7 - 152) = v15;
  *(_QWORD *)(v7 - 144) = v19;
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7 - 152);
  v21 = *(_QWORD *)(v7 - 224);
  static ViewBuilder.buildExpression<A>(_:)(v16, v5, v20);
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 200) + 8);
  v22(v16, v5);
  static ViewBuilder.buildBlock<A>(_:)(v21, v5, *(_QWORD *)(v7 - 160));
  return v22(v21, v5);
}

void BaseModifier.init(item:transform:id:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  type metadata accessor for Optional();
  v4 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for BaseModifier();
}

uint64_t sub_187488D58(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v5 = (_QWORD *)(v4 + *(int *)(result + 52));
  *v5 = v3;
  v5[1] = v2;
  *(_QWORD *)(v4 + *(int *)(result + 56)) = v1;
  return result;
}

void type metadata accessor for BaseModifier()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for ItemBoundNavigationDestinationModifier()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Optional();
  result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ItemBoundNavigationDestinationModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  const void *v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = (v7 + 16) & ~v7;
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  v10 = v8 + v9;
  v11 = v6 & 0x100000;
  v12 = *a2;
  *a1 = *a2;
  if (v7 > 7
    || v11 != 0
    || ((((v8 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    v16 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v17 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v16 = *v17;
    v18 = (void *)(((unint64_t)v16 + v7 + 8) & ~v7);
    v19 = (const void *)(((unint64_t)v17 + v7 + 8) & ~v7);
    v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_retain();
    if (v20(v19, 1, v4))
    {
      memcpy(v18, v19, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v18, v19, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v4);
    }
    v21 = (_QWORD *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    *(_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for ItemBoundNavigationDestinationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = a1 + 15;
  swift_release();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((v3 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  return swift_release();
}

_QWORD *initializeWithCopy for ItemBoundNavigationDestinationModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  swift_retain();
  if (v12(v11, 1, v7))
  {
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
    if (v13)
      v15 = *(_QWORD *)(v8 + 64);
    else
      v15 = v14 + 1;
    memcpy(v10, v11, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
  }
  v16 = v14 + ((v9 + 16) & ~v9);
  if (!v13)
    ++v16;
  v17 = (_QWORD *)(((unint64_t)a1 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)a2 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  *(_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ItemBoundNavigationDestinationModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  size_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)v7 + v10 + 8) & ~v10);
  v12 = (void *)((v10 + 8 + v6) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  LODWORD(v7) = v13(v11, 1, v8);
  v14 = v13(v12, 1, v8);
  if ((_DWORD)v7)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v11, v12, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      goto LABEL_10;
    }
LABEL_6:
    if (*(_DWORD *)(v9 + 84))
      v15 = *(_QWORD *)(v9 + 64);
    else
      v15 = *(_QWORD *)(v9 + 64) + 1;
    memcpy(v11, v12, v15);
    goto LABEL_10;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
    goto LABEL_6;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v11, v12, v8);
LABEL_10:
  v16 = *(_QWORD *)(v9 + 64) + ((v10 + 16) & ~v10);
  if (!*(_DWORD *)(v9 + 84))
    ++v16;
  v17 = (_QWORD *)(((unint64_t)a1 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)a2 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *initializeWithTake for BaseModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  size_t v13;
  size_t v14;
  size_t v15;
  _OWORD *v16;
  _OWORD *v17;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7))
  {
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
    if (v12)
      v14 = v13;
    else
      v14 = v13 + 1;
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
  }
  v15 = v13 + ((v9 + 16) & ~v9);
  if (!v12)
    ++v15;
  v16 = (_OWORD *)(((unint64_t)a1 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_OWORD *)(((unint64_t)a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  *(_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for ItemBoundNavigationDestinationModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  size_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)(((unint64_t)v7 + v11 + 8) & ~v11);
  v13 = (void *)((v11 + 8 + v8) & ~v11);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v8) = v14(v12, 1, v9);
  v15 = v14(v13, 1, v9);
  if ((_DWORD)v8)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_10;
    }
LABEL_6:
    if (*(_DWORD *)(v10 + 84))
      v16 = *(_QWORD *)(v10 + 64);
    else
      v16 = *(_QWORD *)(v10 + 64) + 1;
    memcpy(v12, v13, v16);
    goto LABEL_10;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    goto LABEL_6;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
LABEL_10:
  v17 = *(_QWORD *)(v10 + 64) + ((v11 + 16) & ~v11);
  if (!*(_DWORD *)(v10 + 84))
    ++v17;
  v18 = (_OWORD *)(((unint64_t)a1 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = (uint64_t)a2 + v17 + 7;
  v20 = (v19 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v18 = *(_OWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ItemBoundNavigationDestinationModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = 7;
  else
    v8 = 8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (v7 < a2)
  {
    if (((((((v8 + *(_QWORD *)(v4 + 64) + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X16 }
  }
  v14 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0x80000000) != 0)
  {
    v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v14 + v9 + 8) & ~v9);
    if (v16 >= 2)
      return v16 - 1;
    else
      return 0;
  }
  else
  {
    v15 = *v14;
    if (v15 >= 0xFFFFFFFF)
      LODWORD(v15) = -1;
    return (v15 + 1);
  }
}

void storeEnumTagSinglePayload for ItemBoundNavigationDestinationModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((((v11 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X15 }
}

uint64_t sub_1874898AC@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t result;

  *(_BYTE *)(v14 + v15) = 0;
  if (a1)
  {
    v16 = (_QWORD *)((v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v11 & 0x80000000) != 0)
    {
      if (v11 >= a1)
      {
        return (*(uint64_t (**)(unint64_t, _QWORD))(v12 + 56))(((unint64_t)v16 + v13 + 8) & v10, a1 + 1);
      }
      else if ((_DWORD)a2)
      {
        if (a2 <= 3)
          v18 = a2;
        else
          v18 = 4;
        bzero((void *)(((unint64_t)v16 + v13 + 8) & v10), a2);
        __asm { BR              X10 }
      }
    }
    else
    {
      if ((a1 & 0x80000000) != 0)
        v17 = a1 ^ 0x80000000;
      else
        v17 = a1 - 1;
      *v16 = v17;
    }
  }
  return result;
}

void sub_1874899A4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1874899AC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1874899BC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void sub_1874899C8()
{
  type metadata accessor for ItemBoundNavigationDestinationModifier();
}

void sub_1874899FC(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemBoundNavigationDestinationModifier<A, B>, a1);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for BaseModifier();
}

uint64_t sub_187489A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t FunctionTypeMetadata1;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[14];

  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  type metadata accessor for UpdateViewDestinationRequestProcessor(255, FunctionTypeMetadata1, v0, v1);
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v8[0] = &protocol witness table for BaseModifier<A, B>;
  v8[1] = &protocol witness table for UpdateViewDestinationRequestProcessor<A, B>;
  v7[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v2);
  v7[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], v4, v8);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

_UNKNOWN **base witness table accessor for ViewModifier in BaseModifier<A, B>()
{
  return &protocol witness table for BaseModifier<A, B>;
}

uint64_t static BaseModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  _QWORD v33[13];
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t *);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;

  v38 = a5;
  v49 = a3;
  v50 = a4;
  v48 = a9;
  v12 = *a1;
  v13 = *a2;
  v39 = *((_DWORD *)a2 + 2);
  v14 = a2[2];
  v40 = a2[3];
  v41 = a2[4];
  v15 = a2[5];
  v16 = a2[6];
  v17 = *((_DWORD *)a2 + 15);
  v42 = *((_DWORD *)a2 + 14);
  v43 = v17;
  v18 = *((_DWORD *)a2 + 17);
  v44 = *((_DWORD *)a2 + 16);
  v45 = v18;
  v19 = *((_DWORD *)a2 + 19);
  v20 = *((_DWORD *)a2 + 20);
  v46 = *((_DWORD *)a2 + 18);
  v47 = v19;
  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v53 == 1)
  {
    v36 = v12;
    v37 = a6;
    v34 = a7;
    v35 = v20;
    lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    v33[11] = v15;
    swift_bridgeObjectRelease();
    v33[10] = v14;
    swift_release();
    swift_release();
    v33[12] = v16;
    v21 = v38;
    v53 = 0;
    v54 = 0xE000000000000000;
    _StringGuts.grow(_:)(429);
    v22._object = (void *)0x8000000187BE14A0;
    v22._countAndFlagsBits = 0x1000000000000181;
    String.append(_:)(v22);
    type metadata accessor for Optional();
    swift_getMetatypeMetadata();
    v51 = String.init<A>(describing:)();
    v52 = v23;
    v24._countAndFlagsBits = String.init<A>(_:)();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 0xD00000000000002ALL;
    v25._object = (void *)0x8000000187BE1630;
    String.append(_:)(v25);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    v26 = swift_bridgeObjectRelease();
    v33[8] = v33;
    MEMORY[0x1E0C80A78](v26, v27);
    LODWORD(v51) = v36;
    v53 = v21;
    v54 = v37;
    v55 = v34;
    v56 = a8;
    type metadata accessor for BaseModifier();
  }
  _StringGuts.grow(_:)(207);
  v28._countAndFlagsBits = 0xD0000000000000B7;
  v28._object = (void *)0x8000000187BE13E0;
  String.append(_:)(v28);
  type metadata accessor for Optional();
  swift_getMetatypeMetadata();
  v29._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._object = (void *)0x8000000187BD57C0;
  v30._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v30);
  MEMORY[0x18D75AC90](0, 0xE000000000000000);
  v31 = swift_bridgeObjectRelease();
  v53 = v13;
  v54 = v39 | 0xE000000000000000;
  v55 = v14;
  v56 = v40;
  v57 = v41;
  v58 = v15;
  v59 = v16;
  v60 = v42;
  v61 = v43;
  v62 = v44;
  v63 = v45;
  v64 = v46;
  v65 = v47;
  v66 = v20;
  return v49(v31, &v53);
}

void closure #1 in static BaseModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for BaseModifier();
}

uint64_t sub_18748A458(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  v5[2] = a1;
  type metadata accessor for Optional();
  v6 = type metadata accessor for Binding();
  v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, v6, MEMORY[0x1E0DEDCE8], v2, MEMORY[0x1E0DEDD18], v3);
  return v7;
}

void closure #2 in static BaseModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for BaseModifier();
}

void sub_18748A51C()
{
  type metadata accessor for BaseModifier.Transform();
}

uint64_t sub_18748A540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[18];

  v6[3] = a1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, a1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v6[6];
}

void closure #3 in static BaseModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for BaseModifier();
}

uint64_t sub_18748A5D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[14];

  v2 = v1 + *(int *)(a1 + 56);
  v7[2] = a1;
  v3 = MEMORY[0x1E0CE7DD0];
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v3, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7[4];
}

uint64_t BaseModifier.Child.item.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  type metadata accessor for Optional();
  v2 = type metadata accessor for Binding();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t BaseModifier.Child.stackKey.getter()
{
  uint64_t result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = AGGraphGetWeakValue();
  if (result)
    return *(_QWORD *)result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = AGGraphGetWeakValue();
  if (result)
    return *(_QWORD *)result;
  return result;
}

__int128 *BaseModifier.Child.listKey.getter@<X0>(_OWORD *a1@<X8>)
{
  __int128 *result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = (__int128 *)AGGraphGetWeakValue();
  if (result)
  {
    v3 = *result;
    v4 = result[1];
    v5 = result[2];
  }
  else
  {
    v5 = xmmword_187BF9F90;
    v3 = 0uLL;
    v4 = 0uLL;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

{
  __int128 *result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = (__int128 *)AGGraphGetWeakValue();
  if (result)
  {
    v3 = *result;
    v4 = result[1];
    v5 = result[2];
  }
  else
  {
    v5 = xmmword_187BF9F90;
    v3 = 0uLL;
    v4 = 0uLL;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

double BaseModifier.Child.authority.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t WeakValue;
  double result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of TableRowList?(WeakValue, a1, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = xmmword_187BF9F90;
    *(_QWORD *)(a1 + 16) = 0;
  }
  return result;
}

{
  uint64_t WeakValue;
  double result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = xmmword_187BF9F90;
    *(_QWORD *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t BaseModifier.Child.requestKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v12[3];
  _BYTE v13[40];
  uint64_t v14;
  _BYTE v15[48];
  _QWORD v16[2];
  __int128 v17;
  unsigned __int8 v18;
  uint64_t v19;

  BaseModifier.Child.listKey.getter(v12);
  v2 = BaseModifier.Child.stackKey.getter();
  v4 = v3;
  v6 = v5;
  result = outlined init with take of NavigationState.ListKey??((uint64_t)v12, (uint64_t)v13);
  if (v14 == 2
    || (outlined init with take of Image.Resolved?((uint64_t)v13, (uint64_t)v15, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey), result = outlined init with take of Image.Resolved?((uint64_t)v15, (uint64_t)v16, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey), v8 = v19, v19 == 1))
  {
    if ((v4 & 0xFE) == 6)
    {
      v2 = 0;
      v9 = 0;
      v8 = 0;
      v10 = 0uLL;
      v11 = 0x1FFFFFFFELL;
    }
    else
    {
      v11 = 0;
      v8 = 0;
      v9 = v4;
      v10 = v6;
    }
  }
  else
  {
    v2 = v16[0];
    v9 = v16[1];
    v10 = v17;
    v11 = v18 | 0x4000000000000000;
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v9;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v8;
  return result;
}

void BaseModifier.Child.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Optional();
  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  specialized BaseModifier.Child.transform.getter();
}

void sub_18748A9A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  BaseModifier.Child.item.getter(v3);
  AGGraphGetValue();
  AGGraphGetValue();
  BaseModifier.Child.requestKey.getter(v4 - 128);
  BaseModifier.Child.authority.getter(v4 - 184);
  outlined init with copy of TableRowList?(v4 - 184, v4 - 208, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority??, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationAuthority??);
  if (*(_QWORD *)(v4 - 200) == 2)
  {
    *(_OWORD *)(v4 - 160) = xmmword_187BF9840;
    *(_QWORD *)(v4 - 144) = 0;
  }
  else
  {
    outlined init with take of Image.Resolved?(v4 - 208, v4 - 160, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  }
  swift_retain();
  outlined destroy of TableRowList?(v4 - 184, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority??, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD))type metadata accessor for NavigationAuthority??);
  AGGraphGetWeakValue();
  BaseModifier.Presenter.init(transform:item:depth:id:key:authority:navigationStateSeeds:)(a1, a2, v2);
}

void BaseModifier.Presenter.init(transform:item:depth:id:key:authority:navigationStateSeeds:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for BaseModifier.Presenter();
}

uint64_t sub_18748AB7C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v9 = v2 + a1[13];
  type metadata accessor for Optional();
  v10 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v7, v10);
  *(_QWORD *)(v2 + a1[14]) = v6;
  *(_QWORD *)(v2 + a1[15]) = v5;
  outlined init with take of Image.Resolved?(v4, v2 + a1[16], &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  result = outlined init with take of Image.Resolved?(v3, v2 + a1[17], &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  *(_QWORD *)(v2 + a1[18]) = v1;
  return result;
}

void protocol witness for static Rule.initialValue.getter in conformance BaseModifier<A, B>.Child()
{
  type metadata accessor for BaseModifier.Presenter();
}

uint64_t sub_18748AC58(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

void protocol witness for Rule.value.getter in conformance BaseModifier<A, B>.Child()
{
  BaseModifier.Child.value.getter();
}

uint64_t BaseModifier.Presenter.authorityIsPresenting.getter(int *a1)
{
  uint64_t v1;
  uint64_t Strong;
  Swift::UInt *v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt v7;
  Swift::UInt v8;
  Swift::UInt v9;
  uint64_t v10;
  Swift::UInt v11;
  unsigned __int8 v12;
  Swift::UInt v13;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  char v28[24];
  uint64_t v29;
  _BYTE v30[152];
  char v31[8];
  uint64_t v32;
  _BYTE v33[32];

  outlined init with copy of TableRowList?(v1 + a1[17], (uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v32 != 1)
  {
    outlined init with take of NavigationAuthority((uint64_t)v31, (uint64_t)v33);
    v4 = (Swift::UInt *)(v1 + a1[16]);
    v5 = v4[4];
    if (v5 >> 1 == 0xFFFFFFFF)
    {
      outlined destroy of NavigationAuthority((uint64_t)v33);
      return 0;
    }
    v6 = *v4;
    v7 = v4[1];
    v9 = v4[2];
    v8 = v4[3];
    v10 = *(_QWORD *)(v1 + a1[15]);
    Strong = swift_weakLoadStrong();
    if (!Strong)
    {
LABEL_12:
      outlined destroy of NavigationAuthority((uint64_t)v33);
      return Strong;
    }
    swift_beginAccess();
    outlined init with take of Image.Resolved?(Strong + 16, (uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of Image.Resolved?((uint64_t)v30, (uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v31) == 1)
    {
LABEL_11:
      Strong = 0;
      goto LABEL_12;
    }
    v11 = v5 >> 62;
    v12 = v7;
    v13 = v9;
    if ((_DWORD)v11 && ((_DWORD)v11 != 1 || (v6 = v7, v12 = v9, v13 = v8, v9 == 6))
      || (v27 = v11,
          outlined init with take of Image.Resolved?((uint64_t)v30, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), v15 = v29, !*(_QWORD *)(v29 + 16))|| (v16 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v12, v13), (v17 & 1) == 0))
    {
LABEL_10:
      outlined retain of NavigationState?((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
      goto LABEL_11;
    }
    v18 = (_QWORD *)(*(_QWORD *)(v15 + 56) + 304 * v16);
    v19 = v18[14];
    v20 = v18[18];
    if ((v18[21] & 0x8000000000000000) != 0)
    {
      if ((v19 & 0x8000000000000000) == 0
        || ((v19 & 0xF000000000000007) != 0xF000000000000007 ? (v26 = v20 == v10) : (v26 = 0), !v26))
      {
LABEL_32:
        if (!v27 || v27 == 1 && (LOBYTE(v7) = v9, v9 != 6))
          __asm { BR              X9 }
        goto LABEL_10;
      }
    }
    else
    {
      v21 = v18[22];
      if ((v19 & 0x8000000000000000) == 0
        || ((v19 & 0xF000000000000007) != 0xF000000000000007 ? (v22 = v20 == v10) : (v22 = 0), !v22))
      {
        v23 = *(_QWORD *)(v21 + 16);
        if (v23)
        {
          v24 = (uint64_t *)(v21 + 64);
          while (1)
          {
            v25 = *v24;
            v24 += 7;
            if (v25 == v10)
              goto LABEL_36;
            if (!--v23)
              goto LABEL_32;
          }
        }
        goto LABEL_32;
      }
    }
LABEL_36:
    outlined retain of NavigationState?((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
    Strong = 1;
    goto LABEL_12;
  }
  outlined destroy of TableRowList?((uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  return 0;
}

uint64_t BaseModifier.Presenter.request.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  void (**v2)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, char *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  char *v41;
  void (**v42)(char *);
  void (**v43)(char *);
  int *v44;
  uint64_t v45;
  uint64_t result;
  _OWORD *v47;
  int *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  void (**v69)(char *);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (**v75)(_QWORD);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  _BYTE v91[24];
  _BYTE v92[144];

  v66 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Optional();
  v60 = type metadata accessor for Binding();
  v62 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v6);
  v59 = (char *)&v57 - v7;
  v8 = *(_QWORD *)(a1 + 24);
  MEMORY[0x1E0C80A78](v9, v10);
  v68 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = *(char **)(v4 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v67 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v16);
  v18 = (char *)&v57 - v17;
  v19 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v57 - v22;
  v71 = v4;
  v72 = v8;
  v61 = v8;
  v24 = *(_QWORD *)(a1 + 40);
  v58 = *(_QWORD *)(a1 + 32);
  v73 = v58;
  v74 = v24;
  v75 = v2;
  static Update.dispatchImmediately<A>(_:)();
  v63 = (int *)a1;
  v69 = (void (**)(char *))v2;
  v25 = BaseModifier.Presenter.authorityIsPresenting.getter((int *)a1);
  v26 = *(int *)(TupleTypeMetadata2 + 48);
  v27 = v70;
  v28 = *(void (**)(char *, char *))(v19 + 16);
  v29 = v5;
  v30 = v4;
  v64 = v29;
  v65 = v19;
  v28(v18, v23);
  v18[v26] = v25 & 1;
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v27 + 6))(v18, 1, v4) == 1)
  {
    if ((v25 & 1) != 0)
    {
      v70 = v23;
      v31 = v63[15];
      v32 = (uint64_t *)((char *)v69 + v63[16]);
      v34 = *v32;
      v33 = v32[1];
      v35 = v32[3];
      v68 = v32[2];
      v36 = v32[4];
      v37 = v32[5];
      v38 = *(uint64_t *)((char *)v69 + v31);
      outlined init with copy of TableRowList?((uint64_t)v69 + v63[17], (uint64_t)v91, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      v39 = v66;
      *v66 = xmmword_187BF9840;
      *((_QWORD *)v39 + 2) = 0;
      if (v36 >> 1 == 0xFFFFFFFF)
      {
        _s7SwiftUI17NavigationRequestVSgWOi0_((uint64_t)&v76);
      }
      else
      {
        swift_retain();
        v55 = v35;
        v56 = Transaction.disablesAnimations.getter();
        swift_release();
        v76 = 0;
        v77 = 0;
        v78 = 1;
        v79 = v38;
        v80 = 0u;
        v81 = 0u;
        v82 = 19;
        v83 = v34;
        v84 = v33;
        v85 = v68;
        v86 = v55;
        v87 = v36;
        v88 = v37;
        v89 = v56 & 1;
        v90 = 0;
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v76);
      }
      outlined init with take of Image.Resolved?((uint64_t)&v76, (uint64_t)v92, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      outlined init with take of Image.Resolved?((uint64_t)v92, (uint64_t)v39 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      outlined assign with take of NavigationAuthority?((uint64_t)v91, (uint64_t)v39);
      return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v70, v64);
    }
    else
    {
      result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v23, v64);
      v47 = v66;
      v66[6] = 0u;
      v47[7] = 0u;
      v47[4] = 0u;
      v47[5] = 0u;
      v47[2] = 0u;
      v47[3] = 0u;
      *v47 = 0u;
      v47[1] = 0u;
      *((_QWORD *)v47 + 16) = 0x1FFFFFFFCLL;
      *((_QWORD *)v47 + 17) = 0;
      *((_QWORD *)v47 + 18) = 0;
      *((_QWORD *)v47 + 19) = 0;
    }
  }
  else
  {
    v40 = v62;
    v57 = v24;
    v41 = v67;
    (*((void (**)(char *, char *, uint64_t))v27 + 4))(v67, v18, v30);
    v42 = v69;
    (*v69)(v41);
    v43 = v42;
    if ((v25 & 1) != 0)
    {
      v44 = v63;
      outlined init with take of Image.Resolved?((uint64_t)v42 + v63[16], (uint64_t)v92, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
      v45 = *(uint64_t *)((char *)v42 + v44[15]);
      v76 = 0;
      v77 = 0;
      v78 = 1;
      v79 = v45;
      outlined init with copy of TableRowList?((uint64_t)v42 + v44[17], (uint64_t)v91, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      UpdateViewDestinationRequest.init<A>(updateDestination:key:identifier:shouldTargetSourceColumn:navigationAuthority:)(v68, (uint64_t)v92, &v76, 1, (uint64_t)v91, v61, v57, (uint64_t)v66);
      (*((void (**)(char *, uint64_t))v27 + 1))(v67, v30);
    }
    else
    {
      v48 = v63;
      v49 = (uint64_t *)((char *)v42 + v63[13]);
      v50 = (uint64_t)v59;
      (*(void (**)(char *, uint64_t *, uint64_t))(v40 + 16))(v59, v49, v60);
      outlined init with take of Image.Resolved?((uint64_t)v42 + v48[16], (uint64_t)v92, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
      v51 = *(uint64_t *)((char *)v42 + v48[14]);
      v52 = v27;
      v53 = *(uint64_t *)((char *)v43 + v48[15]);
      outlined init with copy of TableRowList?((uint64_t)v43 + v48[17], (uint64_t)&v76, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      v54 = *v49;
      swift_retain();
      UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:id:navigationAuthority:transaction:)(v68, v50, (uint64_t)v92, v51, v53, (uint64_t)&v76, v54, v30, (uint64_t)v66, v61, v58, v57);
      (*((void (**)(char *, uint64_t))v52 + 1))(v67, v30);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v23, v64);
  }
  return result;
}

void closure #1 in BaseModifier.Presenter.request.getter()
{
  type metadata accessor for BaseModifier.Presenter();
}

uint64_t sub_18748B560()
{
  uint64_t v0;

  type metadata accessor for Optional();
  v0 = type metadata accessor for Binding();
  return MEMORY[0x18D75B9C8](v0);
}

uint64_t UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:id:navigationAuthority:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _OWORD v32[8];
  uint64_t v33;
  _OWORD v34[8];
  uint64_t v35;
  _QWORD v36[6];
  _BYTE v37[32];
  unint64_t v38;
  _QWORD v39[17];
  _BYTE v40[144];

  outlined init with take of Image.Resolved?(a3, (uint64_t)v36, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  v14 = v36[0];
  v15 = v36[1];
  v17 = v36[2];
  v16 = v36[3];
  v18 = v36[4];
  v24 = v36[5];
  *(_OWORD *)a9 = xmmword_187BF9840;
  *(_QWORD *)(a9 + 16) = 0;
  _s7SwiftUI17NavigationRequestVSgWOi0_((uint64_t)v40);
  outlined init with take of Image.Resolved?((uint64_t)v40, a9 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  outlined init with take of Image.Resolved?(a3, (uint64_t)v37, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  if (v38 >> 1 == 0xFFFFFFFF)
  {
    swift_release();
    outlined init with take of Image.Resolved?((uint64_t)v40, (uint64_t)v39, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    v20 = a10;
    v19 = a1;
    v21 = a2;
  }
  else
  {
    v39[0] = v14;
    v39[1] = v15;
    v39[2] = v17;
    v39[3] = v16;
    v39[4] = v18;
    v39[5] = v24;
    v19 = a1;
    v21 = a2;
    v20 = a10;
    closure #1 in UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:id:navigationAuthority:transaction:)((uint64_t)v39, a1, a7, a4, a5, a2, a8, a10, (uint64_t)v32, a11, a12);
    swift_release();
    v34[6] = v32[6];
    v34[7] = v32[7];
    v35 = v33;
    v34[2] = v32[2];
    v34[3] = v32[3];
    v34[4] = v32[4];
    v34[5] = v32[5];
    v34[0] = v32[0];
    v34[1] = v32[1];
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v34);
    outlined init with take of Image.Resolved?((uint64_t)v34, (uint64_t)v39, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  }
  type metadata accessor for Optional();
  v22 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  outlined init with take of Image.Resolved?(a9 + 24, (uint64_t)v34, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  outlined release of NavigationRequest?((uint64_t)v34);
  outlined init with take of Image.Resolved?((uint64_t)v39, a9 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  return outlined assign with take of NavigationAuthority?(a6, a9);
}

uint64_t BaseModifier.Presenter.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t updated;
  uint64_t v16;
  _QWORD v18[2];
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2, v8);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  v11 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 32) = v11;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseModifier<A, B>.Presenter, a2);
  v12 = type metadata accessor for _ViewModifier_Content();
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v12);
  View.transformPreference<A>(_:_:)();
  swift_release();
  v19[0] = v20;
  v19[1] = v21;
  type metadata accessor for _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey>();
  v14 = type metadata accessor for ModifiedContent();
  updated = lazy protocol witness table accessor for type _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey> and conformance _PreferenceTransformModifier<A>();
  v18[0] = v13;
  v18[1] = updated;
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v14, v18);
  static ViewBuilder.buildExpression<A>(_:)(v19, v14, v16);
  swift_release();
  v20 = v22;
  v21 = v23;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v20, v14, a3);
  return swift_release();
}

void closure #1 in BaseModifier.Presenter.body(content:)()
{
  type metadata accessor for BaseModifier.Presenter();
}

uint64_t sub_18748B9DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD v4[13];

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 60));
  BaseModifier.Presenter.request.getter(a1, v4);
  return specialized Dictionary.subscript.setter((uint64_t)v4, v2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance BaseModifier<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static BaseModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BaseModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseModifier<A, B>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t closure #1 in UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:id:navigationAuthority:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[48];

  v28 = a8;
  v29 = a9;
  v31 = a3;
  v32 = a4;
  v30 = a2;
  v27 = a10;
  type metadata accessor for Optional();
  v15 = type metadata accessor for Binding();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v27 - v18;
  outlined init with take of NavigationRequest.KeyKind(a1, (uint64_t)v37);
  v33 = 0;
  v34 = 0;
  v35 = 1;
  v36 = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a6, v15);
  v20 = (*(unsigned __int8 *)(v16 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v21 = (char *)swift_allocObject();
  v22 = v27;
  v23 = v28;
  *((_QWORD *)v21 + 2) = a7;
  *((_QWORD *)v21 + 3) = v23;
  *((_QWORD *)v21 + 4) = v22;
  *((_QWORD *)v21 + 5) = a11;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v21[v20], v19, v15);
  static NavigationRequest.programmaticallyPresentView<A>(_:from:transaction:depth:identifier:dismiss:)(v30, (uint64_t)v37, v32, (uint64_t)partial apply for closure #1 in closure #1 in UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:id:navigationAuthority:transaction:), (uint64_t)v21, v23, v29, a11);
  swift_release();
  v24 = v34;
  v25 = v35;
  swift_release();
  return outlined consume of Text.LineStyle?(v24, v25);
}

uint64_t closure #1 in closure #1 in UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:id:navigationAuthority:transaction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 56))((char *)&v10 - v7, 1, 1, a2, v6);
  type metadata accessor for Binding();
  specialized Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
}

void partial apply for closure #1 in static BaseModifier._makeView(modifier:inputs:body:)()
{
  closure #1 in static BaseModifier._makeView(modifier:inputs:body:)();
}

void partial apply for closure #2 in static BaseModifier._makeView(modifier:inputs:body:)()
{
  closure #2 in static BaseModifier._makeView(modifier:inputs:body:)();
}

void type metadata accessor for BaseModifier.Transform()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for closure #3 in static BaseModifier._makeView(modifier:inputs:body:)()
{
  closure #3 in static BaseModifier._makeView(modifier:inputs:body:)();
}

void type metadata accessor for BaseModifier.Presenter()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for BaseModifier.Child()
{
  JUMPOUT(0x18D75FF28);
}

__n128 __swift_memcpy48_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t type metadata completion function for BaseModifier.Presenter()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Optional();
  result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for BaseModifier.Presenter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;

  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (a1 + (v6 | 7) + 16) & ~(v6 | 7);
  swift_release();
  swift_release();
  v8 = (v6 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4);
  if (!(_DWORD)result)
    result = (*(uint64_t (**)(unint64_t, uint64_t))(v5 + 8))(v8, v4);
  v10 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64) + v7;
  if (!*(_DWORD *)(v5 + 84))
    ++v10;
  v11 = *(_QWORD *)(((((((((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 55) & 0xFFFFFFFFFFFFFFF8)
                  + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  if ((int)v11 - 1 < 0)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

_QWORD *initializeWithCopy for BaseModifier.Presenter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  const void *v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _OWORD *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  _QWORD *v33;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 16;
  v33 = a1;
  v9 = ((unint64_t)a1 + v8) & ~(v7 | 7);
  v10 = ((unint64_t)a2 + v8) & ~(v7 | 7);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  v11 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (void *)(((unint64_t)v11 + v7 + 8) & ~v7);
  v14 = (const void *)(((unint64_t)v12 + v7 + 8) & ~v7);
  v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v15(v14, 1, v5))
  {
    v16 = *(_DWORD *)(v6 + 84);
    v17 = *(_QWORD *)(v6 + 64);
    if (v16)
      v18 = *(_QWORD *)(v6 + 64);
    else
      v18 = v17 + 1;
    memcpy(v13, v14, v18);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v13, v14, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v5);
    v16 = *(_DWORD *)(v6 + 84);
    v17 = *(_QWORD *)(v6 + 64);
  }
  v19 = v17 + ((v7 + 16) & ~v7);
  if (!v16)
    ++v19;
  v20 = (_QWORD *)(((v9 | 7) + v19) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((v10 | 7) + v19) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (__int128 *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  v26 = *v25;
  v27 = v25[2];
  v24[1] = v25[1];
  v24[2] = v27;
  *v24 = v26;
  v28 = ((unint64_t)v24 + 55) & 0xFFFFFFFFFFFFFFF8;
  v29 = ((unint64_t)v25 + 55) & 0xFFFFFFFFFFFFFFF8;
  v30 = *(_QWORD *)(v29 + 8);
  if (v30 >= 0xFFFFFFFF)
    LODWORD(v30) = -1;
  if ((int)v30 - 1 < 0)
  {
    swift_weakCopyInit();
    *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
    *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v31 = *(_OWORD *)v29;
    *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
    *(_OWORD *)v28 = v31;
  }
  *(_QWORD *)((v28 + 27) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v29 + 27) & 0xFFFFFFFFFFFFF8);
  return v33;
}

_QWORD *assignWithCopy for BaseModifier.Presenter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _OWORD *v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  __int128 v35;
  _DWORD *v36;
  _DWORD *v37;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + 16;
  v11 = ((unint64_t)a1 + v10) & ~(v9 | 7);
  v12 = ((unint64_t)a2 + v10) & ~(v9 | 7);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_retain();
  swift_release();
  v13 = (_QWORD *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)((v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  swift_retain();
  swift_release();
  v15 = (void *)(((unint64_t)v13 + v9 + 8) & ~v9);
  v16 = (void *)(((unint64_t)v14 + v9 + 8) & ~v9);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v13) = v17(v15, 1, v7);
  v18 = v17(v16, 1, v7);
  if ((_DWORD)v13)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v15, v16, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v15, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v15, v16, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v15, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v19 = *(_QWORD *)(v8 + 64);
  else
    v19 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v15, v16, v19);
LABEL_10:
  v20 = *(_QWORD *)(v8 + 64) + ((v9 + 16) & ~v9);
  if (!*(_DWORD *)(v8 + 84))
    ++v20;
  v21 = (v11 | 7) + v20;
  v22 = (_QWORD *)(((v12 | 7) + v20) & 0xFFFFFFFFFFFFFFF8);
  v21 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v21 = *v22;
  v23 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)((v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v23;
  v25 = (_OWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  v26 = (__int128 *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  v27 = *v26;
  v28 = v26[2];
  v25[1] = v26[1];
  v25[2] = v28;
  *v25 = v27;
  v29 = ((unint64_t)v25 + 55) & 0xFFFFFFFFFFFFFFF8;
  v30 = ((unint64_t)v26 + 55) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(_QWORD *)(v29 + 8);
  if (v31 >= 0xFFFFFFFF)
    LODWORD(v31) = -1;
  v32 = v31 - 1;
  v33 = *(_QWORD *)(v30 + 8);
  if (v33 >= 0xFFFFFFFF)
    LODWORD(v33) = -1;
  v34 = v33 - 1;
  if (v32 < 0)
  {
    if (v34 < 0)
    {
      swift_weakCopyAssign();
      *(_QWORD *)(v29 + 8) = *(_QWORD *)(v30 + 8);
      swift_retain();
      swift_release();
      *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_21;
  }
  if ((v34 & 0x80000000) == 0)
  {
LABEL_21:
    v35 = *(_OWORD *)v30;
    *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
    *(_OWORD *)v29 = v35;
    goto LABEL_22;
  }
  swift_weakCopyInit();
  *(_QWORD *)(v29 + 8) = *(_QWORD *)(v30 + 8);
  *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
  swift_retain();
  swift_retain();
LABEL_22:
  v36 = (_DWORD *)((v29 + 27) & 0xFFFFFFFFFFFFFFF8);
  v37 = (_DWORD *)((v30 + 27) & 0xFFFFFFFFFFFFFFF8);
  *v36 = *v37;
  v36[1] = v37[1];
  return a1;
}

_OWORD *initializeWithTake for BaseModifier.Presenter(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  __int128 v29;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 16;
  v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = (_QWORD *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (void *)(((unint64_t)v10 + v6 + 8) & ~v6);
  v13 = (const void *)(((unint64_t)v11 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4))
  {
    v14 = *(_DWORD *)(v5 + 84);
    v15 = *(_QWORD *)(v5 + 64);
    if (v14)
      v16 = v15;
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v12, v13, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
    v14 = *(_DWORD *)(v5 + 84);
    v15 = *(_QWORD *)(v5 + 64);
  }
  v17 = v15 + ((v6 + 16) & ~v6);
  if (!v14)
    ++v17;
  v18 = (_QWORD *)(((v8 | 7) + v17) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((v9 | 7) + v17) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = (__int128 *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = *v23;
  v25 = v23[2];
  v22[1] = v23[1];
  v22[2] = v25;
  *v22 = v24;
  v26 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)v23 + 55) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)(v27 + 8);
  if (*(_QWORD *)(v27 + 8) >= 0xFFFFFFFFuLL)
    v28 = -1;
  if (v28 - 1 < 0)
  {
    v26 = swift_weakTakeInit();
    *(_OWORD *)(v26 + 8) = *(_OWORD *)(v27 + 8);
  }
  else
  {
    v29 = *(_OWORD *)v27;
    *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
    *(_OWORD *)v26 = v29;
  }
  *(_QWORD *)((v26 + 27) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v27 + 27) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *assignWithTake for BaseModifier.Presenter(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _OWORD *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  __int128 v34;
  _DWORD *v35;
  _DWORD *v36;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 16;
  v10 = ((unint64_t)a1 + v9) & ~(v8 | 7);
  v11 = ((unint64_t)a2 + v9) & ~(v8 | 7);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  swift_release();
  v12 = (_QWORD *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  swift_release();
  v14 = (void *)(((unint64_t)v12 + v8 + 8) & ~v8);
  v15 = (void *)(((unint64_t)v13 + v8 + 8) & ~v8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v13) = v16(v14, 1, v6);
  v17 = v16(v15, 1, v6);
  if ((_DWORD)v13)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v14, v15, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v14, v15, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v14, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v18 = *(_QWORD *)(v7 + 64);
  else
    v18 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v14, v15, v18);
LABEL_10:
  v19 = *(_QWORD *)(v7 + 64) + ((v8 + 16) & ~v8);
  if (!*(_DWORD *)(v7 + 84))
    ++v19;
  v20 = (_QWORD *)(((v10 | 7) + v19) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((v11 | 7) + v19) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (__int128 *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  v26 = *v25;
  v27 = v25[2];
  v24[1] = v25[1];
  v24[2] = v27;
  *v24 = v26;
  v28 = ((unint64_t)v24 + 55) & 0xFFFFFFFFFFFFFFF8;
  v29 = ((unint64_t)v25 + 55) & 0xFFFFFFFFFFFFFFF8;
  v30 = *(_QWORD *)(v28 + 8);
  if (*(_QWORD *)(v28 + 8) >= 0xFFFFFFFFuLL)
    v30 = -1;
  v31 = v30 - 1;
  v32 = *(_QWORD *)(v29 + 8);
  if (v32 >= 0xFFFFFFFF)
    LODWORD(v32) = -1;
  v33 = v32 - 1;
  if (v31 < 0)
  {
    if (v33 < 0)
    {
      swift_weakTakeAssign();
      *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
      swift_release();
      *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
      swift_release();
      goto LABEL_22;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_21;
  }
  if ((v33 & 0x80000000) == 0)
  {
LABEL_21:
    v34 = *(_OWORD *)v29;
    *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
    *(_OWORD *)v28 = v34;
    goto LABEL_22;
  }
  swift_weakTakeInit();
  *(_OWORD *)(v28 + 8) = *(_OWORD *)(v29 + 8);
LABEL_22:
  v35 = (_DWORD *)((v28 + 27) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_DWORD *)((v29 + 27) & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v36;
  v35[1] = v36[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for BaseModifier.Presenter(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v6 >= 0)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  if (v5)
    v9 = 7;
  else
    v9 = 8;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = v10 | 7;
  if (v8 < a2)
  {
    if (((((((((((((v9 + *(_QWORD *)(v4 + 64) + ((v10 + 16) & ~v10) + ((v10 + 16) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 55) & 0xFFFFFFFFFFFFFFF8)
           + 27) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v12 = 2;
    else
      v12 = a2 - v8 + 1;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    __asm { BR              X16 }
  }
  if (v8 == 0x7FFFFFFF)
  {
    v16 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v16) = -1;
    return (v16 + 1);
  }
  else
  {
    v17 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v10
                                                                 + (((((unint64_t)a1 + v11 + 16) & ~v11) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                 + 8) & ~v10);
    if (v17 >= 2)
      return v17 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for BaseModifier.Presenter(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  if (v9 >= 0)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  v12 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v12;
  if (v11 < a3)
  {
    v13 = a3 - v11;
    if ((((((((((((_DWORD)v12
                 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(*(unsigned __int8 *)(v7 + 80) | 7))
                 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80))
                 + 7) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 55) & 0xFFFFFFF8)
         + 27) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v14 = v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v6 = v15;
    else
      v6 = 0;
  }
  if (a2 > v11)
  {
    if ((((((((((((_DWORD)v12
                 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(*(unsigned __int8 *)(v7 + 80) | 7))
                 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80))
                 + 7) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 55) & 0xFFFFFFF8)
         + 27) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v16 = ~v11 + a2;
      bzero(a1, ((((((((((v12+ ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(*(unsigned __int8 *)(v7 + 80) | 7))+ ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 55) & 0xFFFFFFFFFFFFFFF8)+ 27) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

uint64_t sub_18748CB7C@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t result;

  *((_BYTE *)v17 + v18) = 0;
  if (a1)
  {
    if (v14 == 0x7FFFFFFF)
    {
      if ((a1 & 0x80000000) != 0)
      {
        v19 = a1 ^ 0x80000000;
        v17[1] = 0;
      }
      else
      {
        v19 = a1 - 1;
      }
      *v17 = v19;
    }
    else
    {
      v20 = (void *)((v13 + (((((unint64_t)v17 + v15 + 16) & v16) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v10);
      if (v11 >= a1)
      {
        return (*(uint64_t (**)(void *, _QWORD))(v12 + 56))(v20, a1 + 1);
      }
      else if ((_DWORD)a2)
      {
        if (a2 <= 3)
          v21 = a2;
        else
          v21 = 4;
        bzero(v20, a2);
        __asm { BR              X10 }
      }
    }
  }
  return result;
}

void sub_18748CC8C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_18748CC9C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_18748CCA4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in BaseModifier<A, B>.Presenter()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

void base witness table accessor for _AttributeBody in BaseModifier<A, B>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

void specialized BaseModifier.Child.transform.getter()
{
  type metadata accessor for BaseModifier.Transform();
}

uint64_t sub_18748CCF4()
{
  return *(_QWORD *)AGGraphGetValue();
}

void type metadata accessor for NavigationAuthority??(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v5 = type metadata accessor for Optional();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_18748CD7C()
{
  type metadata accessor for BaseModifier.Presenter();
}

uint64_t sub_18748CDB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v4 = v1 + ((v3 + 48) & ~v3);
  swift_release();
  v5 = v4 + *(int *)(a1 + 52);
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  v6 = v5 + *(int *)(type metadata accessor for Binding() + 32);
  v7 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v7 + 48))(v6, 1))
    (*(void (**)(uint64_t))(v7 + 8))(v6);
  if (*(_QWORD *)(v4 + *(int *)(a1 + 68) + 8) != 1)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
  }
  return swift_deallocObject();
}

void partial apply for closure #1 in BaseModifier.Presenter.body(content:)()
{
  type metadata accessor for BaseModifier.Presenter();
}

void sub_18748CED8()
{
  closure #1 in BaseModifier.Presenter.body(content:)();
}

void type metadata accessor for _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey>)
  {
    v0 = type metadata accessor for _PreferenceTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

void partial apply for closure #1 in BaseModifier.Presenter.request.getter()
{
  closure #1 in BaseModifier.Presenter.request.getter();
}

uint64_t sub_18748CFCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  type metadata accessor for Optional();
  v2 = type metadata accessor for Binding();
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  swift_release();
  swift_release();
  v4 = v0 + ((v3 + 48) & ~v3) + *(int *)(v2 + 32);
  v5 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:id:navigationAuthority:transaction:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  type metadata accessor for Optional();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Binding() - 8) + 80);
  return closure #1 in closure #1 in UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:id:navigationAuthority:transaction:)(v0 + ((v2 + 48) & ~v2), v1);
}

void sub_18748D0F0()
{
  type metadata accessor for BaseModifier.Presenter();
}

uint64_t sub_18748D114(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[10];

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseModifier<A, B>.Presenter, a1);
  v1 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
  v4[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t protocol witness for LayoutGesture.responder.getter in conformance HitTestingLayoutGesture()
{
  return swift_retain();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance HitTestingLayoutGesture()
{
  lazy protocol witness table accessor for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture();
  return static LayoutGesture._makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance HitTestingLayoutGesture()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t View.hitTestingLayoutGesture()(uint64_t a1, uint64_t a2)
{
  return View.layoutGesture<A>(_:)((uint64_t)closure #1 in View.hitTestingLayoutGesture(), 0, a1, (uint64_t)&unk_1E1AE1610, a2, (uint64_t)&protocol witness table for HitTestingLayoutGesture);
}

uint64_t closure #1 in View.hitTestingLayoutGesture()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_18748D29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 8);
  type metadata accessor for LayoutGestureModifier<HitTestingLayoutGesture>(255, a2, a3, a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for LayoutGestureModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

void type metadata accessor for LayoutGestureModifier<HitTestingLayoutGesture>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LayoutGestureModifier<HitTestingLayoutGesture>)
  {
    v4 = type metadata accessor for LayoutGestureModifier(0, (uint64_t)&unk_1E1AE1610, (uint64_t)&protocol witness table for HitTestingLayoutGesture, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LayoutGestureModifier<HitTestingLayoutGesture>);
  }
}

void *type metadata accessor for HitTestingLayoutGesture()
{
  return &unk_1E1AE1610;
}

_UNKNOWN **base witness table accessor for Gesture in HitTestingLayoutGesture()
{
  return &protocol witness table for HitTestingLayoutGesture;
}

unint64_t lazy protocol witness table accessor for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture;
  if (!lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HitTestingLayoutGesture, &unk_1E1AE1610);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture;
  if (!lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HitTestingLayoutGesture, &unk_1E1AE1610);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture;
  if (!lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HitTestingLayoutGesture, &unk_1E1AE1610);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture);
  }
  return result;
}

uint64_t specialized HitTestingLayoutGesture.updateEventBindings(_:proxy:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::UInt v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Bool v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  _OWORD v52[13];
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  int v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int v95;
  _BYTE v96[40];
  _QWORD v97[2];
  __int128 v98[3];

  v2 = *a2;
  v3 = *a1;
  v48 = *a1 + 64;
  v4 = 1 << *(_BYTE *)(*a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(*a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v43 = v7 - 1;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v49 = v2;
  v50 = v7;
  v44 = v3 + 104;
  v45 = v7 - 5;
  v46 = v3;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            if (v6)
            {
              v10 = __clz(__rbit64(v6));
              v6 &= v6 - 1;
              v11 = v10 | (v9 << 6);
LABEL_9:
              v12 = *(_QWORD *)(v3 + 56);
              v13 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
              v15 = *v13;
              v14 = v13[1];
              *(_QWORD *)&v82 = v15;
              *((_QWORD *)&v82 + 1) = v14;
              outlined init with copy of TableColumnList(v12 + 40 * v11, (uint64_t)&v83);
              goto LABEL_16;
            }
            v16 = v9 + 1;
            if (__OFADD__(v9, 1))
              goto LABEL_58;
            if (v16 >= v50)
            {
              v18 = v9;
            }
            else
            {
              v17 = *(_QWORD *)(v48 + 8 * v16);
              if (v17)
                goto LABEL_13;
              v18 = v9 + 1;
              if ((uint64_t)(v9 + 2) < v50)
              {
                v17 = *(_QWORD *)(v48 + 8 * (v9 + 2));
                if (v17)
                {
                  v16 = v9 + 2;
LABEL_13:
                  v6 = (v17 - 1) & v17;
                  v11 = __clz(__rbit64(v17)) + (v16 << 6);
                  v9 = v16;
                  goto LABEL_9;
                }
                v18 = v9 + 2;
                if ((uint64_t)(v9 + 3) < v50)
                {
                  v17 = *(_QWORD *)(v48 + 8 * (v9 + 3));
                  if (v17)
                  {
                    v16 = v9 + 3;
                    goto LABEL_13;
                  }
                  v16 = v9 + 4;
                  v18 = v9 + 3;
                  if ((uint64_t)(v9 + 4) < v50)
                  {
                    v17 = *(_QWORD *)(v48 + 8 * v16);
                    if (v17)
                      goto LABEL_13;
                    while (v45 != v9)
                    {
                      v17 = *(_QWORD *)(v44 + 8 * v9++);
                      if (v17)
                      {
                        v16 = v9 + 4;
                        goto LABEL_13;
                      }
                    }
                    v18 = v43;
                  }
                }
              }
            }
            v6 = 0;
            *(_QWORD *)&v85 = 0;
            v83 = 0u;
            v84 = 0u;
            v9 = v18;
            v82 = 0u;
LABEL_16:
            outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v82, (uint64_t)v97);
            v19 = v97[0];
            if (!v97[0])
              return swift_release();
            v20 = v97[1];
            outlined init with take of OptionalBinaryInteger(v98, (uint64_t)v96);
            v21 = *a1;
            if (!*(_QWORD *)(*a1 + 16)
              || (v22 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20), (v23 & 1) == 0))
            {
              *(_QWORD *)&v84 = 0;
              v82 = 0u;
              v83 = 0u;
LABEL_5:
              outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v82, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType);
              goto LABEL_6;
            }
            outlined init with copy of TableColumnList(*(_QWORD *)(v21 + 56) + 40 * v22, (uint64_t)&v82);
            v24 = *((_QWORD *)&v83 + 1);
            if (!*((_QWORD *)&v83 + 1))
              goto LABEL_5;
            v25 = v84;
            __swift_project_boxed_opaque_existential_1(&v82, *((uint64_t *)&v83 + 1));
            v26 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v25 + 24);
            v27 = v25;
            v28 = v49;
            v26(&v68, v24, v27);
            v29 = v68;
            outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v82, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType);
            if (v29)
              break;
LABEL_6:
            result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
          }
          v47 = v9;
          outlined init with copy of TableColumnList((uint64_t)v96, (uint64_t)&v82);
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
          type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for HitTestableEventType);
          if ((swift_dynamicCast() & 1) != 0)
            break;
          *(_QWORD *)&v56 = 0;
          v54 = 0u;
          v55 = 0u;
          outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for HitTestableEventType?, &lazy cache variable for type metadata for HitTestableEventType);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
          result = swift_release();
        }
        outlined init with take of OptionalBinaryInteger(&v54, (uint64_t)&v68);
        outlined init with copy of TableColumnList((uint64_t)&v68, (uint64_t)&v54);
        HitTestableEvent.init(_:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
        HitTestableEvent.hitTestLocation.getter();
        v31 = v30;
        v33 = v32;
        *(_QWORD *)&v82 = v49;
        result = LayoutGestureChildProxy.endIndex.getter();
        if (result < 0)
          goto LABEL_59;
        if (result)
          break;
LABEL_32:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
        swift_release();
        result = swift_release();
        v3 = v46;
      }
      v34 = 0;
      v35 = result - 1;
      while (1)
      {
        *(_QWORD *)&v54 = v49;
        LayoutGestureChildProxy.subscript.getter();
        v92 = v78;
        v93 = v79;
        v94 = v80;
        v95 = v81;
        v88 = v74;
        v89 = v75;
        v90 = v76;
        v91 = v77;
        v84 = v70;
        v85 = v71;
        v86 = v72;
        v87 = v73;
        v82 = v68;
        v83 = v69;
        *(_QWORD *)&v54 = v29;
        if ((LayoutGestureChildProxy.Child.binds(_:)() & 1) != 0)
          break;
        outlined release of LayoutGestureChildProxy.Child((uint64_t)&v82);
        if (v35 == v34)
          goto LABEL_32;
        ++v34;
      }
      v78 = v92;
      v79 = v93;
      v80 = v94;
      v81 = v95;
      v74 = v88;
      v75 = v89;
      v76 = v90;
      v77 = v91;
      v70 = v84;
      v71 = v85;
      v72 = v86;
      v73 = v87;
      v68 = v82;
      v69 = v83;
      if (!LayoutGestureChildProxy.Child.containsGlobalLocation(_:)((CGPoint)__PAIR128__(v33, v31)))
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
      swift_release();
      swift_release();
      result = outlined release of LayoutGestureChildProxy.Child((uint64_t)&v82);
      v3 = v46;
    }
    *(_QWORD *)&v68 = v49;
    result = LayoutGestureChildProxy.endIndex.getter();
    if (result < 0)
      goto LABEL_60;
    v36 = result;
    if (result)
      break;
LABEL_54:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
    swift_release();
    swift_release();
    result = outlined release of LayoutGestureChildProxy.Child((uint64_t)&v82);
LABEL_48:
    v3 = v46;
    v9 = v47;
  }
  v37 = result - 1;
  while (v36 >= v37 + 1)
  {
    if (v34 != v37)
    {
      *(_QWORD *)&v52[0] = v28;
      LayoutGestureChildProxy.subscript.getter();
      v78 = v64;
      v79 = v65;
      v80 = v66;
      v74 = v60;
      v75 = v61;
      v76 = v62;
      v77 = v63;
      v70 = v56;
      v71 = v57;
      v72 = v58;
      v73 = v59;
      v68 = v54;
      v69 = v55;
      v52[10] = v64;
      v52[11] = v65;
      v52[12] = v66;
      v52[6] = v60;
      v52[7] = v61;
      v52[8] = v62;
      v52[9] = v63;
      v52[2] = v56;
      v52[3] = v57;
      v52[4] = v58;
      v52[5] = v59;
      v81 = v67;
      v53 = v67;
      v52[0] = v54;
      v52[1] = v55;
      v38 = LayoutGestureChildProxy.Child.containsGlobalLocation(_:)((CGPoint)__PAIR128__(v33, v31));
      result = outlined release of LayoutGestureChildProxy.Child((uint64_t)&v68);
      if (v38)
      {
        *(_QWORD *)&v52[0] = v19;
        *((_QWORD *)&v52[0] + 1) = v20;
        result = LayoutGestureChildProxy.bindChild(index:event:id:)();
        v39 = v54;
        if ((_QWORD)v54 != 1)
        {
          v40 = *((_QWORD *)&v54 + 1);
          outlined init with copy of TableColumnList((uint64_t)v96, (uint64_t)&v54);
          swift_retain();
          v41 = *((_QWORD *)&v55 + 1);
          v42 = v56;
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v54, *((uint64_t *)&v55 + 1));
          *(_QWORD *)&v52[0] = v40;
          (*(void (**)(_OWORD *, uint64_t, uint64_t))(v42 + 32))(v52, v41, v42);
          outlined init with copy of TableColumnList((uint64_t)&v54, (uint64_t)v52);
          specialized Dictionary.subscript.setter((uint64_t)v52, v19, v20);
          swift_release();
          outlined release of LayoutGestureChildProxy.Child((uint64_t)&v82);
          outlined consume of EnvironmentValues?(v39);
          swift_release();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
          result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
          goto LABEL_48;
        }
        v28 = v49;
      }
    }
    if (--v37 == -1)
      goto LABEL_54;
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

void type metadata accessor for (key: EventID, value: EventType)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: EventID, value: EventType)?)
  {
    type metadata accessor for (key: EventID, value: EventType)();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: EventID, value: EventType)?);
  }
}

uint64_t outlined release of LayoutGestureChildProxy.Child(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(void **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 80);
  v11 = *(_OWORD *)(a1 + 128);
  v12 = *(_OWORD *)(a1 + 112);
  v9 = *(_OWORD *)(a1 + 160);
  v10 = *(_OWORD *)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_QWORD *)(a1 + 184);
  v7 = *(_BYTE *)(a1 + 192);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  outlined consume of LayoutGestureBox.Child.DebugData?(v18, v17, v16, v15, v14, v3, v4, v13, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v9, *((uint64_t *)&v9 + 1), v5, v6, v7);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of LayoutGestureBox.Child.DebugData?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, unsigned __int8 a19)
{
  if (a19 != 255)
    return outlined consume of LayoutGestureBox.Child.DebugData(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19 & 1);
  return result;
}

uint64_t outlined consume of LayoutGestureBox.Child.DebugData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  uint64_t result;

  if ((a19 & 1) == 0)
  {
    outlined consume of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of ArrayWith2Inline<(String, String)>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  if (a9 == 2)
    return swift_release();
  if (a9 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (a9)
      return result;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t View.appEntityIdentifier(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  if (a2)
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = a1;
    *(_QWORD *)(v4 + 24) = a2;
    v5 = v4 | 0x3000000000000000;
  }
  else
  {
    v5 = 0xF000000000000007;
  }
  swift_bridgeObjectRetain();
  View.scrapeableAttachment(_:)();
  return outlined consume of ScrapeableContent.Content?(v5);
}

uint64_t outlined consume of ScrapeableContent.Content?(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_release();
  return result;
}

uint64_t sub_18748DEE8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t View.appIntentIdentifier(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  if (a2)
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = a1;
    *(_QWORD *)(v4 + 24) = a2;
    v5 = v4 | 0x4000000000000000;
  }
  else
  {
    v5 = 0xF000000000000007;
  }
  swift_bridgeObjectRetain();
  View.scrapeableAttachment(_:)();
  return outlined consume of ScrapeableContent.Content?(v5);
}

uint64_t View.appIntentIntelligenceProvider<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];
  uint64_t v10;

  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  v9[5] = a5;
  v9[6] = a6;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.appIntentIntelligenceProvider<A>(_:), (uint64_t)v9, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE3F58], v6, (uint64_t)&v10);
  v7 = v10;
  v9[7] = v10;
  View.scrapeableAttachment(_:)();
  return outlined consume of ScrapeableContent.Content?(v7);
}

uint64_t partial apply for closure #1 in View.appIntentIntelligenceProvider<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;

  v5 = *(_QWORD *)(v2 + 24);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 40) = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 + 16));
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_1, a1, v5);
  *a2 = v6 | 0x6000000000000000;
  return result;
}

uint64_t sub_18748E0D0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18748E104()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18748E13C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t VisualEffect.contrast(_:)()
{
  return VisualEffect.rendererEffect<A>(_:)();
}

uint64_t sub_18748E19C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for PlatformUnaryViewResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PlatformUnaryViewResponder;
  if (!type metadata singleton initialization cache for PlatformUnaryViewResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PlatformUnaryViewResponder()
{
  return swift_initClassMetadata2();
}

uint64_t PlatformUnaryViewResponder.bindEvent(_:)()
{
  uint64_t v0;

  swift_retain();
  v0 = dispatch thunk of ResponderNode.bindEvent(_:)();
  swift_release();
  return v0;
}

uint64_t PlatformUnaryViewResponder.makeGesture(inputs:)()
{
  swift_retain();
  dispatch thunk of ResponderNode.makeGesture(inputs:)();
  return swift_release();
}

Swift::Void __swiftcall PlatformUnaryViewResponder.resetGesture()()
{
  swift_retain();
  dispatch thunk of ResponderNode.resetGesture()();
  swift_release();
}

uint64_t PlatformUnaryViewResponder.child(at:)(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return swift_retain();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *PlatformUnaryViewResponder.visit(applying:)@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t)@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  char v5;
  char v6;
  uint64_t v7;

  result = a1(&v7, v2);
  v5 = v7;
  if (!(_BYTE)v7)
  {
    swift_retain();
    MultiViewResponder.visit(applying:)();
    result = (_QWORD *)swift_release();
    v5 = v6;
  }
  *a2 = v5;
  return result;
}

void PlatformUnaryViewResponder.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t PlatformUnaryViewResponder.__ivar_destroyer()
{
  return swift_release();
}

uint64_t PlatformUnaryViewResponder.deinit()
{
  uint64_t v0;

  outlined destroy of weak FallbackResponderProvider?(v0 + 16);
  swift_weakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of PlatformViewResponderBase.PlatformHitTestResult?(v0 + 152);
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t PlatformUnaryViewResponder.__deallocating_deinit()
{
  PlatformUnaryViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PlatformUnaryViewResponder()
{
  return type metadata accessor for PlatformUnaryViewResponder();
}

uint64_t outlined destroy of PlatformViewResponderBase.PlatformHitTestResult?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for PlatformViewResponderBase.PlatformHitTestResult?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewResponderBase.PlatformHitTestResult?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PlatformViewResponderBase.PlatformHitTestResult?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewResponderBase.PlatformHitTestResult?);
  }
}

void protocol witness for ToolbarContent.body.getter in conformance <> ForEach<A, B, C>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance <> ForEach<A, B, C>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static ToolbarContent._makeContent(content:inputs:resolved:)(a1, a2, a3, a4, a5);
}

uint64_t specialized static ToolbarContent._makeContent(content:inputs:resolved:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;

  v5 = MEMORY[0x1E0DEDCE8];
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Never>);
  v6 = _GraphValue.value.getter();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Focus<Never, Never>, v5, v5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CFECD8]);
  lazy protocol witness table accessor for type Focus<EmptyToolbarContent, Never> and conformance Focus<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Focus<Never, Never> and conformance Focus<A, B>, (unint64_t *)&lazy cache variable for type metadata for Focus<Never, Never>, v5);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  return specialized static ToolbarContent._makeContent(content:inputs:resolved:)(v6, a2, a3);
}

uint64_t static ToolbarContent._makeContent(content:inputs:resolved:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  int v21;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *a2;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v19 = a2[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  LODWORD(v28) = v8;
  type metadata accessor for _GraphValue();
  v13 = a2[3];
  v14 = a2[4];
  v26 = a4;
  v27 = a5;
  LODWORD(v28) = _GraphValue.value.getter();
  KeyPath = swift_getKeyPath();
  v23 = AssociatedTypeWitness;
  v24 = type metadata accessor for Focus();
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE8], v24);
  v15 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v28, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v22, v24, MEMORY[0x1E0DEDCE8], v15, MEMORY[0x1E0DEDD18], v16);
  swift_release();
  swift_release();
  _GraphValue.init(_:)();
  v28 = v9;
  LODWORD(KeyPath) = v10;
  v30 = v11;
  v31 = v13;
  v32 = v14;
  v33 = v19;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(&v21, &v28, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance LimitedAvailabilityToolbarContent(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  unsigned int v5;
  _OWORD v7[3];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = a2[1];
  v7[0] = *a2;
  v7[1] = v4;
  v7[2] = a2[2];
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityToolbarContent>);
  v5 = _GraphValue.value.getter();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for Focus<LimitedAvailabilityToolbarContent, Never>, (uint64_t)&type metadata for LimitedAvailabilityToolbarContent, MEMORY[0x1E0DEDCE8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CFECD8]);
  lazy protocol witness table accessor for type Focus<EmptyToolbarContent, Never> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<LimitedAvailabilityToolbarContent, Never> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<LimitedAvailabilityToolbarContent, Never>, (uint64_t)&type metadata for LimitedAvailabilityToolbarContent);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  return specialized static ToolbarContent._makeContent(content:inputs:resolved:)(v5, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance SearchToolbarItem(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  unsigned int v5;
  _OWORD v7[3];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = a2[1];
  v7[0] = *a2;
  v7[1] = v4;
  v7[2] = a2[2];
  type metadata accessor for _GraphValue<SearchToolbarItem>();
  v5 = _GraphValue.value.getter();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for Focus<SearchToolbarItem, Never>();
  lazy protocol witness table accessor for type Focus<SearchToolbarItem, Never> and conformance Focus<A, B>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  return specialized static ToolbarContent._makeContent(content:inputs:resolved:)(v5, (uint64_t)v7, a3);
}

uint64_t specialized static ToolbarContent._makeToolbar(content:inputs:)@<X0>(__int128 *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[3];

  static DynamicPropertyCache.fields(of:)();
  v4 = v20;
  v5 = v21;
  v6 = a1[3];
  v18 = a1[2];
  v19[0] = v6;
  *(_OWORD *)((char *)v19 + 12) = *(__int128 *)((char *)a1 + 60);
  v7 = a1[1];
  v16 = *a1;
  v17 = v7;
  outlined retain of _ViewInputs((uint64_t)a1);
  v13 = DWORD1(v21);
  specialized static ToolbarContent.makeBody(toolbar:inputs:fields:)();
  v8 = v21;
  v21 = v17;
  v22 = v18;
  v23[0] = v19[0];
  *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)((char *)v19 + 12);
  v20 = v16;
  outlined retain of _ViewInputs((uint64_t)&v20);
  specialized static ToolbarContent._makeToolbar(content:inputs:)(&v14, v14, &v20);
  outlined release of _ViewInputs((uint64_t)&v20);
  v9 = v14;
  v10 = DWORD2(v14);
  v11 = v15;
  if ((v8 & 1) == 0)
  {
    v14 = v4;
    LOBYTE(v15) = v5;
    HIDWORD(v15) = v13;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _ViewInputs((uint64_t)&v20);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a2 = v9;
  *(_DWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v11;
  return result;
}

uint64_t static ToolbarContent._makeToolbar(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  int v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  _BYTE v45[4];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;

  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v12 = a2[5];
  v11 = a2[6];
  v33 = *((_DWORD *)a2 + 14);
  v13 = a2[8];
  v14 = *((_DWORD *)a2 + 18);
  static DynamicPropertyCache.fields(of:)();
  v15 = v50;
  v16 = v51;
  v17 = v52;
  v18 = HIDWORD(v52);
  v50 = v8;
  LODWORD(v51) = v9;
  v53 = *(_OWORD *)(a2 + 3);
  v52 = v10;
  v54 = v12;
  v55 = v11;
  v56 = v33;
  v57 = v13;
  v58 = v14;
  v26 = v18;
  v27 = v7;
  v49 = v7;
  v31 = v15;
  v36 = v15;
  v37 = v16;
  v34 = v16;
  v32 = v17;
  LOBYTE(v38) = v17;
  HIDWORD(v38) = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ToolbarContent.makeBody(toolbar:inputs:fields:)((uint64_t)v45, (uint64_t)&v46, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v36, a3, a4);
  v19 = v47;
  v30 = v46;
  LOBYTE(v9) = v48;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = v50;
  LODWORD(v37) = v51;
  v38 = v52;
  v39 = v53;
  v40 = v54;
  v41 = v55;
  v42 = v56;
  v43 = v57;
  v44 = v58;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v46, v45, &v36, AssociatedTypeWitness, AssociatedConformanceWitness);
  v22 = v46;
  v23 = v47;
  v24 = v48;
  if ((v9 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    v46 = v30;
    v47 = v19;
    v49 = v27;
    v36 = v31;
    v37 = v34;
    v29 = v48;
    LOBYTE(v38) = v32;
    HIDWORD(v38) = v26;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v24 = v29;
  }
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a5 = v22;
  *(_DWORD *)(a5 + 8) = v23;
  *(_QWORD *)(a5 + 16) = v24;
  return result;
}

uint64_t sub_18748EFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 24))(*(_QWORD *)(a3 + a2 - 16));
}

uint64_t sub_18748F02C()
{
  return 16;
}

__n128 sub_18748F038(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t specialized static ToolbarContent.makeBody(toolbar:inputs:fields:)()
{
  uint64_t result;
  Swift::String v1;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = 0x726576654ELL;
    v1._object = (void *)0xE500000000000000;
    String.append(_:)(v1);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ToolbarContentBodyAccessory<Never>, MEMORY[0x1E0DEDCE8], (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarContentBodyAccessory);
    lazy protocol witness table accessor for type ToolbarContentBodyAccessory<Never> and conformance ToolbarContentBodyAccessory<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  return result;
}

uint64_t static ToolbarContent.makeBody(toolbar:inputs:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::String v12;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v10 = type metadata accessor for ToolbarContentBodyAccessory(0, a6, a7, v9);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarContentBodyAccessory<A>, v10);
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  return result;
}

uint64_t ToolbarContentBodyAccessory.updateBody(of:changed:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, a2);
    v4 = type metadata accessor for ToolbarContentBodyAccessory(0, v2, v3, v3);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarContentBodyAccessory<A>, v4);
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ToolbarContentBodyAccessory<A>(uint64_t result, uint64_t a2)
{
  return ToolbarContentBodyAccessory.updateBody(of:changed:)(result, a2);
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance Never@<X0>(__int128 *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v5[3];
  _OWORD v6[2];

  v2 = a1[3];
  v5[2] = a1[2];
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 12) = *(__int128 *)((char *)a1 + 60);
  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  return specialized static ToolbarContent._makeToolbar(content:inputs:)(v5, a2);
}

uint64_t protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance Never(unsigned int *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  _OWORD v6[3];

  v3 = *a1;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v6[2] = a2[2];
  return specialized static ToolbarContent._makeContent(content:inputs:resolved:)(v3, (uint64_t)v6, a3);
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance EmptyToolbarContent@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;

  v3 = *(_QWORD *)(a1 + 64);
  result = PreferencesOutputs.init()();
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance EmptyToolbarContent(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  unsigned int v5;
  _OWORD v7[3];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = a2[1];
  v7[0] = *a2;
  v7[1] = v4;
  v7[2] = a2[2];
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<EmptyToolbarContent>);
  v5 = _GraphValue.value.getter();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for Focus<EmptyToolbarContent, Never>, (uint64_t)&type metadata for EmptyToolbarContent, MEMORY[0x1E0DEDCE8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CFECD8]);
  lazy protocol witness table accessor for type Focus<EmptyToolbarContent, Never> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EmptyToolbarContent, Never> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<EmptyToolbarContent, Never>, (uint64_t)&type metadata for EmptyToolbarContent);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  return specialized static ToolbarContent._makeContent(content:inputs:resolved:)(v5, (uint64_t)v7, a3);
}

uint64_t static ToolbarContentBuilder.buildBlock<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = MEMORY[0x1E0C80A78](a1, a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  return TupleToolbarContent.init(_:)((uint64_t)v7, a2, a3);
}

uint64_t static ToolbarContentBuilder.buildEither<A, B>(first:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v6 = type metadata accessor for _ConditionalContent.Storage();
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)&v12 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 16))((char *)&v12 - v9, a1, a2, v8);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent.init(__storage:)((uint64_t)v10, a3);
}

uint64_t static ToolbarContentBuilder.buildEither<A, B>(second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v6 = type metadata accessor for _ConditionalContent.Storage();
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)&v12 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 16))((char *)&v12 - v9, a1, a2, v8);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent.init(__storage:)((uint64_t)v10, a3);
}

uint64_t TypeConformance<>.visitType<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(a3 + 8))(*v3, *v3, v3[1], a2);
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance ToolbarContentDescriptor()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance ToolbarContentDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  static ToolbarContentDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance ToolbarContentDescriptor())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

void protocol witness for ToolbarContent.body.getter in conformance <A> Group<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for ToolbarContent.body.getter in conformance <> _ConditionalContent<A, B>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for ToolbarContent.body.getter in conformance <A> A?()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_UNKNOWN **associated type witness table accessor for ToolbarContent.Body : ToolbarContent in Never()
{
  return &protocol witness table for Never;
}

_UNKNOWN **associated type witness table accessor for ToolbarContent.Body : CustomizableToolbarContent in Never()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of ToolbarContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static ToolbarContent._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of static ToolbarContent._makeContent(content:inputs:resolved:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t initializeWithCopy for _ToolbarInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ToolbarInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for _ToolbarInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ToolbarInputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 76))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ToolbarInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 76) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 76) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ToolbarInputs()
{
  return &type metadata for _ToolbarInputs;
}

uint64_t initializeBufferWithCopyOfBuffer for _ToolbarOutputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ToolbarOutputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for _ToolbarOutputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for _ToolbarOutputs()
{
  return &type metadata for _ToolbarOutputs;
}

uint64_t destroy for _ToolbarItemList()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ToolbarItemList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ToolbarItemList(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for _ToolbarItemList(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t storeEnumTagSinglePayload for _ToolbarItemList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ToolbarItemList()
{
  return &type metadata for _ToolbarItemList;
}

ValueMetadata *type metadata accessor for ToolbarContentBuilder()
{
  return &type metadata for ToolbarContentBuilder;
}

_UNKNOWN **sub_1874900CC()
{
  return &protocol witness table for TupleToolbarContent<A>;
}

_UNKNOWN **sub_1874900D8()
{
  return &protocol witness table for TupleToolbarContent<A>;
}

ValueMetadata *type metadata accessor for EmptyToolbarContent()
{
  return &type metadata for EmptyToolbarContent;
}

ValueMetadata *type metadata accessor for ToolbarContentDescriptor()
{
  return &type metadata for ToolbarContentDescriptor;
}

unint64_t lazy protocol witness table accessor for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor;
  if (!lazy protocol witness table cache variable for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarContentDescriptor, &type metadata for ToolbarContentDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor;
  if (!lazy protocol witness table cache variable for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarContentDescriptor, &type metadata for ToolbarContentDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Focus<EmptyToolbarContent, Never> and conformance Focus<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, a3, MEMORY[0x1E0DEDCE8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CFECD8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE0], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ToolbarContentBodyAccessory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarContentBodyAccessory);
}

unint64_t lazy protocol witness table accessor for type ToolbarContentBodyAccessory<Never> and conformance ToolbarContentBodyAccessory<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ToolbarContentBodyAccessory<Never> and conformance ToolbarContentBodyAccessory<A>;
  if (!lazy protocol witness table cache variable for type ToolbarContentBodyAccessory<Never> and conformance ToolbarContentBodyAccessory<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ToolbarContentBodyAccessory<Never>, MEMORY[0x1E0DEDCE8], (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarContentBodyAccessory);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarContentBodyAccessory<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarContentBodyAccessory<Never> and conformance ToolbarContentBodyAccessory<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in ToolbarContentBodyAccessory.updateBody(of:changed:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 24) + 24))(*(_QWORD *)(v0 + 16));
}

void type metadata accessor for _GraphValue<SearchToolbarItem>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<SearchToolbarItem>)
  {
    type metadata accessor for SearchToolbarItem();
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<SearchToolbarItem>);
  }
}

void type metadata accessor for Focus<SearchToolbarItem, Never>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Focus<SearchToolbarItem, Never>)
  {
    type metadata accessor for SearchToolbarItem();
    v0 = type metadata accessor for Focus();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<SearchToolbarItem, Never>);
  }
}

unint64_t lazy protocol witness table accessor for type Focus<SearchToolbarItem, Never> and conformance Focus<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Focus<SearchToolbarItem, Never> and conformance Focus<A, B>;
  if (!lazy protocol witness table cache variable for type Focus<SearchToolbarItem, Never> and conformance Focus<A, B>)
  {
    type metadata accessor for Focus<SearchToolbarItem, Never>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Focus<SearchToolbarItem, Never> and conformance Focus<A, B>);
  }
  return result;
}

uint64_t VisualEffect.grayscale(_:)()
{
  return VisualEffect.rendererEffect<A>(_:)();
}

uint64_t sub_18749036C()
{
  return swift_getOpaqueTypeConformance2();
}

double protocol witness for static _ViewTraitKey.defaultValue.getter in conformance FormRowInsetsTraitKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 2;
  return result;
}

void View.formRowInsets(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View.formRowBackground<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v7[9];
  uint64_t v8;

  v7[2] = a2;
  v7[3] = a3;
  v7[4] = a4;
  v7[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in View.gaugeIndicatorDotTint<A>(_:), (uint64_t)v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE1D58], v5, (uint64_t)&v8);
  v7[7] = v8;
  View._trait<A>(_:_:)();
  return swift_release();
}

uint64_t View.formRowIndentationLevel(_:)(uint64_t a1, char a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_BYTE *)(v4 + 24) = a2 & 1;
  View.transformTrait<A>(_:transform:)();
  return swift_release();
}

uint64_t sub_18749053C()
{
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in View.formRowIndentationLevel(_:)(_QWORD *result)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 24) & 1) == 0)
    *result = *(_QWORD *)(v1 + 16);
  return result;
}

uint64_t FormRowAccessoryRevealState.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC7SwiftUI27FormRowAccessoryRevealState__isHovered;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  v3 = v2;
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v4(v1, v2);
  v4(v0 + OBJC_IVAR____TtC7SwiftUI27FormRowAccessoryRevealState__isFocused, v3);
  return swift_deallocClassInstance();
}

void View.formBackground<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.hasSeamlessTitlebarInset(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t protocol witness for ColorProvider.apply(color:to:) in conformance EmphasizedGroupBackgroundColorProvider()
{
  return ColorProvider._apply(color:to:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance EmphasizedGroupBackgroundColorProvider()
{
  return String.init<A>(describing:)();
}

uint64_t one-time initialization function for emphasizedGroupBackground()
{
  uint64_t result;

  lazy protocol witness table accessor for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider();
  result = Color.init<A>(provider:)();
  static Color.emphasizedGroupBackground = result;
  return result;
}

uint64_t static Color.emphasizedGroupBackground.getter()
{
  if (one-time initialization token for emphasizedGroupBackground != -1)
    swift_once();
  return swift_retain();
}

uint64_t ObjC metadata update function for FormRowAccessoryRevealState()
{
  return type metadata accessor for FormRowAccessoryRevealState();
}

uint64_t type metadata accessor for FormRowAccessoryRevealState()
{
  uint64_t result;

  result = type metadata singleton initialization cache for FormRowAccessoryRevealState;
  if (!type metadata singleton initialization cache for FormRowAccessoryRevealState)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for FormRowAccessoryRevealState()
{
  unint64_t v0;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(319, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for FormRowAccessoryRevealState.Wrapper()
{
  return objc_opt_self();
}

uint64_t sub_187490784(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowInsetsTraitKey>);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<FormRowInsetsTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<FormRowInsetsTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInsetsTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInsetsTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowInsetsTraitKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInsetsTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187490858(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowBackgroundTraitKey>);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<FormRowBackgroundTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<FormRowBackgroundTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowBackgroundTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowBackgroundTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowBackgroundTraitKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowBackgroundTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187490930()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187490978(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollContentBackground>, (uint64_t)&type metadata for ScrollContentBackground, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_1874909F0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

ValueMetadata *type metadata accessor for FormRowInsetsTraitKey()
{
  return &type metadata for FormRowInsetsTraitKey;
}

void *type metadata accessor for FormRowIndentationKey()
{
  return &unk_1E1AD7418;
}

ValueMetadata *type metadata accessor for FormRowBackgroundTraitKey()
{
  return &type metadata for FormRowBackgroundTraitKey;
}

unint64_t lazy protocol witness table accessor for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider;
  if (!lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmphasizedGroupBackgroundColorProvider, &type metadata for EmphasizedGroupBackgroundColorProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider;
  if (!lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmphasizedGroupBackgroundColorProvider, &type metadata for EmphasizedGroupBackgroundColorProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider;
  if (!lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmphasizedGroupBackgroundColorProvider, &type metadata for EmphasizedGroupBackgroundColorProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider);
  }
  return result;
}

ValueMetadata *type metadata accessor for EmphasizedGroupBackgroundColorProvider()
{
  return &type metadata for EmphasizedGroupBackgroundColorProvider;
}

ValueMetadata *type metadata accessor for FormRowInsetsTraitKey.Configuration()
{
  return &type metadata for FormRowInsetsTraitKey.Configuration;
}

uint64_t specialized EmphasizedGroupBackgroundColorProvider.resolve(in:)()
{
  EnvironmentValues.colorScheme.getter();
  EnvironmentValues.colorSchemeContrast.getter();
  return Color.Resolved.init(white:opacity:)();
}

id UIKitRelationshipGestureRecognizer.init(target:action:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  objc_class *ObjectType;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  objc_super v19;
  _QWORD v20[3];
  uint64_t v21;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  v7 = v3;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v8 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v7[OBJC_IVAR____TtC7SwiftUI34UIKitRelationshipGestureRecognizer_gesturesRequiringFailure] = v8;

  outlined init with copy of Any?(a1, (uint64_t)v20);
  v9 = v21;
  if (v21)
  {
    v10 = __swift_project_boxed_opaque_existential_1(v20, v21);
    v11 = *(_QWORD *)(v9 - 8);
    v12 = MEMORY[0x1E0C80A78](v10, v10);
    v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v11 + 16))(v14, v12);
    v15 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = 0;
  }
  v19.receiver = v7;
  v19.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v19, sel_initWithTarget_action_, v15, a2);
  swift_unknownObjectRelease();
  v17 = v16;
  objc_msgSend(v17, sel_setDelaysTouchesBegan_, 0);
  objc_msgSend(v17, sel_setDelaysTouchesEnded_, 0);

  outlined destroy of Any?(a1);
  return v17;
}

BOOL @objc UIKitRelationshipGestureRecognizer.canPrevent(_:)()
{
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return ObjectType != type metadata accessor for UIKitGestureRecognizer();
}

uint64_t type metadata accessor for UIKitRelationshipGestureRecognizer()
{
  return objc_opt_self();
}

uint64_t VisualEffect.hueRotation(_:)()
{
  return VisualEffect.rendererEffect<A>(_:)();
}

uint64_t sub_187490E74()
{
  return swift_getOpaqueTypeConformance2();
}

void __swiftcall HiddenTitleBarWindowStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void HiddenTitleBarWindowStyle.configureWindow(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for HiddenTitleBarWindowStyle()
{
  return &type metadata for HiddenTitleBarWindowStyle;
}

void Scene.windowBackground<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_187490EFC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 48);
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    result = outlined release of _ViewInputs(a2);
    if ((v4 & 0x80) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityPlatformItemTransform>, (uint64_t)&type metadata for AccessibilityPlatformItemTransform, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      _GraphValue.value.getter();
      swift_bridgeObjectRetain();
      PreferencesOutputs.subscript.getter();
      swift_bridgeObjectRelease();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PlatformItemsTransform<AccessibilityPlatformItemTransform>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform, (uint64_t)&type metadata for AccessibilityPlatformItemTransform, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
      lazy protocol witness table accessor for type PlatformItemsTransform<AccessibilityPlatformItemTransform> and conformance PlatformItemsTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      return PreferencesOutputs.subscript.setter();
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 48);
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    result = outlined release of _ViewInputs(a2);
    if ((v4 & 8) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<PlatformButtonActionTransform>, (uint64_t)&type metadata for PlatformButtonActionTransform, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      _GraphValue.value.getter();
      swift_bridgeObjectRetain();
      PreferencesOutputs.subscript.getter();
      swift_bridgeObjectRelease();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PlatformItemsTransform<PlatformButtonActionTransform>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform, (uint64_t)&type metadata for PlatformButtonActionTransform, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
      lazy protocol witness table accessor for type PlatformItemsTransform<PlatformButtonActionTransform> and conformance PlatformItemsTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      return PreferencesOutputs.subscript.setter();
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 48);
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    result = outlined release of _ViewInputs(a2);
    if ((v4 & 0x20) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<LabelIconPlatformItemModifier>, (uint64_t)&type metadata for LabelIconPlatformItemModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      _GraphValue.value.getter();
      swift_bridgeObjectRetain();
      PreferencesOutputs.subscript.getter();
      swift_bridgeObjectRelease();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PlatformItemsTransform<LabelIconPlatformItemModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier, (uint64_t)&type metadata for LabelIconPlatformItemModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
      lazy protocol witness table accessor for type PlatformItemsTransform<LabelIconPlatformItemModifier> and conformance PlatformItemsTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      return PreferencesOutputs.subscript.setter();
    }
  }
  return result;
}

{
  return specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)(a1, a2);
}

{
  uint64_t result;
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 48);
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    result = outlined release of _ViewInputs(a2);
    if ((v4 & 8) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<PlatformNewDocumentButtonTransform>, (uint64_t)&type metadata for PlatformNewDocumentButtonTransform, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      _GraphValue.value.getter();
      swift_bridgeObjectRetain();
      PreferencesOutputs.subscript.getter();
      swift_bridgeObjectRelease();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PlatformItemsTransform<PlatformNewDocumentButtonTransform>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform, (uint64_t)&type metadata for PlatformNewDocumentButtonTransform, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
      lazy protocol witness table accessor for type PlatformItemsTransform<PlatformNewDocumentButtonTransform> and conformance PlatformItemsTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      return PreferencesOutputs.subscript.setter();
    }
  }
  return result;
}

uint64_t protocol witness for AccessibilityViewModifier.initialAttachment(for:) in conformance AccessibilityTraitsModifier<A>.ChildModifier()
{
  return AccessibilityViewModifier.initialAttachment(for:)();
}

uint64_t protocol witness for static AccessibilityViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:) in conformance AccessibilityTraitsModifier<A>.ChildModifier(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OnChangeOfSuggestionsModifier(a1, a2, a3);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityTraitsModifier<A>.ChildModifier@<D0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;

  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTraitsModifier<A>.ChildModifier, a5);
  return static AccessibilityViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityLabelModifier<A>.ChildModifier@<D0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;

  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabelModifier<A>.ChildModifier, a5);
  return static AccessibilityViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(int a1, __int128 *a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  unint64_t v36;
  unsigned int v37;
  int v38;
  __int128 v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  __int128 v45;
  int v46;
  uint64_t v47;

  v5 = a4;
  v47 = *MEMORY[0x1E0C80C00];
  v9 = HIDWORD(a4);
  *(_QWORD *)&v42 = *((_QWORD *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  v36 = HIDWORD(a4);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    *(_QWORD *)&v42 = a3;
    *((_QWORD *)&v42 + 1) = __PAIR64__(v9, v5);
    v10 = _ViewOutputs.subscript.getter();
    v11 = *MEMORY[0x1E0CFED28];
    if ((v10 & 0x100000000) != 0)
      v12 = *MEMORY[0x1E0CFED28];
    else
      v12 = v10;
    v38 = v12;
  }
  else
  {
    v11 = *MEMORY[0x1E0CFED28];
    v38 = *MEMORY[0x1E0CFED28];
  }
  LODWORD(v42) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<AccessibilityPlatformViewModifier>, (uint64_t)&type metadata for AccessibilityPlatformViewModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v37 = _GraphValue.value.getter();
  v13 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v14 = a2[1];
  v42 = *a2;
  v43 = v14;
  v15 = _ViewInputs.position.getter();
  v16 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v17 = a2[1];
  v42 = *a2;
  v43 = v17;
  v18 = _ViewInputs.size.getter();
  v19 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v20 = a2[1];
  v42 = *a2;
  v43 = v20;
  v21 = _ViewInputs.transform.getter();
  v22 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v23 = a2[1];
  v42 = *a2;
  v43 = v23;
  v24 = _ViewInputs.environment.getter();
  v25 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v26 = a2[1];
  v42 = *a2;
  v43 = v26;
  v27 = _ViewInputs.viewPhase.getter();
  v28 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(_QWORD *)&v42 = a3;
  *((_QWORD *)&v42 + 1) = __PAIR64__(v36, v5);
  v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0)
    v30 = v11;
  else
    v30 = v29;
  v31 = a2[1];
  v42 = *a2;
  v43 = v31;
  v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(_QWORD *)&v42 = __PAIR64__(v15, v37);
  *((_QWORD *)&v42 + 1) = __PAIR64__(v21, v18);
  *(_QWORD *)&v43 = __PAIR64__(v27, v24);
  *((_QWORD *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(_QWORD *)&v45 = 0;
  swift_unknownObjectWeakInit();
  v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityPlatformViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier, (uint64_t)&type metadata for AccessibilityPlatformViewModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<AccessibilityPlatformViewModifier> and conformance PropertiesTransform<A>();
  v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityOpacityModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityPlatformViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier, (uint64_t)&type metadata for AccessibilityPlatformViewModifier);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  unint64_t v36;
  unsigned int v37;
  int v38;
  __int128 v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  __int128 v45;
  int v46;
  uint64_t v47;

  v5 = a4;
  v47 = *MEMORY[0x1E0C80C00];
  v9 = HIDWORD(a4);
  *(_QWORD *)&v42 = *((_QWORD *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  v36 = HIDWORD(a4);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    *(_QWORD *)&v42 = a3;
    *((_QWORD *)&v42 + 1) = __PAIR64__(v9, v5);
    v10 = _ViewOutputs.subscript.getter();
    v11 = *MEMORY[0x1E0CFED28];
    if ((v10 & 0x100000000) != 0)
      v12 = *MEMORY[0x1E0CFED28];
    else
      v12 = v10;
    v38 = v12;
  }
  else
  {
    v11 = *MEMORY[0x1E0CFED28];
    v38 = *MEMORY[0x1E0CFED28];
  }
  LODWORD(v42) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v37 = _GraphValue.value.getter();
  v13 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v14 = a2[1];
  v42 = *a2;
  v43 = v14;
  v15 = _ViewInputs.position.getter();
  v16 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v17 = a2[1];
  v42 = *a2;
  v43 = v17;
  v18 = _ViewInputs.size.getter();
  v19 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v20 = a2[1];
  v42 = *a2;
  v43 = v20;
  v21 = _ViewInputs.transform.getter();
  v22 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v23 = a2[1];
  v42 = *a2;
  v43 = v23;
  v24 = _ViewInputs.environment.getter();
  v25 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v26 = a2[1];
  v42 = *a2;
  v43 = v26;
  v27 = _ViewInputs.viewPhase.getter();
  v28 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(_QWORD *)&v42 = a3;
  *((_QWORD *)&v42 + 1) = __PAIR64__(v36, v5);
  v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0)
    v30 = v11;
  else
    v30 = v29;
  v31 = a2[1];
  v42 = *a2;
  v43 = v31;
  v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(_QWORD *)&v42 = __PAIR64__(v15, v37);
  *((_QWORD *)&v42 + 1) = __PAIR64__(v21, v18);
  *(_QWORD *)&v43 = __PAIR64__(v27, v24);
  *((_QWORD *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(_QWORD *)&v45 = 0;
  swift_unknownObjectWeakInit();
  v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityScrollableModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<AccessibilityScrollableModifier> and conformance PropertiesTransform<A>();
  v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityOpacityModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityScrollableModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier, (uint64_t)&type metadata for AccessibilityScrollableModifier);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  unint64_t v36;
  unsigned int v37;
  int v38;
  __int128 v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  __int128 v45;
  int v46;
  uint64_t v47;

  v5 = a4;
  v47 = *MEMORY[0x1E0C80C00];
  v9 = HIDWORD(a4);
  *(_QWORD *)&v42 = *((_QWORD *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  v36 = HIDWORD(a4);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    *(_QWORD *)&v42 = a3;
    *((_QWORD *)&v42 + 1) = __PAIR64__(v9, v5);
    v10 = _ViewOutputs.subscript.getter();
    v11 = *MEMORY[0x1E0CFED28];
    if ((v10 & 0x100000000) != 0)
      v12 = *MEMORY[0x1E0CFED28];
    else
      v12 = v10;
    v38 = v12;
  }
  else
  {
    v11 = *MEMORY[0x1E0CFED28];
    v38 = *MEMORY[0x1E0CFED28];
  }
  LODWORD(v42) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v37 = _GraphValue.value.getter();
  v13 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v14 = a2[1];
  v42 = *a2;
  v43 = v14;
  v15 = _ViewInputs.position.getter();
  v16 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v17 = a2[1];
  v42 = *a2;
  v43 = v17;
  v18 = _ViewInputs.size.getter();
  v19 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v20 = a2[1];
  v42 = *a2;
  v43 = v20;
  v21 = _ViewInputs.transform.getter();
  v22 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v23 = a2[1];
  v42 = *a2;
  v43 = v23;
  v24 = _ViewInputs.environment.getter();
  v25 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v26 = a2[1];
  v42 = *a2;
  v43 = v26;
  v27 = _ViewInputs.viewPhase.getter();
  v28 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(_QWORD *)&v42 = a3;
  *((_QWORD *)&v42 + 1) = __PAIR64__(v36, v5);
  v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0)
    v30 = v11;
  else
    v30 = v29;
  v31 = a2[1];
  v42 = *a2;
  v43 = v31;
  v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(_QWORD *)&v42 = __PAIR64__(v15, v37);
  *((_QWORD *)&v42 + 1) = __PAIR64__(v21, v18);
  *(_QWORD *)&v43 = __PAIR64__(v27, v24);
  *((_QWORD *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(_QWORD *)&v45 = 0;
  swift_unknownObjectWeakInit();
  v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<AccessibilityAttachmentModifier> and conformance PropertiesTransform<A>();
  v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityOpacityModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  unint64_t v36;
  unsigned int v37;
  int v38;
  __int128 v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  __int128 v45;
  int v46;
  uint64_t v47;

  v5 = a4;
  v47 = *MEMORY[0x1E0C80C00];
  v9 = HIDWORD(a4);
  *(_QWORD *)&v42 = *((_QWORD *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  v36 = HIDWORD(a4);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    *(_QWORD *)&v42 = a3;
    *((_QWORD *)&v42 + 1) = __PAIR64__(v9, v5);
    v10 = _ViewOutputs.subscript.getter();
    v11 = *MEMORY[0x1E0CFED28];
    if ((v10 & 0x100000000) != 0)
      v12 = *MEMORY[0x1E0CFED28];
    else
      v12 = v10;
    v38 = v12;
  }
  else
  {
    v11 = *MEMORY[0x1E0CFED28];
    v38 = *MEMORY[0x1E0CFED28];
  }
  LODWORD(v42) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ArchivedAttachmentModifier>, (uint64_t)&type metadata for ArchivedAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v37 = _GraphValue.value.getter();
  v13 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v14 = a2[1];
  v42 = *a2;
  v43 = v14;
  v15 = _ViewInputs.position.getter();
  v16 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v17 = a2[1];
  v42 = *a2;
  v43 = v17;
  v18 = _ViewInputs.size.getter();
  v19 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v20 = a2[1];
  v42 = *a2;
  v43 = v20;
  v21 = _ViewInputs.transform.getter();
  v22 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v23 = a2[1];
  v42 = *a2;
  v43 = v23;
  v24 = _ViewInputs.environment.getter();
  v25 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v26 = a2[1];
  v42 = *a2;
  v43 = v26;
  v27 = _ViewInputs.viewPhase.getter();
  v28 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(_QWORD *)&v42 = a3;
  *((_QWORD *)&v42 + 1) = __PAIR64__(v36, v5);
  v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0)
    v30 = v11;
  else
    v30 = v29;
  v31 = a2[1];
  v42 = *a2;
  v43 = v31;
  v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(_QWORD *)&v42 = __PAIR64__(v15, v37);
  *((_QWORD *)&v42 + 1) = __PAIR64__(v21, v18);
  *(_QWORD *)&v43 = __PAIR64__(v27, v24);
  *((_QWORD *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(_QWORD *)&v45 = 0;
  swift_unknownObjectWeakInit();
  v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PropertiesTransform<ArchivedAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier, (uint64_t)&type metadata for ArchivedAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<ArchivedAttachmentModifier> and conformance PropertiesTransform<A>();
  v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityOpacityModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<ArchivedAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier, (uint64_t)&type metadata for ArchivedAttachmentModifier);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  unint64_t v36;
  unsigned int v37;
  int v38;
  __int128 v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  __int128 v45;
  int v46;
  uint64_t v47;

  v5 = a4;
  v47 = *MEMORY[0x1E0C80C00];
  v9 = HIDWORD(a4);
  *(_QWORD *)&v42 = *((_QWORD *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  v36 = HIDWORD(a4);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    *(_QWORD *)&v42 = a3;
    *((_QWORD *)&v42 + 1) = __PAIR64__(v9, v5);
    v10 = _ViewOutputs.subscript.getter();
    v11 = *MEMORY[0x1E0CFED28];
    if ((v10 & 0x100000000) != 0)
      v12 = *MEMORY[0x1E0CFED28];
    else
      v12 = v10;
    v38 = v12;
  }
  else
  {
    v11 = *MEMORY[0x1E0CFED28];
    v38 = *MEMORY[0x1E0CFED28];
  }
  LODWORD(v42) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<AccessibilityGestureModifier>, (uint64_t)&type metadata for AccessibilityGestureModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v37 = _GraphValue.value.getter();
  v13 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v14 = a2[1];
  v42 = *a2;
  v43 = v14;
  v15 = _ViewInputs.position.getter();
  v16 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v17 = a2[1];
  v42 = *a2;
  v43 = v17;
  v18 = _ViewInputs.size.getter();
  v19 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v20 = a2[1];
  v42 = *a2;
  v43 = v20;
  v21 = _ViewInputs.transform.getter();
  v22 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v23 = a2[1];
  v42 = *a2;
  v43 = v23;
  v24 = _ViewInputs.environment.getter();
  v25 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v26 = a2[1];
  v42 = *a2;
  v43 = v26;
  v27 = _ViewInputs.viewPhase.getter();
  v28 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(_QWORD *)&v42 = a3;
  *((_QWORD *)&v42 + 1) = __PAIR64__(v36, v5);
  v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0)
    v30 = v11;
  else
    v30 = v29;
  v31 = a2[1];
  v42 = *a2;
  v43 = v31;
  v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(_QWORD *)&v42 = __PAIR64__(v15, v37);
  *((_QWORD *)&v42 + 1) = __PAIR64__(v21, v18);
  *(_QWORD *)&v43 = __PAIR64__(v27, v24);
  *((_QWORD *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(_QWORD *)&v45 = 0;
  swift_unknownObjectWeakInit();
  v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityGestureModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier, (uint64_t)&type metadata for AccessibilityGestureModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<AccessibilityGestureModifier> and conformance PropertiesTransform<A>();
  v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityOpacityModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityGestureModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier, (uint64_t)&type metadata for AccessibilityGestureModifier);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  unint64_t v36;
  unsigned int v37;
  int v38;
  __int128 v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  __int128 v45;
  int v46;
  uint64_t v47;

  v5 = a4;
  v47 = *MEMORY[0x1E0C80C00];
  v9 = HIDWORD(a4);
  *(_QWORD *)&v42 = *((_QWORD *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  v36 = HIDWORD(a4);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    *(_QWORD *)&v42 = a3;
    *((_QWORD *)&v42 + 1) = __PAIR64__(v9, v5);
    v10 = _ViewOutputs.subscript.getter();
    v11 = *MEMORY[0x1E0CFED28];
    if ((v10 & 0x100000000) != 0)
      v12 = *MEMORY[0x1E0CFED28];
    else
      v12 = v10;
    v38 = v12;
  }
  else
  {
    v11 = *MEMORY[0x1E0CFED28];
    v38 = *MEMORY[0x1E0CFED28];
  }
  LODWORD(v42) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityOpacityModifier>, (uint64_t)&type metadata for AccessibilityOpacityModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v37 = _GraphValue.value.getter();
  v13 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v14 = a2[1];
  v42 = *a2;
  v43 = v14;
  v15 = _ViewInputs.position.getter();
  v16 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v17 = a2[1];
  v42 = *a2;
  v43 = v17;
  v18 = _ViewInputs.size.getter();
  v19 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v20 = a2[1];
  v42 = *a2;
  v43 = v20;
  v21 = _ViewInputs.transform.getter();
  v22 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v23 = a2[1];
  v42 = *a2;
  v43 = v23;
  v24 = _ViewInputs.environment.getter();
  v25 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v26 = a2[1];
  v42 = *a2;
  v43 = v26;
  v27 = _ViewInputs.viewPhase.getter();
  v28 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(_QWORD *)&v42 = a3;
  *((_QWORD *)&v42 + 1) = __PAIR64__(v36, v5);
  v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0)
    v30 = v11;
  else
    v30 = v29;
  v31 = a2[1];
  v42 = *a2;
  v43 = v31;
  v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(_QWORD *)&v42 = __PAIR64__(v15, v37);
  *((_QWORD *)&v42 + 1) = __PAIR64__(v21, v18);
  *(_QWORD *)&v43 = __PAIR64__(v27, v24);
  *((_QWORD *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(_QWORD *)&v45 = 0;
  swift_unknownObjectWeakInit();
  v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier, (uint64_t)&type metadata for AccessibilityOpacityModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<AccessibilityOpacityModifier> and conformance PropertiesTransform<A>();
  v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityOpacityModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier, (uint64_t)&type metadata for AccessibilityOpacityModifier);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  unint64_t v36;
  unsigned int v37;
  int v38;
  __int128 v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  __int128 v45;
  int v46;
  uint64_t v47;

  v5 = a4;
  v47 = *MEMORY[0x1E0C80C00];
  v9 = HIDWORD(a4);
  *(_QWORD *)&v42 = *((_QWORD *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  v36 = HIDWORD(a4);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    *(_QWORD *)&v42 = a3;
    *((_QWORD *)&v42 + 1) = __PAIR64__(v9, v5);
    v10 = _ViewOutputs.subscript.getter();
    v11 = *MEMORY[0x1E0CFED28];
    if ((v10 & 0x100000000) != 0)
      v12 = *MEMORY[0x1E0CFED28];
    else
      v12 = v10;
    v38 = v12;
  }
  else
  {
    v11 = *MEMORY[0x1E0CFED28];
    v38 = *MEMORY[0x1E0CFED28];
  }
  LODWORD(v42) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityContainerModifier>, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v37 = _GraphValue.value.getter();
  v13 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v14 = a2[1];
  v42 = *a2;
  v43 = v14;
  v15 = _ViewInputs.position.getter();
  v16 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v17 = a2[1];
  v42 = *a2;
  v43 = v17;
  v18 = _ViewInputs.size.getter();
  v19 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v20 = a2[1];
  v42 = *a2;
  v43 = v20;
  v21 = _ViewInputs.transform.getter();
  v22 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v23 = a2[1];
  v42 = *a2;
  v43 = v23;
  v24 = _ViewInputs.environment.getter();
  v25 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v26 = a2[1];
  v42 = *a2;
  v43 = v26;
  v27 = _ViewInputs.viewPhase.getter();
  v28 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(_QWORD *)&v42 = a3;
  *((_QWORD *)&v42 + 1) = __PAIR64__(v36, v5);
  v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0)
    v30 = v11;
  else
    v30 = v29;
  v31 = a2[1];
  v42 = *a2;
  v43 = v31;
  v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(_QWORD *)&v42 = __PAIR64__(v15, v37);
  *((_QWORD *)&v42 + 1) = __PAIR64__(v21, v18);
  *(_QWORD *)&v43 = __PAIR64__(v27, v24);
  *((_QWORD *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(_QWORD *)&v45 = 0;
  swift_unknownObjectWeakInit();
  v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityContainerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<AccessibilityContainerModifier> and conformance PropertiesTransform<A>();
  v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityOpacityModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityContainerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier, (uint64_t)&type metadata for AccessibilityContainerModifier);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  unint64_t v36;
  unsigned int v37;
  int v38;
  __int128 v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  __int128 v45;
  int v46;
  uint64_t v47;

  v5 = a4;
  v47 = *MEMORY[0x1E0C80C00];
  v9 = HIDWORD(a4);
  *(_QWORD *)&v42 = *((_QWORD *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  v36 = HIDWORD(a4);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    *(_QWORD *)&v42 = a3;
    *((_QWORD *)&v42 + 1) = __PAIR64__(v9, v5);
    v10 = _ViewOutputs.subscript.getter();
    v11 = *MEMORY[0x1E0CFED28];
    if ((v10 & 0x100000000) != 0)
      v12 = *MEMORY[0x1E0CFED28];
    else
      v12 = v10;
    v38 = v12;
  }
  else
  {
    v11 = *MEMORY[0x1E0CFED28];
    v38 = *MEMORY[0x1E0CFED28];
  }
  LODWORD(v42) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityScrollableContextModifier>, (uint64_t)&type metadata for AccessibilityScrollableContextModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v37 = _GraphValue.value.getter();
  v13 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v14 = a2[1];
  v42 = *a2;
  v43 = v14;
  v15 = _ViewInputs.position.getter();
  v16 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v17 = a2[1];
  v42 = *a2;
  v43 = v17;
  v18 = _ViewInputs.size.getter();
  v19 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v20 = a2[1];
  v42 = *a2;
  v43 = v20;
  v21 = _ViewInputs.transform.getter();
  v22 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v23 = a2[1];
  v42 = *a2;
  v43 = v23;
  v24 = _ViewInputs.environment.getter();
  v25 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v26 = a2[1];
  v42 = *a2;
  v43 = v26;
  v27 = _ViewInputs.viewPhase.getter();
  v28 = a2[3];
  *(_OWORD *)v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  v45 = a2[4];
  v46 = *((_DWORD *)a2 + 20);
  v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(_QWORD *)&v42 = a3;
  *((_QWORD *)&v42 + 1) = __PAIR64__(v36, v5);
  v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0)
    v30 = v11;
  else
    v30 = v29;
  v31 = a2[1];
  v42 = *a2;
  v43 = v31;
  v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(_QWORD *)&v42 = __PAIR64__(v15, v37);
  *((_QWORD *)&v42 + 1) = __PAIR64__(v21, v18);
  *(_QWORD *)&v43 = __PAIR64__(v27, v24);
  *((_QWORD *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(_QWORD *)&v45 = 0;
  swift_unknownObjectWeakInit();
  v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityScrollableContextModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier, (uint64_t)&type metadata for AccessibilityScrollableContextModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<AccessibilityScrollableContextModifier> and conformance PropertiesTransform<A>();
  v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityOpacityModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityScrollableContextModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier, (uint64_t)&type metadata for AccessibilityScrollableContextModifier);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

uint64_t static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[4];
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  int v61;
  unint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  __int128 v70;
  int v71;
  int v72;
  unint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;

  v38 = a6;
  v43 = a5;
  v77 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v57 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v58 = v6;
  v59 = v7;
  v50 = *((_DWORD *)a2 + 6);
  v49 = *((_DWORD *)a2 + 7);
  v8 = *((_DWORD *)a2 + 9);
  v55 = *((_DWORD *)a2 + 8);
  v51 = a2[5];
  v9 = a2[6];
  v10 = *((_DWORD *)a2 + 14);
  v48 = *((_DWORD *)a2 + 15);
  v11 = *((_DWORD *)a2 + 16);
  v47 = *((_DWORD *)a2 + 17);
  v12 = *((_DWORD *)a2 + 18);
  v13 = *((_DWORD *)a2 + 19);
  v14 = *((_DWORD *)a2 + 20);
  v42 = *(_QWORD *)a3;
  v41 = *(_DWORD *)(a3 + 8);
  v40 = *(_DWORD *)(a3 + 12);
  v39 = *a4;
  v15 = v9;
  v62 = v9;
  v16 = v10;
  v63 = v10;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v62 = v42;
    v63 = v41;
    v64 = v40;
    v17 = _ViewOutputs.subscript.getter();
    v18 = *MEMORY[0x1E0CFED28];
    if ((v17 & 0x100000000) == 0)
      v18 = v17;
  }
  else
  {
    v18 = *MEMORY[0x1E0CFED28];
  }
  v37 = v18;
  type metadata accessor for _GraphValue();
  v36 = _GraphValue.value.getter();
  v56 = v8;
  v44 = v15;
  v46 = v16;
  v45 = v11;
  v53 = v13;
  v54 = v12;
  v52 = v14;
  v35 = _ViewInputs.position.getter();
  v34 = _ViewInputs.size.getter();
  v33 = _ViewInputs.transform.getter();
  v32 = _ViewInputs.environment.getter();
  v31 = _ViewInputs.viewPhase.getter();
  v65 = v59;
  v66 = v50;
  v67 = v49;
  v68 = v55;
  v69 = v8;
  *(_QWORD *)&v70 = v51;
  *((_QWORD *)&v70 + 1) = v15;
  v71 = v16;
  v72 = v48;
  v73 = __PAIR64__(v47, v11);
  v74 = v12;
  v75 = v13;
  v76 = v14;
  _ViewInputs.scrapeableParentID.getter();
  v62 = v42;
  v63 = v41;
  v64 = v40;
  v19 = _ViewOutputs.subscript.getter();
  if ((v19 & 0x100000000) != 0)
    v20 = *MEMORY[0x1E0CFED28];
  else
    v20 = v19;
  _GraphInputs.interfaceIdiom.getter();
  v62 = __PAIR64__(v35, v36);
  v63 = v34;
  v64 = v33;
  v65 = __PAIR64__(v31, v32);
  v21 = v39;
  v66 = v39;
  v67 = v61;
  v68 = v37;
  v69 = v20;
  v70 = v60;
  LOBYTE(v71) = (v56 & 0x20) == 0;
  v73 = 0;
  v22 = swift_unknownObjectWeakInit();
  v76 = 0;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = type metadata accessor for PropertiesTransform(0, v43, v38, v24);
  v30[2] = v25;
  v30[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PropertiesTransform<A>, v25);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<AccessibilityNodeList>, (uint64_t)&type metadata for AccessibilityNodeList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v62, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_3, (uint64_t)v30, v25, MEMORY[0x1E0DEDCE8], v26, MEMORY[0x1E0DEDD18], v27);
  (*(void (**)(unint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(&v62, v25);
  v28 = v60;
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (v21)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v28;
}

uint64_t implicit closure #3 in static AccessibilityViewModifier._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type PlatformItemListTransform and conformance PlatformItemListTransform();
  return Attribute.init<A>(body:value:flags:update:)();
}

Swift::Bool __swiftcall AnyAccessibilityViewModifier.willCreateNode(for:)(Swift::OpaquePointer a1)
{
  Swift::Bool result;

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void AnyAccessibilityViewModifier.initialAttachment(for:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyAccessibilityViewModifier.isEqual(to:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyAccessibilityViewModifier.hash(into:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyAccessibilityViewModifier.visibility(for:nodes:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t PropertiesTransform.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t PropertiesTransform.deferredAttachment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t Value;
  void *v5;
  uint64_t v6;
  char v7;

  result = *(unsigned int *)(v1 + 32);
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = -1;
  }
  else
  {
    Value = AGGraphGetValue();
    v6 = *(_QWORD *)Value;
    v5 = *(void **)(Value + 8);
    *(_QWORD *)a1 = *(_QWORD *)Value;
    *(_QWORD *)(a1 + 8) = v5;
    v7 = *(_BYTE *)(Value + 16);
    *(_BYTE *)(a1 + 16) = v7;
    return outlined copy of AccessibilityAttachment.Tree(v6, v5, v7);
  }
  return result;
}

uint64_t PropertiesTransform.nodeList.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *Value;
  uint64_t v5;

  result = *(unsigned int *)(v1 + 36);
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    Value = (_QWORD *)AGGraphGetValue();
    v5 = Value[1];
    *a1 = *Value;
    a1[1] = v5;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t PropertiesTransform.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  void (**v5)(char *, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Value;
  char v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int CurrentAttribute;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  Swift::OpaquePointer v33;
  uint64_t v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t i;
  id v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, void *, uint64_t, uint64_t);
  void (**v50)(char *, uint64_t);
  char v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  char v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void (*v69)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  char *v70;
  void *v71;
  char *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  void *v85;
  char **v86;
  char *v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  char v91;
  int v92;
  __int128 v93;
  id v94;
  id v95;
  char v96;
  BOOL v97;
  char *v98;
  uint64_t v99;
  Swift::UInt v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  void *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  id v108;
  char *v109;
  id v110;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  _BYTE *v115;
  char *v116;
  uint64_t v117;
  void *v118;
  id v119;
  void (**v120)(char *, uint64_t);
  uint64_t v121;
  void *v122;
  void (**v123)(char *, uint64_t);
  void (**v124)(char *, uint64_t);
  void (**v125)(char *, uint64_t);
  void *v126;
  uint64_t v127;
  char *v128;
  void *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  char v135;
  int v136;
  char v137;
  id v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  void *v142;
  void *v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  void *v147;
  id v148;
  uint64_t OutputValue;
  uint64_t v150;
  uint64_t v152;
  id v153;
  int v154;
  uint64_t v155;
  int v156;
  void (**v157)(char *, uint64_t);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *rawValue;
  uint64_t v172;
  char *v173;
  __int128 v174;
  uint64_t v175;
  char v176;
  __int128 v177;
  __int128 v178;
  unsigned __int8 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;

  v2 = v1;
  v182 = *MEMORY[0x1E0C80C00];
  v172 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5 = *(void (***)(char *, uint64_t))(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v6);
  v8 = (char *)&v152 - v7;
  PropertiesTransform.environment.getter(&v181);
  v178 = v181;
  v9 = EnvironmentValues.accessibilityEnabled.getter();
  swift_release();
  swift_release();
  if ((v9 & 1) == 0)
  {
    PropertiesTransform.nodeList.getter(&v181);
    v29 = v181;
    if ((_QWORD)v181)
    {
      v30 = *((_QWORD *)&v181 + 1);
LABEL_40:
      *(_QWORD *)&v181 = v29;
      *((_QWORD *)&v181 + 1) = v30;
      AGGraphSetOutputValue();
      return swift_bridgeObjectRelease();
    }
    if (one-time initialization token for defaultValue == -1)
    {
LABEL_39:
      v30 = *((_QWORD *)&static AccessibilityNodesKey.defaultValue + 1);
      v29 = static AccessibilityNodesKey.defaultValue;
      swift_bridgeObjectRetain();
      goto LABEL_40;
    }
LABEL_77:
    swift_once();
    goto LABEL_39;
  }
  if (*(_DWORD *)(v2 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(_QWORD *)(v2 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v2 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  v10 = *(int *)(TupleTypeMetadata2 + 48);
  v11 = v172;
  Value = AGGraphGetValue();
  v14 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, Value, v11);
  v8[v10] = v14 & 1;
  v15 = (uint64_t *)AGGraphGetValue();
  v17 = v16;
  v18 = *v15;
  v19 = v15[1];
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v21 = *MEMORY[0x1E0CFED28];
  if (CurrentAttribute == *MEMORY[0x1E0CFED28])
  {
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v164 = v17;
  v157 = v5;
  v159 = v19;
  swift_retain();
  v160 = v18;
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  v22 = v181;
  v23 = BYTE8(v181);
  v24 = *(_DWORD *)(v2 + 36);
  v170 = a1;
  if (v24 == v21)
  {
    v28 = 0;
    v25 = 0;
    v27 = 0;
  }
  else
  {
    v25 = *(_QWORD *)(AGGraphGetValue() + 8);
    v27 = v26 & 1;
    v28 = swift_bridgeObjectRetain();
  }
  if (v28)
    v31 = v27;
  else
    v31 = 0;
  v156 = v31;
  if (v28)
    v32 = v25;
  else
    v32 = 0;
  v155 = v32;
  if (v28)
    v33._rawValue = (void *)v28;
  else
    v33._rawValue = (void *)MEMORY[0x1E0DEE9D8];
  v34 = *(_QWORD *)(v170 + 24);
  v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 32);
  swift_bridgeObjectRetain_n();
  v169 = v34;
  v36 = v35(v33._rawValue, v172, v34);
  v163 = v8;
  v168 = v2;
  rawValue = v33._rawValue;
  v158 = TupleTypeMetadata2;
  if ((v36 & 1) != 0)
  {
    type metadata accessor for ViewGraph();
    v37 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v38 = MEMORY[0x18D760234](v37);
    swift_release();
    if (v38)
    {
      swift_getObjectType();
      v39 = swift_conformsToProtocol2();
      if (v39)
        v40 = v39;
      else
        v40 = 0;
      if (v39)
        v41 = v38;
      else
        v41 = 0;
      if (v41)
        goto LABEL_43;
      swift_unknownObjectRelease();
    }
    else
    {
      v41 = 0;
    }
    v40 = 0;
LABEL_43:
    v47 = *(void **)(v2 + 64);
    v48 = v169;
    v49 = *(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v169 + 56);
    v50 = v47;
    v5 = (void (**)(char *, uint64_t))v49(v41, v40, v47, v172, v48);

    swift_unknownObjectRelease();
    v167 = (unint64_t)v5;
    if (v47 && v5 == v50)
    {
      swift_bridgeObjectRelease();
      if ((v164 & 1) == 0)
      {
        v51 = 0;
        v166 = 0;
        v8 = v163;
        goto LABEL_148;
      }
      v166 = 0;
      v8 = v163;
      goto LABEL_146;
    }
    if (!AGGraphGetOutputValue())
    {
      v166 = 0;
      v8 = v163;
      goto LABEL_140;
    }
    v8 = v163;
    if (v47)
    {
LABEL_139:
      v166 = 0;
LABEL_140:
      swift_bridgeObjectRelease();
      v121 = v168;
      v122 = *(void **)(v168 + 64);
      if (v122)
      {
        v123 = v5;

        *(_QWORD *)(v121 + 64) = v123;
        if ((v164 & 1) == 0)
          goto LABEL_147;
      }
      else
      {
        if ((v164 & 1) == 0)
        {
          *(_QWORD *)&v178 = v160;
          *((_QWORD *)&v178 + 1) = v159;
          AccessibilityNode.updateEnvironment(_:)((uint64_t *)&v178);
          *(_QWORD *)(v121 + 64) = v5;
          v124 = v5;
LABEL_147:
          v51 = 1;
LABEL_148:
          (*(void (**)(__int128 *__return_ptr, Swift::OpaquePointer, uint64_t))(v169 + 40))(&v180, v33, v172);
          swift_bridgeObjectRelease();
          PropertiesTransform.deferredAttachment.getter((uint64_t)&v178);
          if (v179 <= 1u)
          {
            v126 = (void *)*((_QWORD *)&v178 + 1);
            v127 = v178;
            if (v179)
            {
              v128 = specialized Sequence.compactMap<A>(_:)(v178);
              static AccessibilityAttachment.combine(_:)(v128, (uint64_t *)&v177);
              swift_bridgeObjectRelease();
              outlined consume of AccessibilityAttachment.Tree?(v127, v126, 1);
              v126 = (void *)*((_QWORD *)&v177 + 1);
              v127 = v177;
            }
            *(_QWORD *)&v178 = v127;
            AccessibilityProperties.merge(with:)((uint64_t *)&v178);
            v178 = v180;
            v129 = (void *)AccessibilityAttachment.platformElement.getter();

            if (!v129)
            {
              *(_QWORD *)&v178 = v127;
              *((_QWORD *)&v178 + 1) = v126;
              if (AccessibilityAttachment.platformElement.getter())
                AccessibilityAttachment.platformElement.setter();
            }
            swift_bridgeObjectRelease();

          }
          v130 = (uint64_t *)(v167 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
          swift_beginAccess();
          v131 = *v130;
          v132 = *(_QWORD *)(v131 + 16);
          if (v132)
          {
            swift_bridgeObjectRetain();
            v133 = (unsigned __int8 *)(v131 + 64);
            v134 = (unsigned __int8 *)(v131 + 64);
            while (1)
            {
              v136 = *v134;
              v134 += 40;
              v135 = v136;
              if (v136 != 255)
              {
                *(_QWORD *)&v177 = *((_QWORD *)v133 - 1);
                BYTE8(v177) = v135;
                v175 = v22;
                v176 = v23;
                if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                  break;
              }
              v133 = v134;
              if (!--v132)
              {
                swift_bridgeObjectRelease();
                goto LABEL_163;
              }
            }
            v137 = v51;
            swift_bridgeObjectRelease();
            v177 = v180;
            v175 = v22;
            v176 = v23;
            v138 = *((id *)&v180 + 1);
            swift_bridgeObjectRetain();
            v139 = v167;
            v140 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v177, &v175, 0);

            swift_bridgeObjectRelease();
            if ((v140 & 1) != 0)
            {
              v137 = 1;
              v120 = v157;
            }
            else
            {
              AccessibilityNode.platformElement.getter();
              v120 = v157;
              if (v142)
              {

                v137 = 1;
              }
              else
              {
                v143 = (void *)MEMORY[0x18D760234](v139 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent);

                if (!v143)
                  v137 = 1;
              }
            }
            v141 = v139;
          }
          else
          {
LABEL_163:
            v177 = v180;
            v175 = v22;
            v176 = v23;
            v138 = *((id *)&v180 + 1);
            swift_bridgeObjectRetain();
            v141 = v167;
            specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)((uint64_t *)&v177, &v175);

            swift_bridgeObjectRelease();
            v137 = 1;
            v120 = v157;
          }
          AccessibilityNode.updateChildren(_:)(v33);
          swift_bridgeObjectRelease();
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v144 = swift_allocObject();
          *(_OWORD *)(v144 + 16) = xmmword_187BFF9C0;
          *(_QWORD *)(v144 + 32) = v141;
          *(_QWORD *)&v177 = v144;
          specialized Array._endMutation()();
          v145 = (void *)v177;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v33._rawValue = v145;
          if ((v137 & 1) == 0)
            goto LABEL_171;
LABEL_170:
          DisplayList.Version.init(forUpdate:)();
          v146 = v180;
          goto LABEL_176;
        }
        *(_QWORD *)(v168 + 64) = v5;
        v125 = v5;
      }
LABEL_146:
      *(_QWORD *)&v178 = v160;
      *((_QWORD *)&v178 + 1) = v159;
      AccessibilityNode.updateEnvironment(_:)((uint64_t *)&v178);
      goto LABEL_147;
    }
    if (!((unint64_t)v33._rawValue >> 62))
    {
      v52 = *(_QWORD *)(((unint64_t)v33._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v52)
        goto LABEL_51;
      goto LABEL_139;
    }
LABEL_138:
    swift_bridgeObjectRetain();
    v52 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v52)
    {
LABEL_51:
      v53 = 0;
      v166 = 0;
      v173 = (char *)((unint64_t)v33._rawValue & 0xC000000000000001);
      v162 = (unint64_t)v33._rawValue & 0xFFFFFFFFFFFFFF8;
      v161 = (char *)v33._rawValue + 32;
      v165 = v52;
      while (1)
      {
        if (v173)
        {
          v54 = (char *)MEMORY[0x18D75E3BC](v53, v33._rawValue);
        }
        else
        {
          if (v53 >= *(_QWORD *)(v162 + 16))
            goto LABEL_74;
          v54 = (char *)*(id *)&v161[8 * v53];
        }
        v55 = v54;
        if (__OFADD__(v53++, 1))
        {
          __break(1u);
          goto LABEL_73;
        }
        v57 = &v54[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        v58 = *(_QWORD *)v57;
        v59 = *(_QWORD *)(*(_QWORD *)v57 + 16);
        if (v59)
          break;

LABEL_53:
        v8 = v163;
        v33._rawValue = rawValue;
        if (v53 == v52)
          goto LABEL_140;
      }
      swift_bridgeObjectRetain();
      v60 = 0;
      v61 = (unsigned __int8 *)(v58 + 64);
      v62 = (unsigned __int8 *)(v58 + 64);
      while (1)
      {
        v64 = *v62;
        v62 += 40;
        v63 = v64;
        if (v64 != 255)
        {
          *(_QWORD *)&v178 = *((_QWORD *)v61 - 1);
          BYTE8(v178) = v63;
          *(_QWORD *)&v180 = v22;
          BYTE8(v180) = v23;
          if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
            break;
        }
        ++v60;
        v61 = v62;
        if (v59 == v60)
        {

          swift_bridgeObjectRelease();
          goto LABEL_68;
        }
      }
      swift_bridgeObjectRelease();
      v65 = *(_QWORD *)v57;
      v66 = *(_QWORD *)(*(_QWORD *)v57 + 16);
      if (v66 < v60)
        goto LABEL_75;
      swift_beginAccess();
      v67 = *(_QWORD *)(*(_QWORD *)v57 + 16);
      if (v67 >= v60)
      {
        swift_bridgeObjectRetain();
        specialized Array.replaceSubrange<A>(_:with:)(v60, v67);
        swift_endAccess();
        v68 = (2 * v66) | 1;
        v69 = v166;
        v70 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs10ArraySliceVy7SwiftUI30AccessibilityAttachmentStorage33_2F6327E72581B7F866C81F7546545BE8LLVG_AH0hI0Vs5NeverOTg503_s7f4UI17h37NodeC17removeAttachments5afteryAA0C15i33TokenO_tFAA0cH0VAA0cH7Storage33_2klmnopQ55LLVcfu_33_27bc406762570ff177ca3ffab16a1c9fAlITf3nnnpk_nTf1cn_nTf4x_n((char *)(v65 + 32), v60, v68);
        v166 = v69;
        static AccessibilityAttachment.combine(_:)(v70, (uint64_t *)&v178);
        swift_bridgeObjectRelease();
        v71 = (void *)*((_QWORD *)&v178 + 1);
        v180 = v178;
        v177 = 0uLL;
        AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)((uint64_t *)&v180, &v177);
        swift_bridgeObjectRelease();

        v72 = &v55[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
        v73 = *(_QWORD *)&v55[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
        v74 = *(void **)&v55[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
        *(_QWORD *)v72 = 0;
        *((_QWORD *)v72 + 1) = 0;
        outlined consume of AccessibilityAttachment?(v73, v74);
        v55[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

        swift_bridgeObjectRelease();
        v5 = (void (**)(char *, uint64_t))v167;
LABEL_68:
        v52 = v165;
        goto LABEL_53;
      }
      goto LABEL_76;
    }
    goto LABEL_139;
  }
  v42 = (unint64_t)v33._rawValue >> 62;
  if (!*(_QWORD *)(v2 + 64))
  {
    swift_bridgeObjectRelease();
    goto LABEL_80;
  }
  if (v42)
  {
    swift_bridgeObjectRetain();
    v43 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v43)
      goto LABEL_32;
  }
  else
  {
    v43 = *(_QWORD *)(((unint64_t)v33._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v43)
    {
LABEL_32:
      if (v43 < 1)
      {
        __break(1u);
        goto LABEL_138;
      }
      for (i = 0; i != v43; ++i)
      {
        if (((unint64_t)v33._rawValue & 0xC000000000000001) != 0)
          v45 = (id)MEMORY[0x18D75E3BC](i, v33._rawValue);
        else
          v45 = *((id *)v33._rawValue + i + 4);
        v46 = v45;
        swift_unknownObjectWeakAssign();

      }
    }
  }
  swift_bridgeObjectRelease();
  v75 = v168;

  *(_QWORD *)(v75 + 64) = 0;
LABEL_80:
  if (v42)
  {
LABEL_134:
    swift_bridgeObjectRetain();
    v76 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v76)
      goto LABEL_82;
LABEL_135:
    swift_bridgeObjectRelease_n();
    v120 = v157;
    if ((v156 & 1) == 0)
      goto LABEL_174;
    goto LABEL_170;
  }
  v76 = *(_QWORD *)(((unint64_t)v33._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v76)
    goto LABEL_135;
LABEL_82:
  v77 = 0;
  v164 = 0;
  v166 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v169 + 48);
  v167 = (unint64_t)v33._rawValue & 0xC000000000000001;
  v162 = (unint64_t)v33._rawValue & 0xFFFFFFFFFFFFFF8;
  v161 = (char *)v33._rawValue + 32;
  v154 = v156;
  v165 = v76;
  do
  {
    while (1)
    {
      if (v167)
      {
        v78 = (char *)MEMORY[0x18D75E3BC](v77, v33._rawValue);
      }
      else
      {
        if (v77 >= *(_QWORD *)(v162 + 16))
          goto LABEL_133;
        v78 = (char *)*(id *)&v161[8 * v77];
      }
      v79 = v78;
      v80 = v77 + 1;
      if (__OFADD__(v77, 1))
      {
        __break(1u);
LABEL_133:
        __break(1u);
        goto LABEL_134;
      }
      *(_QWORD *)&v178 = v22;
      BYTE8(v178) = v23;
      swift_bridgeObjectRetain();
      v166(&v174, &v178, v33._rawValue, v77, v172, v169);
      swift_bridgeObjectRelease();
      PropertiesTransform.deferredAttachment.getter((uint64_t)&v178);
      if (v179 <= 1u)
      {
        v81 = (void *)*((_QWORD *)&v178 + 1);
        v82 = v178;
        if (v179)
        {
          v83 = v164;
          v84 = specialized Sequence.compactMap<A>(_:)(v178);
          v164 = v83;
          static AccessibilityAttachment.combine(_:)(v84, (uint64_t *)&v180);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree?(v82, v81, 1);
          v81 = (void *)*((_QWORD *)&v180 + 1);
          v82 = v180;
        }
        *(_QWORD *)&v178 = v82;
        AccessibilityProperties.merge(with:)((uint64_t *)&v178);
        v178 = v174;
        v85 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v85)
        {
          *(_QWORD *)&v178 = v82;
          *((_QWORD *)&v178 + 1) = v81;
          if (AccessibilityAttachment.platformElement.getter())
            AccessibilityAttachment.platformElement.setter();
        }
        swift_bridgeObjectRelease();

      }
      v86 = (char **)&v79[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
      swift_beginAccess();
      v87 = *v86;
      v88 = *((_QWORD *)*v86 + 2);
      v173 = v79;
      if (v88)
      {
        swift_bridgeObjectRetain();
        v89 = (unsigned __int8 *)(v87 + 64);
        v90 = (unsigned __int8 *)(v87 + 64);
        while (1)
        {
          v92 = *v90;
          v90 += 40;
          v91 = v92;
          if (v92 != 255)
          {
            *(_QWORD *)&v178 = *((_QWORD *)v89 - 1);
            BYTE8(v178) = v91;
            *(_QWORD *)&v180 = v22;
            BYTE8(v180) = v23;
            if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
              break;
          }
          v89 = v90;
          if (!--v88)
            goto LABEL_103;
        }
        LOBYTE(v88) = 1;
LABEL_103:
        swift_bridgeObjectRelease();
      }
      v77 = v80;
      v93 = v174;
      v178 = v174;
      if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
      {
        if ((v88 & 1) == 0)
          goto LABEL_83;
      }
      else if ((v88 & 1) == 0)
      {
        v98 = v173;
        AccessibilityNode.traits.getter((uint64_t *)&v178);
        if ((v178 & 0x80000) == 0)
        {
          v99 = *(_QWORD *)&v98[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
          if (!v99)
            goto LABEL_121;
          v100 = *(_QWORD *)&v98[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
          swift_beginAccess();
          v101 = *(_QWORD *)(v99 + 32);
          if (*(_QWORD *)(v101 + 16)
            && (v102 = specialized __RawDictionaryStorage.find<A>(_:)(v100, 0), (v103 & 1) != 0))
          {
            v104 = *(void **)(*(_QWORD *)(v101 + 56) + 8 * v102);
            v153 = v104;
            swift_endAccess();
            swift_retain();
            swift_bridgeObjectRetain();
            v105 = v164;
            v106 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E0DEE9D8], (uint64_t)v104, v99, 1u);
            v164 = v105;
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_endAccess();
            swift_retain();
            v106 = MEMORY[0x1E0DEE9D8];
          }
          if (v106 >> 62)
          {
            swift_bridgeObjectRetain();
            v107 = _CocoaArrayWrapper.endIndex.getter();
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            v107 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_release();
          }
          swift_bridgeObjectRelease();
          v8 = v163;
          if (!v107)
            goto LABEL_121;
        }
        *(_QWORD *)&v180 = v93;
        AccessibilityProperties.traits.getter();
        if ((BYTE2(v178) & 8) == 0 && (BYTE10(v178) & 8) != 0)
        {
LABEL_121:
          v178 = v93;
          v108 = *((id *)&v93 + 1);
          swift_bridgeObjectRetain();
          AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v178);
          v109 = *v86;
          swift_bridgeObjectRetain_n();
          v110 = v108;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v86 = v109;
          v153 = v110;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v109 + 2) + 1, 1, v109);
            *v86 = v109;
          }
          v113 = *((_QWORD *)v109 + 2);
          v112 = *((_QWORD *)v109 + 3);
          if (v113 >= v112 >> 1)
          {
            v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v112 > 1), v113 + 1, 1, v109);
            *v86 = v109;
          }
          *((_QWORD *)v109 + 2) = v113 + 1;
          v114 = &v109[40 * v113];
          *((_OWORD *)v114 + 2) = v93;
          *((_QWORD *)v114 + 6) = 0;
          *((_QWORD *)v114 + 7) = v22;
          v114[64] = v23;
          v115 = v173;
          v116 = &v173[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          v117 = *(_QWORD *)&v173[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          v118 = *(void **)&v173[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
          *(_QWORD *)v116 = 0;
          *((_QWORD *)v116 + 1) = 0;
          outlined consume of AccessibilityAttachment?(v117, v118);
          v154 = 1;
          v115[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

          v119 = v153;
          swift_bridgeObjectRelease_n();
          v97 = v80 == v165;
          v8 = v163;
          goto LABEL_126;
        }
LABEL_83:
        swift_bridgeObjectRelease();

        break;
      }
      v178 = v93;
      *(_QWORD *)&v180 = v22;
      BYTE8(v180) = v23;
      v94 = *((id *)&v93 + 1);
      swift_bridgeObjectRetain();
      v95 = v173;
      v96 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v178, (uint64_t *)&v180, 0);

      swift_bridgeObjectRelease_n();
      if ((v96 & 1) == 0)
        break;
      v154 = 1;
      v97 = v80 == v165;
LABEL_126:
      v33._rawValue = rawValue;
      if (v97)
      {
        swift_bridgeObjectRelease_n();
        v120 = v157;
        goto LABEL_170;
      }
    }
    v33._rawValue = rawValue;
  }
  while (v80 != v165);
  swift_bridgeObjectRelease_n();
  v120 = v157;
  if ((v154 & 1) != 0)
    goto LABEL_170;
LABEL_171:
  if (v156)
  {
    v147 = *(void **)(v168 + 64);
    if (v147)
    {
      *(_QWORD *)(swift_allocObject() + 16) = v147;
      v148 = v147;
      static Update.enqueueAction(_:)();

      swift_release();
    }
  }
LABEL_174:
  OutputValue = AGGraphGetOutputValue();
  if (OutputValue)
  {
    v146 = *(_QWORD *)(OutputValue + 8);
LABEL_176:
    v150 = v158;
  }
  else
  {
    v150 = v158;
    v146 = v155;
  }
  *(Swift::OpaquePointer *)&v180 = v33;
  *((_QWORD *)&v180 + 1) = v146;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v120[1](v8, v150);
  return swift_bridgeObjectRelease();
}

void closure #1 in PropertiesTransform.updateValue()()
{
  AccessibilityNode.updatePlatformProperties()();
}

void static PropertiesTransform.willRemove(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  AGGraphGetAttributeInfo();
  v6 = v5;
  type metadata accessor for PropertiesTransform(0, a2, a3, v7);
  swift_unknownObjectWeakAssign();

  *(_QWORD *)(v6 + 64) = 0;
}

void static PropertiesTransform.didReinsert(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  AGGraphGetAttributeInfo();
  type metadata accessor for PropertiesTransform(0, a2, a3, v5);
  PropertiesTransform.insert()();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PropertiesTransform<A>()
{
  return specialized PropertiesTransform.description.getter();
}

double static PropertiesTransform<>.scrapeContent(from:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *Value;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  double result;
  __int128 v13;
  _BYTE v14[12];
  _BYTE v15[8];
  _BYTE v16[4];
  int v17;
  int v18;
  uint64_t v19;
  _BYTE v20[16];
  _DWORD v21[22];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  AGGraphGetAttributeInfo();
  v3 = v2;
  v4 = swift_allocObject();
  outlined init with copy of PropertiesTransform<AccessibilityAttachmentModifier>(v3, (uint64_t)v21);
  v5 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  outlined destroy of PropertiesTransform<AccessibilityOpacityModifier>((uint64_t)v21, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier);
  swift_beginAccess();
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  outlined init with copy of PropertiesTransform<AccessibilityAttachmentModifier>(v3, (uint64_t)v20);
  Value = (uint64_t *)AGGraphGetValue();
  v8 = *Value;
  v7 = Value[1];
  *(_QWORD *)(v4 + 24) = v8;
  *(_QWORD *)(v4 + 32) = v7;
  swift_retain();
  swift_retain();
  outlined destroy of PropertiesTransform<AccessibilityOpacityModifier>((uint64_t)v20, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(v3 + 40);
  v19 = v4 | 0x5000000000000000;
  v9 = *(_DWORD *)(v3 + 28);
  v18 = *(_DWORD *)(v3 + 24);
  v17 = v9;
  outlined init with copy of PropertiesTransform<AccessibilityAttachmentModifier>(v3, (uint64_t)v16);
  outlined destroy of PropertiesTransform<AccessibilityOpacityModifier>((uint64_t)v16, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier);
  outlined init with copy of PropertiesTransform<AccessibilityAttachmentModifier>(v3, (uint64_t)v15);
  outlined destroy of PropertiesTransform<AccessibilityOpacityModifier>((uint64_t)v15, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier);
  outlined init with copy of PropertiesTransform<AccessibilityAttachmentModifier>(v3, (uint64_t)v14);
  outlined destroy of PropertiesTransform<AccessibilityOpacityModifier>((uint64_t)v14, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier);
  ScrapeableContent.Item.init(_:ids:_:position:size:transform:)();
  v10 = v26;
  v11 = v23;
  *(_OWORD *)a1 = v22;
  *(_OWORD *)(a1 + 16) = v11;
  result = *(double *)&v24;
  v13 = v25;
  *(_OWORD *)(a1 + 32) = v24;
  *(_OWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 64) = v10;
  return result;
}

void (*PlatformItemListTransform.value.getter(unint64_t a1))(char **a1)
{
  int v1;
  unint64_t v2;
  char v3;
  void (*result)(char **);
  uint64_t Value;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;

  v1 = a1;
  v2 = HIDWORD(a1);
  AGGraphGetValue();
  v3 = EnvironmentValues.accessibilityEnabled.getter();
  result = (void (*)(char **))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  if ((v3 & 1) != 0 && *MEMORY[0x1E0CFED28] != v1)
  {
    Value = AGGraphGetValue();
    v6 = *(_QWORD *)Value;
    v7 = *(void **)(Value + 8);
    v8 = *(_BYTE *)(Value + 16);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v6;
    *(_QWORD *)(v9 + 24) = v7;
    *(_BYTE *)(v9 + 32) = v8;
    *(_DWORD *)(v9 + 36) = v1;
    *(_DWORD *)(v9 + 40) = v2;
    outlined copy of AccessibilityAttachment.Tree(v6, v7, v8);
    return partial apply for closure #2 in PlatformItemListTransform.value.getter;
  }
  return result;
}

void closure #2 in PlatformItemListTransform.value.getter(char **a1, uint64_t a2, char *a3, char a4, unint64_t a5)
{
  char *v5;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *Value;
  char *v40;
  char isUniquelyReferenced_nonNull_native;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  int v73;
  void *v74;
  uint64_t v75;
  void *v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  id v86;
  uint64_t v87;
  void *v88;
  char *v89;
  void *v90;
  id v91;
  uint64_t *v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  void *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  int v102;
  void *v103;
  uint64_t v104;
  void *v105;
  id v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  void *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  id v116;
  uint64_t v117;
  void *v118;
  char *v119;
  void *v120;
  uint64_t v121;
  id v122;
  void **v123;
  uint64_t v124;
  void *v125;
  unint64_t v126;
  id v127;
  void *v128;
  uint64_t v129;
  void *v130;
  char *v131;
  char *v132;
  char *v133;
  void *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  void *v138;
  _BYTE *v139;
  char *v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  char *v144;
  id v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  void *v154;
  id v155;
  void *v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  void *v160;
  unint64_t v161;
  id v162;
  void **v163;
  uint64_t v164;
  void *v165;
  unint64_t v166;
  id v167;
  void *v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  void *v174;
  char *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  char *v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  void *v205;
  char **v206;
  unint64_t v207;
  __int128 *v208;
  unint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  __int128 v213;
  unint64_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  char v219;
  _OWORD v220[11];
  uint64_t v221;
  void *v222;
  __n128 v223;
  unint64_t v224;

  v206 = a1;
  v9 = 0;
  v209 = HIDWORD(a5);
  v10 = type metadata accessor for PlatformItemList.Item();
  v212 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  MEMORY[0x1E0C80A78](v12, v13);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v184 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v23 = (__int128 *)((char *)&v184 - v22);
  if (a4)
  {
    if (a4 != 1)
      return;
    v5 = *v206;
    v23 = (__int128 *)*((_QWORD *)*v206 + 2);
    if (v23)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_151;
      goto LABEL_5;
    }
    v191 = v21;
    v192 = v20;
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v50 = Dictionary.init(minimumCapacity:)();
    v224 = v50;
    v51 = *(_QWORD *)(a2 + 16);
    if (v51)
    {
      v52 = 0;
      v53 = a2 + 32;
      v54 = (char *)MEMORY[0x1E0DEE9D8];
      v187 = *(_QWORD *)(a2 + 16);
      v193 = a2 + 32;
      while (1)
      {
        v63 = v53 + 24 * v52;
        v65 = *(_QWORD *)v63;
        v64 = *(void **)(v63 + 8);
        v66 = *(unsigned __int8 *)(v63 + 16);
        if (!v66)
        {
          v199 = v52;
          v62 = v64;
          swift_bridgeObjectRetain();
          goto LABEL_42;
        }
        if (v66 == 1)
          break;
LABEL_43:
        if (++v52 == v51)
          goto LABEL_147;
      }
      v199 = v52;
      v195 = *(_QWORD *)(v65 + 16);
      v188 = v64;
      if (!v195)
      {
        swift_bridgeObjectRetain();
        v175 = v54;
        goto LABEL_135;
      }
      v197 = v65 + 32;
      outlined copy of AccessibilityAttachment.Tree(v65, v64, 1);
      swift_bridgeObjectRetain();
      v67 = 0;
      v68 = v54;
      v201 = v65;
LABEL_50:
      v70 = v197 + 24 * v67;
      v72 = *(_QWORD *)v70;
      v71 = *(void **)(v70 + 8);
      v73 = *(unsigned __int8 *)(v70 + 16);
      if (!v73)
      {
        v194 = v67;
        v203 = v68;
        v76 = v71;
        v77 = v71;
        v78 = v72;
        swift_bridgeObjectRetain();
        goto LABEL_55;
      }
      if (v73 != 1)
        goto LABEL_49;
      v194 = v67;
      v203 = v68;
      v196 = *(_QWORD *)(v72 + 16);
      v185 = v71;
      v186 = v72;
      if (!v196)
      {
        v82 = v71;
        outlined copy of AccessibilityAttachment.Tree(v72, v71, 1);
        outlined copy of AccessibilityAttachment.Tree(v72, v82, 1);
        swift_bridgeObjectRetain();
        v5 = v54;
        a2 = *((_QWORD *)v54 + 2);
        if (!a2)
          goto LABEL_132;
        goto LABEL_60;
      }
      v200 = v72 + 32;
      v74 = v71;
      outlined copy of AccessibilityAttachment.Tree(v72, v71, 1);
      outlined copy of AccessibilityAttachment.Tree(v72, v74, 1);
      outlined copy of AccessibilityAttachment.Tree(v72, v74, 1);
      swift_bridgeObjectRetain();
      v75 = 0;
      v204 = v54;
      while (2)
      {
        v99 = v200 + 24 * v75;
        v101 = *(_QWORD *)v99;
        v100 = *(void **)(v99 + 8);
        v102 = *(unsigned __int8 *)(v99 + 16);
        if (!v102)
        {
          v198 = v75;
          v105 = v100;
          v106 = v100;
          v107 = v101;
          swift_bridgeObjectRetain();
          goto LABEL_77;
        }
        if (v102 != 1)
          goto LABEL_71;
        v198 = v75;
        v207 = *(_QWORD *)(v101 + 16);
        v189 = v100;
        v190 = v101;
        if (v207)
        {
          v208 = (__int128 *)(v101 + 32);
          v103 = v100;
          outlined copy of AccessibilityAttachment.Tree(v101, v100, 1);
          outlined copy of AccessibilityAttachment.Tree(v101, v103, 1);
          outlined copy of AccessibilityAttachment.Tree(v101, v103, 1);
          swift_bridgeObjectRetain();
          v104 = 0;
          v210 = v54;
          while (2)
          {
            v133 = (char *)v208 + 24 * v104;
            v135 = *(_QWORD *)v133;
            v134 = (void *)*((_QWORD *)v133 + 1);
            v136 = v133[16];
            if (!v136)
            {
              v148 = (unint64_t)v134;
              v149 = v134;
              swift_bridgeObjectRetain();
              goto LABEL_116;
            }
            if (v136 != 1)
              goto LABEL_93;
            v137 = *(_QWORD *)(v135 + 16);
            v202 = v135;
            v205 = v134;
            v138 = v134;
            if (v137)
            {
              outlined copy of AccessibilityAttachment.Tree(v135, v134, 1);
              outlined copy of AccessibilityAttachment.Tree(v135, v138, 1);
              outlined copy of AccessibilityAttachment.Tree(v135, v138, 1);
              swift_bridgeObjectRetain();
              v139 = (_BYTE *)(v135 + 48);
              while (1)
              {
                v141 = *((_QWORD *)v139 - 2);
                v142 = (void *)*((_QWORD *)v139 - 1);
                if (!*v139)
                  break;
                if (*v139 == 1)
                {
                  outlined copy of AccessibilityAttachment.Tree(*((_QWORD *)v139 - 2), *((void **)v139 - 1), 1);
                  outlined copy of AccessibilityAttachment.Tree(v141, v142, 1);
                  v143 = swift_bridgeObjectRetain();
                  v144 = specialized Sequence.compactMap<A>(_:)(v143);
                  static AccessibilityAttachment.combine(_:)(v144, (uint64_t *)&v213);
                  swift_bridgeObjectRelease();
                  outlined consume of AccessibilityAttachment.Tree(v141, v142, 1);
                  outlined consume of AccessibilityAttachment.Tree(v141, v142, 1);
                  swift_bridgeObjectRelease();
                  v142 = (void *)*((_QWORD *)&v213 + 1);
                  v141 = v213;
LABEL_104:
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v54 + 2) + 1, 1, v54);
                  v147 = *((_QWORD *)v54 + 2);
                  v146 = *((_QWORD *)v54 + 3);
                  if (v147 >= v146 >> 1)
                    v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v146 > 1), v147 + 1, 1, v54);
                  *((_QWORD *)v54 + 2) = v147 + 1;
                  v140 = &v54[16 * v147];
                  *((_QWORD *)v140 + 4) = v141;
                  *((_QWORD *)v140 + 5) = v142;
                }
                v139 += 24;
                if (!--v137)
                {
                  v135 = v202;
                  outlined consume of AccessibilityAttachment.Tree(v202, v205, 1);
                  goto LABEL_111;
                }
              }
              v145 = v142;
              swift_bridgeObjectRetain();
              goto LABEL_104;
            }
            outlined copy of AccessibilityAttachment.Tree(v135, v134, 1);
            outlined copy of AccessibilityAttachment.Tree(v135, v138, 1);
            swift_bridgeObjectRetain();
LABEL_111:
            v150 = *((_QWORD *)v54 + 2);
            v151 = v150 - 1;
            v65 = v201;
            if (v150 == 1)
            {
              v154 = (void *)*((_QWORD *)v54 + 5);
              *(_QWORD *)&v215 = *((_QWORD *)v54 + 4);
              v153 = v215;
              v155 = v154;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v156 = v205;
              outlined consume of AccessibilityAttachment.Tree(v135, v205, 1);
              outlined consume of AccessibilityAttachment.Tree(v135, v156, 1);
              outlined consume of AccessibilityAttachment.Tree(v135, v156, 1);
              v135 = v153;
              v148 = (unint64_t)v154;
              goto LABEL_115;
            }
            if (!v150)
            {
              AccessibilityAttachment.init()();
              swift_bridgeObjectRelease();
              v152 = v205;
              outlined consume of AccessibilityAttachment.Tree(v135, v205, 1);
              outlined consume of AccessibilityAttachment.Tree(v135, v152, 1);
              outlined consume of AccessibilityAttachment.Tree(v135, v152, 1);
              v148 = *((_QWORD *)&v215 + 1);
              v135 = v215;
LABEL_115:
              v54 = (char *)MEMORY[0x1E0DEE9D8];
              goto LABEL_116;
            }
            v211 = v9;
            v159 = &v54[16 * v151];
            v161 = *((_QWORD *)v159 + 4);
            v160 = (void *)*((_QWORD *)v159 + 5);
            *(_QWORD *)&v213 = v161;
            *((_QWORD *)&v213 + 1) = v160;
            v162 = v160;
            swift_bridgeObjectRetain();
            v50 = swift_bridgeObjectRetain();
            v163 = (void **)&v54[16 * v150 + 8];
            v164 = v150 - 2;
            do
            {
              if (v164 >= v151)
              {
                __break(1u);
                goto LABEL_138;
              }
              v166 = (unint64_t)*(v163 - 1);
              v165 = *v163;
              v223.n128_u64[0] = v166;
              v167 = v165;
              swift_bridgeObjectRetain();
              AccessibilityProperties.merge(with:)((uint64_t *)&v223);
              v223 = (__n128)v213;
              v168 = (void *)AccessibilityAttachment.platformElement.getter();

              if (!v168)
              {
                v223.n128_u64[0] = v166;
                v223.n128_u64[1] = (unint64_t)v165;
                if (AccessibilityAttachment.platformElement.getter())
                  AccessibilityAttachment.platformElement.setter();
              }

              v50 = swift_bridgeObjectRelease();
              v163 -= 2;
              --v164;
            }
            while (v164 != -1);
            swift_bridgeObjectRelease_n();
            v169 = v202;
            v170 = v205;
            outlined consume of AccessibilityAttachment.Tree(v202, v205, 1);
            outlined consume of AccessibilityAttachment.Tree(v169, v170, 1);
            outlined consume of AccessibilityAttachment.Tree(v169, v170, 1);
            v148 = *((_QWORD *)&v213 + 1);
            v135 = v213;
            v9 = v211;
            v54 = (char *)MEMORY[0x1E0DEE9D8];
            v65 = v201;
LABEL_116:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              v131 = v210;
            else
              v131 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v210 + 2) + 1, 1, v210);
            v158 = *((_QWORD *)v131 + 2);
            v157 = *((_QWORD *)v131 + 3);
            if (v158 >= v157 >> 1)
              v131 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v157 > 1), v158 + 1, 1, v131);
            *((_QWORD *)v131 + 2) = v158 + 1;
            v210 = v131;
            v132 = &v131[16 * v158];
            *((_QWORD *)v132 + 4) = v135;
            *((_QWORD *)v132 + 5) = v148;
LABEL_93:
            if (++v104 != v207)
              continue;
            break;
          }
          outlined consume of AccessibilityAttachment.Tree(v190, v189, 1);
          v51 = v187;
          v111 = v210;
          v112 = *((_QWORD *)v210 + 2);
          if (!v112)
          {
LABEL_129:
            AccessibilityAttachment.init()();
            swift_bridgeObjectRelease();
            v172 = v189;
            v171 = v190;
            outlined consume of AccessibilityAttachment.Tree(v190, v189, 1);
            outlined consume of AccessibilityAttachment.Tree(v171, v172, 1);
            outlined consume of AccessibilityAttachment.Tree(v171, v172, 1);
            v105 = (void *)*((_QWORD *)&v220[0] + 1);
            v107 = *(_QWORD *)&v220[0];
LABEL_77:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              v97 = v204;
            else
              v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v204 + 2) + 1, 1, v204);
            v109 = *((_QWORD *)v97 + 2);
            v108 = *((_QWORD *)v97 + 3);
            if (v109 >= v108 >> 1)
              v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v108 > 1), v109 + 1, 1, v97);
            *((_QWORD *)v97 + 2) = v109 + 1;
            v204 = v97;
            v98 = &v97[16 * v109];
            *((_QWORD *)v98 + 4) = v107;
            *((_QWORD *)v98 + 5) = v105;
            v75 = v198;
LABEL_71:
            if (++v75 != v196)
              continue;
            outlined consume of AccessibilityAttachment.Tree(v186, v185, 1);
            v5 = v204;
            a2 = *((_QWORD *)v204 + 2);
            if (!a2)
            {
LABEL_132:
              AccessibilityAttachment.init()();
              swift_bridgeObjectRelease();
              v174 = v185;
              v173 = v186;
              outlined consume of AccessibilityAttachment.Tree(v186, v185, 1);
              outlined consume of AccessibilityAttachment.Tree(v173, v174, 1);
              outlined consume of AccessibilityAttachment.Tree(v173, v174, 1);
              v78 = v221;
              v76 = v222;
LABEL_55:
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                v68 = v203;
              else
                v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v203 + 2) + 1, 1, v203);
              v80 = *((_QWORD *)v68 + 2);
              v79 = *((_QWORD *)v68 + 3);
              v67 = v194;
              if (v80 >= v79 >> 1)
              {
                v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v79 > 1), v80 + 1, 1, v68);
                v67 = v194;
                v68 = v81;
              }
              *((_QWORD *)v68 + 2) = v80 + 1;
              v69 = &v68[16 * v80];
              *((_QWORD *)v69 + 4) = v78;
              *((_QWORD *)v69 + 5) = v76;
LABEL_49:
              if (++v67 != v195)
                goto LABEL_50;
              v175 = v68;
              outlined consume of AccessibilityAttachment.Tree(v65, v188, 1);
LABEL_135:
              static AccessibilityAttachment.combine(_:)(v175, &v221);
              swift_bridgeObjectRelease();
              outlined consume of AccessibilityAttachment.Tree(v65, v188, 1);
              v65 = v221;
              v62 = v222;
LABEL_42:
              v221 = v65;
              swift_bridgeObjectRetain();
              AccessibilityProperties.merge(with:)(&v221);

              swift_bridgeObjectRelease_n();
              v52 = v199;
              v53 = v193;
              goto LABEL_43;
            }
LABEL_60:
            v83 = a2 - 1;
            if (a2 == 1)
            {
              v85 = (void *)*((_QWORD *)v5 + 5);
              v221 = *((_QWORD *)v5 + 4);
              v84 = v221;
              v86 = v85;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v88 = v185;
              v87 = v186;
              outlined consume of AccessibilityAttachment.Tree(v186, v185, 1);
              outlined consume of AccessibilityAttachment.Tree(v87, v88, 1);
              outlined consume of AccessibilityAttachment.Tree(v87, v88, 1);
              v78 = v84;
              v76 = v85;
              v51 = v187;
              goto LABEL_55;
            }
            v89 = &v5[16 * v83];
            v23 = (__int128 *)*((_QWORD *)v89 + 4);
            v90 = (void *)*((_QWORD *)v89 + 5);
            *(_QWORD *)&v220[0] = v23;
            *((_QWORD *)&v220[0] + 1) = v90;
            v91 = v90;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v92 = (uint64_t *)&v5[16 * a2 + 8];
            v93 = a2 - 2;
            while (v93 < v83)
            {
              v5 = (char *)*(v92 - 1);
              a2 = *v92;
              *(_QWORD *)&v215 = v5;
              v94 = (id)a2;
              swift_bridgeObjectRetain();
              AccessibilityProperties.merge(with:)((uint64_t *)&v215);
              v215 = v220[0];
              v23 = (__int128 *)AccessibilityAttachment.platformElement.getter();

              if (!v23)
              {
                *(_QWORD *)&v215 = v5;
                *((_QWORD *)&v215 + 1) = a2;
                v23 = &v215;
                if (AccessibilityAttachment.platformElement.getter())
                {
                  v23 = v220;
                  AccessibilityAttachment.platformElement.setter();
                }
              }

              swift_bridgeObjectRelease();
              v92 -= 2;
              if (--v93 == -1)
              {
                swift_bridgeObjectRelease_n();
                v96 = v185;
                v95 = v186;
                outlined consume of AccessibilityAttachment.Tree(v186, v185, 1);
                outlined consume of AccessibilityAttachment.Tree(v95, v96, 1);
                outlined consume of AccessibilityAttachment.Tree(v95, v96, 1);
                v76 = (void *)*((_QWORD *)&v220[0] + 1);
                v78 = *(_QWORD *)&v220[0];
                v51 = v187;
                v54 = (char *)MEMORY[0x1E0DEE9D8];
                v65 = v201;
                goto LABEL_55;
              }
            }
            __break(1u);
            while (2)
            {
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              v5 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
LABEL_5:
              v24 = 0;
              v25 = *(_QWORD *)(a2 + 16);
              v26 = (_BYTE *)(a2 + 48);
              v207 = v25;
              v208 = v23;
              v210 = v5;
LABEL_9:
              if ((unint64_t)v24 >= *((_QWORD *)v5 + 2))
                continue;
              break;
            }
            if ((unint64_t)v24 < v25)
            {
              v30 = *(unsigned __int8 *)(v212 + 80);
              v31 = *(_QWORD *)(v212 + 72);
              v32 = *((_QWORD *)v26 - 2);
              if (*v26)
              {
                if (*v26 == 1)
                {
                  v33 = (void *)*((_QWORD *)v26 - 1);
                  v34 = swift_bridgeObjectRetain();
                  v35 = specialized Sequence.compactMap<A>(_:)(v34);
                  static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v35, 1, &v221);
                  v5 = v210;
                  swift_bridgeObjectRelease();
                  outlined consume of AccessibilityAttachment.Tree(v32, v33, 1);
                  v32 = v221;
                  goto LABEL_15;
                }
              }
              else
              {
                swift_bridgeObjectRetain();
LABEL_15:
                v36 = &v5[((v30 + 32) & ~v30) + v31 * (_QWORD)v24];
                v37 = *((_QWORD *)v36 + 66);
                if (v37)
                {
                  swift_bridgeObjectRetain();
                }
                else
                {
                  type metadata accessor for AnyAccessibilityPropertiesEntry();
                  v37 = Dictionary.init(minimumCapacity:)();
                }
                v211 = v9;
                *(_QWORD *)&v220[0] = v37;
                v221 = v32;
                swift_bridgeObjectRetain();
                AccessibilityProperties.merge(with:)((uint64_t *)v220);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                a2 = v221;
                v38 = *((_QWORD *)v36 + 66);
                if (v38)
                {
                  v27 = *((_QWORD *)v36 + 67);
                  v28 = *((_QWORD *)v36 + 68);
                  swift_retain();
                  v29 = v28;
                }
                else
                {
                  Value = (uint64_t *)AGGraphGetValue();
                  v27 = *Value;
                  v29 = Value[1];
                  swift_retain();
                }
                swift_retain();
                outlined consume of PlatformItemList.Item.Accessibility?(v38);
                *((_QWORD *)v36 + 66) = a2;
                *((_QWORD *)v36 + 67) = v27;
                *((_QWORD *)v36 + 68) = v29;
                v5 = v210;
                v9 = v211;
                v25 = v207;
                v23 = v208;
              }
            }
            v24 = (__int128 *)((char *)v24 + 1);
            v26 += 24;
            if (v23 == v24)
            {
              *v206 = v5;
              return;
            }
            goto LABEL_9;
          }
        }
        else
        {
          v110 = v100;
          outlined copy of AccessibilityAttachment.Tree(v101, v100, 1);
          outlined copy of AccessibilityAttachment.Tree(v101, v110, 1);
          swift_bridgeObjectRetain();
          v111 = v54;
          v112 = *((_QWORD *)v54 + 2);
          if (!v112)
            goto LABEL_129;
        }
        break;
      }
      v113 = v112 - 1;
      if (v112 == 1)
      {
        v115 = (void *)*((_QWORD *)v111 + 5);
        *(_QWORD *)&v220[0] = *((_QWORD *)v111 + 4);
        v114 = *(_QWORD *)&v220[0];
        v116 = v115;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v118 = v189;
        v117 = v190;
        outlined consume of AccessibilityAttachment.Tree(v190, v189, 1);
        outlined consume of AccessibilityAttachment.Tree(v117, v118, 1);
        outlined consume of AccessibilityAttachment.Tree(v117, v118, 1);
        v107 = v114;
        v105 = v115;
        v51 = v187;
        goto LABEL_77;
      }
      v119 = &v111[16 * v113];
      v121 = *((_QWORD *)v119 + 4);
      v120 = (void *)*((_QWORD *)v119 + 5);
      *(_QWORD *)&v215 = v121;
      *((_QWORD *)&v215 + 1) = v120;
      v122 = v120;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v123 = (void **)&v111[16 * v112 + 8];
      v124 = v112 - 2;
      while (v124 < v113)
      {
        v126 = (unint64_t)*(v123 - 1);
        v125 = *v123;
        *(_QWORD *)&v213 = v126;
        v127 = v125;
        swift_bridgeObjectRetain();
        AccessibilityProperties.merge(with:)((uint64_t *)&v213);
        v213 = v215;
        v128 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v128)
        {
          *(_QWORD *)&v213 = v126;
          *((_QWORD *)&v213 + 1) = v125;
          if (AccessibilityAttachment.platformElement.getter())
            AccessibilityAttachment.platformElement.setter();
        }

        swift_bridgeObjectRelease();
        v123 -= 2;
        if (--v124 == -1)
        {
          swift_bridgeObjectRelease_n();
          v130 = v189;
          v129 = v190;
          outlined consume of AccessibilityAttachment.Tree(v190, v189, 1);
          outlined consume of AccessibilityAttachment.Tree(v129, v130, 1);
          outlined consume of AccessibilityAttachment.Tree(v129, v130, 1);
          v105 = (void *)*((_QWORD *)&v215 + 1);
          v107 = v215;
          v51 = v187;
          v54 = (char *)MEMORY[0x1E0DEE9D8];
          v65 = v201;
          goto LABEL_77;
        }
      }
      __break(1u);
LABEL_147:
      v176 = v224;
    }
    else
    {
LABEL_138:
      v176 = v50;
    }
    _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)&v221);
    outlined init with take of Image.Resolved?((uint64_t)&v221, (uint64_t)v220);
    v215 = xmmword_187BF9840;
    v216 = 0u;
    v217 = 0u;
    v218 = 0u;
    v219 = 0;
    v177 = (unint64_t *)AGGraphGetValue();
    v178 = *v177;
    v179 = v177[1];
    *(_QWORD *)&v213 = v176;
    *((_QWORD *)&v213 + 1) = v178;
    v214 = v179;
    v180 = v191;
    PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v220, &v215, (__n128 *)&v213, 0, 0, v191);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v180, v192, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v181 = *v206;
    swift_retain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v181 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v181 + 2) + 1, 1, v181);
    v183 = *((_QWORD *)v181 + 2);
    v182 = *((_QWORD *)v181 + 3);
    if (v183 >= v182 >> 1)
      v181 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v182 > 1, v183 + 1, 1, v181);
    *((_QWORD *)v181 + 2) = v183 + 1;
    outlined init with take of TableCellFormula(v192, (uint64_t)&v181[((*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80))+ *(_QWORD *)(v212 + 72) * v183], (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    *v206 = v181;
    v61 = v191;
    goto LABEL_144;
  }
  v9 = *v206;
  v211 = (char *)*((_QWORD *)*v206 + 2);
  if (!v211)
  {
    _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)&v221);
    outlined init with take of Image.Resolved?((uint64_t)&v221, (uint64_t)v220);
    v215 = xmmword_187BF9840;
    v216 = 0u;
    v217 = 0u;
    v218 = 0u;
    v219 = 0;
    v55 = (unint64_t *)AGGraphGetValue();
    v56 = *v55;
    v57 = v55[1];
    *(_QWORD *)&v213 = a2;
    *((_QWORD *)&v213 + 1) = v56;
    v214 = v57;
    PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v220, &v215, (__n128 *)&v213, 0, 0, (uint64_t)v23);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v23, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    outlined copy of AccessibilityAttachment.Tree(a2, a3, 0);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v58 = a2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    v60 = *((_QWORD *)v9 + 2);
    v59 = *((_QWORD *)v9 + 3);
    if (v60 >= v59 >> 1)
      v9 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1, v9);
    *((_QWORD *)v9 + 2) = v60 + 1;
    outlined init with take of TableCellFormula((uint64_t)v17, (uint64_t)&v9[((*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80))+ *(_QWORD *)(v212 + 72) * v60], (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    outlined consume of AccessibilityAttachment.Tree(v58, a3, 0);
    *v206 = v9;
    v61 = (uint64_t)v23;
LABEL_144:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v61, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    return;
  }
  v40 = a3;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v208 = (__int128 *)a3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v9 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
  v42 = 0;
  v210 = v9;
  do
  {
    if ((unint64_t)v42 >= *((_QWORD *)v9 + 2))
      goto LABEL_150;
    v46 = &v9[((*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80))
            + *(_QWORD *)(v212 + 72) * (_QWORD)v42];
    v47 = *((_QWORD *)v46 + 66);
    if (v47)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      type metadata accessor for AnyAccessibilityPropertiesEntry();
      swift_bridgeObjectRetain();
      v47 = Dictionary.init(minimumCapacity:)();
    }
    *(_QWORD *)&v220[0] = v47;
    v221 = a2;
    swift_bridgeObjectRetain();
    AccessibilityProperties.merge(with:)((uint64_t *)v220);
    v5 = (char *)a2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v48 = v221;
    v23 = (__int128 *)*((_QWORD *)v46 + 66);
    if (v23)
    {
      v43 = *((_QWORD *)v46 + 67);
      v44 = *((_QWORD *)v46 + 68);
      swift_retain();
      v45 = v44;
    }
    else
    {
      v49 = (uint64_t *)AGGraphGetValue();
      v43 = *v49;
      v45 = v49[1];
      swift_retain();
    }
    ++v42;
    swift_retain();
    outlined consume of PlatformItemList.Item.Accessibility?((uint64_t)v23);
    *((_QWORD *)v46 + 66) = v48;
    *((_QWORD *)v46 + 67) = v43;
    *((_QWORD *)v46 + 68) = v45;
    v9 = v210;
    a2 = (uint64_t)v5;
  }
  while (v211 != v42);
  outlined consume of AccessibilityAttachment.Tree((uint64_t)v5, v208, 0);
  *v206 = v9;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  unint64_t *v1;
  void (*v3)(char **);
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = PlatformItemListTransform.value.getter(*v1);
  v5 = v4;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlatformItemListTransform()
{
  return 0xD000000000000026;
}

uint64_t PlatformAccessibilityEnv.updateValue()()
{
  char v0;
  char v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  AGGraphGetValue();
  v1 = v0;
  v3 = 2;
  if (AGGraphGetOutputValue())
  {
    swift_retain();
    swift_retain();
    if ((specialized getter of changed #1 in PlatformAccessibilityEnv.updateValue()(&v3, v1 & 1) & 1) == 0)
    {
      swift_release();
      return swift_release();
    }
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  PropertyList.Tracker.reset()();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v4 = v6;
  v5 = v7;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized getter of changed #1 in PlatformAccessibilityEnv.updateValue()(_BYTE *a1, char a2)
{
  int v2;
  char v4;

  v2 = *a1;
  if (v2 == 2)
  {
    if ((a2 & 1) != 0)
    {
      swift_retain();
      swift_retain();
      v4 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
    }
    else
    {
      v4 = 0;
    }
    swift_beginAccess();
    *a1 = v4 & 1;
  }
  else
  {
    v4 = v2 & 1;
  }
  return v4 & 1;
}

void PlatformAccessibilityContent.updateValue()()
{
  _DWORD *v0;
  _DWORD *v1;
  uint64_t *Value;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void **v8;
  int v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  void *v49;
  char *v50;
  char *v51;
  void *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char *v66;
  id v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  id v78;
  char *v79;
  void *v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  id v86;
  void *v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  id v96;
  char *v97;
  void *v98;
  uint64_t v99;
  id v100;
  void **v101;
  uint64_t v102;
  void *v103;
  id v104;
  void *v105;
  uint64_t v106;
  void *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  id v121;
  char *v122;
  void *v123;
  uint64_t v124;
  id v125;
  void **v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  id v130;
  void *v131;
  char *v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  char *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  void *v143;
  _DWORD *v144;
  void **v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  unint64_t v152;
  uint64_t v153;
  char v154;
  char *v155;
  int v156;
  void *v157;
  void *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;

  v1 = v0;
  v174 = *MEMORY[0x1E0C80C00];
  Value = (uint64_t *)AGGraphGetValue();
  v4 = v3;
  v5 = Value[1];
  v172 = *Value;
  v173 = (void *)v5;
  swift_retain();
  swift_retain();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
    goto LABEL_7;
  v159 = v4;
  if (*v0 == *MEMORY[0x1E0CFED28])
    goto LABEL_7;
  v6 = AGGraphGetValue();
  v156 = v7;
  v8 = *(void ***)v6;
  v9 = *(unsigned __int8 *)(v6 + 16);
  v157 = *(void **)(v6 + 8);
  outlined copy of AccessibilityAttachment.Tree(*(_QWORD *)v6, v157, v9);
  if (!v9)
  {
    v154 = 0;
    swift_bridgeObjectRetain();
    v14 = (uint64_t)v8;
    goto LABEL_105;
  }
  if (v9 != 1)
  {
LABEL_7:
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v172 = 0;
    v173 = 0;
    AGGraphSetOutputValue();
LABEL_8:
    swift_release();
    swift_release();
    return;
  }
  v154 = 1;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_bridgeObjectRetain();
  v10 = Dictionary.init(minimumCapacity:)();
  v163 = v10;
  v11 = v8[2];
  if (!v11)
    goto LABEL_104;
  v12 = 0;
  v13 = v8 + 4;
  v145 = v8;
  v142 = v8 + 4;
  v143 = v8[2];
  while (1)
  {
    if (v12 >= (unint64_t)v8[2])
      goto LABEL_112;
    v18 = &v13[3 * v12];
    v19 = *v18;
    v20 = (void *)v18[1];
    v21 = *((unsigned __int8 *)v18 + 16);
    if (!v21)
    {
      v151 = 0;
      v152 = v12;
      v15 = v20;
      swift_bridgeObjectRetain_n();
      v16 = v15;
      v17 = v19;
      goto LABEL_11;
    }
    if (v21 == 1)
      break;
LABEL_12:
    if ((void *)++v12 == v11)
      goto LABEL_110;
  }
  v151 = 1;
  v152 = v12;
  v147 = *(_QWORD *)(v19 + 16);
  if (!v147)
  {
    outlined copy of AccessibilityAttachment.Tree(v19, v20, 1);
    swift_bridgeObjectRetain();
    v132 = (char *)MEMORY[0x1E0DEE9D8];
    goto LABEL_101;
  }
  v149 = v19 + 32;
  outlined copy of AccessibilityAttachment.Tree(v19, v20, 1);
  v134 = v20;
  outlined copy of AccessibilityAttachment.Tree(v19, v20, 1);
  swift_bridgeObjectRetain();
  v22 = 0;
  v23 = (char *)MEMORY[0x1E0DEE9D8];
  v141 = v19;
LABEL_20:
  v25 = v149 + 24 * v22;
  v26 = *(_QWORD *)v25;
  v27 = *(void **)(v25 + 8);
  v28 = *(unsigned __int8 *)(v25 + 16);
  if (!v28)
  {
    v146 = v22;
    v155 = v23;
    v106 = v26;
    v107 = v27;
    v108 = v27;
    v109 = v106;
    swift_bridgeObjectRetain();
    goto LABEL_84;
  }
  if (v28 != 1)
    goto LABEL_19;
  v146 = v22;
  v155 = v23;
  v148 = *(_QWORD *)(v26 + 16);
  v136 = v27;
  v137 = v26;
  if (!v148)
  {
    v114 = v26;
    v115 = v27;
    outlined copy of AccessibilityAttachment.Tree(v26, v27, 1);
    outlined copy of AccessibilityAttachment.Tree(v114, v115, 1);
    swift_bridgeObjectRetain();
    v32 = (char *)MEMORY[0x1E0DEE9D8];
    v116 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v116)
      goto LABEL_98;
    goto LABEL_89;
  }
  v153 = v26 + 32;
  v29 = v26;
  v30 = v27;
  outlined copy of AccessibilityAttachment.Tree(v26, v27, 1);
  outlined copy of AccessibilityAttachment.Tree(v29, v30, 1);
  outlined copy of AccessibilityAttachment.Tree(v29, v30, 1);
  swift_bridgeObjectRetain();
  v31 = 0;
  v32 = (char *)MEMORY[0x1E0DEE9D8];
  v144 = v1;
LABEL_26:
  v34 = v153 + 24 * v31;
  v36 = *(_QWORD *)v34;
  v35 = *(void **)(v34 + 8);
  v37 = *(unsigned __int8 *)(v34 + 16);
  if (!v37)
  {
    v150 = v31;
    v42 = v35;
    v43 = v35;
    v44 = v36;
    swift_bridgeObjectRetain();
    goto LABEL_31;
  }
  if (v37 != 1)
    goto LABEL_25;
  v150 = v31;
  v160 = *(_QWORD *)(v36 + 16);
  v138 = v32;
  v139 = v35;
  v140 = v36;
  if (!v160)
  {
    v49 = v35;
    outlined copy of AccessibilityAttachment.Tree(v36, v35, 1);
    outlined copy of AccessibilityAttachment.Tree(v36, v49, 1);
    swift_bridgeObjectRetain();
    v50 = (char *)MEMORY[0x1E0DEE9D8];
    goto LABEL_72;
  }
  v161 = v36 + 32;
  v38 = v36;
  v39 = v36;
  v40 = v35;
  outlined copy of AccessibilityAttachment.Tree(v38, v35, 1);
  outlined copy of AccessibilityAttachment.Tree(v39, v40, 1);
  outlined copy of AccessibilityAttachment.Tree(v39, v40, 1);
  swift_bridgeObjectRetain();
  v41 = 0;
  v162 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v54 = v161 + 24 * v41;
    v55 = *(_QWORD *)v54;
    v56 = *(void **)(v54 + 8);
    v57 = *(unsigned __int8 *)(v54 + 16);
    if (!v57)
    {
      v70 = v56;
      v71 = v56;
      v72 = v55;
      swift_bridgeObjectRetain();
LABEL_67:
      v88 = v162;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v162 + 2) + 1, 1, v162);
      v90 = *((_QWORD *)v88 + 2);
      v89 = *((_QWORD *)v88 + 3);
      v162 = v88;
      if (v90 >= v89 >> 1)
      {
        v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v89 > 1), v90 + 1, 1, v88);
        v52 = v70;
        v162 = v51;
      }
      else
      {
        v52 = v70;
      }
      *((_QWORD *)v162 + 2) = v90 + 1;
      v53 = &v162[16 * v90];
      *((_QWORD *)v53 + 4) = v72;
      *((_QWORD *)v53 + 5) = v52;
      goto LABEL_38;
    }
    if (v57 == 1)
      break;
LABEL_38:
    if (++v41 == v160)
    {
      outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
      v32 = v138;
      v50 = v162;
LABEL_72:
      v91 = v50;
      v92 = *((_QWORD *)v50 + 2);
      if (!v92)
      {
        AccessibilityAttachment.init()();
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
        outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
        outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
        v44 = v170;
        v42 = v171;
        goto LABEL_31;
      }
      v93 = v92 - 1;
      if (v92 == 1)
      {
        v94 = (void *)*((_QWORD *)v50 + 5);
        v170 = *((_QWORD *)v50 + 4);
        v95 = v170;
        v96 = v94;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
        outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
        outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
        v44 = v95;
        v42 = v94;
        v32 = v138;
        goto LABEL_31;
      }
      v97 = &v50[16 * v93];
      v99 = *((_QWORD *)v97 + 4);
      v98 = (void *)*((_QWORD *)v97 + 5);
      v168 = v99;
      v169 = v98;
      v100 = v98;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v101 = (void **)&v91[16 * v92 + 8];
      v8 = (void **)(v92 - 2);
      while ((uint64_t)v8 < v93)
      {
        v102 = (uint64_t)*(v101 - 1);
        v103 = *v101;
        v166 = v102;
        v104 = v103;
        swift_bridgeObjectRetain();
        AccessibilityProperties.merge(with:)(&v166);
        v166 = v168;
        v167 = v169;
        v105 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v105)
        {
          v166 = v102;
          v167 = v103;
          if (AccessibilityAttachment.platformElement.getter())
            AccessibilityAttachment.platformElement.setter();
        }

        swift_bridgeObjectRelease();
        v101 -= 2;
        v8 = (void **)((char *)v8 - 1);
        if (v8 == (void **)-1)
        {
          swift_bridgeObjectRelease_n();
          outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
          outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
          outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
          v44 = v168;
          v42 = v169;
          v8 = v145;
          v32 = v138;
LABEL_31:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v32 + 2) + 1, 1, v32);
          v45 = v32;
          v46 = *((_QWORD *)v32 + 2);
          v47 = v45;
          v48 = *((_QWORD *)v45 + 3);
          if (v46 >= v48 >> 1)
            v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v46 + 1, 1, v47);
          *((_QWORD *)v47 + 2) = v46 + 1;
          v33 = &v47[16 * v46];
          v32 = v47;
          *((_QWORD *)v33 + 4) = v44;
          *((_QWORD *)v33 + 5) = v42;
          v31 = v150;
LABEL_25:
          if (++v31 != v148)
            goto LABEL_26;
          outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
          v116 = *((_QWORD *)v32 + 2);
          if (!v116)
          {
LABEL_98:
            AccessibilityAttachment.init()();
            swift_bridgeObjectRelease();
            outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
            outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
            outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
            v109 = v172;
            v107 = v173;
            goto LABEL_84;
          }
LABEL_89:
          v117 = v32;
          v118 = v116 - 1;
          if (v116 == 1)
          {
            v119 = (void *)*((_QWORD *)v117 + 5);
            v172 = *((_QWORD *)v117 + 4);
            v120 = v172;
            v121 = v119;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
            outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
            outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
            v109 = v120;
            v107 = v119;
            goto LABEL_84;
          }
          v122 = &v117[16 * v118];
          v124 = *((_QWORD *)v122 + 4);
          v123 = (void *)*((_QWORD *)v122 + 5);
          v170 = v124;
          v171 = v123;
          v125 = v123;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v126 = (void **)&v117[16 * v116 + 8];
          v127 = v116 - 2;
          while (v127 < v118)
          {
            v128 = (uint64_t)*(v126 - 1);
            v129 = *v126;
            v168 = v128;
            v130 = v129;
            swift_bridgeObjectRetain();
            AccessibilityProperties.merge(with:)(&v168);
            v168 = v170;
            v169 = v171;
            v131 = (void *)AccessibilityAttachment.platformElement.getter();

            if (!v131)
            {
              v168 = v128;
              v169 = v129;
              if (AccessibilityAttachment.platformElement.getter())
                AccessibilityAttachment.platformElement.setter();
            }

            swift_bridgeObjectRelease();
            v126 -= 2;
            if (--v127 == -1)
            {
              swift_bridgeObjectRelease_n();
              outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
              outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
              outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
              v109 = v170;
              v107 = v171;
              v8 = v145;
LABEL_84:
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v155 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v155 + 2) + 1, 1, v155);
              v22 = v146;
              v110 = v109;
              v23 = v155;
              v112 = *((_QWORD *)v155 + 2);
              v111 = *((_QWORD *)v155 + 3);
              if (v112 >= v111 >> 1)
              {
                v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v111 > 1), v112 + 1, 1, v155);
                v110 = v109;
                v22 = v146;
                v23 = v113;
              }
              *((_QWORD *)v23 + 2) = v112 + 1;
              v24 = &v23[16 * v112];
              *((_QWORD *)v24 + 4) = v110;
              *((_QWORD *)v24 + 5) = v107;
              v19 = v141;
LABEL_19:
              if (++v22 != v147)
                goto LABEL_20;
              v20 = v134;
              v132 = v23;
              outlined consume of AccessibilityAttachment.Tree(v19, v134, 1);
LABEL_101:
              static AccessibilityAttachment.combine(_:)(v132, &v172);
              swift_bridgeObjectRelease();
              outlined consume of AccessibilityAttachment.Tree(v19, v20, 1);
              v17 = v172;
              v16 = v173;
LABEL_11:
              v172 = v17;
              swift_bridgeObjectRetain();
              AccessibilityProperties.merge(with:)(&v172);

              swift_bridgeObjectRelease();
              outlined consume of AccessibilityAttachment.Tree(v19, v20, v151);
              swift_bridgeObjectRelease();
              v13 = v142;
              v11 = v143;
              v12 = v152;
              goto LABEL_12;
            }
          }
          __break(1u);
LABEL_112:
          __break(1u);
        }
      }
      __break(1u);
LABEL_110:
      outlined consume of AccessibilityAttachment.Tree((uint64_t)v8, v157, 1);
      v14 = v163;
      goto LABEL_105;
    }
  }
  v58 = *(_QWORD *)(v55 + 16);
  v158 = v56;
  if (v58)
  {
    outlined copy of AccessibilityAttachment.Tree(v55, v56, 1);
    outlined copy of AccessibilityAttachment.Tree(v55, v56, 1);
    outlined copy of AccessibilityAttachment.Tree(v55, v56, 1);
    swift_bridgeObjectRetain();
    v59 = v55;
    v60 = (_BYTE *)(v55 + 48);
    v61 = (char *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v63 = *((_QWORD *)v60 - 2);
      v64 = (void *)*((_QWORD *)v60 - 1);
      if (!*v60)
        break;
      if (*v60 == 1)
      {
        outlined copy of AccessibilityAttachment.Tree(*((_QWORD *)v60 - 2), *((void **)v60 - 1), 1);
        outlined copy of AccessibilityAttachment.Tree(v63, v64, 1);
        v65 = swift_bridgeObjectRetain();
        v66 = specialized Sequence.compactMap<A>(_:)(v65);
        static AccessibilityAttachment.combine(_:)(v66, &v166);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v63, v64, 1);
        outlined consume of AccessibilityAttachment.Tree(v63, v64, 1);
        swift_bridgeObjectRelease();
        v63 = v166;
        v64 = v167;
LABEL_49:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v61 + 2) + 1, 1, v61);
        v69 = *((_QWORD *)v61 + 2);
        v68 = *((_QWORD *)v61 + 3);
        if (v69 >= v68 >> 1)
          v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v61);
        *((_QWORD *)v61 + 2) = v69 + 1;
        v62 = &v61[16 * v69];
        *((_QWORD *)v62 + 4) = v63;
        *((_QWORD *)v62 + 5) = v64;
      }
      v60 += 24;
      if (!--v58)
      {
        v55 = v59;
        outlined consume of AccessibilityAttachment.Tree(v59, v56, 1);
        v8 = v145;
        goto LABEL_56;
      }
    }
    v67 = v64;
    swift_bridgeObjectRetain();
    goto LABEL_49;
  }
  outlined copy of AccessibilityAttachment.Tree(v55, v56, 1);
  outlined copy of AccessibilityAttachment.Tree(v55, v56, 1);
  swift_bridgeObjectRetain();
  v61 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_56:
  v73 = *((_QWORD *)v61 + 2);
  v74 = v73 - 1;
  if (v73 == 1)
  {
    v75 = v55;
    v77 = (void *)*((_QWORD *)v61 + 5);
    v168 = *((_QWORD *)v61 + 4);
    v76 = v168;
    v78 = v77;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v75, v158, 1);
    outlined consume of AccessibilityAttachment.Tree(v75, v158, 1);
    outlined consume of AccessibilityAttachment.Tree(v75, v158, 1);
    v72 = v76;
    v70 = v77;
    v1 = v144;
    goto LABEL_67;
  }
  if (!v73)
  {
    AccessibilityAttachment.init()();
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v55, v158, 1);
    outlined consume of AccessibilityAttachment.Tree(v55, v158, 1);
    outlined consume of AccessibilityAttachment.Tree(v55, v158, 1);
    v72 = v168;
    v70 = v169;
    v1 = v144;
    goto LABEL_67;
  }
  v135 = v55;
  v79 = &v61[16 * v74];
  v81 = *((_QWORD *)v79 + 4);
  v80 = (void *)*((_QWORD *)v79 + 5);
  v166 = v81;
  v167 = v80;
  v82 = v80;
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  v8 = (void **)&v61[16 * v73 + 8];
  v83 = v73 - 2;
  while (v83 < v74)
  {
    v85 = (uint64_t)*(v8 - 1);
    v84 = *v8;
    v164 = v85;
    v86 = v84;
    swift_bridgeObjectRetain();
    AccessibilityProperties.merge(with:)(&v164);
    v164 = v166;
    v165 = v167;
    v87 = (void *)AccessibilityAttachment.platformElement.getter();

    if (!v87)
    {
      v164 = v85;
      v165 = v84;
      if (AccessibilityAttachment.platformElement.getter())
        AccessibilityAttachment.platformElement.setter();
    }

    v10 = swift_bridgeObjectRelease();
    v8 -= 2;
    if (--v83 == -1)
    {
      swift_bridgeObjectRelease_n();
      outlined consume of AccessibilityAttachment.Tree(v135, v158, 1);
      outlined consume of AccessibilityAttachment.Tree(v135, v158, 1);
      outlined consume of AccessibilityAttachment.Tree(v135, v158, 1);
      v72 = v166;
      v70 = v167;
      v1 = v144;
      v8 = v145;
      goto LABEL_67;
    }
  }
  __break(1u);
LABEL_104:
  v14 = v10;
  outlined consume of AccessibilityAttachment.Tree((uint64_t)v8, v157, 1);
LABEL_105:
  if (((v159 | v156) & 1) != 0
    || (type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]), !AGGraphGetOutputValue()))
  {
    v133 = AGCreateWeakAttribute();
    v172 = v14;
    v173 = (void *)v133;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    AGGraphSetOutputValue();
    outlined consume of AccessibilityAttachment.Tree((uint64_t)v8, v157, v154);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of AccessibilityAttachment.Tree((uint64_t)v8, v157, v154);
}

uint64_t protocol witness for Rule.value.getter in conformance MakePlatformTransform@<X0>(_OWORD *a1@<X8>)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  *a1 = *(_OWORD *)AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

uint64_t DisplayListTransform.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t DisplayListTransform.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t Value;
  char v5;

  if (*(_DWORD *)(v1 + 48) == *MEMORY[0x1E0CFED28])
  {
    result = 0;
    *(_BYTE *)(a1 + 10) = 0;
    *(_WORD *)(a1 + 8) = 0;
  }
  else
  {
    Value = AGGraphGetValue();
    v5 = *(_BYTE *)(Value + 10);
    *(_WORD *)(a1 + 8) = *(_WORD *)(Value + 8);
    *(_BYTE *)(a1 + 10) = v5;
    result = swift_bridgeObjectRetain();
  }
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t DisplayListTransform.deferredAttachment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t Value;
  void *v5;
  uint64_t v6;
  char v7;

  result = *(unsigned int *)(v1 + 52);
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = -1;
  }
  else
  {
    Value = AGGraphGetValue();
    v6 = *(_QWORD *)Value;
    v5 = *(void **)(Value + 8);
    *(_QWORD *)a1 = *(_QWORD *)Value;
    *(_QWORD *)(a1 + 8) = v5;
    v7 = *(_BYTE *)(Value + 16);
    *(_BYTE *)(a1 + 16) = v7;
    return outlined copy of AccessibilityAttachment.Tree(v6, v5, v7);
  }
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityPlatformItemTransform()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

uint64_t DisplayListTransform.value.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  unint64_t v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  id v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t result;
  unsigned __int16 v25;
  char v26;
  _QWORD *v27;
  uint64_t Value;
  char *v29;
  char v30;
  uint64_t v31;
  char *v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  void *v48;
  __int128 v49;
  id v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  __int128 *v58;
  __int128 v59;
  CGFloat v60;
  double v61;
  CGFloat v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void **v67;
  void *v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t (*v73)(void);
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  __int128 *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  char *v86;
  __int16 v87;
  char v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  _QWORD *v92;
  __int128 *v93;
  __int128 v94;
  void (*v95)(char *, uint64_t, uint64_t);
  void (*v96)(char *, uint64_t);
  char v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  char *v108;
  void (*v109)(__int128 *__return_ptr, __int128 *, id, uint64_t, uint64_t, uint64_t);
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  void (*v114)(char *, uint64_t, uint64_t);
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  unsigned __int16 v125;
  unsigned __int8 v126;
  int v127;
  char *v128;
  __int16 v129;
  char v130;
  int v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  unsigned __int16 v136;
  unsigned __int8 v137;
  int v138;
  __int128 v139;
  __int128 v140;
  _OWORD v141[2];
  unsigned __int16 v142;
  unsigned __int8 v143;
  int v144;
  char v145;
  char *v146;
  uint64_t v147;
  unsigned __int16 v148;
  char v149;
  __int128 v150;
  __int128 v151;
  _BYTE v152[28];

  v3 = v2;
  v107 = a2;
  v5 = type metadata accessor for AccessibilityNodeAttachment();
  v119 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v116 = (char *)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = a1;
  v14 = v2[1];
  v150 = *v2;
  v151 = v14;
  v16 = *v2;
  v15 = v2[1];
  *(_OWORD *)v152 = v2[2];
  *(_OWORD *)&v152[12] = *(__int128 *)((char *)v2 + 44);
  v139 = v16;
  v140 = v15;
  v141[0] = v2[2];
  *(_OWORD *)((char *)v141 + 12) = *(__int128 *)((char *)v2 + 44);
  DisplayListTransform.content.getter((uint64_t)&v132);
  if ((_QWORD)v132)
  {
    v147 = v132;
    v148 = WORD4(v132);
    v149 = BYTE10(v132);
  }
  else
  {
    DisplayList.init()();
  }
  v17 = (char *)*MEMORY[0x1E0CFED28];
  v18 = MEMORY[0x1E0DEE9D8];
  if (*(_DWORD *)&v152[24] != (_DWORD)v17)
  {
    v18 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v19 = v2[1];
  v139 = *v2;
  v140 = v19;
  v141[0] = v2[2];
  *(_OWORD *)((char *)v141 + 12) = *(__int128 *)((char *)v2 + 44);
  DisplayListTransform.environment.getter(&v132);
  v139 = v132;
  v20 = EnvironmentValues.accessibilityEnabled.getter();
  swift_release();
  swift_release();
  if ((v20 & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
    v25 = v148;
    v26 = v149;
    v27 = v107;
    *v107 = v147;
    *((_WORD *)v27 + 4) = v25;
    *((_BYTE *)v27 + 10) = v26;
    return result;
  }
  v146 = (char *)MEMORY[0x1E0DEE9D8];
  v110 = v18 >> 62;
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v115 = v18;
  v22 = (id)HIDWORD(v151);
  if (v21)
  {
    LODWORD(v118) = 0;
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  }
  else
  {
    Value = AGGraphGetValue();
    v29 = v116;
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v23(v116, Value, v9);
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v117 + 24) + 72))(v9);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v9);
    LODWORD(v118) = 0;
    if ((v30 & 1) != 0)
      LODWORD(v118) = (v148 >> 1) & 1;
  }
  v31 = AGGraphGetValue();
  v32 = v116;
  v114 = v23;
  v23(v116, v31, v9);
  v33 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v117 + 24) + 32);
  v120 = *(_QWORD *)(v117 + 24);
  v34 = v33(v115, v9);
  v113 = *(void (**)(char *, uint64_t))(v10 + 8);
  v113(v32, v9);
  v145 = v34 & 1;
  if ((v34 & 1) != 0 || (_DWORD)v118)
  {
    v37 = AGGraphGetValue();
    v38 = v116;
    v114(v116, v37, v9);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v120 + 40))(&v121, v115, v9);
    swift_bridgeObjectRelease();
    v113(v38, v9);
    v39 = v3[1];
    v139 = *v3;
    v140 = v39;
    v141[0] = v3[2];
    *(_OWORD *)((char *)v141 + 12) = *(__int128 *)((char *)v3 + 44);
    DisplayListTransform.deferredAttachment.getter((uint64_t)&v132);
    if (v133 > 1u)
    {
      v3 = 0;
    }
    else
    {
      v40 = (void *)*((_QWORD *)&v132 + 1);
      v41 = v132;
      v3 = 0;
      if ((_BYTE)v133)
      {
        v53 = specialized Sequence.compactMap<A>(_:)(v132);
        static AccessibilityAttachment.combine(_:)(v53, (uint64_t *)&v139);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree?(v41, v40, 1);
        v40 = (void *)*((_QWORD *)&v139 + 1);
        v41 = v139;
      }
      *(_QWORD *)&v139 = v41;
      AccessibilityProperties.merge(with:)((uint64_t *)&v139);
      v139 = v121;
      v54 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v54)
      {
        *(_QWORD *)&v139 = v41;
        *((_QWORD *)&v139 + 1) = v40;
        if (AccessibilityAttachment.platformElement.getter())
          AccessibilityAttachment.platformElement.setter();
      }
      swift_bridgeObjectRelease();

    }
    v32 = (char *)*((_QWORD *)&v121 + 1);
    v34 = v121;
    v22 = *((id *)&v121 + 1);
    swift_bridgeObjectRetain();
    v17 = (char *)MEMORY[0x1E0DEE9D8];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_49;
    goto LABEL_78;
  }
  if (AGGraphGetCurrentAttribute() == (_DWORD)v17)
  {
    __break(1u);
LABEL_78:
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
LABEL_49:
    v56 = *((_QWORD *)v17 + 2);
    v55 = *((_QWORD *)v17 + 3);
    if (v56 >= v55 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), v56 + 1, 1, v17);
    *((_QWORD *)v17 + 2) = v56 + 1;
    v57 = &v17[16 * v56];
    *((_QWORD *)v57 + 4) = v34;
    *((_QWORD *)v57 + 5) = v32;

    swift_bridgeObjectRelease();
    v146 = v17;
    goto LABEL_52;
  }
  AccessibilityAttachmentToken.init<A>(_:)();
  v112 = v139;
  LODWORD(v111) = BYTE8(v139);
  if (v110)
  {
    v35 = (id)v115;
    swift_bridgeObjectRetain();
    v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v36 < 0)
    {
      __break(1u);
      goto LABEL_80;
    }
  }
  else
  {
    v35 = (id)v115;
    v36 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v36)
  {
    v42 = 0;
    v3 = 0;
    v109 = *(void (**)(__int128 *__return_ptr, __int128 *, id, uint64_t, uint64_t, uint64_t))(v120 + 48);
    v17 = (char *)MEMORY[0x1E0DEE9D8];
    v108 = v8;
    v110 = v36;
    do
    {
      v43 = AGGraphGetValue();
      v44 = v116;
      v114(v116, v43, v9);
      *(_QWORD *)&v139 = v112;
      BYTE8(v139) = v111;
      v109(&v121, &v139, v35, v42, v9, v120);
      v113(v44, v9);
      v139 = v150;
      v140 = v151;
      v141[0] = *(_OWORD *)v152;
      *(_OWORD *)((char *)v141 + 12) = *(_OWORD *)&v152[12];
      DisplayListTransform.deferredAttachment.getter((uint64_t)&v132);
      if (v133 <= 1u)
      {
        v46 = (void *)*((_QWORD *)&v132 + 1);
        v45 = v132;
        if ((_BYTE)v133)
        {
          v47 = specialized Sequence.compactMap<A>(_:)(v132);
          static AccessibilityAttachment.combine(_:)(v47, (uint64_t *)&v139);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree?(v45, v46, 1);
          v46 = (void *)*((_QWORD *)&v139 + 1);
          v45 = v139;
        }
        *(_QWORD *)&v139 = v45;
        AccessibilityProperties.merge(with:)((uint64_t *)&v139);
        v139 = v121;
        v48 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v48)
        {
          *(_QWORD *)&v139 = v45;
          *((_QWORD *)&v139 + 1) = v46;
          if (AccessibilityAttachment.platformElement.getter())
            AccessibilityAttachment.platformElement.setter();
        }
        swift_bridgeObjectRelease();

      }
      v49 = v121;
      v139 = v121;
      if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
      {
        swift_bridgeObjectRelease();

      }
      else
      {
        v50 = *((id *)&v49 + 1);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
        v52 = *((_QWORD *)v17 + 2);
        v51 = *((_QWORD *)v17 + 3);
        if (v52 >= v51 >> 1)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v52 + 1, 1, v17);
        *((_QWORD *)v17 + 2) = v52 + 1;
        *(_OWORD *)&v17[16 * v52 + 32] = v49;

        swift_bridgeObjectRelease();
        v146 = v17;
        v8 = v108;
      }
      ++v42;
      v35 = (id)v115;
    }
    while (v110 != v42);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = 0;
    v17 = (char *)MEMORY[0x1E0DEE9D8];
  }
LABEL_52:
  v139 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v139 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v58 = (__int128 *)AGGraphGetValue();
  v59 = v58[1];
  v139 = *v58;
  v140 = v59;
  v60 = MEMORY[0x18D75BE3C]();
  v62 = v61;
  DisplayList.Version.init(forUpdate:)();
  v63 = (char *)v139;
  if ((BYTE4(v150) & 1) != 0)
  {
    v139 = 0uLL;
    v64 = 1;
    *(_QWORD *)&v140 = 0;
    *((_QWORD *)&v140 + 1) = 1;
    v65 = *((_QWORD *)v17 + 2);
    if (!v65)
    {
      v117 = 0;
      v113 = 0;
      v114 = 0;
      goto LABEL_60;
    }
    v66 = v63;
    swift_bridgeObjectRetain_n();
    v67 = (void **)(v17 + 40);
    while (1)
    {
      v68 = *v67;
      *(_QWORD *)&v132 = *(v67 - 1);
      *((_QWORD *)&v132 + 1) = v68;
      v35 = v68;
      swift_bridgeObjectRetain();
      closure #1 in DisplayListTransform.value.getter((uint64_t *)&v139, (uint64_t *)&v132, &v150, v9, v120);
      if (v3)
        break;
      v67 += 2;

      swift_bridgeObjectRelease();
      if (!--v65)
      {
        swift_bridgeObjectRelease_n();
        v113 = (void (*)(char *, uint64_t))*((_QWORD *)&v139 + 1);
        v114 = (void (*)(char *, uint64_t, uint64_t))v139;
        v64 = *((_QWORD *)&v140 + 1);
        v117 = v140;
        v63 = v66;
        goto LABEL_60;
      }
    }
LABEL_80:
    outlined consume of AccessibilityArchivableViewAttachment?(v139, *((uint64_t *)&v139 + 1), v140, *((uint64_t *)&v140 + 1));
    swift_bridgeObjectRelease();

    result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  v113 = 0;
  v114 = 0;
  v117 = 0;
  v64 = 1;
LABEL_60:
  v115 = v64;
  if ((v145 & 1) == 0)
    v145 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v147, (uint64_t *)&v146, v60, v62) & 1;
  v69 = (uint64_t)v146;
  v70 = *((_QWORD *)v146 + 2);
  v116 = v63;
  if (v70)
  {
    *(_QWORD *)&v132 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v70, 0);
    v71 = v132;
    v112 = v69;
    v72 = (uint64_t *)(v69 + 40);
    v73 = MEMORY[0x1E0CE6150];
    do
    {
      v74 = *v72;
      *(_QWORD *)&v139 = *(v72 - 1);
      *((_QWORD *)&v139 + 1) = v74;
      closure #2 in DisplayListTransform.value.getter((uint64_t *)&v139, (uint64_t)&v150, (uint64_t)&v145, v118, v9, v120);
      *(_QWORD *)&v132 = v71;
      v76 = *(_QWORD *)(v71 + 16);
      v75 = *(_QWORD *)(v71 + 24);
      if (v76 >= v75 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v75 > 1, v76 + 1, 1);
        v71 = v132;
      }
      v72 += 2;
      *(_QWORD *)(v71 + 16) = v76 + 1;
      outlined init with take of TableCellFormula((uint64_t)v8, v71+ ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80))+ *(_QWORD *)(v119 + 72) * v76, (uint64_t (*)(_QWORD))v73);
      --v70;
    }
    while (v70);
    swift_bridgeObjectRelease_n();
    v63 = v116;
  }
  else
  {
    swift_bridgeObjectRelease();
    v71 = MEMORY[0x1E0DEE9D8];
  }
  v77 = swift_allocObject();
  *(_QWORD *)(v77 + 16) = v71;
  *(_QWORD *)&v132 = v77;
  *((_QWORD *)&v132 + 1) = 0x4000000D00000000;
  *(_QWORD *)&v133 = v147;
  BYTE10(v133) = v149;
  WORD4(v133) = v148;
  v78 = v115;
  if (v115 == 1)
  {
    v79 = v150;
    swift_bridgeObjectRetain();
  }
  else
  {
    v80 = (__int128 *)AGGraphGetValue();
    v81 = v80[1];
    v139 = *v80;
    v140 = v81;
    v82 = swift_bridgeObjectRetain();
    MEMORY[0x18D75BE3C](v82);
    v79 = 0;
  }
  LODWORD(v128) = v79;
  *(_QWORD *)&v121 = v63;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v120) = BYTE8(v151);
  LOBYTE(v132) = BYTE8(v151);
  DisplayList.Item.canonicalize(options:)();
  v83 = *((_QWORD *)&v141[0] + 1);
  v84 = v141[1];
  v85 = v142 | (v143 << 16);
  v132 = v139;
  v133 = v140;
  v134 = v141[0];
  v135 = v141[1];
  v137 = v143;
  v136 = v142;
  v138 = v144;
  outlined copy of DisplayList.Item.Value(*((uint64_t *)&v141[0] + 1), *(unint64_t *)&v141[1]);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  v86 = (char *)v121;
  v87 = WORD4(v121);
  v88 = BYTE10(v121);
  if (v78 == 1)
  {
    result = outlined consume of DisplayList.Item.Value(v83, v84);
  }
  else
  {
    v108 = (char *)(v117 & 1);
    v89 = v121;
    v90 = v117;
    v91 = swift_allocObject();
    LODWORD(v119) = v85;
    v92 = (_QWORD *)v91;
    LODWORD(v109) = v150;
    v93 = (__int128 *)AGGraphGetValue();
    v94 = v93[1];
    v132 = *v93;
    v133 = v94;
    v110 = v89;
    swift_bridgeObjectRetain();
    v118 = v84;
    v95 = v114;
    v112 = *((_QWORD *)&v84 + 1);
    v96 = v113;
    outlined copy of AccessibilityArchivableViewAttachment?((uint64_t)v114, (uint64_t)v113, v90, v78);
    v97 = (char)v108;
    outlined copy of Environment<AppIntentExecutor?>.Content((uint64_t)v95, (uint64_t)v96, (char)v108);
    v98 = swift_bridgeObjectRetain();
    v111 = v83;
    v99 = MEMORY[0x18D75BE3C](v98);
    v101 = v100;
    v92[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v92[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    v102 = swift_allocObject();
    v92[2] = v102;
    *(_QWORD *)(v102 + 16) = v95;
    *(_QWORD *)(v102 + 24) = v96;
    *(_BYTE *)(v102 + 32) = v97;
    *(_QWORD *)(v102 + 40) = v78;
    v103 = (int)v109;
    *(_DWORD *)(v102 + 48) = (_DWORD)v109;
    *(double *)(v102 + 56) = v99;
    *(_QWORD *)(v102 + 64) = v101;
    *(_QWORD *)&v121 = v92;
    *((_QWORD *)&v121 + 1) = 0x4000000C00000000;
    *(_QWORD *)&v122 = v89;
    BYTE10(v122) = v88;
    WORD4(v122) = v87;
    v131 = v103;
    v128 = v116;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v121) = v120;
    DisplayList.Item.canonicalize(options:)();
    v104 = *((_QWORD *)&v134 + 1);
    v105 = v135;
    v121 = v132;
    v122 = v133;
    v123 = v134;
    v124 = v135;
    v126 = v137;
    v125 = v136;
    v127 = v138;
    outlined copy of DisplayList.Item.Value(*((uint64_t *)&v134 + 1), v135);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content((uint64_t)v95, (uint64_t)v96, v97);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?((uint64_t)v95, (uint64_t)v96, v117, v78);
    outlined consume of DisplayList.Item.Value(v104, v105);
    outlined consume of DisplayList.Item.Value(v111, v118);
    result = swift_bridgeObjectRelease();
    v86 = v128;
    v87 = v129;
    v88 = v130;
  }
  v106 = v107;
  *v107 = v86;
  *((_WORD *)v106 + 4) = v87;
  *((_BYTE *)v106 + 10) = v88;
  return result;
}

uint64_t closure #1 in DisplayListTransform.value.getter(uint64_t *a1, uint64_t *a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  __int128 v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  _OWORD v22[2];
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v6 = (void *)a2[1];
  v24 = *a2;
  v7 = a3[1];
  v21[0] = *a3;
  v21[1] = v7;
  v22[0] = a3[2];
  *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)((char *)a3 + 44);
  type metadata accessor for DisplayListTransform(0, a4, a5, a4);
  DisplayListTransform.environment.getter(&v23);
  v21[0] = v23;
  v8 = v6;
  swift_bridgeObjectRetain();
  result = specialized AccessibilityArchivableViewAttachment.init(_:environment:)((uint64_t)&v24, (uint64_t *)v21);
  if (v12 != 1)
  {
    v13 = result;
    v14 = v10;
    v15 = v12;
    v16 = v11 & 1;
    v17 = a1[3];
    if (v17 != 1)
    {
      v18 = a1[1];
      v25 = *a1;
      v19 = a1[2] & 1;
      if (v17)
      {
        *(_QWORD *)&v21[0] = v17;
        if (v12)
        {
          v20 = swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)(v20);
          v17 = *(_QWORD *)&v21[0];
        }
      }
      outlined consume of Environment<AppIntentExecutor?>.Content(v13, v14, v16);
      result = swift_bridgeObjectRelease();
      v13 = v25;
      v14 = v18;
      v16 = v19;
      v15 = v17;
    }
    *a1 = v13;
    a1[1] = v14;
    a1[2] = v16;
    a1[3] = v15;
  }
  return result;
}

uint64_t closure #2 in DisplayListTransform.value.getter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;

  v8 = (void *)a1[1];
  v23 = *a1;
  v24 = v8;
  v9 = v8;
  swift_bridgeObjectRetain_n();
  v10 = specialized AccessibilityProperties.subscript.getter(v23);
  v12 = v11;
  v14 = v13;
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
    v16 = 0;
  else
    v16 = v10;
  memset(&v19[1], 0, 32);
  if ((v14 & 1) != 0)
    v17 = 0;
  else
    v17 = v12;
  v20 = v16;
  v21 = v17;
  v22 = v14 & 1;
  type metadata accessor for DisplayListTransform(0, a5, a6, v15);
  DisplayListTransform.environment.getter(v19);
  return AccessibilityNodeAttachment.init(_:platformStorage:in:idiom:createsNode:kind:encode:)();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance DisplayListTransform<A>()
{
  return 0xD000000000000021;
}

uint64_t ArchivableAccessibilityViewModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v14 = Dictionary.init(minimumCapacity:)();
  if (a4)
  {
    v10 = a3 & 1;
    outlined copy of Environment<AppIntentExecutor?>.Content(a1, a2, a3 & 1);
    v11 = swift_bridgeObjectRetain();
    v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI26CodableAccessibilityActionVG_AF03AnygH0Vs5NeverOTg503_s7d4UI37g97ArchivableViewAttachment33_71F62EDC1DAE3BBC7A74521E45BA5A66LLV10propertiesAA0C10PropertiesVvgAA03i2C6H21VAA07CodablecR0VXEfU_AF0gmN10Attachment03_71pqrstuvW0LLVTf1cn_nTf4ng_n(v11, a1, a2, a3 & 1, a4);
    outlined consume of Environment<AppIntentExecutor?>.Content(a1, a2, v10);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v12);
  }
  result = AccessibilityAttachment.init(properties:)();
  *a5 = v14;
  a5[1] = v15;
  return result;
}

uint64_t ArchivableAccessibilityViewModifier.Factory.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  char v25;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableAccessibilityViewModifier.Factory.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys, (uint64_t)&unk_1E1B05468, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v19[0] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = *v1;
  v6 = v1[1];
  v8 = *((_BYTE *)v1 + 16);
  v9 = v1[3];
  v24 = *((_DWORD *)v1 + 8);
  v10 = v1[5];
  v11 = v1[6];
  v12 = a1[3];
  v13 = a1;
  v15 = (char *)v19 - v14;
  __swift_project_boxed_opaque_existential_1(v13, v12);
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v20 = v7;
  v21 = v6;
  v22 = v8;
  v23 = v9;
  v25 = 0;
  lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment();
  v16 = v19[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v16)
    return (*(uint64_t (**)(char *, uint64_t))(v19[0] + 8))(v15, v4);
  v18 = v19[0];
  LODWORD(v20) = v24;
  v25 = 1;
  lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v20 = v10;
  v21 = v11;
  v25 = 2;
  type metadata accessor for CGSize(0);
  lazy protocol witness table accessor for type CGSize and conformance CGSize((unint64_t *)&lazy protocol witness table cache variable for type CGSize and conformance CGSize, MEMORY[0x1E0C9B9F0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v15, v4);
}

uint64_t ArchivableAccessibilityViewModifier.Factory.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  int v14;
  __int128 v16;
  int v17;
  _OWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  unsigned __int8 v24;
  uint64_t v25;
  char v26;
  char v27;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableAccessibilityViewModifier.Factory.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys, (uint64_t)&unk_1E1B05468, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v22 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v19 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = a2;
  v21 = v6;
  v27 = 0;
  lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment();
  v10 = v22;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v11 = v23;
  v12 = v24;
  v13 = v25;
  v26 = v24;
  v27 = 1;
  outlined copy of Environment<AppIntentExecutor?>.Content(v23, *((uint64_t *)&v23 + 1), v24);
  lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  HIDWORD(v19) = v12;
  v14 = v23;
  type metadata accessor for CGSize(0);
  v27 = 2;
  lazy protocol witness table accessor for type CGSize and conformance CGSize(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, MEMORY[0x1E0C9BA08]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v10);
  v16 = v23;
  v17 = v14;
  v18 = v20;
  *v20 = v11;
  *((_BYTE *)v18 + 16) = BYTE4(v19);
  *((_QWORD *)v18 + 3) = v13;
  *((_DWORD *)v18 + 8) = v17;
  *(_OWORD *)((char *)v18 + 40) = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  outlined consume of Environment<AppIntentExecutor?>.Content(v11, *((uint64_t *)&v11 + 1), v26);
  return swift_bridgeObjectRelease();
}

uint64_t ArchivableAccessibilityViewModifier.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v16 = a5;
  HIDWORD(v15) = a4;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableAccessibilityViewModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys, (uint64_t)&unk_1E1B053D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v15 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v17 = a2;
  v18 = a3;
  v19 = BYTE4(v15) & 1;
  v20 = v16;
  lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x797469746E656469;
  if (*v0 != 1)
    v1 = 1702521203;
  if (*v0)
    return v1;
  else
    return 0x656D686361747461;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ArchivableAccessibilityViewModifier.Factory.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for _DisplayList_ViewFactory.makeView() in conformance ArchivableAccessibilityViewModifier.Factory()
{
  uint64_t v0;

  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier>, (uint64_t)&type metadata for ArchivablePlaceholder, (uint64_t)&type metadata for ArchivableAccessibilityViewModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  lazy protocol witness table accessor for type ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier> and conformance <> ModifiedContent<A, B>();
  swift_bridgeObjectRetain();
  return AnyView.init<A>(_:)();
}

void protocol witness for _DisplayList_ViewFactory.identity.getter in conformance ArchivableAccessibilityViewModifier.Factory(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 32);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivableAccessibilityViewModifier.Factory@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return ArchivableAccessibilityViewModifier.Factory.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableAccessibilityViewModifier.Factory(_QWORD *a1)
{
  return ArchivableAccessibilityViewModifier.Factory.encode(to:)(a1);
}

ValueMetadata *protocol witness for AnyViewFactory.viewType.getter in conformance ArchivableAccessibilityViewModifier.Factory()
{
  return &type metadata for ArchivableAccessibilityViewModifier;
}

uint64_t protocol witness for AnyViewFactory.encoding() in conformance ArchivableAccessibilityViewModifier.Factory@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_BYTE *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_DWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  v10 = *(_QWORD *)(v2 + 48);
  *a2 = 0xD00000000000002BLL;
  a2[1] = 0x8000000187BE1210;
  a2[5] = a1;
  a2[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
  a2[7] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
  v11 = swift_allocObject();
  a2[2] = v11;
  *(_QWORD *)(v11 + 16) = v4;
  *(_QWORD *)(v11 + 24) = v5;
  *(_BYTE *)(v11 + 32) = v6;
  *(_QWORD *)(v11 + 40) = v7;
  *(_DWORD *)(v11 + 48) = v8;
  *(_QWORD *)(v11 + 56) = v9;
  *(_QWORD *)(v11 + 64) = v10;
  outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableAccessibilityViewModifier.CodingKeys()
{
  return 0x656D686361747461;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableAccessibilityViewModifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x656D686361747461 && a2 == 0xEA0000000000746ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableAccessibilityViewModifier.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableAccessibilityViewModifier.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ArchivableAccessibilityViewModifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return ArchivableAccessibilityViewModifier.body(content:)(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

_QWORD *protocol witness for Decodable.init(from:) in conformance ArchivableAccessibilityViewModifier@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  result = specialized ArchivableAccessibilityViewModifier.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
    *(_QWORD *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableAccessibilityViewModifier(_QWORD *a1)
{
  uint64_t v1;

  return ArchivableAccessibilityViewModifier.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t closure #1 in closure #1 in AccessibilityArchivableViewAttachment.properties.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X5>, _BYTE *a5@<X8>)
{
  char v9;
  void (*v10)(_QWORD);
  uint64_t v11;
  uint64_t result;

  v9 = a3 & 1;
  outlined copy of Environment<AppIntentExecutor?>.Content(a1, a2, a3 & 1);
  v10 = (void (*)(_QWORD))specialized Environment.wrappedValue.getter(a1, a2, v9);
  v11 = outlined consume of Environment<AppIntentExecutor?>.Content(a1, a2, v9);
  if (v10)
  {
    v10(*(_QWORD *)(a4 + 48));
    result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v10);
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t))(a4 + 56))(v11);
  }
  *a5 = 2;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityArchivableViewAttachment.CodingKeys()
{
  return 0x736E6F69746361;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityArchivableViewAttachment.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x736E6F69746361 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityArchivableViewAttachment.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityArchivableViewAttachment.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityArchivableViewAttachment@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  result = specialized AccessibilityArchivableViewAttachment.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
    *(_QWORD *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityArchivableViewAttachment(_QWORD *a1)
{
  uint64_t v1;

  return specialized AccessibilityArchivableViewAttachment.encode(to:)(a1, *(_QWORD *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityAttachmentModifier, &type metadata for AccessibilityAttachmentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityAttachmentModifier, &type metadata for AccessibilityAttachmentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityAttachmentModifier, &type metadata for AccessibilityAttachmentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier);
  }
  return result;
}

uint64_t protocol witness for AccessibilityViewModifier.initialAttachment(for:) in conformance ArchivedAttachmentModifier@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  void *v2;
  id v3;

  v2 = (void *)v1[1];
  *a1 = *v1;
  a1[1] = v2;
  v3 = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ArchivedAttachmentModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(__int128 *__return_ptr, uint64_t, _OWORD *)@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ArchivedAttachmentModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

id protocol witness for AccessibilityViewModifier.createOrUpdateNode(viewRendererHost:existingNode:) in conformance AccessibilityGestureModifier(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v6;
  id v7;

  if (a3)
  {
    v4 = a3;
  }
  else
  {
    objc_allocWithZone((Class)type metadata accessor for AccessibilityNode());
    v6 = swift_unknownObjectRetain();
    v4 = specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v6, a2, 0);
    swift_unknownObjectRelease();
  }
  v7 = a3;
  return v4;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityGestureModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(__int128 *__return_ptr, uint64_t, _OWORD *)@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityPlatformViewModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityRotorModifier<A>@<D0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;

  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRotorModifier<A>, a5);
  return static AccessibilityViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityOpacityModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(__int128 *__return_ptr, uint64_t, _OWORD *)@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityScrollableModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(__int128 *__return_ptr, uint64_t, _OWORD *)@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityScrollableContextModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(__int128 *__return_ptr, uint64_t, _OWORD *)@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

unint64_t lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv;
  if (!lazy protocol witness table cache variable for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformAccessibilityEnv, &unk_1E1AE5B90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent;
  if (!lazy protocol witness table cache variable for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformAccessibilityContent, &unk_1E1AF7900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MakePlatformTransform and conformance MakePlatformTransform;
  if (!lazy protocol witness table cache variable for type MakePlatformTransform and conformance MakePlatformTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakePlatformTransform, &unk_1E1AD7BF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakePlatformTransform and conformance MakePlatformTransform);
  }
  return result;
}

uint64_t partial apply for implicit closure #3 in static AccessibilityViewModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #3 in static AccessibilityViewModifier._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityContainerModifier, &type metadata for AccessibilityContainerModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityContainerModifier, &type metadata for AccessibilityContainerModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityContainerModifier, &type metadata for AccessibilityContainerModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier);
  }
  return result;
}

uint64_t type metadata accessor for DisplayListTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DisplayListTransform);
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<AccessibilityContainerModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityContainerModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityContainerModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityContainerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayListTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityContainerModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

unint64_t specialized PropertiesTransform.description.getter()
{
  Swift::String v0;

  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000022;
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs10ArraySliceVy7SwiftUI30AccessibilityAttachmentStorage33_2F6327E72581B7F866C81F7546545BE8LLVG_AH0hI0Vs5NeverOTg503_s7f4UI17h37NodeC17removeAttachments5afteryAA0C15i33TokenO_tFAA0cH0VAA0cH7Storage33_2klmnopQ55LLVcfu_33_27bc406762570ff177ca3ffab16a1c9fAlITf3nnnpk_nTf1cn_nTf4x_n(char *result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void **i;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v17;

  v15 = a3 >> 1;
  v3 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v4 = MEMORY[0x1E0DEE9D8];
  if (!v3)
    return (char *)v4;
  v5 = result;
  v17 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v14 = v3;
    v6 = 0;
    v4 = v17;
    for (i = (void **)&v5[40 * a2 + 8]; ; i += 5)
    {
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
        break;
      if (a2 + v6 >= v15 || v6 >= v3)
        goto LABEL_13;
      v9 = (uint64_t)*(i - 1);
      v10 = *i;
      v11 = *(_QWORD *)(v17 + 16);
      v12 = *(_QWORD *)(v17 + 24);
      swift_bridgeObjectRetain();
      result = v10;
      if (v11 >= v12 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v11 + 1, 1);
      *(_QWORD *)(v17 + 16) = v11 + 1;
      v13 = v17 + 16 * v11;
      *(_QWORD *)(v13 + 32) = v9;
      *(_QWORD *)(v13 + 40) = v10;
      ++v6;
      v3 = v14;
      if (v8 == v14)
        return (char *)v4;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI26CodableAccessibilityActionVG_AF03AnygH0Vs5NeverOTg503_s7d4UI37g97ArchivableViewAttachment33_71F62EDC1DAE3BBC7A74521E45BA5A66LLV10propertiesAA0C10PropertiesVvgAA03i2C6H21VAA07CodablecR0VXEfU_AF0gmN10Attachment03_71pqrstuvW0LLVTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  Swift::UInt32 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  __n128 v37;
  __n128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __n128 v43;
  __n128 v44;
  __int16 v45;
  uint64_t v46;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v46 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v9 = a1 + 32;
    v6 = v46;
    v27 = a4 & 1;
    do
    {
      v10 = *(_OWORD *)(v9 + 48);
      v40 = *(_OWORD *)(v9 + 32);
      v41 = v10;
      v42 = *(_QWORD *)(v9 + 64);
      v11 = *(_OWORD *)(v9 + 16);
      v38 = *(__n128 *)v9;
      v39 = v11;
      outlined init with take of CodableAccessibilityAction.ActionKind(&v38, &v43);
      outlined init with take of CodableAccessibilityAction.ActionKind(&v43, &v44);
      v35 = v6;
      v36 = v5;
      switch((char)v45)
      {
        case -5:
          outlined retain of CodableAccessibilityAction((uint64_t)&v38);
          v33 = 0;
          v34 = 0;
          v31 = 4;
          v32 = 0;
          break;
        case -4:
          outlined retain of CodableAccessibilityAction((uint64_t)&v38);
          v33 = 0;
          v34 = 0;
          v31 = 3;
          v32 = 0;
          break;
        case -3:
          outlined retain of CodableAccessibilityAction((uint64_t)&v38);
          v33 = 0;
          v34 = 0;
          v31 = 2;
          v32 = 0;
          break;
        case -2:
          outlined retain of CodableAccessibilityAction((uint64_t)&v38);
          v33 = 0;
          v34 = 0;
          v31 = 1;
          v32 = 0;
          break;
        case -1:
          outlined retain of CodableAccessibilityAction((uint64_t)&v38);
          v33 = 0;
          v34 = 0;
          v31 = 0;
          v32 = 0;
          break;
        default:
          v37 = v44;
          outlined retain of CodableAccessibilityAction((uint64_t)&v38);
          v12 = AccessibilityText.text.getter();
          v33 = v13;
          v34 = v12;
          v31 = v15;
          v32 = v14 & 1;
          break;
      }
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = a2;
      *(_QWORD *)(v16 + 24) = a3;
      *(_BYTE *)(v16 + 32) = v27;
      *(_QWORD *)(v16 + 40) = a5;
      v17 = v41;
      *(_OWORD *)(v16 + 80) = v40;
      *(_OWORD *)(v16 + 96) = v17;
      *(_QWORD *)(v16 + 112) = v42;
      v18 = v39;
      *(__n128 *)(v16 + 48) = v38;
      *(_OWORD *)(v16 + 64) = v18;
      v19 = AccessibilityActionHandlerSeed++;
      type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>(0);
      v21 = v20;
      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = v34;
      *(_QWORD *)(v22 + 24) = v33;
      *(_QWORD *)(v22 + 32) = v32;
      *(_QWORD *)(v22 + 40) = v31;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_QWORD *)(v22 + 64) = 0;
      *(_QWORD *)(v22 + 72) = 2;
      *(_OWORD *)(v22 + 80) = 0u;
      *(_OWORD *)(v22 + 96) = 0u;
      *(_QWORD *)(v22 + 112) = 0;
      *(_QWORD *)(v22 + 120) = partial apply for closure #1 in closure #1 in AccessibilityArchivableViewAttachment.properties.getter;
      *(_QWORD *)(v22 + 128) = v16;
      *(_DWORD *)(v22 + 136) = v19;
      outlined copy of Environment<AppIntentExecutor?>.Content(a2, a3, v27);
      v6 = v35;
      v46 = v35;
      v24 = *(_QWORD *)(v35 + 16);
      v23 = *(_QWORD *)(v35 + 24);
      swift_bridgeObjectRetain();
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1);
        v6 = v46;
      }
      *(_QWORD *)(v6 + 16) = v24 + 1;
      v25 = v6 + 48 * v24;
      *(_QWORD *)(v25 + 32) = v22;
      *(__n128 *)(v25 + 40) = v37;
      *(_QWORD *)(v25 + 56) = v21;
      *(_QWORD *)(v25 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
      *(_BYTE *)(v25 + 72) = 0;
      v9 += 72;
      v5 = v36 - 1;
    }
    while (v36 != 1);
  }
  return v6;
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  char *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a3;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (char *)MEMORY[0x1E0DEE9D8];
  v5 = (_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  v6 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v8 = v5[3];
    v9 = v5[4];
    __swift_project_boxed_opaque_existential_1(v5, v8);
    v21[0] = a2;
    v21[1] = v28;
    (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, uint64_t))(v9 + 96))(&v22, v21, v8, v9);
    if ((_QWORD)v26)
    {
      v20 = v26;
      v10 = v23;
      v18 = v22;
      v19 = v24;
      v11 = v25;
      v12 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v14 = *((_QWORD *)v6 + 2);
      v13 = *((_QWORD *)v6 + 3);
      v15 = v20;
      if (v14 >= v13 >> 1)
      {
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v6);
        v15 = v20;
        v6 = v16;
      }
      *((_QWORD *)v6 + 2) = v14 + 1;
      v7 = &v6[72 * v14];
      *((_OWORD *)v7 + 2) = v18;
      *((_WORD *)v7 + 24) = v10;
      *(_OWORD *)(v7 + 56) = v19;
      v7[72] = v11 & 1;
      *((_OWORD *)v7 + 5) = v15;
      *((_QWORD *)v7 + 12) = v12;
    }
    v5 += 6;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized AccessibilityArchivableViewAttachment.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityArchivableViewAttachment.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys, (uint64_t)&unk_1E1B06B28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[1] = a2;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [CodableAccessibilityAction], (uint64_t)&type metadata for CodableAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [CodableAccessibilityAction] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityAction] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction and conformance CodableAccessibilityAction, MEMORY[0x1E0DEAF10]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

_QWORD *specialized ArchivableAccessibilityViewModifier.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v12;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableAccessibilityViewModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys, (uint64_t)&unk_1E1B053D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v12 - v7;
  v9 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys();
  v10 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = v12;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v10;
}

uint64_t specialized AccessibilityArchivableViewAttachment.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v11;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityArchivableViewAttachment.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys, (uint64_t)&unk_1E1B06B28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v11 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v11 - v6;
  KeyPath = swift_getKeyPath();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys();
  swift_retain();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [CodableAccessibilityAction], (uint64_t)&type metadata for CodableAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type [CodableAccessibilityAction] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityAction] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction and conformance CodableAccessibilityAction, MEMORY[0x1E0DEAF40]);
    v9 = v11;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v9);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  swift_release();
  return KeyPath;
}

uint64_t specialized ArchivableAccessibilityViewModifier.Factory.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D686361747461 && a2 == 0xEA0000000000746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x797469746E656469 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized AccessibilityArchivableViewAttachment.init(_:environment:)(uint64_t a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v2 = *(void **)(a1 + 8);
  v3 = *a2;
  v4 = a2[1];
  KeyPath = swift_getKeyPath();
  swift_retain();

  v6 = swift_bridgeObjectRetain();
  v7 = specialized AccessibilityProperties.subscript.getter(v6);
  swift_bridgeObjectRelease_n();
  swift_retain();
  swift_retain();
  v8 = specialized Sequence.compactMap<A>(_:)(v7, v3, v4);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release_n();
  v9 = *((_QWORD *)v8 + 2);
  swift_release();
  if (!v9)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return KeyPath;
}

uint64_t specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(uint64_t *a1, uint64_t *a2, CGFloat a3, CGFloat a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  int v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v35;
  uint64_t inited;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  _BYTE v42[12];
  unsigned int v43;
  id v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int16 v54;
  char v55;
  int v56;
  CGRect v57;
  CGRect v58;

  type metadata accessor for AccessibilityNodeAttachment?();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v42[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for AccessibilityNodeAttachment();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = &v42[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = *a1;
  if (*(_QWORD *)(*a1 + 16) != 1)
    return 0;
  v18 = *(_WORD *)(v17 + 96);
  v19 = *(_BYTE *)(v17 + 98);
  v20 = *(_DWORD *)(v17 + 100);
  v21 = *(_OWORD *)(v17 + 48);
  v50 = *(_OWORD *)(v17 + 32);
  v51 = v21;
  v22 = *(_OWORD *)(v17 + 80);
  v52 = *(_OWORD *)(v17 + 64);
  v53 = v22;
  v55 = v19;
  v54 = v18;
  v56 = v20;
  DisplayList.Item.frame.getter();
  v58.origin.x = 0.0;
  v58.origin.y = 0.0;
  v58.size.width = a3;
  v58.size.height = a4;
  if (!CGRectEqualToRect(v57, v58))
    return 0;
  v23 = *(_QWORD *)(v17 + 80);
  if (v23 >> 62 != 1)
    return 0;
  v24 = *(_QWORD *)(v17 + 72);
  v25 = *(unsigned __int16 *)(v17 + 96) | (*(unsigned __int8 *)(v17 + 98) << 16);
  if (BYTE4(v23) != 13)
  {
    outlined copy of DisplayList.Item.Value(*(_QWORD *)(v17 + 72), *(_QWORD *)(v17 + 80));
    outlined consume of DisplayList.Effect(v24, v23, SBYTE4(v23));
LABEL_16:
    swift_bridgeObjectRelease();
    return 0;
  }
  v26 = *(_QWORD **)(v24 + 16);
  v27 = *(_QWORD *)(v17 + 72);
  v28 = *(_QWORD *)(v17 + 80);
  v47 = *(_QWORD *)(v17 + 88);
  v49 = a2;
  v29 = v25;
  outlined copy of DisplayList.Item.Value(v27, v28);
  v48 = v26;
  swift_bridgeObjectRetain();
  outlined consume of DisplayList.Effect(v24, v23, 13);
  v30 = *v49;
  if (*(_QWORD *)(*v49 + 16) != 1 || (v46 = v29, v48[2] != 1))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v32 = *(_QWORD *)(v30 + 32);
  v31 = *(void **)(v30 + 40);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v48 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), (uint64_t)v11, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  v44 = v31;
  v45 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityNodeAttachment?);
    return 0;
  }
  v48 = v31;
  outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v16, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
  v33 = v44;
  if (v16[*(int *)(v12 + 24)] == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);

    goto LABEL_15;
  }
  v43 = HIWORD(v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_187BF9830;
  inited = swift_initStackObject();
  v37 = v45;
  v38 = (_QWORD *)inited;
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  AccessibilityNodeAttachment.attachment.getter((_QWORD *)(inited + 32));
  v39 = v48;
  v38[6] = v37;
  v38[7] = v39;
  swift_bridgeObjectRetain();
  v40 = v33;
  static AccessibilityAttachment.combine(_:)(v38, (uint64_t *)(v35 + 32));
  swift_setDeallocating();
  swift_arrayDestroy();

  swift_bridgeObjectRelease();
  *v49 = v35;
  *a1 = v47;
  *((_WORD *)a1 + 4) = v46;
  *((_BYTE *)a1 + 10) = v43;
  v41 = v16[*(int *)(v12 + 20)];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
  return v41;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  int v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t inited;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  id v41;
  _BYTE v42[12];
  unsigned int v43;
  id v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int16 v54;
  char v55;
  int v56;
  CGRect v57;
  CGRect v58;

  type metadata accessor for AccessibilityNodeAttachment?();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v42[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for AccessibilityNodeAttachment();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = &v42[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = *a1;
  if (*(_QWORD *)(*a1 + 16) != 1)
    return 0;
  v18 = *(_WORD *)(v17 + 96);
  v19 = *(_BYTE *)(v17 + 98);
  v20 = *(_DWORD *)(v17 + 100);
  v21 = *(_OWORD *)(v17 + 48);
  v50 = *(_OWORD *)(v17 + 32);
  v51 = v21;
  v22 = *(_OWORD *)(v17 + 80);
  v52 = *(_OWORD *)(v17 + 64);
  v53 = v22;
  v55 = v19;
  v54 = v18;
  v56 = v20;
  DisplayList.Item.frame.getter();
  v58.origin.x = 0.0;
  v58.origin.y = 0.0;
  v58.size.width = a3;
  v58.size.height = a4;
  if (!CGRectEqualToRect(v57, v58))
    return 0;
  v23 = *(_QWORD *)(v17 + 80);
  if (v23 >> 62 != 1)
    return 0;
  v24 = *(_QWORD *)(v17 + 72);
  v25 = *(unsigned __int16 *)(v17 + 96) | (*(unsigned __int8 *)(v17 + 98) << 16);
  if (BYTE4(v23) != 13)
  {
    outlined copy of DisplayList.Item.Value(*(_QWORD *)(v17 + 72), *(_QWORD *)(v17 + 80));
    outlined consume of DisplayList.Effect(v24, v23, SBYTE4(v23));
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  v26 = *(_QWORD **)(v24 + 16);
  v27 = *(_QWORD *)(v17 + 72);
  v28 = *(_QWORD *)(v17 + 80);
  v47 = *(_QWORD *)(v17 + 88);
  v49 = a2;
  v29 = v25;
  outlined copy of DisplayList.Item.Value(v27, v28);
  v48 = v26;
  swift_bridgeObjectRetain();
  outlined consume of DisplayList.Effect(v24, v23, 13);
  v30 = *v49;
  if (*(_QWORD *)(*v49 + 16) != 1 || (v46 = v29, v48[2] != 1))
  {
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v32 = *(_QWORD *)(v30 + 32);
  v31 = *(void **)(v30 + 40);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v48 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), (uint64_t)v11, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  v44 = v31;
  v45 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
  {
    v48 = v31;
    outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v16, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
    v33 = v44;
    if ((v16[*(int *)(v12 + 24)] & 1) == 0)
    {
      v43 = HIWORD(v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_187BF9830;
      inited = swift_initStackObject();
      v38 = v45;
      v39 = (_QWORD *)inited;
      *(_OWORD *)(inited + 16) = xmmword_187BF9820;
      AccessibilityNodeAttachment.attachment.getter((_QWORD *)(inited + 32));
      v40 = v48;
      v39[6] = v38;
      v39[7] = v40;
      swift_bridgeObjectRetain();
      v41 = v33;
      static AccessibilityAttachment.combine(_:)(v39, (uint64_t *)(v36 + 32));
      swift_setDeallocating();
      swift_arrayDestroy();

      swift_bridgeObjectRelease();
      *v49 = v36;
      *a1 = v47;
      *((_WORD *)a1 + 4) = v46;
      *((_BYTE *)a1 + 10) = v43;
      v34 = v16[*(int *)(v12 + 20)];
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
      return v34;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);

    goto LABEL_14;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityNodeAttachment?);
  return 0;
}

uint64_t sub_18749F774()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_18749F798()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t outlined copy of AccessibilityArchivableViewAttachment?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4 != 1)
  {
    outlined copy of Environment<AppIntentExecutor?>.Content(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_18749F834()
{
  uint64_t v0;

  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined consume of AccessibilityArchivableViewAttachment?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4 != 1)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for AccessibilityNodeAttachment?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityNodeAttachment?)
  {
    type metadata accessor for AccessibilityNodeAttachment();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNodeAttachment?);
  }
}

uint64_t outlined destroy of PropertiesTransform<AccessibilityOpacityModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for VStack<TableHeaderViewCore>(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_18749F940()
{
  uint64_t v0;

  return swift_deallocObject();
}

void _s7SwiftUI19PropertiesTransform33_71F62EDC1DAE3BBC7A74521E45BA5A66LLV11updateValueyyFyycfU_TA_0()
{
  AccessibilityNode.updatePlatformProperties()();
}

unint64_t lazy protocol witness table accessor for type PlatformItemListTransform and conformance PlatformItemListTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListTransform and conformance PlatformItemListTransform;
  if (!lazy protocol witness table cache variable for type PlatformItemListTransform and conformance PlatformItemListTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListTransform, &unk_1E1AEAEE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListTransform and conformance PlatformItemListTransform);
  }
  return result;
}

uint64_t outlined init with take of Image.Resolved?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18749FA24()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18749FA48()
{
  uint64_t v0;

  outlined consume of AccessibilityAttachment.Tree(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject();
}

void partial apply for closure #2 in PlatformItemListTransform.value.getter(char **a1)
{
  uint64_t v1;

  closure #2 in PlatformItemListTransform.value.getter(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 36));
}

unint64_t lazy protocol witness table accessor for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform;
  if (!lazy protocol witness table cache variable for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPlatformItemTransform, &type metadata for AccessibilityPlatformItemTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform;
  if (!lazy protocol witness table cache variable for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPlatformItemTransform, &type metadata for AccessibilityPlatformItemTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemsTransform<AccessibilityPlatformItemTransform> and conformance PlatformItemsTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformItemsTransform<AccessibilityPlatformItemTransform> and conformance PlatformItemsTransform<A>;
  if (!lazy protocol witness table cache variable for type PlatformItemsTransform<AccessibilityPlatformItemTransform> and conformance PlatformItemsTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PlatformItemsTransform<AccessibilityPlatformItemTransform>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform, (uint64_t)&type metadata for AccessibilityPlatformItemTransform, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTransform<AccessibilityPlatformItemTransform> and conformance PlatformItemsTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityScrollableModifier, &type metadata for AccessibilityScrollableModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityScrollableModifier, &type metadata for AccessibilityScrollableModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityScrollableModifier, &type metadata for AccessibilityScrollableModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<AccessibilityAttachmentModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityAttachmentModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityAttachmentModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for DisplayListTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayListTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityAttachmentModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPlatformViewModifier, &type metadata for AccessibilityPlatformViewModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPlatformViewModifier, &type metadata for AccessibilityPlatformViewModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPlatformViewModifier, &type metadata for AccessibilityPlatformViewModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier);
  }
  return result;
}

uint64_t sub_18749FC1C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with copy of PropertiesTransform<AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityArchivableViewAttachment.CodingKeys, &unk_1E1B06B28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityArchivableViewAttachment.CodingKeys, &unk_1E1B06B28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityArchivableViewAttachment.CodingKeys, &unk_1E1B06B28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityArchivableViewAttachment.CodingKeys, &unk_1E1B06B28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction and conformance CodableAccessibilityAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction and conformance CodableAccessibilityAction;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction and conformance CodableAccessibilityAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction, &type metadata for CodableAccessibilityAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction and conformance CodableAccessibilityAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction and conformance CodableAccessibilityAction;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction and conformance CodableAccessibilityAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction, &type metadata for CodableAccessibilityAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction and conformance CodableAccessibilityAction);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CodableAccessibilityAction] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [CodableAccessibilityAction], (uint64_t)&type metadata for CodableAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x18D75FFDC](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier;
  if (!lazy protocol witness table cache variable for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelIconPlatformItemModifier, &type metadata for LabelIconPlatformItemModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier;
  if (!lazy protocol witness table cache variable for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelIconPlatformItemModifier, &type metadata for LabelIconPlatformItemModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemsTransform<LabelIconPlatformItemModifier> and conformance PlatformItemsTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformItemsTransform<LabelIconPlatformItemModifier> and conformance PlatformItemsTransform<A>;
  if (!lazy protocol witness table cache variable for type PlatformItemsTransform<LabelIconPlatformItemModifier> and conformance PlatformItemsTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PlatformItemsTransform<LabelIconPlatformItemModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier, (uint64_t)&type metadata for LabelIconPlatformItemModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTransform<LabelIconPlatformItemModifier> and conformance PlatformItemsTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform;
  if (!lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformNewDocumentButtonTransform, &type metadata for PlatformNewDocumentButtonTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform;
  if (!lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformNewDocumentButtonTransform, &type metadata for PlatformNewDocumentButtonTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemsTransform<PlatformNewDocumentButtonTransform> and conformance PlatformItemsTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformItemsTransform<PlatformNewDocumentButtonTransform> and conformance PlatformItemsTransform<A>;
  if (!lazy protocol witness table cache variable for type PlatformItemsTransform<PlatformNewDocumentButtonTransform> and conformance PlatformItemsTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PlatformItemsTransform<PlatformNewDocumentButtonTransform>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform, (uint64_t)&type metadata for PlatformNewDocumentButtonTransform, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTransform<PlatformNewDocumentButtonTransform> and conformance PlatformItemsTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemsTransform<PlatformButtonActionTransform> and conformance PlatformItemsTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformItemsTransform<PlatformButtonActionTransform> and conformance PlatformItemsTransform<A>;
  if (!lazy protocol witness table cache variable for type PlatformItemsTransform<PlatformButtonActionTransform> and conformance PlatformItemsTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PlatformItemsTransform<PlatformButtonActionTransform>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform, (uint64_t)&type metadata for PlatformButtonActionTransform, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTransform<PlatformButtonActionTransform> and conformance PlatformItemsTransform<A>);
  }
  return result;
}

void *type metadata accessor for AccessibilityArchivableViewAttachment.CodingKeys()
{
  return &unk_1E1B06B28;
}

void *type metadata accessor for PlatformItemListTransform()
{
  return &unk_1E1AEAEE8;
}

uint64_t initializeWithCopy for ArchivableAccessibilityViewModifier.Factory(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ArchivableAccessibilityViewModifier.Factory(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for ArchivableAccessibilityViewModifier.Factory(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableAccessibilityViewModifier.Factory(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivableAccessibilityViewModifier.Factory(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivableAccessibilityViewModifier.Factory()
{
  return &type metadata for ArchivableAccessibilityViewModifier.Factory;
}

uint64_t getEnumTagSinglePayload for DisplayListTransform(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 60))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayListTransform(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 60) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 60) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for MakePlatformTransform()
{
  return &unk_1E1AD7BF8;
}

uint64_t assignWithCopy for AccessibilityPlatformItemTransform(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

_QWORD *assignWithTake for AccessibilityPlatformItemTransform(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityPlatformItemTransform()
{
  return &type metadata for AccessibilityPlatformItemTransform;
}

void *type metadata accessor for PlatformAccessibilityContent()
{
  return &unk_1E1AF7900;
}

void *type metadata accessor for PlatformAccessibilityEnv()
{
  return &unk_1E1AE5B90;
}

uint64_t assignWithCopy for PropertiesTransform(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(void **)(a1 + 64);
  v5 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = v5;

  swift_unknownObjectWeakCopyAssign();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

uint64_t initializeWithTake for PropertiesTransform(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_unknownObjectWeakTakeInit();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for PropertiesTransform(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v5 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

  swift_unknownObjectWeakTakeAssign();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertiesTransform(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 84))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PropertiesTransform(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 84) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 84) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for AccessibilityArchivableViewAttachment()
{
  return &unk_1E1B06BD8;
}

_QWORD *assignWithCopy for ArchivedAttachmentModifier(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[1];
  v5 = (void *)a2[1];
  a1[1] = v5;
  v6 = v5;

  return a1;
}

ValueMetadata *type metadata accessor for ArchivedAttachmentModifier()
{
  return &type metadata for ArchivedAttachmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ArchivedAttachmentModifier()
{
  return &protocol witness table for ArchivedAttachmentModifier;
}

unint64_t instantiation function for generic protocol witness table for ArchivedAttachmentModifier(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier();
  result = lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier;
  if (!lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedAttachmentModifier, &type metadata for ArchivedAttachmentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier;
  if (!lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedAttachmentModifier, &type metadata for ArchivedAttachmentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier;
  if (!lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedAttachmentModifier, &type metadata for ArchivedAttachmentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityPlatformItemTransform()
{
  return &protocol witness table for AccessibilityPlatformItemTransform;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityPlatformItemTransform(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in DisplayListTransform<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier>, (uint64_t)&type metadata for ArchivablePlaceholder, (uint64_t)&type metadata for ArchivableAccessibilityViewModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = &protocol witness table for ArchivablePlaceholder;
    v3[1] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier, &type metadata for ArchivableAccessibilityViewModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier, &type metadata for ArchivableAccessibilityViewModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier, &type metadata for ArchivableAccessibilityViewModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier.Factory.CodingKeys, &unk_1E1B05468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier.Factory.CodingKeys, &unk_1E1B05468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier.Factory.CodingKeys, &unk_1E1B05468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier.Factory.CodingKeys, &unk_1E1B05468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment;
  if (!lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityArchivableViewAttachment, &unk_1E1B06BD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment;
  if (!lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityArchivableViewAttachment, &unk_1E1B06BD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CGSize and conformance CGSize(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CGSize(255);
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<AccessibilityPlatformViewModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityPlatformViewModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityPlatformViewModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityPlatformViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier, (uint64_t)&type metadata for AccessibilityPlatformViewModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayListTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityPlatformViewModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<AccessibilityScrollableModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityScrollableModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityScrollableModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityScrollableModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayListTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityScrollableModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityScrollableContextModifier, &type metadata for AccessibilityScrollableContextModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityScrollableContextModifier, &type metadata for AccessibilityScrollableContextModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityScrollableContextModifier, &type metadata for AccessibilityScrollableContextModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<AccessibilityScrollableContextModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityScrollableContextModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityScrollableContextModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityScrollableContextModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier, (uint64_t)&type metadata for AccessibilityScrollableContextModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayListTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityScrollableContextModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<ArchivedAttachmentModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DisplayListTransform<ArchivedAttachmentModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<ArchivedAttachmentModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for DisplayListTransform<ArchivedAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier, (uint64_t)&type metadata for ArchivedAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayListTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<ArchivedAttachmentModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<ArchivedAttachmentModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PropertiesTransform<ArchivedAttachmentModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<ArchivedAttachmentModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PropertiesTransform<ArchivedAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier, (uint64_t)&type metadata for ArchivedAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PropertiesTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<ArchivedAttachmentModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ArchivableAccessibilityViewModifier.Factory.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1874A0DF0 + 4 * byte_187C35A16[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1874A0E24 + 4 * byte_187C35A11[v4]))();
}

uint64_t sub_1874A0E24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874A0E2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1874A0E34);
  return result;
}

uint64_t sub_1874A0E40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1874A0E48);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1874A0E4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874A0E54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ArchivableAccessibilityViewModifier.Factory.CodingKeys()
{
  return &unk_1E1B05468;
}

uint64_t destroy for ArchivableAccessibilityViewModifier.Factory(uint64_t a1)
{
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityArchivableViewAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityArchivableViewAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityArchivableViewAttachment(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ArchivableAccessibilityViewModifier()
{
  return &type metadata for ArchivableAccessibilityViewModifier;
}

unint64_t instantiation function for generic protocol witness table for ArchivableAccessibilityViewModifier(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
  a1[2] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
  result = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
  a1[3] = result;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ArchivableAccessibilityViewModifier()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 *outlined init with take of CodableAccessibilityAction.ActionKind(__n128 *a1, __n128 *a2)
{
  __swift_memcpy18_8(a2, a1);
  return a2;
}

uint64_t outlined retain of CodableAccessibilityAction(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  v5 = *(void **)(a1 + 48);
  outlined copy of CodableAccessibilityAction.ActionKind(*(id *)a1, *(_QWORD *)(a1 + 8), *(_WORD *)(a1 + 16));
  outlined copy of Environment<AppIntentExecutor?>.Content(v2, v3, v4);
  v6 = v5;
  swift_retain();
  return a1;
}

id outlined copy of CodableAccessibilityAction.ActionKind(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 251 && (a3 & 0xFC | 2) != 0xFE)
    return outlined copy of AccessibilityText.Storage(result, a2, a3 & 1);
  return result;
}

id outlined copy of AccessibilityText.Storage(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

uint64_t sub_1874A1260()
{
  uint64_t v0;
  __int16 v1;

  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  v1 = *(_WORD *)(v0 + 64);
  if (v1 != 251 && (v1 & 0xFC | 2) != 0xFE)
    outlined consume of AccessibilityText.Storage(*(void **)(v0 + 48), *(_QWORD *)(v0 + 56), v1 & 1);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AccessibilityArchivableViewAttachment.properties.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in AccessibilityArchivableViewAttachment.properties.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), v1 + 48, a1);
}

uint64_t sub_1874A12F4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityGestureModifier, &type metadata for AccessibilityGestureModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityGestureModifier, &type metadata for AccessibilityGestureModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityGestureModifier, &type metadata for AccessibilityGestureModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityOpacityModifier, &type metadata for AccessibilityOpacityModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityOpacityModifier, &type metadata for AccessibilityOpacityModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityOpacityModifier, &type metadata for AccessibilityOpacityModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier.CodingKeys, &unk_1E1B053D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier.CodingKeys, &unk_1E1B053D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier.CodingKeys, &unk_1E1B053D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier.CodingKeys, &unk_1E1B053D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessibilityArchivableViewAttachment.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1874A1488 + 4 * byte_187C35A1B[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1874A14A8 + 4 * byte_187C35A20[v4]))();
}

_BYTE *sub_1874A1488(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1874A14A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1874A14B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1874A14B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1874A14C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1874A14C8(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for ArchivableAccessibilityViewModifier.CodingKeys()
{
  return &unk_1E1B053D8;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableAccessibilityViewModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = &protocol witness table for ArchivedAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableAccessibilityViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier, (uint64_t)&type metadata for ArchivableAccessibilityViewModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableAccessibilityViewModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableAccessibilityViewModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableAccessibilityViewModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableAccessibilityViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier, (uint64_t)&type metadata for ArchivableAccessibilityViewModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableAccessibilityViewModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<AccessibilityOpacityModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityOpacityModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityOpacityModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier, (uint64_t)&type metadata for AccessibilityOpacityModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayListTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityOpacityModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<AccessibilityGestureModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityGestureModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityGestureModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityGestureModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier, (uint64_t)&type metadata for AccessibilityGestureModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayListTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityGestureModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

uint64_t IconOnlyLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  KeyPath = swift_getKeyPath();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  v3 = swift_allocObject();
  *(_BYTE *)(v3 + 16) = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v11;
  *(_QWORD *)(v4 + 24) = v12;
  swift_retain();
  swift_release();
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t *)(v4 + 16), 0, v13);
  swift_endAccess();
  swift_release();
  swift_release();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t *)(v4 + 16), 0x4000000040uLL);
  swift_endAccess();
  swift_release();
  swift_release();
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = 2;
  swift_retain();
  swift_retain();
  swift_retain();
  v6 = static Alignment.center.getter();
  v8 = v7;
  swift_retain();
  Dictionary.init(minimumCapacity:)();
  AccessibilityAttachment.init(properties:)();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 24) = v12;
  swift_release();
  swift_release();
  swift_release_n();
  result = swift_release();
  *(_QWORD *)a1 = KeyPath;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = partial apply for closure #1 in View.accessibilityLabel<A>(_:label:);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

uint64_t key path getter for ContainerValues.labelItemRole : ContainerValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContainerValueViewTraitKey<LabelItemRole.ContainerKey>, (uint64_t)&type metadata for LabelItemRole.ContainerKey, (uint64_t)&protocol witness table for LabelItemRole.ContainerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContainerValueViewTraitKey);
  lazy protocol witness table accessor for type ContainerValueViewTraitKey<LabelItemRole.ContainerKey> and conformance ContainerValueViewTraitKey<A>();
  result = ViewTraitCollection.value<A>(for:defaultValue:)();
  *a1 = v3;
  return result;
}

uint64_t key path setter for ContainerValues.labelItemRole : ContainerValues()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContainerValueViewTraitKey<LabelItemRole.ContainerKey>, (uint64_t)&type metadata for LabelItemRole.ContainerKey, (uint64_t)&protocol witness table for LabelItemRole.ContainerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContainerValueViewTraitKey);
  lazy protocol witness table accessor for type ContainerValueViewTraitKey<LabelItemRole.ContainerKey> and conformance ContainerValueViewTraitKey<A>();
  return ViewTraitCollection.subscript.setter();
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance IconOnlyLabelStyle@<X0>(uint64_t a1@<X8>)
{
  return IconOnlyLabelStyle.makeBody(configuration:)(a1);
}

void protocol witness for ViewModifier.body(content:) in conformance LabelIconPlatformItemModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v8;
  __int128 v9;

  v6 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v6, &v9);
  swift_bridgeObjectRelease();
  specialized AccessibilityProperties.subscript.setter(a2, a3);
  specialized AccessibilityProperties.subscript.getter(*a1, &v8);
  return specialized AccessibilityProperties.subscript.setter(v8 & (*((_QWORD *)&v8 + 1) | ~*((_QWORD *)&v9 + 1)) | v9 & ~*((_QWORD *)&v8 + 1), *((_QWORD *)&v8 + 1) | *((_QWORD *)&v9 + 1));
}

{
  __int128 v7;
  __int128 v8;

  specialized AccessibilityProperties.subscript.getter(*a1, &v8);
  specialized AccessibilityProperties.subscript.setter(a2, a3);
  specialized AccessibilityProperties.subscript.getter(*a1, &v7);
  return specialized AccessibilityProperties.subscript.setter(v7 & (*((_QWORD *)&v7 + 1) | ~*((_QWORD *)&v8 + 1)) | v8 & ~*((_QWORD *)&v7 + 1), *((_QWORD *)&v7 + 1) | *((_QWORD *)&v8 + 1));
}

uint64_t specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v8 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v8, (uint64_t)&v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(a2, a3, a4);
  specialized AccessibilityProperties.subscript.getter(*a1, (uint64_t)&v19);
  v10 = v22;
  v9 = v23;
  v11 = v24;
  v12 = v19;
  v13 = v20;
  v14 = v21;
  if (v20)
  {
    if (v23)
    {
      v16 = v19;
      v17 = v20;
      v18 = v21;
      AccessibilityIdentifierStorage.merge(with:)();
      v12 = v16;
      v13 = v17;
      v14 = v18;
    }
  }
  else if (v23)
  {
    swift_bridgeObjectRetain();
    v12 = v10;
    v13 = v9;
    v14 = v11;
  }
  else
  {
    v13 = 0;
  }
  specialized AccessibilityProperties.subscript.setter(v12, v13, v14);
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v4, &v7);
  swift_bridgeObjectRelease();
  specialized AccessibilityProperties.subscript.setter(a2);
  specialized AccessibilityProperties.subscript.getter(*a1, &v6);
  return specialized AccessibilityProperties.subscript.setter(v6 & (HIDWORD(v6) | ~HIDWORD(v7)) | v7 & ~HIDWORD(v6) | ((unint64_t)(HIDWORD(v6) | HIDWORD(v7)) << 32));
}

{
  uint64_t v5;
  uint64_t v6;

  specialized AccessibilityProperties.subscript.getter(*a1, &v6);
  specialized AccessibilityProperties.subscript.setter(a2);
  specialized AccessibilityProperties.subscript.getter(*a1, &v5);
  return specialized AccessibilityProperties.subscript.setter(v5 & (HIDWORD(v5) | ~HIDWORD(v6)) | v6 & ~HIDWORD(v5) | ((unint64_t)(HIDWORD(v5) | HIDWORD(v6)) << 32));
}

uint64_t sub_1874A1F2C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.accessibilityLabel<A>(_:label:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in View.accessibilityLabel<A>(_:label:)(a1, *(_BYTE *)(v1 + 16));
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in IconOnlyLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for IconOnlyLabelStyle()
{
  return &type metadata for IconOnlyLabelStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for ViewInputFlagModifier<A>);
    v3[1] = &protocol witness table for LabelIconPlatformItemModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>);
    type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>);
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>)
  {
    type metadata accessor for _ContainerValueWritingModifier<LabelItemRole?>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>);
  }
}

void type metadata accessor for _ContainerValueWritingModifier<LabelItemRole?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for _ContainerValueWritingModifier<LabelItemRole?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for LabelItemRole?, (uint64_t)&type metadata for LabelItemRole, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v5 = type metadata accessor for _ContainerValueWritingModifier(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for _ContainerValueWritingModifier<LabelItemRole?>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for DetachDeferredAccessibilityAttachmentModifier);
    v3[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>);
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
    v3[1] = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>();
    v2[0] = &protocol witness table for LabelStyleConfiguration.Icon;
    v2[1] = &protocol witness table for _ContainerValueWritingModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>)
  {
    type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelIconPlatformItemModifier()
{
  return &type metadata for LabelIconPlatformItemModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in LabelIconPlatformItemModifier()
{
  return &protocol witness table for LabelIconPlatformItemModifier;
}

unint64_t instantiation function for generic protocol witness table for LabelIconPlatformItemModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ContainerValueViewTraitKey<LabelItemRole.ContainerKey> and conformance ContainerValueViewTraitKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ContainerValueViewTraitKey<LabelItemRole.ContainerKey> and conformance ContainerValueViewTraitKey<A>;
  if (!lazy protocol witness table cache variable for type ContainerValueViewTraitKey<LabelItemRole.ContainerKey> and conformance ContainerValueViewTraitKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ContainerValueViewTraitKey<LabelItemRole.ContainerKey>, (uint64_t)&type metadata for LabelItemRole.ContainerKey, (uint64_t)&protocol witness table for LabelItemRole.ContainerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContainerValueViewTraitKey);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerValueViewTraitKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerValueViewTraitKey<LabelItemRole.ContainerKey> and conformance ContainerValueViewTraitKey<A>);
  }
  return result;
}

void NavigationViewStyle._columnBasedBody(configuration:)()
{
  NavigationViewStyle._columnBasedBody(configuration:)();
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for View.body.getter in conformance _NavigationViewStyleConfiguration.Content()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t View.navigationViewStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NavigationViewStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for NavigationViewStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationViewStyleModifier);
}

unint64_t instantiation function for generic protocol witness table for _NavigationViewStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationViewStyleConfiguration.Content, &type metadata for _NavigationViewStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationViewStyleConfiguration.Content, &type metadata for _NavigationViewStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in _NavigationViewStyleConfiguration.Content()
{
  return &protocol witness table for _NavigationViewStyleConfiguration.Content;
}

uint64_t default associated conformance accessor for NavigationViewStyle.NavigationViewStyle._Body2: View()
{
  return MEMORY[0x1E0CE7C28];
}

uint64_t dispatch thunk of NavigationViewStyle._body(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of NavigationViewStyle._columnBasedBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

ValueMetadata *type metadata accessor for _NavigationViewStyleConfiguration()
{
  return &type metadata for _NavigationViewStyleConfiguration;
}

ValueMetadata *type metadata accessor for _NavigationViewStyleConfiguration.Content()
{
  return &type metadata for _NavigationViewStyleConfiguration.Content;
}

uint64_t sub_1874A286C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for NavigationViewStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for NavigationViewStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t getEnumTagSinglePayload for NavigationViewStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874A297C + 4 * byte_187C36790[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for NavigationViewStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationViewStyleModifier<A>()
{
  return &protocol witness table for NavigationViewStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in NavigationViewStyleModifier<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t NavigationViewStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedConformanceWitness;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v17 - v12;
  (*(void (**)(double))(v3 + 40))(v11);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v13, AssociatedTypeWitness, a2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for NavigationViewStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationViewStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationViewStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for ResolvedNavigationViewStyle()
{
  return &type metadata for ResolvedNavigationViewStyle;
}

unint64_t lazy protocol witness table accessor for type NavigationViewStyleModifier<DefaultNavigationViewStyle> and conformance NavigationViewStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NavigationViewStyleModifier<DefaultNavigationViewStyle> and conformance NavigationViewStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type NavigationViewStyleModifier<DefaultNavigationViewStyle> and conformance NavigationViewStyleModifier<A>)
  {
    type metadata accessor for NavigationViewStyleModifier<DefaultNavigationViewStyle>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationViewStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationViewStyleModifier<DefaultNavigationViewStyle> and conformance NavigationViewStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for NavigationViewStyleModifier<DefaultNavigationViewStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for NavigationViewStyleModifier<DefaultNavigationViewStyle>)
  {
    v2 = lazy protocol witness table accessor for type DefaultNavigationViewStyle and conformance DefaultNavigationViewStyle();
    v4 = type metadata accessor for NavigationViewStyleModifier(a1, (uint64_t)&type metadata for DefaultNavigationViewStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for NavigationViewStyleModifier<DefaultNavigationViewStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type DefaultNavigationViewStyle and conformance DefaultNavigationViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultNavigationViewStyle and conformance DefaultNavigationViewStyle;
  if (!lazy protocol witness table cache variable for type DefaultNavigationViewStyle and conformance DefaultNavigationViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultNavigationViewStyle, &type metadata for DefaultNavigationViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultNavigationViewStyle and conformance DefaultNavigationViewStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedNavigationViewStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle;
  if (!lazy protocol witness table cache variable for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedNavigationViewStyle, &type metadata for ResolvedNavigationViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle;
  if (!lazy protocol witness table cache variable for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedNavigationViewStyle, &type metadata for ResolvedNavigationViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedNavigationViewStyle()
{
  lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle();
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for _CustomViewModifierHoverEffect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874A2FAC + 4 * byte_187C36970[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _CustomViewModifierHoverEffect(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for _CustomViewModifierHoverEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _CustomViewModifierHoverEffect);
}

void base witness table accessor for CustomHoverEffect in _CustomViewModifierHoverEffect<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

double static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)@<D0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  void (*v17)(uint64_t *__return_ptr, _BYTE *, _OWORD *, double (*)@<D0>(uint64_t *@<X1>, double *@<X8>), uint64_t, uint64_t, uint64_t);
  double result;
  _OWORD v19[5];
  int v20;
  _BYTE v21[4];
  uint64_t v22;
  double v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v11 = a1[3];
  v26 = a1[2];
  v27 = v11;
  v28 = a1[4];
  v29 = *((_QWORD *)a1 + 10);
  v12 = a1[1];
  v24 = *a1;
  v25 = v12;
  type metadata accessor for _CustomViewModifierHoverEffect(255, a4, a5, a3);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v19[2] = v26;
  v19[3] = v27;
  v19[4] = v28;
  v20 = v29;
  v19[0] = v24;
  v19[1] = v25;
  v13 = swift_allocObject();
  v14 = v27;
  *(_OWORD *)(v13 + 48) = v26;
  *(_OWORD *)(v13 + 64) = v14;
  *(_OWORD *)(v13 + 80) = v28;
  v15 = v29;
  v16 = v25;
  *(_OWORD *)(v13 + 16) = v24;
  *(_OWORD *)(v13 + 32) = v16;
  *(_QWORD *)(v13 + 96) = v15;
  *(_QWORD *)(v13 + 104) = a2;
  *(_QWORD *)(v13 + 112) = a3;
  v17 = *(void (**)(uint64_t *__return_ptr, _BYTE *, _OWORD *, double (*)@<D0>(uint64_t *@<X1>, double *@<X8>), uint64_t, uint64_t, uint64_t))(a5 + 24);
  outlined retain of _ViewInputs((uint64_t)&v24);
  outlined retain of _ViewInputs((uint64_t)&v24);
  swift_retain();
  v17(&v22, v21, v19, partial apply for closure #2 in static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:), v13, a4, a5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a6 = v22;
  result = v23;
  a6[1] = v23;
  return result;
}

uint64_t closure #1 in static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for _CustomViewModifierHoverEffect(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

double closure #2 in static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, void (*a3)(uint64_t *__return_ptr, uint64_t *)@<X3>, double *a4@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  double result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  double v24;

  v6 = *((_DWORD *)a1 + 2);
  v7 = a1[2];
  v8 = a1[5];
  v9 = a1[6];
  v10 = *((_DWORD *)a1 + 20);
  v11 = *(_DWORD *)(a2 + 84);
  v13 = *a1;
  v14 = v6;
  v15 = v7;
  v16 = *(_OWORD *)(a1 + 3);
  v17 = v8;
  v18 = v9;
  v19 = *(_OWORD *)(a1 + 7);
  v20 = a1[9];
  v21 = v10;
  v22 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a3(&v23, &v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a4 = v23;
  result = v24;
  a4[1] = v24;
  return result;
}

void _CustomViewModifierHoverEffect.systemHoverEffect.getter(_WORD *a1@<X8>)
{
  *a1 = 259;
}

void protocol witness for CustomHoverEffect.body(content:) in conformance _CustomViewModifierHoverEffect<A>()
{
  specialized CustomHoverEffect<>.body(content:)();
}

double protocol witness for static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:) in conformance _CustomViewModifierHoverEffect<A>@<D0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

void base witness table accessor for InternalCustomHoverEffect in _CustomViewModifierHoverEffect<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t sub_1874A3508()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

double partial apply for closure #2 in static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)@<D0>(uint64_t *a1@<X1>, double *a2@<X8>)
{
  uint64_t v2;

  return closure #2 in static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(a1, v2 + 16, *(void (**)(uint64_t *__return_ptr, uint64_t *))(v2 + 104), a2);
}

void specialized CustomHoverEffect.bodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized CustomHoverEffect<>.body(content:)()
{
  specialized CustomHoverEffect.bodyError()();
}

uint64_t one-time initialization function for clarityUIContentBackground()
{
  void *v0;
  id v1;
  uint64_t result;

  if (one-time initialization token for clarityUIContentBackground != -1)
    swift_once();
  v0 = (void *)static UIColor.clarityUIContentBackground;
  type metadata accessor for UIColor();
  lazy protocol witness table accessor for type UIColor and conformance UIColor();
  v1 = v0;
  result = Color.init<A>(provider:)();
  static Color.clarityUIContentBackground = result;
  return result;
}

{
  id v0;
  void *v1;
  id v2;
  uint64_t result;
  _QWORD v4[6];

  v0 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v4[4] = closure #1 in variable initialization expression of static UIColor.clarityUIContentBackground;
  v4[5] = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
  v4[3] = &block_descriptor_3_0;
  v1 = _Block_copy(v4);
  v2 = objc_msgSend(v0, sel_initWithDynamicProvider_, v1);
  _Block_release(v1);
  result = swift_release();
  static UIColor.clarityUIContentBackground = (uint64_t)v2;
  return result;
}

uint64_t static Color.clarityUIContentBackground.getter()
{
  return static Color.clarityUIContentBackground.getter(&one-time initialization token for clarityUIContentBackground);
}

uint64_t static Color.clarityUIButtonBackground.getter()
{
  id v0;
  void *v1;
  id v2;
  uint64_t v3;
  _QWORD v5[6];

  v0 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v5[4] = closure #1 in static Color.clarityUIButtonBackground.getter;
  v5[5] = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
  v5[3] = &block_descriptor_31;
  v1 = _Block_copy(v5);
  v2 = objc_msgSend(v0, sel_initWithDynamicProvider_, v1);
  _Block_release(v1);
  swift_release();
  v5[0] = v2;
  type metadata accessor for UIColor();
  lazy protocol witness table accessor for type UIColor and conformance UIColor();
  Color.init<A>(provider:)();
  v3 = Color.opacity(_:)();
  swift_release();
  return v3;
}

id closure #1 in static Color.clarityUIButtonBackground.getter(void *a1)
{
  return closure #1 in static Color.clarityUIButtonBackground.getter(a1, (SEL *)&selRef_systemGray5Color, (SEL *)&selRef_systemBackgroundColor);
}

uint64_t one-time initialization function for clarityUIPressedButtonOverlay(uint64_t a1)
{
  return one-time initialization function for clarityUIPressedButtonOverlay(a1, &static Color.clarityUIPressedButtonOverlay);
}

uint64_t static Color.clarityUIPressedButtonOverlay.getter()
{
  return static Color.clarityUIContentBackground.getter(&one-time initialization token for clarityUIPressedButtonOverlay);
}

uint64_t static Color.clarityUIContentBackground.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain();
}

uint64_t one-time initialization function for clarityUIButtonShadowColor(uint64_t a1)
{
  return one-time initialization function for clarityUIPressedButtonOverlay(a1, &static Color.clarityUIButtonShadowColor);
}

uint64_t static Color.clarityUIButtonShadowColor.getter()
{
  return static Color.clarityUIContentBackground.getter(&one-time initialization token for clarityUIButtonShadowColor);
}

uint64_t one-time initialization function for clarityUINavigationAppIconShadow(uint64_t a1)
{
  return one-time initialization function for clarityUIPressedButtonOverlay(a1, &static Color.clarityUINavigationAppIconShadow);
}

uint64_t one-time initialization function for clarityUIBarShadowColor(uint64_t a1)
{
  return one-time initialization function for clarityUIPressedButtonOverlay(a1, &static Color.clarityUIBarShadowColor);
}

uint64_t one-time initialization function for clarityUIPressedButtonOverlay(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  static Color.black.getter();
  v3 = Color.opacity(_:)();
  result = swift_release();
  *a2 = v3;
  return result;
}

id closure #1 in variable initialization expression of static UIColor.clarityUIContentBackground(void *a1)
{
  return closure #1 in static Color.clarityUIButtonBackground.getter(a1, (SEL *)&selRef_systemBackgroundColor, (SEL *)&selRef_systemGroupedBackgroundColor);
}

id closure #1 in static Color.clarityUIButtonBackground.getter(void *a1, SEL *a2, SEL *a3)
{
  id v5;
  void *v6;
  SEL *v7;

  v5 = objc_msgSend(a1, sel_userInterfaceStyle);
  v6 = (void *)objc_opt_self();
  if (v5 == (id)2)
    v7 = a2;
  else
    v7 = a3;
  return objc_msgSend(v6, *v7);
}

id static UIColor.clarityUIContentBackground.getter()
{
  if (one-time initialization token for clarityUIContentBackground != -1)
    swift_once();
  return (id)static UIColor.clarityUIContentBackground;
}

uint64_t Scene.handlesExternalEvents(matching:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  return Scene.modifier<A>(_:)(&v4, a2, &unk_1E1AF5C18, a3);
}

uint64_t sub_1874A3A5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ActivationConditionsModifier;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

void *type metadata accessor for ActivationConditionsModifier()
{
  return &unk_1E1AF5C18;
}

uint64_t static ActivationConditionsModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 14);
  v16 = *a2;
  v17 = v6;
  v18 = v7;
  v9 = *(_OWORD *)(a2 + 5);
  v19 = *(_OWORD *)(a2 + 3);
  v20 = v9;
  v21 = v8;
  a3(&v14);
  v10 = v14;
  v11 = v15;
  v16 = v14;
  v17 = v15;
  result = PreferencesOutputs.subscript.getter();
  if ((result & 0x100000000) == 0)
  {
    v13 = result;
    LODWORD(v16) = v5;
    type metadata accessor for _GraphValue<ActivationConditionsModifier>();
    type metadata accessor for Set<String>();
    _GraphValue.subscript.getter();
    type metadata accessor for _GraphValue<Set<String>>();
    LODWORD(v16) = _GraphValue.value.getter();
    HIDWORD(v16) = v13;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ApplyActivationConditions and conformance ApplyActivationConditions();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v16) = 0;
    result = PreferencesOutputs.subscript.setter();
    v10 = v14;
    v11 = v15;
  }
  *(_QWORD *)a4 = v10;
  *(_DWORD *)(a4 + 8) = v11;
  return result;
}

void type metadata accessor for _GraphValue<ActivationConditionsModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<ActivationConditionsModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ActivationConditionsModifier>);
  }
}

void type metadata accessor for Set<String>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Set<String>)
  {
    v0 = type metadata accessor for Set();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Set<String>);
  }
}

void type metadata accessor for _GraphValue<Set<String>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<Set<String>>)
  {
    type metadata accessor for Set<String>();
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Set<String>>);
  }
}

char *ApplyActivationConditions.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD __src[34];
  _QWORD v20[34];
  uint64_t v21[35];

  v0 = *(_QWORD *)AGGraphGetValue();
  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
    return (char *)MEMORY[0x1E0DEE9D8];
  v2 = v0 + 32;
  swift_bridgeObjectRetain();
  v3 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    outlined init with copy of SceneList.Item(v2, (uint64_t)v21);
    outlined init with copy of SceneList.Item.Value(v21, (uint64_t)__src);
    if (BYTE1(__src[15]) == 6)
    {
      v9 = __src[3];
      v10 = __src[4];
      v11 = __src[5];
      v12 = __src[6];
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Text?(v9, v10, v11, v12);
      goto LABEL_9;
    }
    if (!BYTE1(__src[15]))
    {
      v4 = __src[1];
      v5 = __src[2];
      v6 = __src[3];
      v7 = __src[4];
      v8 = __src[6];
      swift_release();
      outlined consume of Text?(v4, v5, v6, v7);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v8);
LABEL_9:
      outlined init with copy of SceneList.Item((uint64_t)v21, (uint64_t)v20);
      type metadata accessor for Set<String>();
      v13 = *(_QWORD *)AGGraphGetValue();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v20[24] = v13;
      outlined init with copy of SceneList.Item((uint64_t)v20, (uint64_t)__src);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      v15 = *((_QWORD *)v3 + 2);
      v14 = *((_QWORD *)v3 + 3);
      if (v15 >= v14 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v15 + 1;
      memcpy(&v3[272 * v15 + 32], __src, 0x110uLL);
      outlined destroy of SceneList.Item((uint64_t)v21);
      outlined destroy of SceneList.Item((uint64_t)v20);
      goto LABEL_4;
    }
    outlined init with copy of SceneList.Item((uint64_t)v21, (uint64_t)v20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
    v17 = *((_QWORD *)v3 + 2);
    v16 = *((_QWORD *)v3 + 3);
    if (v17 >= v16 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v3);
    *((_QWORD *)v3 + 2) = v17 + 1;
    memcpy(&v3[272 * v17 + 32], v20, 0x110uLL);
    outlined destroy of SceneList.Item((uint64_t)v21);
    outlined destroy of SceneList.Item.Value((uint64_t)__src);
LABEL_4:
    v2 += 272;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

char *protocol witness for Rule.value.getter in conformance ApplyActivationConditions@<X0>(char **a1@<X8>)
{
  char *result;

  result = ApplyActivationConditions.value.getter();
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ApplyActivationConditions and conformance ApplyActivationConditions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ApplyActivationConditions and conformance ApplyActivationConditions;
  if (!lazy protocol witness table cache variable for type ApplyActivationConditions and conformance ApplyActivationConditions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ApplyActivationConditions, &unk_1E1AE8718);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ApplyActivationConditions and conformance ApplyActivationConditions);
  }
  return result;
}

void *type metadata accessor for ApplyActivationConditions()
{
  return &unk_1E1AE8718;
}

void AccessibilityTechnologies.init()(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AccessibilityTechnologies.init(list:)@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  unsigned int v6;
  int v7;
  int v8;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    LOWORD(v4) = 0;
    v5 = (unsigned __int8 *)(result + 32);
    while (1)
    {
      v6 = *v5++;
      v7 = 1 << (v6 & 0xF);
      v8 = v6 >= 0x10 ? 0 : v7;
      v4 = v8 + (unsigned __int16)v4;
      if ((v4 & 0x10000) != 0)
        break;
      if (!--v3)
        goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
    LOWORD(v4) = 0;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *a2 = v4;
  }
  return result;
}

BOOL AccessibilityTechnologies.insert(_:)(_WORD *a1, unsigned __int16 *a2)
{
  _WORD *v2;
  int v3;
  int v4;
  int v5;

  v3 = *a2;
  v4 = (unsigned __int16)*v2;
  v5 = v4 & v3;
  if ((v4 & v3) != v3)
  {
    LOWORD(v4) = v4 | v3;
    *v2 = v4;
  }
  *a1 = v4;
  return v5 != v3;
}

_WORD *AccessibilityTechnologies.remove(_:)@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  __int16 v3;

  v3 = *v2 & ~*result;
  *v2 = v3;
  *(_WORD *)a2 = v3;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

void static AccessibilityTechnologies.voiceOver.getter(_WORD *a1@<X8>)
{
  *a1 = 1;
}

void static AccessibilityTechnologies.switchControl.getter(_WORD *a1@<X8>)
{
  *a1 = 2;
}

void static AccessibilityTechnologies.fullKeyboardAccess.getter(_WORD *a1@<X8>)
{
  *a1 = 4;
}

void static AccessibilityTechnologies.voiceControl.getter(_WORD *a1@<X8>)
{
  *a1 = 8;
}

void static AccessibilityTechnologies.hoverText.getter(_WORD *a1@<X8>)
{
  *a1 = 16;
}

uint64_t one-time initialization function for focusSupportingTechnologies()
{
  uint64_t result;

  if (one-time initialization token for focusSupportingTechnologies != -1)
    result = swift_once();
  static AccessibilityTechnologies.focusSupportingTechnologies = static AccessibilityTechnologySet.focusSupportingTechnologies;
  return result;
}

{
  uint64_t v0;
  int v1;
  unsigned __int8 *v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t result;

  if (one-time initialization token for focusSupportingTechnologies != -1)
    goto LABEL_13;
  while (1)
  {
    v0 = *(_QWORD *)(static AccessibilityTechnology.focusSupportingTechnologies + 16);
    if (!v0)
      break;
    LOWORD(v1) = 0;
    v2 = (unsigned __int8 *)(static AccessibilityTechnology.focusSupportingTechnologies + 32);
    while (1)
    {
      v3 = *v2++;
      v4 = 1 << (v3 & 0xF);
      v5 = v3 >= 0x10 ? 0 : v4;
      v1 = v5 + (unsigned __int16)v1;
      if ((v1 & 0x10000) != 0)
        break;
      if (!--v0)
        goto LABEL_11;
    }
    __break(1u);
LABEL_13:
    result = swift_once();
  }
  LOWORD(v1) = 0;
LABEL_11:
  static AccessibilityTechnologySet.focusSupportingTechnologies = v1;
  return result;
}

{
  uint64_t result;

  result = specialized _ArrayProtocol.filter(_:)((uint64_t)&outlined read-only object #0 of closure #1 in variable initialization expression of static AccessibilityTechnology.focusSupportingTechnologies);
  static AccessibilityTechnology.focusSupportingTechnologies = result;
  return result;
}

_WORD *AccessibilityTechnologies.union(_:)@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_WORD *AccessibilityTechnologies.formUnion(_:)(_WORD *result)
{
  _WORD *v1;

  *v1 |= *result;
  return result;
}

_WORD *AccessibilityTechnologies.intersection(_:)@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_WORD *AccessibilityTechnologies.formIntersection(_:)(_WORD *result)
{
  _WORD *v1;

  *v1 &= *result;
  return result;
}

_WORD *AccessibilityTechnologies.symmetricDifference(_:)@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_WORD *AccessibilityTechnologies.formSymmetricDifference(_:)(_WORD *result)
{
  _WORD *v1;

  *v1 ^= *result;
  return result;
}

BOOL AccessibilityTechnologies.contains(_:)(unsigned __int16 *a1)
{
  unsigned __int16 *v1;

  return (*a1 & ~*v1) == 0;
}

_WORD *AccessibilityTechnologies.update(with:)@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  __int16 v3;

  v3 = *v2 & *result;
  *v2 = v3;
  *(_WORD *)a2 = v3;
  *(_BYTE *)(a2 + 2) = v3 == 0;
  return result;
}

uint64_t AccessibilityTechnologySet.list.getter(unsigned __int16 a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;

  v1 = 0;
  v2 = MEMORY[0x1E0DEE9D8];
  v3 = a1;
  do
  {
    v6 = outlined read-only object #0 of AccessibilityTechnologySet.list.getter[v1 + 32];
    if (v6 > 0xF || ((v3 >> v6) & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
      v5 = *(_QWORD *)(v2 + 16);
      v4 = *(_QWORD *)(v2 + 24);
      if (v5 >= v4 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1);
      *(_QWORD *)(v2 + 16) = v5 + 1;
      *(_BYTE *)(v2 + v5 + 32) = v6;
    }
    ++v1;
  }
  while (v1 != 6);
  return v2;
}

uint64_t AccessibilityTechnologySet.assertAllSupportFocus()(unsigned __int16 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = AccessibilityTechnologySet.list.getter(a1);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      if (*(unsigned __int8 *)(v1 + i + 32) >= 2u)
      {
        static os_log_type_t.fault.getter();
        v4 = (void *)static Log.runtimeIssuesLog.getter();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v5 = swift_allocObject();
        *(_OWORD *)(v5 + 16) = xmmword_187BF9830;
        v6 = String.init<A>(describing:)();
        v8 = v7;
        *(_QWORD *)(v5 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v5 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v5 + 32) = v6;
        *(_QWORD *)(v5 + 40) = v8;
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
      }
    }
  }
  return swift_bridgeObjectRelease();
}

BOOL static AccessibilityTechnologies.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

_WORD *protocol witness for SetAlgebra.union(_:) in conformance AccessibilityTechnologies@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.intersection(_:) in conformance AccessibilityTechnologies@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance AccessibilityTechnologies@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance AccessibilityTechnologies(_WORD *a1, unsigned __int16 *a2)
{
  _WORD *v2;
  int v3;
  int v4;
  int v5;

  v3 = *a2;
  v4 = (unsigned __int16)*v2;
  v5 = v4 & v3;
  if ((v4 & v3) != v3)
  {
    LOWORD(v4) = v4 | v3;
    *v2 = v4;
  }
  *a1 = v4;
  return v5 != v3;
}

_WORD *protocol witness for SetAlgebra.remove(_:) in conformance AccessibilityTechnologies@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  __int16 v3;

  v3 = *v2 & ~*result;
  *v2 = v3;
  *(_WORD *)a2 = v3;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

_WORD *protocol witness for SetAlgebra.update(with:) in conformance AccessibilityTechnologies@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  __int16 v3;

  v3 = *v2 & *result;
  *v2 = v3;
  *(_WORD *)a2 = v3;
  *(_BYTE *)(a2 + 2) = v3 == 0;
  return result;
}

_WORD *protocol witness for SetAlgebra.formUnion(_:) in conformance AccessibilityTechnologies(_WORD *result)
{
  _WORD *v1;

  *v1 |= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance AccessibilityTechnologies(_WORD *result)
{
  _WORD *v1;

  *v1 &= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance AccessibilityTechnologies(_WORD *result)
{
  _WORD *v1;

  *v1 ^= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.subtracting(_:) in conformance AccessibilityTechnologies@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance AccessibilityTechnologies(unsigned __int16 *a1)
{
  unsigned __int16 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance AccessibilityTechnologies(_WORD *a1)
{
  _WORD *v1;

  return (unsigned __int16)(*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance AccessibilityTechnologies(unsigned __int16 *a1)
{
  unsigned __int16 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance AccessibilityTechnologies()
{
  _WORD *v0;

  return *v0 == 0;
}

_WORD *protocol witness for SetAlgebra.subtract(_:) in conformance AccessibilityTechnologies(_WORD *result)
{
  _WORD *v1;

  *v1 &= ~*result;
  return result;
}

_WORD *protocol witness for OptionSet.init(rawValue:) in conformance AccessibilityTechnologySet@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityTechnologySet()
{
  Swift::UInt16 *v0;
  Swift::UInt16 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityTechnologySet()
{
  Swift::UInt16 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityTechnologySet()
{
  Swift::UInt16 *v0;
  Swift::UInt16 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityTechnologySet()
{
  lazy protocol witness table accessor for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityTechnologySet()
{
  lazy protocol witness table accessor for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet();
  return RawRepresentable<>.encode(to:)();
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance AccessibilityTechnologySet(_WORD *a1, unsigned __int16 *a2)
{
  _WORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = (unsigned __int16)*v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int16 *protocol witness for SetAlgebra.remove(_:) in conformance AccessibilityTechnologySet@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = (unsigned __int16)*v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_WORD)v3;
  *(_WORD *)a2 = v5;
  *(_BYTE *)(a2 + 2) = v5 == 0;
  return result;
}

unsigned __int16 *protocol witness for SetAlgebra.update(with:) in conformance AccessibilityTechnologySet@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = (unsigned __int16)*v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *(_WORD *)a2 = v5;
  *(_BYTE *)(a2 + 2) = v5 == 0;
  return result;
}

_WORD *protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityTechnologySet@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AccessibilityTechnologySet(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance AccessibilityTechnologySet@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  __int16 v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityTechnology@<X0>(unsigned __int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized AccessibilityTechnology.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AccessibilityTechnology(_WORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void protocol witness for static CaseIterable.allCases.getter in conformance AccessibilityTechnology(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static AccessibilityTechnology.allCases.getter;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityTechnology()
{
  unsigned __int8 *v0;
  Swift::UInt16 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityTechnology()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityTechnology()
{
  unsigned __int8 *v0;
  Swift::UInt16 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AccessibilityTechnologies and conformance AccessibilityTechnologies()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTechnologies and conformance AccessibilityTechnologies;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnologies and conformance AccessibilityTechnologies)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTechnologies, &type metadata for AccessibilityTechnologies);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnologies and conformance AccessibilityTechnologies);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTechnologies and conformance AccessibilityTechnologies;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnologies and conformance AccessibilityTechnologies)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTechnologies, &type metadata for AccessibilityTechnologies);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnologies and conformance AccessibilityTechnologies);
  }
  return result;
}

void *type metadata accessor for AccessibilityTechnologySet()
{
  return &unk_1E1AED5C0;
}

unint64_t lazy protocol witness table accessor for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTechnologySet, &unk_1E1AED5C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTechnologySet, &unk_1E1AED5C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTechnologySet, &unk_1E1AED5C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTechnologySet, &unk_1E1AED5C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityTechnology(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityTechnology(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1874A4DA0 + 4 * byte_187C36B45[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1874A4DD4 + 4 * byte_187C36B40[v4]))();
}

uint64_t sub_1874A4DD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874A4DDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1874A4DE4);
  return result;
}

uint64_t sub_1874A4DF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1874A4DF8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1874A4DFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874A4E04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type [AccessibilityTechnology] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [AccessibilityTechnology] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AccessibilityTechnology] and conformance [A])
  {
    type metadata accessor for [AccessibilityTechnology]();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AccessibilityTechnology] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [AccessibilityTechnology]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [AccessibilityTechnology])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityTechnology]);
  }
}

uint64_t specialized AccessibilityTechnology.init(rawValue:)(uint64_t result)
{
  if ((unsigned __int16)result >= 6u)
    return 6;
  else
    return (unsigned __int16)result;
}

uint64_t PersistentSystemOverlaysKey.Overlays.visibility.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PersistentSystemOverlaysKey.Overlays.visibility.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*PersistentSystemOverlaysKey.Overlays.visibility.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t PersistentSystemOverlaysKey.Overlays.isAnimated.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t PersistentSystemOverlaysKey.Overlays.isAnimated.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*PersistentSystemOverlaysKey.Overlays.isAnimated.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static PersistentSystemOverlaysKey.Overlays.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 == *a2) & (a2[1] ^ a1[1] ^ 1u);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PersistentSystemOverlaysKey.Overlays(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 == *a2) & (a2[1] ^ a1[1] ^ 1u);
}

void static PersistentSystemOverlaysKey.defaultValue.getter(_WORD *a1@<X8>)
{
  *a1 = 512;
}

_WORD *static PersistentSystemOverlaysKey.reduce(value:nextValue:)(_WORD *result, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  _WORD *v2;
  __int16 v3;
  uint64_t v4;

  v2 = result;
  v3 = *result;
  if ((*result & 0xFF00) == 0x200)
  {
    result = a2(&v4);
    v3 = v4;
  }
  *v2 = v3;
  return result;
}

_WORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance PersistentSystemOverlaysKey(_WORD *result, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  _WORD *v2;
  __int16 v3;
  uint64_t v4;

  v2 = result;
  v3 = *result;
  if ((*result & 0xFF00) == 0x200)
  {
    result = a2(&v4);
    v3 = v4;
  }
  *v2 = v3;
  return result;
}

void View.persistentSystemOverlays(_:)(char a1)
{
  char v1;

  v1 = a1;
  lazy protocol witness table accessor for type Visibility and conformance Visibility();
  View.transactionalPreference<A, B>(key:value:transform:)((uint64_t)&type metadata for PersistentSystemOverlaysKey, (uint64_t)&v1);
}

uint64_t static PersistentSystemOverlaysSceneModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_DWORD *)(a2 + 56);
  v18 = *(_QWORD *)a2;
  v19 = v6;
  v20 = v7;
  v21 = *(_OWORD *)(a2 + 24);
  v22 = v8;
  v23 = v9;
  v24 = v10;
  a3(&v16);
  v18 = v9;
  v19 = v10;
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    LODWORD(v18) = v5;
    type metadata accessor for _GraphValue<PersistentSystemOverlaysSceneModifier>();
    v12 = _GraphValue.value.getter();
    v18 = v16;
    v19 = v17;
    v13 = PreferencesOutputs.subscript.getter();
    v14 = *MEMORY[0x1E0CFED28];
    if ((v13 & 0x100000000) == 0)
      v14 = v13;
    v18 = __PAIR64__(v14, v12);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type PersistentSystemOverlaysSceneModifier.UpdateSceneList and conformance PersistentSystemOverlaysSceneModifier.UpdateSceneList();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v18) = 0;
    result = PreferencesOutputs.subscript.setter();
  }
  v15 = v17;
  *(_QWORD *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v15;
  return result;
}

char *PersistentSystemOverlaysSceneModifier.UpdateSceneList.value.getter(uint64_t a1)
{
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE __src[272];
  _BYTE v10[160];
  uint64_t v11;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
    return (char *)MEMORY[0x1E0DEE9D8];
  Value = AGGraphGetValue();
  v2 = *(_QWORD *)Value;
  v3 = *(_QWORD *)(*(_QWORD *)Value + 16);
  if (!v3)
    return (char *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey>();
  v4 = v2 + 32;
  swift_bridgeObjectRetain();
  v5 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    outlined init with copy of SceneList.Item(v4, (uint64_t)v10);
    __src[0] = *(_BYTE *)AGGraphGetValue();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v11)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined init with copy of SceneList.Item((uint64_t)v10, (uint64_t)__src);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
    v7 = *((_QWORD *)v5 + 2);
    v6 = *((_QWORD *)v5 + 3);
    if (v7 >= v6 >> 1)
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v5);
    *((_QWORD *)v5 + 2) = v7 + 1;
    memcpy(&v5[272 * v7 + 32], __src, 0x110uLL);
    outlined destroy of SceneList.Item((uint64_t)v10);
    v4 += 272;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v5;
}

char *protocol witness for Rule.value.getter in conformance PersistentSystemOverlaysSceneModifier.UpdateSceneList@<X0>(char **a1@<X8>)
{
  uint64_t *v1;
  char *result;

  result = PersistentSystemOverlaysSceneModifier.UpdateSceneList.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t Scene.persistentSystemOverlays(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return Scene.modifier<A>(_:)(&v4, a2, &type metadata for PersistentSystemOverlaysSceneModifier, a3);
}

ValueMetadata *type metadata accessor for PersistentSystemOverlaysKey()
{
  return &type metadata for PersistentSystemOverlaysKey;
}

uint64_t sub_1874A5488(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for TransactionalPreferenceModifier<Visibility, PersistentSystemOverlaysKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for TransactionalPreferenceModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t type metadata accessor for TransactionalPreferenceModifier<Visibility, PersistentSystemOverlaysKey>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for TransactionalPreferenceModifier<Visibility, PersistentSystemOverlaysKey>;
  if (!lazy cache variable for type metadata for TransactionalPreferenceModifier<Visibility, PersistentSystemOverlaysKey>)
  {
    lazy protocol witness table accessor for type Visibility and conformance Visibility();
    type metadata accessor for TransactionalPreferenceModifier();
  }
  return result;
}

uint64_t sub_1874A555C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for PersistentSystemOverlaysSceneModifier;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

uint64_t storeEnumTagSinglePayload for PersistentSystemOverlaysSceneModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1874A55FC + 4 * byte_187C36FCF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1874A5630 + 4 * byte_187C36FCA[v4]))();
}

uint64_t sub_1874A5630(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874A5638(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1874A5640);
  return result;
}

uint64_t sub_1874A564C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1874A5654);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1874A5658(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874A5660(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PersistentSystemOverlaysSceneModifier()
{
  return &type metadata for PersistentSystemOverlaysSceneModifier;
}

ValueMetadata *type metadata accessor for HostingGestureOverlayAuthorityKey()
{
  return &type metadata for HostingGestureOverlayAuthorityKey;
}

void type metadata accessor for _GraphValue<PersistentSystemOverlaysSceneModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PersistentSystemOverlaysSceneModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PersistentSystemOverlaysSceneModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type PersistentSystemOverlaysSceneModifier.UpdateSceneList and conformance PersistentSystemOverlaysSceneModifier.UpdateSceneList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersistentSystemOverlaysSceneModifier.UpdateSceneList and conformance PersistentSystemOverlaysSceneModifier.UpdateSceneList;
  if (!lazy protocol witness table cache variable for type PersistentSystemOverlaysSceneModifier.UpdateSceneList and conformance PersistentSystemOverlaysSceneModifier.UpdateSceneList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PersistentSystemOverlaysSceneModifier.UpdateSceneList, &type metadata for PersistentSystemOverlaysSceneModifier.UpdateSceneList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersistentSystemOverlaysSceneModifier.UpdateSceneList and conformance PersistentSystemOverlaysSceneModifier.UpdateSceneList);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ScenePersistentSystemOverlaysKey()
{
  return &type metadata for ScenePersistentSystemOverlaysKey;
}

ValueMetadata *type metadata accessor for PersistentSystemOverlaysSceneModifier.UpdateSceneList()
{
  return &type metadata for PersistentSystemOverlaysSceneModifier.UpdateSceneList;
}

double MagnificationGesture.minimumScaleDelta.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*MagnificationGesture.minimumScaleDelta.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static MagnificationGesture._makeGesture(gesture:inputs:)()
{
  lazy protocol witness table accessor for type MagnificationGesture and conformance MagnificationGesture();
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

unint64_t lazy protocol witness table accessor for type MagnificationGesture and conformance MagnificationGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MagnificationGesture and conformance MagnificationGesture;
  if (!lazy protocol witness table cache variable for type MagnificationGesture and conformance MagnificationGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MagnificationGesture, &type metadata for MagnificationGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagnificationGesture and conformance MagnificationGesture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MagnificationGesture and conformance MagnificationGesture;
  if (!lazy protocol witness table cache variable for type MagnificationGesture and conformance MagnificationGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MagnificationGesture, &type metadata for MagnificationGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagnificationGesture and conformance MagnificationGesture);
  }
  return result;
}

__n128 MagnificationGesture.internalBody.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v3 = *v1;
  type metadata accessor for MagnifyGesture.Value();
  MapGesture.init(_:)();
  result = v5;
  *(_QWORD *)a1 = v3;
  *(__n128 *)(a1 + 8) = v5;
  return result;
}

void MagnifyGesture.init(minimumScaleDelta:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double specialized implicit closure #1 in MagnificationGesture.internalBody.getter@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + *(int *)(type metadata accessor for MagnifyGesture.Value() + 20));
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for MagnifyGesture.Value()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MagnifyGesture.Value;
  if (!type metadata singleton initialization cache for MagnifyGesture.Value)
    return swift_getSingletonMetadata();
  return result;
}

__n128 protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance MagnificationGesture@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v3 = *v1;
  type metadata accessor for MagnifyGesture.Value();
  MapGesture.init(_:)();
  result = v5;
  *(_QWORD *)a1 = v3;
  *(__n128 *)(a1 + 8) = v5;
  return result;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance MagnificationGesture()
{
  lazy protocol witness table accessor for type MagnificationGesture and conformance MagnificationGesture();
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance MagnificationGesture()
{
  protocol witness for Gesture.body.getter in conformance RotationGesture();
}

uint64_t MagnifyGesture.Value.time.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t MagnifyGesture.Value.time.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*MagnifyGesture.Value.time.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double MagnifyGesture.Value.magnification.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for MagnifyGesture.Value() + 20));
}

uint64_t MagnifyGesture.Value.magnification.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MagnifyGesture.Value();
  *(double *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*MagnifyGesture.Value.magnification.modify())(_QWORD)
{
  type metadata accessor for MagnifyGesture.Value();
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double MagnifyGesture.Value.velocity.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for MagnifyGesture.Value() + 24));
}

uint64_t MagnifyGesture.Value.velocity.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MagnifyGesture.Value();
  *(double *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*MagnifyGesture.Value.velocity.modify())(_QWORD)
{
  type metadata accessor for MagnifyGesture.Value();
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double MagnifyGesture.Value.startAnchor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for MagnifyGesture.Value() + 28));
}

uint64_t MagnifyGesture.Value.startAnchor.setter(double a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  double *v6;

  result = type metadata accessor for MagnifyGesture.Value();
  v6 = (double *)(v2 + *(int *)(result + 28));
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*MagnifyGesture.Value.startAnchor.modify())(_QWORD)
{
  type metadata accessor for MagnifyGesture.Value();
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double MagnifyGesture.Value.startLocation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for MagnifyGesture.Value() + 32));
}

uint64_t MagnifyGesture.Value.startLocation.setter(double a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  double *v6;

  result = type metadata accessor for MagnifyGesture.Value();
  v6 = (double *)(v2 + *(int *)(result + 32));
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*MagnifyGesture.Value.startLocation.modify())(_QWORD)
{
  type metadata accessor for MagnifyGesture.Value();
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double MagnifyGesture.minimumScaleDelta.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void MagnifyGesture.minimumScaleDelta.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*MagnifyGesture.minimumScaleDelta.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static MagnifyGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<MagnifyGesture>, (uint64_t)&type metadata for MagnifyGesture, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _GestureInputs.size.getter();
  _GestureInputs.position.getter();
  _GestureInputs.transform.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>, (void (*)(uint64_t))type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>, (void (*)(void))lazy protocol witness table accessor for type _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value> and conformance _MapGesture<A, B>);
  lazy protocol witness table accessor for type MagnifyGesture.Child and conformance MagnifyGesture.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<MagnifyGesture.Value>, ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>> and conformance ModifierGesture<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>, (void (*)(uint64_t))type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>, (void (*)(void))lazy protocol witness table accessor for type _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value> and conformance _MapGesture<A, B>);
  return static Gesture.makeDebuggableGesture(gesture:inputs:)();
}

uint64_t closure #1 in MagnifyGesture.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v22;

  type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>(0, (unint64_t *)&lazy cache variable for type metadata for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value, MEMORY[0x1E0CE49F0]);
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v22 - v7;
  v9 = MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for MagnifyGesture.Value?, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v22 - v16;
  outlined init with copy of TableRowList?(a1, (uint64_t)&v22 - v16, (uint64_t)&lazy cache variable for type metadata for MagnifyGesture.Value?, (uint64_t)type metadata accessor for MagnifyGesture.Value, (uint64_t)v9, v18);
  outlined init with copy of SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value(a1, (uint64_t)v8);
  v19 = type metadata accessor for MagnifyGesture.Value();
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48);
  if (v20(v17, 1, v19) == 1)
  {
    outlined init with copy of TableRowList?((uint64_t)&v8[*(int *)(v5 + 52)], (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for MagnifyGesture.Value?, (uint64_t)type metadata accessor for MagnifyGesture.Value, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    result = v20(v13, 1, v19);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      outlined destroy of SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value((uint64_t)v8);
      outlined init with take of TableCellFormula((uint64_t)v13, a2, (uint64_t (*)(_QWORD))type metadata accessor for MagnifyGesture.Value);
      return outlined destroy of TableRowList?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for MagnifyGesture.Value?, (uint64_t)type metadata accessor for MagnifyGesture.Value, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    }
  }
  else
  {
    outlined destroy of SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value((uint64_t)v8);
    return outlined init with take of TableCellFormula((uint64_t)v17, a2, (uint64_t (*)(_QWORD))type metadata accessor for MagnifyGesture.Value);
  }
  return result;
}

__n128 protocol witness for Rule.value.getter in conformance MagnifyGesture.Child@<Q0>(__n128 *a1@<X8>)
{
  _DWORD *v1;
  unsigned __int32 v3;
  unsigned __int32 v4;
  unsigned __int32 v5;
  unint64_t v6;
  __n128 result;
  __n128 v8;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>(0, (unint64_t *)&lazy cache variable for type metadata for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value, MEMORY[0x1E0CE49F0]);
  type metadata accessor for MagnifyGesture.Value();
  MapGesture.init(_:)();
  result = v8;
  a1->n128_u64[0] = v6;
  a1->n128_u32[2] = v3;
  a1->n128_u32[3] = v5;
  a1[1].n128_u32[0] = v4;
  a1[1].n128_u64[1] = v6;
  a1[2].n128_u32[0] = v3;
  a1[2].n128_u32[1] = v5;
  a1[2].n128_u32[2] = v4;
  a1[3] = v8;
  a1[4].n128_u64[0] = 1;
  a1[4].n128_u8[8] = 0;
  return result;
}

void protocol witness for Gesture.body.getter in conformance MagnifyGesture()
{
  protocol witness for Gesture.body.getter in conformance RotationGesture();
}

uint64_t closure #1 in TransformBasedMagnifyGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v25[11];
  char v26;
  char v27[8];
  uint64_t v28;
  char v29;
  __int128 v30;
  char v31;
  __int128 v32;
  char v33;
  __int128 v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(unsigned __int8 *)(a2 + 88);
  if ((*(_BYTE *)a1 & 1) == 0)
    __asm { BR              X9 }
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_BYTE *)(a1 + 16);
  v18 = *(_BYTE *)(a1 + 40);
  v19 = *(_BYTE *)(a1 + 64);
  v20 = *(_BYTE *)(a1 + 88);
  v21 = *(_QWORD *)(a1 + 96);
  v22 = *(_BYTE *)(a1 + 104);
  v23 = *(_QWORD *)(a1 + 112);
  v27[0] = *(_BYTE *)a1;
  v28 = v16;
  v29 = v17;
  v30 = *(_OWORD *)(a1 + 24);
  v31 = v18;
  v32 = *(_OWORD *)(a1 + 48);
  v33 = v19;
  v34 = *(_OWORD *)(a1 + 72);
  v35 = v20;
  v36 = v21;
  v37 = v22;
  v38 = v23;
  v25[0] = v4;
  v25[1] = v5;
  v25[2] = v7;
  v25[3] = v6;
  v25[4] = v9;
  v25[5] = v8;
  v25[6] = v11;
  v25[7] = v10;
  v25[8] = v13;
  v25[9] = v12;
  v25[10] = v14;
  v26 = v15;
  return TransformBasedMagnifyGesture.phase(state:childPhase:)(v27, v25, a3);
}

uint64_t TransformBasedMagnifyGesture.phase(state:childPhase:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a1;
  v5 = *a2;
  v6 = a2[1];
  v8 = a2[2];
  v7 = a2[3];
  v10 = a2[4];
  v9 = a2[5];
  v11 = a2[6];
  v12 = a2[7];
  v14 = a2[8];
  v13 = a2[9];
  v15 = a2[10];
  v16 = *((unsigned __int8 *)a2 + 88);
  if ((_DWORD)v16 != 3 || v6 | v5 | v8 | v7 | v10 | v9 | v11 | v12 | v14 | v13 | v15)
  {
    if ((v4 & 1) != 0)
      __asm { BR              X17 }
    if ((_DWORD)v16 != 2 && ((_DWORD)v16 != 3 || v6 | v5 | v8 | v7 | v10 | v9 | v11 | v12 | v14 | v13 | v15))
    {
      v17 = type metadata accessor for MagnifyGesture.Value();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a3, 1, 1, v17);
    }
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<MagnifyGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for Gesture.body.getter in conformance TransformBasedMagnifyGesture@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[48];
  _OWORD v10[2];
  uint64_t v11;
  char v12;
  char v13[8];
  uint64_t v14;

  v3 = *v1;
  v4 = *((_DWORD *)v1 + 4);
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v12 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)v10, (uint64_t)v9);
  v5 = MEMORY[0x1E0CE53B0];
  outlined init with copy of TableRowList?((uint64_t)v9, (uint64_t)&v14, (uint64_t)&lazy cache variable for type metadata for CoordinateSpaceGesture<TransformEvent>, (uint64_t)&type metadata for TransformEvent, (uint64_t)MEMORY[0x1E0CE53B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  v13[0] = 1;
  outlined destroy of TableRowList?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for CoordinateSpaceGesture<TransformEvent>, (uint64_t)&type metadata for TransformEvent, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  outlined destroy of CoordinateSpace((uint64_t)v10);
  v6 = swift_allocObject();
  v7 = v1[1];
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v7;
  *(_DWORD *)(v6 + 32) = v4;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>);
  *(_QWORD *)(a1 + 56) = partial apply for closure #1 in TransformBasedMagnifyGesture.body.getter;
  *(_QWORD *)(a1 + 64) = v6;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>);
}

void protocol witness for GestureStateProtocol.init() in conformance TouchBasedMagnifyGesture.StateType(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0x3FE8000000000000;
}

uint64_t TouchBasedMagnifyGesture.body.getter@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  _BYTE v10[56];
  _QWORD v11[11];
  __int128 v12;
  _BYTE v13[56];
  uint64_t v14;
  _BYTE v15[112];
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  char v22;

  if (one-time initialization token for all != -1)
    swift_once();
  v22 = static _EventDirections.all;
  v18 = 0u;
  v19 = 0u;
  v17 = 0x3FF0000000000000;
  v20 = 0;
  v21 = 2;
  outlined init with copy of DragGesture((uint64_t)&v17, (uint64_t)v10);
  outlined init with copy of DragGesture((uint64_t)&v17, (uint64_t)v11);
  outlined init with copy of DragGesture((uint64_t)v10, (uint64_t)v13);
  outlined init with copy of DragGesture((uint64_t)v11, (uint64_t)&v14);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Tuple<DragGesture, Tuple<DragGesture, EmptyTuple>>);
  type metadata accessor for Tuple<DragGesture.Value, Tuple<DragGesture.Value, EmptyTuple>>(0);
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  MapGesture.init(_:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>);
  v16 = v12;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>);
  v8 = swift_allocObject();
  *(double *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = a1;
  *(_DWORD *)(v8 + 32) = a2;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>);
  v11[9] = partial apply for closure #2 in TouchBasedMagnifyGesture.body.getter;
  v11[10] = v8;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, a3, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>);
  *(_QWORD *)(a3 + 144) = 1;
  *(_BYTE *)(a3 + 152) = 1;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>);
  return outlined destroy of DragGesture((uint64_t)&v17);
}

uint64_t closure #2 in TouchBasedMagnifyGesture.body.getter@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v18;
  __int128 v19;
  char v20;
  __int128 v21;
  char v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  TouchBasedMagnifyGesture.update(state:childPhase:)(a1, a2, a6);
  v11 = a1[24];
  v12 = a1[48];
  v13 = a1[72];
  v14 = *((_QWORD *)a1 + 10);
  v15 = a1[88];
  v16 = *((_QWORD *)a1 + 12);
  v18 = *a1;
  v19 = *(_OWORD *)(a1 + 8);
  v20 = v11;
  v21 = *((_OWORD *)a1 + 2);
  v22 = v12;
  v23 = *(_OWORD *)(a1 + 56);
  v24 = v13;
  v25 = v14;
  v26 = v15;
  v27 = v16;
  return TouchBasedMagnifyGesture.phase(state:childPhase:)((__int128 *)&v18, a2, a3, a4, a5);
}

uint64_t TouchBasedMagnifyGesture.update(state:childPhase:)(_BYTE *a1, uint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int EnumCaseMultiPayload;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  _BYTE *v62;
  double v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;

  v79 = a2;
  v80 = a1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (DragGesture.Value, DragGesture.Value)?, (uint64_t (*)(uint64_t))type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v77 = (char *)&v73 - v6;
  v7 = type metadata accessor for Date();
  v74 = *(_QWORD *)(v7 - 8);
  v75 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v76 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v73 - v12;
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  v78 = v14;
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v73 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v73 = (uint64_t)&v73 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v73 - v28;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t (*)(uint64_t))type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v73 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v73 - v36;
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)&v73 - v40;
  MEMORY[0x1E0C80A78](v42, v43);
  v45 = (char *)&v73 - v44;
  if ((*v80 & 1) != 0)
  {
    v46 = v76;
    v47 = (uint64_t)v77;
    outlined init with copy of TableRowList?(v79, (uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0CE17C0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if ((EnumCaseMultiPayload - 1) < 2)
    {
      outlined init with copy of TableRowList?((uint64_t)v41, (uint64_t)v33, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0CE17C0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      v37 = v33;
      v49 = v78;
      v50 = (uint64_t)v22;
      v51 = v15;
LABEL_4:
      outlined init with take of TableCellFormula((uint64_t)v37, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for (DragGesture.Value, DragGesture.Value));
      outlined destroy of TableRowList?((uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0CE17C0], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      outlined init with take of TableCellFormula((uint64_t)v18, v47, (uint64_t (*)(_QWORD))type metadata accessor for (DragGesture.Value, DragGesture.Value));
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v51 + 56))(v47, 0, 1, v49);
      goto LABEL_12;
    }
    v49 = v78;
    v50 = (uint64_t)v22;
    v51 = v15;
    if (!EnumCaseMultiPayload)
    {
      outlined init with copy of TableRowList?((uint64_t)v41, (uint64_t)v37, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0CE17C0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v37, 1, v49) != 1)
        goto LABEL_4;
      outlined destroy of TableRowList?((uint64_t)v37, (uint64_t)&lazy cache variable for type metadata for (DragGesture.Value, DragGesture.Value)?, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v47, 1, 1, v49);
    outlined destroy of TableRowList?((uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0CE17C0], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
LABEL_12:
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v47, 1, v49) == 1)
      return outlined destroy of TableRowList?(v47, (uint64_t)&lazy cache variable for type metadata for (DragGesture.Value, DragGesture.Value)?, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    v65 = *(int *)(v49 + 48);
    v66 = v50 + v65;
    v67 = v47 + v65;
    outlined init with take of TableCellFormula(v47, v50, type metadata accessor for DragGesture.Value);
    outlined init with take of TableCellFormula(v67, v66, type metadata accessor for DragGesture.Value);
    v68 = *(int *)(v49 + 48);
    v69 = v73;
    v70 = v73 + v68;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v50, v73, type metadata accessor for DragGesture.Value);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v66, v70, type metadata accessor for DragGesture.Value);
    v71 = static TouchBasedMagnifyGesture.scale(_:)(v46, v69, v70);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v70, type metadata accessor for DragGesture.Value);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v69, type metadata accessor for DragGesture.Value);
    Date.timeIntervalSinceReferenceDate.getter();
    specialized VelocitySampler.addSample(_:time:)(v71, v72);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v46, v75);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v50, (uint64_t (*)(_QWORD))type metadata accessor for (DragGesture.Value, DragGesture.Value));
  }
  v52 = v29;
  outlined init with copy of TableRowList?(v79, (uint64_t)&v73 - v44, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0CE17C0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if (swift_getEnumCaseMultiPayload() != 1)
    return outlined destroy of TableRowList?((uint64_t)v45, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0CE17C0], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v53 = v78;
  v54 = *(int *)(v78 + 48);
  v55 = (uint64_t)v52;
  v56 = (uint64_t)&v52[v54];
  v57 = (uint64_t)&v45[v54];
  outlined init with take of TableCellFormula((uint64_t)v45, v55, type metadata accessor for DragGesture.Value);
  outlined init with take of TableCellFormula(v57, v56, type metadata accessor for DragGesture.Value);
  v58 = *(int *)(v53 + 48);
  v59 = v73;
  v60 = v73 + v58;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v55, v73, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v56, v60, type metadata accessor for DragGesture.Value);
  v61 = static TouchBasedMagnifyGesture.scale(_:)(v13, v59, v60);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v60, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v59, type metadata accessor for DragGesture.Value);
  Date.timeIntervalSinceReferenceDate.getter();
  v62 = v80;
  specialized VelocitySampler.addSample(_:time:)(v61, v63);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v13, v75);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v55, (uint64_t (*)(_QWORD))type metadata accessor for (DragGesture.Value, DragGesture.Value));
  if (fabs(v61 + -1.0) > a3)
    *v62 = 1;
  return result;
}

uint64_t TouchBasedMagnifyGesture.phase(state:childPhase:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  char *v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  _QWORD v32[4];
  int v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v33 = a4;
  v32[3] = a3;
  v34 = a5;
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  v32[0] = *(_QWORD *)(v7 - 8);
  v32[1] = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v32[2] = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0CE17C0];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t (*)(uint64_t))type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v32 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v32 - v21;
  v23 = a1[5];
  v39 = a1[4];
  v40 = v23;
  v41 = *((_QWORD *)a1 + 12);
  v24 = a1[1];
  v35 = *a1;
  v36 = v24;
  v25 = a1[3];
  v37 = a1[2];
  v38 = v25;
  outlined init with copy of TableRowList?(a2, (uint64_t)v32 - v21, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)v10, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  LODWORD(a1) = swift_getEnumCaseMultiPayload();
  outlined destroy of TableRowList?((uint64_t)v22, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if ((_DWORD)a1 != 3)
  {
    v26 = v34;
    if ((v35 & 1) != 0)
    {
      outlined init with copy of TableRowList?(a2, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0CE17C0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      v28 = (char *)&loc_1874A7558 + 4 * byte_187C371D4[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    outlined init with copy of TableRowList?(a2, (uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0CE17C0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 3)
    {
      if (EnumCaseMultiPayload != 2)
      {
        v29 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0];
        outlined destroy of TableRowList?((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0CE17C0], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
        v30 = type metadata accessor for MagnifyGesture.Value();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v26, 1, 1, v30);
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<MagnifyGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, v29);
        return swift_storeEnumTagMultiPayload();
      }
      outlined destroy of TableRowList?((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0CE17C0], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    }
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<MagnifyGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
  return swift_storeEnumTagMultiPayload();
}

double static TouchBasedMagnifyGesture.scale(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;

  v60 = a1;
  v5 = type metadata accessor for Date();
  v58 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v59 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v57 = (char *)&v55 - v10;
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  v12 = v11;
  MEMORY[0x1E0C80A78](v11, v13);
  v56 = (uint64_t)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v55 = (uint64_t)&v55 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v55 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v55 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v55 - v28;
  v31 = (char *)&v55 + *(int *)(v30 + 48) - v28;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)&v55 - v28, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a3, (uint64_t)v31, type metadata accessor for DragGesture.Value);
  v32 = (uint64_t)&v25[*(int *)(v12 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29, (uint64_t)v25, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v31, v32, type metadata accessor for DragGesture.Value);
  type metadata accessor for DragGesture.Value(0);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, type metadata accessor for DragGesture.Value);
  v33 = (uint64_t)&v21[*(int *)(v12 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29, (uint64_t)v21, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v31, v33, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v33, type metadata accessor for DragGesture.Value);
  distance(_:_:)();
  v35 = v34;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v32, type metadata accessor for DragGesture.Value);
  v36 = (uint64_t)&v25[*(int *)(v12 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29, (uint64_t)v25, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v31, v36, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, type metadata accessor for DragGesture.Value);
  v37 = (uint64_t)&v21[*(int *)(v12 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29, (uint64_t)v21, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v31, v37, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v37, type metadata accessor for DragGesture.Value);
  distance(_:_:)();
  v39 = v38;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v36, type metadata accessor for DragGesture.Value);
  v40 = v55;
  v41 = v55 + *(int *)(v12 + 48);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29, v55, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v31, v41, type metadata accessor for DragGesture.Value);
  v43 = v57;
  v42 = v58;
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
  v44(v57, v40, v5);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v40, type metadata accessor for DragGesture.Value);
  v45 = *(int *)(v12 + 48);
  v46 = v56;
  v47 = v56 + v45;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29, v56, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v31, v47, type metadata accessor for DragGesture.Value);
  v48 = v59;
  v44(v59, v47, v5);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, type metadata accessor for DragGesture.Value);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
  v49 = v48;
  if ((dispatch thunk of static Comparable.>= infix(_:_:)() & 1) != 0)
    v50 = v48;
  else
    v50 = v43;
  v51 = v43;
  v52 = v49;
  v44(v60, (uint64_t)v50, v5);
  v53 = *(void (**)(char *, uint64_t))(v42 + 8);
  v53(v52, v5);
  v53(v51, v5);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for (DragGesture.Value, DragGesture.Value));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v46, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v41, type metadata accessor for DragGesture.Value);
  return v35 / v39;
}

int *closure #1 in TouchBasedMagnifyGesture.phase(state:childPhase:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  double v44;
  void (*v45)(uint64_t, char *, uint64_t);
  uint64_t v46;
  int *result;
  double *v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  v56 = a3;
  v55 = a2;
  v57 = a5;
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v50 - v14;
  v54 = type metadata accessor for Date();
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54, v16);
  v52 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v50 - v20;
  v51 = (char *)&v50 - v20;
  v22 = *(int *)(v8 + 48);
  v23 = (uint64_t)&v15[v22];
  v24 = a1 + v22;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v15, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v24, v23, type metadata accessor for DragGesture.Value);
  v25 = static TouchBasedMagnifyGesture.scale(_:)(v21, (uint64_t)v15, v23);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v23, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for DragGesture.Value);
  v26 = (uint64_t)&v15[*(int *)(v8 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v15, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v24, v26, type metadata accessor for DragGesture.Value);
  type metadata accessor for DragGesture.Value(0);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for DragGesture.Value);
  v27 = (uint64_t)&v11[*(int *)(v8 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v11, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v24, v27, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v27, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v26, type metadata accessor for DragGesture.Value);
  v28 = (uint64_t)&v15[*(int *)(v8 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v15, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v24, v28, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for DragGesture.Value);
  v29 = (uint64_t)&v11[*(int *)(v8 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v11, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v24, v29, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v29, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v28, type metadata accessor for DragGesture.Value);
  v30 = TransformGestureAnchorHelper.startPoints(_:)();
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v37 = v53;
  v38 = v52;
  v39 = v51;
  v40 = v54;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v52, v51, v54);
  v41 = *(_OWORD *)(a4 + 56);
  v60 = *(_OWORD *)(a4 + 40);
  v61 = v41;
  v42 = *(_OWORD *)(a4 + 88);
  v62 = *(_OWORD *)(a4 + 72);
  v63 = v42;
  v43 = *(_OWORD *)(a4 + 24);
  v58 = *(_OWORD *)(a4 + 8);
  v59 = v43;
  v44 = specialized VelocitySampler.velocity.getter();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v40);
  v45 = *(void (**)(uint64_t, char *, uint64_t))(v37 + 32);
  v46 = v57;
  v45(v57, v38, v40);
  result = (int *)type metadata accessor for MagnifyGesture.Value();
  *(double *)(v46 + result[5]) = v25;
  *(double *)(v46 + result[6]) = v44;
  v48 = (double *)(v46 + result[7]);
  *v48 = v30;
  *((_QWORD *)v48 + 1) = v32;
  v49 = (_QWORD *)(v46 + result[8]);
  *v49 = v34;
  v49[1] = v36;
  return result;
}

uint64_t protocol witness for Gesture.body.getter in conformance TouchBasedMagnifyGesture@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return TouchBasedMagnifyGesture.body.getter(*(_QWORD *)(v1 + 8), *(_DWORD *)(v1 + 16), a1, *(double *)v1);
}

BOOL specialized static MagnifyGesture.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  _BOOL4 v11;

  if ((static Date.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = type metadata accessor for MagnifyGesture.Value();
  if (*(double *)(a1 + *(int *)(v4 + 20)) != *(double *)(a2 + *(int *)(v4 + 20)))
    return 0;
  v5 = v4;
  if (*(double *)(a1 + *(int *)(v4 + 24)) != *(double *)(a2 + *(int *)(v4 + 24))
    || (static UnitPoint.== infix(_:_:)() & 1) == 0)
  {
    return 0;
  }
  v6 = *(int *)(v5 + 32);
  v7 = *(double *)(a1 + v6);
  v8 = *(double *)(a1 + v6 + 8);
  v9 = (double *)(a2 + v6);
  v10 = v9[1];
  v11 = v7 == *v9;
  return v8 == v10 && v11;
}

void type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>)
  {
    type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>(255, (unint64_t *)&lazy cache variable for type metadata for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MEMORY[0x1E0CE49F8]);
    type metadata accessor for MagnifyGesture.Value();
    lazy protocol witness table accessor for type SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture> and conformance SimultaneousGesture<A, B>();
    v0 = type metadata accessor for _MapGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>);
  }
}

unint64_t lazy protocol witness table accessor for type TransformBasedMagnifyGesture and conformance TransformBasedMagnifyGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformBasedMagnifyGesture and conformance TransformBasedMagnifyGesture;
  if (!lazy protocol witness table cache variable for type TransformBasedMagnifyGesture and conformance TransformBasedMagnifyGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TransformBasedMagnifyGesture, &type metadata for TransformBasedMagnifyGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformBasedMagnifyGesture and conformance TransformBasedMagnifyGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TouchBasedMagnifyGesture and conformance TouchBasedMagnifyGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TouchBasedMagnifyGesture and conformance TouchBasedMagnifyGesture;
  if (!lazy protocol witness table cache variable for type TouchBasedMagnifyGesture and conformance TouchBasedMagnifyGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TouchBasedMagnifyGesture, &type metadata for TouchBasedMagnifyGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchBasedMagnifyGesture and conformance TouchBasedMagnifyGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture> and conformance SimultaneousGesture<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture> and conformance SimultaneousGesture<A, B>;
  if (!lazy protocol witness table cache variable for type SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture> and conformance SimultaneousGesture<A, B>)
  {
    type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>(255, (unint64_t *)&lazy cache variable for type metadata for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MEMORY[0x1E0CE49F8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4A08], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture> and conformance SimultaneousGesture<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CategoryGesture<MagnifyGesture.Value> and conformance CategoryGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CategoryGesture<MagnifyGesture.Value> and conformance CategoryGesture<A>;
  if (!lazy protocol witness table cache variable for type CategoryGesture<MagnifyGesture.Value> and conformance CategoryGesture<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for CategoryGesture<MagnifyGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, MEMORY[0x1E0CE2C58]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2C68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CategoryGesture<MagnifyGesture.Value> and conformance CategoryGesture<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value> and conformance _MapGesture<A, B>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value> and conformance _MapGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>, MEMORY[0x1E0CE14D8]);
}

unint64_t lazy protocol witness table accessor for type MagnifyGesture.Child and conformance MagnifyGesture.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MagnifyGesture.Child and conformance MagnifyGesture.Child;
  if (!lazy protocol witness table cache variable for type MagnifyGesture.Child and conformance MagnifyGesture.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MagnifyGesture.Child, &unk_1E1AB85B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagnifyGesture.Child and conformance MagnifyGesture.Child);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<MagnifyGesture.Value>, ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>> and conformance ModifierGesture<A, B>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E88], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in MagnificationGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in MagnificationGesture()
{
  return &protocol witness table for MagnificationGesture;
}

_UNKNOWN **base witness table accessor for Gesture in MagnifyGesture()
{
  return &protocol witness table for MagnifyGesture;
}

ValueMetadata *type metadata accessor for MagnificationGesture()
{
  return &type metadata for MagnificationGesture;
}

ValueMetadata *type metadata accessor for MagnifyGesture()
{
  return &type metadata for MagnifyGesture;
}

uint64_t getEnumTagSinglePayload for MagnifyGesture.Value()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874A8400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MagnifyGesture.Value()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874A8448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for MagnifyGesture.Value()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1874A8518()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _MapGesture<MagnifyGesture, CGFloat> and conformance _MapGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _MapGesture<MagnifyGesture, CGFloat>, MEMORY[0x1E0CE14D8]);
}

void type metadata accessor for _MapGesture<MagnifyGesture, CGFloat>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _MapGesture<MagnifyGesture, CGFloat>)
  {
    v0 = type metadata accessor for _MapGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<MagnifyGesture, CGFloat>);
  }
}

ValueMetadata *type metadata accessor for MagnifyGesture.Value.Platform()
{
  return &type metadata for MagnifyGesture.Value.Platform;
}

void *type metadata accessor for MagnifyGesture.Child()
{
  return &unk_1E1AB85B8;
}

ValueMetadata *type metadata accessor for TouchBasedMagnifyGesture()
{
  return &type metadata for TouchBasedMagnifyGesture;
}

ValueMetadata *type metadata accessor for TransformBasedMagnifyGesture()
{
  return &type metadata for TransformBasedMagnifyGesture;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in TouchBasedMagnifyGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in TransformBasedMagnifyGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1874A860C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TransformBasedMagnifyGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in TransformBasedMagnifyGesture.body.getter(a1, a2, a3);
}

uint64_t sub_1874A862C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in TouchBasedMagnifyGesture.body.getter@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #2 in TouchBasedMagnifyGesture.body.getter(a1, a2, *(_QWORD *)(v3 + 24), *(_DWORD *)(v3 + 32), a3, *(double *)(v3 + 16));
}

void type metadata accessor for ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>)
  {
    type metadata accessor for StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>();
    type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value> and conformance StateContainerGesture<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, MEMORY[0x1E0CE51E0]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>, MEMORY[0x1E0CE14D8]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>);
  }
}

void type metadata accessor for StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>)
  {
    type metadata accessor for (DragGesture.Value, DragGesture.Value)();
    type metadata accessor for MagnifyGesture.Value();
    lazy protocol witness table accessor for type TouchBasedMagnifyGesture.StateType and conformance TouchBasedMagnifyGesture.StateType();
    v0 = type metadata accessor for StateContainerGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>);
  }
}

unint64_t lazy protocol witness table accessor for type TouchBasedMagnifyGesture.StateType and conformance TouchBasedMagnifyGesture.StateType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TouchBasedMagnifyGesture.StateType and conformance TouchBasedMagnifyGesture.StateType;
  if (!lazy protocol witness table cache variable for type TouchBasedMagnifyGesture.StateType and conformance TouchBasedMagnifyGesture.StateType)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TouchBasedMagnifyGesture.StateType, &unk_1E1AE7528);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchBasedMagnifyGesture.StateType and conformance TouchBasedMagnifyGesture.StateType);
  }
  return result;
}

void type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!*a2)
  {
    v8[0] = &type metadata for TransformBasedMagnifyGesture;
    v8[1] = &type metadata for TouchBasedMagnifyGesture;
    v8[2] = lazy protocol witness table accessor for type TransformBasedMagnifyGesture and conformance TransformBasedMagnifyGesture();
    v8[3] = lazy protocol witness table accessor for type TouchBasedMagnifyGesture and conformance TouchBasedMagnifyGesture();
    v6 = a3(a1, v8);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t outlined init with copy of SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>(0, (unint64_t *)&lazy cache variable for type metadata for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value, MEMORY[0x1E0CE49F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>(0, (unint64_t *)&lazy cache variable for type metadata for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value, MEMORY[0x1E0CE49F0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *type metadata accessor for TransformBasedMagnifyGesture.StateType()
{
  return &unk_1E1AF87F8;
}

uint64_t getEnumTagSinglePayload for TouchBasedMagnifyGesture.StateType(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[104])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TouchBasedMagnifyGesture.StateType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void *type metadata accessor for TouchBasedMagnifyGesture.StateType()
{
  return &unk_1E1AE7528;
}

uint64_t sub_1874A89CC()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>, MEMORY[0x1E0CE2E88]);
}

void type metadata accessor for ModifierGesture<StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>)
  {
    type metadata accessor for StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>();
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value> and conformance StateContainerGesture<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>, MEMORY[0x1E0CE51E0]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>, MEMORY[0x1E0CE2E88]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>);
  }
}

void type metadata accessor for StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>)
  {
    type metadata accessor for MagnifyGesture.Value();
    lazy protocol witness table accessor for type TransformBasedMagnifyGesture.StateType and conformance TransformBasedMagnifyGesture.StateType();
    v0 = type metadata accessor for StateContainerGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>);
  }
}

unint64_t lazy protocol witness table accessor for type TransformBasedMagnifyGesture.StateType and conformance TransformBasedMagnifyGesture.StateType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformBasedMagnifyGesture.StateType and conformance TransformBasedMagnifyGesture.StateType;
  if (!lazy protocol witness table cache variable for type TransformBasedMagnifyGesture.StateType and conformance TransformBasedMagnifyGesture.StateType)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TransformBasedMagnifyGesture.StateType, &unk_1E1AF87F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformBasedMagnifyGesture.StateType and conformance TransformBasedMagnifyGesture.StateType);
  }
  return result;
}

uint64_t sub_1874A8B80()
{
  return lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<MagnifyGesture.Value>, ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CategoryGesture<MagnifyGesture.Value>, ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>> and conformance ModifierGesture<A, B>, &lazy cache variable for type metadata for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>, (void (*)(void))lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>);
}

void type metadata accessor for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for CategoryGesture<MagnifyGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, MEMORY[0x1E0CE2C58]);
    a3(255);
    lazy protocol witness table accessor for type CategoryGesture<MagnifyGesture.Value> and conformance CategoryGesture<A>();
    a4();
    v7 = type metadata accessor for ModifierGesture();
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>, MEMORY[0x1E0CE2E88]);
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in SidebarButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SidebarButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a1;
  v33 = a4;
  v31 = type metadata accessor for SidebarButtonStyle._Body(0);
  MEMORY[0x1E0C80A78](v31, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v30 - v11;
  v13 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v18 = v17;
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v30 - v24;
  a3 &= 1u;
  outlined copy of Environment<Bool>.Content(a2, a3);
  v26 = specialized Environment.wrappedValue.getter(a2, a3);
  outlined consume of Environment<Bool>.Content(a2, a3);
  if (v26 == 2)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v32, (uint64_t)v8, type metadata accessor for PrimitiveButtonStyleConfiguration);
    v27 = &v8[*(int *)(v31 + 20)];
    *(_QWORD *)v27 = swift_getKeyPath();
    v27[8] = 0;
    outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)v12, type metadata accessor for SidebarButtonStyle._Body);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, v33, type metadata accessor for SidebarButtonStyle._Body);
    type metadata accessor for _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for SidebarButtonStyle._Body);
  }
  else
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v32, (uint64_t)v16, type metadata accessor for PrimitiveButtonStyleConfiguration);
    v29 = v16[1];
    *v21 = *v16;
    v21[1] = v29;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v16[*(int *)(v13 + 24)], (uint64_t)&v21[*(int *)(v18 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, type metadata accessor for PrimitiveButtonStyleConfiguration);
    outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v21, (uint64_t)v25);
    outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v25, v33);
    type metadata accessor for _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    return outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v25);
  }
}

uint64_t SidebarButtonStyle._Body.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v20;

  v3 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (uint64_t)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SidebarButtonStyle._Body.SidebarButtonContent(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, v6, type metadata accessor for PrimitiveButtonStyleConfiguration);
  *(_QWORD *)v10 = swift_getKeyPath();
  v10[8] = 0;
  *((_QWORD *)v10 + 2) = swift_getKeyPath();
  v10[24] = 0;
  outlined init with take of TableCellFormula(v6, (uint64_t)&v10[*(int *)(v7 + 24)], type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of TableCellFormula((uint64_t)v10, (uint64_t)v14, type metadata accessor for SidebarButtonStyle._Body.SidebarButtonContent);
  v15 = v1 + *(int *)(type metadata accessor for SidebarButtonStyle._Body(0) + 20);
  v16 = *(_QWORD *)v15;
  v17 = *(_BYTE *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v15, v17);
  LOBYTE(v6) = specialized Environment.wrappedValue.getter(v16, v17);
  outlined consume of Environment<Bool>.Content(v16, v17);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, a1, (uint64_t (*)(_QWORD))type metadata accessor for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>);
  type metadata accessor for ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>>();
  *(_BYTE *)(a1 + *(int *)(v18 + 36)) = (v6 & 1) == 0;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>);
}

uint64_t SidebarButtonStyle._Body.SidebarButtonContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  char v28;
  char v29;
  __int16 v30;

  v3 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3, v6);
  v7 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (unsigned __int8 *)(v1
                         + *(int *)(type metadata accessor for SidebarButtonStyle._Body.SidebarButtonContent(0) + 24));
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, (uint64_t)v7, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v9 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v10 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v7, v10 + v9, type metadata accessor for PrimitiveButtonStyleConfiguration);
  KeyPath = swift_getKeyPath();
  v26 = swift_getKeyPath();
  v25 = swift_getKeyPath();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  v11 = swift_getKeyPath();
  v12 = swift_getKeyPath();
  v13 = *v8;
  v14 = v8[1];
  v15 = *(_QWORD *)v1;
  v16 = *(_BYTE *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v1, v16);
  v17 = specialized Environment.wrappedValue.getter(v15, v16);
  outlined consume of Environment<Bool>.Content(v15, v16);
  v18 = *(_QWORD *)(v1 + 16);
  v19 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of Environment<SceneBridge?>.Content(v18, v19);
  v20 = specialized Environment.wrappedValue.getter(v18, v19);
  result = outlined consume of Environment<AnyShapeStyle?>.Content(v18, v19);
  if (!v20)
  {
    result = static HierarchicalShapeStyle.sharedPrimary.getter();
    v20 = result;
  }
  v30 = 0;
  v22 = 256;
  if (!v14)
    v22 = 0;
  v23 = 0x10000;
  v29 = 0;
  if ((v17 & 1) == 0)
    v23 = 0;
  v28 = 0;
  *(_QWORD *)a1 = partial apply for implicit closure #2 in implicit closure #1 in BorderedButton.body.getter;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = KeyPath;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = v26;
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v25;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = v12;
  *(_BYTE *)(a1 + 112) = v28;
  *(_QWORD *)(a1 + 120) = v22 | v13 | v23;
  *(_QWORD *)(a1 + 128) = v20;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SidebarButtonStyle._Body.SidebarButtonContent()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>(0);
  type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>(0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SidebarButtonStyle._Body()
{
  type metadata accessor for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _TraitWritingModifier<SidebarButtonState.Key>, (uint64_t)&type metadata for SidebarButtonState.Key, (uint64_t)&protocol witness table for SidebarButtonState.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent> and conformance _UnaryViewAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, MEMORY[0x1E0CE4108]);
  lazy protocol witness table accessor for type _TraitWritingModifier<SidebarButtonState.Key> and conformance _TraitWritingModifier<A>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance SidebarButtonStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return SidebarButtonStyle.makeBody(configuration:)(a1, *(_QWORD *)v2, *(_BYTE *)(v2 + 8), a2);
}

uint64_t type metadata accessor for SidebarButtonStyle._Body(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SidebarButtonStyle._Body);
}

_QWORD *initializeBufferWithCopyOfBuffer for SidebarButtonStyle._Body(_WORD *a1, _WORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  char v39;
  char v40;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    *a1 = *a2;
    v7 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v26 = *(_QWORD *)v9;
      v27 = *((_QWORD *)v9 + 1);
      v28 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v9, v27, v28);
      *(_QWORD *)v8 = v26;
      *((_QWORD *)v8 + 1) = v27;
      v8[16] = v28;
      v29 = *((_QWORD *)v9 + 5);
      v30 = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 24) = v30;
      *((_QWORD *)v8 + 5) = v29;
      v31 = (id)v30;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v11 = *(_QWORD *)v9;
        v12 = *((_QWORD *)v9 + 1);
        v14 = *((_QWORD *)v9 + 2);
        v13 = *((_QWORD *)v9 + 3);
        v39 = v9[34];
        v15 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v9, v12, v14, v13, v15, v39);
        *(_QWORD *)v8 = v11;
        *((_QWORD *)v8 + 1) = v12;
        *((_QWORD *)v8 + 2) = v14;
        *((_QWORD *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v15;
        v8[34] = v39;
        v16 = *((_QWORD *)v9 + 5);
        v17 = *((_QWORD *)v9 + 6);
        v18 = *((_QWORD *)v9 + 7);
        v19 = *((_QWORD *)v9 + 8);
        v40 = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v14, v40);
        *((_QWORD *)v8 + 5) = v16;
        *((_QWORD *)v8 + 6) = v17;
        *((_QWORD *)v8 + 7) = v18;
        *((_QWORD *)v8 + 8) = v19;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v40;
        v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
        v21 = &v8[v20];
        v22 = &v9[v20];
        v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
        v24 = type metadata accessor for LinkDestination.Configuration();
        v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        v33 = *(int *)(a3 + 20);
        v34 = (char *)v4 + v33;
        v35 = (char *)a2 + v33;
        v36 = *(_QWORD *)v35;
        v37 = v35[8];
        outlined copy of Environment<Bool>.Content(*(_QWORD *)v35, v37);
        *(_QWORD *)v34 = v36;
        v34[8] = v37;
        return v4;
      }
      v32 = *((_QWORD *)v9 + 1);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = v32;
    }
    swift_retain();
    goto LABEL_9;
  }
  v25 = *(_QWORD *)a2;
  *v4 = *(_QWORD *)a2;
  v4 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t destroy for SidebarButtonStyle._Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));

LABEL_6:
      swift_release();
      return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_BYTE *)(a1 + *(int *)(a2 + 20) + 8));
    case 1:
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_WORD *)(v4 + 32), *(_BYTE *)(v4 + 34));
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(_WORD *)(v4 + 72), *(_BYTE *)(v4 + 74));
      v6 = v4 + *(int *)(type metadata accessor for LinkDestination() + 24);
      v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_BYTE *)(a1 + *(int *)(a2 + 20) + 8));
    case 0:
      goto LABEL_6;
  }
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_BYTE *)(a1 + *(int *)(a2 + 20) + 8));
}

_WORD *initializeWithCopy for SidebarButtonStyle._Body(_WORD *a1, _WORD *a2, uint64_t a3)
{
  _WORD *v4;
  uint64_t v6;
  char *v7;
  char *v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v38;
  _WORD *v39;

  v4 = a2;
  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)v4 + v6;
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v25 = *(_QWORD *)v8;
    v26 = *((_QWORD *)v8 + 1);
    v27 = v8[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, v26, v27);
    *(_QWORD *)v7 = v25;
    *((_QWORD *)v7 + 1) = v26;
    v7[16] = v27;
    v28 = *((_QWORD *)v8 + 5);
    v29 = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 24) = v29;
    *((_QWORD *)v7 + 5) = v28;
    v30 = (id)v29;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v31 = *((_QWORD *)v8 + 1);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *((_QWORD *)v7 + 1) = v31;
    goto LABEL_6;
  }
  v38 = a3;
  v39 = v4;
  v10 = *(_QWORD *)v8;
  v11 = *((_QWORD *)v8 + 1);
  v13 = *((_QWORD *)v8 + 2);
  v12 = *((_QWORD *)v8 + 3);
  v14 = v8[34];
  v15 = *((_WORD *)v8 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v8, v11, v13, v12, v15, v14);
  *(_QWORD *)v7 = v10;
  *((_QWORD *)v7 + 1) = v11;
  *((_QWORD *)v7 + 2) = v13;
  *((_QWORD *)v7 + 3) = v12;
  *((_WORD *)v7 + 16) = v15;
  v7[34] = v14;
  v16 = *((_QWORD *)v8 + 5);
  v17 = *((_QWORD *)v8 + 6);
  v18 = *((_QWORD *)v8 + 7);
  v19 = *((_QWORD *)v8 + 8);
  LOBYTE(v11) = v8[74];
  LOWORD(v13) = *((_WORD *)v8 + 36);
  outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v13, v11);
  *((_QWORD *)v7 + 5) = v16;
  *((_QWORD *)v7 + 6) = v17;
  *((_QWORD *)v7 + 7) = v18;
  *((_QWORD *)v7 + 8) = v19;
  *((_WORD *)v7 + 36) = v13;
  v7[74] = v11;
  a3 = v38;
  v4 = v39;
  v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v21 = &v7[v20];
  v22 = &v8[v20];
  v23 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  v24 = type metadata accessor for LinkDestination.Configuration();
  v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_7:
  swift_storeEnumTagMultiPayload();
  v32 = *(int *)(a3 + 20);
  v33 = (char *)a1 + v32;
  v34 = (char *)v4 + v32;
  v35 = *(_QWORD *)v34;
  v36 = v34[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v34, v36);
  *(_QWORD *)v33 = v35;
  v33[8] = v36;
  return a1;
}

_WORD *assignWithCopy for SidebarButtonStyle._Body(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v41;

  *a1 = *a2;
  v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    v7 = *(int *)(v6 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v7, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v26 = *(_QWORD *)v9;
      v27 = *((_QWORD *)v9 + 1);
      v28 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v9, v27, v28);
      *(_QWORD *)v8 = v26;
      *((_QWORD *)v8 + 1) = v27;
      v8[16] = v28;
      v29 = (void *)*((_QWORD *)v9 + 3);
      *((_QWORD *)v8 + 3) = v29;
      v30 = *((_QWORD *)v9 + 5);
      *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
      *((_QWORD *)v8 + 5) = v30;
      v31 = v29;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v41 = a3;
        v11 = *(_QWORD *)v9;
        v12 = *((_QWORD *)v9 + 1);
        v14 = *((_QWORD *)v9 + 2);
        v13 = *((_QWORD *)v9 + 3);
        v15 = v9[34];
        v16 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v9, v12, v14, v13, v16, v15);
        *(_QWORD *)v8 = v11;
        *((_QWORD *)v8 + 1) = v12;
        *((_QWORD *)v8 + 2) = v14;
        *((_QWORD *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v16;
        v8[34] = v15;
        v17 = *((_QWORD *)v9 + 5);
        v18 = *((_QWORD *)v9 + 6);
        v19 = *((_QWORD *)v9 + 7);
        v20 = *((_QWORD *)v9 + 8);
        LOBYTE(v12) = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v17, v18, v19, v20, v14, v12);
        *((_QWORD *)v8 + 5) = v17;
        *((_QWORD *)v8 + 6) = v18;
        *((_QWORD *)v8 + 7) = v19;
        *((_QWORD *)v8 + 8) = v20;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v12;
        a3 = v41;
        v21 = *(int *)(type metadata accessor for LinkDestination() + 24);
        v22 = &v8[v21];
        v23 = &v9[v21];
        v24 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
        v25 = type metadata accessor for LinkDestination.Configuration();
        v22[*(int *)(v25 + 20)] = v23[*(int *)(v25 + 20)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        goto LABEL_9;
      }
      v32 = *((_QWORD *)v9 + 1);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = v32;
    }
    swift_retain();
    goto LABEL_8;
  }
LABEL_9:
  v33 = *(int *)(a3 + 20);
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = *(_QWORD *)v35;
  v37 = v35[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v35, v37);
  v38 = *(_QWORD *)v34;
  v39 = v34[8];
  *(_QWORD *)v34 = v36;
  v34[8] = v37;
  outlined consume of Environment<Bool>.Content(v38, v39);
  return a1;
}

_WORD *initializeWithTake for SidebarButtonStyle._Body(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = *((_OWORD *)v8 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *((_OWORD *)v7 + 1) = v10;
    *(_DWORD *)(v7 + 31) = *(_DWORD *)(v8 + 31);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    *(_DWORD *)(v7 + 71) = *(_DWORD *)(v8 + 71);
    v11 = *(int *)(type metadata accessor for LinkDestination() + 24);
    v12 = &v7[v11];
    v13 = &v8[v11];
    v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    v15 = type metadata accessor for LinkDestination.Configuration();
    v12[*(int *)(v15 + 20)] = v13[*(int *)(v15 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v16 = *(int *)(a3 + 20);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  return a1;
}

_WORD *assignWithTake for SidebarButtonStyle._Body(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  *a1 = *a2;
  v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    v7 = *(int *)(v6 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v7, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    v10 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = *((_OWORD *)v9 + 1);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *((_OWORD *)v8 + 1) = v11;
      *(_DWORD *)(v8 + 31) = *(_DWORD *)(v9 + 31);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
      *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
      *(_DWORD *)(v8 + 71) = *(_DWORD *)(v9 + 71);
      v12 = *(int *)(type metadata accessor for LinkDestination() + 24);
      v13 = &v8[v12];
      v14 = &v9[v12];
      v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      v16 = type metadata accessor for LinkDestination.Configuration();
      v13[*(int *)(v16 + 20)] = v14[*(int *)(v16 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v17 = *(int *)(a3 + 20);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = v19[8];
  v21 = *(_QWORD *)v18;
  v22 = v18[8];
  *(_QWORD *)v18 = v20;
  v18[8] = (char)v19;
  outlined consume of Environment<Bool>.Content(v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarButtonStyle._Body()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874A9E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SidebarButtonStyle._Body()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874A9EE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  return result;
}

uint64_t type metadata completion function for SidebarButtonStyle._Body()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SidebarButtonState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1874AA01C + 4 * byte_187C374E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1874AA050 + 4 * byte_187C374E0[v4]))();
}

uint64_t sub_1874AA050(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874AA058(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1874AA060);
  return result;
}

uint64_t sub_1874AA06C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1874AA074);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1874AA078(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874AA080(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SidebarButtonState()
{
  return &type metadata for SidebarButtonState;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body>.Storage(255, &lazy cache variable for type metadata for _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SidebarButtonStyle._Body and conformance SidebarButtonStyle._Body, type metadata accessor for SidebarButtonStyle._Body, (uint64_t)&protocol conformance descriptor for SidebarButtonStyle._Body);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body>.Storage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    v7 = v6;
    v8 = type metadata accessor for SidebarButtonStyle._Body(255);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t associated type witness table accessor for View.Body : View in SidebarButtonStyle._Body()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for SidebarButtonStyle._Body.SidebarButtonContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SidebarButtonStyle._Body.SidebarButtonContent);
}

void type metadata accessor for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>)
  {
    type metadata accessor for SidebarButtonStyle._Body.SidebarButtonContent(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SidebarButtonStyle._Body.SidebarButtonContent and conformance SidebarButtonStyle._Body.SidebarButtonContent, type metadata accessor for SidebarButtonStyle._Body.SidebarButtonContent, (uint64_t)&protocol conformance descriptor for SidebarButtonStyle._Body.SidebarButtonContent);
    v0 = type metadata accessor for _UnaryViewAdaptor();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>);
  }
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>>)
  {
    type metadata accessor for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SidebarButtonState.Key>, (uint64_t)&type metadata for SidebarButtonState.Key, (uint64_t)&protocol witness table for SidebarButtonState.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>>);
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<SidebarButtonState.Key> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<SidebarButtonState.Key> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<SidebarButtonState.Key> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SidebarButtonState.Key>, (uint64_t)&type metadata for SidebarButtonState.Key, (uint64_t)&protocol witness table for SidebarButtonState.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<SidebarButtonState.Key> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for SidebarButtonState.Key()
{
  return &type metadata for SidebarButtonState.Key;
}

unint64_t initializeBufferWithCopyOfBuffer for SidebarButtonStyle._Body.SidebarButtonContent(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  id v41;
  uint64_t v42;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v35 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v35 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_BYTE *)(a2 + 24);
    outlined copy of Environment<SceneBridge?>.Content(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v10;
    v11 = *(int *)(a3 + 24);
    v12 = a1 + v11;
    v13 = a2 + v11;
    *(_WORD *)(a1 + v11) = *(_WORD *)(a2 + v11);
    v14 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
    v15 = v12 + v14;
    v16 = v13 + v14;
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v36 = *(_QWORD *)v16;
      v37 = *(_QWORD *)(v16 + 8);
      v38 = *(_BYTE *)(v16 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v16, v37, v38);
      *(_QWORD *)v15 = v36;
      *(_QWORD *)(v15 + 8) = v37;
      *(_BYTE *)(v15 + 16) = v38;
      v39 = *(_QWORD *)(v16 + 40);
      v40 = *(_OWORD *)(v16 + 24);
      *(_OWORD *)(v15 + 24) = v40;
      *(_QWORD *)(v15 + 40) = v39;
      v41 = (id)v40;
      swift_retain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v18 = *(_QWORD *)v16;
      v19 = *(_QWORD *)(v16 + 8);
      v20 = *(_QWORD *)(v16 + 16);
      v21 = *(_QWORD *)(v16 + 24);
      v22 = *(_BYTE *)(v16 + 34);
      v23 = *(_WORD *)(v16 + 32);
      outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v16, v19, v20, v21, v23, v22);
      *(_QWORD *)v15 = v18;
      *(_QWORD *)(v15 + 8) = v19;
      *(_QWORD *)(v15 + 16) = v20;
      *(_QWORD *)(v15 + 24) = v21;
      *(_WORD *)(v15 + 32) = v23;
      *(_BYTE *)(v15 + 34) = v22;
      v24 = *(_QWORD *)(v16 + 40);
      v25 = *(_QWORD *)(v16 + 48);
      v26 = *(_QWORD *)(v16 + 56);
      v27 = *(_QWORD *)(v16 + 64);
      v28 = *(_BYTE *)(v16 + 74);
      v29 = *(_WORD *)(v16 + 72);
      outlined copy of Environment<OpenURLAction>.Content(v24, v25, v26, v27, v29, v28);
      *(_QWORD *)(v15 + 40) = v24;
      *(_QWORD *)(v15 + 48) = v25;
      *(_QWORD *)(v15 + 56) = v26;
      *(_QWORD *)(v15 + 64) = v27;
      *(_WORD *)(v15 + 72) = v29;
      *(_BYTE *)(v15 + 74) = v28;
      v30 = *(int *)(type metadata accessor for LinkDestination() + 24);
      v31 = v15 + v30;
      v32 = v16 + v30;
      v33 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      v34 = type metadata accessor for LinkDestination.Configuration();
      *(_BYTE *)(v31 + *(int *)(v34 + 20)) = *(_BYTE *)(v32 + *(int *)(v34 + 20));
    }
    else
    {
      v42 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *(_QWORD *)(v15 + 8) = v42;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for SidebarButtonStyle._Body.SidebarButtonContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = v4 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));

    return swift_release();
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    return swift_release();
  }
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_WORD *)(v5 + 32), *(_BYTE *)(v5 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), *(_WORD *)(v5 + 72), *(_BYTE *)(v5 + 74));
  v7 = v5 + *(int *)(type metadata accessor for LinkDestination() + 24);
  v8 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for SidebarButtonStyle._Body.SidebarButtonContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  id v38;
  uint64_t v39;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<SceneBridge?>.Content(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = (_WORD *)(a2 + v10);
  *(_WORD *)(a1 + v10) = *v12;
  v13 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  v14 = v11 + v13;
  v15 = (char *)v12 + v13;
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v33 = *(_QWORD *)v15;
    v34 = *((_QWORD *)v15 + 1);
    v35 = v15[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v15, v34, v35);
    *(_QWORD *)v14 = v33;
    *(_QWORD *)(v14 + 8) = v34;
    *(_BYTE *)(v14 + 16) = v35;
    v36 = *((_QWORD *)v15 + 5);
    v37 = *(_OWORD *)(v15 + 24);
    *(_OWORD *)(v14 + 24) = v37;
    *(_QWORD *)(v14 + 40) = v36;
    v38 = (id)v37;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v39 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_QWORD *)(v14 + 8) = v39;
    goto LABEL_6;
  }
  v17 = *(_QWORD *)v15;
  v18 = *((_QWORD *)v15 + 1);
  v19 = *((_QWORD *)v15 + 2);
  v20 = *((_QWORD *)v15 + 3);
  v21 = v15[34];
  v22 = *((_WORD *)v15 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v15, v18, v19, v20, v22, v21);
  *(_QWORD *)v14 = v17;
  *(_QWORD *)(v14 + 8) = v18;
  *(_QWORD *)(v14 + 16) = v19;
  *(_QWORD *)(v14 + 24) = v20;
  *(_WORD *)(v14 + 32) = v22;
  *(_BYTE *)(v14 + 34) = v21;
  v23 = *((_QWORD *)v15 + 5);
  v24 = *((_QWORD *)v15 + 6);
  v25 = *((_QWORD *)v15 + 7);
  v26 = *((_QWORD *)v15 + 8);
  LOBYTE(v20) = v15[74];
  v27 = *((_WORD *)v15 + 36);
  outlined copy of Environment<OpenURLAction>.Content(v23, v24, v25, v26, v27, v20);
  *(_QWORD *)(v14 + 40) = v23;
  *(_QWORD *)(v14 + 48) = v24;
  *(_QWORD *)(v14 + 56) = v25;
  *(_QWORD *)(v14 + 64) = v26;
  *(_WORD *)(v14 + 72) = v27;
  *(_BYTE *)(v14 + 74) = v20;
  v28 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v29 = v14 + v28;
  v30 = &v15[v28];
  v31 = type metadata accessor for URL();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  v32 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v29 + *(int *)(v32 + 20)) = v30[*(int *)(v32 + 20)];
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for SidebarButtonStyle._Body.SidebarButtonContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<SceneBridge?>.Content(v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(unsigned __int8 *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 24) = v11;
  outlined consume of Environment<AnyShapeStyle?>.Content(v12, v13);
  v14 = *(int *)(a3 + 24);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_WORD *)(a1 + v14) = *(_WORD *)(a2 + v14);
  v17 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    v18 = *(int *)(v17 + 24);
    v19 = v15 + v18;
    v20 = v16 + v18;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v19, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v38 = *(_QWORD *)v20;
      v39 = *(_QWORD *)(v20 + 8);
      v40 = *(_BYTE *)(v20 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v20, v39, v40);
      *(_QWORD *)v19 = v38;
      *(_QWORD *)(v19 + 8) = v39;
      *(_BYTE *)(v19 + 16) = v40;
      v41 = *(void **)(v20 + 24);
      *(_QWORD *)(v19 + 24) = v41;
      v42 = *(_QWORD *)(v20 + 40);
      *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
      *(_QWORD *)(v19 + 40) = v42;
      v43 = v41;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v22 = *(_QWORD *)v20;
        v23 = *(_QWORD *)(v20 + 8);
        v24 = *(_QWORD *)(v20 + 16);
        v25 = *(_QWORD *)(v20 + 24);
        v26 = *(_BYTE *)(v20 + 34);
        v27 = *(_WORD *)(v20 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v20, v23, v24, v25, v27, v26);
        *(_QWORD *)v19 = v22;
        *(_QWORD *)(v19 + 8) = v23;
        *(_QWORD *)(v19 + 16) = v24;
        *(_QWORD *)(v19 + 24) = v25;
        *(_WORD *)(v19 + 32) = v27;
        *(_BYTE *)(v19 + 34) = v26;
        v28 = *(_QWORD *)(v20 + 40);
        v29 = *(_QWORD *)(v20 + 48);
        v30 = *(_QWORD *)(v20 + 56);
        v31 = *(_QWORD *)(v20 + 64);
        LOBYTE(v25) = *(_BYTE *)(v20 + 74);
        v32 = *(_WORD *)(v20 + 72);
        outlined copy of Environment<OpenURLAction>.Content(v28, v29, v30, v31, v32, v25);
        *(_QWORD *)(v19 + 40) = v28;
        *(_QWORD *)(v19 + 48) = v29;
        *(_QWORD *)(v19 + 56) = v30;
        *(_QWORD *)(v19 + 64) = v31;
        *(_WORD *)(v19 + 72) = v32;
        *(_BYTE *)(v19 + 74) = v25;
        v33 = *(int *)(type metadata accessor for LinkDestination() + 24);
        v34 = v19 + v33;
        v35 = v20 + v33;
        v36 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
        v37 = type metadata accessor for LinkDestination.Configuration();
        *(_BYTE *)(v34 + *(int *)(v37 + 20)) = *(_BYTE *)(v35 + *(int *)(v37 + 20));
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v44 = *(_QWORD *)(v20 + 8);
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = v44;
    }
    swift_retain();
    goto LABEL_8;
  }
  return a1;
}

uint64_t initializeWithTake for SidebarButtonStyle._Body.SidebarButtonContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_WORD *)(a1 + v4) = *(_WORD *)(a2 + v4);
  v7 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  v8 = (char *)(v5 + v7);
  v9 = (char *)(v6 + v7);
  v10 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = *((_OWORD *)v9 + 1);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *((_OWORD *)v8 + 1) = v11;
    *(_DWORD *)(v8 + 31) = *(_DWORD *)(v9 + 31);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
    *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
    *(_DWORD *)(v8 + 71) = *(_DWORD *)(v9 + 71);
    v12 = *(int *)(type metadata accessor for LinkDestination() + 24);
    v13 = &v8[v12];
    v14 = &v9[v12];
    v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    v16 = type metadata accessor for LinkDestination.Configuration();
    v13[*(int *)(v16 + 20)] = v14[*(int *)(v16 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for SidebarButtonStyle._Body.SidebarButtonContent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *((_BYTE *)a2 + 24);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned __int8 *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v10;
  outlined consume of Environment<AnyShapeStyle?>.Content(v11, v12);
  v13 = *(int *)(a3 + 24);
  v14 = a1 + v13;
  v15 = (uint64_t)a2 + v13;
  *(_WORD *)(a1 + v13) = *(_WORD *)((char *)a2 + v13);
  v16 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if ((uint64_t *)a1 != a2)
  {
    v17 = *(int *)(v16 + 24);
    v18 = (char *)(v14 + v17);
    v19 = (char *)(v15 + v17);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    v20 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v21 = *((_OWORD *)v19 + 1);
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *((_OWORD *)v18 + 1) = v21;
      *(_DWORD *)(v18 + 31) = *(_DWORD *)(v19 + 31);
      *(_OWORD *)(v18 + 40) = *(_OWORD *)(v19 + 40);
      *(_OWORD *)(v18 + 56) = *(_OWORD *)(v19 + 56);
      *(_DWORD *)(v18 + 71) = *(_DWORD *)(v19 + 71);
      v22 = *(int *)(type metadata accessor for LinkDestination() + 24);
      v23 = &v18[v22];
      v24 = &v19[v22];
      v25 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
      v26 = type metadata accessor for LinkDestination.Configuration();
      v23[*(int *)(v26 + 20)] = v24[*(int *)(v26 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarButtonStyle._Body.SidebarButtonContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874AAD68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SidebarButtonStyle._Body.SidebarButtonContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874AADE8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for SidebarButtonStyle._Body.SidebarButtonContent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent> and conformance _UnaryViewAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, MEMORY[0x1E0CE4108]);
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<SidebarButtonState.Key> and conformance _TraitWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SidebarButtonStyle._Body.SidebarButtonContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1874AAF60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + *(int *)(v1 + 24) + ((v2 + 16) & ~v2);
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));

LABEL_6:
      swift_release();
      return swift_deallocObject();
    case 1:
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_WORD *)(v3 + 32), *(_BYTE *)(v3 + 34));
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_WORD *)(v3 + 72), *(_BYTE *)(v3 + 74));
      v5 = v3 + *(int *)(type metadata accessor for LinkDestination() + 24);
      v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      return swift_deallocObject();
    case 0:
      goto LABEL_6;
  }
  return swift_deallocObject();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>);
}

void type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>)
  {
    type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>();
    v2 = v1;
    v3[0] = &protocol witness table for PrimitiveButtonStyleConfiguration.Label;
    v3[1] = lazy protocol witness table accessor for type StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier;
  if (!lazy protocol witness table cache variable for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListButtonStyleDisabledOpacityModifier, &type metadata for ListButtonStyleDisabledOpacityModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier);
    v3[1] = &protocol witness table for _DefaultForegroundStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>(255);
    type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>);
  }
}

void View.contextMenu<A>(isPresented:menuItems:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.contextMenu<A, B>(menuItems:preview:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _QWORD v19[29];
  _QWORD v20[3];

  v19[8] = a8;
  v19[5] = a6;
  v19[2] = a5;
  v19[10] = a4;
  v19[11] = a3;
  v19[7] = a2;
  v19[6] = a1;
  v19[12] = a9;
  v19[3] = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  v19[9] = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v13 = type metadata accessor for ModifiedContent();
  v14 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v20[0] = a10;
  v20[1] = v14;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v20);
  v15 = type metadata accessor for ZStack();
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v15, v17);
  v19[25] = v15;
  v19[26] = a7;
  v19[1] = a7;
  v19[27] = v18;
  v19[28] = a11;
  type metadata accessor for ContextMenuPreviewModifier();
}

void sub_1874AB424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v12 - 304) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&a9 - v13;
  v15 = *(_QWORD *)(v12 - 296);
  *(_QWORD *)(v12 - 208) = v11;
  *(_QWORD *)(v12 - 200) = v15;
  v16 = *(_QWORD *)(v12 - 272);
  *(_QWORD *)(v12 - 192) = v10;
  *(_QWORD *)(v12 - 184) = v16;
  *(_QWORD *)(v12 - 176) = *(_QWORD *)(v12 - 312);
  *(_QWORD *)(v12 - 168) = v9;
  v17 = *(_QWORD *)(v12 - 280);
  *(_QWORD *)(v12 - 160) = *(_QWORD *)(v12 - 288);
  *(_QWORD *)(v12 - 152) = v17;
  static Alignment.center.getter();
  v18 = ZStack.init(alignment:content:)();
  (*(void (**)(uint64_t))(v12 - 248))(v18);
  ContextMenuPreviewModifier.init(menuView:preview:hidePreview:previewAction:)((uint64_t)v14);
}

uint64_t sub_1874AB4F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x18D75B4AC](v0, *(_QWORD *)(v3 - 320), v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 304) + 8))(v0, v2);
}

void View.contextMenu<A, B, C>(menuItems:preview:previewDestination:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  _QWORD v22[5];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];

  v33 = a6;
  v34 = a5;
  v31 = a4;
  v32 = a3;
  v29 = a2;
  v28 = a1;
  v35 = a7;
  v27 = a10;
  v22[4] = a11;
  MEMORY[0x1E0C80A78](a1, a2);
  v30 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v26 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v17 = type metadata accessor for ModifiedContent();
  v25 = v17;
  v18 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v42[0] = a11;
  v42[1] = v18;
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v42);
  v19 = type metadata accessor for ZStack();
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v19, v21);
  v36 = v19;
  v37 = a8;
  v22[2] = a8;
  v22[3] = a9;
  v38 = a9;
  v39 = v23;
  v22[1] = a12;
  v40 = a12;
  v41 = a13;
  type metadata accessor for ContextMenuPreviewDestinationModifier();
}

void sub_1874AB70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v17 - 368) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&a9 - v18;
  *(_QWORD *)(v17 - 240) = v16;
  *(_QWORD *)(v17 - 232) = v11;
  *(_QWORD *)(v17 - 224) = v15;
  *(_QWORD *)(v17 - 216) = v13;
  v20 = *(_QWORD *)(v17 - 384);
  *(_QWORD *)(v17 - 208) = *(_QWORD *)(v17 - 336);
  *(_QWORD *)(v17 - 200) = v20;
  *(_QWORD *)(v17 - 192) = v14;
  *(_QWORD *)(v17 - 184) = v10;
  v21 = *(_QWORD *)(v17 - 320);
  *(_QWORD *)(v17 - 176) = *(_QWORD *)(v17 - 328);
  *(_QWORD *)(v17 - 168) = v21;
  static Alignment.center.getter();
  v22 = ZStack.init(alignment:content:)();
  v23 = (*(uint64_t (**)(uint64_t))(v17 - 296))(v22);
  (*(void (**)(uint64_t))(v17 - 280))(v23);
  ContextMenuPreviewDestinationModifier.init(menuView:preview:destination:)(v12, v9, (uint64_t)v19);
}

uint64_t sub_1874AB81C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x18D75B4AC](v1, v3, v2, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 368) + 8))(v1, v2);
}

uint64_t closure #1 in View.contextMenu<A, B, C>(menuItems:preview:previewDestination:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v26 = a5;
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v11 = type metadata accessor for ModifiedContent();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v25 - v19;
  a1(v18);
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  v21 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v27[0] = a4;
  v27[1] = v21;
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v27);
  static ViewBuilder.buildExpression<A>(_:)(v15, v11, v22);
  v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v15, v11);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, v11, v26);
  return ((uint64_t (*)(char *, uint64_t))v23)(v20, v11);
}

uint64_t partial apply for closure #1 in View.contextMenu<A, B, C>(menuItems:preview:previewDestination:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in View.contextMenu<A, B, C>(menuItems:preview:previewDestination:)(*(void (**)(double))(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 56), a1);
}

void View.contextMenu<A, B>(menuItems:preview:previewAction:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _QWORD v18[29];
  _QWORD v19[3];

  v18[10] = a5;
  v18[11] = a6;
  v18[8] = a4;
  v18[9] = a3;
  v18[6] = a2;
  v18[5] = a1;
  v18[12] = a7;
  v18[1] = a10;
  v18[4] = a9;
  MEMORY[0x1E0C80A78](a1, a2);
  v18[7] = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v12 = type metadata accessor for ModifiedContent();
  v13 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v19[0] = a10;
  v19[1] = v13;
  v18[2] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v19);
  v14 = type metadata accessor for ZStack();
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v14, v16);
  v18[25] = v14;
  v18[26] = a8;
  v18[0] = a8;
  v18[27] = v17;
  v18[28] = a11;
  type metadata accessor for ContextMenuPreviewModifier();
}

void sub_1874ABB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v13 - 312) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&a9 - v14;
  *(_QWORD *)(v13 - 208) = v12;
  *(_QWORD *)(v13 - 200) = v10;
  v16 = *(_QWORD *)(v13 - 304);
  *(_QWORD *)(v13 - 192) = v11;
  *(_QWORD *)(v13 - 184) = v16;
  *(_QWORD *)(v13 - 176) = *(_QWORD *)(v13 - 328);
  *(_QWORD *)(v13 - 168) = v9;
  v17 = *(_QWORD *)(v13 - 288);
  *(_QWORD *)(v13 - 160) = *(_QWORD *)(v13 - 296);
  *(_QWORD *)(v13 - 152) = v17;
  static Alignment.center.getter();
  v18 = ZStack.init(alignment:content:)();
  (*(void (**)(uint64_t))(v13 - 264))(v18);
  ContextMenuPreviewModifier.init(menuView:preview:hidePreview:previewAction:)((uint64_t)v15);
}

uint64_t sub_1874ABC64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  MEMORY[0x18D75B4AC](v0, v3, v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 312) + 8))(v0, v1);
}

uint64_t closure #1 in View.contextMenu<A, B>(menuItems:preview:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v26 = a5;
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v11 = type metadata accessor for ModifiedContent();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v25 - v19;
  a1(v18);
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  v21 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v27[0] = a4;
  v27[1] = v21;
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v27);
  static ViewBuilder.buildExpression<A>(_:)(v15, v11, v22);
  v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v15, v11);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, v11, v26);
  return ((uint64_t (*)(char *, uint64_t))v23)(v20, v11);
}

uint64_t partial apply for closure #1 in View.contextMenu<A, B>(menuItems:preview:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in View.contextMenu<A, B>(menuItems:preview:)(*(void (**)(double))(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 48), a1);
}

uint64_t View.contextMenu<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];

  v30 = a6;
  v27 = a5;
  v28 = a1;
  v29 = a4;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v9 = type metadata accessor for ModifiedContent();
  v38[0] = a5;
  v38[1] = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v38);
  v10 = type metadata accessor for ZStack();
  v11 = type metadata accessor for Optional();
  v12 = type metadata accessor for Group();
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v26 - v15;
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v10, v14);
  v36 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v11, &v37);
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v12, &v36);
  v19 = type metadata accessor for ContextMenuModifier(0, v12, v17, v18);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v26 - v22;
  v31 = a2;
  v32 = a3;
  v24 = v29;
  v33 = v29;
  v34 = v27;
  v35 = v28;
  Group<A>.init(content:)();
  ContextMenuModifier.init(menuView:)((uint64_t)v16, v12, v17, (uint64_t)v23);
  MEMORY[0x18D75B4AC](v23, a2, v19, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t closure #1 in View.contextMenu<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t (*v37)(void);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  _QWORD v49[2];
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];

  v55 = a4;
  v52 = a2;
  v60 = a6;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v9 = type metadata accessor for ModifiedContent();
  v62[0] = a5;
  v62[1] = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v53 = v9;
  v49[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v62);
  v10 = type metadata accessor for ZStack();
  v59 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v50 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v51 = (char *)v49 - v15;
  v54 = a3;
  v56 = a5;
  v17 = type metadata accessor for ContextMenu(255, a3, a5, v16);
  v18 = type metadata accessor for Optional();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)v49 - v21;
  v23 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v57 = (char *)v49 - v26;
  v27 = type metadata accessor for Optional();
  v58 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)v49 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v31, v32);
  v35 = (char *)v49 - v34;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v22, a1, v18, v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, v17) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v30, 1, 1, v10);
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v10);
    static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v30, (uint64_t)v35);
    v36 = *(void (**)(char *, uint64_t))(v58 + 8);
    v36(v30, v27);
  }
  else
  {
    v49[0] = v23;
    v37 = *(uint64_t (**)(void))(v23 + 32);
    v38 = v57;
    v39 = v37();
    MEMORY[0x1E0C80A78](v39, v40);
    v41 = v54;
    v49[-6] = v52;
    v49[-5] = v41;
    v42 = v56;
    v49[-4] = v55;
    v49[-3] = v42;
    v49[-2] = v38;
    static Alignment.center.getter();
    v43 = v50;
    ZStack.init(alignment:content:)();
    v44 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v10);
    v45 = (uint64_t)v51;
    static ViewBuilder.buildExpression<A>(_:)(v43, v10, v44);
    v46 = v59;
    v47 = *(void (**)(char *, uint64_t))(v59 + 8);
    v47(v43, v10);
    static ViewBuilder.buildBlock<A>(_:)(v45, v10, (uint64_t)v30);
    v47((char *)v45, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v30, 0, 1, v10);
    static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v30, (uint64_t)v35);
    v36 = *(void (**)(char *, uint64_t))(v58 + 8);
    v36(v30, v27);
    (*(void (**)(char *, uint64_t))(v49[0] + 8))(v57, v17);
  }
  v61 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v10);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v27, &v61);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v35, v27, v60);
  return ((uint64_t (*)(char *, uint64_t))v36)(v35, v27);
}

uint64_t partial apply for closure #1 in View.contextMenu<A>(_:)()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in View.contextMenu<A>(_:));
}

uint64_t closure #1 in closure #1 in View.contextMenu<A>(_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  _QWORD v17[2];

  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v4 = type metadata accessor for ModifiedContent();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v17 - v11;
  View.styleContext<A>(_:)();
  v13 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v17[0] = a1;
  v17[1] = v13;
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v17);
  static ViewBuilder.buildExpression<A>(_:)(v8, v4, v14);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v12, v4, a2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v12, v4);
}

uint64_t ContextMenu.init(menuItems:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t getEnumTagSinglePayload for ContextMenu(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874AC648 + 4 * byte_187C376C8[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ContextMenu(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for ContextMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContextMenu);
}

uint64_t sub_1874AC854(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v3 = type metadata accessor for ModifiedContent();
  v12[0] = v1;
  v12[1] = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v4 = MEMORY[0x1E0CE2E70];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v12);
  v5 = type metadata accessor for ZStack();
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v5);
  v8 = type metadata accessor for ContextMenuModifier(255, v5, v6, v7);
  v9 = type metadata accessor for ModifiedContent();
  v11[0] = v2;
  v11[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuModifier<A>, v8);
  return MEMORY[0x18D75FFDC](v4, v9, v11);
}

void sub_1874AC930(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 32);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
  v3 = type metadata accessor for ZStack();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v3);
  type metadata accessor for ContextMenuPreviewModifier();
}

uint64_t sub_1874AC9C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v6[16];

  v4 = type metadata accessor for ModifiedContent();
  v6[0] = v2;
  v6[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuPreviewModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](v1, v4, v6);
}

void sub_1874ACA1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 40);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
  v3 = type metadata accessor for ZStack();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v3);
  type metadata accessor for ContextMenuPreviewDestinationModifier();
}

uint64_t sub_1874ACAC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[18];

  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ContextMenuPreviewDestinationModifier<A, B, C>;
  return MEMORY[0x18D75FFDC](v0, v2, v4);
}

uint64_t sub_1874ACB08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v3 = type metadata accessor for ModifiedContent();
  v16[0] = v1;
  v16[1] = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v4 = MEMORY[0x1E0CE2E70];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v16);
  v5 = type metadata accessor for ZStack();
  v6 = type metadata accessor for Optional();
  v7 = type metadata accessor for Group();
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v5);
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v6, &v15);
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v7, &v14);
  v10 = type metadata accessor for ContextMenuModifier(255, v7, v8, v9);
  v11 = type metadata accessor for ModifiedContent();
  v13[0] = v2;
  v13[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuModifier<A>, v10);
  return MEMORY[0x18D75FFDC](v4, v11, v13);
}

uint64_t partial apply for closure #1 in closure #1 in View.contextMenu<A>(_:)()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in View.contextMenu<A>(_:));
}

uint64_t destroy for MenuBuilderContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MenuBuilderContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MenuBuilderContext(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MenuBuilderContext(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MenuBuilderContext()
{
  return &type metadata for MenuBuilderContext;
}

ValueMetadata *type metadata accessor for KeyCommandID()
{
  return &type metadata for KeyCommandID;
}

id specialized Sequence.first(where:)(unint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  id v26;
  int v27;
  _QWORD v29[2];
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;

  v3 = v2;
  v32 = a2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v29 - v7;
  if (a1 >> 62)
    goto LABEL_18;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v9; v9 = _CocoaArrayWrapper.endIndex.getter())
  {
    v10 = a1 & 0xC000000000000001;
    v11 = 4;
    v31 = v9;
    v29[1] = v3;
    v30 = a1 & 0xC000000000000001;
    while (1)
    {
      v13 = v10 ? (id)MEMORY[0x18D75E3BC](v11 - 4, a1) : *(id *)(a1 + 8 * v11);
      v3 = v13;
      v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      v15 = *(_QWORD *)(v32 + 40);
      if (*(_QWORD *)(v15 + 16))
      {
        v34 = v13;
        v33 = v13;
        v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v33);
        if ((v17 & 1) != 0)
        {
          v18 = v16;
          v19 = v8;
          v20 = *(_QWORD *)(v15 + 56);
          v21 = type metadata accessor for CommandOperation();
          v22 = a1;
          v23 = *(_QWORD *)(v21 - 8);
          v24 = v20 + *(_QWORD *)(v23 + 72) * v18;
          v8 = v19;
          v9 = v31;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v24, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
          v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56);
          a1 = v22;
          v10 = v30;
          v25(v8, 0, 1, v21);
        }
        else
        {
          v21 = type metadata accessor for CommandOperation();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 1, 1, v21);
        }
        v26 = v33;

        type metadata accessor for CommandOperation();
        v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v8, 1, v21);
        v3 = v34;
        if (v27 != 1)
        {
          outlined destroy of CommandOperation?((uint64_t)v8);
          swift_bridgeObjectRelease();
          return v26;
        }
      }
      else
      {
        v12 = type metadata accessor for CommandOperation();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 1, 1, v12);
      }
      outlined destroy of CommandOperation?((uint64_t)v8);

      ++v11;
      if (v14 == v9)
        goto LABEL_19;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
LABEL_19:
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Void __swiftcall UpdateContextMenuInteraction.updateValue()()
{
  uint64_t *WeakValue;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char isEscapingClosureAtFileLocation;
  char v16;
  uint64_t aBlock;
  uint64_t v18;
  id (*v19)(uint64_t, void *);
  void *v20;
  uint64_t (*v21)();
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    v1 = *WeakValue;
    v2 = MEMORY[0x18D760234]();
    if (v2)
    {
      v3 = (void *)v2;
      v4 = MEMORY[0x1E0DEE9D8];
      v25 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      v5 = specialized Dictionary.init(dictionaryLiteral:)(v4);
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v6 = type metadata accessor for MenuVisitor.MenuStackGroup();
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
      v8 = (v7 + 32) & ~v7;
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_187BF9830;
      v10 = v9 + v8;
      if (one-time initialization token for empty != -1)
        swift_once();
      v11 = __swift_project_value_buffer(v6, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v11, v10, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
      aBlock = 0;
      LOBYTE(v18) = 0;
      v19 = (id (*)(uint64_t, void *))MEMORY[0x1E0DEE9E0];
      v20 = (void *)v5;
      v21 = (uint64_t (*)())v4;
      v22 = MEMORY[0x1E0DEE9E0];
      v23 = 0;
      v24 = v9;
      MenuVisitor.visit(_:uniqueNames:)(v1, &v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = v4;
      v16 = 1;
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = &v16;
      *(_QWORD *)(v12 + 24) = &v25;
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = partial apply for closure #1 in UpdateContextMenuInteraction.updateValue();
      *(_QWORD *)(v13 + 24) = v12;
      v21 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
      v22 = v13;
      aBlock = MEMORY[0x1E0C809B0];
      v18 = 1107296256;
      v19 = thunk for @escaping @callee_guaranteed (@guaranteed UIMenu) -> (@owned UIMenu);
      v20 = &block_descriptor_32;
      v14 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v3, sel_updateVisibleMenuWithBlock_, v14);

      _Block_release(v14);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
  }
}

uint64_t MenuVisitor.visit(_:uniqueNames:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  unint64_t v49;
  BOOL v50;
  int8x16_t v51;
  int8x8_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  unint64_t v103;
  id v104;
  uint64_t v105;
  void *v106;
  void *v107;
  id v108;
  void *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  void *v113;
  objc_class *v114;
  char v115;
  Swift::String v116;
  Swift::String_optional v117;
  id v118;
  id v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t, uint64_t);
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  char v135;
  void (*v136)(uint64_t, uint64_t);
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v142;
  char v143;
  unint64_t v144;
  uint64_t v145;
  _BOOL8 v146;
  uint64_t v147;
  char v148;
  unint64_t v149;
  char v150;
  void (*v151)(uint64_t, uint64_t);
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  BOOL v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t result;
  UIMenuElementSize preferredElementSize;
  Swift::OpaquePointer v168;
  _QWORD v169[3];
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  id v190;
  __int128 v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  unint64_t v198;
  UIMenuIdentifier_optional v199;
  _QWORD *v200;
  unsigned __int8 *v201;
  char *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  unint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  char v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  char v227[8];
  UIMenu v228;
  UIImage_optional v229;

  v212 = a2;
  v213 = type metadata accessor for UUID();
  v200 = *(_QWORD **)(v213 - 8);
  MEMORY[0x1E0C80A78](v213, v4);
  v204 = (char *)v169 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v176 = (char *)v169 - v8;
  v196 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1E0C80A78](v196, v9);
  v205 = (uint64_t)v169 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CommandOperation();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v193 = (uint64_t)v169 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v171 = (uint64_t)v169 - v17;
  v209 = type metadata accessor for MenuVisitor.MenuStackGroup();
  v206 = *(_QWORD *)(v209 - 8);
  MEMORY[0x1E0C80A78](v209, v18);
  v177 = (uint64_t)v169 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v195 = (uint64_t)v169 - v22;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v169 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v170 = (uint64_t)v169 - v29;
  MEMORY[0x1E0C80A78](v30, v31);
  v172 = (uint64_t)v169 - v32;
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (unsigned __int8 *)v169 - v35;
  v211 = type metadata accessor for PlatformItemList.Item();
  v37 = *(_QWORD *)(v211 - 8);
  MEMORY[0x1E0C80A78](v211, v38);
  v194 = (uint64_t)v169 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (_QWORD *)((char *)v169 - v42);
  MenuVisitor.reset()();
  v216 = *(_QWORD *)v2;
  v44 = *(_QWORD *)(a1 + 16);
  v45 = MEMORY[0x1E0DEE9D8];
  if (v44)
  {
    v192 = v43 + 37;
    v215 = (char *)(v2 + 8);
    v173 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    v46 = a1 + v173;
    v214 = *(_QWORD *)(v37 + 72);
    v169[2] = v2 + 40;
    v169[1] = a1;
    swift_bridgeObjectRetain();
    v191 = xmmword_187BF9830;
    v210 = v11;
    v203 = v12;
    v202 = v26;
    v201 = v36;
    v217 = v2;
    while (1)
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v46, (uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      if (!*v215)
      {
        outlined init with copy of CommandOperation?((uint64_t)v43 + *(int *)(v211 + 112), (uint64_t)v36);
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v12 + 48))(v36, 1, v11) == 1)
        {
          outlined destroy of CommandOperation?((uint64_t)v36);
        }
        else
        {
          v47 = *v36;
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
          if (v47 == 3)
            v48 = 1;
          else
            v48 = 2;
          *v215 = v48;
        }
      }
      v49 = v43[41];
      v50 = v49 >> 62 != 3 || (v49 & 0xFFFFFFFFFFFFFFFCLL) == 0x3FFFFFFFCLL;
      if (v50)
        break;
      v51 = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(v192 + 5), *(int8x16_t *)(v192 + 9)), vorrq_s8(*(int8x16_t *)(v192 + 7), *(int8x16_t *)(v192 + 11))), vorrq_s8(*(int8x16_t *)v192, *((int8x16_t *)v192 + 1)));
      v52 = vorr_s8(*(int8x8_t *)v51.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL));
      if (v49 != 0xC000000000000000 || *(_QWORD *)&v52 != 0)
        break;
      v89 = v195;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v43, v195, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      *(_QWORD *)(v89 + *(int *)(v209 + 20)) = MEMORY[0x1E0DEE9D8];
      v90 = *(_QWORD **)(v2 + 56);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v90 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v90[2] + 1, 1, v90);
      v92 = v90[2];
      v91 = v90[3];
      if (v92 >= v91 >> 1)
        v90 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v92 + 1, 1, v90);
      v90[2] = v92 + 1;
      outlined init with take of TableCellFormula(v195, (uint64_t)v90+ ((*(unsigned __int8 *)(v206 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v206 + 80))+ *(_QWORD *)(v206 + 72) * v92, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
      *(_QWORD *)(v2 + 56) = v90;
      *(_BYTE *)(v2 + 48) = 0;
      v11 = v210;
      if ((v216 & 1) == 0)
      {
LABEL_3:
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        goto LABEL_4;
      }
LABEL_73:
      outlined init with copy of CommandOperation?((uint64_t)v43 + *(int *)(v211 + 112), (uint64_t)v26);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v26, 1, v11) != 1)
      {
        v127 = v193;
        outlined init with take of TableCellFormula((uint64_t)v26, v193, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
        v128 = v127 + *(int *)(v11 + 20);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v128, v205, type metadata accessor for CommandGroupPlacement);
        v129 = *(_QWORD *)(v2 + 24);
        v130 = v128 + *(int *)(v196 + 20);
        v131 = (void (*)(char *, uint64_t, uint64_t))v200[2];
        v132 = (uint64_t)v176;
        v131(v176, v130, v213);
        if (*(_QWORD *)(v129 + 16))
        {
          v133 = specialized __RawDictionaryStorage.find<A>(_:)(v132);
          v134 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          if ((v135 & 1) != 0)
          {
            v134 = *(_QWORD **)(*(_QWORD *)(v129 + 56) + 8 * v133);
            swift_bridgeObjectRetain();
          }
        }
        else
        {
          v134 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        v136 = (void (*)(uint64_t, uint64_t))v200[1];
        v136(v132, v213);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v43, v194, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v134 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v134[2] + 1, 1, v134);
        v138 = v134[2];
        v137 = v134[3];
        if (v138 >= v137 >> 1)
          v134 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v137 > 1, v138 + 1, 1, v134);
        v134[2] = v138 + 1;
        outlined init with take of TableCellFormula(v194, (uint64_t)v134 + v173 + v138 * v214, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        v139 = (uint64_t)v204;
        v131(v204, v205 + *(int *)(v196 + 20), v213);
        v140 = v217;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v218 = *(_QWORD **)(v140 + 24);
        v142 = (uint64_t)v218;
        *(_QWORD *)(v140 + 24) = 0x8000000000000000;
        v144 = specialized __RawDictionaryStorage.find<A>(_:)(v139);
        v145 = *(_QWORD *)(v142 + 16);
        v146 = (v143 & 1) == 0;
        v147 = v145 + v146;
        if (__OFADD__(v145, v146))
        {
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        v148 = v143;
        if (*(_QWORD *)(v142 + 24) >= v147)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            goto LABEL_88;
          v151 = v136;
          specialized _NativeDictionary.copy()();
          v152 = v218;
          if ((v148 & 1) == 0)
            goto LABEL_91;
LABEL_89:
          v153 = v152[7];
          swift_bridgeObjectRelease();
          *(_QWORD *)(v153 + 8 * v144) = v134;
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v147, isUniquelyReferenced_nonNull_native);
          v149 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v204);
          if ((v148 & 1) != (v150 & 1))
            goto LABEL_100;
          v144 = v149;
LABEL_88:
          v151 = v136;
          v152 = v218;
          if ((v148 & 1) != 0)
            goto LABEL_89;
LABEL_91:
          v152[(v144 >> 6) + 8] |= 1 << v144;
          v131((char *)(v152[6] + v200[9] * v144), (uint64_t)v204, v213);
          *(_QWORD *)(v152[7] + 8 * v144) = v134;
          v154 = v152[2];
          v155 = __OFADD__(v154, 1);
          v156 = v154 + 1;
          if (v155)
            goto LABEL_98;
          v152[2] = v156;
        }
        v2 = v217;
        *(_QWORD *)(v217 + 24) = v152;
        swift_bridgeObjectRelease();
        v151((uint64_t)v204, v213);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v205, type metadata accessor for CommandGroupPlacement);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v193, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        v11 = v210;
        v12 = v203;
        v26 = v202;
        v36 = v201;
        goto LABEL_4;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      outlined destroy of CommandOperation?((uint64_t)v26);
LABEL_4:
      v46 += v214;
      if (!--v44)
      {
        swift_bridgeObjectRelease();
        v45 = MEMORY[0x1E0DEE9D8];
        goto LABEL_95;
      }
    }
    v54 = v43[77];
    if (!v54)
    {
      MenuVisitor.buildUIMenuElement(_:uniqueNames:)((uint64_t)v43, v212);
      if ((v216 & 1) == 0)
        goto LABEL_3;
      goto LABEL_73;
    }
    v207 = v46;
    v208 = v44;
    v55 = *(_QWORD *)v2;
    swift_bridgeObjectRetain();
    v56 = MEMORY[0x1E0DEE9D8];
    v57 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    LOBYTE(v226) = 0;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v58 = *(_QWORD *)(v206 + 72);
    v59 = (*(unsigned __int8 *)(v206 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v206 + 80);
    v60 = swift_allocObject();
    *(_OWORD *)(v60 + 16) = v191;
    if (one-time initialization token for empty != -1)
      swift_once();
    v61 = __swift_project_value_buffer(v209, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v61, v60 + v59, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
    v218 = (_QWORD *)v55;
    v219 = 0;
    v220 = MEMORY[0x1E0DEE9E0];
    v221 = v57;
    v222 = v56;
    v223 = MEMORY[0x1E0DEE9E0];
    v224 = v226;
    v225 = v60;
    MenuVisitor.visit(_:uniqueNames:)(v54, v212);
    swift_bridgeObjectRelease();
    v62 = (void *)v43[37];
    v63 = v43[38];
    v64 = v43[39];
    v65 = v43[40];
    v66 = v43[41];
    v67 = v43[42];
    v68 = v43[43];
    v69 = v43[44];
    v71 = v43[45];
    v70 = v43[46];
    v72 = v43[47];
    v73 = v43[48];
    v74 = v43[49];
    if (v66 >> 62 == 3
      && (v66 & 0xFFFFFFFFFFFFFFFCLL) != 0x3FFFFFFFCLL
      && ((v75 = v64 | v63 | v65 | v67 | v68 | v69 | v71 | v70 | v72 | v73 | v74, v66 == 0xC000000000000000)
       && v62 == (void *)2
       && !v75
       || v66 == 0xC000000000000000 && v62 == (void *)4 && !v75))
    {
      v76 = v177;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v43, v177, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      *(_QWORD *)(v76 + *(int *)(v209 + 20)) = v222;
      v77 = *(_QWORD **)(v217 + 56);
      swift_bridgeObjectRetain();
      v78 = swift_isUniquelyReferenced_nonNull_native();
      v46 = v207;
      if ((v78 & 1) == 0)
        v77 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
      v12 = v203;
      v44 = v208;
      v80 = v77[2];
      v79 = v77[3];
      if (v80 >= v79 >> 1)
        v77 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1, v77);
      v77[2] = v80 + 1;
      outlined init with take of TableCellFormula(v177, (uint64_t)v77 + v59 + v80 * v58, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
      v81 = v217;
      *(_QWORD *)(v217 + 56) = v77;
      *(_BYTE *)(v81 + 48) = 1;
      v11 = v210;
      if ((v216 & 2) == 0)
        goto LABEL_66;
    }
    else
    {
      v178 = v43[41];
      v199.value = (UIMenuIdentifier)(v66 >> 62);
      v197 = (void *)(v66 & 0xFFFFFFFFFFFFFFFCLL);
      v179 = v74;
      v180 = v73;
      v181 = v72;
      v182 = v70;
      v183 = v71;
      v184 = v69;
      v185 = v68;
      v186 = v67;
      v187 = v65;
      v188 = v64;
      v189 = v63;
      v190 = v62;
      v83 = *(_QWORD *)(v217 + 16);
      v82 = *(_QWORD *)(v217 + 24);
      v84 = *(unsigned __int8 *)(v217 + 48);
      PlatformItemList.Item.configurationIdentifier.getter((uint64_t)v227);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v85 = PlatformItemList.Item.ConfigurationIdentifier.identifier.getter();
      v87 = v86;
      outlined release of PlatformItemList.Item.ConfigurationIdentifier((uint64_t)v227);
      v50 = v84 == 1;
      v88 = v207;
      if (v50)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v96 = v87;
        v46 = v88;
      }
      else
      {
        v175 = v83;
        v93 = *v212;
        v94 = specialized MenuVisitor.uniqueMenuIdentifier(in:candidate:)(*v212, v85, v87);
        v96 = v95;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v97 = swift_isUniquelyReferenced_nonNull_native();
        v198 = v94;
        v174 = v82;
        if ((v97 & 1) == 0)
          v93 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v93 + 16) + 1, 1, (char *)v93);
        v46 = v88;
        v99 = *(_QWORD *)(v93 + 16);
        v98 = *(_QWORD *)(v93 + 24);
        if (v99 >= v98 >> 1)
          v93 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v98 > 1), v99 + 1, 1, (char *)v93);
        *(_QWORD *)(v93 + 16) = v99 + 1;
        v100 = v93 + 16 * v99;
        v85 = v198;
        *(_QWORD *)(v100 + 32) = v198;
        *(_QWORD *)(v100 + 40) = v96;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *v212 = v93;
      }
      v101 = PlatformItemList.Item.uiAction(_:)(v85, v96);
      static Semantics.v6.getter();
      if ((isLinkedOnOrAfter(_:)() & 1) != 0)
        v102 = 16;
      else
        v102 = 0;
      v198 = v96;
      v103 = v85;
      if (!v199.value && v197 != (void *)0x3FFFFFFFCLL)
      {
        v102 |= 0x81uLL;
        outlined copy of PlatformItemList.Item.SystemItem(v190, v189, v188, v187, v178, v186, v185, v184, v183, v182, v181, v180, v179);
      }
      v104 = objc_msgSend(v101, sel_title);
      v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v107 = v106;

      v108 = objc_msgSend(v101, sel_subtitle);
      v199.value = (UIMenuIdentifier)v102;
      v197 = v107;
      if (v108)
      {
        v109 = v108;
        v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v112 = v111;

      }
      else
      {
        v110 = 0;
        v112 = 0;
      }
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
      v113 = v101;
      v114 = (objc_class *)objc_msgSend(v101, sel_image);
      v115 = MEMORY[0x18D75CC88](v103, v198);
      swift_bridgeObjectRelease();
      preferredElementSize = swift_bridgeObjectRetain();
      v116._countAndFlagsBits = v105;
      v116._object = v197;
      v117.value._countAndFlagsBits = v110;
      v117.value._object = v112;
      v229.value.super.isa = v114;
      v229.is_nil = v115;
      UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(&v228, v116, v117, v229, v199, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v168);
      v119 = v118;
      specialized PlatformItemList.Item.applyAccessibilityProperties(to:)(v119, v43);

      MenuVisitor.appendMenuItem(_:)(v119);
      if ((v216 & 2) == 0)
      {

        v11 = v210;
        v12 = v203;
        v44 = v208;
        goto LABEL_66;
      }
      v120 = v172;
      outlined init with copy of CommandOperation?((uint64_t)v43 + *(int *)(v211 + 112), v172);
      v12 = v203;
      v11 = v210;
      v121 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v203 + 48))(v120, 1, v210);
      v44 = v208;
      if (v121 == 1)
      {

        outlined destroy of CommandOperation?(v120);
      }
      else
      {
        v122 = v171;
        outlined init with take of TableCellFormula(v120, v171, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
        v123 = v170;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v122, v170, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v123, 0, 1, v11);
        specialized Dictionary.subscript.setter(v123, v119);

        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v122, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
      }
    }
    v124 = v220;
    v125 = v221;
    v126 = v223;
    if (*(_QWORD *)(v220 + 16) || *(_QWORD *)(v221 + 16) || *(_QWORD *)(v223 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized MenuBuilderContext.mergeMaps(from:)(v124, v125, v126);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_72:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v26 = v202;
      v36 = v201;
      v2 = v217;
      if ((v216 & 1) == 0)
        goto LABEL_3;
      goto LABEL_73;
    }
LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_72;
  }
LABEL_95:
  v218 = (_QWORD *)v45;
  v157 = *(_QWORD *)(v2 + 56);
  v158 = *(_QWORD *)(v157 + 16);
  if (!v158)
    goto LABEL_99;
  v159 = v2;
  v160 = (v216 >> 1) & 1;
  v161 = v157 + ((*(unsigned __int8 *)(v206 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v206 + 80));
  v162 = *(_QWORD *)(v161 + *(int *)(v209 + 20));
  v163 = (2 * v158) | 1;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs10ArraySliceVy7SwiftUI11MenuVisitor33_0F42DDF44729C152DA9EC9F6F4D00118LLV0H10StackGroupVG_So06UIMenuB0Cs5NeverOTg503_s7f4UI11h11Visitor33_0jklmnopq59LLV5visit_11uniqueNamesyAA16PlatformItemListV_SaySSGztFSo13tb7CAD0C10rS6VXEfU_AKSaySSGSbTf1cn_nTf4xnnn_n(v161, 1, v163, v159, (uint64_t *)&v218, v160);
  v226 = v162;
  specialized Array.append<A>(contentsOf:)(v164);
  v165 = v226;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v159 + 32) = v165;
  return swift_bridgeObjectRelease();
}

uint64_t one-time initialization function for empty()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  __int128 v10[4];
  char v11;
  _BYTE v12[184];
  _BYTE v13[184];

  v0 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MenuVisitor.MenuStackGroup();
  __swift_allocate_value_buffer(v4, static MenuVisitor.MenuStackGroup.empty);
  v5 = __swift_project_value_buffer(v4, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v13);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v13, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
  v10[0] = xmmword_187BF9840;
  memset(&v10[1], 0, 48);
  v11 = 0;
  v8 = 0uLL;
  v9 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v12, v10, &v8, 0, 0, (uint64_t)v3);
  result = outlined init with take of TableCellFormula((uint64_t)v3, v5, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  *(_QWORD *)(v5 + *(int *)(v4 + 20)) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t MenuVisitor.reset()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v1 = MEMORY[0x1E0DEE9D8];
  v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = MEMORY[0x1E0DEE9E0];
  *(_BYTE *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v2;
  *(_QWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 40) = v3;
  *(_BYTE *)(v0 + 48) = 0;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = type metadata accessor for MenuVisitor.MenuStackGroup();
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_187BF9830;
  if (one-time initialization token for empty != -1)
    swift_once();
  v8 = __swift_project_value_buffer(v4, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v8, v7 + v6, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 56) = v7;
  return result;
}

id PlatformItemList.Item.uiAction(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  id *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = v2;
  v47 = a2;
  v43 = type metadata accessor for PlatformItemList.Item();
  v5 = *(_QWORD *)(v43 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v43, v7);
  v8 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (id *)((char *)&v42 - v11);
  v14 = *(void **)(v3 + 576);
  if (v14)
  {
    v15 = objc_msgSend(v14, sel_string, v12);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    if (v18)
    {
      v45 = v18;
      v46 = v16;
      goto LABEL_8;
    }
  }
  else
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)&v42 - v11, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  }
  if (*v13)
  {
    v19 = objc_msgSend(*v13, sel_string);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v45 = v21;
    v46 = v20;

  }
  else
  {
    v45 = 0xE000000000000000;
    v46 = 0;
  }
LABEL_8:
  v44 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  PlatformItemList.Item.resolvedMenuItemImage.getter();
  MEMORY[0x18D75CC88](a1, v47);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  v22 = *(unsigned __int8 *)(v5 + 80);
  v23 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v8, v23 + ((v22 + 16) & ~v22), (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  swift_bridgeObjectRetain();
  v24 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  v25 = v24;
  v26 = *(_QWORD *)(v3 + 624);
  if (v26 && *(_QWORD *)(v26 + 16) && (v27 = *(void **)(v26 + ((v22 + 32) & ~v22))) != 0)
  {
    v28 = v24;
    v29 = objc_msgSend(v27, sel_string);
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v31;

    v33 = (void *)MEMORY[0x18D75CC88](v30, v32);
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = v24;
    v33 = 0;
  }
  objc_msgSend(v25, sel_setSubtitle_, v33);

  objc_msgSend(v25, sel_setState_, qword_187C37AF8[*(char *)(v3 + 634)]);
  v35 = *(_QWORD *)(v3 + 328);
  if (!(v35 >> 62) && (v35 & 0xFFFFFFFFFFFFFFFCLL) != 0x3FFFFFFFCLL)
  {
    v36 = *(_QWORD *)(v3 + 296) & 0xFF00;
    outlined copy of PlatformItemList.Item.SystemItem(*(id *)(v3 + 296), *(_QWORD *)(v3 + 304), *(_QWORD *)(v3 + 312), *(_QWORD *)(v3 + 320), v35, *(_QWORD *)(v3 + 336), *(_QWORD *)(v3 + 344), *(_QWORD *)(v3 + 352), *(_QWORD *)(v3 + 360), *(_QWORD *)(v3 + 368), *(_QWORD *)(v3 + 376), *(_QWORD *)(v3 + 384), *(_QWORD *)(v3 + 392));
    if (v36 != 1024)
    {
      v37 = PlatformItemList.Item.resolvedMenuItemImage.getter();
      objc_msgSend(v25, sel_setSelectedImage_, v37);

    }
  }
  v38 = *(_QWORD *)(v3 + 408);
  if (!v38)
    goto LABEL_25;
  if (v38 != 1)
  {
    if ((*(_BYTE *)(v3 + 56) & 1) != 0)
      goto LABEL_20;
LABEL_25:
    if ((*(_BYTE *)(v3 + *(int *)(v43 + 120)) & 1) != 0)
      v39 = 9;
    else
      v39 = 1;
    goto LABEL_32;
  }
  if (!*(_QWORD *)(v3 + 616))
    goto LABEL_25;
LABEL_20:
  if ((*(_BYTE *)(v3 + 521) & 1) != 0 || *(_BYTE *)(v3 + 520) != 1)
  {
    if (*(_BYTE *)(v3 + *(int *)(v43 + 120)) == 1)
      v39 = 8;
    else
      v39 = 0;
  }
  else if ((*(_BYTE *)(v3 + *(int *)(v43 + 120)) & 1) != 0)
  {
    v39 = 10;
  }
  else
  {
    v39 = 2;
  }
LABEL_32:
  objc_msgSend(v25, sel_setAttributes_, v39);
  v40 = v25;
  specialized PlatformItemList.Item.applyAccessibilityProperties(to:)(v40, (_QWORD *)v3);

  return v40;
}

uint64_t MenuVisitor.appendMenuItem(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;

  v2 = v1;
  v4 = type metadata accessor for MenuVisitor.MenuStackGroup();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v2 + 48) & 1) != 0)
  {
    if (one-time initialization token for empty != -1)
      swift_once();
    v9 = __swift_project_value_buffer(v4, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v9, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
    v10 = *(_QWORD **)(v2 + 56);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v12 = v10[2];
    v11 = v10[3];
    if (v12 >= v11 >> 1)
      v10 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1, v10);
    v10[2] = v12 + 1;
    outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v12, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
    *(_QWORD *)(v2 + 56) = v10;
    *(_BYTE *)(v2 + 48) = 0;
  }
  else
  {
    v10 = *(_QWORD **)(v2 + 56);
  }
  v13 = v10[2];
  v14 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if (v13)
      goto LABEL_12;
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v10 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
  if (!v13)
    goto LABEL_16;
LABEL_12:
  if (v13 > v10[2])
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v15 = (_QWORD *)((char *)v10
                 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
                 + *(_QWORD *)(v5 + 72) * (v13 - 1)
                 + *(int *)(v4 + 20));
  MEMORY[0x18D75CF58]();
  if (*(_QWORD *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
LABEL_18:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  result = specialized Array._endMutation()();
  *(_QWORD *)(v2 + 56) = v10;
  return result;
}

void MenuVisitor.buildUIMenuElement(_:uniqueNames:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  char v31;
  Swift::UInt v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t (*v35)();
  id v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[40];

  v3 = v2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v46 = (uint64_t)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v45 - v11;
  v13 = type metadata accessor for CommandOperation();
  v47 = *(_QWORD *)(v13 - 8);
  v48 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v45 = (uint64_t)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v2;
  v17 = *((_BYTE *)v2 + 48);
  PlatformItemList.Item.configurationIdentifier.getter((uint64_t)v51);
  v18 = PlatformItemList.Item.ConfigurationIdentifier.identifier.getter();
  v20 = v19;
  outlined release of PlatformItemList.Item.ConfigurationIdentifier((uint64_t)v51);
  if ((v17 & 1) != 0)
  {
    v21 = v20;
    if ((v16 & 1) == 0)
      goto LABEL_13;
  }
  else
  {
    v22 = *a2;
    v18 = specialized MenuVisitor.uniqueMenuIdentifier(in:candidate:)(*a2, v18, v20);
    v21 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v22 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v22 + 16) + 1, 1, (char *)v22);
    v25 = *(_QWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 24);
    if (v25 >= v24 >> 1)
      v22 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, (char *)v22);
    *(_QWORD *)(v22 + 16) = v25 + 1;
    v26 = v22 + 16 * v25;
    *(_QWORD *)(v26 + 32) = v18;
    *(_QWORD *)(v26 + 40) = v21;
    *a2 = v22;
    if ((v16 & 1) == 0)
    {
LABEL_13:
      if (*(_QWORD *)(a1 + 408) != 1 && *(_QWORD *)(a1 + 456) && *(_QWORD *)a1)
      {
        v36 = objc_msgSend(*(id *)a1, sel_string);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICommand);
        v49 = 0u;
        v50 = 0u;
        v37 = UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)();
      }
      else
      {
        v37 = (uint64_t)PlatformItemList.Item.uiAction(_:)(v18, v21);
      }
      v29 = (id)v37;
      swift_bridgeObjectRelease();
      MenuVisitor.appendMenuItem(_:)(v29);
      if ((v16 & 1) == 0)
      {

        return;
      }
      goto LABEL_22;
    }
  }
  v27 = PlatformItemList.Item.uiKeyCommand.getter();
  if (!v27)
    goto LABEL_13;
  v28 = v27;
  swift_bridgeObjectRelease();
  v29 = v28;
  v30 = UIKeyCommand.discoverabilityID.getter();
  if ((v31 & 1) != 0)
  {
    __break(1u);
    return;
  }
  v32 = (Swift::UInt)v30;
  v33 = *(_QWORD *)(a1 + 408);
  if (v33 >= 2)
  {
    v38 = *(_QWORD *)(a1 + 416);
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = v33;
    *(_QWORD *)(v34 + 24) = v38;
    swift_retain();
    v35 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v34 = 0;
    v35 = (uint64_t (*)())destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v49 = v3[2];
  v3[2] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v35, v34, v32, isUniquelyReferenced_nonNull_native);
  v3[2] = v49;

  swift_bridgeObjectRelease();
  MenuVisitor.appendMenuItem(_:)(v29);
LABEL_22:
  v40 = type metadata accessor for PlatformItemList.Item();
  outlined init with copy of CommandOperation?(a1 + *(int *)(v40 + 112), (uint64_t)v12);
  v42 = v47;
  v41 = v48;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v12, 1, v48) == 1)
  {

    outlined destroy of CommandOperation?((uint64_t)v12);
  }
  else
  {
    v43 = v45;
    outlined init with take of TableCellFormula((uint64_t)v12, v45, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    v44 = v46;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v43, v46, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v44, 0, 1, v41);
    specialized Dictionary.subscript.setter(v44, v29);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v43, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
  }
}

void closure #1 in MenuVisitor.visit(_:uniqueNames:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  char *v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  char v39;
  Swift::String v40;
  UIMenu *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  int8x16_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  id v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  UIMenuElementSize v62;
  Swift::OpaquePointer v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[40];
  UIImage_optional v78;

  v73 = a4;
  v70 = a5;
  v71 = a3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v65 = (uint64_t)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v67 = (uint64_t)&v64 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v74 = (char *)&v64 - v16;
  v17 = type metadata accessor for CommandOperation();
  v75 = *(_QWORD *)(v17 - 8);
  v76 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v66 = (uint64_t)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = a2;
  v69 = a2 + 40;
  v20 = *a3;
  PlatformItemList.Item.configurationIdentifier.getter((uint64_t)v77);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = PlatformItemList.Item.ConfigurationIdentifier.identifier.getter();
  v23 = v22;
  outlined release of PlatformItemList.Item.ConfigurationIdentifier((uint64_t)v77);
  v72 = specialized MenuVisitor.uniqueMenuIdentifier(in:candidate:)(v20, v21, v23);
  v25 = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = (char **)v71;
  swift_bridgeObjectRelease();
  v27 = *v26;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v26 = v27;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    *v26 = v27;
  }
  v30 = *((_QWORD *)v27 + 2);
  v29 = *((_QWORD *)v27 + 3);
  v32 = v75;
  v31 = v76;
  if (v30 >= v29 >> 1)
  {
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v27);
    *v26 = v27;
  }
  *((_QWORD *)v27 + 2) = v30 + 1;
  v33 = &v27[16 * v30];
  v34 = v72;
  *((_QWORD *)v33 + 4) = v72;
  *((_QWORD *)v33 + 5) = v25;
  if (*(_QWORD *)a1)
  {
    v35 = objc_msgSend(*(id *)a1, sel_string);
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v38 = v37;

  }
  else
  {
    v36 = 0;
    v38 = (void *)0xE000000000000000;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  v39 = MEMORY[0x18D75CC88](v34, v25);
  swift_bridgeObjectRelease();
  type metadata accessor for MenuVisitor.MenuStackGroup();
  v62 = swift_bridgeObjectRetain();
  v40._countAndFlagsBits = v36;
  v40._object = v38;
  v78.value.super.isa = 0;
  v78.is_nil = v39;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v41, v40, (Swift::String_optional)0, v78, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v62, v63);
  v43 = v42;
  v44 = *(_QWORD *)(a1 + 328);
  if (v44 >> 62 == 3
    && (v44 & 0xFFFFFFFFFFFFFFFCLL) != 0x3FFFFFFFCLL
    && v44 == 0xC000000000000000
    && *(_QWORD *)(a1 + 296) == 4
    && !(*(_QWORD *)(a1 + 312) | *(_QWORD *)(a1 + 320) | *(_QWORD *)(a1 + 304)))
  {
    v45 = vorrq_s8(vorrq_s8(*(int8x16_t *)(a1 + 336), *(int8x16_t *)(a1 + 368)), vorrq_s8(*(int8x16_t *)(a1 + 352), *(int8x16_t *)(a1 + 384)));
    if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v45.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)))
    {
      v46 = 1;
      if (*(_BYTE *)(a1 + 633) != 1)
        v46 = 2;
      if (*(_BYTE *)(a1 + 633))
        v47 = v46;
      else
        v47 = 0;
      objc_msgSend(v42, sel_setPreferredElementSize_, v47);
    }
  }
  v48 = (uint64_t)v74;
  if ((v73 & 1) != 0)
  {
    v49 = type metadata accessor for PlatformItemList.Item();
    outlined init with copy of CommandOperation?(a1 + *(int *)(v49 + 112), v48);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v48, 1, v31) == 1)
    {
      outlined destroy of CommandOperation?(v48);
      v50 = swift_bridgeObjectRetain();
      v51 = specialized Sequence.first(where:)(v50, v68);
      swift_bridgeObjectRelease();
      if (v51)
      {
        v52 = *(_QWORD *)v69;
        if (*(_QWORD *)(*(_QWORD *)v69 + 16))
        {
          v53 = v43;
          v54 = v51;
          v55 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v54);
          if ((v56 & 1) != 0)
          {
            v57 = *(_QWORD *)(v52 + 56) + *(_QWORD *)(v32 + 72) * v55;
            v58 = v65;
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v57, v65, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v58, 0, 1, v31);
          }
          else
          {
            v58 = v65;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v65, 1, 1, v31);
          }

        }
        else
        {
          v58 = v65;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v65, 1, 1, v31);
          v61 = v43;
        }
        specialized Dictionary.subscript.setter(v58, v43);

      }
    }
    else
    {
      v59 = v66;
      outlined init with take of TableCellFormula(v48, v66, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
      v60 = v67;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v59, v67, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v60, 0, 1, v31);
      specialized Dictionary.subscript.setter(v60, v43);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v59, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    }
  }
  *v70 = v43;
}

void *PlatformItemList.Item.uiKeyCommand.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (*(_QWORD *)(v0 + 480))
  {
    v1 = v0;
    v2 = *(_BYTE *)(v0 + 496);
    swift_bridgeObjectRetain_n();
    if ((Character.isUppercase.getter() & 1) != 0 && (static Semantics.v3.getter(), (isLinkedOnOrAfter(_:)() & 1) == 0))
    {
      String.lowercased()();
      swift_bridgeObjectRelease();
      v3 = *(void **)v0;
      if (!*(_QWORD *)v0)
      {
LABEL_8:
        PlatformItemList.Item.image.getter();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIKeyCommand);
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (Any, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v6 = swift_allocObject();
        *(_OWORD *)(v6 + 16) = xmmword_187BF9830;
        *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v6 + 32) = 0xD00000000000001ELL;
        *(_QWORD *)(v6 + 40) = 0x8000000187BE1C30;
        v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, AGMakeUniqueID());
        *(_QWORD *)(v6 + 88) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        *(_QWORD *)(v6 + 64) = v7;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
        NSDictionary.init(dictionaryLiteral:)();
        v12 = MEMORY[0x1E0DEE9D8];
        v8 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
        v5 = v8;
        v9 = *(_QWORD *)(v1 + 408);
        if (v9)
        {
          if (v9 == 1)
          {
            if (*(_QWORD *)(v1 + 616))
            {
LABEL_11:
              v10 = 0;
LABEL_14:
              objc_msgSend(v8, sel_setAttributes_, v10, v12, 0, 0, 0, 0);
              objc_msgSend(v5, sel_setAllowsAutomaticLocalization_, (3u >> (v2 & 7)) & 1);
              objc_msgSend(v5, sel_setAllowsAutomaticMirroring_, (v2 & 7) == 0);
              swift_bridgeObjectRelease();
              return v5;
            }
          }
          else if ((*(_BYTE *)(v1 + 56) & 1) != 0)
          {
            goto LABEL_11;
          }
        }
        v10 = 1;
        goto LABEL_14;
      }
    }
    else
    {
      v3 = *(void **)v0;
      if (!*(_QWORD *)v0)
        goto LABEL_8;
    }
    v4 = objc_msgSend(v3, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    goto LABEL_8;
  }
  return 0;
}

id UIKeyCommand.discoverabilityID.getter()
{
  void *v0;
  id v1;
  id v3;
  _OWORD v4[2];
  __int128 v5;
  uint64_t v6;

  if (objc_msgSend(v0, sel_propertyList))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v4, (uint64_t)&v5, (unint64_t *)&lazy cache variable for type metadata for Any?);
  if (!v6)
  {
    outlined destroy of Any?((uint64_t)&v5);
    return 0;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  *(_QWORD *)&v4[0] = 0xD00000000000001ELL;
  *((_QWORD *)&v4[0] + 1) = 0x8000000187BE1C30;
  v1 = objc_msgSend(v3, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v4, &v5);
    outlined init with copy of Any((uint64_t)&v5, (uint64_t)v4);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    swift_dynamicCast();
    v1 = objc_msgSend(v3, sel_integerValue);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
  }
  else
  {

  }
  return v1;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.DocumentCommandsKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static EnvironmentValues.DocumentCommandsKey.defaultValue;
  return swift_bridgeObjectRetain();
}

void closure #1 in UpdateContextMenuInteraction.updateValue()(void *a1, _BYTE *a2, Swift::OpaquePointer children)
{
  Class isa;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  id v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v26;
  id v27;
  UIImage_optional v28;

  if (*a2 == 1)
  {
    *a2 = 0;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_menuByReplacingChildren_, isa);

  }
  else
  {
    v5 = *(_QWORD *)children._rawValue;
    if (*(_QWORD *)children._rawValue >> 62)
      goto LABEL_21;
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter())
    {
      v7 = 4;
      v26 = v6;
      while (1)
      {
        v8 = (v5 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18D75E3BC](v7 - 4, v5) : *(id *)(v5 + 8 * v7);
        v9 = v8;
        v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
          break;
        objc_opt_self();
        v11 = swift_dynamicCastObjCClass();
        if (v11)
        {
          v12 = (void *)v11;
          v27 = v9;
          v13 = objc_msgSend(v12, sel_identifier);
          v14 = a1;
          v15 = objc_msgSend(a1, sel_identifier);
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v18 = v17;
          if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19)
          {

            swift_bridgeObjectRelease_n();
LABEL_19:
            swift_bridgeObjectRelease();
            v22 = objc_msgSend(v12, sel_children);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
            v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            *(_QWORD *)children._rawValue = v23;
            swift_bridgeObjectRelease();
            return;
          }
          v21 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v21 & 1) != 0)
            goto LABEL_19;

          a1 = v14;
          v6 = v26;
        }

        ++v7;
        if (v10 == v6)
          goto LABEL_22;
      }
      __break(1u);
LABEL_21:
      swift_bridgeObjectRetain();
    }
LABEL_22:
    swift_bridgeObjectRelease();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    v28.value.super.isa = 0;
    v28.is_nil = 0;
    UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(MEMORY[0x1E0DEE9D8], v24, (Swift::String_optional)0, v28, 0, 0xFFFFFFFFFFFFFFFFLL, MEMORY[0x1E0DEE9D8], children);
  }
}

id thunk for @escaping @callee_guaranteed (@guaranteed UIMenu) -> (@owned UIMenu)(uint64_t a1, void *a2)
{
  uint64_t (*v2)(void);
  id v3;
  void *v4;

  v2 = *(uint64_t (**)(void))(a1 + 32);
  v3 = a2;
  v4 = (void *)v2();

  return v4;
}

uint64_t type metadata accessor for MenuVisitor.MenuStackGroup()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MenuVisitor.MenuStackGroup;
  if (!type metadata singleton initialization cache for MenuVisitor.MenuStackGroup)
    return swift_getSingletonMetadata();
  return result;
}

id specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v8;

  type metadata accessor for (key: UIMenuElement, value: CommandOperation)();
  v5 = (uint64_t)a1 + *(int *)(v4 + 48);
  type metadata accessor for (UIMenuElement, CommandOperation)();
  v8 = *a1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v5, (uint64_t)a2 + *(int *)(v6 + 48), (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
  *a2 = v8;
  return v8;
}

void specialized PlatformItemList.Item.applyAccessibilityProperties(to:)(void *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  char v17;
  unsigned int v18;
  int v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;

  v4 = PlatformItemList.Item.accessibilityEffectiveText.getter();
  if (v4)
  {
    v5 = v4;
    objc_msgSend(a1, sel_setAccessibilityAttributedLabel_, v4);

  }
  v6 = a2[66];
  if (v6)
  {
    v7 = a2[67];
    v8 = a2[68];
    v28 = v7;
    v29 = v8;
    if ((EnvironmentValues.accessibilityEnabled.getter() & 1) != 0)
    {
      v9 = swift_bridgeObjectRetain();
      specialized AccessibilityProperties.subscript.getter(v9, (uint64_t)&v28);
      swift_bridgeObjectRelease();
      if (v29)
      {
        if (v30 >= 2u)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v10 = (void *)MEMORY[0x18D75CC88](v28, v29);
          swift_bridgeObjectRelease();
          objc_msgSend(a1, sel_setAccessibilityIdentifier_, v10);

        }
      }
      AccessibilityProperties.traits.getter();
      v11 = v28;
      v12 = (unint64_t)objc_msgSend(a1, sel_accessibilityTraits);
      v13 = static AccessibilityTrait.allCases.getter();
      v14 = 0;
      v15 = *(_QWORD *)(v13 + 16);
      if (v15)
      {
        v16 = (unsigned __int8 *)(v13 + 32);
        do
        {
          v18 = *v16++;
          v17 = v18;
          v19 = (1 << v18) & 0x2844;
          if (v18 <= 0xD && v19 != 0 && ((v11 >> v17) & 1) != 0)
          {
            LOBYTE(v28) = v17;
            v21 = AccessibilityTrait.uiTrait.getter();
            if ((v22 & 1) == 0)
              v14 |= v21;
          }
          --v15;
        }
        while (v15);
      }
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_setAccessibilityTraits_, v14 | v12);
      v28 = v6;
      if (*(_QWORD *)(AccessibilityProperties.hints.getter() + 16))
      {
        v28 = v7;
        v29 = v8;
        swift_retain();
        swift_retain();
        v23 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
        v25 = v24;
        swift_bridgeObjectRelease();
        if (v25)
        {
          v26 = (void *)MEMORY[0x18D75CC88](v23, v25);
          swift_bridgeObjectRelease();
        }
        else
        {
          v26 = 0;
        }
        objc_msgSend(a1, sel_setAccessibilityHint_, v26, v8, v7);
        swift_release();
        swift_release();

      }
      else
      {
        swift_bridgeObjectRelease();
      }
      AccessibilityProperties.visibility.getter();
      if ((v28 & 4) != 0)
      {
        v27 = 1;
      }
      else if ((v28 & 0x400000000) != 0)
      {
        v27 = 0;
      }
      else
      {
        v27 = (v28 >> 3) & 1;
      }
      objc_msgSend(a1, sel_setAccessibilityElementsHidden_, v27);
    }
  }
}

uint64_t specialized MenuVisitor.uniqueMenuIdentifier(in:candidate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = (_QWORD *)(a1 + 40);
    v8 = 1;
    v9 = a2;
    v10 = a3;
    while (1)
    {
      v11 = *(v7 - 1) == v9 && *v7 == v10;
      if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v12._countAndFlagsBits = 46;
        v12._object = (void *)0xE100000000000000;
        String.append(_:)(v12);
        v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v13);
        result = swift_bridgeObjectRelease();
        if (__OFADD__(v8++, 1))
        {
          __break(1u);
          return result;
        }
        v9 = a2;
        v10 = a3;
      }
      v7 += 2;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
  }
  swift_bridgeObjectRetain();
  return a2;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs10ArraySliceVy7SwiftUI11MenuVisitor33_0F42DDF44729C152DA9EC9F6F4D00118LLV0H10StackGroupVG_So06UIMenuB0Cs5NeverOTg503_s7f4UI11h11Visitor33_0jklmnopq59LLV5visit_11uniqueNamesyAA16PlatformItemListV_SaySSGztFSo13tb7CAD0C10rS6VXEfU_AKSaySSGSbTf1cn_nTf4xnnn_n(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int64_t v23;
  uint64_t v24;
  _QWORD v25[3];

  v21 = a4;
  v22 = a5;
  v20 = a1;
  v10 = type metadata accessor for MenuVisitor.MenuStackGroup();
  v19 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a3 >> 1;
  v24 = a2;
  v14 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
    goto LABEL_15;
  if (v14)
  {
    v25[2] = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v14 < 0)
    {
LABEL_16:
      __break(1u);
      return;
    }
    v15 = 0;
    v16 = a6 & 1;
    while (1)
    {
      v17 = v15 + 1;
      if (__OFADD__(v15, 1))
        break;
      if (v24 + v15 >= v23 || v15 >= v14)
        goto LABEL_14;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v20 + *(_QWORD *)(v19 + 72) * (v24 + v15), (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
      closure #1 in MenuVisitor.visit(_:uniqueNames:)((uint64_t)v13, v21, v22, v16, v25);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
      if (v6)
      {
        swift_release();
        return;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      ++v15;
      if (v17 == v14)
        return;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
}

uint64_t outlined init with copy of CommandOperation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CommandOperation?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined release of PlatformItemList.Item.ConfigurationIdentifier(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  v3 = *(void **)(a1 + 32);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t specialized MenuBuilderContext.mergeMaps(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  char v8;
  char v9;
  uint64_t v11;

  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = v3[1];
  v3[1] = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v11);
  v3[1] = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v8 = swift_isUniquelyReferenced_nonNull_native();
  v11 = v3[2];
  v3[2] = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a2, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v8, &v11);
  v3[2] = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v9 = swift_isUniquelyReferenced_nonNull_native();
  v11 = v3[4];
  v3[4] = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v9, &v11);
  v3[4] = v11;
  return swift_bridgeObjectRelease();
}

uint64_t outlined assign with take of CommandOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CommandOperation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1874B13C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for PlatformItemList.Item();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);

  swift_bridgeObjectRelease();
  swift_release();
  v4 = *(_QWORD *)(v3 + 184);
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v6 = *(unsigned __int8 *)(v3 + 72);
    if (v6 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(v3 + 64), v6);
      v4 = *(_QWORD *)(v3 + 184);
      v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v5 != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(v3 + 168), *(_QWORD *)(v3 + 176), v4);
    swift_unknownObjectRelease();
    swift_release();

  }
  if (*(_QWORD *)(v3 + 256))
  {
    swift_bridgeObjectRelease();
    v7 = *(void **)(v3 + 264);
    if ((unint64_t)v7 >= 2)

    swift_release();
    swift_release();
  }
  v8 = *(_QWORD *)(v3 + 328);
  if (v8 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v3 + 296), *(_QWORD *)(v3 + 304), *(_QWORD *)(v3 + 312), *(_QWORD *)(v3 + 320), v8, *(_QWORD *)(v3 + 336), *(_QWORD *)(v3 + 344), *(_QWORD *)(v3 + 352), *(_QWORD *)(v3 + 360), *(_QWORD *)(v3 + 368), *(_QWORD *)(v3 + 376), *(_QWORD *)(v3 + 384), *(_QWORD *)(v3 + 392));
  v9 = *(_QWORD *)(v3 + 408);
  if (v9)
  {
    if (v9 == 1)
      goto LABEL_20;
    swift_release();
  }
  if (*(_QWORD *)(v3 + 424))
    swift_release();
  if (*(_QWORD *)(v3 + 440))
    swift_release();
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + 504))
    swift_release();
  if (*(_QWORD *)(v3 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(v3 + 552) != 1)
  {
    swift_release();
    if (*(_QWORD *)(v3 + 560))
      swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v3 + *(int *)(v1 + 112);
  v11 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    v12 = v10 + *(int *)(v11 + 20);
    outlined consume of Text.Storage(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
    swift_bridgeObjectRelease();
    v13 = v12 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v14 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    if (*(_QWORD *)(v10 + *(int *)(v11 + 24)))
      swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1874B166C()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for (Any, Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Any, Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Any, Any));
  }
}

uint64_t sub_1874B16F4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in UpdateContextMenuInteraction.updateValue()(void *a1)
{
  uint64_t v1;
  Swift::OpaquePointer v2;

  v2._rawValue = *(void **)(v1 + 24);
  closure #1 in UpdateContextMenuInteraction.updateValue()(a1, *(_BYTE **)(v1 + 16), v2);
}

uint64_t sub_1874B170C()
{
  return swift_deallocObject();
}

uint64_t assignWithCopy for UpdateContextMenuInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

double assignWithTake for UpdateContextMenuInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double result;

  v3 = swift_unknownObjectWeakTakeAssign();
  result = *(double *)(a2 + 8);
  *(double *)(v3 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for UpdateContextMenuInteraction()
{
  return &type metadata for UpdateContextMenuInteraction;
}

char *initializeBufferWithCopyOfBuffer for MenuVisitor.MenuStackGroup(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  char *v7;
  char *v8;
  char *v9;
  char **v10;
  char **v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char *v77;
  _BYTE *v78;
  uint64_t v79;
  void (*v80)(char *, _BYTE *, uint64_t);
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  unsigned int (*v90)(_BYTE *, uint64_t, uint64_t);
  uint64_t v91;
  char *v92;
  int *v93;
  char *__dsta;
  char *__dst;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
    return a1;
  }
  v8 = a2[1];
  v7 = a2[2];
  *((_QWORD *)a1 + 1) = v8;
  *((_QWORD *)a1 + 2) = v7;
  *((_QWORD *)a1 + 3) = a2[3];
  a1[32] = *((_BYTE *)a2 + 32);
  v9 = a2[6];
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = v9;
  a1[56] = *((_BYTE *)a2 + 56);
  v10 = (char **)(a1 + 64);
  v11 = a2 + 8;
  v12 = (unint64_t)a2[23];
  v13 = v5;
  v14 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v12 >> 1 != 4294967294)
  {
    v24 = *((unsigned __int8 *)a2 + 72);
    if (v24 == 255)
    {
      *v10 = *v11;
      a1[72] = *((_BYTE *)v11 + 8);
    }
    else
    {
      v25 = a2[8];
      outlined copy of GraphicsImage.Contents(v25, *((_BYTE *)a2 + 72));
      *((_QWORD *)a1 + 8) = v25;
      a1[72] = v24;
      v12 = (unint64_t)a2[23];
    }
    *((_QWORD *)a1 + 10) = a2[10];
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    a1[104] = *((_BYTE *)a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
    a1[124] = *((_BYTE *)a2 + 124);
    v26 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v26;
    *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
    a1[162] = *((_BYTE *)a2 + 162);
    a1[163] = *((_BYTE *)a2 + 163);
    if (v12 >> 1 == 0xFFFFFFFF)
    {
      v27 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 184) = v27;
    }
    else
    {
      v28 = (uint64_t)a2[21];
      v29 = (uint64_t)a2[22];
      v30 = a2[24];
      outlined copy of AccessibilityImageLabel(v28, v29, v12);
      *((_QWORD *)a1 + 21) = v28;
      *((_QWORD *)a1 + 22) = v29;
      *((_QWORD *)a1 + 23) = v12;
      *((_QWORD *)a1 + 24) = v30;
    }
    v31 = a2[26];
    *((_QWORD *)a1 + 25) = a2[25];
    *((_QWORD *)a1 + 26) = v31;
    *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
    *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
    a1[224] = *((_BYTE *)a2 + 224);
    v32 = a2[29];
    *((_QWORD *)a1 + 29) = v32;
    *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
    a1[242] = *((_BYTE *)a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v33 = v32;
    v20 = a2[32];
    if (v20)
      goto LABEL_4;
LABEL_15:
    v34 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 264) = v34;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
    goto LABEL_16;
  }
  v15 = *((_OWORD *)v11 + 9);
  *((_OWORD *)a1 + 12) = *((_OWORD *)v11 + 8);
  *((_OWORD *)a1 + 13) = v15;
  *((_OWORD *)a1 + 14) = *((_OWORD *)v11 + 10);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)((char *)v11 + 175);
  v16 = *((_OWORD *)v11 + 5);
  *((_OWORD *)a1 + 8) = *((_OWORD *)v11 + 4);
  *((_OWORD *)a1 + 9) = v16;
  v17 = *((_OWORD *)v11 + 7);
  *((_OWORD *)a1 + 10) = *((_OWORD *)v11 + 6);
  *((_OWORD *)a1 + 11) = v17;
  v18 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)a1 + 5) = v18;
  v19 = *((_OWORD *)v11 + 3);
  *((_OWORD *)a1 + 6) = *((_OWORD *)v11 + 2);
  *((_OWORD *)a1 + 7) = v19;
  v20 = a2[32];
  if (!v20)
    goto LABEL_15;
LABEL_4:
  *((_QWORD *)a1 + 31) = a2[31];
  *((_QWORD *)a1 + 32) = v20;
  v21 = a2[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v21 >= 2)
    v22 = v21;
  *((_QWORD *)a1 + 33) = v21;
  *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
  a1[276] = *((_BYTE *)a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)((char *)a2 + 277);
  v23 = a2[36];
  *((_QWORD *)a1 + 35) = a2[35];
  *((_QWORD *)a1 + 36) = v23;
  swift_retain();
  swift_retain();
LABEL_16:
  v35 = (unint64_t)a2[41];
  if (v35 >> 2 == 0xFFFFFFFF)
  {
    v36 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 376) = v36;
    *((_QWORD *)a1 + 49) = a2[49];
    v37 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 312) = v37;
    v38 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 344) = v38;
  }
  else
  {
    v39 = a2[37];
    v40 = (uint64_t)a2[38];
    v41 = (uint64_t)a2[39];
    v42 = (uint64_t)a2[40];
    v43 = (uint64_t)a2[42];
    v44 = (uint64_t)a2[43];
    v45 = a2[44];
    v86 = (uint64_t)a2[45];
    v87 = (uint64_t)a2[46];
    v89 = (uint64_t)a2[47];
    v92 = a2[48];
    __dsta = a2[49];
    outlined copy of PlatformItemList.Item.SystemItem(v39, v40, v41, v42, v35, v43, v44, (char)v45, v86, v87, v89, (char)v92, (uint64_t)__dsta);
    *((_QWORD *)a1 + 37) = v39;
    *((_QWORD *)a1 + 38) = v40;
    *((_QWORD *)a1 + 39) = v41;
    *((_QWORD *)a1 + 40) = v42;
    *((_QWORD *)a1 + 41) = v35;
    *((_QWORD *)a1 + 42) = v43;
    *((_QWORD *)a1 + 43) = v44;
    *((_QWORD *)a1 + 44) = v45;
    *((_QWORD *)a1 + 45) = v86;
    *((_QWORD *)a1 + 46) = v87;
    *((_QWORD *)a1 + 47) = v89;
    *((_QWORD *)a1 + 48) = v92;
    *((_QWORD *)a1 + 49) = __dsta;
  }
  v46 = a2[51];
  if (v46 != (char *)1)
  {
    *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
    a1[404] = *((_BYTE *)a2 + 404);
    if (v46)
    {
      v49 = a2[52];
      *((_QWORD *)a1 + 51) = v46;
      *((_QWORD *)a1 + 52) = v49;
      swift_retain();
      v50 = a2[53];
      if (v50)
        goto LABEL_23;
    }
    else
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
      v50 = a2[53];
      if (v50)
      {
LABEL_23:
        v51 = a2[54];
        *((_QWORD *)a1 + 53) = v50;
        *((_QWORD *)a1 + 54) = v51;
        swift_retain();
        v52 = a2[55];
        if (v52)
        {
LABEL_24:
          v53 = a2[56];
          *((_QWORD *)a1 + 55) = v52;
          *((_QWORD *)a1 + 56) = v53;
          swift_retain();
LABEL_28:
          *((_QWORD *)a1 + 57) = a2[57];
          a1[464] = *((_BYTE *)a2 + 464);
          goto LABEL_29;
        }
LABEL_27:
        *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
        goto LABEL_28;
      }
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
    v52 = a2[55];
    if (v52)
      goto LABEL_24;
    goto LABEL_27;
  }
  v47 = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)a1 + 28) = v47;
  a1[464] = *((_BYTE *)a2 + 464);
  v48 = *((_OWORD *)a2 + 26);
  *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 26) = v48;
LABEL_29:
  v54 = a2[60];
  *((_QWORD *)a1 + 59) = a2[59];
  *((_QWORD *)a1 + 60) = v54;
  *((_QWORD *)a1 + 61) = a2[61];
  a1[496] = *((_BYTE *)a2 + 496);
  v55 = a2[63];
  swift_bridgeObjectRetain();
  if (v55)
  {
    v56 = a2[64];
    *((_QWORD *)a1 + 63) = v55;
    *((_QWORD *)a1 + 64) = v56;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
  }
  *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
  v57 = a2[66];
  if (v57)
  {
    *((_QWORD *)a1 + 66) = v57;
    *((_QWORD *)a1 + 67) = a2[67];
    *((_QWORD *)a1 + 68) = a2[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
    *((_QWORD *)a1 + 68) = a2[68];
  }
  v58 = a2[69];
  if (v58 == (char *)1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
    *((_QWORD *)a1 + 71) = a2[71];
  }
  else
  {
    *((_QWORD *)a1 + 69) = v58;
    v59 = a2[70];
    swift_retain();
    if (v59)
    {
      v60 = a2[71];
      *((_QWORD *)a1 + 70) = v59;
      *((_QWORD *)a1 + 71) = v60;
      swift_retain();
    }
    else
    {
      *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
    }
  }
  v61 = a2[72];
  *((_QWORD *)a1 + 72) = v61;
  *((_QWORD *)a1 + 73) = a2[73];
  *((_QWORD *)a1 + 74) = a2[74];
  *((_QWORD *)a1 + 75) = a2[75];
  *((_QWORD *)a1 + 76) = a2[76];
  *((_QWORD *)a1 + 77) = a2[77];
  *((_QWORD *)a1 + 78) = a2[78];
  *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
  a1[634] = *((_BYTE *)a2 + 634);
  v62 = type metadata accessor for PlatformItemList.Item();
  v63 = *(int *)(v62 + 112);
  v93 = (int *)v62;
  __dst = &a1[v63];
  v64 = (char *)a2 + v63;
  v65 = type metadata accessor for CommandOperation();
  v66 = *(_QWORD *)(v65 - 8);
  v90 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v66 + 48);
  v67 = v61;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v90(v64, 1, v65))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v64, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    v88 = v64;
    v91 = v66;
    *__dst = *v64;
    v69 = *(int *)(v65 + 20);
    v70 = v65;
    v71 = &__dst[v69];
    v72 = &v64[v69];
    v73 = *(_QWORD *)&v64[v69];
    v74 = *((_QWORD *)v72 + 1);
    v75 = v72[16];
    outlined copy of Text.Storage(v73, v74, v75);
    *(_QWORD *)v71 = v73;
    *((_QWORD *)v71 + 1) = v74;
    v71[16] = v75;
    *((_QWORD *)v71 + 3) = *((_QWORD *)v72 + 3);
    v76 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v77 = &v71[v76];
    v78 = &v72[v76];
    v79 = type metadata accessor for UUID();
    v80 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v79 - 8) + 16);
    swift_bridgeObjectRetain();
    v80(v77, v78, v79);
    v81 = *(int *)(v70 + 24);
    v82 = &__dst[v81];
    v83 = &v88[v81];
    if (*v83)
    {
      v84 = v83[1];
      *(_QWORD *)v82 = *v83;
      *((_QWORD *)v82 + 1) = v84;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v82 = *(_OWORD *)v83;
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(__dst, 0, 1, v70);
  }
  a1[v93[29]] = *((_BYTE *)a2 + v93[29]);
  a1[v93[30]] = *((_BYTE *)a2 + v93[30]);
  a1[v93[31]] = *((_BYTE *)a2 + v93[31]);
  a1[v93[32]] = *((_BYTE *)a2 + v93[32]);
  *(_QWORD *)&a1[v93[33]] = *(char **)((char *)a2 + v93[33]);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(char **)((char *)a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MenuVisitor.MenuStackGroup(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease();
  swift_release();
  v2 = *(_QWORD *)(a1 + 184);
  v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v4);
      v2 = *(_QWORD *)(a1 + 184);
      v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v3 != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v2);
    swift_unknownObjectRelease();
    swift_release();

  }
  if (*(_QWORD *)(a1 + 256))
  {
    swift_bridgeObjectRelease();
    v5 = *(void **)(a1 + 264);
    if ((unint64_t)v5 >= 2)

    swift_release();
    swift_release();
  }
  v6 = *(_QWORD *)(a1 + 328);
  if (v6 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 320), v6, *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392));
  v7 = *(_QWORD *)(a1 + 408);
  if (v7)
  {
    if (v7 == 1)
      goto LABEL_20;
    swift_release();
  }
  if (*(_QWORD *)(a1 + 424))
    swift_release();
  if (*(_QWORD *)(a1 + 440))
    swift_release();
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 504))
    swift_release();
  if (*(_QWORD *)(a1 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(a1 + 552) != 1)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 560))
      swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
  v9 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = v8 + *(int *)(v9 + 20);
    outlined consume of Text.Storage(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
    v11 = v10 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v12 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    if (*(_QWORD *)(v8 + *(int *)(v9 + 24)))
      swift_release();
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MenuVisitor.MenuStackGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  int v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  __int128 v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  void (*v79)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  unsigned int (*v89)(_BYTE *, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  int *v92;
  void *__dsta;
  _BYTE *__dst;

  v5 = *(void **)a2;
  v6 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = a1 + 64;
  v10 = a2 + 64;
  v11 = *(_QWORD *)(a2 + 184);
  v12 = v5;
  v13 = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v11 >> 1 != 4294967294)
  {
    v23 = *(unsigned __int8 *)(a2 + 72);
    if (v23 == 255)
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
    }
    else
    {
      v24 = *(void **)(a2 + 64);
      outlined copy of GraphicsImage.Contents(v24, *(_BYTE *)(a2 + 72));
      *(_QWORD *)(a1 + 64) = v24;
      *(_BYTE *)(a1 + 72) = v23;
      v11 = *(_QWORD *)(a2 + 184);
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
    v25 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v25;
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
    *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
    if (v11 >> 1 == 0xFFFFFFFF)
    {
      v26 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v26;
    }
    else
    {
      v27 = *(_QWORD *)(a2 + 168);
      v28 = *(_QWORD *)(a2 + 176);
      v29 = *(_QWORD *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v27, v28, v11);
      *(_QWORD *)(a1 + 168) = v27;
      *(_QWORD *)(a1 + 176) = v28;
      *(_QWORD *)(a1 + 184) = v11;
      *(_QWORD *)(a1 + 192) = v29;
    }
    v30 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v30;
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    v31 = *(void **)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v31;
    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v32 = v31;
    v19 = *(_QWORD *)(a2 + 256);
    if (v19)
      goto LABEL_3;
LABEL_13:
    v33 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v33;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_14;
  }
  v14 = *(_OWORD *)(v10 + 144);
  *(_OWORD *)(v9 + 128) = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(v9 + 144) = v14;
  *(_OWORD *)(v9 + 160) = *(_OWORD *)(v10 + 160);
  *(_DWORD *)(v9 + 175) = *(_DWORD *)(v10 + 175);
  v15 = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 80) = v15;
  v16 = *(_OWORD *)(v10 + 112);
  *(_OWORD *)(v9 + 96) = *(_OWORD *)(v10 + 96);
  *(_OWORD *)(v9 + 112) = v16;
  v17 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v17;
  v18 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v18;
  v19 = *(_QWORD *)(a2 + 256);
  if (!v19)
    goto LABEL_13;
LABEL_3:
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v19;
  v20 = *(void **)(a2 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v20 >= 2)
    v21 = v20;
  *(_QWORD *)(a1 + 264) = v20;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)(a2 + 277);
  v22 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v22;
  swift_retain();
  swift_retain();
LABEL_14:
  v34 = *(_QWORD *)(a2 + 328);
  if (v34 >> 2 == 0xFFFFFFFF)
  {
    v35 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v35;
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    v36 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v36;
    v37 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v37;
  }
  else
  {
    v38 = *(void **)(a2 + 296);
    v39 = *(_QWORD *)(a2 + 304);
    v40 = *(_QWORD *)(a2 + 312);
    v41 = *(_QWORD *)(a2 + 320);
    v42 = *(_QWORD *)(a2 + 336);
    v43 = *(_QWORD *)(a2 + 344);
    v44 = *(_QWORD *)(a2 + 352);
    v85 = *(_QWORD *)(a2 + 360);
    v86 = *(_QWORD *)(a2 + 368);
    v88 = *(_QWORD *)(a2 + 376);
    v91 = *(_QWORD *)(a2 + 384);
    __dsta = *(void **)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v38, v39, v40, v41, v34, v42, v43, v44, v85, v86, v88, v91, (uint64_t)__dsta);
    *(_QWORD *)(a1 + 296) = v38;
    *(_QWORD *)(a1 + 304) = v39;
    *(_QWORD *)(a1 + 312) = v40;
    *(_QWORD *)(a1 + 320) = v41;
    *(_QWORD *)(a1 + 328) = v34;
    *(_QWORD *)(a1 + 336) = v42;
    *(_QWORD *)(a1 + 344) = v43;
    *(_QWORD *)(a1 + 352) = v44;
    *(_QWORD *)(a1 + 360) = v85;
    *(_QWORD *)(a1 + 368) = v86;
    *(_QWORD *)(a1 + 376) = v88;
    *(_QWORD *)(a1 + 384) = v91;
    *(_QWORD *)(a1 + 392) = __dsta;
  }
  v45 = *(_QWORD *)(a2 + 408);
  if (v45 == 1)
  {
    v46 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v46;
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
    v47 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v47;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
  if (v45)
  {
    v48 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = v45;
    *(_QWORD *)(a1 + 416) = v48;
    swift_retain();
    v49 = *(_QWORD *)(a2 + 424);
    if (v49)
      goto LABEL_21;
LABEL_24:
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    v51 = *(_QWORD *)(a2 + 440);
    if (v51)
      goto LABEL_22;
LABEL_25:
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  v49 = *(_QWORD *)(a2 + 424);
  if (!v49)
    goto LABEL_24;
LABEL_21:
  v50 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = v49;
  *(_QWORD *)(a1 + 432) = v50;
  swift_retain();
  v51 = *(_QWORD *)(a2 + 440);
  if (!v51)
    goto LABEL_25;
LABEL_22:
  v52 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v51;
  *(_QWORD *)(a1 + 448) = v52;
  swift_retain();
LABEL_26:
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_27:
  v53 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v53;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v54 = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRetain();
  if (v54)
  {
    v55 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v54;
    *(_QWORD *)(a1 + 512) = v55;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  v56 = *(_QWORD *)(a2 + 528);
  if (v56)
  {
    *(_QWORD *)(a1 + 528) = v56;
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  }
  v57 = *(_QWORD *)(a2 + 552);
  if (v57 == 1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  }
  else
  {
    *(_QWORD *)(a1 + 552) = v57;
    v58 = *(_QWORD *)(a2 + 560);
    swift_retain();
    if (v58)
    {
      v59 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v58;
      *(_QWORD *)(a1 + 568) = v59;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    }
  }
  v60 = *(void **)(a2 + 576);
  *(_QWORD *)(a1 + 576) = v60;
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_WORD *)(a1 + 632) = *(_WORD *)(a2 + 632);
  *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 634);
  v61 = type metadata accessor for PlatformItemList.Item();
  v62 = *(int *)(v61 + 112);
  v92 = (int *)v61;
  __dst = (_BYTE *)(a1 + v62);
  v63 = (_BYTE *)(a2 + v62);
  v64 = type metadata accessor for CommandOperation();
  v65 = *(_QWORD *)(v64 - 8);
  v89 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v65 + 48);
  v66 = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v89(v63, 1, v64))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v63, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    v87 = v63;
    v90 = v65;
    *__dst = *v63;
    v68 = *(int *)(v64 + 20);
    v69 = v64;
    v70 = &__dst[v68];
    v71 = &v63[v68];
    v72 = *(_QWORD *)&v63[v68];
    v73 = *((_QWORD *)v71 + 1);
    v74 = v71[16];
    outlined copy of Text.Storage(v72, v73, v74);
    *(_QWORD *)v70 = v72;
    *((_QWORD *)v70 + 1) = v73;
    v70[16] = v74;
    *((_QWORD *)v70 + 3) = *((_QWORD *)v71 + 3);
    v75 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v76 = &v70[v75];
    v77 = &v71[v75];
    v78 = type metadata accessor for UUID();
    v79 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v78 - 8) + 16);
    swift_bridgeObjectRetain();
    v79(v76, v77, v78);
    v80 = *(int *)(v69 + 24);
    v81 = &__dst[v80];
    v82 = &v87[v80];
    if (*v82)
    {
      v83 = v82[1];
      *v81 = *v82;
      v81[1] = v83;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v81 = *(_OWORD *)v82;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v90 + 56))(__dst, 0, 1, v69);
  }
  *(_BYTE *)(a1 + v92[29]) = *(_BYTE *)(a2 + v92[29]);
  *(_BYTE *)(a1 + v92[30]) = *(_BYTE *)(a2 + v92[30]);
  *(_BYTE *)(a1 + v92[31]) = *(_BYTE *)(a2 + v92[31]);
  *(_BYTE *)(a1 + v92[32]) = *(_BYTE *)(a2 + v92[32]);
  *(_QWORD *)(a1 + v92[33]) = *(_QWORD *)(a2 + v92[33]);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MenuVisitor.MenuStackGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  _OWORD *v13;
  id *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  id v35;
  int v36;
  id v37;
  void *v38;
  char v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void *v50;
  id v51;
  id v52;
  char v53;
  id v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD *v58;
  _OWORD *v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  void *v74;
  void *v75;
  id v76;
  _OWORD *v77;
  _OWORD *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  id v90;
  int v91;
  __int128 *v92;
  __int128 *v93;
  unint64_t v94;
  unint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  _OWORD *v131;
  _OWORD *v132;
  _OWORD *v133;
  uint64_t v134;
  _OWORD *v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _OWORD *v159;
  _OWORD *v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 *v164;
  __int128 *v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  void *v174;
  id v175;
  int *v176;
  uint64_t v177;
  _BYTE *v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t (*v182)(_BYTE *, uint64_t, uint64_t);
  int v183;
  uint64_t (*v184)(uint64_t, uint64_t);
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  _BYTE *v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  _BYTE *v194;
  _BYTE *v195;
  uint64_t v196;
  void (*v197)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _BYTE *v203;
  _BYTE *v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  _BYTE *v212;
  _BYTE *v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  _BYTE *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _BYTE *v232;
  uint64_t v233;
  uint64_t v234;
  _BYTE *v235;
  _BYTE *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

  v6 = a2 + 278;
  v7 = *(void **)a1;
  v8 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v9 = v8;

  v10 = *(void **)(a1 + 8);
  v11 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v11;
  v12 = v11;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v13 = (_OWORD *)(a1 + 64);
  v14 = (id *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a1 + 184) >> 1 == 4294967294)
  {
    if (v15 == 0x1FFFFFFFCLL)
    {
      v16 = *(_OWORD *)v14;
      v17 = *(_OWORD *)(a2 + 80);
      v18 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v18;
      *v13 = v16;
      *(_OWORD *)(a1 + 80) = v17;
      v19 = *(_OWORD *)(a2 + 128);
      v20 = *(_OWORD *)(a2 + 144);
      v21 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v21;
      *(_OWORD *)(a1 + 128) = v19;
      *(_OWORD *)(a1 + 144) = v20;
      v22 = *(_OWORD *)(a2 + 192);
      v23 = *(_OWORD *)(a2 + 208);
      v24 = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      *(_OWORD *)(a1 + 208) = v23;
      *(_OWORD *)(a1 + 224) = v24;
      *(_OWORD *)(a1 + 192) = v22;
    }
    else
    {
      v34 = *(unsigned __int8 *)(a2 + 72);
      if (v34 == 255)
      {
        v40 = *v14;
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        *(_QWORD *)v13 = v40;
      }
      else
      {
        v35 = *v14;
        outlined copy of GraphicsImage.Contents(*v14, *(_BYTE *)(a2 + 72));
        *(_QWORD *)(a1 + 64) = v35;
        *(_BYTE *)(a1 + 72) = v34;
      }
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v41 = *(_OWORD *)(a2 + 108);
      *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
      *(_OWORD *)(a1 + 108) = v41;
      v42 = *(_OWORD *)(a2 + 128);
      v43 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v42;
      *(_OWORD *)(a1 + 144) = v43;
      *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
      *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
      *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
      v44 = *(_QWORD *)(a2 + 184);
      if (v44 >> 1 == 0xFFFFFFFF)
      {
        v45 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = v45;
      }
      else
      {
        v46 = *(_QWORD *)(a2 + 168);
        v47 = *(_QWORD *)(a2 + 176);
        v48 = *(_QWORD *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v46, v47, *(_QWORD *)(a2 + 184));
        *(_QWORD *)(a1 + 168) = v46;
        *(_QWORD *)(a1 + 176) = v47;
        *(_QWORD *)(a1 + 184) = v44;
        *(_QWORD *)(a1 + 192) = v48;
      }
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
      v49 = *(_DWORD *)(a2 + 220);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = v49;
      v50 = *(void **)(a2 + 232);
      *(_QWORD *)(a1 + 232) = v50;
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v51 = v50;
    }
  }
  else if (v15 == 0x1FFFFFFFCLL)
  {
    outlined destroy of Image.Resolved(a1 + 64);
    v25 = *(_OWORD *)(a2 + 112);
    v27 = *(_OWORD *)v14;
    v26 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v25;
    *v13 = v27;
    *(_OWORD *)(a1 + 80) = v26;
    v28 = *(_OWORD *)(a2 + 176);
    v30 = *(_OWORD *)(a2 + 128);
    v29 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v28;
    *(_OWORD *)(a1 + 128) = v30;
    *(_OWORD *)(a1 + 144) = v29;
    v32 = *(_OWORD *)(a2 + 208);
    v31 = *(_OWORD *)(a2 + 224);
    v33 = *(_OWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    *(_OWORD *)(a1 + 208) = v32;
    *(_OWORD *)(a1 + 224) = v31;
    *(_OWORD *)(a1 + 192) = v33;
  }
  else
  {
    v36 = *(unsigned __int8 *)(a2 + 72);
    if (*(unsigned __int8 *)(a1 + 72) == 255)
    {
      if (v36 == 255)
      {
        v54 = *v14;
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        *(_QWORD *)v13 = v54;
      }
      else
      {
        v52 = *v14;
        outlined copy of GraphicsImage.Contents(*v14, *(_BYTE *)(a2 + 72));
        *(_QWORD *)(a1 + 64) = v52;
        *(_BYTE *)(a1 + 72) = v36;
      }
    }
    else if (v36 == 255)
    {
      outlined destroy of GraphicsImage.Contents(a1 + 64);
      v53 = *(_BYTE *)(a2 + 72);
      *(_QWORD *)v13 = *v14;
      *(_BYTE *)(a1 + 72) = v53;
    }
    else
    {
      v37 = *v14;
      outlined copy of GraphicsImage.Contents(*v14, *(_BYTE *)(a2 + 72));
      v38 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v37;
      v39 = *(_BYTE *)(a1 + 72);
      *(_BYTE *)(a1 + 72) = v36;
      outlined consume of GraphicsImage.Contents(v38, v39);
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    v55 = *(_OWORD *)(a2 + 108);
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
    *(_OWORD *)(a1 + 108) = v55;
    v56 = *(_OWORD *)(a2 + 128);
    v57 = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v56;
    *(_OWORD *)(a1 + 144) = v57;
    *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
    *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
    *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
    v58 = (_OWORD *)(a1 + 168);
    v59 = (_OWORD *)(a2 + 168);
    v60 = *(_QWORD *)(a2 + 184);
    v61 = v60 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_QWORD *)(a1 + 184) >> 1 == 0xFFFFFFFFLL)
    {
      if (v61 == 0x1FFFFFFFELL)
      {
        v62 = *(_OWORD *)(a2 + 184);
        *v58 = *v59;
        *(_OWORD *)(a1 + 184) = v62;
      }
      else
      {
        v64 = *(_QWORD *)(a2 + 168);
        v65 = *(_QWORD *)(a2 + 176);
        v66 = *(_QWORD *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v64, v65, *(_QWORD *)(a2 + 184));
        *(_QWORD *)(a1 + 168) = v64;
        *(_QWORD *)(a1 + 176) = v65;
        *(_QWORD *)(a1 + 184) = v60;
        *(_QWORD *)(a1 + 192) = v66;
      }
    }
    else if (v61 == 0x1FFFFFFFELL)
    {
      outlined destroy of AccessibilityImageLabel(a1 + 168);
      v63 = *(_OWORD *)(a2 + 184);
      *v58 = *v59;
      *(_OWORD *)(a1 + 184) = v63;
    }
    else
    {
      v67 = *(_QWORD *)(a2 + 168);
      v68 = *(_QWORD *)(a2 + 176);
      v69 = *(_QWORD *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v67, v68, *(_QWORD *)(a2 + 184));
      v70 = *(_QWORD *)(a1 + 168);
      v71 = *(_QWORD *)(a1 + 176);
      v72 = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 168) = v67;
      *(_QWORD *)(a1 + 176) = v68;
      *(_QWORD *)(a1 + 184) = v60;
      *(_QWORD *)(a1 + 192) = v69;
      outlined consume of AccessibilityImageLabel(v70, v71, v72);
    }
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    swift_retain();
    swift_release();
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
    v73 = *(_DWORD *)(a2 + 220);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    *(_DWORD *)(a1 + 220) = v73;
    v74 = *(void **)(a1 + 232);
    v75 = *(void **)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v75;
    v76 = v75;

    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
  }
  v77 = (_OWORD *)(a1 + 248);
  v78 = (_OWORD *)(a2 + 248);
  v79 = *(_QWORD *)(a2 + 256);
  if (*(_QWORD *)(a1 + 256))
  {
    if (!v79)
    {
      outlined destroy of Image.NamedResolved(a1 + 248);
      v87 = *(_OWORD *)(a2 + 264);
      v86 = *(_OWORD *)(a2 + 280);
      *v77 = *v78;
      *(_OWORD *)(a1 + 264) = v87;
      *(_OWORD *)(a1 + 280) = v86;
      goto LABEL_44;
    }
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v80 = *(void **)(a1 + 264);
    v81 = *(void **)(a2 + 264);
    if ((unint64_t)v80 >= 2)
    {
      if ((unint64_t)v81 >= 2)
      {
        *(_QWORD *)(a1 + 264) = v81;
        v90 = v81;

        goto LABEL_43;
      }

      v81 = *(void **)(a2 + 264);
    }
    else if ((unint64_t)v81 >= 2)
    {
      *(_QWORD *)(a1 + 264) = v81;
      v82 = v81;
LABEL_43:
      v91 = *(_DWORD *)(a2 + 272);
      *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
      *(_DWORD *)(a1 + 272) = v91;
      *(_BYTE *)(a1 + 277) = *(_BYTE *)(a2 + 277);
      *(_BYTE *)(a1 + 278) = *(_BYTE *)v6;
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      swift_retain();
      swift_release();
      goto LABEL_44;
    }
    *(_QWORD *)(a1 + 264) = v81;
    goto LABEL_43;
  }
  if (v79)
  {
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v83 = *(void **)(a2 + 264);
    swift_bridgeObjectRetain();
    if ((unint64_t)v83 >= 2)
      v84 = v83;
    *(_QWORD *)(a1 + 264) = v83;
    v85 = *(_DWORD *)(a2 + 272);
    *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
    *(_DWORD *)(a1 + 272) = v85;
    *(_BYTE *)(a1 + 277) = *(_BYTE *)(a2 + 277);
    *(_BYTE *)(a1 + 278) = *(_BYTE *)(a2 + 278);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    swift_retain();
    swift_retain();
  }
  else
  {
    v88 = *v78;
    v89 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v89;
    *v77 = v88;
  }
LABEL_44:
  v92 = (__int128 *)(a1 + 296);
  v93 = (__int128 *)(a2 + 296);
  v94 = *(_QWORD *)(a2 + 328);
  v95 = v94 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(_QWORD *)(a1 + 328) >> 2 == 0xFFFFFFFFLL)
  {
    if (v95 == 0x3FFFFFFFCLL)
    {
      v96 = *v93;
      v97 = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 328) = v97;
      *v92 = v96;
      v98 = *(_OWORD *)(a2 + 344);
      v99 = *(_OWORD *)(a2 + 360);
      v100 = *(_OWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      *(_OWORD *)(a1 + 360) = v99;
      *(_OWORD *)(a1 + 376) = v100;
      *(_OWORD *)(a1 + 344) = v98;
    }
    else
    {
      v106 = *(void **)(a2 + 296);
      v107 = *(_QWORD *)(a2 + 304);
      v108 = *(_QWORD *)(a2 + 312);
      v109 = *(_QWORD *)(a2 + 320);
      v233 = v6;
      v237 = a3;
      v110 = *(_QWORD *)(a2 + 336);
      v111 = *(_QWORD *)(a2 + 344);
      v112 = *(_QWORD *)(a2 + 352);
      v222 = *(_QWORD *)(a2 + 360);
      v224 = *(_QWORD *)(a2 + 368);
      v226 = *(_QWORD *)(a2 + 376);
      v228 = *(_QWORD *)(a2 + 384);
      v230 = *(_QWORD *)(a2 + 392);
      outlined copy of PlatformItemList.Item.SystemItem(v106, v107, v108, v109, v94, v110, v111, v112, v222, v224, v226, v228, v230);
      *(_QWORD *)(a1 + 296) = v106;
      *(_QWORD *)(a1 + 304) = v107;
      *(_QWORD *)(a1 + 312) = v108;
      *(_QWORD *)(a1 + 320) = v109;
      *(_QWORD *)(a1 + 328) = v94;
      *(_QWORD *)(a1 + 336) = v110;
      *(_QWORD *)(a1 + 344) = v111;
      *(_QWORD *)(a1 + 352) = v112;
      v6 = v233;
      a3 = v237;
      *(_QWORD *)(a1 + 360) = v222;
      *(_QWORD *)(a1 + 368) = v224;
      *(_QWORD *)(a1 + 376) = v226;
      *(_QWORD *)(a1 + 384) = v228;
      *(_QWORD *)(a1 + 392) = v230;
    }
  }
  else if (v95 == 0x3FFFFFFFCLL)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    v102 = *(_OWORD *)(a2 + 312);
    v101 = *(_OWORD *)(a2 + 328);
    *v92 = *v93;
    *(_OWORD *)(a1 + 312) = v102;
    *(_OWORD *)(a1 + 328) = v101;
    v104 = *(_OWORD *)(a2 + 360);
    v103 = *(_OWORD *)(a2 + 376);
    v105 = *(_OWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 360) = v104;
    *(_OWORD *)(a1 + 376) = v103;
    *(_OWORD *)(a1 + 344) = v105;
  }
  else
  {
    v113 = *(void **)(a2 + 296);
    v114 = *(_QWORD *)(a2 + 304);
    v234 = v6;
    v238 = a3;
    v115 = *(_QWORD *)(a2 + 312);
    v116 = *(_QWORD *)(a2 + 320);
    v117 = *(_QWORD *)(a2 + 336);
    v118 = *(_QWORD *)(a2 + 344);
    v119 = *(_QWORD *)(a2 + 352);
    v223 = *(_QWORD *)(a2 + 360);
    v225 = *(_QWORD *)(a2 + 368);
    v227 = *(_QWORD *)(a2 + 376);
    v229 = *(_QWORD *)(a2 + 384);
    v231 = *(_QWORD *)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v113, v114, v115, v116, v94, v117, v118, v119, v223, v225, v227, v229, v231);
    v120 = *(void **)(a1 + 296);
    v121 = *(_QWORD *)(a1 + 304);
    v122 = *(_QWORD *)(a1 + 312);
    v123 = *(_QWORD *)(a1 + 320);
    v124 = *(_QWORD *)(a1 + 328);
    v125 = *(_QWORD *)(a1 + 336);
    v126 = *(_QWORD *)(a1 + 344);
    v127 = *(_QWORD *)(a1 + 352);
    v128 = *(_OWORD *)(a1 + 360);
    v129 = *(_OWORD *)(a1 + 376);
    v130 = *(_QWORD *)(a1 + 392);
    *(_QWORD *)(a1 + 296) = v113;
    *(_QWORD *)(a1 + 304) = v114;
    *(_QWORD *)(a1 + 312) = v115;
    *(_QWORD *)(a1 + 320) = v116;
    *(_QWORD *)(a1 + 328) = v94;
    *(_QWORD *)(a1 + 336) = v117;
    v6 = v234;
    a3 = v238;
    *(_QWORD *)(a1 + 344) = v118;
    *(_QWORD *)(a1 + 352) = v119;
    *(_QWORD *)(a1 + 360) = v223;
    *(_QWORD *)(a1 + 368) = v225;
    *(_QWORD *)(a1 + 376) = v227;
    *(_QWORD *)(a1 + 384) = v229;
    *(_QWORD *)(a1 + 392) = v231;
    outlined consume of PlatformItemList.Item.SystemItem(v120, v121, v122, v123, v124, v125, v126, v127, v128, *((uint64_t *)&v128 + 1), v129, SBYTE8(v129), v130);
  }
  v131 = (_OWORD *)(a1 + 400);
  v132 = (_OWORD *)(v6 + 122);
  v133 = (_OWORD *)(a1 + 408);
  v134 = *(_QWORD *)(a1 + 408);
  v135 = (_OWORD *)(a2 + 408);
  v136 = *(_QWORD *)(a2 + 408);
  if (v134 != 1)
  {
    if (v136 == 1)
    {
      outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
      *v131 = *v132;
      v141 = *(_OWORD *)(v6 + 154);
      v140 = *(_OWORD *)(v6 + 170);
      v142 = *(_OWORD *)(v6 + 138);
      *(_BYTE *)(a1 + 464) = *(_BYTE *)(v6 + 186);
      *(_OWORD *)(a1 + 432) = v141;
      *(_OWORD *)(a1 + 448) = v140;
      *(_OWORD *)(a1 + 416) = v142;
      goto LABEL_85;
    }
    *(_BYTE *)(a1 + 400) = *(_BYTE *)(v6 + 122);
    *(_BYTE *)(a1 + 401) = *(_BYTE *)(v6 + 123);
    *(_BYTE *)(a1 + 402) = *(_BYTE *)(v6 + 124);
    *(_BYTE *)(a1 + 403) = *(_BYTE *)(v6 + 125);
    *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
    v148 = *(_QWORD *)(a2 + 408);
    if (v134)
    {
      if (v148)
      {
        v149 = *(_QWORD *)(a2 + 416);
        *(_QWORD *)(a1 + 408) = v148;
        *(_QWORD *)(a1 + 416) = v149;
        swift_retain();
        swift_release();
        goto LABEL_70;
      }
      swift_release();
    }
    else if (v148)
    {
      v150 = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 408) = v148;
      *(_QWORD *)(a1 + 416) = v150;
      swift_retain();
      goto LABEL_70;
    }
    *v133 = *v135;
LABEL_70:
    v151 = *(_QWORD *)(a2 + 424);
    if (*(_QWORD *)(a1 + 424))
    {
      if (v151)
      {
        v152 = *(_QWORD *)(a2 + 432);
        *(_QWORD *)(a1 + 424) = v151;
        *(_QWORD *)(a1 + 432) = v152;
        swift_retain();
        swift_release();
        goto LABEL_77;
      }
      swift_release();
    }
    else if (v151)
    {
      v153 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = v151;
      *(_QWORD *)(a1 + 432) = v153;
      swift_retain();
      goto LABEL_77;
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_77:
    v147 = *(_QWORD *)(a2 + 440);
    if (*(_QWORD *)(a1 + 440))
    {
      if (v147)
      {
        v154 = *(_QWORD *)(a2 + 448);
        *(_QWORD *)(a1 + 440) = v147;
        *(_QWORD *)(a1 + 448) = v154;
        swift_retain();
        swift_release();
        goto LABEL_84;
      }
      swift_release();
    }
    else if (v147)
    {
      goto LABEL_81;
    }
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_84;
  }
  if (v136 == 1)
  {
    *v131 = *v132;
    v137 = *(_OWORD *)(v6 + 138);
    v138 = *(_OWORD *)(v6 + 154);
    v139 = *(_OWORD *)(v6 + 170);
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(v6 + 186);
    *(_OWORD *)(a1 + 432) = v138;
    *(_OWORD *)(a1 + 448) = v139;
    *(_OWORD *)(a1 + 416) = v137;
    goto LABEL_85;
  }
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_BYTE *)(a1 + 401) = *(_BYTE *)(a2 + 401);
  *(_BYTE *)(a1 + 402) = *(_BYTE *)(a2 + 402);
  *(_BYTE *)(a1 + 403) = *(_BYTE *)(a2 + 403);
  *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
  v143 = *(_QWORD *)(a2 + 408);
  if (v143)
  {
    v144 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = v143;
    *(_QWORD *)(a1 + 416) = v144;
    swift_retain();
    v145 = *(_QWORD *)(a2 + 424);
    if (v145)
      goto LABEL_58;
  }
  else
  {
    *v133 = *v135;
    v145 = *(_QWORD *)(a2 + 424);
    if (v145)
    {
LABEL_58:
      v146 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = v145;
      *(_QWORD *)(a1 + 432) = v146;
      swift_retain();
      v147 = *(_QWORD *)(a2 + 440);
      if (!v147)
        goto LABEL_65;
LABEL_81:
      v155 = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 440) = v147;
      *(_QWORD *)(a1 + 448) = v155;
      swift_retain();
      goto LABEL_84;
    }
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  v147 = *(_QWORD *)(a2 + 440);
  if (v147)
    goto LABEL_81;
LABEL_65:
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
LABEL_84:
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_85:
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v156 = *(_QWORD *)(a2 + 504);
  if (*(_QWORD *)(a1 + 504))
  {
    if (v156)
    {
      v157 = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 504) = v156;
      *(_QWORD *)(a1 + 512) = v157;
      swift_retain();
      swift_release();
      goto LABEL_92;
    }
    swift_release();
  }
  else if (v156)
  {
    v158 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v156;
    *(_QWORD *)(a1 + 512) = v158;
    swift_retain();
    goto LABEL_92;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_92:
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  v159 = (_OWORD *)(a1 + 528);
  v160 = (_OWORD *)(a2 + 528);
  v161 = *(_QWORD *)(a2 + 528);
  if (*(_QWORD *)(a1 + 528))
  {
    if (v161)
    {
      *(_QWORD *)(a1 + 528) = v161;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
      v162 = *(_QWORD *)(a2 + 544);
      *v159 = *v160;
      *(_QWORD *)(a1 + 544) = v162;
    }
  }
  else if (v161)
  {
    *(_QWORD *)(a1 + 528) = v161;
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v163 = *v160;
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    *v159 = v163;
  }
  v164 = (__int128 *)(a1 + 552);
  v165 = (__int128 *)(a2 + 552);
  v166 = *(_QWORD *)(a2 + 552);
  if (*(_QWORD *)(a1 + 552) == 1)
  {
    if (v166 == 1)
    {
      v167 = *v165;
      *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
      *v164 = v167;
      goto LABEL_115;
    }
    *(_QWORD *)(a1 + 552) = v166;
    v169 = *(_QWORD *)(a2 + 560);
    swift_retain();
    if (!v169)
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
      goto LABEL_115;
    }
    v170 = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 560) = v169;
    goto LABEL_112;
  }
  if (v166 == 1)
  {
    outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
    v168 = *(_QWORD *)(a2 + 568);
    *v164 = *v165;
    *(_QWORD *)(a1 + 568) = v168;
    goto LABEL_115;
  }
  *(_QWORD *)(a1 + 552) = v166;
  swift_retain();
  swift_release();
  v171 = *(_QWORD *)(a2 + 560);
  if (*(_QWORD *)(a1 + 560))
  {
    if (v171)
    {
      v172 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v171;
      *(_QWORD *)(a1 + 568) = v172;
      swift_retain();
      swift_release();
      goto LABEL_115;
    }
    swift_release();
  }
  else if (v171)
  {
    v170 = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 560) = v171;
LABEL_112:
    *(_QWORD *)(a1 + 568) = v170;
    swift_retain();
    goto LABEL_115;
  }
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
LABEL_115:
  v173 = *(void **)(a1 + 576);
  v174 = *(void **)(a2 + 576);
  *(_QWORD *)(a1 + 576) = v174;
  v175 = v174;

  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_BYTE *)(a1 + 633) = *(_BYTE *)(a2 + 633);
  *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 634);
  v176 = (int *)type metadata accessor for PlatformItemList.Item();
  v177 = v176[28];
  v178 = (_BYTE *)(a1 + v177);
  v179 = (_BYTE *)(a2 + v177);
  v180 = type metadata accessor for CommandOperation();
  v181 = *(_QWORD *)(v180 - 8);
  v182 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v181 + 48);
  LODWORD(v173) = v182(v178, 1, v180);
  v183 = v182(v179, 1, v180);
  if (!(_DWORD)v173)
  {
    if (!v183)
    {
      v236 = v179;
      v240 = a3;
      *v178 = *v179;
      v202 = *(int *)(v180 + 20);
      v203 = &v178[v202];
      v204 = &v179[v202];
      v205 = *(_QWORD *)v204;
      v206 = *((_QWORD *)v204 + 1);
      v207 = v204[16];
      outlined copy of Text.Storage(*(_QWORD *)v204, v206, v207);
      v208 = *(_QWORD *)v203;
      v209 = *((_QWORD *)v203 + 1);
      v210 = v203[16];
      *(_QWORD *)v203 = v205;
      *((_QWORD *)v203 + 1) = v206;
      v203[16] = v207;
      outlined consume of Text.Storage(v208, v209, v210);
      *((_QWORD *)v203 + 3) = *((_QWORD *)v204 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v211 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v212 = &v203[v211];
      v213 = &v204[v211];
      v214 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v214 - 8) + 24))(v212, v213, v214);
      v215 = *(int *)(v180 + 24);
      v216 = &v178[v215];
      v217 = &v236[v215];
      v218 = *(_QWORD *)&v236[v215];
      if (*v216)
      {
        a3 = v240;
        if (v218)
        {
          v219 = *((_QWORD *)v217 + 1);
          *v216 = v218;
          v216[1] = v219;
          swift_retain();
          swift_release();
          goto LABEL_128;
        }
        swift_release();
      }
      else
      {
        a3 = v240;
        if (v218)
        {
          v221 = *((_QWORD *)v217 + 1);
          *v216 = v218;
          v216[1] = v221;
          swift_retain();
          goto LABEL_128;
        }
      }
      *(_OWORD *)v216 = *(_OWORD *)v217;
      goto LABEL_128;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v178, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    v184 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    goto LABEL_120;
  }
  if (v183)
  {
    v184 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_120:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, v184);
    memcpy(v178, v179, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
    goto LABEL_128;
  }
  v235 = v179;
  v239 = a3;
  *v178 = *v179;
  v186 = *(int *)(v180 + 20);
  v187 = v179;
  v188 = &v178[v186];
  v232 = v178;
  v189 = &v187[v186];
  v190 = *(_QWORD *)&v187[v186];
  v191 = *(_QWORD *)&v187[v186 + 8];
  v192 = v187[v186 + 16];
  outlined copy of Text.Storage(v190, v191, v192);
  *(_QWORD *)v188 = v190;
  *((_QWORD *)v188 + 1) = v191;
  v188[16] = v192;
  *((_QWORD *)v188 + 3) = *((_QWORD *)v189 + 3);
  v193 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v194 = &v188[v193];
  v195 = &v189[v193];
  v196 = type metadata accessor for UUID();
  v197 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v196 - 8) + 16);
  swift_bridgeObjectRetain();
  v197(v194, v195, v196);
  v198 = *(int *)(v180 + 24);
  v199 = &v232[v198];
  v200 = &v235[v198];
  if (*v200)
  {
    v201 = v200[1];
    *v199 = *v200;
    v199[1] = v201;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v199 = *(_OWORD *)v200;
  }
  a3 = v239;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v181 + 56))(v232, 0, 1, v180);
LABEL_128:
  *(_BYTE *)(a1 + v176[29]) = *(_BYTE *)(a2 + v176[29]);
  *(_BYTE *)(a1 + v176[30]) = *(_BYTE *)(a2 + v176[30]);
  *(_BYTE *)(a1 + v176[31]) = *(_BYTE *)(a2 + v176[31]);
  *(_BYTE *)(a1 + v176[32]) = *(_BYTE *)(a2 + v176[32]);
  *(_QWORD *)(a1 + v176[33]) = *(_QWORD *)(a2 + v176[33]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MenuVisitor.MenuStackGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _BYTE *v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v10;
  v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v11;
  v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v13 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v13;
  v14 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v14;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  v15 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v15;
  v16 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v16;
  v17 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v17;
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  v18 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v18;
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
  v19 = *(_QWORD *)(a2 + 504);
  if (v19)
  {
    v20 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v19;
    *(_QWORD *)(a1 + 512) = v20;
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  v21 = (int *)type metadata accessor for PlatformItemList.Item();
  v22 = v21[28];
  v23 = (_BYTE *)(a1 + v22);
  v24 = (_BYTE *)(a2 + v22);
  v25 = type metadata accessor for CommandOperation();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *v24;
    v28 = *(int *)(v25 + 20);
    v29 = &v23[v28];
    v30 = &v24[v28];
    v31 = *(_OWORD *)&v24[v28 + 16];
    *v29 = *(_OWORD *)&v24[v28];
    v29[1] = v31;
    v32 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v33 = (char *)v29 + v32;
    v34 = &v30[v32];
    v35 = type metadata accessor for UUID();
    (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
    v36 = *(int *)(v25 + 24);
    v37 = &v23[v36];
    v38 = (uint64_t *)&v24[v36];
    v39 = *v38;
    if (*v38)
    {
      v40 = v38[1];
      *v37 = v39;
      v37[1] = v40;
    }
    else
    {
      *(_OWORD *)v37 = *(_OWORD *)v38;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  *(_BYTE *)(a1 + v21[29]) = *(_BYTE *)(a2 + v21[29]);
  *(_BYTE *)(a1 + v21[30]) = *(_BYTE *)(a2 + v21[30]);
  *(_BYTE *)(a1 + v21[31]) = *(_BYTE *)(a2 + v21[31]);
  *(_BYTE *)(a1 + v21[32]) = *(_BYTE *)(a2 + v21[32]);
  *(_QWORD *)(a1 + v21[33]) = *(_QWORD *)(a2 + v21[33]);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for MenuVisitor.MenuStackGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  void *v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  __int128 v32;
  _OWORD *v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  int *v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(_BYTE *, uint64_t, uint64_t);
  int v78;
  int v79;
  uint64_t (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  _BYTE *v86;
  __int128 v87;
  uint64_t v88;
  char *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;

  v6 = a2 + 278;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v9;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = (_OWORD *)(a1 + 64);
  v12 = (_OWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 184) >> 1 == 4294967294)
    goto LABEL_4;
  if (*(_QWORD *)(a2 + 184) >> 1 == 4294967294)
  {
    outlined destroy of Image.Resolved(a1 + 64);
LABEL_4:
    v13 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v13;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    v14 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v14;
    v15 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v15;
    v16 = *(_OWORD *)(a2 + 80);
    *v11 = *v12;
    *(_OWORD *)(a1 + 80) = v16;
    v17 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v17;
    goto LABEL_16;
  }
  v18 = *(unsigned __int8 *)(a1 + 72);
  if (v18 != 255)
  {
    v19 = *(unsigned __int8 *)(a2 + 72);
    if (v19 != 255)
    {
      v20 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)v12;
      *(_BYTE *)(a1 + 72) = v19;
      outlined consume of GraphicsImage.Contents(v20, v18);
      goto LABEL_10;
    }
    outlined destroy of GraphicsImage.Contents(a1 + 64);
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
LABEL_10:
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  v21 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v21;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  v22 = *(_QWORD *)(a1 + 184);
  *(_WORD *)(a1 + 162) = *(_WORD *)(a2 + 162);
  if (v22 >> 1 != 0xFFFFFFFF)
  {
    v23 = *(_QWORD *)(a2 + 184);
    if (v23 >> 1 != 0xFFFFFFFF)
    {
      v25 = *(_QWORD *)(a2 + 192);
      v26 = *(_QWORD *)(a1 + 168);
      v27 = *(_QWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 184) = v23;
      *(_QWORD *)(a1 + 192) = v25;
      outlined consume of AccessibilityImageLabel(v26, v27, v22);
      goto LABEL_15;
    }
    outlined destroy of AccessibilityImageLabel(a1 + 168);
  }
  v24 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v24;
LABEL_15:
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release();
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  v28 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);

  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
LABEL_16:
  if (!*(_QWORD *)(a1 + 256))
  {
LABEL_21:
    v32 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v32;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_26;
  }
  v29 = *(_QWORD *)(a2 + 256);
  if (!v29)
  {
    outlined destroy of Image.NamedResolved(a1 + 248);
    goto LABEL_21;
  }
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v29;
  swift_bridgeObjectRelease();
  v30 = *(void **)(a1 + 264);
  v31 = *(_QWORD *)(a2 + 264);
  if ((unint64_t)v30 >= 2)
  {
    if (v31 >= 2)
    {
      *(_QWORD *)(a1 + 264) = v31;

    }
    else
    {

      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 264) = v31;
  }
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_WORD *)(a1 + 276) = *(_WORD *)(a2 + 276);
  *(_BYTE *)(a1 + 278) = *(_BYTE *)v6;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_release();
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_release();
LABEL_26:
  v33 = (_OWORD *)(a1 + 296);
  v34 = *(_QWORD *)(a1 + 328);
  if (v34 >> 2 == 0xFFFFFFFF)
  {
LABEL_29:
    v36 = *(_OWORD *)(v6 + 98);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(v6 + 82);
    *(_OWORD *)(a1 + 376) = v36;
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(v6 + 114);
    v37 = *(_OWORD *)(v6 + 34);
    *v33 = *(_OWORD *)(v6 + 18);
    *(_OWORD *)(a1 + 312) = v37;
    v38 = *(_OWORD *)(v6 + 66);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(v6 + 50);
    *(_OWORD *)(a1 + 344) = v38;
    goto LABEL_31;
  }
  v35 = *(_QWORD *)(a2 + 328);
  if (v35 >> 2 == 0xFFFFFFFF)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    goto LABEL_29;
  }
  v39 = *(void **)(a1 + 296);
  v40 = *(_QWORD *)(a1 + 304);
  v41 = *(_QWORD *)(a1 + 312);
  v42 = *(_QWORD *)(a1 + 320);
  v43 = *(_QWORD *)(a1 + 336);
  v44 = *(_QWORD *)(a1 + 344);
  v45 = *(_QWORD *)(a1 + 352);
  v46 = *(_OWORD *)(a1 + 360);
  v47 = *(_OWORD *)(a1 + 376);
  v48 = *(_QWORD *)(a1 + 392);
  v49 = *(_OWORD *)(v6 + 34);
  *v33 = *(_OWORD *)(v6 + 18);
  *(_OWORD *)(a1 + 312) = v49;
  *(_QWORD *)(a1 + 328) = v35;
  v50 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v50;
  v51 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v51;
  outlined consume of PlatformItemList.Item.SystemItem(v39, v40, v41, v42, v34, v43, v44, v45, v46, *((uint64_t *)&v46 + 1), v47, SBYTE8(v47), v48);
LABEL_31:
  v52 = *(_QWORD *)(a1 + 408);
  if (v52 == 1)
  {
LABEL_34:
    v54 = *(_OWORD *)(v6 + 170);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(v6 + 154);
    *(_OWORD *)(a1 + 448) = v54;
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(v6 + 186);
    v55 = *(_OWORD *)(v6 + 138);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(v6 + 122);
    *(_OWORD *)(a1 + 416) = v55;
    goto LABEL_57;
  }
  v53 = *(_QWORD *)(a2 + 408);
  if (v53 == 1)
  {
    outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
    goto LABEL_34;
  }
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(v6 + 122);
  *(_BYTE *)(a1 + 401) = *(_BYTE *)(v6 + 123);
  *(_BYTE *)(a1 + 402) = *(_BYTE *)(v6 + 124);
  *(_BYTE *)(a1 + 403) = *(_BYTE *)(v6 + 125);
  *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
  if (v52)
  {
    if (v53)
    {
      v56 = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 408) = v53;
      *(_QWORD *)(a1 + 416) = v56;
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v53)
  {
    v57 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = v53;
    *(_QWORD *)(a1 + 416) = v57;
    goto LABEL_42;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
LABEL_42:
  v58 = *(_QWORD *)(a2 + 424);
  if (*(_QWORD *)(a1 + 424))
  {
    if (v58)
    {
      v59 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = v58;
      *(_QWORD *)(a1 + 432) = v59;
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v58)
  {
    v60 = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 424) = v58;
    *(_QWORD *)(a1 + 432) = v60;
    goto LABEL_49;
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_49:
  v61 = *(_QWORD *)(a2 + 440);
  if (!*(_QWORD *)(a1 + 440))
  {
    if (v61)
    {
      v63 = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 440) = v61;
      *(_QWORD *)(a1 + 448) = v63;
      goto LABEL_56;
    }
LABEL_55:
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_56;
  }
  if (!v61)
  {
    swift_release();
    goto LABEL_55;
  }
  v62 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v61;
  *(_QWORD *)(a1 + 448) = v62;
  swift_release();
LABEL_56:
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_57:
  v64 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v64;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v65 = *(_QWORD *)(a2 + 504);
  if (*(_QWORD *)(a1 + 504))
  {
    if (v65)
    {
      v66 = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 504) = v65;
      *(_QWORD *)(a1 + 512) = v66;
      swift_release();
      goto LABEL_64;
    }
    swift_release();
  }
  else if (v65)
  {
    v67 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v65;
    *(_QWORD *)(a1 + 512) = v67;
    goto LABEL_64;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_64:
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  if (*(_QWORD *)(a1 + 528))
  {
    v68 = *(_QWORD *)(a2 + 528);
    if (v68)
    {
      *(_QWORD *)(a1 + 528) = v68;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_release();
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      swift_release();
      goto LABEL_69;
    }
    outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
  }
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
LABEL_69:
  if (*(_QWORD *)(a1 + 552) == 1)
  {
LABEL_72:
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    goto LABEL_73;
  }
  v69 = *(_QWORD *)(a2 + 552);
  if (v69 == 1)
  {
    outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
    goto LABEL_72;
  }
  *(_QWORD *)(a1 + 552) = v69;
  swift_release();
  v82 = *(_QWORD *)(a2 + 560);
  if (*(_QWORD *)(a1 + 560))
  {
    if (v82)
    {
      v83 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v82;
      *(_QWORD *)(a1 + 568) = v83;
      swift_release();
      goto LABEL_73;
    }
    swift_release();
  }
  else if (v82)
  {
    v112 = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 560) = v82;
    *(_QWORD *)(a1 + 568) = v112;
    goto LABEL_73;
  }
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
LABEL_73:
  v70 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);

  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  v71 = (int *)type metadata accessor for PlatformItemList.Item();
  v72 = v71[28];
  v73 = (_BYTE *)(a1 + v72);
  v74 = (_BYTE *)(a2 + v72);
  v75 = type metadata accessor for CommandOperation();
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v76 + 48);
  v78 = v77(v73, 1, v75);
  v79 = v77(v74, 1, v75);
  if (!v78)
  {
    if (!v79)
    {
      *v73 = *v74;
      v97 = *(int *)(v75 + 20);
      v98 = &v73[v97];
      v99 = &v74[v97];
      LOBYTE(v97) = v74[v97 + 16];
      v100 = *(_QWORD *)v98;
      v101 = *((_QWORD *)v98 + 1);
      v102 = v98[16];
      *(_OWORD *)v98 = *(_OWORD *)v99;
      v98[16] = v97;
      outlined consume of Text.Storage(v100, v101, v102);
      *((_QWORD *)v98 + 3) = *((_QWORD *)v99 + 3);
      swift_bridgeObjectRelease();
      v103 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v104 = &v98[v103];
      v105 = &v99[v103];
      v106 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v106 - 8) + 40))(v104, v105, v106);
      v107 = *(int *)(v75 + 24);
      v108 = &v73[v107];
      v109 = (uint64_t *)&v74[v107];
      v110 = *v109;
      if (*v108)
      {
        if (v110)
        {
          v111 = v109[1];
          *v108 = v110;
          v108[1] = v111;
          swift_release();
          goto LABEL_91;
        }
        swift_release();
      }
      else if (v110)
      {
        v114 = v109[1];
        *v108 = v110;
        v108[1] = v114;
        goto LABEL_91;
      }
      *(_OWORD *)v108 = *(_OWORD *)v109;
      goto LABEL_91;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v73, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    v80 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    goto LABEL_78;
  }
  if (v79)
  {
    v80 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_78:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, v80);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    goto LABEL_91;
  }
  *v73 = *v74;
  v84 = *(int *)(v75 + 20);
  v85 = &v73[v84];
  v86 = &v74[v84];
  v87 = *(_OWORD *)&v74[v84 + 16];
  *v85 = *(_OWORD *)&v74[v84];
  v85[1] = v87;
  v88 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v89 = (char *)v85 + v88;
  v90 = &v86[v88];
  v91 = type metadata accessor for UUID();
  (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v91 - 8) + 32))(v89, v90, v91);
  v92 = *(int *)(v75 + 24);
  v93 = &v73[v92];
  v94 = (uint64_t *)&v74[v92];
  v95 = *v94;
  if (*v94)
  {
    v96 = v94[1];
    *v93 = v95;
    v93[1] = v96;
  }
  else
  {
    *(_OWORD *)v93 = *(_OWORD *)v94;
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
LABEL_91:
  *(_BYTE *)(a1 + v71[29]) = *(_BYTE *)(a2 + v71[29]);
  *(_BYTE *)(a1 + v71[30]) = *(_BYTE *)(a2 + v71[30]);
  *(_BYTE *)(a1 + v71[31]) = *(_BYTE *)(a2 + v71[31]);
  *(_BYTE *)(a1 + v71[32]) = *(_BYTE *)(a2 + v71[32]);
  *(_QWORD *)(a1 + v71[33]) = *(_QWORD *)(a2 + v71[33]);
  swift_release();
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MenuVisitor.MenuStackGroup()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874B4508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PlatformItemList.Item();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for MenuVisitor.MenuStackGroup()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874B4590(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PlatformItemList.Item();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for MenuVisitor.MenuStackGroup()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PlatformItemList.Item();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.DocumentCommandsKey()
{
  return &type metadata for EnvironmentValues.DocumentCommandsKey;
}

ValueMetadata *type metadata accessor for MenuBuilderContext.PlacementMap()
{
  return &type metadata for MenuBuilderContext.PlacementMap;
}

uint64_t storeEnumTagSinglePayload for MenuBuilderContext.PlacementKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1874B46E8 + 4 * byte_187C37701[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1874B471C + 4 * byte_187C376FC[v4]))();
}

uint64_t sub_1874B471C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874B4724(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1874B472CLL);
  return result;
}

uint64_t sub_1874B4738(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1874B4740);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1874B4744(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874B474C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MenuBuilderContext.PlacementKind()
{
  return &type metadata for MenuBuilderContext.PlacementKind;
}

unint64_t lazy protocol witness table accessor for type MenuBuilderContext.PlacementKind and conformance MenuBuilderContext.PlacementKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuBuilderContext.PlacementKind and conformance MenuBuilderContext.PlacementKind;
  if (!lazy protocol witness table cache variable for type MenuBuilderContext.PlacementKind and conformance MenuBuilderContext.PlacementKind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuBuilderContext.PlacementKind, &type metadata for MenuBuilderContext.PlacementKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuBuilderContext.PlacementKind and conformance MenuBuilderContext.PlacementKind);
  }
  return result;
}

uint64_t destroy for MenuVisitor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MenuVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MenuVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MenuVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MenuVisitor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MenuVisitor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for MenuVisitor()
{
  return &unk_1E1AAFAF0;
}

void *type metadata accessor for MenuVisitor.Options()
{
  return &unk_1E1AAFAC8;
}

unint64_t lazy protocol witness table accessor for type MenuVisitor.Options and conformance MenuVisitor.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options;
  if (!lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuVisitor.Options, &unk_1E1AAFAC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options;
  if (!lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuVisitor.Options, &unk_1E1AAFAC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options;
  if (!lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuVisitor.Options, &unk_1E1AAFAC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options;
  if (!lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuVisitor.Options, &unk_1E1AAFAC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options);
  }
  return result;
}

void static FullScreenToolbarBehavior.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static FullScreenToolbarBehavior.showsWithWindow.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static FullScreenToolbarBehavior.showsWithMenuBar.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View.fullScreenToolbarBehavior(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

ValueMetadata *type metadata accessor for WindowToolbarFullScreenVisibility()
{
  return &type metadata for WindowToolbarFullScreenVisibility;
}

uint64_t storeEnumTagSinglePayload for WindowToolbarFullScreenVisibility(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1874B4C24 + 4 * byte_187C37B25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1874B4C58 + 4 * byte_187C37B20[v4]))();
}

uint64_t sub_1874B4C58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874B4C60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1874B4C68);
  return result;
}

uint64_t sub_1874B4C74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1874B4C7CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1874B4C80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874B4C88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WindowToolbarFullScreenVisibility.Role()
{
  return &type metadata for WindowToolbarFullScreenVisibility.Role;
}

unint64_t lazy protocol witness table accessor for type WindowToolbarFullScreenVisibility.Role and conformance WindowToolbarFullScreenVisibility.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowToolbarFullScreenVisibility.Role and conformance WindowToolbarFullScreenVisibility.Role;
  if (!lazy protocol witness table cache variable for type WindowToolbarFullScreenVisibility.Role and conformance WindowToolbarFullScreenVisibility.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowToolbarFullScreenVisibility.Role, &type metadata for WindowToolbarFullScreenVisibility.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowToolbarFullScreenVisibility.Role and conformance WindowToolbarFullScreenVisibility.Role);
  }
  return result;
}

void static WindowToolbarFullScreenVisibility.visible.getter()
{
  static FullScreenToolbarBehavior.showsWithMenuBar.getter();
}

void static WindowToolbarFullScreenVisibility.onHover.getter()
{
  static FullScreenToolbarBehavior.showsWithMenuBar.getter();
}

uint64_t type metadata completion function for UIViewResponder()
{
  return swift_initClassMetadata2();
}

void UIViewResponder.containsGlobalPoints(_:cacheKey:options:)(uint64_t *a1, double *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13[5];
  uint64_t v14;

  v8 = *a4;
  if ((static UnifiedHitTestingFeature.isEnabled.getter() & 1) != 0)
  {
    v13[0] = v8;
    PlatformViewResponderBase.containsGlobalPoints(_:cacheKey:options:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), v13);
    return;
  }
  v9 = (void *)MEMORY[0x18D760234](v4 + 40);
  if (!v9)
    goto LABEL_6;
  v10 = v9;
  if ((v8 & 1) != 0)
  {

    goto LABEL_8;
  }
  v11 = objc_msgSend(v9, sel_isUserInteractionEnabled);

  if (v11)
  {
LABEL_8:
    v13[3] = v8;
    swift_beginAccess();
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
    ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:)();
    swift_endAccess();
    v12 = v14;
    goto LABEL_9;
  }
LABEL_6:
  v12 = 0;
LABEL_9:
  v14 = v8;
  PlatformViewResponderBase.containsGlobalPoints(_:cacheKey:options:)(v13, a2, a3 | ((HIDWORD(a3) & 1) << 32), &v14);
  *a1 = v13[0] | v12;
}

Swift::Void __swiftcall UIViewResponder.extendPrintTree(string:)(Swift::String *string)
{
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;

  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v1._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8236;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  swift_beginAccess();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v3._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 93;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 91;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
}

uint64_t UIViewResponder.platformViewIsEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0 + 40;
  v2 = (void *)MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = v2;
    v4 = (uint64_t)objc_msgSend(v2, sel_isUserInteractionEnabled);
  }
  else
  {
    v5 = MEMORY[0x18D760234](v1);
    if (!v5)
      return 0;
    v3 = (void *)v5;
    v4 = 1;
  }

  return v4;
}

void __swiftcall UIViewResponder.platformViewHitTest(globalPoint:)(UIView_optional *__return_ptr retstr, CGPoint globalPoint)
{
  uint64_t v2;
  double y;
  double x;
  _QWORD *v5;
  void *v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t ObjectType;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  y = globalPoint.y;
  x = globalPoint.x;
  v5 = MEMORY[0x18D760234](retstr, v2 + 40);
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, sel_window);

    if (!v7)
    {

      return;
    }
    objc_msgSend(v6, sel_convertPoint_fromView_, 0, x, y);
    v9 = v8;
    v11 = v10;
    swift_beginAccess();
    if (MEMORY[0x18D760234](v2 + 16))
    {
      v12 = *(_QWORD *)(v2 + 24);
      ObjectType = swift_getObjectType();
      v14 = type metadata accessor for CurrentEventProvider();
      (*(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v12 + 16))(v18, v14, v14, ObjectType, v12);
      swift_unknownObjectRelease();
      v15 = v19;
      if (v19)
      {
        v16 = v20;
        __swift_project_boxed_opaque_existential_1(v18, v19);
        v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
LABEL_10:
        objc_msgSend(v6, sel_hitTest_withEvent_, v17, v9, v11);

        return;
      }
      outlined destroy of CurrentEventProvider?((uint64_t)v18);
    }
    v17 = 0;
    goto LABEL_10;
  }
}

uint64_t UIViewResponder.wantsSwiftUIFocusItem.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = (void *)MEMORY[0x18D760234](v0 + 192);

  if (!v1)
  {
    v3 = MEMORY[0x18D760234](v0 + 48);
    if (v3)
    {
      v4 = (void *)v3;
      if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
      {
        v2 = (uint64_t)objc_msgSend(v4, sel_canBecomeFirstResponder);
        goto LABEL_9;
      }
      v5 = UIView.firstFocusableDescendant.getter();

      if (v5)
      {
        v2 = 1;
        v4 = v5;
LABEL_9:

        return v2;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t UIViewResponder.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  v1 = specialized UIViewResponder.init()(v0);
  swift_release();
  return v1;
}

uint64_t UIViewResponder.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  return swift_bridgeObjectRelease();
}

uint64_t ObjC metadata update function for UIViewResponder()
{
  return type metadata accessor for UIViewResponder();
}

void UIViewResponder.focusItem.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  _BYTE v13[8];
  _BYTE v14[32];
  char v15;
  BOOL v16;
  _UNKNOWN **v17;
  int v18;

  v2 = v1;
  v4 = MEMORY[0x18D760234](v1 + 6);
  if (!v4)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_QWORD *)(a1 + 48) = 1;
    *(_DWORD *)(a1 + 56) = 0;
    return;
  }
  v5 = (void *)v4;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
  v12 = v5;
  v6 = (void *)static UIFocusSystem.focusSystem(for:)();

  if (v6)
  {

    v7 = objc_msgSend(v12, sel_traitCollection);
    v8 = objc_msgSend(v7, sel_userInterfaceIdiom);

    v9 = (void *)MEMORY[0x18D760234](v2 + 24);
    if (!v9)
    {
      if ((static SemanticFeature.isEnabled.getter() & 1) == 0
        || (v10 = UIView.firstFocusableDescendant.getter()) == 0)
      {
        v10 = v12;
      }
      v9 = v10;
    }
    v17 = 0;
    swift_weakInit();
    v18 = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of WeakBox<UIFocusItem>((uint64_t)v13, (uint64_t)v14);
    v15 = 1;
    v17 = &protocol witness table for UIViewResponder;
    swift_weakAssign();
    v16 = v8 == (id)3;
    outlined init with take of FocusItem((uint64_t)v14, a1);

  }
  else
  {
    if (((*(uint64_t (**)(void))(class metadata base offset for UIViewResponder + *v2 + 16))() & 1) == 0)
    {
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_QWORD *)(a1 + 48) = 1;
      *(_DWORD *)(a1 + 56) = 0;

      return;
    }
    v11 = (id)MEMORY[0x18D760234](v2 + 24);
    if (!v11)
      v11 = v12;
    v17 = 0;
    swift_weakInit();
    v18 = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of WeakBox<UIView>((uint64_t)v13, (uint64_t)v14);
    swift_retain();

    v15 = 2;
    v17 = &protocol witness table for UIViewResponder;
    swift_weakAssign();
    swift_release();
    v16 = 0;
    outlined init with take of FocusItem((uint64_t)v14, a1);
  }

}

uint64_t protocol witness for FocusResponder.keyPressHandlers.getter in conformance UIViewResponder()
{
  return swift_bridgeObjectRetain();
}

uint64_t specialized UIViewResponder.init()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_unknownObjectWeakInit();
  *(_QWORD *)(a1 + 208) = MEMORY[0x1E0DEE9D8];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  ContentResponderHelper.init()();
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 184) = 1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a1 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  type metadata accessor for ViewGraph();
  v2 = swift_retain();
  v3 = MEMORY[0x18D75C5F8](v2);
  swift_beginAccess();
  MEMORY[0x18D760234](v3 + 200);
  v4 = *(_QWORD *)(v3 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(a1 + 24) = v4;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t outlined init with take of WeakBox<UIView>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakBox<UIView>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for CurrentEventProvider()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CurrentEventProvider;
  if (!lazy cache variable for type metadata for CurrentEventProvider)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CurrentEventProvider);
  }
  return result;
}

uint64_t outlined destroy of CurrentEventProvider?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for CurrentEventProvider?, (uint64_t (*)(uint64_t))type metadata accessor for CurrentEventProvider, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t BorderedButtonSpec.defaultFont.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 8);
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = *((_BYTE *)v0 + 41);
  v7 = v0[6];
  v8 = *((unsigned __int8 *)v0 + 56);
  v9 = *((unsigned __int8 *)v0 + 40);
  outlined copy of Environment<ControlSize>.Content(*v0, v2);
  outlined copy of Environment<KeyboardShortcut?>.Content(v3, v4, v5, v9, v6);
  outlined copy of Environment<ControlSize>.Content(v7, v8);
  outlined copy of Environment<ControlSize>.Content(v1, v2);
  specialized Environment.wrappedValue.getter(v1, v2, &v12);
  outlined consume of Environment<ControlSize>.Content(v1, v2);
  outlined consume of Environment<ControlSize>.Content(v1, v2);
  outlined consume of Environment<KeyboardShortcut?>.Content(v3, v4, v5, v9, v6);
  outlined consume of Environment<ControlSize>.Content(v7, v8);
  if (v12 < 2u)
    v10 = 5;
  else
    v10 = 6;
  v22 = v10;
  v21 = 4;
  v12 = v1;
  v13 = v2;
  v14 = v3;
  v15 = v4;
  v16 = v5;
  v17 = v9;
  v18 = v6;
  v19 = v7;
  v20 = v8;
  if (BorderedButtonSpec.isDefault.getter())
    static Font.Weight.bold.getter();
  else
    static Font.Weight.regular.getter();
  return static Font.system(_:design:weight:)();
}

BOOL BorderedButtonSpec.isDefault.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(unsigned __int8 *)(v0 + 40);
  v5 = *(unsigned __int8 *)(v0 + 41);
  outlined copy of Environment<KeyboardShortcut?>.Content(v1, v2, v3, v4, v5);
  specialized Environment.wrappedValue.getter(v1, v2, v3, v4 | (v5 << 8), (uint64_t)&v11);
  outlined consume of Environment<KeyboardShortcut?>.Content(v1, v2, v3, v4, v5);
  if (!v12)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  v6 = v13;
  v7 = v14;
  v8 = v11 == 13 && v12 == 0xE100000000000000;
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    goto LABEL_14;
  swift_bridgeObjectRelease();
  return !v6 && v7 == 0;
}

unint64_t protocol witness for ShapeStyle._apply(to:) in conformance BorderedButtonColorSpec.LabelStyle()
{
  unint64_t *v0;
  unint64_t v1;

  v1 = *v0;
  if (v1)
  {
    if (v1 == 1 || v1 == 2)
    {
      return HierarchicalShapeStyle._apply(to:)();
    }
    else
    {
      swift_retain();
      Color._apply(to:)();
      return outlined consume of BorderedButtonColorSpec.LabelStyle(v1);
    }
  }
  else
  {
    static Color.white.getter();
    Color._apply(to:)();
    return swift_release();
  }
}

unint64_t destroy for BorderedButtonColorSpec(uint64_t a1)
{
  unint64_t result;

  swift_release();
  if (*(_QWORD *)(a1 + 24) >= 9uLL)
    swift_release();
  result = *(_QWORD *)(a1 + 40);
  if (result >= 3)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for BorderedButtonColorSpec(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = a2 + 24;
  v4 = *(_QWORD *)(a2 + 24);
  swift_retain();
  if (v4 < 8)
    goto LABEL_2;
  if (v4 != 8)
  {
    swift_retain();
LABEL_2:
    *(_QWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    goto LABEL_3;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)v5;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v5 + 8);
LABEL_3:
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v6 = *(_QWORD *)(a2 + 40);
  if (v6 >= 3)
    v6 = swift_retain();
  *(_QWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for BorderedButtonColorSpec(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = (unint64_t *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = (unint64_t *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 24);
  if (v5 == 8)
  {
    if (v6 < 8)
    {
LABEL_3:
      *(_QWORD *)(a1 + 24) = v6;
LABEL_4:
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      goto LABEL_7;
    }
    if (v6 != 8)
    {
      v6 = swift_retain();
      goto LABEL_3;
    }
    v13 = *v7;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *v4 = v13;
  }
  else
  {
    if (v6 != 8)
    {
      if (v5 >= 8)
      {
        if (v6 >= 8)
        {
          *v4 = v6;
          swift_retain();
          swift_release();
        }
        else
        {
          swift_release();
          *v4 = *v7;
        }
      }
      else
      {
        *v4 = v6;
        if (v6 >= 8)
          swift_retain();
      }
      goto LABEL_4;
    }
    outlined destroy of Material(a1 + 24);
    v8 = *(_DWORD *)(a2 + 32);
    *v4 = *v7;
    *(_DWORD *)(a1 + 32) = v8;
  }
LABEL_7:
  v9 = (unint64_t *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v11 = *(_QWORD *)(a2 + 40);
  if (v10 >= 3)
  {
    if (v11 >= 3)
    {
      *v9 = v11;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of Color(a1 + 40);
      *v9 = *(_QWORD *)(a2 + 40);
    }
  }
  else
  {
    *v9 = v11;
    if (v11 >= 3)
      swift_retain();
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t outlined destroy of Material(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE7890] - 8) + 8))();
  return a1;
}

uint64_t outlined destroy of Color(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE7170] - 8) + 8))();
  return a1;
}

uint64_t assignWithTake for BorderedButtonColorSpec(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  v6 = (unint64_t *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  if (v5 == 8)
    goto LABEL_4;
  if (v4 == 8)
  {
    outlined destroy of Material(a1 + 24);
LABEL_4:
    *v6 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    goto LABEL_11;
  }
  if (v5 >= 8)
  {
    if (v4 >= 8)
    {
      *v6 = v4;
      swift_release();
      goto LABEL_10;
    }
    swift_release();
  }
  *v6 = v4;
LABEL_10:
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
LABEL_11:
  v8 = (unint64_t *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v9 = *(_QWORD *)(a2 + 40);
  if (v7 >= 3)
  {
    if (v9 >= 3)
    {
      *v8 = v9;
      swift_release();
      goto LABEL_16;
    }
    outlined destroy of Color(a1 + 40);
  }
  *v8 = v9;
LABEL_16:
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for BorderedButtonColorSpec()
{
  return &type metadata for BorderedButtonColorSpec;
}

uint64_t *initializeBufferWithCopyOfBuffer for BorderedButtonColorSpec.LabelStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_retain();
  *a1 = v3;
  return a1;
}

unint64_t destroy for BorderedButtonColorSpec.LabelStyle(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_release();
  return result;
}

unint64_t *assignWithCopy for BorderedButtonColorSpec.LabelStyle(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_retain();
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *assignWithTake for BorderedButtonColorSpec.LabelStyle(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BorderedButtonColorSpec.LabelStyle(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BorderedButtonColorSpec.LabelStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

_QWORD *destructiveInjectEnumTag for BorderedButtonColorSpec.LabelStyle(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for BorderedButtonColorSpec.LabelStyle()
{
  return &type metadata for BorderedButtonColorSpec.LabelStyle;
}

uint64_t destroy for BorderedButtonSpec(uint64_t a1)
{
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined consume of Environment<KeyboardShortcut?>.Content(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(_BYTE *)(a1 + 41));
  return outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
}

uint64_t initializeWithCopy for BorderedButtonSpec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<ControlSize>.Content(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = *((_BYTE *)a2 + 41);
  v10 = *((_BYTE *)a2 + 40);
  outlined copy of Environment<KeyboardShortcut?>.Content(v6, v7, v8, v10, v9);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 41) = v9;
  v11 = a2[6];
  v12 = *((unsigned __int8 *)a2 + 56);
  outlined copy of Environment<ControlSize>.Content(v11, v12);
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = v12;
  return a1;
}

uint64_t *assignWithCopy for BorderedButtonSpec(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<ControlSize>.Content(*a2, v5);
  v6 = *a1;
  v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  outlined consume of Environment<ControlSize>.Content(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = *((_BYTE *)a2 + 41);
  v12 = *((_BYTE *)a2 + 40);
  outlined copy of Environment<KeyboardShortcut?>.Content(v8, v9, v10, v12, v11);
  v13 = a1[2];
  v14 = a1[3];
  v15 = a1[4];
  v16 = *((_BYTE *)a1 + 41);
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  v17 = *((unsigned __int8 *)a1 + 40);
  *((_BYTE *)a1 + 40) = v12;
  *((_BYTE *)a1 + 41) = v11;
  outlined consume of Environment<KeyboardShortcut?>.Content(v13, v14, v15, v17, v16);
  v18 = a2[6];
  v19 = *((unsigned __int8 *)a2 + 56);
  outlined copy of Environment<ControlSize>.Content(v18, v19);
  v20 = a1[6];
  v21 = *((unsigned __int8 *)a1 + 56);
  a1[6] = v18;
  *((_BYTE *)a1 + 56) = v19;
  outlined consume of Environment<ControlSize>.Content(v20, v21);
  return a1;
}

uint64_t *assignWithTake for BorderedButtonSpec(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  outlined consume of Environment<ControlSize>.Content(v6, v7);
  v8 = a2[4];
  v9 = *((_BYTE *)a2 + 40);
  v10 = *((_BYTE *)a2 + 41);
  v11 = a1[2];
  v12 = a1[3];
  v13 = a1[4];
  v14 = *((_BYTE *)a1 + 41);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = v8;
  v15 = *((unsigned __int8 *)a1 + 40);
  *((_BYTE *)a1 + 40) = v9;
  *((_BYTE *)a1 + 41) = v10;
  outlined consume of Environment<KeyboardShortcut?>.Content(v11, v12, v13, v15, v14);
  v16 = *((_BYTE *)a2 + 56);
  v17 = a1[6];
  v18 = *((unsigned __int8 *)a1 + 56);
  a1[6] = a2[6];
  *((_BYTE *)a1 + 56) = v16;
  outlined consume of Environment<ControlSize>.Content(v17, v18);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AccessibilityLabeledContentPresentation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1874B63C8 + 4 * byte_187C37CE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1874B63FC + 4 * byte_187C37CE0[v4]))();
}

uint64_t sub_1874B63FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874B6404(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1874B640CLL);
  return result;
}

uint64_t sub_1874B6418(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1874B6420);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1874B6424(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874B642C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityLabeledContentPresentation()
{
  return &type metadata for AccessibilityLabeledContentPresentation;
}

ValueMetadata *type metadata accessor for AccessibilityCombinedLabeledContent()
{
  return &type metadata for AccessibilityCombinedLabeledContent;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance AccessibilityCombinedLabeledContent()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance AccessibilityCombinedLabeledContent()
{
  lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent();
  return PropertyList.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabeledContentPresentation and conformance AccessibilityLabeledContentPresentation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityLabeledContentPresentation and conformance AccessibilityLabeledContentPresentation;
  if (!lazy protocol witness table cache variable for type AccessibilityLabeledContentPresentation and conformance AccessibilityLabeledContentPresentation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabeledContentPresentation, &type metadata for AccessibilityLabeledContentPresentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabeledContentPresentation and conformance AccessibilityLabeledContentPresentation);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in AccessibilityCombinedLabeledContent()
{
  return &protocol witness table for AccessibilityCombinedLabeledContent;
}

uint64_t type metadata completion function for AccessibilityLabeledContentContentModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityLabeledContentContentModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFD)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 >= 0xFD)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v15 = *(unsigned __int8 *)(v7 + a1);
      v16 = v15 >= 2;
      v17 = v15 - 2;
      if (!v16)
        v17 = -1;
      if (v17 + 1 >= 2)
        return v17;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v7 == -1)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874B67B0 + 4 * byte_187C37CEA[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for AccessibilityLabeledContentContentModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFDu)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 1);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if (v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t type metadata accessor for AccessibilityLabeledContentContentModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityLabeledContentContentModifier);
}

uint64_t storeEnumTagSinglePayload for AccessibilityLabeledContentLabelModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1874B6A44 + 4 * byte_187C37CFD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1874B6A78 + 4 * byte_187C37CF8[v4]))();
}

uint64_t sub_1874B6A78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874B6A80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1874B6A88);
  return result;
}

uint64_t sub_1874B6A94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1874B6A9CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1874B6AA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874B6AA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityLabeledContentLabelModifier()
{
  return &type metadata for AccessibilityLabeledContentLabelModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityLabeledContentLabelModifier()
{
  return &protocol witness table for AccessibilityLabeledContentLabelModifier;
}

uint64_t static AccessibilityLabeledContentLabelModifier._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  _OWORD v20[5];
  int v21;
  _OWORD v22[5];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v8 = *(_OWORD *)(a2 + 48);
  v22[2] = *(_OWORD *)(a2 + 32);
  v22[3] = v8;
  v22[4] = *(_OWORD *)(a2 + 64);
  v23 = *(_DWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 16);
  v22[0] = *(_OWORD *)a2;
  v22[1] = v9;
  *(_QWORD *)&v20[0] = v8;
  DWORD2(v20[0]) = DWORD2(v8);
  v10 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v10 & 1) != 0)
  {
    LODWORD(v20[0]) = specialized static AccessibilityLabeledContentModifier._makePresentation(modifier:inputs:)(v7, (uint64_t)v22);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type AccessibilityLabeledContentLabelModifier.Attachment and conformance AccessibilityLabeledContentLabelModifier.Attachment();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v20[0], (uint64_t)v22, a3, a4);
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 48);
    v20[2] = *(_OWORD *)(a2 + 32);
    v20[3] = v18;
    v20[4] = *(_OWORD *)(a2 + 64);
    v21 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    v20[0] = *(_OWORD *)a2;
    v20[1] = v19;
    return ((uint64_t (*)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3)(v10, v20, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t specialized static AccessibilityLabeledContentModifier._makePresentation(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  char v4;

  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent();
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v4 == 1)
    return _ViewInputs.intern<A>(_:id:)();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityLabeledContentLabelModifier>, (uint64_t)&type metadata for AccessibilityLabeledContentLabelModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedPresentation and conformance ResolvedPresentation();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t static AccessibilityLabeledContentModifier._makePresentation(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7;

  lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v7 == 1)
    return _ViewInputs.intern<A>(_:id:)();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  closure #1 in static AccessibilityLabeledContentModifier._makePresentation(modifier:inputs:)(1, a3, a4);
  AGGraphCreateOffsetAttribute2();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedPresentation and conformance ResolvedPresentation();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t AccessibilityLabeledContentLabelModifier.Attachment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)AGGraphGetValue() == 1)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v12 = Dictionary.init(minimumCapacity:)();
    specialized AccessibilityProperties.subscript.setter(0x400000004uLL);
    LOBYTE(v11) = 19;
    AccessibilityNullableOptionSet<>.init(adding:)();
    specialized AccessibilityProperties.subscript.setter(v7, v8);
    v2 = v12;
  }
  else
  {
    AccessibilityNullableOptionSet<>.init(adding:)();
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v11 = Dictionary.init(minimumCapacity:)();
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>(0);
    v9 = v3;
    v10 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>();
    v7 = v12;
    v8 = v13;
    specialized Dictionary.subscript.setter((uint64_t)&v7, MEMORY[0x1E0CE58B8]);
    v2 = v11;
  }
  v11 = v2;
  AccessibilityAttachment.init(properties:)();
  v4 = v7;
  v5 = v8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v5;
  *a1 = result;
  a1[1] = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityLabeledContentLabelModifier.Attachment@<X0>(uint64_t *a1@<X8>)
{
  return AccessibilityLabeledContentLabelModifier.Attachment.value.getter(a1);
}

unint64_t instantiation function for generic protocol witness table for AccessibilityLabeledContentLabelModifier(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier();
  result = lazy protocol witness table accessor for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabeledContentLabelModifier, &type metadata for AccessibilityLabeledContentLabelModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabeledContentLabelModifier, &type metadata for AccessibilityLabeledContentLabelModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityLabeledContentContentModifier<A>()
{
  return &protocol witness table for AccessibilityLabeledContentContentModifier<A>;
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityLabeledContentLabelModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static AccessibilityLabeledContentContentModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  double *v33;
  void (*v34)(uint64_t *__return_ptr);
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  __int128 v38;
  _BYTE v39[32];
  _BYTE v40[32];
  int v41;
  _QWORD v42[2];
  __int128 v43;
  _BYTE v44[32];
  _BYTE v45[32];
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;

  v10 = *a1;
  v11 = a2[3];
  v49 = a2[2];
  v50 = v11;
  v51 = a2[4];
  v52 = *((_DWORD *)a2 + 20);
  v12 = a2[1];
  v47 = *a2;
  v48 = v12;
  *(_QWORD *)&v43 = v11;
  DWORD2(v43) = DWORD2(v11);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v33 = a6;
    v34 = (void (*)(uint64_t *__return_ptr))a3;
    *(_OWORD *)&v44[16] = v49;
    *(_OWORD *)v45 = v50;
    *(_OWORD *)&v45[16] = v51;
    v46 = v52;
    v43 = v47;
    *(_OWORD *)v44 = v48;
    outlined retain of _ViewInputs((uint64_t)&v47);
    PreferenceKeys.remove<A>(_:)();
    v13 = MEMORY[0x1E0CE4070];
    type metadata accessor for _AnyPreferenceKey<AccessibilityAttachment.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))MEMORY[0x1E0CE4070]);
    lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))v13, MEMORY[0x1E0CE4078]);
    PreferenceKeys.add(_:)();
    v32 = v10;
    LODWORD(v38) = v10;
    v15 = type metadata accessor for AccessibilityLabeledContentContentModifier(255, a4, a5, v14);
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64))
      closure #1 in static AccessibilityLabeledContentContentModifier._makeView(modifier:inputs:body:)(1, a4, a5, v16);
    v18 = type metadata accessor for ModifiedContent();
    v19 = type metadata accessor for ModifiedContent();
    type metadata accessor for _AnyPreferenceKey<AccessibilityAttachment.Key>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))MEMORY[0x1E0CE63C0]);
    v20 = type metadata accessor for ModifiedContent();
    AGGraphCreateOffsetAttribute2();
    v22 = type metadata accessor for AccessibilityLabeledContentContentModifier.LabelChild(0, a4, a5, v21);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabeledContentContentModifier<A>.LabelChild, v22);
    _GraphValue.init<A>(_:)();
    DWORD2(v38) = DWORD2(v43);
    *(_QWORD *)v39 = *(_QWORD *)v44;
    *(_OWORD *)&v39[8] = *(_OWORD *)&v44[8];
    *(_QWORD *)&v39[24] = *(_QWORD *)&v44[24];
    *(_QWORD *)v40 = *(_QWORD *)v45;
    *(_OWORD *)&v40[8] = *(_OWORD *)&v45[8];
    *(_QWORD *)&v40[24] = *(_QWORD *)&v45[24];
    v41 = v46;
    v37[0] = a5;
    v37[1] = &protocol witness table for DetachedGeometryModifier;
    *(_QWORD *)&v38 = v43;
    v23 = MEMORY[0x1E0CE2E70];
    v36[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v18, v37);
    v36[1] = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
    v35[0] = MEMORY[0x18D75FFDC](v23, v19, v36);
    v35[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))MEMORY[0x1E0CE63C0], MEMORY[0x1E0CE63D0]);
    MEMORY[0x18D75FFDC](v23, v20, v35);
    static View.makeDebuggableView(view:inputs:)();
    v24 = v42[0];
    v25 = v42[1];
    LODWORD(v42[0]) = v32;
    *(_OWORD *)&v39[16] = v49;
    *(_OWORD *)v40 = v50;
    *(_OWORD *)&v40[16] = v51;
    v41 = v52;
    v38 = v47;
    *(_OWORD *)v39 = v48;
    v26 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabeledContentContentModifier<A>, v15);
    v27 = static AccessibilityLabeledContentModifier._makePresentation(modifier:inputs:)((uint64_t)v42, (uint64_t)&v38, v15, v26);
    *(_QWORD *)&v38 = v24;
    *((_QWORD *)&v38 + 1) = v25;
    v28 = _ViewOutputs.subscript.getter();
    swift_bridgeObjectRelease();
    v30 = *MEMORY[0x1E0CFED28];
    if ((v28 & 0x100000000) == 0)
      v30 = v28;
    *(_QWORD *)&v38 = __PAIR64__(v27, v30);
    v31 = type metadata accessor for AccessibilityLabeledContentContentModifier.Attachment(0, a4, a5, v29);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabeledContentContentModifier<A>.Attachment, v31);
    _GraphValue.init<A>(_:)();
    specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v42[0], (uint64_t)&v47, v34, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    *(_OWORD *)&v44[16] = v49;
    *(_OWORD *)v45 = v50;
    *(_OWORD *)&v45[16] = v51;
    v46 = v52;
    v43 = v47;
    *(_OWORD *)v44 = v48;
    return a3();
  }
}

uint64_t closure #1 in static AccessibilityLabeledContentContentModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for AccessibilityLabeledContentContentModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

void AccessibilityLabeledContentContentModifier.LabelChild.value.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Value;
  _DWORD v12[2];
  uint64_t v13;

  v12[1] = a1;
  v13 = a3;
  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v9, v10);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, Value, a2);
  View.accessibilityDetachedGeometry()();
}

void sub_1874B7934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v3);
  *(_QWORD *)(v5 - 96) = v1;
  *(_QWORD *)(v5 - 88) = &protocol witness table for DetachedGeometryModifier;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v5 - 96);
  View.accessibilityRepresentationStyle()();
}

uint64_t sub_1874B7980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v6, v4);
  v9 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  *(_QWORD *)(v8 - 112) = v5;
  *(_QWORD *)(v8 - 104) = v9;
  MEMORY[0x18D75FFDC](v2, v1, v8 - 112);
  View.accessibilityDeferredAttachmentTransform(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v1);
}

uint64_t closure #1 in AccessibilityLabeledContentContentModifier.LabelChild.value.getter(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18[3];
  uint64_t v19;
  char v20;

  v2 = *(_QWORD *)a1;
  if (!*(_BYTE *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
LABEL_5:
    v6 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v6, (uint64_t)&v19);
    swift_bridgeObjectRelease_n();
    if (!v19)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    v3 = *(void **)(a1 + 8);
    v4 = swift_bridgeObjectRetain();
    v5 = specialized Sequence.compactMap<A>(_:)(v4);
    static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v5, 1, v18);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v2, v3, 1);
    goto LABEL_5;
  }
LABEL_6:
  v20 = 0;
LABEL_7:
  AccessibilityAttachment.init()();
  v7 = v20;
  v8 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v8, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(void **)(a1 + 8);
  if (!*(_BYTE *)(a1 + 16))
  {
    v12 = swift_bridgeObjectRetain();
    outlined consume of AccessibilityAttachment.Tree(v12, v10, 0);
    goto LABEL_11;
  }
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    v11 = specialized Sequence.compactMap<A>(_:)(*(_QWORD *)a1);
    static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v11, 1, &v17);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v9, v10, 1);
LABEL_11:
    v13 = swift_bridgeObjectRetain();
    v14 = specialized AccessibilityProperties.subscript.getter(v13);
    swift_bridgeObjectRelease_n();
    specialized AccessibilityProperties.subscript.setter(v14);
  }
  v15 = v18[1];
  *(_QWORD *)a1 = v18[0];
  *(_QWORD *)(a1 + 8) = v15;
  *(_BYTE *)(a1 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AccessibilityLabeledContentContentModifier<A>.LabelChild@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _AnyPreferenceKey<AccessibilityAttachment.Key>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))MEMORY[0x1E0CE63C0]);
  v2 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

void protocol witness for Rule.value.getter in conformance AccessibilityLabeledContentContentModifier<A>.LabelChild(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;

  AccessibilityLabeledContentContentModifier.LabelChild.value.getter(*v2, *(_QWORD *)(a1 + 16), a2);
}

void AccessibilityLabeledContentContentModifier.Attachment.updateValue()()
{
  _DWORD *v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)AGGraphGetValue() == 1)
  {
    if (*MEMORY[0x1E0CFED28] == *v0)
    {
      v4 = 0;
      v5 = 0;
      v6 = 2;
    }
    else
    {
      Value = AGGraphGetValue();
      v3 = v2;
      v4 = *(_QWORD *)Value;
      v5 = *(void **)(Value + 8);
      v6 = *(unsigned __int8 *)(Value + 16);
      outlined copy of AccessibilityAttachment.Tree(*(_QWORD *)Value, v5, v6);
      if ((v3 & 1) != 0)
        goto LABEL_9;
    }
    if (AGGraphGetOutputValue())
    {
      outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
      return;
    }
LABEL_9:
    if (v6)
    {
      if (v6 != 1)
        goto LABEL_15;
      v9 = swift_bridgeObjectRetain();
      v10 = specialized Sequence.compactMap<A>(_:)(v9);
      static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v10, 1, &v28);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityAttachment.Tree(v4, v5, 1);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    v11 = swift_bridgeObjectRetain();
    v12 = specialized AccessibilityProperties.subscript.getter(v11);
    swift_bridgeObjectRelease_n();
    v13 = *(_QWORD *)(v12 + 16);
    swift_bridgeObjectRelease();
    if (v13)
    {
      v14 = 0;
      goto LABEL_16;
    }
LABEL_15:
    v14 = 1;
LABEL_16:
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    Dictionary.init(minimumCapacity:)();
    if (v6)
    {
      if (v6 != 1)
      {
        v18 = 0;
        v19 = 0;
LABEL_22:
        specialized AccessibilityProperties.subscript.setter(v18, v19);
        if ((v14 & 1) != 0)
        {
LABEL_30:
          AccessibilityAttachment.init(properties:)();
          v25 = v28;
          v26 = v29;
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
          v27 = swift_allocObject();
          *(_QWORD *)(v27 + 16) = v25;
          *(_QWORD *)(v27 + 24) = v26;
          v28 = v27;
          v29 = 0;
          AGGraphSetOutputValue();
          outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
          goto LABEL_31;
        }
        if (v6)
        {
          if (v6 != 1)
          {
            v24 = (char *)MEMORY[0x1E0DEE9D8];
            goto LABEL_29;
          }
          v20 = swift_bridgeObjectRetain();
          v21 = specialized Sequence.compactMap<A>(_:)(v20);
          static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v21, 1, &v28);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree(v4, v5, 1);
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        v22 = swift_bridgeObjectRetain();
        v23 = specialized AccessibilityProperties.subscript.getter(v22);
        swift_bridgeObjectRelease_n();
        v24 = specialized Sequence.compactMap<A>(_:)(v23, 0, 0, 0, 0);
        swift_bridgeObjectRelease();
LABEL_29:
        specialized AccessibilityProperties.subscript.setter((uint64_t)v24);
        goto LABEL_30;
      }
      v15 = swift_bridgeObjectRetain();
      v16 = specialized Sequence.compactMap<A>(_:)(v15);
      static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v16, 1, &v28);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityAttachment.Tree(v4, v5, 1);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    v17 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v17, (uint64_t)&v28);
    swift_bridgeObjectRelease_n();
    v18 = v28;
    v19 = v29;
    goto LABEL_22;
  }
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  Dictionary.init(minimumCapacity:)();
  AccessibilityAttachment.init(properties:)();
  v7 = v29;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v28;
  *(_QWORD *)(v8 + 24) = v7;
  v28 = v8;
  v29 = 0;
  AGGraphSetOutputValue();
LABEL_31:
  swift_release();
}

uint64_t (*protocol witness for AccessibilityLabeledContentModifier.presentation.modify in conformance AccessibilityLabeledContentContentModifier<A>())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t instantiation function for generic protocol witness table for AccessibilityLabeledContentContentModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabeledContentContentModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabeledContentContentModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityLabeledContentContentModifier<A>@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static AccessibilityLabeledContentContentModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityLabeledContentContentModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabeledContentContentModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t closure #1 in static AccessibilityLabeledContentModifier._makePresentation(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(_BYTE *, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];
  _BYTE v14[32];

  v4 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(a3 + 40))(v14);
  v6 = v5;
  v13[2] = a2;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityLabeledContentPresentation?, (uint64_t)&type metadata for AccessibilityLabeledContentPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v8 = v7;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_12, (uint64_t)v13, v8, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  v11 = v13[5];
  v4(v14, 0);
  return v11;
}

_BYTE *protocol witness for Rule.value.getter in conformance ResolvedPresentation@<X0>(_BYTE *a1@<X8>)
{
  _BYTE *result;
  int v3;
  char v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityLabeledContentPresentation?, (uint64_t)&type metadata for AccessibilityLabeledContentPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = (_BYTE *)AGGraphGetValue();
  v3 = *result;
  if (v3 == 2)
  {
    result = (_BYTE *)AGGraphGetValue();
    v4 = *result == 2;
  }
  else
  {
    v4 = v3 & 1;
  }
  *a1 = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabeledContentLabelModifier.Attachment and conformance AccessibilityLabeledContentLabelModifier.Attachment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier.Attachment and conformance AccessibilityLabeledContentLabelModifier.Attachment;
  if (!lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier.Attachment and conformance AccessibilityLabeledContentLabelModifier.Attachment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabeledContentLabelModifier.Attachment, &unk_1E1B08A78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier.Attachment and conformance AccessibilityLabeledContentLabelModifier.Attachment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>(255);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6310], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedPresentation and conformance ResolvedPresentation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedPresentation and conformance ResolvedPresentation;
  if (!lazy protocol witness table cache variable for type ResolvedPresentation and conformance ResolvedPresentation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedPresentation, &unk_1E1AD4158);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedPresentation and conformance ResolvedPresentation);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *, _UNKNOWN **), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _AnyPreferenceKey<AccessibilityAttachment.Key>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _AnyPreferenceKey<AccessibilityAttachment.Key>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *, _UNKNOWN **))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for AccessibilityAttachment.Key, &protocol witness table for AccessibilityAttachment.Key);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t type metadata accessor for AccessibilityLabeledContentContentModifier.LabelChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityLabeledContentContentModifier.LabelChild);
}

uint64_t type metadata accessor for AccessibilityLabeledContentContentModifier.Attachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityLabeledContentContentModifier.Attachment);
}

void *type metadata accessor for ResolvedPresentation()
{
  return &unk_1E1AD4158;
}

void *type metadata accessor for AccessibilityLabeledContentLabelModifier.Attachment()
{
  return &unk_1E1B08A78;
}

void base witness table accessor for _AttributeBody in AccessibilityLabeledContentContentModifier<A>.Attachment()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in AccessibilityLabeledContentContentModifier<A>.LabelChild()
{
  JUMPOUT(0x18D75FFDCLL);
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(__int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  _BYTE v42[25];
  char *v43;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return (char *)MEMORY[0x1E0DEE9D8];
  v9 = (_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v33 = a4;
  v34 = a5;
  v32 = a3;
  do
  {
    v43 = v10;
    *(_QWORD *)&v39 = a2;
    *((_QWORD *)&v39 + 1) = a3;
    *(_QWORD *)&v40[0] = a4;
    *((_QWORD *)&v40[0] + 1) = a5;
    v12 = v9[3];
    v11 = v9[4];
    __swift_project_boxed_opaque_existential_1(v9, v12);
    v13 = *(uint64_t (**)(__int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v11 + 80);
    v14 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
    if ((v13(&v39, &type metadata for AccessibilityVoidAction, v14, v12, v11) & 1) != 0)
    {
      v15 = v9[3];
      v16 = v9[4];
      __swift_project_boxed_opaque_existential_1(v9, v15);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v16 + 24))(&v39, v15, v16);
      v17 = v39;
      v19 = *((_QWORD *)&v40[0] + 1);
      v18 = *(_QWORD *)&v40[0];
      v20 = v9[3];
      v21 = v9[4];
      __swift_project_boxed_opaque_existential_1(v9, v20);
      v36 = v17;
      v37 = v18;
      v38 = v19;
      v22 = *(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t))(v21 + 64);
      v23 = v20;
      v24 = v21;
      a3 = v32;
      a4 = v33;
      v22(&v41, &v36, v23, v24);
      v25 = v19;
      a5 = v34;
      outlined consume of AccessibilityActionCategory?(v17, *((uint64_t *)&v17 + 1), v18, v25);
      if (!*(_QWORD *)&v42[8])
      {
        outlined destroy of AnyAccessibilityAction?((uint64_t)&v41);
        v10 = v43;
        goto LABEL_3;
      }
    }
    else
    {
      outlined init with copy of AnyAccessibilityAction((uint64_t)v9, (uint64_t)&v41);
    }
    v39 = v41;
    v40[0] = *(_OWORD *)v42;
    *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)&v42[9];
    v10 = v43;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v27 = *((_QWORD *)v10 + 2);
    v26 = *((_QWORD *)v10 + 3);
    if (v27 >= v26 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v27 + 1;
    v28 = &v10[48 * v27];
    v29 = v39;
    v30 = v40[0];
    *(_OWORD *)(v28 + 57) = *(_OWORD *)((char *)v40 + 9);
    *((_OWORD *)v28 + 2) = v29;
    *((_OWORD *)v28 + 3) = v30;
LABEL_3:
    v9 += 6;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t outlined consume of AccessibilityActionCategory?(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  if (a4 != 2)
    return outlined consume of AccessibilityActionCategory.Category(result, a2, a3, a4);
  return result;
}

uint64_t ViewTraitCollection.insertInteraction(for:)(char a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;

  v2 = 1;
  result = ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v5 & 1) != 0)
    return v2;
  if (!__OFADD__(v4, a1 & 1))
  {
    ViewTraitCollection.value<A>(for:defaultValue:)();
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t DynamicViewContent.dropDestination<A>(for:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  uint64_t v14;
  _QWORD v16[3];

  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  v13[5] = a7;
  v13[6] = a2;
  v13[7] = a3;
  swift_retain();
  v16[0] = MEMORY[0x18D754DF8](a5, a7);
  v16[1] = partial apply for closure #1 in DynamicViewContent.dropDestination<A>(for:action:);
  v16[2] = v13;
  type metadata accessor for _TraitWritingModifier<OnInsertTraitKey>();
  MEMORY[0x18D75B4AC](v16, a4, v14, *(_QWORD *)(a6 + 8));
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in DynamicViewContent.dropDestination<A>(for:action:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  dispatch_group_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  _QWORD *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t (*v46)(uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD aBlock[6];
  uint64_t v60;

  v58 = a7;
  v56 = a5;
  v52 = a4;
  v50 = a3;
  v12 = type metadata accessor for DispatchWorkItemFlags();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS();
  v54 = *(_QWORD *)(v17 - 8);
  v55 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v53 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = dispatch_group_create();
  v60 = static Array._allocateUninitialized(_:)();
  type metadata accessor for Array();
  AtomicBox.init(wrappedValue:)();
  v21 = aBlock[0];
  v57 = a2;
  if (!(a2 >> 62))
  {
    v22 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    v51 = a1;
    if (v22)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    type metadata accessor for OS_dispatch_queue();
    v40 = (void *)static OS_dispatch_queue.main.getter();
    v41 = (_QWORD *)swift_allocObject();
    v41[2] = v56;
    v41[3] = a6;
    v41[4] = v58;
    v41[5] = a8;
    v42 = v52;
    v41[6] = v50;
    v41[7] = v42;
    v43 = v51;
    v41[8] = v21;
    v41[9] = v43;
    aBlock[4] = partial apply for closure #2 in closure #1 in DynamicViewContent.dropDestination<A>(for:action:);
    aBlock[5] = v41;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_33;
    v44 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    v45 = v53;
    static DispatchQoS.unspecified.getter();
    v60 = MEMORY[0x1E0DEE9D8];
    v46 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], v46, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v44);
    swift_release();

    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v55);
    return swift_release();
  }
  swift_bridgeObjectRetain();
  a2 = v57;
  result = _CocoaArrayWrapper.endIndex.getter();
  v22 = result;
  v51 = a1;
  if (!result)
    goto LABEL_12;
LABEL_3:
  if (v22 >= 1)
  {
    v24 = v21;
    v25 = v22;
    v47 = v16;
    v48 = v13;
    v49 = v12;
    if ((a2 & 0xC000000000000001) != 0)
    {
      v26 = 0;
      v27 = v56;
      v28 = v25;
      v21 = v24;
      do
      {
        MEMORY[0x18D75E3BC](v26++, a2);
        dispatch_group_enter(v20);
        v29 = (_QWORD *)swift_allocObject();
        v29[2] = v27;
        v29[3] = a6;
        v29[4] = v58;
        v29[5] = a8;
        v29[6] = v20;
        v29[7] = v21;
        swift_retain();
        v30 = v20;
        v31 = (void *)NSItemProvider.loadTransferable<A>(type:completionHandler:)();
        a2 = v57;
        swift_unknownObjectRelease();

        swift_release();
      }
      while (v28 != v26);
    }
    else
    {
      v32 = 0;
      v33 = v56;
      v34 = v25;
      v21 = v24;
      do
      {
        v35 = *(void **)(a2 + 8 * v32++ + 32);
        v36 = v35;
        dispatch_group_enter(v20);
        v37 = (_QWORD *)swift_allocObject();
        v37[2] = v33;
        v37[3] = a6;
        v37[4] = v58;
        v37[5] = a8;
        v37[6] = v20;
        v37[7] = v21;
        swift_retain();
        v38 = v20;
        v39 = (void *)NSItemProvider.loadTransferable<A>(type:completionHandler:)();

        a2 = v57;
        swift_release();
      }
      while (v34 != v32);
    }
    swift_bridgeObjectRelease();
    v13 = v48;
    v12 = v49;
    v16 = v47;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1874B8C74()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DynamicViewContent.dropDestination<A>(for:action:)(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;

  return closure #1 in DynamicViewContent.dropDestination<A>(for:action:)(a1, a2, v2[6], v2[7], v2[2], v2[3], v2[4], v2[5]);
}

void type metadata accessor for _TraitWritingModifier<OnInsertTraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<OnInsertTraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<OnInsertTraitKey>);
  }
}

uint64_t closure #2 in closure #1 in DynamicViewContent.dropDestination<A>(for:action:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  type metadata accessor for Array();
  type metadata accessor for AtomicBox();
  AtomicBox.wrappedValue.getter();
  a1(v7, a4);
  return swift_bridgeObjectRelease();
}

void DynamicViewContent.dropDestination<A>(for:action:isTargeted:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t DynamicViewContent.onInsert(of:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD v9[3];

  v9[0] = a1;
  v9[1] = a2;
  v9[2] = a3;
  type metadata accessor for _TraitWritingModifier<OnInsertTraitKey>();
  return MEMORY[0x18D75B4AC](v9, a4, v7, *(_QWORD *)(a5 + 8));
}

uint64_t DynamicViewContent.onInsert(of:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD v39[3];

  v37 = a2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v32 - v13;
  v15 = type metadata accessor for UTType();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v38 = (char *)v32 - v22;
  v23 = *(_QWORD *)(a1 + 16);
  if (v23)
  {
    v33 = a3;
    v34 = a6;
    v35 = a5;
    v36 = a4;
    swift_bridgeObjectRetain();
    v32[1] = a1;
    v24 = a1 + 40;
    v25 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
      {
        outlined destroy of UTType?((uint64_t)v14);
      }
      else
      {
        v26 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
        v27 = v38;
        v26(v38, v14, v15);
        v26(v19, v27, v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v25 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
        v29 = *((_QWORD *)v25 + 2);
        v28 = *((_QWORD *)v25 + 3);
        if (v29 >= v28 >> 1)
          v25 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1, v25);
        *((_QWORD *)v25 + 2) = v29 + 1;
        v26(&v25[((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v29], v19, v15);
      }
      v24 += 16;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
    a4 = v36;
    a5 = v35;
    a3 = v33;
  }
  else
  {
    v25 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v39[0] = v25;
  v39[1] = v37;
  v39[2] = a3;
  type metadata accessor for _TraitWritingModifier<OnInsertTraitKey>();
  MEMORY[0x18D75B4AC](v39, a4, v30, *(_QWORD *)(a5 + 8));
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall OnInsertInteraction.insert(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  Swift::OpaquePointer *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  v5 = v4;
  if (v1)
  {
    v6 = v3;
    v7 = v2;
    v8 = v1;
    v10 = (Swift::OpaquePointer *)swift_allocObject();
    v10[2]._rawValue = (void *)v8;
    v10[3]._rawValue = v7;
    v10[4]._rawValue = v6;
    v10[5]._rawValue = (void *)v8;
    v10[6]._rawValue = v7;
    v10[7]._rawValue = v6;
    v10[8]._rawValue = v5;
    v10[9]._rawValue = a1._rawValue;
    outlined copy of PasteHelper?(v8);
    outlined copy of PasteHelper?(v8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(76);
    v11._countAndFlagsBits = 0xD000000000000027;
    v11._object = (void *)0x8000000187BE1D20;
    String.append(_:)(v11);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._object = (void *)0x8000000187BE1D50;
    v13._countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v13);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1874B91F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _TraitWritingModifier<OnInsertTraitKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _TraitWritingModifier<OnInsertTraitKey> and conformance _TraitWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _TraitWritingModifier<OnInsertTraitKey>, MEMORY[0x1E0CE52E0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E58], v2, v4);
}

uint64_t sub_1874B9278()
{
  return MEMORY[0x1E0CE7C28];
}

uint64_t sub_1874B9284(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<OnInsertTraitKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _TraitWritingModifier<OnInsertTraitKey> and conformance _TraitWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _TraitWritingModifier<OnInsertTraitKey>, MEMORY[0x1E0CE52E0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E58], v2, v4);
}

ValueMetadata *type metadata accessor for OnInsertConfiguration()
{
  return &type metadata for OnInsertConfiguration;
}

ValueMetadata *type metadata accessor for OnInsertTraitKey()
{
  return &type metadata for OnInsertTraitKey;
}

uint64_t sub_1874B9328()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in DynamicViewContent.dropDestination<A>(for:action:)()
{
  uint64_t v0;

  return closure #2 in closure #1 in DynamicViewContent.dropDestination<A>(for:action:)(*(void (**)(uint64_t, uint64_t))(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_1874B936C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnInsertInteraction.insert(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 24))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

ValueMetadata *type metadata accessor for IndexView()
{
  return &type metadata for IndexView;
}

uint64_t associated type witness table accessor for View.Body : View in IndexView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance IndexView(uint64_t a1)
{
  return specialized static StyleableView._viewListCount(inputs:)(*(ValueMetadata **)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for View.body.getter in conformance IndexView@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  outlined init with copy of _VariadicView_Children((uint64_t)(v1 + 3), (uint64_t)(a1 + 3));
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  swift_retain();
  return swift_retain();
}

uint64_t NewDocumentButton.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _WORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a4 = 256;
  type metadata accessor for Button<Text>(0, a1, a2, a3);
  v7 = v6;
  v8 = (_QWORD *)((char *)a4 + *(int *)(v6 + 36));
  *v8 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v8[1] = 0;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  closure #2 in NewDocumentButton.body.getter(v4, (uint64_t)a4 + *(int *)(v7 + 40));
  type metadata accessor for ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier>(0, v9, v10, v11);
  return outlined init with copy of TableColumnList((uint64_t)(v4 + 4), (uint64_t)a4 + *(int *)(v12 + 36));
}

uint64_t closure #2 in NewDocumentButton.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  if (v6)
  {
    v7 = v5 & 1;
    v8 = *a1;
    v9 = v4;
    v10 = v6;
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
    v8 = Text.init(_:tableName:bundle:comment:)();
    v7 = v11 & 1;
  }
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v10;
  return outlined copy of Text?(v3, v4, v5, v6);
}

void type metadata accessor for Button<Text>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for Button<Text>)
  {
    v4 = type metadata accessor for Button(0, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for Button<Text>);
  }
}

void type metadata accessor for ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier>)
  {
    type metadata accessor for Button<Text>(255, a2, a3, a4);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier>);
  }
}

uint64_t NewDocumentButton<>.init(_:contentType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v30 = a1;
  v11 = type metadata accessor for UTType();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v29 - v18;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, v20);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v29 - v23;
  outlined init with copy of UTType?(a5, (uint64_t)&v29 - v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v24, 1, v11) == 1)
  {
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    v25 = v30;
LABEL_5:
    v35 = type metadata accessor for DefaultDocumentCreationStrategy(0);
    v36 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy, type metadata accessor for DefaultDocumentCreationStrategy, (uint64_t)&protocol conformance descriptor for DefaultDocumentCreationStrategy);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v34);
    DefaultDocumentCreationStrategy.init()((unint64_t *)boxed_opaque_existential_1);
    outlined destroy of IntelligenceElement?((uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy?, (void (*)(uint64_t))type metadata accessor for DocumentCreationStrategy);
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v24, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, v11);
  *((_QWORD *)&v32 + 1) = type metadata accessor for ContentTypeDocumentCreationStrategy(0);
  v33 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ContentTypeDocumentCreationStrategy and conformance ContentTypeDocumentCreationStrategy, type metadata accessor for ContentTypeDocumentCreationStrategy, (uint64_t)&protocol conformance descriptor for ContentTypeDocumentCreationStrategy);
  v26 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31);
  ContentTypeDocumentCreationStrategy.init(_:)((uint64_t)v15, (unint64_t *)v26);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  v25 = v30;
  if (!*((_QWORD *)&v32 + 1))
    goto LABEL_5;
  outlined init with take of OptionalBinaryInteger(&v31, (uint64_t)&v34);
LABEL_6:
  outlined destroy of IntelligenceElement?(a5, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  *a6 = v25;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  return outlined init with take of OptionalBinaryInteger(&v34, (uint64_t)(a6 + 4));
}

uint64_t makeStrategy(contentType:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v4 = type metadata accessor for UTType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v21 - v11;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, v13);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v21 - v16;
  outlined init with copy of UTType?(a1, (uint64_t)&v21 - v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v4) == 1)
  {
    v23 = 0;
    v21 = 0u;
    v22 = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v17, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v12, v4);
    *((_QWORD *)&v22 + 1) = type metadata accessor for ContentTypeDocumentCreationStrategy(0);
    v23 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ContentTypeDocumentCreationStrategy and conformance ContentTypeDocumentCreationStrategy, type metadata accessor for ContentTypeDocumentCreationStrategy, (uint64_t)&protocol conformance descriptor for ContentTypeDocumentCreationStrategy);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v21);
    ContentTypeDocumentCreationStrategy.init(_:)((uint64_t)v8, (unint64_t *)boxed_opaque_existential_1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    if (*((_QWORD *)&v22 + 1))
      return outlined init with take of OptionalBinaryInteger(&v21, (uint64_t)a2);
  }
  a2[3] = type metadata accessor for DefaultDocumentCreationStrategy(0);
  a2[4] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy, type metadata accessor for DefaultDocumentCreationStrategy, (uint64_t)&protocol conformance descriptor for DefaultDocumentCreationStrategy);
  v20 = __swift_allocate_boxed_opaque_existential_1(a2);
  DefaultDocumentCreationStrategy.init()((unint64_t *)v20);
  return outlined destroy of IntelligenceElement?((uint64_t)&v21, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy?, (void (*)(uint64_t))type metadata accessor for DocumentCreationStrategy);
}

uint64_t NewDocumentButton<>.init(_:contentType:)@<X0>(uint64_t a1@<X4>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v12[3];

  v4 = Text.init(_:tableName:bundle:comment:)();
  v6 = v5;
  v8 = v7;
  v10 = v9 & 1;
  makeStrategy(contentType:)(a1, (uint64_t *)v12);
  outlined destroy of IntelligenceElement?(a1, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v10;
  a2[3] = v8;
  return outlined init with take of OptionalBinaryInteger(v12, (uint64_t)(a2 + 4));
}

uint64_t NewDocumentButton<>.init<A>(_:contentType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20[2];

  v8 = *(_QWORD *)(a3 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, double))(v8 + 16))((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v11 = Text.init<A>(_:)();
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  makeStrategy(contentType:)(a2, (uint64_t *)v20);
  outlined destroy of IntelligenceElement?(a2, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a3);
  *a4 = v11;
  a4[1] = v13;
  a4[2] = v17;
  a4[3] = v15;
  return outlined init with take of OptionalBinaryInteger(v20, (uint64_t)(a4 + 4));
}

uint64_t NewDocumentButton<>.init<A>(_:for:contentType:prepareDocument:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v25 = a4;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v25 - v19;
  outlined init with copy of UTType?(a5, (uint64_t)&v25 - v19);
  v27 = type metadata accessor for FileDocumentCreationStrategy(0, a9, a10, v21);
  v28 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDocumentCreationStrategy<A>, v27);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v26);
  FileDocumentCreationStrategy.init(contentType:prepareDocument:)((uint64_t)v20, a6, a7, a9, a10, boxed_opaque_existential_1);
  outlined destroy of IntelligenceElement?(a5, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  *a8 = a1;
  a8[1] = a2;
  v23 = v25;
  a8[2] = a3;
  a8[3] = v23;
  return outlined init with take of OptionalBinaryInteger(&v26, (uint64_t)(a8 + 4));
}

{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a4;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v26 - v19;
  v22 = type metadata accessor for ReferenceFileDocumentCreationStrategy(0, a9, a10, v21);
  outlined init with copy of UTType?(a5, (uint64_t)v20);
  swift_retain();
  v23 = ReferenceFileDocumentCreationStrategy.__allocating_init(contentType:prepareDocument:)((uint64_t)v20, a6, a7);
  v28 = v22;
  v29 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReferenceFileDocumentCreationStrategy<A>, v22);
  swift_release();
  *(_QWORD *)&v27 = v23;
  outlined destroy of IntelligenceElement?(a5, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  *a8 = a1;
  a8[1] = a2;
  v24 = v26;
  a8[2] = a3;
  a8[3] = v24;
  return outlined init with take of OptionalBinaryInteger(&v27, (uint64_t)(a8 + 4));
}

uint64_t NewDocumentButton<>.init<A>(_:for:contentType:prepareDocument:)@<X0>(uint64_t a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t *a4@<X8>, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a3;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v23 - v11;
  v13 = Text.init(_:tableName:bundle:comment:)();
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  outlined init with copy of UTType?(a1, (uint64_t)v12);
  v26 = type metadata accessor for FileDocumentCreationStrategy(0, a5, a6, v20);
  v27 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDocumentCreationStrategy<A>, v26);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v25);
  FileDocumentCreationStrategy.init(contentType:prepareDocument:)((uint64_t)v12, a2, v24, a5, a6, boxed_opaque_existential_1);
  outlined destroy of IntelligenceElement?(a1, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  *a4 = v13;
  a4[1] = v15;
  a4[2] = v19;
  a4[3] = v17;
  return outlined init with take of OptionalBinaryInteger(&v25, (uint64_t)(a4 + 4));
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a2;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v23 - v11;
  v13 = Text.init(_:tableName:bundle:comment:)();
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  v20 = type metadata accessor for ReferenceFileDocumentCreationStrategy(0, a5, a6, v16);
  outlined init with copy of UTType?(a1, (uint64_t)v12);
  swift_retain();
  v21 = ReferenceFileDocumentCreationStrategy.__allocating_init(contentType:prepareDocument:)((uint64_t)v12, v24, a3);
  v26 = v20;
  v27 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReferenceFileDocumentCreationStrategy<A>, v20);
  swift_release();
  *(_QWORD *)&v25 = v21;
  outlined destroy of IntelligenceElement?(a1, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  *a4 = v13;
  a4[1] = v15;
  a4[2] = v19;
  a4[3] = v17;
  return outlined init with take of OptionalBinaryInteger(&v25, (uint64_t)(a4 + 4));
}

uint64_t NewDocumentButton<>.init<A, B>(_:for:contentType:prepareDocument:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v36 = a3;
  v37 = a4;
  v35 = a1;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v33 - v16;
  v18 = *(_QWORD *)(a6 - 8);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a6, v21);
  v23 = Text.init<A>(_:)();
  v25 = v24;
  v34 = v26;
  v28 = v27 & 1;
  outlined init with copy of UTType?(a2, (uint64_t)v17);
  v39 = type metadata accessor for FileDocumentCreationStrategy(0, a5, a7, v29);
  v40 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDocumentCreationStrategy<A>, v39);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v38);
  FileDocumentCreationStrategy.init(contentType:prepareDocument:)((uint64_t)v17, v36, v37, a5, a7, boxed_opaque_existential_1);
  outlined destroy of IntelligenceElement?(a2, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v35, a6);
  *a8 = v23;
  a8[1] = v25;
  v31 = v34;
  a8[2] = v28;
  a8[3] = v31;
  return outlined init with take of OptionalBinaryInteger(&v38, (uint64_t)(a8 + 4));
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v35 = a7;
  v36 = a3;
  v33 = a5;
  v34 = a1;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v32 - v15;
  v17 = *(_QWORD *)(a6 - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a6, v20);
  v22 = Text.init<A>(_:)();
  v24 = v23;
  v32 = v25;
  v27 = v26 & 1;
  v28 = type metadata accessor for ReferenceFileDocumentCreationStrategy(0, v33, v35, v25);
  outlined init with copy of UTType?(a2, (uint64_t)v16);
  swift_retain();
  v29 = ReferenceFileDocumentCreationStrategy.__allocating_init(contentType:prepareDocument:)((uint64_t)v16, v36, a4);
  v38 = v28;
  v39 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReferenceFileDocumentCreationStrategy<A>, v28);
  swift_release();
  *(_QWORD *)&v37 = v29;
  outlined destroy of IntelligenceElement?(a2, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v34, a6);
  *a8 = v22;
  a8[1] = v24;
  v30 = v32;
  a8[2] = v27;
  a8[3] = v30;
  return outlined init with take of OptionalBinaryInteger(&v37, (uint64_t)(a8 + 4));
}

uint64_t NewDocumentButton<>.init(_:contentType:prepareDocumentURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a4;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v24 - v17;
  v19 = type metadata accessor for UTType();
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v18, a5, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
  v26 = type metadata accessor for URLDocumentCreationStrategy(0);
  v27 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URLDocumentCreationStrategy and conformance URLDocumentCreationStrategy, type metadata accessor for URLDocumentCreationStrategy, (uint64_t)&protocol conformance descriptor for URLDocumentCreationStrategy);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v25);
  URLDocumentCreationStrategy.init(contentType:prepareDocument:)((uint64_t)v18, a6, a7, (unint64_t *)boxed_opaque_existential_1);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a5, v19);
  *a8 = a1;
  a8[1] = a2;
  v22 = v24;
  a8[2] = a3;
  a8[3] = v22;
  return outlined init with take of OptionalBinaryInteger(&v25, (uint64_t)(a8 + 4));
}

uint64_t NewDocumentButton<>.init(_:contentType:prepareDocumentURL:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v23 = a3;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v22 - v9;
  v11 = Text.init(_:tableName:bundle:comment:)();
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = type metadata accessor for UTType();
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v10, a1, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v10, 0, 1, v18);
  v25 = type metadata accessor for URLDocumentCreationStrategy(0);
  v26 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URLDocumentCreationStrategy and conformance URLDocumentCreationStrategy, type metadata accessor for URLDocumentCreationStrategy, (uint64_t)&protocol conformance descriptor for URLDocumentCreationStrategy);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v24);
  URLDocumentCreationStrategy.init(contentType:prepareDocument:)((uint64_t)v10, a2, v23, (unint64_t *)boxed_opaque_existential_1);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a1, v18);
  *a4 = v11;
  a4[1] = v13;
  a4[2] = v17;
  a4[3] = v15;
  return outlined init with take of OptionalBinaryInteger(&v24, (uint64_t)(a4 + 4));
}

uint64_t NewDocumentButton<>.init<A>(_:contentType:prepareDocumentURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v32 = a3;
  v33 = a4;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v29 - v12;
  v14 = *(_QWORD *)(a5 - 8);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a5, v17);
  v19 = Text.init<A>(_:)();
  v21 = v20;
  v30 = v22 & 1;
  v31 = v23;
  v24 = type metadata accessor for UTType();
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v13, a2, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v13, 0, 1, v24);
  v35 = type metadata accessor for URLDocumentCreationStrategy(0);
  v36 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URLDocumentCreationStrategy and conformance URLDocumentCreationStrategy, type metadata accessor for URLDocumentCreationStrategy, (uint64_t)&protocol conformance descriptor for URLDocumentCreationStrategy);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v34);
  URLDocumentCreationStrategy.init(contentType:prepareDocument:)((uint64_t)v13, v32, v33, (unint64_t *)boxed_opaque_existential_1);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(a2, v24);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, a5);
  *a6 = v19;
  a6[1] = v21;
  v27 = v31;
  a6[2] = v30;
  a6[3] = v27;
  return outlined init with take of OptionalBinaryInteger(&v34, (uint64_t)(a6 + 4));
}

double static PlatformNewDocumentButtonModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  double result;
  uint64_t v11;
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 16);
  v20 = *(_OWORD *)(a2 + 32);
  v21 = v5;
  v7 = *(_OWORD *)(a2 + 48);
  v22 = *(_OWORD *)(a2 + 64);
  v8 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v8;
  v15 = v20;
  v16 = v7;
  v17 = *(_OWORD *)(a2 + 64);
  v9 = *a1;
  v23 = *(_DWORD *)(a2 + 80);
  v18 = *(_DWORD *)(a2 + 80);
  v13 = v19[0];
  v14 = v6;
  a3(&v11);
  *(_QWORD *)&v13 = v21;
  DWORD2(v13) = DWORD2(v21);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    outlined retain of _ViewInputs((uint64_t)v19);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)v19);
    if ((v13 & 8) != 0)
    {
      LODWORD(v13) = v9;
      type metadata accessor for _GraphValue<PlatformNewDocumentButtonModifier>();
      _GraphValue.value.getter();
      LODWORD(v13) = AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformNewDocumentButtonTransform.MakeTransform and conformance PlatformNewDocumentButtonTransform.MakeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)&v11, (uint64_t)v19);
    }
  }
  *(_QWORD *)a4 = v11;
  result = v12;
  a4[1] = v12;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance PlatformNewDocumentButtonModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for ViewModifier.body(content:) in conformance PlatformNewDocumentButtonTransform()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id one-time initialization function for defaultAction()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_createDocumentActionWithIntent_, *MEMORY[0x1E0DC4990]);
  static _NewDocumentButton.defaultAction = (uint64_t)result;
  return result;
}

id static _NewDocumentButton.defaultAction.getter()
{
  if (one-time initialization token for defaultAction != -1)
    swift_once();
  return (id)static _NewDocumentButton.defaultAction;
}

uint64_t _NewDocumentButton.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _WORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;

  *a4 = 256;
  type metadata accessor for Button<Text>(0, a1, a2, a3);
  v6 = v5;
  v7 = (_QWORD *)((char *)a4 + *(int *)(v5 + 36));
  *v7 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v7[1] = 0;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v8 = (char *)a4 + *(int *)(v6 + 40);
  lazy protocol witness table accessor for type String and conformance String();
  result = Text.init<A>(_:)();
  *(_QWORD *)v8 = result;
  *((_QWORD *)v8 + 1) = v10;
  v8[16] = v11 & 1;
  *((_QWORD *)v8 + 3) = v12;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _NewDocumentButton()
{
  type metadata accessor for ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>>();
  type metadata accessor for StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>(0, &lazy cache variable for type metadata for StaticSourceWriter<ButtonStyleConfiguration.Label, Text>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label);
  lazy protocol witness table accessor for type ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance _NewDocumentButton@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _WORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;

  *a4 = 256;
  type metadata accessor for Button<Text>(0, a1, a2, a3);
  v6 = v5;
  v7 = (_QWORD *)((char *)a4 + *(int *)(v5 + 36));
  *v7 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v7[1] = 0;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v8 = (char *)a4 + *(int *)(v6 + 40);
  lazy protocol witness table accessor for type String and conformance String();
  result = Text.init<A>(_:)();
  *(_QWORD *)v8 = result;
  *((_QWORD *)v8 + 1) = v10;
  v8[16] = v11 & 1;
  *((_QWORD *)v8 + 3) = v12;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in NewDocumentButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in _NewDocumentButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for NewDocumentButton(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  return __swift_destroy_boxed_opaque_existential_1(a1 + 32);
}

uint64_t initializeWithCopy for NewDocumentButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 32, a2 + 32);
  return a1;
}

uint64_t assignWithCopy for NewDocumentButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      v5 = *(_QWORD *)a2;
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
  }
  else if (v4)
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v12, v13);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  return a1;
}

uint64_t assignWithTake for NewDocumentButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;

  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
  {
    outlined destroy of Text(a1);
LABEL_5:
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    goto LABEL_6;
  }
  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Text.Storage(v6, v7, v8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for NewDocumentButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NewDocumentButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for NewDocumentButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NewDocumentButton);
}

ValueMetadata *type metadata accessor for _NewDocumentButton()
{
  return &type metadata for _NewDocumentButton;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier> and conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier>(255, a2, a3, a4);
    v6 = v5;
    v7[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, (uint64_t (*)(uint64_t))type metadata accessor for Button<Text>, (uint64_t)&protocol conformance descriptor for Button<A>);
    v7[1] = &protocol witness table for PlatformNewDocumentButtonModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1874BB240()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, (uint64_t (*)(uint64_t))type metadata accessor for Button<Text>, (uint64_t)&protocol conformance descriptor for Button<A>);
}

ValueMetadata *type metadata accessor for AsyncNewDocumentProvider()
{
  return &type metadata for AsyncNewDocumentProvider;
}

ValueMetadata *type metadata accessor for PlatformNewDocumentButtonModifier()
{
  return &type metadata for PlatformNewDocumentButtonModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformNewDocumentButtonModifier()
{
  return &protocol witness table for PlatformNewDocumentButtonModifier;
}

void type metadata accessor for _GraphValue<PlatformNewDocumentButtonModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformNewDocumentButtonModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformNewDocumentButtonModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformNewDocumentButtonTransform.MakeTransform and conformance PlatformNewDocumentButtonTransform.MakeTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform.MakeTransform and conformance PlatformNewDocumentButtonTransform.MakeTransform;
  if (!lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform.MakeTransform and conformance PlatformNewDocumentButtonTransform.MakeTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformNewDocumentButtonTransform.MakeTransform, &type metadata for PlatformNewDocumentButtonTransform.MakeTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform.MakeTransform and conformance PlatformNewDocumentButtonTransform.MakeTransform);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>>)
  {
    type metadata accessor for ResolvedButtonStyle(255);
    type metadata accessor for StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>(255, &lazy cache variable for type metadata for StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>>);
  }
}

uint64_t type metadata accessor for StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>(uint64_t a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle, type metadata accessor for ResolvedButtonStyle, (uint64_t)&protocol conformance descriptor for ResolvedButtonStyle);
    v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformNewDocumentButtonTransform.MakeTransform()
{
  return &type metadata for PlatformNewDocumentButtonTransform.MakeTransform;
}

ValueMetadata *type metadata accessor for PlatformNewDocumentButtonTransform()
{
  return &type metadata for PlatformNewDocumentButtonTransform;
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformNewDocumentButtonTransform()
{
  return &protocol witness table for PlatformNewDocumentButtonTransform;
}

unint64_t instantiation function for generic protocol witness table for PlatformNewDocumentButtonTransform(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for ViewInputFlagModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewInputFlagModifier);
}

uint64_t getEnumTagSinglePayload for ViewInputFlagModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874BB664 + 4 * byte_187C386E0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ViewInputFlagModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for FalseViewInputBoolFlagModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FalseViewInputBoolFlagModifier);
}

_UNKNOWN **base witness table accessor for ViewModifier in FalseViewInputBoolFlagModifier<A>()
{
  return &protocol witness table for FalseViewInputBoolFlagModifier<A>;
}

uint64_t static ViewInputFlagModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v8[4];
  int v9;

  v9 = *a1;
  type metadata accessor for ViewInputFlagModifier(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a4 + 16) + 8))(v8, a2, a3);
}

uint64_t closure #1 in static ViewInputFlagModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for ViewInputFlagModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ViewInputFlagModifier<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ViewInputFlagModifier<A>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ViewInputFlagModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ViewInputFlagModifier<A>(int *a1, uint64_t a2, uint64_t a3)
{
  return static ViewInputFlagModifier._makeInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance FalseViewInputBoolFlagModifier<A>()
{
  return specialized static FalseViewInputBoolFlagModifier._makeInputs(modifier:inputs:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in ViewInputFlagModifier<A>()
{
  return &protocol witness table for ViewInputFlagModifier<A>;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance FalseViewInputBoolFlagModifier<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance FalseViewInputBoolFlagModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FalseViewInputBoolFlagModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance FalseViewInputBoolFlagModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

void specialized ViewModifier.bodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  specialized ViewModifier.bodyError()(0xD00000000000001FLL, (void *)0x8000000187BEC940);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000020, (void *)0x8000000187BEC910);
}

{
  specialized ViewModifier.bodyError()(0x646F4D6B7361545FLL, (void *)0xED00007265696669);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000019, (void *)0x8000000187BEC9E0);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000015, (void *)0x8000000187BEC9C0);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000016, (void *)0x8000000187BEC9A0);
}

{
  specialized ViewModifier.bodyError()(0xD00000000000001DLL, (void *)0x8000000187BEC980);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000011, (void *)0x8000000187BEC960);
}

{
  specialized ViewModifier.bodyError()(0xD00000000000001ELL, (void *)0x8000000187BEC8F0);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000019, (void *)0x8000000187BEC8D0);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000014, (void *)0x8000000187BEC8B0);
}

{
  specialized ViewModifier.bodyError()(0x6F697469736F505FLL, (void *)0xEF74756F79614C6ELL);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000011, (void *)0x8000000187BEC890);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000010, (void *)0x8000000187BEC870);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000014, (void *)0x8000000187BEC850);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000023, (void *)0x8000000187BEC820);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000014, (void *)0x8000000187BEC800);
}

{
  specialized ViewModifier.bodyError()(0xD00000000000002DLL, (void *)0x8000000187BEC7D0);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000016, (void *)0x8000000187BEC7B0);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000015, (void *)0x8000000187BEC790);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000013, (void *)0x8000000187BEC770);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000016, (void *)0x8000000187BEC750);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000018, (void *)0x8000000187BEC730);
}

void specialized ViewModifier<>.body(content:)()
{
  specialized ViewModifier.bodyError()();
}

uint64_t partial apply for closure #1 in static ViewInputFlagModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static ViewInputFlagModifier._makeInputs(modifier:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t specialized static FalseViewInputBoolFlagModifier._makeInputs(modifier:inputs:)()
{
  char v1;

  v1 = 0;
  return specialized _GraphInputs.subscript.setter((uint64_t)&v1);
}

uint64_t destroy for NavigationSplitViewState(_QWORD *a1)
{
  uint64_t result;

  if (a1[2])
  {
    swift_release();
    swift_release();
  }
  if (a1[4])
    swift_release();
  result = a1[7];
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for NavigationSplitViewState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  }
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  if (!v5)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 56);
    if (v7)
      goto LABEL_6;
LABEL_8:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  swift_retain();
  v7 = *(_QWORD *)(a2 + 56);
  if (!v7)
    goto LABEL_8;
LABEL_6:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_retain();
  swift_retain();
LABEL_9:
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  return a1;
}

uint64_t assignWithCopy for NavigationSplitViewState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  char v16;
  __int128 v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = a1 + 8;
  v5 = (__int128 *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    }
    else
    {
      outlined destroy of Binding<NavigationSplitViewColumn>(a1 + 8);
      v7 = *((_BYTE *)v5 + 16);
      *(_OWORD *)v4 = *v5;
      *(_BYTE *)(v4 + 16) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    v8 = *v5;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_OWORD *)v4 = v8;
  }
  v9 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v10 = *(_QWORD *)(a2 + 32);
  if (v9)
  {
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v11;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v12;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_15:
  v13 = (_OWORD *)(a1 + 48);
  v14 = (_OWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    }
    else
    {
      outlined destroy of Binding<NavigationSplitViewColumn>(a1 + 48);
      v16 = *(_BYTE *)(a2 + 64);
      *v13 = *v14;
      *(_BYTE *)(a1 + 64) = v16;
    }
  }
  else if (v15)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    swift_retain();
    swift_retain();
  }
  else
  {
    v17 = *v14;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v13 = v17;
  }
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  return a1;
}

uint64_t outlined destroy of Binding<NavigationSplitViewColumn>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Binding<NavigationSplitViewColumn>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Binding<NavigationSplitViewColumn>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>)
  {
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>);
  }
}

uint64_t assignWithTake for NavigationSplitViewState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a1 + 8;
  v5 = a2 + 8;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_release();
      *(_QWORD *)(a1 + 16) = v6;
      swift_release();
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      goto LABEL_6;
    }
    outlined destroy of Binding<NavigationSplitViewColumn>(a1 + 8);
  }
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(v5 + 16);
LABEL_6:
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  if (v8)
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a1 + 40) = v9;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v7)
  {
    v10 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v10;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_13:
  if (!*(_QWORD *)(a1 + 56))
  {
LABEL_17:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(a2 + 56);
  if (!v11)
  {
    outlined destroy of Binding<NavigationSplitViewColumn>(a1 + 48);
    goto LABEL_17;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 56) = v11;
  swift_release();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
LABEL_18:
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationSplitViewState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 66))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationSplitViewState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 66) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 66) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationSplitViewState()
{
  return &type metadata for NavigationSplitViewState;
}

void *NavigationSplitViewState.update(for:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  unsigned int v13;
  __int128 v15;
  __int128 v16[16];
  __int128 __src[18];
  __int128 v18;
  char v19;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 64);
  if (v5 == 21)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(v2 + 32);
    outlined copy of AppIntentExecutor?(*(_QWORD *)(a1 + 16));
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v8);
    *(_QWORD *)(v2 + 32) = v4;
    *(_QWORD *)(v2 + 40) = v7;
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__src);
LABEL_9:
    outlined init with take of NavigationState.UpdateResult(__src, &v18);
    v10 = 0;
    v11 = 0;
    v12 = xmmword_187BFE310;
    v9 = 2;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (v5 == 5)
  {
    *(_QWORD *)&v18 = *(_QWORD *)a1;
    *((_QWORD *)&v18 + 1) = v6;
    LOBYTE(v16[0]) = BYTE1(v4);
    v19 = v4;
    NavigationSplitViewState.updateRequiredCompactColumn(_:newValue:)((uint64_t *)&v18, (unsigned __int8 *)v16, __src);
    goto LABEL_7;
  }
  if (v5 != 4)
  {
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)__src);
    goto LABEL_9;
  }
  *(_QWORD *)&v18 = *(_QWORD *)a1;
  *((_QWORD *)&v18 + 1) = v6;
  LOBYTE(v16[0]) = BYTE1(v4);
  v19 = v4;
  NavigationSplitViewState.updatePreferredCompactColumn(_:newValue:)((uint64_t *)&v18, (unsigned __int8 *)v16, __src);
LABEL_7:
  v15 = __src[0];
  v9 = __src[1];
  outlined init with take of NavigationState.UpdateResult((__int128 *)((char *)&__src[1] + 8), v16);
  v10 = DWORD1(__src[17]);
  v11 = DWORD2(__src[17]);
  outlined init with take of NavigationState.UpdateResult(v16, &v18);
  v12 = v15;
LABEL_10:
  __src[0] = v12;
  LOBYTE(__src[1]) = v9;
  outlined init with take of NavigationState.UpdateResult(&v18, (__int128 *)((char *)&__src[1] + 8));
  *(_QWORD *)((char *)&__src[17] + 4) = __PAIR64__(v11, v10);
  v13 = *(_DWORD *)(v2 + 4) + v11;
  *(_DWORD *)v2 += v10;
  *(_DWORD *)(v2 + 4) = v13;
  return memcpy(a2, __src, 0x11CuLL);
}

void *NavigationSplitViewState.updatePreferredCompactColumn(_:newValue:)@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  __int128 v13[16];
  _OWORD __src[19];

  v5 = *a1;
  v6 = a1[1];
  v7 = *((_BYTE *)a1 + 16);
  v8 = *a2;
  v9 = *(_QWORD *)(v3 + 16);
  if (!v9)
  {
    *(_QWORD *)(v3 + 8) = v5;
    *(_QWORD *)(v3 + 16) = v6;
    *(_BYTE *)(v3 + 24) = v7;
    *(_BYTE *)(v3 + 25) = v8;
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v13);
    __src[0] = xmmword_187BFE310;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(v13, (_OWORD *)((char *)&__src[1] + 8));
    *(_QWORD *)((char *)&__src[17] + 4) = v8 != 0;
    memcpy(a3, __src, 0x11CuLL);
    swift_retain();
    return (void *)swift_retain();
  }
  v10 = *(unsigned __int8 *)(v3 + 25);
  if (v10 == 3)
  {
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)v13);
  }
  else
  {
    if (v6 != v9)
    {
      v12 = *(_QWORD *)(v3 + 8);
      swift_retain();
      swift_retain();
      outlined consume of Binding<NavigationSplitViewColumn>?(v12, v9);
      *(_QWORD *)(v3 + 8) = v5;
      *(_QWORD *)(v3 + 16) = v6;
      *(_BYTE *)(v3 + 24) = v7;
    }
    if (v8 != v10)
    {
      *(_BYTE *)(v3 + 25) = v8;
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v13);
      __src[0] = xmmword_187BFE310;
      LOBYTE(__src[1]) = 2;
      outlined init with take of NavigationState.UpdateResult(v13, (_OWORD *)((char *)&__src[1] + 8));
      *(_QWORD *)((char *)&__src[17] + 4) = 1;
      return memcpy(a3, __src, 0x11CuLL);
    }
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v13);
  }
  __src[0] = xmmword_187BFE310;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v13, (_OWORD *)((char *)&__src[1] + 8));
  *(_QWORD *)((char *)&__src[17] + 4) = 0;
  return memcpy(a3, __src, 0x11CuLL);
}

void *NavigationSplitViewState.updateRequiredCompactColumn(_:newValue:)@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  __int128 v13[16];
  _OWORD __src[19];

  v5 = *a1;
  v6 = a1[1];
  v7 = *((_BYTE *)a1 + 16);
  v8 = *a2;
  v9 = *(_QWORD *)(v3 + 56);
  if (!v9)
  {
    *(_QWORD *)(v3 + 48) = v5;
    *(_QWORD *)(v3 + 56) = v6;
    *(_BYTE *)(v3 + 64) = v7;
    *(_BYTE *)(v3 + 65) = v8;
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v13);
    __src[0] = xmmword_187BFE310;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(v13, (_OWORD *)((char *)&__src[1] + 8));
    *(_QWORD *)((char *)&__src[17] + 4) = v8 != 0;
    memcpy(a3, __src, 0x11CuLL);
    swift_retain();
    return (void *)swift_retain();
  }
  v10 = *(unsigned __int8 *)(v3 + 65);
  if (v10 == 3)
  {
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)v13);
  }
  else
  {
    if (v6 != v9)
    {
      v12 = *(_QWORD *)(v3 + 48);
      swift_retain();
      swift_retain();
      outlined consume of Binding<NavigationSplitViewColumn>?(v12, v9);
      *(_QWORD *)(v3 + 48) = v5;
      *(_QWORD *)(v3 + 56) = v6;
      *(_BYTE *)(v3 + 64) = v7;
    }
    if (v8 != v10)
    {
      *(_BYTE *)(v3 + 65) = v8;
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v13);
      __src[0] = xmmword_187BFE310;
      LOBYTE(__src[1]) = 2;
      outlined init with take of NavigationState.UpdateResult(v13, (_OWORD *)((char *)&__src[1] + 8));
      *(_QWORD *)((char *)&__src[17] + 4) = 1;
      return memcpy(a3, __src, 0x11CuLL);
    }
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v13);
  }
  __src[0] = xmmword_187BFE310;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v13, (_OWORD *)((char *)&__src[1] + 8));
  *(_QWORD *)((char *)&__src[17] + 4) = 0;
  return memcpy(a3, __src, 0x11CuLL);
}

Swift::Bool __swiftcall NavigationSplitViewState.reduceCompactColumnBindingsIfGreaterThan(_:)(SwiftUI::NavigationSplitColumn_optional a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  if (a1.value <= SwiftUI_NavigationSplitColumn_detail)
  {
    v2 = v1;
    v4 = *(_QWORD *)(v1 + 16);
    if (v4)
    {
      v5 = *(unsigned __int8 *)(v2 + 25);
      if (v5 != 3)
      {
        v6 = *(_QWORD *)(v2 + 8);
        if (a1.value)
        {
          if (a1.value == SwiftUI_NavigationSplitColumn_content && v5 == 2)
          {
LABEL_7:
            *(SwiftUI::NavigationSplitColumn_optional *)(v2 + 25) = a1;
            swift_retain();
            swift_retain();
            dispatch thunk of AnyLocation.set(_:transaction:)();
            outlined consume of Binding<NavigationSplitViewColumn>?(v6, v4);
            v7 = 1;
            v8 = *(_QWORD *)(v2 + 56);
            if (!v8)
              goto LABEL_17;
LABEL_12:
            v9 = *(unsigned __int8 *)(v2 + 65);
            if (v9 != 3)
            {
              v10 = *(_QWORD *)(v2 + 48);
              if (a1.value)
              {
                if (a1.value != SwiftUI_NavigationSplitColumn_content || v9 != 2)
                  goto LABEL_17;
              }
              else if ((v9 - 1) >= 2)
              {
                goto LABEL_17;
              }
              *(SwiftUI::NavigationSplitColumn_optional *)(v2 + 65) = a1;
              swift_retain();
              swift_retain();
              dispatch thunk of AnyLocation.set(_:transaction:)();
              outlined consume of Binding<NavigationSplitViewColumn>?(v10, v8);
              v7 = 1;
            }
LABEL_17:
            *(_DWORD *)v2 += v7;
            return v7;
          }
        }
        else if ((v5 - 1) < 2)
        {
          goto LABEL_7;
        }
      }
    }
    v7 = 0;
    v8 = *(_QWORD *)(v2 + 56);
    if (!v8)
      goto LABEL_17;
    goto LABEL_12;
  }
  LOBYTE(v7) = 0;
  return v7;
}

uint64_t closure #1 in NavigationSplitViewState.handleEvent(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

double _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0x1FFFFFFFELL;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  return result;
}

double _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0x1FFFFFFFCLL;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  return result;
}

uint64_t ContainerValues.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for ContainerValueViewTraitKey(0, a2, a3, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerValueViewTraitKey<A>, v4);
  return ViewTraitCollection.subscript.getter();
}

uint64_t ContainerValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;

  specialized ContainerValues.subscript.setter(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*ContainerValues.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  void *v13;
  uint64_t v14;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[6] = malloc(v12);
  v13 = malloc(v12);
  v9[7] = v13;
  ContainerValues.subscript.getter((uint64_t)v13, a3, a4, v14);
  return ContainerValues.subscript.modify;
}

void ContainerValues.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (*a1)[2];
  v9 = **a1;
  v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    specialized ContainerValues.subscript.setter((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    specialized ContainerValues.subscript.setter((*a1)[7], v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t ContainerValues.tag<A>(for:)()
{
  return ViewTraitCollection.tag<A>(for:)();
}

uint64_t ContainerValues.hasTag<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  _QWORD v16[2];

  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v16 - v7;
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *v2;
  ViewTraitCollection.tag<A>(for:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v14 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v8, a2);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, a2);
  }
  return v14 & 1;
}

uint64_t specialized ContainerValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  (*(void (**)(char *, uint64_t, double))(v10 + 16))((char *)&v15 - v11, a1, v9);
  v13 = type metadata accessor for ContainerValueViewTraitKey(0, a3, a4, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerValueViewTraitKey<A>, v13);
  return ViewTraitCollection.subscript.setter();
}

ValueMetadata *type metadata accessor for ContainerValues()
{
  return &type metadata for ContainerValues;
}

uint64_t getEnumTagSinglePayload for AutomaticStyleOverrideModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874BCD98 + 4 * byte_187C38840[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AutomaticStyleOverrideModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for AutomaticStyleOverrideModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AutomaticStyleOverrideModifier);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedUIKitButtonBody(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t specialized static StyleableView._makeView(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  ValueMetadata *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  void (*v13)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  _BYTE v17[32];
  _BYTE v18[32];
  int v19;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];
  _BYTE v24[32];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v5;
  v6 = *(_OWORD *)(a2 + 48);
  v21 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v17[16] = v21;
  *(_OWORD *)v18 = v6;
  *(_OWORD *)&v18[16] = *(_OWORD *)(a2 + 64);
  v19 = *(_DWORD *)(a2 + 80);
  v16 = v20[0];
  *(_OWORD *)v17 = v5;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v20);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v7 = (ValueMetadata *)v22;
  outlined release of _GraphInputs((uint64_t)v20);
  if (!v7 || v7 != &type metadata for ResolvedLabelStyle)
  {
    *(_QWORD *)&v22 = &type metadata for ResolvedLabelStyle;
    PropertyList.subscript.setter();
    LODWORD(v22) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedLabelStyle>, (uint64_t)&type metadata for ResolvedLabelStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v22) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle, (uint64_t)&type metadata for ResolvedLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedLabelStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v23[16] = *(_OWORD *)&v17[16];
    *(_OWORD *)v24 = *(_OWORD *)v18;
    *(_OWORD *)&v24[16] = *(_OWORD *)&v18[16];
    v25 = v19;
    v22 = v16;
    *(_OWORD *)v23 = *(_OWORD *)v17;
    outlined retain of _ViewInputs((uint64_t)&v22);
    specialized static StaticIf<>._makeView(view:inputs:)(a3);
    outlined release of _ViewInputs((uint64_t)&v22);
    return outlined release of _ViewInputs((uint64_t)&v22);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<LabelStyleConfiguration>, (uint64_t)&type metadata for LabelStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<LabelStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v22)
  {
    v15 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v8 = *(unsigned int *)(v22 + 16);
  v9 = *(_QWORD *)(v22 + 24);
  v10 = *(_QWORD *)(v22 + 32);
  swift_retain();
  swift_release();
  v15 = v10;
  PropertyList.subscript.setter();
  if (!v9)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, LabelStyleModifier<DefaultLabelStyle>>();
    LODWORD(v22) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedLabelStyle>, (uint64_t)&type metadata for ResolvedLabelStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v22) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle, (uint64_t)&type metadata for ResolvedLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedLabelStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v22 = v16;
    DWORD2(v22) = DWORD2(v16);
    *(_OWORD *)&v23[8] = *(_OWORD *)&v17[8];
    *(_QWORD *)v23 = *(_QWORD *)v17;
    *(_QWORD *)&v23[24] = *(_QWORD *)&v17[24];
    *(_QWORD *)v24 = *(_QWORD *)v18;
    *(_OWORD *)&v24[8] = *(_OWORD *)&v18[8];
    *(_QWORD *)&v24[24] = *(_QWORD *)&v18[24];
    v25 = v19;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelStyle, LabelStyleModifier<DefaultLabelStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v12 = result;
  LODWORD(v15) = a1;
  *(_QWORD *)&v22 = v16;
  DWORD2(v22) = DWORD2(v16);
  *(_OWORD *)&v23[8] = *(_OWORD *)&v17[8];
  *(_QWORD *)v23 = *(_QWORD *)v17;
  *(_QWORD *)&v23[24] = *(_QWORD *)&v17[24];
  *(_QWORD *)v24 = *(_QWORD *)v18;
  *(_OWORD *)&v24[8] = *(_OWORD *)&v18[8];
  *(_QWORD *)&v24[24] = *(_QWORD *)&v18[24];
  v25 = v19;
  v13 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v14 = lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle();
  v13(&v15, v8, v9, &v22, &type metadata for ResolvedLabelStyle, v14, v9, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedUIKitButtonBody(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t specialized static StyleableView._viewListCount(inputs:)(ValueMetadata *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)&v12 = a1;
  *((_QWORD *)&v12 + 1) = a2;
  v13 = a3;
  v14 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    v9 = v12;
    v10 = v13;
    v11 = v14;
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Detail, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<NavigationSplitViewStyleConfiguration.Detail, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Detail, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier();
LABEL_9:
    v7 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_10;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<NavigationSplitViewStyleConfiguration>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<NavigationSplitViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v9)
  {
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v9 + 24);
  swift_retain();
  swift_release();
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v9 = v12;
    v10 = v13;
    v11 = v14;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticNavigationSplitViewStyle and conformance AutomaticNavigationSplitViewStyle, (uint64_t)&type metadata for AutomaticNavigationSplitViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationSplitStyleModifier);
    lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = v12;
    v10 = v13;
    v11 = v14;
    v7 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v9, v5, result);
LABEL_10:
    v8 = v7;
    swift_bridgeObjectRelease();
    swift_release();
    return v8;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)&v12 = a1;
  *((_QWORD *)&v12 + 1) = a2;
  v13 = a3;
  v14 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    v9 = v12;
    v10 = v13;
    v11 = v14;
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(0, &lazy cache variable for type metadata for ModifiedContent<ResolvedDisclosureGroupStyle, StaticSourceWriter<DisclosureGroupStyleConfiguration.Label, ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<DisclosureGroupStyleConfiguration.Label, ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>>);
    type metadata accessor for StaticSourceWriter<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleConfiguration.Content>();
    lazy protocol witness table accessor for type ModifiedContent<ResolvedDisclosureGroupStyle, StaticSourceWriter<DisclosureGroupStyleConfiguration.Label, ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>>> and conformance <> ModifiedContent<A, B>();
LABEL_9:
    v7 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_10;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<DisclosureGroupStyleConfiguration>, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<DisclosureGroupStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v9)
  {
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v9 + 24);
  swift_retain();
  swift_release();
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v9 = v12;
    v10 = v13;
    v11 = v14;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticDisclosureGroupStyle and conformance AutomaticDisclosureGroupStyle, (uint64_t)&type metadata for AutomaticDisclosureGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisclosureGroupStyleModifier);
    lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = v12;
    v10 = v13;
    v11 = v14;
    v7 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v9, v5, result);
LABEL_10:
    v8 = v7;
    swift_bridgeObjectRelease();
    swift_release();
    return v8;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)&v12 = a1;
  *((_QWORD *)&v12 + 1) = a2;
  v13 = a3;
  v14 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    v9 = v12;
    v10 = v13;
    v11 = v14;
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>> and conformance <> ModifiedContent<A, B>();
LABEL_9:
    v7 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_10;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<LabeledContentStyleConfiguration>, (uint64_t)&type metadata for LabeledContentStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<LabeledContentStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v9)
  {
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v9 + 24);
  swift_retain();
  swift_release();
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v9 = v12;
    v10 = v13;
    v11 = v14;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticLabeledContentStyle and conformance AutomaticLabeledContentStyle, (uint64_t)&type metadata for AutomaticLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = v12;
    v10 = v13;
    v11 = v14;
    v7 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v9, v5, result);
LABEL_10:
    v8 = v7;
    swift_bridgeObjectRelease();
    swift_release();
    return v8;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  *(_QWORD *)&v13 = a1;
  *((_QWORD *)&v13 + 1) = a2;
  v14 = a3;
  v15 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v9 = &type metadata for ResolvedGroupBoxStyle;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_bridgeObjectRelease();
    swift_release();
    return 1;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<GroupBoxStyleConfiguration>, (uint64_t)&type metadata for GroupBoxStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<GroupBoxStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v9)
  {
    v12 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v9 + 24);
  v6 = *(_QWORD *)(v9 + 32);
  swift_retain();
  swift_release();
  v12 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v9 = v13;
    v10 = v14;
    v11 = v15;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for GroupBoxStyleModifier<DefaultGroupBoxStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultGroupBoxStyle and conformance DefaultGroupBoxStyle, (uint64_t)&type metadata for DefaultGroupBoxStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GroupBoxStyleModifier);
    lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = v13;
    v10 = v14;
    v11 = v15;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v9, v5, result);
    swift_bridgeObjectRelease();
LABEL_9:
    swift_release();
    return v8;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)&v12 = a1;
  *((_QWORD *)&v12 + 1) = a2;
  v13 = a3;
  v14 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    v9 = v12;
    v10 = v13;
    v11 = v14;
    type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>> and conformance <> ModifiedContent<A, B>();
LABEL_9:
    v7 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_10;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ControlGroupStyleConfiguration>, (uint64_t)&type metadata for ControlGroupStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ControlGroupStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v9)
  {
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v9 + 24);
  swift_retain();
  swift_release();
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v9 = v12;
    v10 = v13;
    v11 = v14;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ControlGroupStyleModifier<AutomaticControlGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticControlGroupStyle and conformance AutomaticControlGroupStyle, (uint64_t)&type metadata for AutomaticControlGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ControlGroupStyleModifier);
    lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = v12;
    v10 = v13;
    v11 = v14;
    v7 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v9, v5, result);
LABEL_10:
    v8 = v7;
    swift_bridgeObjectRelease();
    swift_release();
    return v8;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)&v12 = a1;
  *((_QWORD *)&v12 + 1) = a2;
  v13 = a3;
  v14 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    v9 = v12;
    v10 = v13;
    v11 = v14;
    type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for KeyboardShortcutBindingBehavior);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
LABEL_9:
    v7 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_10;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ToggleStyleConfiguration>, (uint64_t)&type metadata for ToggleStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ToggleStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v9)
  {
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v9 + 24);
  swift_retain();
  swift_release();
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v9 = v12;
    v10 = v13;
    v11 = v14;
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ToggleStyleModifier<DefaultToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultToggleStyle and conformance DefaultToggleStyle, (uint64_t)&type metadata for DefaultToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
    lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = v12;
    v10 = v13;
    v11 = v14;
    v7 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v9, v5, result);
LABEL_10:
    v8 = v7;
    swift_bridgeObjectRelease();
    swift_release();
    return v8;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for ResolvedLabelStyle;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StaticIf<>._viewListCount(inputs:)(v14);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<LabelStyleConfiguration>, (uint64_t)&type metadata for LabelStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<LabelStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for LabelStyleModifier<DefaultLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultLabelStyle and conformance DefaultLabelStyle, (uint64_t)&type metadata for DefaultLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleModifier);
    lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)&v12 = a1;
  *((_QWORD *)&v12 + 1) = a2;
  v13 = a3;
  v14 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    v9 = v12;
    v10 = v13;
    v11 = v14;
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>();
    lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>();
LABEL_9:
    v7 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_10;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<MenuStyleConfiguration>, (uint64_t)&type metadata for MenuStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<MenuStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v9)
  {
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v9 + 24);
  swift_retain();
  swift_release();
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v9 = v12;
    v10 = v13;
    v11 = v14;
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MenuStyleModifier<DefaultMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle, (uint64_t)&type metadata for DefaultMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = v12;
    v10 = v13;
    v11 = v14;
    v7 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v9, v5, result);
LABEL_10:
    v8 = v7;
    swift_bridgeObjectRelease();
    swift_release();
    return v8;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)&v12 = a1;
  *((_QWORD *)&v12 + 1) = a2;
  v13 = a3;
  v14 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    v9 = v12;
    v10 = v13;
    v11 = v14;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for HelpView<HelpStyleConfiguration.Content>, (uint64_t)&type metadata for HelpStyleConfiguration.Content, (uint64_t)&protocol witness table for HelpStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for HelpView);
    lazy protocol witness table accessor for type HelpView<HelpStyleConfiguration.Content> and conformance HelpView<A>();
LABEL_9:
    v7 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_10;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<HelpStyleConfiguration>, (uint64_t)&type metadata for HelpStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<HelpStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v9)
  {
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v9 + 24);
  swift_retain();
  swift_release();
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v9 = v12;
    v10 = v13;
    v11 = v14;
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for HelpStyleModifier<DefaultHelpStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultHelpStyle and conformance DefaultHelpStyle, (uint64_t)&type metadata for DefaultHelpStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for HelpStyleModifier);
    lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = v12;
    v10 = v13;
    v11 = v14;
    v7 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v9, v5, result);
LABEL_10:
    v8 = v7;
    swift_bridgeObjectRelease();
    swift_release();
    return v8;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)&v12 = a1;
  *((_QWORD *)&v12 + 1) = a2;
  v13 = a3;
  v14 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    _ViewListCountInputs.base.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v9 = v12;
    LODWORD(v10) = v13;
    v11 = v14;
    type metadata accessor for StaticSourceWriter<FormStyleConfiguration.Content, FormStyleConfiguration.Content>();
    lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v8;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<FormStyleConfiguration>, (uint64_t)&type metadata for FormStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<FormStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v9)
  {
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v9 + 24);
  swift_retain();
  swift_release();
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v9 = v12;
    LODWORD(v10) = v13;
    v11 = v14;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for FormStyleModifier<AutomaticFormStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticFormStyle and conformance AutomaticFormStyle, (uint64_t)&type metadata for AutomaticFormStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormStyleModifier);
    lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();
    v7 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = v12;
    LODWORD(v10) = v13;
    v11 = v14;
    v7 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v9, v5, result);
LABEL_9:
    v8 = v7;
    swift_bridgeObjectRelease();
    swift_release();
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t specialized static StyleableView._viewListCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  *(_QWORD *)&v15 = a1;
  *((_QWORD *)&v15 + 1) = a2;
  v16 = a3;
  v17 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1, a2, a3, a4, type metadata accessor for ResolvedProgressViewStyle))
  {
    type metadata accessor for ResolvedProgressViewStyle(0);
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    v12 = v15;
    v13 = v16;
    v14 = v17;
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>(0);
    lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier> and conformance <> ModifiedContent<A, B>();
LABEL_9:
    v10 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_10;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<ProgressViewStyleConfiguration>, type metadata accessor for ProgressViewStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ProgressViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v12)
  {
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(v12 + 24);
  swift_retain();
  swift_release();
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_8:
    v12 = v15;
    v13 = v16;
    v14 = v17;
    type metadata accessor for ResolvedProgressViewStyle(0);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ProgressViewStyleModifier<DefaultProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultProgressViewStyle and conformance DefaultProgressViewStyle, (uint64_t)&type metadata for DefaultProgressViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ProgressViewStyleModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedProgressViewStyle and conformance ResolvedProgressViewStyle, type metadata accessor for ResolvedProgressViewStyle, (uint64_t)&protocol conformance descriptor for ResolvedProgressViewStyle);
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v12 = v15;
    v13 = v16;
    v14 = v17;
    v10 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v12, v8, result);
LABEL_10:
    v11 = v10;
    swift_bridgeObjectRelease();
    swift_release();
    return v11;
  }
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;

  *(_QWORD *)&v17 = a1;
  *((_QWORD *)&v17 + 1) = a2;
  v18 = a3;
  v19 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1, a2, a3, a4, type metadata accessor for ResolvedSearchFieldStyle))
  {
    *(_QWORD *)&v13 = type metadata accessor for ResolvedSearchFieldStyle(0);
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v12 = specialized static StyleableView._viewListCount(inputs:)(v17, *((_QWORD *)&v17 + 1), v18, v19);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v12;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<SearchFieldConfiguration>, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<SearchFieldConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v13)
  {
    v16 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(v13 + 24);
  v9 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v16 = v9;
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_8:
    v13 = v17;
    v14 = v18;
    v15 = v19;
    type metadata accessor for ResolvedSearchFieldStyle(0);
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for SearchFieldStyleModifier<AutomaticSearchFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticSearchFieldStyle and conformance AutomaticSearchFieldStyle, (uint64_t)&type metadata for AutomaticSearchFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SearchFieldStyleModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle, type metadata accessor for ResolvedSearchFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedSearchFieldStyle);
    v11 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v13 = v17;
    v14 = v18;
    v15 = v19;
    v11 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v13, v8, result);
LABEL_9:
    v12 = v11;
    swift_bridgeObjectRelease();
    swift_release();
    return v12;
  }
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;

  *(_QWORD *)&v17 = a1;
  *((_QWORD *)&v17 + 1) = a2;
  v18 = a3;
  v19 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1, a2, a3, a4, type metadata accessor for ResolvedTokenFieldStyle))
  {
    *(_QWORD *)&v13 = type metadata accessor for ResolvedTokenFieldStyle(0);
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v12 = specialized static StyleableView._viewListCount(inputs:)(v17, *((_QWORD *)&v17 + 1), v18, v19);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v12;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<TokenFieldConfiguration>, type metadata accessor for TokenFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<TokenFieldConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v13)
  {
    v16 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(v13 + 24);
  v9 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v16 = v9;
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_8:
    v13 = v17;
    v14 = v18;
    v15 = v19;
    type metadata accessor for ResolvedTokenFieldStyle(0);
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for TokenFieldStyleModifier<AutomaticTokenFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticTokenFieldStyle and conformance AutomaticTokenFieldStyle, (uint64_t)&type metadata for AutomaticTokenFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TokenFieldStyleModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle, type metadata accessor for ResolvedTokenFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTokenFieldStyle);
    v11 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v13 = v17;
    v14 = v18;
    v15 = v19;
    v11 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v13, v8, result);
LABEL_9:
    v12 = v11;
    swift_bridgeObjectRelease();
    swift_release();
    return v12;
  }
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;

  *(_QWORD *)&v17 = a1;
  *((_QWORD *)&v17 + 1) = a2;
  v18 = a3;
  v19 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1, a2, a3, a4, type metadata accessor for ResolvedTextEditorStyle))
  {
    *(_QWORD *)&v13 = type metadata accessor for ResolvedTextEditorStyle(0);
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v12 = specialized static StyleableView._viewListCount(inputs:)(v17, *((_QWORD *)&v17 + 1), v18, v19);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v12;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<TextEditorStyleConfiguration>, type metadata accessor for TextEditorStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<TextEditorStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v13)
  {
    v16 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(v13 + 24);
  v9 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v16 = v9;
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_8:
    v13 = v17;
    v14 = v18;
    v15 = v19;
    type metadata accessor for ResolvedTextEditorStyle(0);
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for TextEditorStyleModifier<AutomaticTextEditorStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticTextEditorStyle and conformance AutomaticTextEditorStyle, (uint64_t)&type metadata for AutomaticTextEditorStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEditorStyleModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle, type metadata accessor for ResolvedTextEditorStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextEditorStyle);
    v11 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v13 = v17;
    v14 = v18;
    v15 = v19;
    v11 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v13, v8, result);
LABEL_9:
    v12 = v11;
    swift_bridgeObjectRelease();
    swift_release();
    return v12;
  }
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  *(_QWORD *)&v15 = a1;
  *((_QWORD *)&v15 + 1) = a2;
  v16 = a3;
  v17 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1, a2, a3, a4, type metadata accessor for ResolvedDatePickerStyle))
  {
    type metadata accessor for ResolvedDatePickerStyle(0);
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    v12 = v15;
    v13 = v16;
    v14 = v17;
    type metadata accessor for StaticSourceWriter<DatePickerStyleConfiguration.Label, DatePickerStyleConfiguration.Label>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle, type metadata accessor for ResolvedDatePickerStyle, (uint64_t)&protocol conformance descriptor for ResolvedDatePickerStyle);
    v11 = static ModifiedContent<>._viewListCount(inputs:)();
LABEL_10:
    swift_bridgeObjectRelease();
    swift_release();
    return v11;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<DatePickerStyleConfiguration>, type metadata accessor for DatePickerStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<DatePickerStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v12)
  {
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(v12 + 24);
  swift_retain();
  swift_release();
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_8:
    v12 = v15;
    v13 = v16;
    v14 = v17;
    type metadata accessor for ResolvedDatePickerStyle(0);
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for DatePickerStyleModifier<DefaultDatePickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultDatePickerStyle and conformance DefaultDatePickerStyle, (uint64_t)&type metadata for DefaultDatePickerStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DatePickerStyleModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle, type metadata accessor for ResolvedDatePickerStyle, (uint64_t)&protocol conformance descriptor for ResolvedDatePickerStyle);
    v10 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v12 = v15;
    v13 = v16;
    v14 = v17;
    v10 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v12, v8, result);
LABEL_9:
    v11 = v10;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;

  *(_QWORD *)&v17 = a1;
  *((_QWORD *)&v17 + 1) = a2;
  v18 = a3;
  v19 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for ResolvedTextFieldStyle))
  {
    *(_QWORD *)&v13 = type metadata accessor for ResolvedTextFieldStyle();
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v12 = specialized static StyleableView._viewListCount(inputs:)(v17, *((_QWORD *)&v17 + 1), v18, v19);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v12;
  }
  type metadata accessor for StyleInput<TextField<_TextFieldStyleLabel>>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleInput<TextField<_TextFieldStyleLabel>> and conformance StyleInput<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleInput<TextField<_TextFieldStyleLabel>>, (uint64_t)&protocol conformance descriptor for StyleInput<A>);
  PropertyList.subscript.getter();
  if (!(_QWORD)v13)
  {
    v16 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(v13 + 24);
  v9 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v16 = v9;
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_8:
    v13 = v17;
    v14 = v18;
    v15 = v19;
    type metadata accessor for ResolvedTextFieldStyle();
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for TextFieldStyleModifier<DefaultTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultTextFieldStyle and conformance DefaultTextFieldStyle, (uint64_t)&type metadata for DefaultTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFieldStyleModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextFieldStyle);
    v11 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v13 = v17;
    v14 = v18;
    v15 = v19;
    v11 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v13, v8, result);
LABEL_9:
    v12 = v11;
    swift_bridgeObjectRelease();
    swift_release();
    return v12;
  }
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  *(_QWORD *)&v15 = a1;
  *((_QWORD *)&v15 + 1) = a2;
  v16 = a3;
  v17 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1, a2, a3, a4, type metadata accessor for ResolvedButtonStyle))
  {
    type metadata accessor for ResolvedButtonStyle(0);
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    v12 = v15;
    v13 = v16;
    v14 = v17;
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifie, type metadata accessor for ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ViewInputFlagModifier<TextSelectionForbidden>, MEMORY[0x1E0CE5518], MEMORY[0x1E0CE5508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentMod();
LABEL_9:
    v10 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_10;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for StyleInput<PrimitiveButtonStyleConfiguration>, type metadata accessor for PrimitiveButtonStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<PrimitiveButtonStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v12)
  {
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(v12 + 24);
  swift_retain();
  swift_release();
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_8:
    v12 = v15;
    v13 = v16;
    v14 = v17;
    type metadata accessor for ResolvedButtonStyle(0);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleModifier<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle, type metadata accessor for ResolvedButtonStyle, (uint64_t)&protocol conformance descriptor for ResolvedButtonStyle);
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v12 = v15;
    v13 = v16;
    v14 = v17;
    v10 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v12, v8, result);
LABEL_10:
    v11 = v10;
    swift_bridgeObjectRelease();
    swift_release();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance UIKitButtonStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitButtonStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t specialized static StyleModifier._makeView(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;

  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&v21[16] = v6;
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v22 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v22[16] = v7;
  v23 = *(_DWORD *)(a2 + 80);
  v20 = *(_OWORD *)a2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleOverrideInput<UIButton.Configuration>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC3228], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleOverrideInput);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type StyleOverrideInput<UIButton.Configuration> and conformance StyleOverrideInput<A>();
  PropertyList.subscript.getter();
  v8 = HIDWORD(v12);
  if (!v12)
  {
    LODWORD(v11) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<UIKitSystemButtonConfigurationModifier>, type metadata accessor for UIKitSystemButtonConfigurationModifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    type metadata accessor for StyleModifierType<UIKitSystemButtonConfigurationModifier>(0);
  }
  HIDWORD(v12) = v8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<UIKitButtonConfiguration>, (uint64_t)&type metadata for UIKitButtonConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<UIKitButtonConfiguration> and conformance StyleInput<A>();
  lazy protocol witness table accessor for type AnyStyleModifier and conformance AnyStyleModifier();
  _GraphInputs.append<A, B>(_:to:)();
  v11 = v20;
  LODWORD(v12) = DWORD2(v20);
  v13 = *(_QWORD *)v21;
  v14 = *(_OWORD *)&v21[8];
  v15 = *(_QWORD *)&v21[24];
  v16 = *(_QWORD *)v22;
  v17 = *(_OWORD *)&v22[8];
  v18 = *(_QWORD *)&v22[24];
  v19 = v23;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  a3(v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static StyleModifier._makeView(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  int v44;

  v8 = *a1;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = a2[5];
  v12 = a2[6];
  v13 = *((_DWORD *)a2 + 20);
  v36 = *a2;
  v37 = v9;
  v38 = v10;
  v39 = *(_OWORD *)(a2 + 3);
  v40 = v11;
  v41 = v12;
  v42 = *(_OWORD *)(a2 + 7);
  v43 = a2[9];
  v44 = v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for StyleOverrideInput(0, AssociatedTypeWitness, v15, v16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleOverrideInput<A>, v17);
  PropertyList.subscript.getter();
  HIDWORD(v18) = HIDWORD(v28);
  if (!v28)
  {
    LODWORD(v27) = v8;
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    v18 = type metadata accessor for StyleModifierType(0, a5, a6, v19);
  }
  HIDWORD(v28) = HIDWORD(v18);
  v20 = swift_getAssociatedTypeWitness();
  v23 = type metadata accessor for StyleInput(0, v20, v21, v22);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v23);
  lazy protocol witness table accessor for type AnyStyleModifier and conformance AnyStyleModifier();
  _GraphInputs.append<A, B>(_:to:)();
  v27 = v36;
  LODWORD(v28) = v37;
  v29 = v38;
  v30 = v39;
  v31 = v40;
  v32 = v41;
  v33 = v42;
  v34 = v43;
  v35 = v44;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v24 = swift_bridgeObjectRetain();
  a3(v24, &v27);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance UIKitButtonStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitButtonStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t specialized static StyleModifier._makeViewList(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  _BYTE v21[32];
  __int128 v22;
  __int128 v23;
  char v24;

  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&v21[16] = v6;
  v7 = *(_OWORD *)(a2 + 64);
  v22 = *(_OWORD *)(a2 + 48);
  v23 = v7;
  v24 = *(_BYTE *)(a2 + 80);
  v20 = *(_OWORD *)a2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleOverrideInput<UIButton.Configuration>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC3228], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleOverrideInput);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type StyleOverrideInput<UIButton.Configuration> and conformance StyleOverrideInput<A>();
  PropertyList.subscript.getter();
  v8 = HIDWORD(v12);
  if (!v12)
  {
    LODWORD(v11) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<UIKitSystemButtonConfigurationModifier>, type metadata accessor for UIKitSystemButtonConfigurationModifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    type metadata accessor for StyleModifierType<UIKitSystemButtonConfigurationModifier>(0);
  }
  HIDWORD(v12) = v8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<UIKitButtonConfiguration>, (uint64_t)&type metadata for UIKitButtonConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<UIKitButtonConfiguration> and conformance StyleInput<A>();
  lazy protocol witness table accessor for type AnyStyleModifier and conformance AnyStyleModifier();
  _GraphInputs.append<A, B>(_:to:)();
  v11 = v20;
  LODWORD(v12) = DWORD2(v20);
  v13 = *(_QWORD *)v21;
  v14 = *(_OWORD *)&v21[8];
  v15 = *(_QWORD *)&v21[24];
  v16 = v22;
  v17 = v23;
  v18 = *((_QWORD *)&v23 + 1);
  v19 = v24;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v9 = swift_bridgeObjectRetain();
  a3(v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for UIKitButtonStyleModifier<A>);
}

uint64_t specialized static StyleModifier._viewListCount(inputs:body:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(__int128 *))
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;

  *(_QWORD *)&v17 = a1;
  *((_QWORD *)&v17 + 1) = a2;
  v18 = a3;
  v19 = a4;
  v6 = *MEMORY[0x1E0CFED28];
  type metadata accessor for StyleModifierType<UIKitSystemButtonConfigurationModifier>(0);
  v8 = v7;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<UIKitButtonConfiguration>, (uint64_t)&type metadata for UIKitButtonConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<UIKitButtonConfiguration> and conformance StyleInput<A>();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = v6;
  v10 = v13;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v9 + 32) = v10;
  v16 = v9;
  PropertyList.subscript.setter();
  v13 = v17;
  v14 = v18;
  v15 = v19;
  swift_retain();
  swift_bridgeObjectRetain();
  v11 = a5(&v13);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v11;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance UIKitSystemButtonConfigurationModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static StyleModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance UIKitSystemButtonConfigurationModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static StyleModifier._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t (*a2)(__int128 *))
{
  return specialized static StyleModifier._viewListCount(inputs:body:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedDivider(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedDivider(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedDivider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DividerStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DividerStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance DividerStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for DividerStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedColorPickerStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedColorPickerStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedColorPickerStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ColorPickerStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColorPickerStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ColorPickerStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColorPickerStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ColorPickerStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for ColorPickerStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedMenuStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedMenuStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedMenuStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance MenuStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance MenuStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance MenuStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for MenuStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedTextEditorStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedTextEditorStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedTextEditorStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for View.body.getter in conformance ResolvedTextEditorStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, a1, type metadata accessor for ResolvedTextEditorStyle);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TextEditorStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextEditorStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TextEditorStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextEditorStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance TextEditorStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for TextEditorStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedToggleStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedToggleStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedToggleStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ToggleStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToggleStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ToggleStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToggleStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ToggleStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for ToggleStyleModifier<A>);
}

double specialized static StaticIf<>._makeView(view:inputs:)@<D0>(double *a1@<X8>)
{
  uint64_t (*v2)();
  unint64_t *v3;
  void *v4;
  double result;
  char v6;
  uint64_t v7;
  double v8;

  lazy protocol witness table accessor for type MultiViewLabel and conformance MultiViewLabel();
  PropertyList.subscript.getter();
  if (v6 == 1)
  {
    type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
    v2 = type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.subscript.getter();
    v3 = (unint64_t *)&lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>;
    v4 = &protocol conformance descriptor for Label<A, B>;
  }
  else
  {
    type metadata accessor for PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>();
    v2 = type metadata accessor for PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.subscript.getter();
    v3 = (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>> and conformance PlatformItemLabelView<A, B, C>;
    v4 = &protocol conformance descriptor for PlatformItemLabelView<A, B, C>;
  }
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v3, (uint64_t (*)(uint64_t))v2, (uint64_t)v4);
  static View.makeDebuggableView(view:inputs:)();
  result = v8;
  *(_QWORD *)a1 = v7;
  a1[1] = v8;
  return result;
}

uint64_t specialized static StaticIf<>._makeViewList(view:inputs:)()
{
  uint64_t (*v0)();
  unint64_t *v1;
  void *v2;
  char v4;

  lazy protocol witness table accessor for type MultiViewLabel and conformance MultiViewLabel();
  PropertyList.subscript.getter();
  if (v4 == 1)
  {
    type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
    v0 = type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.subscript.getter();
    v1 = (unint64_t *)&lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>;
    v2 = &protocol conformance descriptor for Label<A, B>;
  }
  else
  {
    type metadata accessor for PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>();
    v0 = type metadata accessor for PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.subscript.getter();
    v1 = (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>> and conformance PlatformItemLabelView<A, B, C>;
    v2 = &protocol conformance descriptor for PlatformItemLabelView<A, B, C>;
  }
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v1, (uint64_t (*)(uint64_t))v0, (uint64_t)v2);
  return static View.makeDebuggableViewList(view:inputs:)();
}

uint64_t specialized static StaticIf<>._viewListCount(inputs:)()
{
  _ViewListCountInputs.base.getter();
  static InterfaceIdiomPredicate.evaluate(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, MEMORY[0x1E0CE45F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

{
  _ViewListCountInputs.base.getter();
  static InterfaceIdiomPredicate.evaluate(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>, _FlexFrameLayout>, VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _();
  type metadata accessor for AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>(0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>, _FlexFrameLayout>, VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfi();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t specialized static StaticIf<>._viewListCount(inputs:)(char a1)
{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type MultiViewLabel and conformance MultiViewLabel();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (a1 == 1)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, LabelStyleConfiguration.Title>>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, LabelStyleConfiguration.Title>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  }
  else
  {
    type metadata accessor for ModifiedContent<MergePlatformItemsView<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>, PlatformItemListGeneratingViewModifier<TextPlatformItemListFlags, MergePlatformItemsView<ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>>>>(0);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformItemListTransformModifier<TextPlatformItemListFlags>, (uint64_t)&type metadata for TextPlatformItemListFlags, (uint64_t)&protocol witness table for TextPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<MergePlatformItemsView<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>, PlatformItemListGeneratingViewModifier<TextPlatformItemListFlags, MergePlatformItemsView<ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<MergePlatformItemsView<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>, PlatformItemListGeneratingViewModifier<TextPlatformItemListFlags, MergePlatformItemsView<ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>>>>, (uint64_t)&protocol witness table for MergePlatformItemsView<A>, (uint64_t)&protocol witness table for PlatformItemListGeneratingViewModifier<A, B>);
  }
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance IndexViewBody(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance IndexViewBody(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance IndexViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for View.body.getter in conformance IndexViewBody@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of IndexViewBody(v1, a1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IndexViewStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexViewStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IndexViewStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexViewStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance IndexViewStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for IndexViewStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedDisclosureGroupStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedDisclosureGroupStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedDisclosureGroupStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DisclosureGroupStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroupStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DisclosureGroupStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroupStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance DisclosureGroupStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for DisclosureGroupStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedRadioGroupPicker(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedRadioGroupPicker(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedRadioGroupPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance RadioGroupStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RadioGroupStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RadioGroupStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RadioGroupStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance RadioGroupStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for RadioGroupStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedNavigationSplitStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedNavigationSplitStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedNavigationSplitStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationSplitStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationSplitStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance NavigationSplitStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for NavigationSplitStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedButtonStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ButtonStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ButtonStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for ButtonStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedNavigationViewStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedNavigationViewStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedNavigationViewStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationViewStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationViewStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationViewStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationViewStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance NavigationViewStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for NavigationViewStyleModifier<A>);
}

BOOL specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(ValueMetadata *a1)
{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for IndexViewBody;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedNavigationStackStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedNavigationSplitStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedDisclosureGroupStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedNavigationViewStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedRadioGroupPicker;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedCustomButtonMenu;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedColorPickerStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedUIKitButtonBody;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedLabelGroupStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedLabeledContent;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedGroupBoxStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedSectionStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedControlGroup;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedToggleStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedSliderStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedTableStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedLabelStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedGaugeStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedBadgedView;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedMenuStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedHelpStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedFormStyle;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for ResolvedDivider;
}

{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 == &type metadata for StepperBody;
}

BOOL specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  _ViewListCountInputs.base.getter();
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1 && a5(0) == a1;
}

uint64_t MakeDefaultRepresentation.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Value;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v9 = (char *)&v17 - v8;
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, Value, a2);
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  MEMORY[0x18D75B4AC](v9, a2, AssociatedTypeWitness, *(_QWORD *)(a3 + 8));
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, a2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance MakeDefaultRepresentation<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance MakeDefaultRepresentation<A>(uint64_t a1)
{
  unsigned int *v1;

  return MakeDefaultRepresentation.value.getter(*v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t MakeResolvedRepresentation.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Value;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, Value, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 48))(a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance MakeResolvedRepresentation<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for Rule.value.getter in conformance MakeResolvedRepresentation<A>(uint64_t a1)
{
  unsigned int *v1;

  return MakeResolvedRepresentation.value.getter(*v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t static AutomaticStyleOverrideModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  type metadata accessor for AutomaticStyleOverrideModifier(255, a3, a4, a5);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  v13[0] = _GraphValue.value.getter();
  v13[1] = type metadata accessor for StyleModifierType(0, a4, a5, v8);
  v11 = type metadata accessor for StyleOverrideInput(0, a3, v9, v10);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleOverrideInput<A>, v11);
  return specialized _GraphInputs.subscript.setter((uint64_t)v13);
}

uint64_t closure #1 in static AutomaticStyleOverrideModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for AutomaticStyleOverrideModifier(0, a2, a3, a4);
  v9[3] = a3;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a3, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance AutomaticStyleOverrideModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static AutomaticStyleOverrideModifier._makeInputs(modifier:inputs:)(a1, a2, a3[2], a3[3], a3[4]);
}

_UNKNOWN **base witness table accessor for ViewModifier in AutomaticStyleOverrideModifier<A, B>()
{
  return &protocol witness table for AutomaticStyleOverrideModifier<A, B>;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AutomaticStyleOverrideModifier<A, B>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AutomaticStyleOverrideModifier<A, B>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance AutomaticStyleOverrideModifier<A, B>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SizedCircularPercentageGauge()
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, MEMORY[0x1E0CE45F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedTextFieldStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedTextFieldStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedTextFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for View.body.getter in conformance ResolvedTextFieldStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for ResolvedTextFieldStyle);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TextFieldStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextFieldStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TextFieldStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextFieldStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance TextFieldStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for TextFieldStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedProgressViewStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedProgressViewStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedProgressViewStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ProgressViewStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ProgressViewStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ProgressViewStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for ProgressViewStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedSliderStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedSliderStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedSliderStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

id protocol witness for View.body.getter in conformance ResolvedSliderStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = *((_BYTE *)v1 + 64);
  v11 = (void *)v1[9];
  v12 = (void *)v1[10];
  v14 = (void *)v1[11];
  v13 = (void *)v1[12];
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return outlined copy of AccessibilitySliderValue?(v11, v12, v14, v13);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SliderStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SliderStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SliderStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SliderStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SliderStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for SliderStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedLabelGroupStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedLabelGroupStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedLabelGroupStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LabelGroupStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelGroupStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LabelGroupStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelGroupStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance LabelGroupStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for LabelGroupStyleModifier<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SizedHalfOpenCircularGauge()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>, _FlexFrameLayout>, VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _();
  type metadata accessor for AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>(0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>, _FlexFrameLayout>, VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfi();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedSectionStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SectionStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedFormStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedFormStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedFormStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance FormStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance FormStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance FormStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for FormStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedNavigationStackStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedNavigationStackStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedNavigationStackStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for View.body.getter in conformance ResolvedNavigationStackStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_DWORD *)(v1 + 48);
  v6 = *(_BYTE *)(v1 + 52);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 52) = v6;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationStackStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationStackStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance NavigationStackStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for NavigationStackStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance StepperBody(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance StepperBody(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance StepperBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for View.body.getter in conformance StepperBody@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = v1[6];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v7;
  a1[5] = v6;
  a1[6] = v8;
  swift_retain();
  outlined copy of AppIntentExecutor?(v3);
  outlined copy of AppIntentExecutor?(v5);
  return swift_retain();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance StepperStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StepperStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance StepperStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StepperStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance StepperStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for StepperStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedTokenFieldStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedTokenFieldStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedTokenFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for View.body.getter in conformance ResolvedTokenFieldStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, a1, type metadata accessor for ResolvedTokenFieldStyle);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TokenFieldStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenFieldStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TokenFieldStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenFieldStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance TokenFieldStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for TokenFieldStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedBadgedView(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedBadgedView(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedBadgedView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance BadgedViewStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BadgedViewStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BadgedViewStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BadgedViewStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance BadgedViewStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for BadgedViewStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedTableStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedTableStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedTableStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for View.body.getter in conformance ResolvedTableStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ResolvedTableStyle(v1, a1);
}

uint64_t outlined init with copy of ResolvedTableStyle(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TableStyleConfiguration(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StyleableViewContextInput and conformance StyleableViewContextInput;
  if (!lazy protocol witness table cache variable for type StyleableViewContextInput and conformance StyleableViewContextInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleableViewContextInput, &type metadata for StyleableViewContextInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleableViewContextInput and conformance StyleableViewContextInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StyleableViewContextInput and conformance StyleableViewContextInput;
  if (!lazy protocol witness table cache variable for type StyleableViewContextInput and conformance StyleableViewContextInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleableViewContextInput, &type metadata for StyleableViewContextInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleableViewContextInput and conformance StyleableViewContextInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<TableStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<TableStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<TableStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<TableStyleConfiguration>, (uint64_t)&type metadata for TableStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<TableStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomaticTableStyle and conformance AutomaticTableStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticTableStyle and conformance AutomaticTableStyle;
  if (!lazy protocol witness table cache variable for type AutomaticTableStyle and conformance AutomaticTableStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticTableStyle, &type metadata for AutomaticTableStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticTableStyle and conformance AutomaticTableStyle);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TableStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TableStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance TableStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for TableStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedGaugeStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedGaugeStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedGaugeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

double protocol witness for View.body.getter in conformance ResolvedGaugeStyle@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  char v3;
  char v4;
  char v5;

  result = *(double *)v1;
  v3 = *(_BYTE *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 9);
  v5 = *(_BYTE *)(v1 + 10);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4;
  *(_BYTE *)(a1 + 10) = v5;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance GaugeStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance GaugeStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance GaugeStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for GaugeStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedControlGroup(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedControlGroup(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedControlGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ControlGroupStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlGroupStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ControlGroupStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlGroupStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ControlGroupStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for ControlGroupStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedGroupBoxStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedGroupBoxStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedGroupBoxStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance GroupBoxStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupBoxStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance GroupBoxStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupBoxStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance GroupBoxStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for GroupBoxStyleModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CustomButtonMenuStyleWriter<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomButtonMenuStyleWriter<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance CustomButtonMenuStyleWriter<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for CustomButtonMenuStyleWriter<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedCustomButtonMenu(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedCustomButtonMenu(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedCustomButtonMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HelpStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HelpStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance HelpStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HelpStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance HelpStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for HelpStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedHelpStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedHelpStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedHelpStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedLabeledContent(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedLabeledContent(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedLabeledContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _LabeledContentStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _LabeledContentStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _LabeledContentStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _LabeledContentStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _LabeledContentStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for _LabeledContentStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedSearchFieldStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedSearchFieldStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedSearchFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for View.body.getter in conformance ResolvedSearchFieldStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, a1, type metadata accessor for ResolvedSearchFieldStyle);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SearchFieldStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SearchFieldStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SearchFieldStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for SearchFieldStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedLabelStyle@<X0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static StyleableView._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedLabelStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedLabelStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LabelStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LabelStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance LabelStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for LabelStyleModifier<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedDatePickerStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedDatePickerStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedDatePickerStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, specialized static StyleableView._viewListCount(inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DatePickerStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DatePickerStyleModifier<A>, a5);
  return static StyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DatePickerStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DatePickerStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance DatePickerStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for DatePickerStyleModifier<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](a6, a4);
  return static StyleModifier._viewListCount(inputs:body:)(a1, a2, a3, a4, v10);
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedTableStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedTableStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedTableStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedTableStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedTableStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedTableStyle, TableStyleModifier<AutomaticTableStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedTableStyle, TableStyleModifier<AutomaticTableStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for TableStyleModifier<AutomaticTableStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticTableStyle and conformance AutomaticTableStyle, (uint64_t)&type metadata for AutomaticTableStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TableStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedTableStyle, TableStyleModifier<AutomaticTableStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedTableStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedTableStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedTableStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedTableStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedTableStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedTableStyle, TableStyleModifier<AutomaticTableStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedTableStyle, TableStyleModifier<AutomaticTableStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedTableStyle, TableStyleModifier<AutomaticTableStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedTableStyle, TableStyleModifier<AutomaticTableStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle();
    v3[1] = &protocol witness table for TableStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedTableStyle, TableStyleModifier<AutomaticTableStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<LabelGroupStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<LabelGroupStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<LabelGroupStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<LabelGroupStyleConfiguration>, (uint64_t)&type metadata for LabelGroupStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<LabelGroupStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedLabelGroupStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedLabelGroupStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedLabelGroupStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedLabelGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle, (uint64_t)&type metadata for ResolvedLabelGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedLabelGroupStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedLabelGroupStyle, LabelGroupStyleModifier<BodyLabelGroupStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedLabelGroupStyle, LabelGroupStyleModifier<BodyLabelGroupStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for LabelGroupStyleModifier<BodyLabelGroupStyle>, (uint64_t)&type metadata for BodyLabelGroupStyle, (uint64_t)&protocol witness table for BodyLabelGroupStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LabelGroupStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedLabelGroupStyle, LabelGroupStyleModifier<BodyLabelGroupStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedLabelGroupStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedLabelGroupStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedLabelGroupStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedLabelGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle, (uint64_t)&type metadata for ResolvedLabelGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedLabelGroupStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelGroupStyle, LabelGroupStyleModifier<BodyLabelGroupStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelGroupStyle, LabelGroupStyleModifier<BodyLabelGroupStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelGroupStyle, LabelGroupStyleModifier<BodyLabelGroupStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelGroupStyle, LabelGroupStyleModifier<BodyLabelGroupStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle();
    v3[1] = &protocol witness table for LabelGroupStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelGroupStyle, LabelGroupStyleModifier<BodyLabelGroupStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<SliderStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<SliderStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<SliderStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<SliderStyleConfiguration>, (uint64_t)&type metadata for SliderStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<SliderStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomaticSliderStyle and conformance AutomaticSliderStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticSliderStyle and conformance AutomaticSliderStyle;
  if (!lazy protocol witness table cache variable for type AutomaticSliderStyle and conformance AutomaticSliderStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticSliderStyle, &type metadata for AutomaticSliderStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticSliderStyle and conformance AutomaticSliderStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedSliderStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedSliderStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedSliderStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedSliderStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle, (uint64_t)&type metadata for ResolvedSliderStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedSliderStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedSliderStyle, SliderStyleModifier<AutomaticSliderStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedSliderStyle, SliderStyleModifier<AutomaticSliderStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for SliderStyleModifier<AutomaticSliderStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticSliderStyle and conformance AutomaticSliderStyle, (uint64_t)&type metadata for AutomaticSliderStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SliderStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedSliderStyle, SliderStyleModifier<AutomaticSliderStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedSliderStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedSliderStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedSliderStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedSliderStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle, (uint64_t)&type metadata for ResolvedSliderStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedSliderStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedSliderStyle, SliderStyleModifier<AutomaticSliderStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedSliderStyle, SliderStyleModifier<AutomaticSliderStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedSliderStyle, SliderStyleModifier<AutomaticSliderStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedSliderStyle, SliderStyleModifier<AutomaticSliderStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle();
    v3[1] = &protocol witness table for SliderStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedSliderStyle, SliderStyleModifier<AutomaticSliderStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LabeledContent);
    type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>);
  }
}

uint64_t type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, (uint64_t)&type metadata for AccessibilityLabeledContentLabelModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label();
    lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, (uint64_t)&type metadata for AccessibilityLabeledContentLabelModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for LabeledContentStyleConfiguration.Label;
    v2[1] = &protocol witness table for AccessibilityLabeledContentLabelModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>)
  {
    type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>();
    lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content();
    lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>, (uint64_t)&protocol witness table for LabeledContentStyleConfiguration.Content, (uint64_t)&protocol witness table for AccessibilityLabeledContentContentModifier<A>);
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, (uint64_t)&protocol witness table for LabeledContentStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityLabeledContentContentModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance <> LabeledContent<A, B>();
    v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance <> LabeledContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LabeledContent);
    v2[0] = &protocol witness table for LabeledContentStyleConfiguration.Label;
    v2[1] = &protocol witness table for LabeledContentStyleConfiguration.Content;
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<LabeledContentStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<LabeledContentStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<LabeledContentStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<LabeledContentStyleConfiguration>, (uint64_t)&type metadata for LabeledContentStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<LabeledContentStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedLabeledContent> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedLabeledContent> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedLabeledContent> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent, (uint64_t)&type metadata for ResolvedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedLabeledContent> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedLabeledContent._Body and conformance ResolvedLabeledContent._Body()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedLabeledContent._Body and conformance ResolvedLabeledContent._Body;
  if (!lazy protocol witness table cache variable for type ResolvedLabeledContent._Body and conformance ResolvedLabeledContent._Body)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedLabeledContent._Body, &type metadata for ResolvedLabeledContent._Body);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedLabeledContent._Body and conformance ResolvedLabeledContent._Body);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedLabeledContent, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedLabeledContent, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticLabeledContentStyle and conformance AutomaticLabeledContentStyle, (uint64_t)&type metadata for AutomaticLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedLabeledContent, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedLabeledContent> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedLabeledContent> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedLabeledContent> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent, (uint64_t)&type metadata for ResolvedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedLabeledContent> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedLabeledContent, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabeledContent, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabeledContent, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabeledContent, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent();
    v3[1] = &protocol witness table for _LabeledContentStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabeledContent, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<ToggleStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<ToggleStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<ToggleStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<ToggleStyleConfiguration>, (uint64_t)&type metadata for ToggleStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<ToggleStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for KeyboardShortcutBindingBehavior);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedToggleStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedToggleStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedToggleStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle, (uint64_t)&type metadata for ResolvedToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedToggleStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedToggleStyle, ToggleStyleModifier<DefaultToggleStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedToggleStyle, ToggleStyleModifier<DefaultToggleStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<DefaultToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultToggleStyle and conformance DefaultToggleStyle, (uint64_t)&type metadata for DefaultToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedToggleStyle, ToggleStyleModifier<DefaultToggleStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedToggleStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedToggleStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedToggleStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle, (uint64_t)&type metadata for ResolvedToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedToggleStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedToggleStyle, ToggleStyleModifier<DefaultToggleStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyle, ToggleStyleModifier<DefaultToggleStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyle, ToggleStyleModifier<DefaultToggleStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedToggleStyle, ToggleStyleModifier<DefaultToggleStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle();
    v3[1] = &protocol witness table for ToggleStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyle, ToggleStyleModifier<DefaultToggleStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for StyleInput<TextField<_TextFieldStyleLabel>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for StyleInput<TextField<_TextFieldStyleLabel>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
    v5 = type metadata accessor for StyleInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for StyleInput<TextField<_TextFieldStyleLabel>>);
  }
}

unint64_t lazy protocol witness table accessor for type DefaultTextFieldStyle and conformance DefaultTextFieldStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultTextFieldStyle and conformance DefaultTextFieldStyle;
  if (!lazy protocol witness table cache variable for type DefaultTextFieldStyle and conformance DefaultTextFieldStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultTextFieldStyle, &type metadata for DefaultTextFieldStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultTextFieldStyle and conformance DefaultTextFieldStyle);
  }
  return result;
}

void type metadata accessor for MakeResolvedRepresentation<ResolvedTextFieldStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ResolvedRepresentation;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedTextFieldStyle>)
  {
    v2 = type metadata accessor for ResolvedTextFieldStyle();
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextFieldStyle);
    ResolvedRepresentation = type metadata accessor for MakeResolvedRepresentation(a1, v2, v3, v4);
    if (!v6)
      atomic_store(ResolvedRepresentation, (unint64_t *)&lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedTextFieldStyle>);
  }
}

void type metadata accessor for ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>>)
  {
    type metadata accessor for ResolvedTextFieldStyle();
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for TextFieldStyleModifier<DefaultTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultTextFieldStyle and conformance DefaultTextFieldStyle, (uint64_t)&type metadata for DefaultTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFieldStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>>);
  }
}

void type metadata accessor for MakeDefaultRepresentation<ResolvedTextFieldStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t DefaultRepresentation;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedTextFieldStyle>)
  {
    v2 = type metadata accessor for ResolvedTextFieldStyle();
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextFieldStyle);
    DefaultRepresentation = type metadata accessor for MakeDefaultRepresentation(a1, v2, v3, v4);
    if (!v6)
      atomic_store(DefaultRepresentation, (unint64_t *)&lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedTextFieldStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextFieldStyle);
    v3[1] = &protocol witness table for TextFieldStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<MenuStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<MenuStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<MenuStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<MenuStyleConfiguration>, (uint64_t)&type metadata for MenuStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<MenuStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedMenuStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedMenuStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedMenuStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle, (uint64_t)&type metadata for ResolvedMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedMenuStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedMenuStyle, MenuStyleModifier<DefaultMenuStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedMenuStyle, MenuStyleModifier<DefaultMenuStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<DefaultMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle, (uint64_t)&type metadata for DefaultMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedMenuStyle, MenuStyleModifier<DefaultMenuStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedMenuStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedMenuStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedMenuStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle, (uint64_t)&type metadata for ResolvedMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedMenuStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedMenuStyle, MenuStyleModifier<DefaultMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedMenuStyle, MenuStyleModifier<DefaultMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedMenuStyle, MenuStyleModifier<DefaultMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedMenuStyle, MenuStyleModifier<DefaultMenuStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle();
    v3[1] = &protocol witness table for MenuStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedMenuStyle, MenuStyleModifier<DefaultMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyStyleModifier and conformance AnyStyleModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyStyleModifier and conformance AnyStyleModifier;
  if (!lazy protocol witness table cache variable for type AnyStyleModifier and conformance AnyStyleModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyStyleModifier, &unk_1E1ABE5E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyStyleModifier and conformance AnyStyleModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<DividerStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<DividerStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<DividerStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<DividerStyleConfiguration>, (uint64_t)&type metadata for DividerStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<DividerStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedDivider, DividerStyleModifier<DefaultDividerStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedDivider, DividerStyleModifier<DefaultDividerStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for DividerStyleModifier<DefaultDividerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultDividerStyle and conformance DefaultDividerStyle, (uint64_t)&type metadata for DefaultDividerStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DividerStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedDivider, DividerStyleModifier<DefaultDividerStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedDivider> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedDivider> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedDivider> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedDivider>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider, (uint64_t)&type metadata for ResolvedDivider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedDivider> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedDivider, DividerStyleModifier<DefaultDividerStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedDivider, DividerStyleModifier<DefaultDividerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedDivider, DividerStyleModifier<DefaultDividerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedDivider, DividerStyleModifier<DefaultDividerStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider();
    v3[1] = &protocol witness table for DividerStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedDivider, DividerStyleModifier<DefaultDividerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<GroupBoxStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<GroupBoxStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<GroupBoxStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<GroupBoxStyleConfiguration>, (uint64_t)&type metadata for GroupBoxStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<GroupBoxStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle;
  if (!lazy protocol witness table cache variable for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedGroupBoxStyle, &type metadata for ResolvedGroupBoxStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle;
  if (!lazy protocol witness table cache variable for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedGroupBoxStyle, &type metadata for ResolvedGroupBoxStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle);
  }
  return result;
}

void type metadata accessor for _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for _UnaryViewAdaptor();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>>);
  }
}

void type metadata accessor for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>)
  {
    type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>);
  }
}

uint64_t type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>;
  if (!lazy cache variable for type metadata for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>)
    type metadata accessor for GroupBox();
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content> and conformance GroupBox<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, (uint64_t)&protocol conformance descriptor for GroupBox<A, B>);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Int> and conformance _EnvironmentKeyTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Int> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Int> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Int> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Int> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedGroupBoxStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedGroupBoxStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedGroupBoxStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedGroupBoxStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle, (uint64_t)&type metadata for ResolvedGroupBoxStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedGroupBoxStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedGroupBoxStyle, GroupBoxStyleModifier<DefaultGroupBoxStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedGroupBoxStyle, GroupBoxStyleModifier<DefaultGroupBoxStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for GroupBoxStyleModifier<DefaultGroupBoxStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultGroupBoxStyle and conformance DefaultGroupBoxStyle, (uint64_t)&type metadata for DefaultGroupBoxStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GroupBoxStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedGroupBoxStyle, GroupBoxStyleModifier<DefaultGroupBoxStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedGroupBoxStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedGroupBoxStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedGroupBoxStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedGroupBoxStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle, (uint64_t)&type metadata for ResolvedGroupBoxStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedGroupBoxStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedGroupBoxStyle, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedGroupBoxStyle, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedGroupBoxStyle, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedGroupBoxStyle, GroupBoxStyleModifier<DefaultGroupBoxStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle();
    v3[1] = &protocol witness table for GroupBoxStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedGroupBoxStyle, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for StaticSourceWriter<FormStyleConfiguration.Content, FormStyleConfiguration.Content>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<FormStyleConfiguration.Content, FormStyleConfiguration.Content>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<FormStyleConfiguration.Content, FormStyleConfiguration.Content>)
  {
    lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormStyleConfiguration.Content, &type metadata for FormStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormStyleConfiguration.Content, &type metadata for FormStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedFormStyle and conformance ResolvedFormStyle;
  if (!lazy protocol witness table cache variable for type ResolvedFormStyle and conformance ResolvedFormStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedFormStyle, &type metadata for ResolvedFormStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedFormStyle and conformance ResolvedFormStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedFormStyle and conformance ResolvedFormStyle;
  if (!lazy protocol witness table cache variable for type ResolvedFormStyle and conformance ResolvedFormStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedFormStyle, &type metadata for ResolvedFormStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedFormStyle and conformance ResolvedFormStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<FormStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<FormStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<FormStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<FormStyleConfiguration>, (uint64_t)&type metadata for FormStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<FormStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomaticFormStyle and conformance AutomaticFormStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticFormStyle and conformance AutomaticFormStyle;
  if (!lazy protocol witness table cache variable for type AutomaticFormStyle and conformance AutomaticFormStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticFormStyle, &type metadata for AutomaticFormStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticFormStyle and conformance AutomaticFormStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedFormStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedFormStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedFormStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedFormStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle, (uint64_t)&type metadata for ResolvedFormStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedFormStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Form<FormStyleConfiguration.Content> and conformance Form<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Form<FormStyleConfiguration.Content> and conformance Form<A>;
  if (!lazy protocol witness table cache variable for type Form<FormStyleConfiguration.Content> and conformance Form<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Form<FormStyleConfiguration.Content>, (uint64_t)&type metadata for FormStyleConfiguration.Content, (uint64_t)&protocol witness table for FormStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Form);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Form<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Form<FormStyleConfiguration.Content> and conformance Form<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedFormStyle, FormStyleModifier<AutomaticFormStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedFormStyle, FormStyleModifier<AutomaticFormStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for FormStyleModifier<AutomaticFormStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticFormStyle and conformance AutomaticFormStyle, (uint64_t)&type metadata for AutomaticFormStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedFormStyle, FormStyleModifier<AutomaticFormStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedFormStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedFormStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedFormStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedFormStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle, (uint64_t)&type metadata for ResolvedFormStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedFormStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedFormStyle, FormStyleModifier<AutomaticFormStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedFormStyle, FormStyleModifier<AutomaticFormStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedFormStyle, FormStyleModifier<AutomaticFormStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedFormStyle, FormStyleModifier<AutomaticFormStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();
    v3[1] = &protocol witness table for FormStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedFormStyle, FormStyleModifier<AutomaticFormStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for StaticSourceWriter<DisclosureGroupStyleConfiguration.Label, ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<DisclosureGroupStyleConfiguration.Label, ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<DisclosureGroupStyleConfiguration.Label, ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>();
    lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Label, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>, (uint64_t (*)(void))lazy protocol witness table accessor for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator, (uint64_t)&type metadata for HideNavigationLinkDisclosureIndicator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>);
  }
}

unint64_t lazy protocol witness table accessor for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator;
  if (!lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HideNavigationLinkDisclosureIndicator, &type metadata for HideNavigationLinkDisclosureIndicator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator;
  if (!lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HideNavigationLinkDisclosureIndicator, &type metadata for HideNavigationLinkDisclosureIndicator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator;
  if (!lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HideNavigationLinkDisclosureIndicator, &type metadata for HideNavigationLinkDisclosureIndicator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator;
  if (!lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HideNavigationLinkDisclosureIndicator, &type metadata for HideNavigationLinkDisclosureIndicator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator;
  if (!lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HideNavigationLinkDisclosureIndicator, &type metadata for HideNavigationLinkDisclosureIndicator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Label, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for DisclosureGroupStyleConfiguration.Label;
    v2[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for StaticSourceWriter<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleConfiguration.Content>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleConfiguration.Content>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleConfiguration.Content>)
  {
    lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedDisclosureGroupStyle, StaticSourceWriter<DisclosureGroupStyleConfiguration.Label, ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedDisclosureGroupStyle, StaticSourceWriter<DisclosureGroupStyleConfiguration.Label, ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedDisclosureGroupStyle, StaticSourceWriter<DisclosureGroupStyleConfiguration.Label, ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedDisclosureGroupStyle, StaticSourceWriter<DisclosureGroupStyleConfiguration.Label, ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<DisclosureGroupStyleConfiguration.Label, ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle();
    v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedDisclosureGroupStyle, StaticSourceWriter<DisclosureGroupStyleConfiguration.Label, ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Label, AccessibilityAttachmentModifier>, ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<DisclosureGroupStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<DisclosureGroupStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<DisclosureGroupStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<DisclosureGroupStyleConfiguration>, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<DisclosureGroupStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedDisclosureGroupStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedDisclosureGroupStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedDisclosureGroupStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle, (uint64_t)&type metadata for ResolvedDisclosureGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedDisclosureGroupStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedDisclosureGroupStyle, DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedDisclosureGroupStyle, DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticDisclosureGroupStyle and conformance AutomaticDisclosureGroupStyle, (uint64_t)&type metadata for AutomaticDisclosureGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisclosureGroupStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedDisclosureGroupStyle, DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedDisclosureGroupStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedDisclosureGroupStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedDisclosureGroupStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle, (uint64_t)&type metadata for ResolvedDisclosureGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedDisclosureGroupStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedDisclosureGroupStyle, DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedDisclosureGroupStyle, DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedDisclosureGroupStyle, DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedDisclosureGroupStyle, DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle();
    v3[1] = &protocol witness table for DisclosureGroupStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedDisclosureGroupStyle, DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ControlGroup<ControlGroupStyleConfiguration.Content>, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, (uint64_t)&protocol witness table for ControlGroupStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ControlGroup);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>, (uint64_t)&type metadata for AccessibilityLargeContentViewTree.Key, (uint64_t)&protocol witness table for AccessibilityLargeContentViewTree.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>();
    v2 = v1;
    v6[0] = lazy protocol witness table accessor for type ControlGroup<ControlGroupStyleConfiguration.Content> and conformance ControlGroup<A>(v1, v3, v4, v5);
    v6[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key> and conformance _PreferenceTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v6);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<ControlGroupStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<ControlGroupStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<ControlGroupStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<ControlGroupStyleConfiguration>, (uint64_t)&type metadata for ControlGroupStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<ControlGroupStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomaticControlGroupStyle and conformance AutomaticControlGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticControlGroupStyle and conformance AutomaticControlGroupStyle;
  if (!lazy protocol witness table cache variable for type AutomaticControlGroupStyle and conformance AutomaticControlGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticControlGroupStyle, &type metadata for AutomaticControlGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticControlGroupStyle and conformance AutomaticControlGroupStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedControlGroup and conformance ResolvedControlGroup;
  if (!lazy protocol witness table cache variable for type ResolvedControlGroup and conformance ResolvedControlGroup)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedControlGroup, &type metadata for ResolvedControlGroup);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedControlGroup and conformance ResolvedControlGroup);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedControlGroup and conformance ResolvedControlGroup;
  if (!lazy protocol witness table cache variable for type ResolvedControlGroup and conformance ResolvedControlGroup)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedControlGroup, &type metadata for ResolvedControlGroup);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedControlGroup and conformance ResolvedControlGroup);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedControlGroup> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedControlGroup> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedControlGroup> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedControlGroup>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup, (uint64_t)&type metadata for ResolvedControlGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedControlGroup> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedControlGroup, ControlGroupStyleModifier<AutomaticControlGroupStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedControlGroup, ControlGroupStyleModifier<AutomaticControlGroupStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ControlGroupStyleModifier<AutomaticControlGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticControlGroupStyle and conformance AutomaticControlGroupStyle, (uint64_t)&type metadata for AutomaticControlGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ControlGroupStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedControlGroup, ControlGroupStyleModifier<AutomaticControlGroupStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedControlGroup> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedControlGroup> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedControlGroup> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedControlGroup>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup, (uint64_t)&type metadata for ResolvedControlGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedControlGroup> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedControlGroup, ControlGroupStyleModifier<AutomaticControlGroupStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedControlGroup, ControlGroupStyleModifier<AutomaticControlGroupStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedControlGroup, ControlGroupStyleModifier<AutomaticControlGroupStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedControlGroup, ControlGroupStyleModifier<AutomaticControlGroupStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
    v3[1] = &protocol witness table for ControlGroupStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedControlGroup, ControlGroupStyleModifier<AutomaticControlGroupStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<SearchFieldConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<SearchFieldConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<SearchFieldConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for StyleInput<SearchFieldConfiguration>, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<SearchFieldConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomaticSearchFieldStyle and conformance AutomaticSearchFieldStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticSearchFieldStyle and conformance AutomaticSearchFieldStyle;
  if (!lazy protocol witness table cache variable for type AutomaticSearchFieldStyle and conformance AutomaticSearchFieldStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticSearchFieldStyle, &type metadata for AutomaticSearchFieldStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticSearchFieldStyle and conformance AutomaticSearchFieldStyle);
  }
  return result;
}

void type metadata accessor for MakeResolvedRepresentation<ResolvedSearchFieldStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ResolvedRepresentation;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedSearchFieldStyle>)
  {
    v2 = type metadata accessor for ResolvedSearchFieldStyle(255);
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle, type metadata accessor for ResolvedSearchFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedSearchFieldStyle);
    ResolvedRepresentation = type metadata accessor for MakeResolvedRepresentation(a1, v2, v3, v4);
    if (!v6)
      atomic_store(ResolvedRepresentation, (unint64_t *)&lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedSearchFieldStyle>);
  }
}

void type metadata accessor for ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>>)
  {
    type metadata accessor for ResolvedSearchFieldStyle(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for SearchFieldStyleModifier<AutomaticSearchFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticSearchFieldStyle and conformance AutomaticSearchFieldStyle, (uint64_t)&type metadata for AutomaticSearchFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SearchFieldStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>>);
  }
}

void type metadata accessor for MakeDefaultRepresentation<ResolvedSearchFieldStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t DefaultRepresentation;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedSearchFieldStyle>)
  {
    v2 = type metadata accessor for ResolvedSearchFieldStyle(255);
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle, type metadata accessor for ResolvedSearchFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedSearchFieldStyle);
    DefaultRepresentation = type metadata accessor for MakeDefaultRepresentation(a1, v2, v3, v4);
    if (!v6)
      atomic_store(DefaultRepresentation, (unint64_t *)&lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedSearchFieldStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle, type metadata accessor for ResolvedSearchFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedSearchFieldStyle);
    v3[1] = &protocol witness table for SearchFieldStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for StaticSourceWriter<DatePickerStyleConfiguration.Label, DatePickerStyleConfiguration.Label>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<DatePickerStyleConfiguration.Label, DatePickerStyleConfiguration.Label>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<DatePickerStyleConfiguration.Label, DatePickerStyleConfiguration.Label>)
  {
    lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DatePickerStyleConfiguration.Label, &type metadata for DatePickerStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DatePickerStyleConfiguration.Label, &type metadata for DatePickerStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<DatePickerStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<DatePickerStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<DatePickerStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for StyleInput<DatePickerStyleConfiguration>, type metadata accessor for DatePickerStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<DatePickerStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultDatePickerStyle and conformance DefaultDatePickerStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultDatePickerStyle and conformance DefaultDatePickerStyle;
  if (!lazy protocol witness table cache variable for type DefaultDatePickerStyle and conformance DefaultDatePickerStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultDatePickerStyle, &type metadata for DefaultDatePickerStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultDatePickerStyle and conformance DefaultDatePickerStyle);
  }
  return result;
}

void type metadata accessor for MakeResolvedRepresentation<ResolvedDatePickerStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ResolvedRepresentation;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedDatePickerStyle>)
  {
    v2 = type metadata accessor for ResolvedDatePickerStyle(255);
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle, type metadata accessor for ResolvedDatePickerStyle, (uint64_t)&protocol conformance descriptor for ResolvedDatePickerStyle);
    ResolvedRepresentation = type metadata accessor for MakeResolvedRepresentation(a1, v2, v3, v4);
    if (!v6)
      atomic_store(ResolvedRepresentation, (unint64_t *)&lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedDatePickerStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type DatePicker<DatePickerStyleConfiguration.Label> and conformance DatePicker<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DatePicker<DatePickerStyleConfiguration.Label> and conformance DatePicker<A>;
  if (!lazy protocol witness table cache variable for type DatePicker<DatePickerStyleConfiguration.Label> and conformance DatePicker<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for DatePicker<DatePickerStyleConfiguration.Label>, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t)&protocol witness table for DatePickerStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DatePicker);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DatePicker<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatePicker<DatePickerStyleConfiguration.Label> and conformance DatePicker<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>>)
  {
    type metadata accessor for ResolvedDatePickerStyle(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for DatePickerStyleModifier<DefaultDatePickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultDatePickerStyle and conformance DefaultDatePickerStyle, (uint64_t)&type metadata for DefaultDatePickerStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DatePickerStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>>);
  }
}

void type metadata accessor for MakeDefaultRepresentation<ResolvedDatePickerStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t DefaultRepresentation;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedDatePickerStyle>)
  {
    v2 = type metadata accessor for ResolvedDatePickerStyle(255);
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle, type metadata accessor for ResolvedDatePickerStyle, (uint64_t)&protocol conformance descriptor for ResolvedDatePickerStyle);
    DefaultRepresentation = type metadata accessor for MakeDefaultRepresentation(a1, v2, v3, v4);
    if (!v6)
      atomic_store(DefaultRepresentation, (unint64_t *)&lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedDatePickerStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle, type metadata accessor for ResolvedDatePickerStyle, (uint64_t)&protocol conformance descriptor for ResolvedDatePickerStyle);
    v3[1] = &protocol witness table for DatePickerStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<StepperStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<StepperStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<StepperStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<StepperStyleConfiguration>, (uint64_t)&type metadata for StepperStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<StepperStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultStepperStyle and conformance DefaultStepperStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultStepperStyle and conformance DefaultStepperStyle;
  if (!lazy protocol witness table cache variable for type DefaultStepperStyle and conformance DefaultStepperStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultStepperStyle, &type metadata for DefaultStepperStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultStepperStyle and conformance DefaultStepperStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StepperBody and conformance StepperBody()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StepperBody and conformance StepperBody;
  if (!lazy protocol witness table cache variable for type StepperBody and conformance StepperBody)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StepperBody, &type metadata for StepperBody);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StepperBody and conformance StepperBody);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StepperBody and conformance StepperBody;
  if (!lazy protocol witness table cache variable for type StepperBody and conformance StepperBody)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StepperBody, &type metadata for StepperBody);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StepperBody and conformance StepperBody);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<StepperBody> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<StepperBody> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<StepperBody> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<StepperBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type StepperBody and conformance StepperBody, (uint64_t)&type metadata for StepperBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<StepperBody> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<StepperBody, StepperStyleModifier<DefaultStepperStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<StepperBody, StepperStyleModifier<DefaultStepperStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for StepperStyleModifier<DefaultStepperStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultStepperStyle and conformance DefaultStepperStyle, (uint64_t)&type metadata for DefaultStepperStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StepperStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StepperBody, StepperStyleModifier<DefaultStepperStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<StepperBody> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<StepperBody> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<StepperBody> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<StepperBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type StepperBody and conformance StepperBody, (uint64_t)&type metadata for StepperBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<StepperBody> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StepperBody, StepperStyleModifier<DefaultStepperStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<StepperBody, StepperStyleModifier<DefaultStepperStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StepperBody, StepperStyleModifier<DefaultStepperStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<StepperBody, StepperStyleModifier<DefaultStepperStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type StepperBody and conformance StepperBody();
    v3[1] = &protocol witness table for StepperStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StepperBody, StepperStyleModifier<DefaultStepperStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentMod()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachm;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachm)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifie, type metadata accessor for ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, Accessib();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachm);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<PrimitiveButtonStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<PrimitiveButtonStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<PrimitiveButtonStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for StyleInput<PrimitiveButtonStyleConfiguration>, type metadata accessor for PrimitiveButtonStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<PrimitiveButtonStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle, type metadata accessor for ResolvedButtonStyle, (uint64_t)&protocol conformance descriptor for ResolvedButtonStyle);
    v3[1] = &protocol witness table for ButtonStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<LabelStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<LabelStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<LabelStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<LabelStyleConfiguration>, (uint64_t)&type metadata for LabelStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<LabelStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultLabelStyle and conformance DefaultLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultLabelStyle and conformance DefaultLabelStyle;
  if (!lazy protocol witness table cache variable for type DefaultLabelStyle and conformance DefaultLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultLabelStyle, &type metadata for DefaultLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultLabelStyle and conformance DefaultLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultiViewLabel and conformance MultiViewLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel;
  if (!lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultiViewLabel, &type metadata for MultiViewLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel;
  if (!lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultiViewLabel, &type metadata for MultiViewLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel;
  if (!lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultiViewLabel, &type metadata for MultiViewLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel;
  if (!lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultiViewLabel, &type metadata for MultiViewLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel;
  if (!lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultiViewLabel, &type metadata for MultiViewLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel);
  }
  return result;
}

void type metadata accessor for ModifiedContent<MergePlatformItemsView<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>, PlatformItemListGeneratingViewModifier<TextPlatformItemListFlags, MergePlatformItemsView<ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>>>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<MergePlatformItemsView<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>, PlatformItemListGeneratingViewModifier<TextPlatformItemListFlags, MergePlatformItemsView<ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>>>>, type metadata accessor for MergePlatformItemsView<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>, (void (*)(uint64_t))type metadata accessor for PlatformItemListGeneratingViewModifier<TextPlatformItemListFlags, MergePlatformItemsView<ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>>>);
}

void type metadata accessor for MergePlatformItemsView<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for MergePlatformItemsView<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>, (uint64_t (*)(uint64_t))type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for AccessibilityFrameModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for MergePlatformItemsView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for MergePlatformItemsView<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>, (uint64_t (*)(uint64_t))type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for AccessibilityFrameModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v3[1] = &protocol witness table for AccessibilityFrameModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for PlatformItemListGeneratingViewModifier<TextPlatformItemListFlags, MergePlatformItemsView<ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for PlatformItemListGeneratingViewModifier<TextPlatformItemListFlags, MergePlatformItemsView<ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>>>;
  if (!lazy cache variable for type metadata for PlatformItemListGeneratingViewModifier<TextPlatformItemListFlags, MergePlatformItemsView<ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>>>)
  {
    type metadata accessor for MergePlatformItemsView<ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>>(255);
    type metadata accessor for PlatformItemListGeneratingViewModifier();
  }
  return result;
}

void type metadata accessor for MergePlatformItemsView<ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for MergePlatformItemsView<ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title, (uint64_t)&type metadata for PlatformItemListContentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for MergePlatformItemsView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for MergePlatformItemsView<ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title, (uint64_t)&type metadata for PlatformItemListContentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = &protocol witness table for LabelStyleConfiguration.Title;
    v3[1] = lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3;
    v9[1] = a4;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, LabelStyleConfiguration.Title>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, LabelStyleConfiguration.Title>>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>);
    type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Title, LabelStyleConfiguration.Title>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, LabelStyleConfiguration.Title>>);
  }
}

uint64_t type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>);
    lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon();
    lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>);
    v2 = v1;
    v3[0] = &protocol witness table for LabelStyleConfiguration.Icon;
    v3[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Title, LabelStyleConfiguration.Title>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Title, LabelStyleConfiguration.Title>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Title, LabelStyleConfiguration.Title>)
  {
    lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, LabelStyleConfiguration.Title>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, LabelStyleConfiguration.Title>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, LabelStyleConfiguration.Title>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, LabelStyleConfiguration.Title>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, LabelStyleConfiguration.Title>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle();
    v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>;
  if (!lazy cache variable for type metadata for StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>)
  {
    type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
    type metadata accessor for PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>();
    lazy protocol witness table accessor for type MultiViewLabel and conformance MultiViewLabel();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>;
  if (!lazy cache variable for type metadata for PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>, (uint64_t (*)(uint64_t))type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for AccessibilityFrameModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for PlatformItemLabelView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedLabelStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedLabelStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedLabelStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle, (uint64_t)&type metadata for ResolvedLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedLabelStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedLabelStyle, LabelStyleModifier<DefaultLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedLabelStyle, LabelStyleModifier<DefaultLabelStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleModifier<DefaultLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultLabelStyle and conformance DefaultLabelStyle, (uint64_t)&type metadata for DefaultLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedLabelStyle, LabelStyleModifier<DefaultLabelStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedLabelStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedLabelStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedLabelStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle, (uint64_t)&type metadata for ResolvedLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedLabelStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelStyle, LabelStyleModifier<DefaultLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, LabelStyleModifier<DefaultLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, LabelStyleModifier<DefaultLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, LabelStyleModifier<DefaultLabelStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle();
    v3[1] = &protocol witness table for LabelStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, LabelStyleModifier<DefaultLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<ColorPickerStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<ColorPickerStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<ColorPickerStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<ColorPickerStyleConfiguration>, (uint64_t)&type metadata for ColorPickerStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<ColorPickerStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedColorPickerStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedColorPickerStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedColorPickerStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedColorPickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle, (uint64_t)&type metadata for ResolvedColorPickerStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedColorPickerStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedColorPickerStyle, ColorPickerStyleModifier<DefaultColorPickerStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedColorPickerStyle, ColorPickerStyleModifier<DefaultColorPickerStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ColorPickerStyleModifier<DefaultColorPickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultColorPickerStyle and conformance DefaultColorPickerStyle, (uint64_t)&type metadata for DefaultColorPickerStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ColorPickerStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedColorPickerStyle, ColorPickerStyleModifier<DefaultColorPickerStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedColorPickerStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedColorPickerStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedColorPickerStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedColorPickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle, (uint64_t)&type metadata for ResolvedColorPickerStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedColorPickerStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedColorPickerStyle, ColorPickerStyleModifier<DefaultColorPickerStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedColorPickerStyle, ColorPickerStyleModifier<DefaultColorPickerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedColorPickerStyle, ColorPickerStyleModifier<DefaultColorPickerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedColorPickerStyle, ColorPickerStyleModifier<DefaultColorPickerStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle();
    v3[1] = &protocol witness table for ColorPickerStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedColorPickerStyle, ColorPickerStyleModifier<DefaultColorPickerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<TextEditorStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<TextEditorStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<TextEditorStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for StyleInput<TextEditorStyleConfiguration>, type metadata accessor for TextEditorStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<TextEditorStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

void type metadata accessor for MakeResolvedRepresentation<ResolvedTextEditorStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ResolvedRepresentation;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedTextEditorStyle>)
  {
    v2 = type metadata accessor for ResolvedTextEditorStyle(255);
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle, type metadata accessor for ResolvedTextEditorStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextEditorStyle);
    ResolvedRepresentation = type metadata accessor for MakeResolvedRepresentation(a1, v2, v3, v4);
    if (!v6)
      atomic_store(ResolvedRepresentation, (unint64_t *)&lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedTextEditorStyle>);
  }
}

void type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>>)
  {
    type metadata accessor for ResolvedTextEditorStyle(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for TextEditorStyleModifier<AutomaticTextEditorStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticTextEditorStyle and conformance AutomaticTextEditorStyle, (uint64_t)&type metadata for AutomaticTextEditorStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEditorStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>>);
  }
}

void type metadata accessor for MakeDefaultRepresentation<ResolvedTextEditorStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t DefaultRepresentation;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedTextEditorStyle>)
  {
    v2 = type metadata accessor for ResolvedTextEditorStyle(255);
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle, type metadata accessor for ResolvedTextEditorStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextEditorStyle);
    DefaultRepresentation = type metadata accessor for MakeDefaultRepresentation(a1, v2, v3, v4);
    if (!v6)
      atomic_store(DefaultRepresentation, (unint64_t *)&lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedTextEditorStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle, type metadata accessor for ResolvedTextEditorStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextEditorStyle);
    v3[1] = &protocol witness table for TextEditorStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, MEMORY[0x1E0CE7C38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, MEMORY[0x1E0CE63B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

void type metadata accessor for ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

unint64_t lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle;
  if (!lazy protocol witness table cache variable for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IconOnlyLabelStyle, &type metadata for IconOnlyLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle);
  }
  return result;
}

void type metadata accessor for VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)> and conformance TupleView<A>();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>>);
  }
}

void type metadata accessor for (Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, MEMORY[0x1E0CE35F0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, MEMORY[0x1E0CE63B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>)
  {
    type metadata accessor for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>);
  }
}

void type metadata accessor for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for Range<AttributedString.Index>(255, (unint64_t *)&lazy cache variable for type metadata for HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label> and conformance <> _ConditionalContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>);
  }
}

void type metadata accessor for (ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>))
  {
    type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>(255, &lazy cache variable for type metadata for ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.MinimumValueLabel);
    type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>(255, &lazy cache variable for type metadata for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.MaximumValueLabel);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>));
  }
}

void type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v5 = type metadata accessor for ModifiedContent();
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>();
    v3[1] = &protocol witness table for GaugeStyleConfiguration.Label;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)> and conformance TupleView<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>)
  {
    type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>, MEMORY[0x1E0CE73D0]);
    v6 = type metadata accessor for AccessibilityRepresentationModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>);
  }
}

void type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>, (uint64_t (*)(uint64_t))type metadata accessor for (GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)> and conformance TupleView<A>();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>);
  }
}

void type metadata accessor for (GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?));
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>, (uint64_t (*)(uint64_t))type metadata accessor for (GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)> and conformance TupleView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, MEMORY[0x1E0CE1A90], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>)
  {
    type metadata accessor for ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>> and conformance ZStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>, MEMORY[0x1E0CE74D8]);
    v0 = type metadata accessor for GeometryReader();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>);
  }
}

void type metadata accessor for ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)> and conformance TupleView<A>();
    v0 = type metadata accessor for ZStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>);
  }
}

void type metadata accessor for (ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, (uint64_t)&type metadata for CircularPercentageGaugeRing, MEMORY[0x1E0CE63B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, MEMORY[0x1E0CE1A90], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, MEMORY[0x1E0CE35F0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>(uint64_t a1)
{
  type metadata accessor for Range<AttributedString.Index>(a1, &lazy cache variable for type metadata for VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>> and conformance <> _ConditionalContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
}

void type metadata accessor for _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>)
  {
    type metadata accessor for HStack<GaugeStyleConfiguration.CurrentValueLabel?>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<GaugeStyleConfiguration.Label>, (uint64_t)&type metadata for GaugeStyleConfiguration.Label, (uint64_t)&protocol witness table for GaugeStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>);
  }
}

void type metadata accessor for HStack<GaugeStyleConfiguration.CurrentValueLabel?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<GaugeStyleConfiguration.CurrentValueLabel?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel? and conformance <A> A?();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<GaugeStyleConfiguration.CurrentValueLabel?>);
  }
}

unint64_t lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = &protocol witness table for GaugeStyleConfiguration.CurrentValueLabel;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<GaugeStyleConfiguration.CurrentValueLabel?> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<GaugeStyleConfiguration.CurrentValueLabel?>, MEMORY[0x1E0CE73D0]);
    v3[1] = lazy protocol witness table accessor for type HStack<GaugeStyleConfiguration.Label> and conformance HStack<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<GaugeStyleConfiguration.Label> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<GaugeStyleConfiguration.Label> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<GaugeStyleConfiguration.Label> and conformance HStack<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<GaugeStyleConfiguration.Label>, (uint64_t)&type metadata for GaugeStyleConfiguration.Label, (uint64_t)&protocol witness table for GaugeStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<GaugeStyleConfiguration.Label> and conformance HStack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)> and conformance TupleView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, MEMORY[0x1E0CE45F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE45E8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>> and conformance GeometryReader<A>, (uint64_t (*)(uint64_t))type metadata accessor for GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, MEMORY[0x1E0CE2768]);
    v3[1] = MEMORY[0x1E0CE1A80];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for StyleModifierType<UIKitSystemButtonConfigurationModifier>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for StyleModifierType<UIKitSystemButtonConfigurationModifier>)
  {
    v2 = type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier, type metadata accessor for UIKitSystemButtonConfigurationModifier, (uint64_t)&protocol conformance descriptor for UIKitSystemButtonConfigurationModifier);
    v5 = type metadata accessor for StyleModifierType(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for StyleModifierType<UIKitSystemButtonConfigurationModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type StyleInput<UIKitButtonConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<UIKitButtonConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<UIKitButtonConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<UIKitButtonConfiguration>, (uint64_t)&type metadata for UIKitButtonConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<UIKitButtonConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<UIKitButtonConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<UIKitButtonConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<UIKitButtonConfiguration>, (uint64_t)&type metadata for UIKitButtonConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<UIKitButtonConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

uint64_t sub_1874DF2B8()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type StyleOverrideInput<UIButton.Configuration> and conformance StyleOverrideInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleOverrideInput<UIButton.Configuration> and conformance StyleOverrideInput<A>;
  if (!lazy protocol witness table cache variable for type StyleOverrideInput<UIButton.Configuration> and conformance StyleOverrideInput<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for StyleOverrideInput<UIButton.Configuration>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC3228], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleOverrideInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleOverrideInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleOverrideInput<UIButton.Configuration> and conformance StyleOverrideInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<SectionStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<SectionStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<SectionStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<SectionStyleConfiguration>, (uint64_t)&type metadata for SectionStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<SectionStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedSectionStyle, SectionStyleModifier<DefaultSectionStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedSectionStyle, SectionStyleModifier<DefaultSectionStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedSectionStyle, SectionStyleModifier<DefaultSectionStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedSectionStyle, SectionStyleModifier<DefaultSectionStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle();
    v3[1] = &protocol witness table for SectionStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedSectionStyle, SectionStyleModifier<DefaultSectionStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in static AutomaticStyleOverrideModifier._makeInputs(modifier:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static AutomaticStyleOverrideModifier._makeInputs(modifier:inputs:)(a1, v1[2], v1[3], v1[4]);
}

ValueMetadata *type metadata accessor for StyleableViewContextInput()
{
  return &type metadata for StyleableViewContextInput;
}

uint64_t sub_1874DF480(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
}

void base witness table accessor for _AttributeBody in MakeResolvedRepresentation<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in MakeDefaultRepresentation<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for PropertyKey in StyleOverrideInput<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for GraphInput in StyleInput<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for GraphInput in StyleOverrideInput<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for PropertyKey in StyleInput<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)&type metadata for IgnoreViewRespondersModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

uint64_t type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>;
  if (!lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>)
    type metadata accessor for ProgressView();
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel> and conformance ProgressView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    v3[1] = &protocol witness table for IgnoreViewRespondersModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<ProgressViewStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<ProgressViewStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<ProgressViewStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for StyleInput<ProgressViewStyleConfiguration>, type metadata accessor for ProgressViewStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<ProgressViewStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultProgressViewStyle and conformance DefaultProgressViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultProgressViewStyle and conformance DefaultProgressViewStyle;
  if (!lazy protocol witness table cache variable for type DefaultProgressViewStyle and conformance DefaultProgressViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultProgressViewStyle, &type metadata for DefaultProgressViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultProgressViewStyle and conformance DefaultProgressViewStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Stack<AnyStyleModifier> and conformance <A> Stack<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Stack<AnyStyleModifier> and conformance <A> Stack<A>;
  if (!lazy protocol witness table cache variable for type Stack<AnyStyleModifier> and conformance <A> Stack<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Stack<AnyStyleModifier>, (uint64_t)&unk_1E1ABE5E8, MEMORY[0x1E0CE72F0]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type AnyStyleModifier and conformance AnyStyleModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7300], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stack<AnyStyleModifier> and conformance <A> Stack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<TokenFieldConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<TokenFieldConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<TokenFieldConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for StyleInput<TokenFieldConfiguration>, type metadata accessor for TokenFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<TokenFieldConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomaticTokenFieldStyle and conformance AutomaticTokenFieldStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticTokenFieldStyle and conformance AutomaticTokenFieldStyle;
  if (!lazy protocol witness table cache variable for type AutomaticTokenFieldStyle and conformance AutomaticTokenFieldStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticTokenFieldStyle, &type metadata for AutomaticTokenFieldStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticTokenFieldStyle and conformance AutomaticTokenFieldStyle);
  }
  return result;
}

void type metadata accessor for MakeResolvedRepresentation<ResolvedTokenFieldStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ResolvedRepresentation;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedTokenFieldStyle>)
  {
    v2 = type metadata accessor for ResolvedTokenFieldStyle(255);
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle, type metadata accessor for ResolvedTokenFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTokenFieldStyle);
    ResolvedRepresentation = type metadata accessor for MakeResolvedRepresentation(a1, v2, v3, v4);
    if (!v6)
      atomic_store(ResolvedRepresentation, (unint64_t *)&lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedTokenFieldStyle>);
  }
}

void type metadata accessor for ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>>)
  {
    type metadata accessor for ResolvedTokenFieldStyle(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for TokenFieldStyleModifier<AutomaticTokenFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticTokenFieldStyle and conformance AutomaticTokenFieldStyle, (uint64_t)&type metadata for AutomaticTokenFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TokenFieldStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>>);
  }
}

void type metadata accessor for MakeDefaultRepresentation<ResolvedTokenFieldStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t DefaultRepresentation;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedTokenFieldStyle>)
  {
    v2 = type metadata accessor for ResolvedTokenFieldStyle(255);
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle, type metadata accessor for ResolvedTokenFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTokenFieldStyle);
    DefaultRepresentation = type metadata accessor for MakeDefaultRepresentation(a1, v2, v3, v4);
    if (!v6)
      atomic_store(DefaultRepresentation, (unint64_t *)&lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedTokenFieldStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle, type metadata accessor for ResolvedTokenFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTokenFieldStyle);
    v3[1] = &protocol witness table for TokenFieldStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<GaugeStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<GaugeStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<GaugeStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<GaugeStyleConfiguration>, (uint64_t)&type metadata for GaugeStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<GaugeStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultGaugeStyle and conformance DefaultGaugeStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultGaugeStyle and conformance DefaultGaugeStyle;
  if (!lazy protocol witness table cache variable for type DefaultGaugeStyle and conformance DefaultGaugeStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultGaugeStyle, &type metadata for DefaultGaugeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultGaugeStyle and conformance DefaultGaugeStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle;
  if (!lazy protocol witness table cache variable for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedGaugeStyle, &type metadata for ResolvedGaugeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle;
  if (!lazy protocol witness table cache variable for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedGaugeStyle, &type metadata for ResolvedGaugeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>);
    type metadata accessor for StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>>);
  }
}

uint64_t type metadata accessor for StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>)
  {
    type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent(255, &lazy cache variable for type metadata for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for NavigationSplitView.SidebarContent);
    lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar();
    lazy protocol witness table accessor for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>(&lazy protocol witness table cache variable for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent and conformance NavigationSplitView<A, B, C>.SidebarContent, &lazy cache variable for type metadata for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for NavigationSplitView.SidebarContent, (uint64_t)&protocol conformance descriptor for NavigationSplitView<A, B, C>.SidebarContent);
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent(255, a2, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>)
  {
    type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent(255, &lazy cache variable for type metadata for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for NavigationSplitView.ContentListContent);
    lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content();
    lazy protocol witness table accessor for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>(&lazy protocol witness table cache variable for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent and conformance NavigationSplitView<A, B, C>.ContentListContent, &lazy cache variable for type metadata for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for NavigationSplitView.ContentListContent, (uint64_t)&protocol conformance descriptor for NavigationSplitView<A, B, C>.ContentListContent);
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

uint64_t type metadata accessor for StaticSourceWriter<NavigationSplitViewStyleConfiguration.Detail, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<NavigationSplitViewStyleConfiguration.Detail, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<NavigationSplitViewStyleConfiguration.Detail, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent>)
  {
    type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent(255, &lazy cache variable for type metadata for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for NavigationSplitView.DetailContent);
    lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail();
    lazy protocol witness table accessor for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>(&lazy protocol witness table cache variable for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent and conformance NavigationSplitView<A, B, C>.DetailContent, &lazy cache variable for type metadata for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for NavigationSplitView.DetailContent, (uint64_t)&protocol conformance descriptor for NavigationSplitView<A, B, C>.DetailContent);
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Detail, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Detail, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Detail, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Detail, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<NavigationSplitViewStyleConfiguration.Detail, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Detail, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.DetailContent>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Content, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.ContentListContent>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle();
    v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedNavigationSplitStyle, StaticSourceWriter<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationCommonModifier and conformance NavigationCommonModifier;
  if (!lazy protocol witness table cache variable for type NavigationCommonModifier and conformance NavigationCommonModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationCommonModifier, &type metadata for NavigationCommonModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationCommonModifier and conformance NavigationCommonModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<NavigationSplitViewStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<NavigationSplitViewStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<NavigationSplitViewStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<NavigationSplitViewStyleConfiguration>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<NavigationSplitViewStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

void type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD *))
{
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[6];

  if (!*a2)
  {
    v6[0] = &type metadata for NavigationSplitViewStyleConfiguration.Sidebar;
    v6[1] = &type metadata for NavigationSplitViewStyleConfiguration.Content;
    v6[2] = &type metadata for NavigationSplitViewStyleConfiguration.Detail;
    v6[3] = &protocol witness table for NavigationSplitViewStyleConfiguration.Sidebar;
    v6[4] = &protocol witness table for NavigationSplitViewStyleConfiguration.Content;
    v6[5] = &protocol witness table for NavigationSplitViewStyleConfiguration.Detail;
    v4 = a3(0, v6);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedNavigationSplitStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedNavigationSplitStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedNavigationSplitStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedNavigationSplitStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle, (uint64_t)&type metadata for ResolvedNavigationSplitStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedNavigationSplitStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedNavigationSplitStyle, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedNavigationSplitStyle, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticNavigationSplitViewStyle and conformance AutomaticNavigationSplitViewStyle, (uint64_t)&type metadata for AutomaticNavigationSplitViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationSplitStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedNavigationSplitStyle, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedNavigationSplitStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedNavigationSplitStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedNavigationSplitStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedNavigationSplitStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle, (uint64_t)&type metadata for ResolvedNavigationSplitStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedNavigationSplitStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedNavigationSplitStyle, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedNavigationSplitStyle, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedNavigationSplitStyle, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedNavigationSplitStyle, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle();
    v3[1] = &protocol witness table for NavigationSplitStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedNavigationSplitStyle, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<_NavigationViewStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<_NavigationViewStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<_NavigationViewStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<_NavigationViewStyleConfiguration>, (uint64_t)&type metadata for _NavigationViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<_NavigationViewStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedNavigationViewStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedNavigationViewStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedNavigationViewStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedNavigationViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle, (uint64_t)&type metadata for ResolvedNavigationViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedNavigationViewStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedNavigationViewStyle, NavigationViewStyleModifier<DefaultNavigationViewStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedNavigationViewStyle, NavigationViewStyleModifier<DefaultNavigationViewStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for NavigationViewStyleModifier<DefaultNavigationViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultNavigationViewStyle and conformance DefaultNavigationViewStyle, (uint64_t)&type metadata for DefaultNavigationViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationViewStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedNavigationViewStyle, NavigationViewStyleModifier<DefaultNavigationViewStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedNavigationViewStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedNavigationViewStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedNavigationViewStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedNavigationViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle, (uint64_t)&type metadata for ResolvedNavigationViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedNavigationViewStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedNavigationViewStyle, NavigationViewStyleModifier<DefaultNavigationViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedNavigationViewStyle, NavigationViewStyleModifier<DefaultNavigationViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedNavigationViewStyle, NavigationViewStyleModifier<DefaultNavigationViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedNavigationViewStyle, NavigationViewStyleModifier<DefaultNavigationViewStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle();
    v3[1] = &protocol witness table for NavigationViewStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedNavigationViewStyle, NavigationViewStyleModifier<DefaultNavigationViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<BadgeViewStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<BadgeViewStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<BadgeViewStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<BadgeViewStyleConfiguration>, (uint64_t)&type metadata for BadgeViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<BadgeViewStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomaticBadgedViewStyle and conformance AutomaticBadgedViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticBadgedViewStyle and conformance AutomaticBadgedViewStyle;
  if (!lazy protocol witness table cache variable for type AutomaticBadgedViewStyle and conformance AutomaticBadgedViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticBadgedViewStyle, &type metadata for AutomaticBadgedViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticBadgedViewStyle and conformance AutomaticBadgedViewStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedBadgedView and conformance ResolvedBadgedView;
  if (!lazy protocol witness table cache variable for type ResolvedBadgedView and conformance ResolvedBadgedView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedBadgedView, &type metadata for ResolvedBadgedView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedBadgedView and conformance ResolvedBadgedView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedBadgedView and conformance ResolvedBadgedView;
  if (!lazy protocol witness table cache variable for type ResolvedBadgedView and conformance ResolvedBadgedView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedBadgedView, &type metadata for ResolvedBadgedView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedBadgedView and conformance ResolvedBadgedView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedBadgedView> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedBadgedView> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedBadgedView> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedBadgedView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView, (uint64_t)&type metadata for ResolvedBadgedView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedBadgedView> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedBadgedView, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedBadgedView, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for BadgedViewStyleModifier<AutomaticBadgedViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticBadgedViewStyle and conformance AutomaticBadgedViewStyle, (uint64_t)&type metadata for AutomaticBadgedViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for BadgedViewStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedBadgedView, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedBadgedView> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedBadgedView> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedBadgedView> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedBadgedView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView, (uint64_t)&type metadata for ResolvedBadgedView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedBadgedView> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedBadgedView, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedBadgedView, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedBadgedView, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedBadgedView, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView();
    v3[1] = &protocol witness table for BadgedViewStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedBadgedView, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HelpView<HelpStyleConfiguration.Content> and conformance HelpView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HelpView<HelpStyleConfiguration.Content> and conformance HelpView<A>;
  if (!lazy protocol witness table cache variable for type HelpView<HelpStyleConfiguration.Content> and conformance HelpView<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HelpView<HelpStyleConfiguration.Content>, (uint64_t)&type metadata for HelpStyleConfiguration.Content, (uint64_t)&protocol witness table for HelpStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for HelpView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HelpView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HelpView<HelpStyleConfiguration.Content> and conformance HelpView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<HelpStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<HelpStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<HelpStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<HelpStyleConfiguration>, (uint64_t)&type metadata for HelpStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<HelpStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultHelpStyle and conformance DefaultHelpStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultHelpStyle and conformance DefaultHelpStyle;
  if (!lazy protocol witness table cache variable for type DefaultHelpStyle and conformance DefaultHelpStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultHelpStyle, &type metadata for DefaultHelpStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultHelpStyle and conformance DefaultHelpStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedHelpStyle and conformance ResolvedHelpStyle;
  if (!lazy protocol witness table cache variable for type ResolvedHelpStyle and conformance ResolvedHelpStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedHelpStyle, &type metadata for ResolvedHelpStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedHelpStyle and conformance ResolvedHelpStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedHelpStyle and conformance ResolvedHelpStyle;
  if (!lazy protocol witness table cache variable for type ResolvedHelpStyle and conformance ResolvedHelpStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedHelpStyle, &type metadata for ResolvedHelpStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedHelpStyle and conformance ResolvedHelpStyle);
  }
  return result;
}

void type metadata accessor for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HelpView<HelpStyleConfiguration.Content>, (uint64_t)&type metadata for HelpStyleConfiguration.Content, (uint64_t)&protocol witness table for HelpStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for HelpView);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedHelpStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedHelpStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedHelpStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedHelpStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle, (uint64_t)&type metadata for ResolvedHelpStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedHelpStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedHelpStyle, HelpStyleModifier<DefaultHelpStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedHelpStyle, HelpStyleModifier<DefaultHelpStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for HelpStyleModifier<DefaultHelpStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultHelpStyle and conformance DefaultHelpStyle, (uint64_t)&type metadata for DefaultHelpStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for HelpStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedHelpStyle, HelpStyleModifier<DefaultHelpStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedHelpStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedHelpStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedHelpStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedHelpStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle, (uint64_t)&type metadata for ResolvedHelpStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedHelpStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedHelpStyle, HelpStyleModifier<DefaultHelpStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedHelpStyle, HelpStyleModifier<DefaultHelpStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedHelpStyle, HelpStyleModifier<DefaultHelpStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedHelpStyle, HelpStyleModifier<DefaultHelpStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle();
    v3[1] = &protocol witness table for HelpStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedHelpStyle, HelpStyleModifier<DefaultHelpStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<ResolvedCustomButtonMenu.Configuration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<ResolvedCustomButtonMenu.Configuration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<ResolvedCustomButtonMenu.Configuration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<ResolvedCustomButtonMenu.Configuration>, (uint64_t)&type metadata for ResolvedCustomButtonMenu.Configuration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<ResolvedCustomButtonMenu.Configuration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu;
  if (!lazy protocol witness table cache variable for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedCustomButtonMenu, &type metadata for ResolvedCustomButtonMenu);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu;
  if (!lazy protocol witness table cache variable for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedCustomButtonMenu, &type metadata for ResolvedCustomButtonMenu);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedCustomButtonMenu> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedCustomButtonMenu> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedCustomButtonMenu> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedCustomButtonMenu>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu, (uint64_t)&type metadata for ResolvedCustomButtonMenu, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedCustomButtonMenu> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedCustomButtonMenu, CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedCustomButtonMenu, CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic, (uint64_t)&type metadata for ButtonMenuStyle.Automatic, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CustomButtonMenuStyleWriter);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedCustomButtonMenu, CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedCustomButtonMenu> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedCustomButtonMenu> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedCustomButtonMenu> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedCustomButtonMenu>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu, (uint64_t)&type metadata for ResolvedCustomButtonMenu, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedCustomButtonMenu> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedCustomButtonMenu, CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedCustomButtonMenu, CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedCustomButtonMenu, CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedCustomButtonMenu, CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu();
    v3[1] = &protocol witness table for CustomButtonMenuStyleWriter<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedCustomButtonMenu, CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<ResolvedRadioGroupPicker> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<ResolvedRadioGroupPicker> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<ResolvedRadioGroupPicker> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<ResolvedRadioGroupPicker>, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<ResolvedRadioGroupPicker> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedRadioGroupPicker> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedRadioGroupPicker> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedRadioGroupPicker> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedRadioGroupPicker>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedRadioGroupPicker> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedRadioGroupPicker, RadioGroupStyleModifier<AutomaticRadioGroupStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedRadioGroupPicker, RadioGroupStyleModifier<AutomaticRadioGroupStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for RadioGroupStyleModifier<AutomaticRadioGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticRadioGroupStyle and conformance AutomaticRadioGroupStyle, (uint64_t)&type metadata for AutomaticRadioGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for RadioGroupStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedRadioGroupPicker, RadioGroupStyleModifier<AutomaticRadioGroupStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedRadioGroupPicker> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedRadioGroupPicker> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedRadioGroupPicker> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedRadioGroupPicker>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedRadioGroupPicker> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedRadioGroupPicker, RadioGroupStyleModifier<AutomaticRadioGroupStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedRadioGroupPicker, RadioGroupStyleModifier<AutomaticRadioGroupStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedRadioGroupPicker, RadioGroupStyleModifier<AutomaticRadioGroupStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedRadioGroupPicker, RadioGroupStyleModifier<AutomaticRadioGroupStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker();
    v3[1] = &protocol witness table for RadioGroupStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedRadioGroupPicker, RadioGroupStyleModifier<AutomaticRadioGroupStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for MakeResolvedRepresentation<ResolvedProgressViewStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ResolvedRepresentation;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedProgressViewStyle>)
  {
    v2 = type metadata accessor for ResolvedProgressViewStyle(255);
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedProgressViewStyle and conformance ResolvedProgressViewStyle, type metadata accessor for ResolvedProgressViewStyle, (uint64_t)&protocol conformance descriptor for ResolvedProgressViewStyle);
    ResolvedRepresentation = type metadata accessor for MakeResolvedRepresentation(a1, v2, v3, v4);
    if (!v6)
      atomic_store(ResolvedRepresentation, (unint64_t *)&lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedProgressViewStyle>);
  }
}

void type metadata accessor for ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>>)
  {
    type metadata accessor for ResolvedProgressViewStyle(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ProgressViewStyleModifier<DefaultProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultProgressViewStyle and conformance DefaultProgressViewStyle, (uint64_t)&type metadata for DefaultProgressViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ProgressViewStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>>);
  }
}

void type metadata accessor for MakeDefaultRepresentation<ResolvedProgressViewStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t DefaultRepresentation;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedProgressViewStyle>)
  {
    v2 = type metadata accessor for ResolvedProgressViewStyle(255);
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedProgressViewStyle and conformance ResolvedProgressViewStyle, type metadata accessor for ResolvedProgressViewStyle, (uint64_t)&protocol conformance descriptor for ResolvedProgressViewStyle);
    DefaultRepresentation = type metadata accessor for MakeDefaultRepresentation(a1, v2, v3, v4);
    if (!v6)
      atomic_store(DefaultRepresentation, (unint64_t *)&lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedProgressViewStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedProgressViewStyle and conformance ResolvedProgressViewStyle, type metadata accessor for ResolvedProgressViewStyle, (uint64_t)&protocol conformance descriptor for ResolvedProgressViewStyle);
    v3[1] = &protocol witness table for ProgressViewStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleInput<_NavigationStackStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<_NavigationStackStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<_NavigationStackStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<_NavigationStackStyleConfiguration>, (uint64_t)&type metadata for _NavigationStackStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<_NavigationStackStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AutomaticNavigationStackStyle and conformance _AutomaticNavigationStackStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AutomaticNavigationStackStyle and conformance _AutomaticNavigationStackStyle;
  if (!lazy protocol witness table cache variable for type _AutomaticNavigationStackStyle and conformance _AutomaticNavigationStackStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _AutomaticNavigationStackStyle, &type metadata for _AutomaticNavigationStackStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AutomaticNavigationStackStyle and conformance _AutomaticNavigationStackStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle;
  if (!lazy protocol witness table cache variable for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedNavigationStackStyle, &type metadata for ResolvedNavigationStackStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle;
  if (!lazy protocol witness table cache variable for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedNavigationStackStyle, &type metadata for ResolvedNavigationStackStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedNavigationStackStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedNavigationStackStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedNavigationStackStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedNavigationStackStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle, (uint64_t)&type metadata for ResolvedNavigationStackStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedNavigationStackStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedNavigationStackStyle, NavigationStackStyleModifier<_AutomaticNavigationStackStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedNavigationStackStyle, NavigationStackStyleModifier<_AutomaticNavigationStackStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for NavigationStackStyleModifier<_AutomaticNavigationStackStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AutomaticNavigationStackStyle and conformance _AutomaticNavigationStackStyle, (uint64_t)&type metadata for _AutomaticNavigationStackStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationStackStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedNavigationStackStyle, NavigationStackStyleModifier<_AutomaticNavigationStackStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedNavigationStackStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedNavigationStackStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedNavigationStackStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedNavigationStackStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle, (uint64_t)&type metadata for ResolvedNavigationStackStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedNavigationStackStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedNavigationStackStyle, NavigationStackStyleModifier<_AutomaticNavigationStackStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedNavigationStackStyle, NavigationStackStyleModifier<_AutomaticNavigationStackStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedNavigationStackStyle, NavigationStackStyleModifier<_AutomaticNavigationStackStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedNavigationStackStyle, NavigationStackStyleModifier<_AutomaticNavigationStackStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle();
    v3[1] = &protocol witness table for NavigationStackStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedNavigationStackStyle, NavigationStackStyleModifier<_AutomaticNavigationStackStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedGaugeStyle> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedGaugeStyle> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedGaugeStyle> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedGaugeStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle, (uint64_t)&type metadata for ResolvedGaugeStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedGaugeStyle> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedGaugeStyle, GaugeStyleModifier<DefaultGaugeStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedGaugeStyle, GaugeStyleModifier<DefaultGaugeStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for GaugeStyleModifier<DefaultGaugeStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultGaugeStyle and conformance DefaultGaugeStyle, (uint64_t)&type metadata for DefaultGaugeStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GaugeStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedGaugeStyle, GaugeStyleModifier<DefaultGaugeStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedGaugeStyle> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedGaugeStyle> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedGaugeStyle> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedGaugeStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle, (uint64_t)&type metadata for ResolvedGaugeStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedGaugeStyle> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedGaugeStyle, GaugeStyleModifier<DefaultGaugeStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedGaugeStyle, GaugeStyleModifier<DefaultGaugeStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedGaugeStyle, GaugeStyleModifier<DefaultGaugeStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedGaugeStyle, GaugeStyleModifier<DefaultGaugeStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle();
    v3[1] = &protocol witness table for GaugeStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedGaugeStyle, GaugeStyleModifier<DefaultGaugeStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedUIKitButtonBody> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedUIKitButtonBody> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedUIKitButtonBody> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedUIKitButtonBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody, (uint64_t)&type metadata for ResolvedUIKitButtonBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedUIKitButtonBody> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedUIKitButtonBody> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedUIKitButtonBody> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedUIKitButtonBody> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedUIKitButtonBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody, (uint64_t)&type metadata for ResolvedUIKitButtonBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedUIKitButtonBody> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedUIKitButtonBody, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedUIKitButtonBody, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedUIKitButtonBody, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedUIKitButtonBody, UIKitSystemButtonConfigurationModifier>, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody();
    v3[1] = &protocol witness table for UIKitSystemButtonConfigurationModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedUIKitButtonBody, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in StyleBodyAccessor.updateBody(of:changed:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in StyleBodyAccessor.updateBody(of:changed:)(v1[7], v1[8], v1[2], v1[3], v1[4], v1[5], a1);
}

unint64_t lazy protocol witness table accessor for type StyleInput<_IndexViewStyleConfiguration> and conformance StyleInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleInput<_IndexViewStyleConfiguration> and conformance StyleInput<A>;
  if (!lazy protocol witness table cache variable for type StyleInput<_IndexViewStyleConfiguration> and conformance StyleInput<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleInput<_IndexViewStyleConfiguration>, (uint64_t)&type metadata for _IndexViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleInput<_IndexViewStyleConfiguration> and conformance StyleInput<A>);
  }
  return result;
}

uint64_t outlined init with copy of IndexViewBody(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _IndexViewStyleConfiguration(a2, a1, &type metadata for IndexViewBody);
  return a2;
}

unint64_t lazy protocol witness table accessor for type MakeResolvedRepresentation<IndexViewBody> and conformance MakeResolvedRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeResolvedRepresentation<IndexViewBody> and conformance MakeResolvedRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeResolvedRepresentation<IndexViewBody> and conformance MakeResolvedRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeResolvedRepresentation<IndexViewBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody, (uint64_t)&type metadata for IndexViewBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeResolvedRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeResolvedRepresentation<IndexViewBody> and conformance MakeResolvedRepresentation<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<IndexViewBody, IndexViewStyleModifier<DefaultIndexViewStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<IndexViewBody, IndexViewStyleModifier<DefaultIndexViewStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for IndexViewStyleModifier<DefaultIndexViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultIndexViewStyle and conformance DefaultIndexViewStyle, (uint64_t)&type metadata for DefaultIndexViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IndexViewStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<IndexViewBody, IndexViewStyleModifier<DefaultIndexViewStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MakeDefaultRepresentation<IndexViewBody> and conformance MakeDefaultRepresentation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MakeDefaultRepresentation<IndexViewBody> and conformance MakeDefaultRepresentation<A>;
  if (!lazy protocol witness table cache variable for type MakeDefaultRepresentation<IndexViewBody> and conformance MakeDefaultRepresentation<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MakeDefaultRepresentation<IndexViewBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody, (uint64_t)&type metadata for IndexViewBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeDefaultRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeDefaultRepresentation<IndexViewBody> and conformance MakeDefaultRepresentation<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<IndexViewBody, IndexViewStyleModifier<DefaultIndexViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<IndexViewBody, IndexViewStyleModifier<DefaultIndexViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<IndexViewBody, IndexViewStyleModifier<DefaultIndexViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<IndexViewBody, IndexViewStyleModifier<DefaultIndexViewStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody();
    v3[1] = &protocol witness table for IndexViewStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<IndexViewBody, IndexViewStyleModifier<DefaultIndexViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata completion function for PopUpButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for PickerStyleConfiguration(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PopUpButton(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  id v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v32;
  uint64_t v33;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = v5;
  v7 = v5 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v8 = ((v6 + 16) & ~v6) + *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 9;
  v10 = v5 & 0x100000;
  if (v6 > 7 || v10 != 0 || (v7 & (v6 + 64)) + v9 + 39 > 0x18)
  {
    v13 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v13 + (v7 & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v33 = *(_QWORD *)(a3 + 16);
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v14 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
    v15 = a2 & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    v14[4] = v16;
    v14[5] = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
    (**(void (***)(unint64_t, unint64_t))(v16 - 8))((a1 & 0xFFFFFFFFFFFFFFF8) + 8, (a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    v17 = *(void **)(v15 + 48);
    v14[6] = v17;
    v14[7] = *(_QWORD *)(v15 + 56);
    v18 = (_QWORD *)(v7 & ((unint64_t)v14 + 71));
    v19 = (_QWORD *)(v7 & (v15 + 71));
    *v18 = *v19;
    v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v21;
    v32 = ((unint64_t)v20 + v6 + 8) & ~v6;
    v22 = ((unint64_t)v21 + v6 + 8) & ~v6;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v24 = v17;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v23(v32, v22, v33);
    v25 = ((unint64_t)v18 + v8) & 0xFFFFFFFFFFFFFFF8;
    v26 = ((unint64_t)v19 + v8) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
    v27 = (char *)v18 + v9;
    v28 = (char *)v19 + v9;
    v29 = *(_QWORD *)((char *)v19 + v9 + 7);
    v30 = v28[15];
    swift_bridgeObjectRetain();
    outlined copy of Environment<Bool>.Content(v29, v30);
    *(_QWORD *)(v27 + 7) = v29;
    v27[15] = v30;
    *(_OWORD *)(v27 + 23) = *(_OWORD *)(v28 + 23);
  }
  return v3;
}

uint64_t destroy for PopUpButton(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1((a1 & 0xFFFFFFFFFFFFFFF8) + 8);

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + (v6 | 7) + 64) & ~(v6 | 7);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6, v4);
  v8 = *(_QWORD *)(v5 + 64) + ((v6 + 16) & ~v6) + 7;
  swift_bridgeObjectRelease();
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(v7 + (v8 & 0xFFFFFFFFFFFFFFF8) + 16), *(_BYTE *)(v7 + (v8 & 0xFFFFFFFFFFFFFFF8) + 24));
}

unint64_t initializeWithCopy for PopUpButton(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v28;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  v4[4] = v6;
  v4[5] = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  (**(void (***)(unint64_t, unint64_t))(v6 - 8))((a1 & 0xFFFFFFFFFFFFFFF8) + 8, (a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v7 = *(void **)(v5 + 48);
  v4[6] = v7;
  v4[7] = *(_QWORD *)(v5 + 56);
  v28 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v28 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_DWORD *)(v8 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v11 = (_QWORD *)(((unint64_t)v4 + v9 + 64) & v10);
  v12 = (_QWORD *)((v9 + 64 + v5) & v10);
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = ((unint64_t)v13 + v9 + 8) & ~v9;
  v16 = ((unint64_t)v14 + v9 + 8) & ~v9;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v18 = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v17(v15, v16, v28);
  v19 = *(_QWORD *)(v8 + 64) + ((v9 + 16) & ~v9) + 7;
  v20 = ((unint64_t)v11 + v19) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v12 + v19) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 9;
  v23 = (char *)v11 + v22;
  v24 = (char *)v12 + v22;
  v25 = *(_QWORD *)(v24 + 7);
  v26 = v24[15];
  swift_bridgeObjectRetain();
  outlined copy of Environment<Bool>.Content(v25, v26);
  *(_QWORD *)(v23 + 7) = v25;
  v23[15] = v26;
  *(_OWORD *)(v23 + 23) = *(_OWORD *)(v24 + 23);
  return a1;
}

unint64_t assignWithCopy for PopUpButton(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8), (uint64_t *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8));
  v7 = *(void **)(v6 + 48);
  v8 = *(void **)(v5 + 48);
  *(_QWORD *)(v5 + 48) = v7;
  v9 = v7;

  *(_QWORD *)(v5 + 56) = *(_QWORD *)(v6 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_DWORD *)(v11 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v14 = (_QWORD *)((v12 + 64 + v5) & v13);
  v15 = (_QWORD *)((v12 + 64 + v6) & v13);
  *v14 = *v15;
  swift_retain();
  swift_release();
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24))(((unint64_t)v16 + v12 + 8) & ~v12, ((unint64_t)v17 + v12 + 8) & ~v12, v10);
  v18 = *(_QWORD *)(v11 + 64) + ((v12 + 16) & ~v12) + 7;
  v19 = ((unint64_t)v14 + v18) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v15 + v18) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 9;
  v22 = (char *)v14 + v21;
  v23 = (char *)v15 + v21;
  v24 = *(_QWORD *)(v23 + 7);
  LOBYTE(v18) = v23[15];
  outlined copy of Environment<Bool>.Content(v24, v18);
  v25 = *(_QWORD *)(v22 + 7);
  v26 = v22[15];
  *(_QWORD *)(v22 + 7) = v24;
  v22[15] = v18;
  outlined consume of Environment<Bool>.Content(v25, v26);
  *(_OWORD *)(v22 + 23) = *(_OWORD *)(v23 + 23);
  return a1;
}

unint64_t initializeWithTake for PopUpButton(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v4 + 40) = v7;
  *(_OWORD *)(v4 + 24) = v6;
  *(_OWORD *)(v4 + 8) = v5;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_DWORD *)(v8 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v12 = (_QWORD *)((v9 + 64 + (a2 & 0xFFFFFFFFFFFFFFF8)) & v10);
  v11 = (_QWORD *)((v9 + 64 + (a1 & 0xFFFFFFFFFFFFFFF8)) & v10);
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v13 + v9 + 8) & ~v9, ((unint64_t)v14 + v9 + 8) & ~v9);
  v15 = *(_QWORD *)(v8 + 64) + ((v9 + 16) & ~v9) + 7;
  v16 = ((unint64_t)v11 + v15) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v12 + v15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 9;
  v19 = (char *)v11 + v18;
  v20 = (char *)v12 + v18;
  LOBYTE(v17) = v20[15];
  *(_QWORD *)(v19 + 7) = *(_QWORD *)(v20 + 7);
  v19[15] = v17;
  *(_OWORD *)(v19 + 23) = *(_OWORD *)(v20 + 23);
  return a1;
}

unint64_t assignWithTake for PopUpButton(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char v26;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1((a1 & 0xFFFFFFFFFFFFFFF8) + 8);
  v7 = *(_OWORD *)(v6 + 8);
  v8 = *(_OWORD *)(v6 + 24);
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(v6 + 40);
  *(_OWORD *)(v5 + 24) = v8;
  *(_OWORD *)(v5 + 8) = v7;
  v9 = *(void **)(v5 + 48);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(v6 + 48);

  *(_QWORD *)(v5 + 56) = *(_QWORD *)(v6 + 56);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_DWORD *)(v11 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v14 = (_QWORD *)((v12 + 64 + v5) & v13);
  v15 = (_QWORD *)((v12 + 64 + v6) & v13);
  *v14 = *v15;
  swift_release();
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 40))(((unint64_t)v16 + v12 + 8) & ~v12, ((unint64_t)v17 + v12 + 8) & ~v12, v10);
  v18 = *(_QWORD *)(v11 + 64) + ((v12 + 16) & ~v12) + 7;
  v19 = ((unint64_t)v14 + v18) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v15 + v18) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 9;
  v22 = (char *)v14 + v21;
  v23 = (char *)v15 + v21;
  v24 = *((_BYTE *)v15 + v21 + 15);
  v25 = *(_QWORD *)(v22 + 7);
  v26 = v22[15];
  *(_QWORD *)(v22 + 7) = *(_QWORD *)((char *)v15 + v21 + 7);
  v22[15] = v24;
  outlined consume of Environment<Bool>.Content(v25, v26);
  *(_OWORD *)(v22 + 23) = *(_OWORD *)(v23 + 23);
  return a1;
}

uint64_t getEnumTagSinglePayload for PopUpButton(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (v5 >= 0)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = v8 | 7;
  if (v7 >= a2)
  {
    v14 = a1 & 0xFFFFFFFFFFFFFFF8;
    if (v7 == 0x7FFFFFFF)
    {
      v15 = *(_QWORD *)(v14 + 32);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
    else
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((v8
                                                                    + ((((v14 + v9 + 64) & ~v9) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                    + 8) & ~v8);
    }
  }
  else
  {
    if (((((v8 + 64) & ~v9) + ((*(_QWORD *)(v4 + 64) + ((v8 + 16) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 48) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1874E24F8 + 4 * byte_187C38E70[v12]))();
  }
}

void storeEnumTagSinglePayload for PopUpButton(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v7 >= 0)
    v8 = 0x7FFFFFFF;
  v9 = *(unsigned __int8 *)(v6 + 80);
  if (v8 >= a3)
  {
    v13 = 0u;
    if (a2 <= v8)
      goto LABEL_19;
  }
  else
  {
    v10 = a3 - v8;
    if ((((_DWORD)v9 + 64) & ~(v9 | 7))
       + ((*(_DWORD *)(v6 + 64) + (((_DWORD)v9 + 16) & ~(_DWORD)v9) + 7) & 0xFFFFFFF8) == -48)
      v11 = v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    if (a2 <= v8)
LABEL_19:
      __asm { BR              X16 }
  }
  if ((((_DWORD)v9 + 64) & ~(v9 | 7))
     + ((*(_DWORD *)(v6 + 64) + (((_DWORD)v9 + 16) & ~(_DWORD)v9) + 7) & 0xFFFFFFF8) != -48)
  {
    v14 = ~v8 + a2;
    bzero(a1, ((v9 + 64) & ~(v9 | 7)) + ((*(_QWORD *)(v6 + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 48);
    *a1 = v14;
  }
  __asm { BR              X10 }
}

void sub_1874E26C0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1874E2758);
}

void sub_1874E26C8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1874E26D0);
  JUMPOUT(0x1874E2758);
}

void sub_1874E2728()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1874E2758);
}

void sub_1874E2730()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1874E2758);
}

uint64_t sub_1874E2738@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_WORD *)(v9 + v10) = 0;
  if (!a1)
    goto LABEL_6;
  v2 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (v6 == 0x7FFFFFFF)
  {
    if (a1 < 0)
      JUMPOUT(0x1874E2744);
    *(_QWORD *)(v2 + 32) = (a1 - 1);
LABEL_6:
    JUMPOUT(0x1874E2758);
  }
  return (*(uint64_t (**)(unint64_t))(v4 + 56))((v5
                                                                + ((((v2 + v7 + 64) & v8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                + 8) & a2);
}

uint64_t type metadata accessor for PopUpButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PopUpButton);
}

uint64_t associated type witness table accessor for View.Body : View in PopUpButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void PopUpButton.detailLabel.getter(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v5, v6);
  v7 = *(_QWORD *)(a1 + 24);
  type metadata accessor for PickerStyleConfiguration(0, v4, v7, v8);
  PickerStyleConfiguration.$selection.getter();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v4);
  type metadata accessor for PickerStyleConfiguration.Content(0, v4, v7, v9);
  PickerCurrentValueLabel.init(selection:options:)(v4, v7, a2);
}

void PopUpButton.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E0CE4A60], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  type metadata accessor for PickerStyleConfiguration.Label(255, v2, v3, v4);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Content(255, v2, v3, v5);
  type metadata accessor for PickerCurrentValueLabel();
}

void sub_1874E2940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  v6 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for PickerContentView(255, v2, v3, v7);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  *(_QWORD *)(v1 + 88) = v9;
  v10 = type metadata accessor for ModifiedContent();
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>, a1);
  v12 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  *(_QWORD *)(v4 - 104) = v11;
  *(_QWORD *)(v4 - 96) = v12;
  v13 = MEMORY[0x1E0CE2E70];
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v4 - 104);
  v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v8);
  *(_QWORD *)(v1 + 32) = v15;
  v16 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  *(_QWORD *)(v4 - 120) = v15;
  *(_QWORD *)(v4 - 112) = v16;
  *(_QWORD *)(v4 - 136) = MEMORY[0x18D75FFDC](v13, v9, v4 - 120);
  *(_QWORD *)(v4 - 128) = &protocol witness table for ToggleStyleModifier<A>;
  v17 = MEMORY[0x18D75FFDC](v13, v10, v4 - 136);
  *(_QWORD *)(v4 - 216) = v6;
  *(_QWORD *)(v4 - 208) = v10;
  *(_QWORD *)(v4 - 200) = v14;
  *(_QWORD *)(v4 - 192) = v17;
  type metadata accessor for UIKitMenuButton();
}

void sub_1874E2A98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
  v2 = type metadata accessor for ModifiedContent();
  v0[5] = v2;
  v0[1] = type metadata accessor for LabeledContent(255, v0[13], v2, v3);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  *v0 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>();
  v0[2] = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  v0[3] = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
  v0[6] = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuOrder>, (uint64_t)&type metadata for MenuOrder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v4 = type metadata accessor for ModifiedContent();
  v5 = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  *(_QWORD *)(v1 - 216) = v0[8];
  *(_QWORD *)(v1 - 208) = v4;
  *(_QWORD *)(v1 - 200) = v4;
  *(_QWORD *)(v1 - 192) = v5;
  type metadata accessor for StaticIf();
}

void sub_1874E2BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v9[8] = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v15, v16);
  v9[7] = (char *)&a9 - v17;
  v18 = v9[10];
  v19 = v18 + *(int *)(v9[9] + 40);
  v21 = *(_QWORD *)(v19 + *(int *)(type metadata accessor for PickerStyleConfiguration(0, v12, v13, v20) + 36));
  outlined init with copy of SubviewsCollection(v18 + 8, v14 - 216);
  PickerContentView.init(selection:items:)(v21, v14 - 216, (uint64_t)(v9 + 45));
  swift_bridgeObjectRetain();
  View.styleContext<A>(_:)();
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + 45, v10);
  v9[22] = v12;
  v9[23] = v13;
  v9[24] = v18;
  v9[25] = v14 - 216;
  v9[16] = v12;
  v9[17] = v13;
  v9[18] = v18;
  v9[19] = v14 - 216;
  v22 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemListContentModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
  v9[43] = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v9[44] = v22;
  v23 = MEMORY[0x1E0CE2E70];
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9[13], v9 + 43);
  v9[41] = &protocol witness table for UIKitMenuButton<A, B>;
  v9[42] = &protocol witness table for UIKitSystemButtonConfigurationModifier;
  v25 = MEMORY[0x18D75FFDC](v23, v9[5], v9 + 41);
  v9[39] = v24;
  v9[40] = v25;
  v9[37] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v9[1], v9 + 39);
  v9[38] = &protocol witness table for ViewInputFlagModifier<A>;
  v26 = MEMORY[0x18D75FFDC](v23, *v9, v9 + 37);
  v27 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier);
  v9[35] = v26;
  v9[36] = v27;
  v28 = MEMORY[0x18D75FFDC](v23, v9[2], v9 + 35);
  v29 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  v9[33] = v28;
  v9[34] = v29;
  v30 = MEMORY[0x18D75FFDC](v23, v9[3], v9 + 33);
  v31 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemTintModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier);
  v9[31] = v30;
  v9[32] = v31;
  v32 = MEMORY[0x18D75FFDC](v23, v9[6], v9 + 31);
  v33 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>();
  v9[29] = v32;
  v9[30] = v33;
  v34 = MEMORY[0x18D75FFDC](v23, v11, v9 + 29);
  StaticIf<>.init<A>(in:then:else:)(v34, (void (*)(void))partial apply for closure #1 in PopUpButton.body.getter, (uint64_t)(v9 + 20), (uint64_t)partial apply for closure #2 in PopUpButton.body.getter, (uint64_t)(v9 + 14), v11, v11, MEMORY[0x1E0CE4A60]);
}

uint64_t sub_1874E2E6C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  v0[27] = v1;
  v0[28] = v1;
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v3, v0 + 27);
  v6 = v0[7];
  static ViewBuilder.buildExpression<A>(_:)(v2, v3, v5);
  v7 = *(void (**)(uint64_t, uint64_t))(v0[8] + 8);
  v7(v2, v3);
  static ViewBuilder.buildBlock<A>(_:)(v6, v3, v0[12]);
  v7(v6, v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0[11] - 8) + 8))(v4 - 216);
}

void closure #1 in PopUpButton.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for PickerStyleConfiguration.Label(255, a3, a4, a4);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Content(255, a3, a4, v6);
  type metadata accessor for PickerCurrentValueLabel();
}

void sub_1874E2FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  v5 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for PickerContentView(255, v2, v1, v6);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  *(_QWORD *)(v3 - 336) = v8;
  v9 = type metadata accessor for ModifiedContent();
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>, a1);
  v11 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  *(_QWORD *)(v3 - 136) = v10;
  *(_QWORD *)(v3 - 128) = v11;
  v12 = MEMORY[0x1E0CE2E70];
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v3 - 136);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v7);
  v15 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  *(_QWORD *)(v3 - 152) = v14;
  *(_QWORD *)(v3 - 144) = v15;
  v16 = MEMORY[0x18D75FFDC](v12, v8, v3 - 152);
  *(_QWORD *)(v3 - 344) = v16;
  *(_QWORD *)(v3 - 168) = v16;
  *(_QWORD *)(v3 - 160) = &protocol witness table for ToggleStyleModifier<A>;
  v17 = MEMORY[0x18D75FFDC](v12, v9, v3 - 168);
  *(_QWORD *)(v3 - 120) = v5;
  *(_QWORD *)(v3 - 112) = v9;
  *(_QWORD *)(v3 - 104) = v13;
  *(_QWORD *)(v3 - 96) = v17;
  type metadata accessor for UIKitMenuButton();
}

void sub_1874E3118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
  v4 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v3 - 376) = type metadata accessor for LabeledContent(255, v0, v4, v5);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>();
  *(_QWORD *)(v3 - 368) = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  *(_QWORD *)(v3 - 360) = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
  *(_QWORD *)(v3 - 352) = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuOrder>, (uint64_t)&type metadata for MenuOrder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v6 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v3 - 328) = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = type metadata accessor for PopUpButton(0, v2, v1, v10);
  v12 = PopUpButton.toolbarMenuIndicatorVisibility.getter(v11);
  PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(*(_QWORD *)(v3 - 312), 0, v12, v11);
}

uint64_t sub_1874E32E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);

  v8 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemListContentModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
  *(_QWORD *)(v7 - 184) = &protocol witness table for PickerStyleConfiguration<A>.Label;
  *(_QWORD *)(v7 - 176) = v8;
  v9 = MEMORY[0x18D75FFDC](v1, v6, v7 - 184);
  *(_QWORD *)(v7 - 200) = &protocol witness table for UIKitMenuButton<A, B>;
  *(_QWORD *)(v7 - 192) = &protocol witness table for UIKitSystemButtonConfigurationModifier;
  v10 = MEMORY[0x18D75FFDC](v1, v2, v7 - 200);
  *(_QWORD *)(v7 - 216) = v9;
  *(_QWORD *)(v7 - 208) = v10;
  *(_QWORD *)(v7 - 232) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, *(_QWORD *)(v7 - 376), v7 - 216);
  *(_QWORD *)(v7 - 224) = &protocol witness table for ViewInputFlagModifier<A>;
  v11 = MEMORY[0x18D75FFDC](v1, v5, v7 - 232);
  v12 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier);
  *(_QWORD *)(v7 - 248) = v11;
  *(_QWORD *)(v7 - 240) = v12;
  v13 = MEMORY[0x18D75FFDC](v1, *(_QWORD *)(v7 - 368), v7 - 248);
  v14 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  *(_QWORD *)(v7 - 264) = v13;
  *(_QWORD *)(v7 - 256) = v14;
  v15 = MEMORY[0x18D75FFDC](v1, *(_QWORD *)(v7 - 360), v7 - 264);
  v16 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemTintModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier);
  *(_QWORD *)(v7 - 280) = v15;
  *(_QWORD *)(v7 - 272) = v16;
  v17 = MEMORY[0x18D75FFDC](v1, *(_QWORD *)(v7 - 352), v7 - 280);
  v18 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>();
  *(_QWORD *)(v7 - 296) = v17;
  *(_QWORD *)(v7 - 288) = v18;
  v19 = MEMORY[0x18D75FFDC](v1, v0, v7 - 296);
  static ViewBuilder.buildExpression<A>(_:)(v4, v0, v19);
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 328) + 8);
  v20(v4, v0);
  static ViewBuilder.buildBlock<A>(_:)(v3, v0, *(_QWORD *)(v7 - 304));
  return v20(v3, v0);
}

uint64_t PopUpButton.toolbarMenuIndicatorVisibility.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;

  v2 = v1 + *(int *)(a1 + 44);
  v3 = *(_QWORD *)v2;
  v4 = *(_BYTE *)(v2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v2, v4);
  v5 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  if (v5 == 1)
    return 1;
  else
    return 2;
}

void PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a4 + 16);
  v5 = *(_QWORD *)(a4 + 24);
  type metadata accessor for PickerStyleConfiguration.Label(255, v4, v5, a4);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Content(255, v4, v5, v6);
  type metadata accessor for PickerCurrentValueLabel();
}

void sub_1874E35F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  v5 = type metadata accessor for ModifiedContent();
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>, a1);
  v7 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  *(_QWORD *)(v2 - 136) = v6;
  *(_QWORD *)(v2 - 128) = v7;
  v8 = MEMORY[0x1E0CE2E70];
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v2 - 136);
  *(_QWORD *)(v2 - 152) = v1;
  *(_QWORD *)(v2 - 144) = &protocol witness table for ToggleStyleModifier<A>;
  v10 = MEMORY[0x18D75FFDC](v8, v5, v2 - 152);
  *(_QWORD *)(v2 - 120) = v4;
  *(_QWORD *)(v2 - 112) = v5;
  *(_QWORD *)(v2 - 104) = v9;
  *(_QWORD *)(v2 - 96) = v10;
  type metadata accessor for UIKitMenuButton();
}

uint64_t sub_1874E36F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v48[96];

  type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
  v6 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for LabeledContent(0, v3, v6, v7);
  *(_QWORD *)(v0 + 64) = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v48[-v10];
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v12 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v0 + 56) = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  *(_QWORD *)(v0 + 16) = &v48[-v14];
  type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>();
  v15 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v0 + 24) = &v48[-v17];
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  v18 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  *(_QWORD *)(v0 + 32) = &v48[-v20];
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
  v21 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v0 + 88) = v21;
  *(_QWORD *)(v0 + 104) = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  *(_QWORD *)(v0 + 40) = &v48[-v23];
  v24 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 224) = v1;
  *(_QWORD *)(v0 + 232) = v24;
  v25 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 240) = v25;
  *(_QWORD *)(v0 + 248) = v4;
  *(_BYTE *)(v0 + 256) = *(_DWORD *)(v0 + 112);
  *(_BYTE *)(v0 + 257) = *(_DWORD *)(v0 + 116);
  v27 = *(_QWORD *)(v0 + 120);
  v26 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 264) = v26;
  *(_QWORD *)(v0 + 272) = v27;
  *(_QWORD *)(v0 + 160) = v1;
  *(_QWORD *)(v0 + 168) = v24;
  *(_QWORD *)(v0 + 176) = v25;
  *(_QWORD *)(v0 + 184) = v4;
  *(_QWORD *)(v0 + 192) = v26;
  v28 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemListContentModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
  *(_QWORD *)(v5 - 168) = &protocol witness table for PickerStyleConfiguration<A>.Label;
  *(_QWORD *)(v5 - 160) = v28;
  v29 = *(_QWORD *)(v0 + 8);
  v30 = MEMORY[0x18D75FFDC](v2, v29, v5 - 168);
  *(_QWORD *)(v5 - 184) = &protocol witness table for UIKitMenuButton<A, B>;
  *(_QWORD *)(v5 - 176) = &protocol witness table for UIKitSystemButtonConfigurationModifier;
  v31 = MEMORY[0x18D75FFDC](v2, v6, v5 - 184);
  LabeledContent<>.init(content:label:)((uint64_t (*)(void))partial apply for closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:), (uint64_t (*)(uint64_t))partial apply for closure #2 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:), v0 + 144, v29, v6, (uint64_t)v11);
  *(_QWORD *)(v5 - 200) = v30;
  *(_QWORD *)(v5 - 192) = v31;
  v32 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v8, v5 - 200);
  v33 = lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent();
  v34 = *(_QWORD *)(v0 + 16);
  View.input<A>(_:)((uint64_t)&type metadata for AccessibilityCombinedLabeledContent, v8, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, v32, v33);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v0 + 64) + 8))(v11, v8);
  *(_QWORD *)(v5 - 216) = v32;
  *(_QWORD *)(v5 - 208) = &protocol witness table for ViewInputFlagModifier<A>;
  v35 = MEMORY[0x1E0CE2E70];
  v36 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v5 - 216);
  v37 = type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>();
  v38 = *(_QWORD *)(v0 + 24);
  MEMORY[0x18D75B4AC](v37, v12, v37, v36);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 56) + 8))(v34, v12);
  v39 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier);
  *(_QWORD *)(v5 - 232) = v36;
  *(_QWORD *)(v5 - 224) = v39;
  v40 = MEMORY[0x18D75FFDC](v35, v15, v5 - 232);
  v41 = *(_QWORD *)(v0 + 32);
  View.allowsToolbarItemBridging(options:)(1, v15, v40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 8))(v38, v15);
  v42 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  *(_QWORD *)(v5 - 248) = v40;
  *(_QWORD *)(v5 - 240) = v42;
  v43 = MEMORY[0x18D75FFDC](v35, v18, v5 - 248);
  v44 = *(_QWORD *)(v0 + 40);
  View.toolbarPlatformItemTint()(v18, v43);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 80) + 8))(v41, v18);
  swift_getKeyPath();
  v45 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemTintModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier);
  *(_QWORD *)(v0 + 280) = v43;
  *(_QWORD *)(v0 + 288) = v45;
  v46 = *(_QWORD *)(v0 + 88);
  MEMORY[0x18D75FFDC](v35, v46, v0 + 280);
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 104) + 8))(v44, v46);
}

void closure #2 in PopUpButton.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for PickerStyleConfiguration.Label(255, a3, a4, a4);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Content(255, a3, a4, v6);
  type metadata accessor for PickerCurrentValueLabel();
}

void sub_1874E3C64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  v5 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for PickerContentView(255, v2, v1, v6);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  *(_QWORD *)(v3 - 336) = v8;
  v9 = type metadata accessor for ModifiedContent();
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>, a1);
  v11 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  *(_QWORD *)(v3 - 136) = v10;
  *(_QWORD *)(v3 - 128) = v11;
  v12 = MEMORY[0x1E0CE2E70];
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v3 - 136);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v7);
  v15 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  *(_QWORD *)(v3 - 152) = v14;
  *(_QWORD *)(v3 - 144) = v15;
  *(_QWORD *)(v3 - 168) = MEMORY[0x18D75FFDC](v12, v8, v3 - 152);
  *(_QWORD *)(v3 - 160) = &protocol witness table for ToggleStyleModifier<A>;
  v16 = MEMORY[0x18D75FFDC](v12, v9, v3 - 168);
  *(_QWORD *)(v3 - 120) = v5;
  *(_QWORD *)(v3 - 112) = v9;
  *(_QWORD *)(v3 - 104) = v13;
  *(_QWORD *)(v3 - 96) = v16;
  type metadata accessor for UIKitMenuButton();
}

void sub_1874E3DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
  v4 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v3 - 360) = type metadata accessor for LabeledContent(255, v0, v4, v5);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  *(_QWORD *)(v3 - 352) = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
  *(_QWORD *)(v3 - 344) = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuOrder>, (uint64_t)&type metadata for MenuOrder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v6 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v3 - 328) = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = type metadata accessor for PopUpButton(0, v2, v1, v10);
  PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(*(_QWORD *)(v3 - 320), 0, 3, v11);
}

uint64_t sub_1874E3F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);

  v8 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemListContentModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
  *(_QWORD *)(v7 - 184) = &protocol witness table for PickerStyleConfiguration<A>.Label;
  *(_QWORD *)(v7 - 176) = v8;
  v9 = MEMORY[0x18D75FFDC](v1, *(_QWORD *)(v7 - 368), v7 - 184);
  *(_QWORD *)(v7 - 200) = &protocol witness table for UIKitMenuButton<A, B>;
  *(_QWORD *)(v7 - 192) = &protocol witness table for UIKitSystemButtonConfigurationModifier;
  v10 = MEMORY[0x18D75FFDC](v1, v6, v7 - 200);
  *(_QWORD *)(v7 - 216) = v9;
  *(_QWORD *)(v7 - 208) = v10;
  *(_QWORD *)(v7 - 232) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, *(_QWORD *)(v7 - 360), v7 - 216);
  *(_QWORD *)(v7 - 224) = &protocol witness table for ViewInputFlagModifier<A>;
  v11 = MEMORY[0x18D75FFDC](v1, v2, v7 - 232);
  v12 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier);
  *(_QWORD *)(v7 - 248) = v11;
  *(_QWORD *)(v7 - 240) = v12;
  v13 = MEMORY[0x18D75FFDC](v1, v5, v7 - 248);
  v14 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  *(_QWORD *)(v7 - 264) = v13;
  *(_QWORD *)(v7 - 256) = v14;
  v15 = MEMORY[0x18D75FFDC](v1, *(_QWORD *)(v7 - 352), v7 - 264);
  v16 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemTintModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier);
  *(_QWORD *)(v7 - 280) = v15;
  *(_QWORD *)(v7 - 272) = v16;
  v17 = MEMORY[0x18D75FFDC](v1, *(_QWORD *)(v7 - 344), v7 - 280);
  v18 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>();
  *(_QWORD *)(v7 - 296) = v17;
  *(_QWORD *)(v7 - 288) = v18;
  v19 = MEMORY[0x18D75FFDC](v1, v0, v7 - 296);
  static ViewBuilder.buildExpression<A>(_:)(v4, v0, v19);
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 328) + 8);
  v20(v4, v0);
  static ViewBuilder.buildBlock<A>(_:)(v3, v0, *(_QWORD *)(v7 - 304));
  return v20(v3, v0);
}

void closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD v16[16];
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _UNKNOWN **v28;
  uint64_t v29;

  v17 = a4;
  v25 = a3;
  v19 = a1;
  v23 = a7;
  v24 = a2;
  v16[14] = a2;
  v9 = type metadata accessor for UIButton.Configuration();
  v21 = *(_QWORD *)(v9 - 8);
  v22 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v20 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PopUpButton(0, a5, a6, v12);
  MEMORY[0x1E0C80A78](v13, v14);
  v26 = type metadata accessor for PickerStyleConfiguration.Content(255, a5, a6, v15);
  v27 = a5;
  v28 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  v29 = a6;
  v18 = a6;
  type metadata accessor for PickerCurrentValueLabel();
}

void sub_1874E4268(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  v5 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  *(_QWORD *)(v3 - 248) = v1;
  v6 = type metadata accessor for ModifiedContent();
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>, a1);
  v8 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  *(_QWORD *)(v3 - 136) = v7;
  *(_QWORD *)(v3 - 128) = v8;
  v9 = MEMORY[0x1E0CE2E70];
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v3 - 136);
  *(_QWORD *)(v3 - 232) = v2;
  *(_QWORD *)(v3 - 152) = v2;
  *(_QWORD *)(v3 - 144) = &protocol witness table for ToggleStyleModifier<A>;
  v11 = MEMORY[0x18D75FFDC](v9, v6, v3 - 152);
  *(_QWORD *)(v3 - 272) = v5;
  *(_QWORD *)(v3 - 120) = v5;
  *(_QWORD *)(v3 - 112) = v6;
  *(_QWORD *)(v3 - 280) = v6;
  *(_QWORD *)(v3 - 304) = v10;
  *(_QWORD *)(v3 - 104) = v10;
  *(_QWORD *)(v3 - 96) = v11;
  *(_QWORD *)(v3 - 312) = v11;
  type metadata accessor for UIKitMenuButton();
}

uint64_t sub_1874E438C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_BYTE *, uint64_t);
  _QWORD v42[2];
  uint64_t (*v43)();
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[32];

  *(_QWORD *)(v6 - 288) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = &v49[-v8];
  type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
  v10 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v6 - 296) = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v49[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = &v49[-v17];
  v19 = v4;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v4 + 16))(v3, *(_QWORD *)(v6 - 176), v2, v16);
  if (*(_DWORD *)(v6 - 264) == 3)
  {
    v20 = v3 + *(int *)(v2 + 44);
    *(_QWORD *)(v6 - 264) = v3;
    v21 = v5;
    v22 = v2;
    v23 = *(_QWORD *)v20;
    v24 = *(_BYTE *)(v20 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v20, v24);
    *(_DWORD *)(v6 - 180) = specialized Environment.wrappedValue.getter(v23, v24);
    v25 = v23;
    v2 = v22;
    v5 = v21;
    v3 = *(_QWORD *)(v6 - 264);
    outlined consume of Environment<Bool>.Content(v25, v24);
  }
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v3, v2);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = *(_QWORD **)(v6 - 248);
  v28 = *(_QWORD *)(v6 - 240);
  v43 = v5;
  v44 = v29;
  v30 = *(_QWORD *)(v6 - 232);
  v45 = v28;
  v46 = v30;
  v47 = *(_QWORD *)(v6 - 256);
  MEMORY[0x1E0C80A78](v31, v32);
  v43 = v5;
  v44 = v33;
  v45 = v35;
  v46 = v34;
  v47 = *(_QWORD *)(v6 - 176);
  v48 = *(_QWORD *)(v6 - 312);
  v47 = *(_QWORD *)(v6 - 304);
  v46 = *(_QWORD *)(v6 - 280);
  v36 = *(_QWORD *)(v6 - 272);
  v44 = v42;
  v45 = v36;
  v42[1] = v37;
  v43 = partial apply for closure #2 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:);
  v42[0] = partial apply for closure #1 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:);
  UIKitMenuButton.init(action:isPopUpButton:flexibleDimensions:menuTitleVisibility:menuIndicatorVisibility:onPresentationChanged:menuContent:label:)(0, 0, 1);
  v38 = *(_QWORD *)(v6 - 216);
  static UIButton.Configuration.bordered()();
  View.uikitButtonConfiguration(_:)(v38, a1, (uint64_t)&protocol witness table for UIKitMenuButton<A, B>);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 208) + 8))(v38, *(_QWORD *)(v6 - 200));
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 288) + 8))(v9, a1);
  *(_QWORD *)(v6 - 168) = &protocol witness table for UIKitMenuButton<A, B>;
  *(_QWORD *)(v6 - 160) = &protocol witness table for UIKitSystemButtonConfigurationModifier;
  v39 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v6 - 168);
  static ViewBuilder.buildExpression<A>(_:)(v13, v10, v39);
  v40 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 296) + 8);
  v40(v13, v10);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v18, v10, *(_QWORD *)(v6 - 192));
  return ((uint64_t (*)(_BYTE *, uint64_t))v40)(v18, v10);
}

uint64_t closure #1 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  v28 = a3;
  v29 = a1;
  v32 = a4;
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  v5 = type metadata accessor for ModifiedContent();
  v31 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v27 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v30 = (char *)&v26 - v10;
  KeyPath = swift_getKeyPath();
  v12 = swift_getKeyPath();
  v13 = swift_getKeyPath();
  v49 = 0x4038000000000000;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  v14 = v34;
  v15 = v35;
  v16 = v36;
  v17 = v37;
  v18 = v38;
  v19 = v39;
  v34 = KeyPath;
  v35 = 0;
  v36 = v12;
  v37 = 0;
  v38 = v13;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = v14;
  v44 = v15;
  v45 = v16;
  v46 = v17;
  v47 = v18;
  v48 = v19;
  lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle();
  v20 = v28;
  View.toggleStyle<A>(_:)((uint64_t)&v34, a2, (uint64_t)&type metadata for CheckmarkToggleStyle, v28);
  outlined consume of Environment<Bool>.Content(KeyPath, 0);
  outlined consume of Environment<Bool>.Content(v12, 0);
  outlined consume of Environment<EdgeInsets>.Content(v13, 0, 0, 0, 0);
  outlined consume of Environment<Bool>.Content(v14, v15);
  outlined consume of Environment<Bool>.Content(v16, v17);
  v33[0] = v20;
  v33[1] = &protocol witness table for ToggleStyleModifier<A>;
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v33);
  v22 = (uint64_t)v30;
  v23 = v27;
  static ViewBuilder.buildExpression<A>(_:)(v27, v5, v21);
  v24 = *(void (**)(char *, uint64_t))(v31 + 8);
  v24(v23, v5);
  static ViewBuilder.buildBlock<A>(_:)(v22, v5, v32);
  return ((uint64_t (*)(uint64_t, uint64_t))v24)(v22, v5);
}

void closure #2 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PickerStyleConfiguration.Content(255, a2, a4, a4);
  type metadata accessor for PickerCurrentValueLabel();
}

void sub_1874E4954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&a9 - v11;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  v13 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v13, v14);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = type metadata accessor for PopUpButton(0, v10, v9, v17);
  PopUpButton.detailLabel.getter(v18, v12);
}

uint64_t sub_1874E4A0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>, v3);
  View.toolbarButtonLabel(ignoreEdge:)(0, v3, v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v3);
  v9 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  *(_QWORD *)(v7 - 128) = v8;
  *(_QWORD *)(v7 - 120) = v9;
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v7 - 128);
  static ViewBuilder.buildExpression<A>(_:)(v4, v1, v10);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  v11(v4, v1);
  static ViewBuilder.buildBlock<A>(_:)(v2, v1, *(_QWORD *)(v7 - 136));
  return v11(v2, v1);
}

uint64_t closure #2 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1);
  v7 = type metadata accessor for PickerStyleConfiguration.Label(0, a1, a2, v6);
  v8 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>);
  MEMORY[0x18D75B4AC](v8, v7, v8, &protocol witness table for PickerStyleConfiguration<A>.Label);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>);
  v9 = type metadata accessor for ModifiedContent();
  v13[0] = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v13[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemListContentModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v13);
  v11 = static ViewBuilder.buildExpression<A>(_:)(v10, v9, v10);
  return static ViewBuilder.buildBlock<A>(_:)(v11, v9, a3);
}

_BYTE *closure #3 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(_BYTE *result)
{
  if (!*result)
    *result = 1;
  return result;
}

void PopUpButton.init(children:configuration:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v10 = type metadata accessor for PickerStyleConfiguration.CurrentValueLabel(0, a3, a4, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.CurrentValueLabel, v10);
  *(_BYTE *)a5 = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key() & 1;
  v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a5 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 24) = v11;
  *(_OWORD *)(a5 + 40) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a5 + 56) = *(_QWORD *)(a1 + 48);
  v13 = (int *)type metadata accessor for PopUpButton(0, a3, a4, v12);
  v14 = a5 + v13[10];
  v16 = type metadata accessor for PickerStyleConfiguration(0, a3, a4, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, a2, v16);
  v17 = a5 + v13[11];
  *(_QWORD *)v17 = swift_getKeyPath();
  *(_BYTE *)(v17 + 8) = 0;
  v18 = (_QWORD *)(a5 + v13[12]);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<AnyButtonStyleType.Unknown>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown, (uint64_t)&type metadata for AnyButtonStyleType.Unknown, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
  *v18 = v19;
  v18[1] = &protocol witness table for ButtonStyleTypeBox<A>;
}

uint64_t type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type HideLabelPredicate and conformance HideLabelPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HideLabelPredicate and conformance HideLabelPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HideLabelPredicate and conformance HideLabelPredicate;
  if (!lazy protocol witness table cache variable for type HideLabelPredicate and conformance HideLabelPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HideLabelPredicate, &unk_1E1AC9AD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HideLabelPredicate and conformance HideLabelPredicate);
  }
  return result;
}

void partial apply for closure #1 in PopUpButton.body.getter()
{
  uint64_t *v0;

  closure #1 in PopUpButton.body.getter(v0[4], v0[5], v0[2], v0[3]);
}

void partial apply for closure #2 in PopUpButton.body.getter()
{
  uint64_t *v0;

  closure #2 in PopUpButton.body.getter(v0[4], v0[5], v0[2], v0[3]);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuOrder>, (uint64_t)&type metadata for MenuOrder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

void partial apply for closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(uint64_t a1@<X8>)
{
  uint64_t v1;

  closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(*(unsigned __int8 *)(v1 + 48), *(unsigned __int8 *)(v1 + 49), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), a1);
}

uint64_t partial apply for closure #2 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), a1);
}

uint64_t specialized static HideLabelPredicate.evaluate(inputs:)()
{
  char v0;

  _GraphInputs.interfaceIdiom.getter();
  if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0
    || (static Semantics.v4.getter(), (isLinkedOnOrAfter(_:)() & 1) == 0)
    || (static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0
    || (static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0)
  {
    v0 = 0;
  }
  else
  {
    v0 = static StyleContextAcceptsPredicate.evaluate(inputs:)() ^ 1;
  }
  return v0 & 1;
}

uint64_t partial apply for closure #1 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:));
}

uint64_t partial apply for closure #2 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:));
}

void *type metadata accessor for HideLabelPredicate()
{
  return &unk_1E1AC9AD8;
}

void sub_1874E5038(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E0CE4A60], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
  type metadata accessor for PickerStyleConfiguration.Label(255, v1, v2, v3);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Content(255, v1, v2, v4);
  type metadata accessor for PickerCurrentValueLabel();
}

void sub_1874E50EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_UNKNOWN **a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  v33 = type metadata accessor for ModifiedContent();
  v35 = type metadata accessor for PickerContentView(255, v29, v30, v34);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v36 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  v37 = type metadata accessor for ModifiedContent();
  v38 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>, a1);
  v39 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  *(_QWORD *)(v31 - 136) = v38;
  *(_QWORD *)(v31 - 128) = v39;
  v40 = MEMORY[0x1E0CE2E70];
  v41 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v33, v31 - 136);
  v42 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v35);
  v43 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  *(_QWORD *)(v31 - 152) = v42;
  *(_QWORD *)(v31 - 144) = v43;
  a28 = MEMORY[0x18D75FFDC](v40, v36, v31 - 152);
  a29 = &protocol witness table for ToggleStyleModifier<A>;
  v44 = MEMORY[0x18D75FFDC](v40, v37, &a28);
  *(_QWORD *)(v31 - 120) = v33;
  *(_QWORD *)(v31 - 112) = v37;
  *(_QWORD *)(v31 - 104) = v41;
  *(_QWORD *)(v31 - 96) = v44;
  type metadata accessor for UIKitMenuButton();
}

void sub_1874E523C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for LabeledContent(255, v0, v3, v4);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuOrder>, (uint64_t)&type metadata for MenuOrder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v5 = type metadata accessor for ModifiedContent();
  v6 = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  *(_QWORD *)(v2 - 120) = v1;
  *(_QWORD *)(v2 - 112) = v5;
  *(_QWORD *)(v2 - 104) = v5;
  *(_QWORD *)(v2 - 96) = v6;
  type metadata accessor for StaticIf();
}

uint64_t sub_1874E535C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[25];

  v20[0] = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v20[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemListContentModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
  v19[0] = &protocol witness table for UIKitMenuButton<A, B>;
  v19[1] = &protocol witness table for UIKitSystemButtonConfigurationModifier;
  v18[0] = MEMORY[0x18D75FFDC](v1, v4, v20);
  v18[1] = MEMORY[0x18D75FFDC](v1, v5, v19);
  v17[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v2, v18);
  v17[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v16[0] = MEMORY[0x18D75FFDC](v1, v6, v17);
  v16[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier);
  v15[0] = MEMORY[0x18D75FFDC](v1, v3, v16);
  v15[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  v14[0] = MEMORY[0x18D75FFDC](v1, v8, v15);
  v14[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemTintModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier);
  v13[0] = MEMORY[0x18D75FFDC](v1, v7, v14);
  v13[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>();
  v12[0] = MEMORY[0x18D75FFDC](v1, v9, v13);
  v12[1] = v12[0];
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v12);
}

void *specialized Sequence.first(where:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;

  if (a1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    v3 = 4;
    while (1)
    {
      v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18D75E3BC](v3 - 4, a1) : *(id *)(a1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      if (objc_msgSend(v4, sel_isSystemItem))
      {
        swift_bridgeObjectRelease();
        return v5;
      }

      ++v3;
      if (v6 == v2)
        goto LABEL_10;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t ToolbarBridge.willAppear<A>(hostingController:)(void *a1)
{
  uint64_t v2;

  ToolbarBridge.updateToolbarVisibility<A>(hostingController:)(a1);
  ToolbarBridge.updateTabBar<A>(hostingController:)(a1);
  return ToolbarBridge.navigationItemWillAppear<A>(hostingController:)((uint64_t)a1, v2);
}

void ToolbarBridge.updateTabBar<A>(hostingController:)(id a1)
{
  id v2;
  unsigned int v3;
  id v4;
  id v5;
  void *v8;
  id v9;

  v2 = objc_msgSend(a1, sel_tabBarController);
  if (v2)
  {
    v9 = v2;
    swift_getObjectType();
    if (objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI))
    {
      v3 = objc_msgSend(a1, sel__appearState);
      v4 = objc_msgSend(v9, sel_selectedViewController);
      v5 = v4;
      if (v4 == a1 && v4 != 0 || v3 == 1)
        ToolbarBridge.updateTabSidebar(tabBarController:)(v9);

      v8 = v5;
    }
    else
    {
      v8 = v9;
    }

  }
}

uint64_t ToolbarBridge.navigationItemWillAppear<A>(hostingController:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(*(_QWORD *)(v2 + direct field offset for ToolbarBridge.navigationAdaptor) + 16))
  {
    MEMORY[0x1E0C80A78](result, a2);
    swift_bridgeObjectRetain();
    static Update.ensure<A>(_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ToolbarBridge.navigationItemWillDisappear<A>(hostingController:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(*(_QWORD *)(v2 + direct field offset for ToolbarBridge.navigationAdaptor) + 16))
  {
    MEMORY[0x1E0C80A78](result, a2);
    swift_bridgeObjectRetain();
    static Update.ensure<A>(_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void closure #1 in ToolbarBridge.updateNavigationItem<A>(hostingController:adaptor:)(uint64_t a1, id a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];
  _BYTE v9[48];

  v3 = objc_msgSend(a2, sel_navigationItem);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v6, (uint64_t)v9);
      outlined init with copy of TableColumnList((uint64_t)v9, (uint64_t)v8);
      outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v9);
      v7 = v8[4];
      __swift_project_boxed_opaque_existential_1(v8, v8[3]);
      (*(void (**)(void *))(v7 + 16))(v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      v6 += 48;
      --v5;
    }
    while (v5);

    swift_bridgeObjectRelease();
  }
  else
  {

  }
}

void closure #1 in ToolbarBridge.navigationItemWillAppear<A>(hostingController:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[7];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[48];
  uint64_t v16;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v11[6] = v3;
    v7 = a1 + 32;
    swift_bridgeObjectRetain();
    v8 = 0;
    do
    {
      outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v7, (uint64_t)v15);
      outlined init with copy of TableColumnList((uint64_t)v15, (uint64_t)v12);
      outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v15);
      v9 = v13;
      v10 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 8))(&v16, v9, v10);
      v8 |= v16;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      v7 += 48;
      --v6;
    }
    while (v6);
    a1 = swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  MEMORY[0x1E0C80A78](a1, a2);
  v11[2] = a3;
  v11[3] = a2;
  v11[4] = v8;

}

uint64_t closure #1 in closure #1 in ToolbarBridge.navigationItemWillAppear<A>(hostingController:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[48];

  v5 = *(_QWORD *)(a2 + direct field offset for ToolbarBridge.navigationAdaptor);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v9 = v5 + 32;
    swift_bridgeObjectRetain();
    v10 = 1;
    do
    {
      outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v9, (uint64_t)v17);
      outlined init with copy of TableColumnList((uint64_t)v17, (uint64_t)v14);
      outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v17);
      v11 = v15;
      v12 = v16;
      __swift_project_boxed_opaque_existential_1(v14, v15);
      v10 &= (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 24))(a3, a1, v11, v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      v9 += 48;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v10) = 1;
  }
  return ((a4 & 1) == 0) | ((v10 & 1) == 0);
}

void closure #1 in ToolbarBridge.navigationItemWillDisappear<A>(hostingController:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[11];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[48];
  uint64_t v19;

  v7 = a1;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v14[9] = a4;
    v14[10] = v4;
    v9 = a1 + 32;
    swift_bridgeObjectRetain();
    v10 = 0;
    do
    {
      outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v9, (uint64_t)v18);
      outlined init with copy of TableColumnList((uint64_t)v18, (uint64_t)v15);
      outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v18);
      v11 = v16;
      v12 = v17;
      __swift_project_boxed_opaque_existential_1(v15, v16);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 8))(&v19, v11, v12);
      v10 |= v19;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      v9 += 48;
      --v8;
    }
    while (v8);
    a1 = swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  MEMORY[0x1E0C80A78](a1, a2);
  v14[2] = a3;
  v14[3] = v13;
  v14[4] = v7;
  v14[5] = a2;
  v14[6] = v10;

}

uint64_t closure #1 in closure #1 in ToolbarBridge.navigationItemWillDisappear<A>(hostingController:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[48];

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v8 = a2 + 32;
    swift_bridgeObjectRetain();
    v9 = 1;
    do
    {
      outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v8, (uint64_t)v16);
      outlined init with copy of TableColumnList((uint64_t)v16, (uint64_t)v13);
      outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v16);
      v10 = v14;
      v11 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      v9 &= (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32))(a3, a1, v10, v11);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      v8 += 48;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v9) = 1;
  }
  return ((a4 & 1) == 0) | ((v9 & 1) == 0);
}

void ToolbarBridge.updateTabSidebar(tabBarController:)(id a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  Class isa;

  v3 = *(_QWORD *)(v1 + direct field offset for ToolbarBridge.platformVended + 24);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v4 > 0)
    goto LABEL_4;
  v6 = objc_msgSend(a1, sel__uip_sidebar);
  v7 = objc_msgSend(v6, sel__toolbarItems);

  if (v7)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v9 >= 1)
    {
LABEL_4:
      v5 = objc_msgSend(a1, sel__uip_sidebar);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
      swift_bridgeObjectRetain();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v5, sel__setToolbarItems_, isa);

    }
  }
}

uint64_t UIKitToolbarStrategy.makeContent(entry:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v25;

  v2 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v18, v19);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)v5, type metadata accessor for ToolbarStorage.GroupItem);
    if (v5[1])
    {
      v21 = *v5;
      swift_bridgeObjectRetain();
    }
    else
    {
      UUID.init()();
      v21 = UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    v22 = type metadata accessor for ToolbarStorage.GroupItem;
    v23 = (uint64_t)v5;
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)v14, type metadata accessor for ToolbarStorage.Item);
    if (*((_QWORD *)v14 + 5))
    {
      v21 = *((_QWORD *)v14 + 4);
      swift_bridgeObjectRetain();
    }
    else
    {
      UUID.init()();
      v21 = UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    v22 = type metadata accessor for ToolbarStorage.Item;
    v23 = (uint64_t)v14;
LABEL_12:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v23, v22);
    return v21;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, type metadata accessor for ToolbarStorage.Entry.Kind);
  return 0;
}

void UIKitToolbarStrategy.updateVended(_:to:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v31 = type metadata accessor for ToolbarStorage.GroupItem(0);
  v30[5] = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v6);
  v30[4] = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v33 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v32 = (char *)v30 - v15;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, v8);
  MEMORY[0x1E0C80A78](v16, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v20 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v20, v21);
  MEMORY[0x1E0C80A78](v22, v23);
  type metadata accessor for (Toolbar.VendedItem, ToolbarStorage.Entry.Kind)();
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)v30 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = (uint64_t)&v27[*(int *)(v28 + 48)];
  v34 = a1;
  *(_QWORD *)v27 = a1;
  v27[8] = a2;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a3, v29, type metadata accessor for ToolbarStorage.Entry.Kind);
  __asm { BR              X10 }
}

void sub_1874E690C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  id v16;

  type metadata accessor for ToolbarStorage.Entry.Kind(0);
  if (swift_getEnumCaseMultiPayload())
  {
    v16 = *(id *)(v8 - 328);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v6, (uint64_t (*)(_QWORD))type metadata accessor for (Toolbar.VendedItem, ToolbarStorage.Entry.Kind));
  }
  else
  {
    v9 = v4;
    v10 = v0;
    outlined init with take of TableCellFormula(v9, v0, type metadata accessor for ToolbarStorage.Item);
    v11 = type metadata accessor for ToolbarStorage.Entry(0);
    v12 = (id *)v6;
    v13 = *(_BYTE **)(v8 - 328);
    v13[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge] = *(_BYTE *)(v5 + *(int *)(v11 + 20));
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v10, v1, type metadata accessor for ToolbarStorage.Item);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v1, 0, 1, v2);
    v14 = (uint64_t)&v13[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item];
    swift_beginAccess();
    v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    outlined init with copy of SearchFieldConfiguration.Data?(v14, v7, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    swift_beginAccess();
    v13;
    outlined assign with copy of ToolbarStorage.GroupItem?(v1, v14, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item);
    swift_endAccess();
    UIKitBarButtonItem.item.didset();
    outlined destroy of Binding<AttributedString>(v1, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, v15);
    outlined destroy of Binding<AttributedString>(v7, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, v15);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v10, type metadata accessor for ToolbarStorage.Item);

  }
}

void closure #1 in closure #1 in UIKitToolbarStrategy.updateBarTitle()(uint64_t a1, uint64_t a2, void **a3)
{
  closure #1 in closure #1 in UIKitToolbarStrategy.updateBarTitle()(a1, a2, a3, L" @", (unsigned __int16 *)L"@");
}

void closure #1 in closure #1 in UIKitToolbarStrategy.updateNavigationAccessory()(uint64_t a1, uint64_t a2, void **a3)
{
  closure #1 in closure #1 in UIKitToolbarStrategy.updateBarTitle()(a1, a2, a3, L" @", (unsigned __int16 *)L"@");
}

void closure #1 in closure #1 in UIKitToolbarStrategy.updateBarTitle()(uint64_t a1, uint64_t a2, void **a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  int v23;
  id v24;
  Class v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  unsigned __int16 *v39;
  __int16 v40;
  _BYTE v41[104];
  _OWORD v42[5];
  uint64_t v43;
  _OWORD v44[5];
  uint64_t v45;
  __int16 v46;
  uint64_t v47;

  v10 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v37 - v20;
  if (!*a3)
  {
    v39 = a5;
    v22 = *(id *)a2;
    v23 = *(unsigned __int8 *)(a2 + 8);
    if (v23 == 3)
    {
      *a3 = v22;
      v24 = v22;
    }
    else
    {
      v38 = *(id *)a2;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v13, type metadata accessor for ToolbarStorage.Entry.Kind);
      if (swift_getEnumCaseMultiPayload())
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, type metadata accessor for ToolbarStorage.Entry.Kind);
      }
      else
      {
        outlined init with take of TableCellFormula((uint64_t)v13, (uint64_t)v17, type metadata accessor for ToolbarStorage.Item);
        outlined consume of Toolbar.VendedItem?(v38, v23);
        outlined init with take of TableCellFormula((uint64_t)v17, (uint64_t)v21, type metadata accessor for ToolbarStorage.Item);
        outlined init with copy of _ViewList_View((uint64_t)(v21 + 104), (uint64_t)v42);
        swift_unknownObjectWeakInit();
        swift_unknownObjectWeakAssign();
        outlined init with take of WeakBox<UIBarButtonItem>((uint64_t)v41, (uint64_t)&v47);
        v44[2] = v42[2];
        v44[3] = v42[3];
        v44[4] = v42[4];
        v45 = v43;
        v44[0] = v42[0];
        v44[1] = v42[1];
        v46 = 2;
        outlined init with copy of BarItemView((uint64_t)v44, (uint64_t)v42);
        type metadata accessor for UIKitBarItemHost<BarItemView>(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIKitBarItemHost);
        v26 = (char *)objc_allocWithZone(v25);
        v27 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v28 = &v26[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v26) + 0x9A0)];
        *(_QWORD *)v28 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
        *((_QWORD *)v28 + 1) = 0;
        outlined init with copy of BarItemView((uint64_t)v42, (uint64_t)v41);
        v29 = specialized _UIHostingView.init(rootView:)((uint64_t)v41);
        v30 = (_QWORD *)((char *)v29 + *(_QWORD *)((*v27 & *v29) + 0x108));
        swift_beginAccess();
        v31 = *v30;
        *v30 = 0;
        if (v31)
        {
          v32 = *a4;
          v33 = *v39;
          if ((v33 & ~v32) == 0)
            LOWORD(v33) = 0;
          v40 = v33 | v32;
          type metadata accessor for UIKitBarItemHost<BarItemView>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for _UIHostingView);
          lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>();
          v34 = v29;
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        }
        outlined destroy of BarItemView((uint64_t)v42);
        outlined destroy of BarItemView((uint64_t)v44);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, type metadata accessor for ToolbarStorage.Item);
        *(_QWORD *)a2 = v29;
        *(_BYTE *)(a2 + 8) = 3;
        v35 = *a3;
        *a3 = v29;
        v36 = v29;

      }
    }
  }
}

void closure #1 in closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  int v26;
  id v27;
  id v28;
  int v29;
  id v30;
  id v31;
  char v32;
  char v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[3];
  __int128 v37;

  v35 = a3;
  v13 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v36[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v36[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v36[-1] - v23;
  memset(v36, 0, sizeof(v36));
  v37 = xmmword_187C39070;
  LOBYTE(a5) = specialized static Toolbar.BarLocation.== infix(_:_:)(a5, (uint64_t)v36);
  outlined destroy of Toolbar.BarLocation((uint64_t)v36);
  if ((a5 & 1) != 0 && *a4 == a6)
    *(_BYTE *)(v35 + 8) = 1;
  v25 = *(void **)a2;
  v26 = *(unsigned __int8 *)(a2 + 8);
  if (v26 == 1)
  {
    v27 = v25;
  }
  else
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v16, type metadata accessor for ToolbarStorage.Entry.Kind);
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, type metadata accessor for ToolbarStorage.Entry.Kind);
      goto LABEL_11;
    }
    outlined init with take of TableCellFormula((uint64_t)v16, (uint64_t)v20, type metadata accessor for ToolbarStorage.Item);
    outlined consume of Toolbar.VendedItem?(v25, v26);
    outlined init with take of TableCellFormula((uint64_t)v20, (uint64_t)v24, type metadata accessor for ToolbarStorage.Item);
    v29 = *(unsigned __int8 *)(v35 + 8);
    v30 = *(id *)v35;
    v31 = specialized static UIKitBarButtonItem.makeVended(item:context:)((uint64_t)v24, v30, v29);
    v33 = v32;
    v27 = v34;

    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, type metadata accessor for ToolbarStorage.Item);
    *(_QWORD *)a2 = v31;
    *(_BYTE *)(a2 + 8) = v33;
    if (!v27)
      goto LABEL_11;
  }
  v28 = v27;
  MEMORY[0x18D75CF58]();
  if (*(_QWORD *)((*a7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

LABEL_11:
  *(_BYTE *)(v35 + 8) = 2;
  ++*a4;
}

void closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;
  id v16;
  char v17;

  outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v13);
  v7 = (void *)MEMORY[0x18D760234](&v15);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v13);
  if (v7)
  {
    v16 = v7;
    v17 = 2;
    v12 = MEMORY[0x1E0DEE9D8];
    memset(v13, 0, sizeof(v13));
    v14 = xmmword_187C304D0;
    v8 = specialized static Toolbar.BarLocation.== infix(_:_:)(a2, (uint64_t)v13);
    outlined destroy of Toolbar.BarLocation((uint64_t)v13);
    if ((v8 & 1) != 0)
      v17 = 0;
    v9 = specialized ToolbarBridge.entryCount(in:)(a2);
    if (__OFSUB__(v9, 1))
    {
      __break(1u);
    }
    else
    {
      v13[0] = 0;
      v11 = MEMORY[0x1E0C80A78](v9, v10);
      specialized ToolbarBridge.adjustEntries(in:_:)(a2, a3, v11);
      *a4 = v12;

    }
  }
  else
  {
    *a4 = MEMORY[0x1E0DEE9D8];
  }
}

void closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  id v63;
  _QWORD *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  id v77[3];
  __int128 v78;

  v72 = a7;
  v73 = a1;
  v75 = a2;
  v76 = a4;
  v74 = a3;
  v9 = type metadata accessor for ToolbarStorage.Item(0);
  v70 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v69 = (uint64_t)&v65 - v15;
  v16 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v71 = (uint64_t)&v65 - v27;
  v28 = type metadata accessor for ToolbarStorage.Entry(0);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v65 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, v20);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v65 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v65 - v38;
  memset(v77, 0, sizeof(v77));
  v78 = xmmword_187C39070;
  LOBYTE(a5) = specialized static Toolbar.BarLocation.== infix(_:_:)(a5, (uint64_t)v77);
  outlined destroy of Toolbar.BarLocation((uint64_t)v77);
  if ((a5 & 1) != 0 && *v76 == a6)
    *(_BYTE *)(v74 + 8) = 1;
  v77[0] = 0;
  if (*(_BYTE *)(v75 + 8) == 2)
  {
    v40 = *(id *)v75;
    v41 = *(id *)v75;
    v42 = v72;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    outlined consume of Toolbar.VendedItem?(v40, 2);
    v43 = v74;
  }
  else
  {
    v44 = v73;
    ToolbarStorage.Entry.groupItem.getter((uint64_t)v35);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v44, (uint64_t)v31, type metadata accessor for ToolbarStorage.Entry);
    v45 = type metadata accessor for ToolbarStorage.GroupItem(0);
    v46 = *(_QWORD *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v35, 1, v45) == 1)
    {
      v68 = v46;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v31, (uint64_t)v19, type metadata accessor for ToolbarStorage.Entry.Kind);
      if (swift_getEnumCaseMultiPayload())
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, type metadata accessor for ToolbarStorage.Entry.Kind);
        v47 = 1;
        v48 = v71;
      }
      else
      {
        v51 = (uint64_t)v19;
        v48 = v71;
        outlined init with take of TableCellFormula(v51, v71, type metadata accessor for ToolbarStorage.Item);
        v47 = 0;
      }
      v52 = v70;
      v53 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v48, v47, 1, v9);
      outlined init with copy of SearchFieldConfiguration.Data?(v48, (uint64_t)v24, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v24, 1, v9) != 1)
      {
        v54 = v69;
        outlined init with take of TableCellFormula((uint64_t)v24, v69, type metadata accessor for ToolbarStorage.Item);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v54, (uint64_t)v12, type metadata accessor for ToolbarStorage.Item);
        v55 = *((_QWORD *)v12 + 5);
        v70 = *((_QWORD *)v12 + 4);
        outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v12 + 48), (uint64_t)(v39 + 16));
        v56 = *((unsigned __int16 *)v12 + 45);
        v66 = v12[92];
        v67 = v56;
        v65 = *((_QWORD *)v12 + 12);
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.Item>, type metadata accessor for ToolbarStorage.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v57 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
        v58 = swift_allocObject();
        *(_OWORD *)(v58 + 16) = xmmword_187BF9830;
        outlined init with take of TableCellFormula((uint64_t)v12, v58 + v57, type metadata accessor for ToolbarStorage.Item);
        v59 = &v39[*(int *)(v45 + 44)];
        v60 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
        v61 = v59;
        v48 = v71;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v61, 1, 1, v60);
        *(_QWORD *)v39 = v70;
        *((_QWORD *)v39 + 1) = v55;
        *(_WORD *)(v39 + 57) = v67;
        v39[59] = v66;
        *((_QWORD *)v39 + 8) = v65;
        *((_QWORD *)v39 + 9) = v58;
        swift_bridgeObjectRetain();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v54, type metadata accessor for ToolbarStorage.Item);
        v53 = 0;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v39, v53, 1, v45);
      v62 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      outlined destroy of Binding<AttributedString>(v48, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v31, type metadata accessor for ToolbarStorage.Entry);
      v49 = outlined destroy of Binding<AttributedString>((uint64_t)v35, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, v62);
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v31, type metadata accessor for ToolbarStorage.Entry);
      outlined init with take of TableCellFormula((uint64_t)v35, (uint64_t)v39, type metadata accessor for ToolbarStorage.GroupItem);
      v49 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v39, 0, 1, v45);
    }
    MEMORY[0x1E0C80A78](v49, v50);
    v43 = v74;
    *(&v65 - 4) = v75;
    *(&v65 - 3) = (uint64_t)v77;
    *(&v65 - 2) = v73;
    *(&v65 - 1) = v43;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI14ToolbarStorageV9GroupItemV_s5NeverOytTg5((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:));
    outlined destroy of Binding<AttributedString>((uint64_t)v39, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v77[0])
    {
      v63 = v77[0];
      v64 = v72;
      MEMORY[0x18D75CF58]();
      if (*(_QWORD *)((*v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v64 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

    }
  }
  *(_BYTE *)(v43 + 8) = 2;
  ++*v76;
}

void closure #1 in closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;

  v10 = type metadata accessor for ToolbarStorage.Entry(0);
  v11 = *a5;
  LOBYTE(a5) = *(_BYTE *)(a4 + *(int *)(v10 + 20));
  v12 = v11;
  specialized static UIKitBarButtonItemGroup.makeVended(groupItem:edge:context:)(a1, (char)a5);
  v14 = v13;
  LOBYTE(a1) = v15;
  v17 = v16;

  v18 = *(void **)a2;
  *(_QWORD *)a2 = v14;
  v19 = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a2 + 8) = a1;
  outlined consume of Toolbar.VendedItem?(v18, v19);
  v20 = *a3;
  *a3 = v17;

}

uint64_t closure #1 in UIKitToolbarStrategy.updateTabSidebar()@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];
  __int128 v7;

  memset(v6, 0, sizeof(v6));
  v7 = xmmword_187C39050;
  v4 = specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(_QWORD *__return_ptr))partial apply for closure #1 in UIKitToolbarStrategy.barButtonItems(in:));
  outlined destroy of Toolbar.BarLocation((uint64_t)v6);
  *(_QWORD *)(a1 + direct field offset for ToolbarBridge.platformVended + 24) = v4;
  result = swift_bridgeObjectRelease();
  *a2 = 1;
  return result;
}

uint64_t closure #1 in closure #1 in UIKitToolbarStrategy.makeBarItems()(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  int v28;
  uint64_t v29;
  unint64_t updated;
  id v31;
  id v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  unsigned __int8 v55;
  _QWORD v56[7];

  v49 = a3;
  v50 = a6;
  v48 = a5;
  v47 = a4;
  v51 = a1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v45 - v9;
  v11 = type metadata accessor for ToolbarStorage.GroupItem(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v46 = (uint64_t)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v45 - v25;
  v27 = *(void **)a2;
  v28 = *(unsigned __int8 *)(a2 + 8);
  if (v28 == 1)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v29 + 32) = v27;
    v56[0] = v29;
    specialized Array._endMutation()();
    updated = v56[0];
    v31 = v27;
    goto LABEL_16;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v51, (uint64_t)v18, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, type metadata accessor for ToolbarStorage.Entry.Kind);
    ToolbarStorage.Entry.groupItem.getter((uint64_t)v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      outlined destroy of Binding<AttributedString>((uint64_t)v10, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      updated = MEMORY[0x1E0DEE9D8];
      goto LABEL_16;
    }
    v37 = v46;
    outlined init with take of TableCellFormula((uint64_t)v10, v46, type metadata accessor for ToolbarStorage.GroupItem);
    if (!v49)
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v37, type metadata accessor for ToolbarStorage.GroupItem);
    v38 = v49;
    v39 = swift_bridgeObjectRetain();
    updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV4ItemVG_So011UIBarButtonH0Cs5NeverOTg503_s7d9UI20UIKitf67StrategyV12makeBarItems33_A409749AC298CF150D90E447BB4FA064LLSaySo15ijh56CGyFyAA0D6BridgeCyACG_AA0D0O13UpdateContextVtXEfU_yAA0D7G44V5EntryV_AM06VendedR0OSgztXEfU_AgQ0R0VXEfU0_AF0iH7ContextVTf1cn_nTf4ng_n(v39, v38, v47);
    swift_bridgeObjectRelease();

    v40 = type metadata accessor for ToolbarStorage.GroupItem;
    v41 = v37;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)v22, type metadata accessor for ToolbarStorage.Item);
    outlined init with take of TableCellFormula((uint64_t)v22, (uint64_t)v26, type metadata accessor for ToolbarStorage.Item);
    if (!v49)
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, type metadata accessor for ToolbarStorage.Item);
    v32 = v49;
    outlined consume of Toolbar.VendedItem?(v27, v28);
    *(_QWORD *)a2 = specialized static UIKitBarButtonItem.makeVended(item:context:)((uint64_t)v26, v32, v47);
    *(_BYTE *)(a2 + 8) = v34;
    if (v33)
    {
      v35 = v33;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_187BFF9C0;
      *(_QWORD *)(v36 + 32) = v35;
      v56[0] = v36;
      specialized Array._endMutation()();
      updated = v56[0];

    }
    else
    {

      updated = MEMORY[0x1E0DEE9D8];
    }
    v40 = type metadata accessor for ToolbarStorage.Item;
    v41 = (uint64_t)v26;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v41, v40);
LABEL_16:
  ToolbarStorage.Entry.placement.getter((uint64_t)&v52);
  if (v55 == 255)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v52, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  }
  else
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)&v52, (uint64_t)v56);
    v52 = 4;
    v53 = 0u;
    v54 = 0u;
    v55 = 2;
    v43 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v56, (uint64_t)&v52);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v52);
    if ((v43 & 1) != 0)
    {
      v44 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v44);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v56);
      return swift_bridgeObjectRelease();
    }
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v56);
  }
  return specialized Array.append<A>(contentsOf:)(updated);
}

id thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> (@autoreleased UIMenu?)(uint64_t a1, uint64_t a2)
{
  Class isa;
  id v4;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v4 = (id)(*(uint64_t (**)(uint64_t, Class))(a2 + 16))(a2, isa);

  return v4;
}

void closure #1 in closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  UIMenuElementSize v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  UIMenuElementSize v12;
  char v13;
  Swift::String v14;
  UIMenu *v15;
  Swift::OpaquePointer v16;
  UIMenuElementSize v17;
  uint64_t v18;
  UIImage_optional v19;

  if (a3 == 255)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    v18 = MEMORY[0x1E0DEE9D8];
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v6 = type metadata accessor for MenuVisitor.MenuStackGroup();
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
    v8 = (v7 + 32) & ~v7;
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_187BF9830;
    v10 = v9 + v8;
    if (one-time initialization token for empty != -1)
      swift_once();
    v11 = __swift_project_value_buffer(v6, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v11, v10, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
    MenuVisitor.visit(_:uniqueNames:)(a4, &v18);
    swift_bridgeObjectRelease();
    v12 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a2);
    LOBYTE(v16._rawValue) = v13 & 1;
    type metadata accessor for FallbackDelegateBox<NSObject>(0, (unint64_t *)&lazy cache variable for type metadata for [UIMenuElement], (unint64_t *)&lazy cache variable for type metadata for UIMenuElement, 0x1E0DC39E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    static Update.ensure<A>(_:)();
    v12 = v17;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v19.value.super.isa = 0;
  v19.is_nil = 0;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v15, v14, (Swift::String_optional)0, v19, 0, 0xFFFFFFFFFFFFFFFFLL, v12, v16);
}

uint64_t closure #1 in closure #1 in closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t *WeakValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  if ((a2 & 1) != 0)
    goto LABEL_4;
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    a1 = *WeakValue;
LABEL_4:
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  a1 = MEMORY[0x1E0DEE9D8];
LABEL_5:
  v6 = MEMORY[0x1E0DEE9D8];
  v13 = MEMORY[0x1E0DEE9D8];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = type metadata accessor for MenuVisitor.MenuStackGroup();
  v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_187BF9830;
  if (one-time initialization token for empty != -1)
    swift_once();
  v11 = __swift_project_value_buffer(v7, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v11, v10 + v9, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
  MenuVisitor.visit(_:uniqueNames:)(a1, &v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a3 = v6;
  return result;
}

id thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  void *v3;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v3 = (void *)v1(v2);
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

double closure #1 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  double result;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  outlined init with copy of SwiftUIAnySortComparator?(a1 + 8, (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
  if ((_QWORD)v18)
  {
    v7 = v19;
    *(_OWORD *)(a4 + 32) = v18;
    *(_OWORD *)(a4 + 48) = v7;
    v8 = v21;
    *(_OWORD *)(a4 + 64) = v20;
    *(_OWORD *)(a4 + 80) = v8;
    result = *(double *)v17;
    v10 = v17[1];
    *(_OWORD *)a4 = v17[0];
    *(_OWORD *)(a4 + 16) = v10;
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
    if (a3)
      v11 = a2;
    else
      v11 = 0;
    v12 = 0xE000000000000000;
    if (a3)
      v12 = a3;
    *(_QWORD *)&v17[0] = v11;
    *((_QWORD *)&v17[0] + 1) = v12;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    v13 = Text.init<A>(_:)();
    result = 0.0;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_QWORD *)a4 = v13;
    *(_QWORD *)(a4 + 8) = v15;
    *(_QWORD *)(a4 + 16) = v14 & 1;
    *(_QWORD *)(a4 + 24) = v16;
    *(_QWORD *)(a4 + 32) = protocol witness for CollectionViewListDataSourceBase.section(forSectionLabelIndex:) in conformance TableDataSourceAdaptor;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 48) = protocol witness for CollectionViewListDataSourceBase.section(forSectionLabelIndex:) in conformance TableDataSourceAdaptor;
    *(_QWORD *)(a4 + 56) = 0;
  }
  return result;
}

uint64_t closure #2 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_187BFF9C0;
  *(_QWORD *)(v3 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3758]), sel_initWithItemProvider_, a2);
  specialized Array._endMutation()();
  return v3;
}

Class thunk for @escaping @callee_guaranteed (@guaranteed UIDragSession) -> (@owned [UIDragItem])(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  Class isa;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

id closure #3 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result;
  id v7;
  Class isa;
  id v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIActivityViewController);
  v10 = a2;
  v11 = a3;
  outlined retain of AnyShareConfiguration(a1);
  swift_retain();
  swift_retain();
  result = UIActivityViewController.init(configuration:env:)(a1, &v10);
  if (!result)
  {
    v7 = objc_allocWithZone(MEMORY[0x1E0CEA2D8]);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v9 = objc_msgSend(v7, sel_initWithActivityItems_applicationActivities_, isa, 0, v10, v11);

    return v9;
  }
  return result;
}

uint64_t UIKitToolbarStrategy.createToolbarIfNeeded()()
{
  void **v0;
  void *v1;
  void *v2;
  char *v3;
  uint64_t result;
  char *v5;
  id v6;
  void *v7;
  _BYTE v8[32];
  uint64_t v9;
  _BYTE v10[56];
  _QWORD v11[5];
  _BYTE v12[96];

  v1 = *v0;
  if (*v0)
  {
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)(v0 + 1), (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    if (v11[4])
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v10, (uint64_t)v12);
      outlined init with copy of HostingControllerOverrides((uint64_t)v12, (uint64_t)v8);
      v2 = (void *)MEMORY[0x18D760234](&v9);
      v3 = v1;
      outlined destroy of HostingControllerOverrides((uint64_t)v8);
      outlined init with copy of Toolbar.UpdateContext((uint64_t)v12, (uint64_t)v10);
      if (v2)
      {
        outlined destroy of Toolbar.UpdateContext((uint64_t)v10);
      }
      else
      {
        v2 = (void *)MEMORY[0x18D760234](v11);
        outlined destroy of Toolbar.UpdateContext((uint64_t)v10);
        if (!v2)
        {
          v5 = &v3[direct field offset for ToolbarBridge.platformVended];
          if (*(_QWORD *)&v3[direct field offset for ToolbarBridge.platformVended + 32])
          {

          }
          else
          {
            v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitToolbar()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
            v7 = (void *)*((_QWORD *)v5 + 4);
            *((_QWORD *)v5 + 4) = v6;

          }
          return outlined destroy of Toolbar.UpdateContext((uint64_t)v12);
        }
      }

      return outlined destroy of Toolbar.UpdateContext((uint64_t)v12);
    }
    outlined destroy of AccessibilityTableContext?((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for ToolbarStrategy.makeContent(entry:) in conformance UIKitToolbarStrategy(uint64_t a1)
{
  return UIKitToolbarStrategy.makeContent(entry:)(a1);
}

void protocol witness for ToolbarStrategy.updateVended(_:to:) in conformance UIKitToolbarStrategy(uint64_t a1, char a2, uint64_t a3)
{
  UIKitToolbarStrategy.updateVended(_:to:)(a1, a2, a3);
}

uint64_t protocol witness for UINavigationItemRenameDelegate.navigationItem(_:didEndRenamingWith:) in conformance ToolbarPlatformDelegate(uint64_t a1, uint64_t a2, void *a3)
{
  return specialized ToolbarPlatformDelegate.navigationItem(_:didEndRenamingWith:)(a2, a3);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.InputAccessoryKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)&static EnvironmentValues.InputAccessoryKey.defaultValue, a1, &lazy cache variable for type metadata for WeakBox<InputAccessoryGenerator>, (uint64_t (*)(uint64_t))type metadata accessor for InputAccessoryGenerator, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
}

uint64_t type metadata accessor for UIKitDocumentProperties()
{
  return objc_opt_self();
}

uint64_t assignWithCopy for UIKitToolbarStrategy(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = (__int128 *)(a1 + 8);
  v8 = (__int128 *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v9)
    {
      v10 = *(unsigned __int8 *)(a2 + 16);
      if (*(_BYTE *)(a1 + 16) == 2)
      {
        if (v10 == 2)
        {
          v11 = *v8;
          *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
          *v7 = v11;
LABEL_18:
          swift_unknownObjectWeakCopyAssign();
          swift_unknownObjectWeakCopyAssign();
          *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
          swift_unknownObjectWeakCopyAssign();
          swift_unknownObjectWeakCopyAssign();
          swift_unknownObjectWeakCopyAssign();
          *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
          *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }
        swift_unknownObjectWeakCopyInit();
      }
      else
      {
        if (v10 == 2)
        {
          outlined destroy of PushTarget(a1 + 8);
          v17 = *(_OWORD *)(a2 + 17);
          *v7 = *v8;
          *(_OWORD *)(a1 + 17) = v17;
          goto LABEL_18;
        }
        swift_unknownObjectWeakCopyAssign();
      }
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      v23 = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v23;
      goto LABEL_18;
    }
    outlined destroy of Toolbar.UpdateContext(a1 + 8);
    v13 = *(_OWORD *)(a2 + 24);
    *v7 = *v8;
    *(_OWORD *)(a1 + 24) = v13;
    v14 = *(_OWORD *)(a2 + 88);
    v16 = *(_OWORD *)(a2 + 40);
    v15 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v14;
    *(_OWORD *)(a1 + 40) = v16;
    *(_OWORD *)(a1 + 56) = v15;
  }
  else if (v9)
  {
    if (*(_BYTE *)(a2 + 16) == 2)
    {
      v12 = *v8;
      *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
      *v7 = v12;
    }
    else
    {
      swift_unknownObjectWeakCopyInit();
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      v22 = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v22;
    }
    swift_unknownObjectWeakCopyInit();
    swift_unknownObjectWeakCopyInit();
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_unknownObjectWeakCopyInit();
    swift_unknownObjectWeakCopyInit();
    swift_unknownObjectWeakCopyInit();
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 24);
    *v7 = *v8;
    *(_OWORD *)(a1 + 24) = v18;
    v19 = *(_OWORD *)(a2 + 40);
    v20 = *(_OWORD *)(a2 + 56);
    v21 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v21;
    *(_OWORD *)(a1 + 40) = v19;
    *(_OWORD *)(a1 + 56) = v20;
  }
  return a1;
}

uint64_t assignWithTake for UIKitToolbarStrategy(uint64_t a1, uint64_t a2)
{
  void *v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v7)
    {
      v8 = *(unsigned __int8 *)(a2 + 16);
      if (*(_BYTE *)(a1 + 16) == 2)
      {
        if (v8 != 2)
        {
          swift_unknownObjectWeakTakeInit();
LABEL_17:
          *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
          goto LABEL_18;
        }
      }
      else
      {
        if (v8 != 2)
        {
          swift_unknownObjectWeakTakeAssign();
          goto LABEL_17;
        }
        outlined destroy of PushTarget(a1 + 8);
      }
      *v5 = *v6;
      *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
LABEL_18:
      swift_unknownObjectWeakTakeAssign();
      swift_unknownObjectWeakTakeAssign();
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      swift_unknownObjectWeakTakeAssign();
      swift_unknownObjectWeakTakeAssign();
      swift_unknownObjectWeakTakeAssign();
      *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of Toolbar.UpdateContext(a1 + 8);
    goto LABEL_10;
  }
  if (!v7)
  {
LABEL_10:
    v9 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v9;
    v10 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v10;
    v11 = *(_OWORD *)(a2 + 24);
    *v5 = *v6;
    *(_OWORD *)(a1 + 24) = v11;
    return a1;
  }
  if (*(_BYTE *)(a2 + 16) == 2)
  {
    *v5 = *v6;
    *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  }
  else
  {
    swift_unknownObjectWeakTakeInit();
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  }
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitToolbarStrategy(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 104))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitToolbarStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitToolbarStrategy()
{
  return &type metadata for UIKitToolbarStrategy;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV4ItemVG_So011UIBarButtonH0Cs5NeverOTg503_s7d9UI20UIKitf67StrategyV12makeBarItems33_A409749AC298CF150D90E447BB4FA064LLSaySo15ijh56CGyFyAA0D6BridgeCyACG_AA0D0O13UpdateContextVtXEfU_yAA0D7G44V5EntryV_AM06VendedR0OSgztXEfU_AgQ0R0VXEfU0_AF0iH7ContextVTf1cn_nTf4ng_n(uint64_t a1, void *a2, int a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v8 = *(_QWORD *)(type metadata accessor for ToolbarStorage.Item(0) - 8);
    v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    do
    {
      specialized static UIKitBarButtonItem.makeGroupItem(item:context:)(v9, a2, a3);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v9 += v10;
      --v4;
    }
    while (v4);
    return v11;
  }
  return result;
}

uint64_t specialized ToolbarBridge.uiInputAccessoryGenerator.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for ToolbarBridge.platformVended + 40);
}

uint64_t specialized EnvironmentValues.uiInputAccessoryGenerator.setter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v3;
  _BYTE v4[8];

  swift_weakInit();
  swift_weakAssign();
  v1 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8];
  outlined init with take of Binding<SearchFieldState>((uint64_t)&v3, (uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for WeakBox<InputAccessoryGenerator>, (uint64_t)type metadata accessor for InputAccessoryGenerator, (uint64_t)MEMORY[0x1E0CE77D8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v4, (uint64_t)&v3, &lazy cache variable for type metadata for WeakBox<InputAccessoryGenerator>, (uint64_t (*)(uint64_t))type metadata accessor for InputAccessoryGenerator, v1);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of Binding<AttributedString>((uint64_t)v4, &lazy cache variable for type metadata for WeakBox<InputAccessoryGenerator>, (uint64_t (*)(uint64_t))type metadata accessor for InputAccessoryGenerator, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
}

uint64_t specialized ToolbarPlatformDelegate.navigationItem(_:didEndRenamingWith:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t ObjectType;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;

  v46._countAndFlagsBits = a1;
  v46._object = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v39 - v6;
  v8 = type metadata accessor for PlatformItemList.Item();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (uint64_t *)((char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, v3);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v39 - v15;
  v17 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v2 + OBJC_IVAR____TtC7SwiftUI23ToolbarPlatformDelegate_provider;
  result = MEMORY[0x18D760234](v2 + OBJC_IVAR____TtC7SwiftUI23ToolbarPlatformDelegate_provider, v20);
  if (result)
  {
    v25 = *(_QWORD *)(v23 + 8);
    ObjectType = swift_getObjectType();
    v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(ObjectType, v25);
    swift_unknownObjectRelease();
    v28 = (uint64_t)v27 + direct field offset for ToolbarBridge.navigationProperties;
    swift_beginAccess();
    outlined init with copy of SearchFieldConfiguration.Data?(v28, (uint64_t)v16, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    {

      return outlined destroy of Binding<AttributedString>((uint64_t)v16, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    }
    else
    {
      outlined init with take of TableCellFormula((uint64_t)v16, (uint64_t)v22, type metadata accessor for ToolbarStorage.NavigationProperties);
      outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)&v22[*(int *)(v17 + 24)], (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, type metadata accessor for ToolbarStorage.NavigationProperties);

        return outlined destroy of Binding<AttributedString>((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      }
      else
      {
        outlined init with take of TableCellFormula((uint64_t)v7, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        v29 = v12[41];
        if (v29 >> 2 != 0xFFFFFFFF && v29 >> 62 == 1)
        {
          v31 = (void *)v12[37];
          v30 = v12[38];
          v32 = v12[40];
          v44 = v12[39];
          v45 = v30;
          v33 = v12[43];
          v42 = v12[42];
          v43 = v32;
          v34 = v12[45];
          v40 = v12[44];
          v41 = v33;
          v35 = v12[46];
          v36 = v12[47];
          v37 = v12[48];
          v38 = v12[49];
          outlined copy of PlatformItemList.Item.SystemItem(v31, v30, v44, v32, v29, v42, v33, v40, v34, v35, v36, v37, v38);
          PlatformTextFieldCoordinator.updateText(_:)(v46);
          outlined consume of PlatformItemList.Item.SystemItem?(v31, v45, v44, v43, v29, v42, v41, v40, v34, v35, v36, v37, v38);
        }

        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, type metadata accessor for ToolbarStorage.NavigationProperties);
      }
    }
  }
  return result;
}

void outlined consume of Toolbar.VendedItem?(id a1, char a2)
{
  if (a2 != -1)

}

unint64_t lazy protocol witness table accessor for type ToolbarPlatformDelegate and conformance ToolbarPlatformDelegate()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ToolbarPlatformDelegate and conformance ToolbarPlatformDelegate;
  if (!lazy protocol witness table cache variable for type ToolbarPlatformDelegate and conformance ToolbarPlatformDelegate)
  {
    v1 = type metadata accessor for ToolbarPlatformDelegate();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarPlatformDelegate, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarPlatformDelegate and conformance ToolbarPlatformDelegate);
  }
  return result;
}

uint64_t sub_1874E9DB4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 56))
  {
    if (*(_QWORD *)(v0 + 48))
    {
      outlined consume of Text.Storage(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    if (*(_QWORD *)(v0 + 112))
      __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

double partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()(v1 + 16, *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), a1);
}

uint64_t sub_1874E9E30()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1874E9E5C()
{
  uint64_t v0;

  outlined consume of AnyShareConfiguration.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  if (*(_QWORD *)(v0 + 80))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 112))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_BYTE *)(v0 + 104));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

id partial apply for closure #3 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()()
{
  uint64_t v0;

  return closure #3 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()(v0 + 16, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
}

uint64_t outlined destroy of AnySharePreview(uint64_t a1)
{
  destroy for AnySharePreview(a1);
  return a1;
}

uint64_t outlined retain of AnyShareConfiguration(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 96);
  outlined copy of AnyShareConfiguration.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  outlined copy of Text?(v2, v3, v4, v5);
  outlined copy of Text?(v6, v7, v8, v9);
  return a1;
}

uint64_t outlined copy of ToolbarStorage.NavigationProperties.Actions?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 254)
    return outlined copy of PlatformItemCollection?(result, a2);
  return result;
}

uint64_t sub_1874E9FB0()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)(v0 + 16), v1 & 1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1874E9FFC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

id partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> (@autoreleased UIMenu?)(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> (@autoreleased UIMenu?)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

uint64_t objectdestroy_20Tm_0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 112))
  {
    if (*(_BYTE *)(v0 + 32) != 2)
      swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #24 in implicit closure #23 in UIKitToolbarStrategy.updateLocations()()
{
  return specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(_QWORD *__return_ptr))partial apply for closure #1 in UIKitToolbarStrategy.updateTabSidebar()) & 1;
}

uint64_t _sxRi_zRi0_zlySbIsegr__7SwiftUI7ToolbarO11BarLocationOtWOc(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ((), Toolbar.BarLocation)(0, &lazy cache variable for type metadata for ((), Toolbar.BarLocation), (void (*)(uint64_t))type metadata accessor for ());
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1874EA174()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitToolbarStrategy.updateTabSidebar()@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return closure #1 in UIKitToolbarStrategy.updateTabSidebar()(a1, a2);
}

void partial apply for closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(a1, *(_QWORD *)(v2 + 16), (uint64_t)partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.barButtonItems(in:), a2);
}

uint64_t partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in UIKitToolbarStrategy.barButtonItems(in:));
}

uint64_t partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:));
}

uint64_t partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

void partial apply for closure #1 in closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)(a1, *(_QWORD *)(v1 + 16), *(void ***)(v1 + 24), *(_QWORD *)(v1 + 32), *(void ***)(v1 + 40));
}

uint64_t outlined init with take of WeakBox<UIBarButtonItem>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FallbackDelegateBox<NSObject>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIBarButtonItem>, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem, 0x1E0DC34F0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for UIKitBarItemHost<BarItemView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type BarItemView and conformance BarItemView();
    v7 = a3(a1, &type metadata for BarItemView, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for (Toolbar.VendedItem, ToolbarStorage.Entry.Kind)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Toolbar.VendedItem, ToolbarStorage.Entry.Kind))
  {
    type metadata accessor for ToolbarStorage.Entry.Kind(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.VendedItem, ToolbarStorage.Entry.Kind));
  }
}

uint64_t outlined assign with copy of ToolbarStorage.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ToolbarStorage.Item(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of BarItemView(uint64_t a1, uint64_t a2)
{
  assignWithTake for BarItemView(a2, a1);
  return a2;
}

uint64_t outlined assign with copy of ToolbarStorage.GroupItem?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for UINavigationItemAdaptorStorage.Adaptor(a2, a1);
  return a2;
}

uint64_t outlined destroy of UINavigationItemAdaptorStorage.Adaptor(uint64_t a1)
{
  destroy for AccessibilityRelationshipScope.Key();
  return a1;
}

void partial apply for closure #1 in ToolbarBridge.updateNavigationItem<A>(hostingController:adaptor:)()
{
  uint64_t v0;

  closure #1 in ToolbarBridge.updateNavigationItem<A>(hostingController:adaptor:)(*(_QWORD *)(v0 + 32), *(id *)(v0 + 40));
}

void partial apply for closure #1 in ToolbarBridge.navigationItemWillDisappear<A>(hostingController:)()
{
  uint64_t *v0;

  closure #1 in ToolbarBridge.navigationItemWillDisappear<A>(hostingController:)(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t partial apply for closure #1 in closure #1 in ToolbarBridge.navigationItemWillDisappear<A>(hostingController:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in ToolbarBridge.navigationItemWillDisappear<A>(hostingController:)(a1, v1[4], v1[5], v1[6]);
}

uint64_t outlined init with take of PushTarget(uint64_t a1, uint64_t a2)
{
  initializeWithTake for PushTarget(a2, a1);
  return a2;
}

void partial apply for closure #1 in ToolbarBridge.navigationItemWillAppear<A>(hostingController:)()
{
  uint64_t *v0;

  closure #1 in ToolbarBridge.navigationItemWillAppear<A>(hostingController:)(v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #1 in closure #1 in ToolbarBridge.navigationItemWillAppear<A>(hostingController:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in ToolbarBridge.navigationItemWillAppear<A>(hostingController:)(a1, v1[2], v1[3], v1[4]);
}

void partial apply for closure #1 in ToolbarBridge.safeAreaDidChange<A>(hostingController:)()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = __OFSUB__(v1, 1);
  v3 = v1 - 1;
  if (v2)
    __break(1u);
  else
    *(_QWORD *)(v0 + 16) = v3;
}

ValueMetadata *type metadata accessor for EnvironmentValues.InputAccessoryKey()
{
  return &type metadata for EnvironmentValues.InputAccessoryKey;
}

uint64_t VisualEffect.saturation(_:)()
{
  return VisualEffect.rendererEffect<A>(_:)();
}

uint64_t sub_1874EA5D0()
{
  return swift_getOpaqueTypeConformance2();
}

void static SubmitTriggers.text.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t SubmitTriggers.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::SubmitTriggers __swiftcall SubmitTriggers.init(rawValue:)(SwiftUI::SubmitTriggers rawValue)
{
  SwiftUI::SubmitTriggers *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static SubmitTriggers.search.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static SubmitTriggers.collection.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

unint64_t lazy protocol witness table accessor for type SubmitTriggers and conformance SubmitTriggers()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers;
  if (!lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubmitTriggers, &type metadata for SubmitTriggers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers;
  if (!lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubmitTriggers, &type metadata for SubmitTriggers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers;
  if (!lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubmitTriggers, &type metadata for SubmitTriggers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers;
  if (!lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubmitTriggers, &type metadata for SubmitTriggers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers);
  }
  return result;
}

void one-time initialization function for all()
{
  static SubmitTriggers.all = 5;
}

{
  static ListItemKind.Set.all = 7;
}

{
  static FocusableOptions.all = 7;
}

void static ScrollableHStackBehavior.continuous.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static ScrollableHStackBehavior.childLeading.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ScrollableHStackBehavior.paging.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ScrollableHStackBehavior.childPaging.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void ScrollableHStack.init(_:width:padding:alignment:spacing:content:)(_BYTE *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>)
{
  *(_BYTE *)a7 = *a1;
  *(double *)(a7 + 8) = a8;
  *(_QWORD *)(a7 + 16) = a2;
  *(_BYTE *)(a7 + 24) = a3 & 1;
  *(_QWORD *)(a7 + 32) = a4;
  *(_QWORD *)(a7 + 40) = a5;
  *(_BYTE *)(a7 + 48) = a6 & 1;
  type metadata accessor for ScrollableHStackBase();
}

uint64_t sub_1874EA828(uint64_t a1)
{
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t result;
  _QWORD *v5;

  result = v1();
  v5 = (_QWORD *)(v2 + *(int *)(a1 + 72));
  *v5 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v5[1] = 0;
  return result;
}

void ScrollableHStack.body.getter()
{
  type metadata accessor for ScrollableHStackBase();
}

uint64_t sub_1874EA8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v11 - v7;
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollableHStackBase<A, B>, a1, v6);
  static ViewBuilder.buildExpression<A>(_:)(v3, a1, v9);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v8, a1, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a1);
}

void type metadata accessor for ScrollableHStackBase()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t associated type witness table accessor for View.Body : View in ScrollableHStack<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for ScrollableHStackBehavior(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  if (*a1 <= 3u)
    v6 = 3;
  else
    v6 = *a1;
  v7 = v6 - 4;
  if (*a1 < 3u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollableHStackBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1874EAA64 + 4 * byte_187C39375[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1874EAA98 + 4 * asc_187C39370[v4]))();
}

uint64_t sub_1874EAA98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874EAAA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1874EAAA8);
  return result;
}

uint64_t sub_1874EAAB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1874EAABCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1874EAAC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874EAAC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollableHStackBehavior()
{
  return &type metadata for ScrollableHStackBehavior;
}

void type metadata completion function for ScrollableHStack()
{
  type metadata accessor for ScrollableHStackBase();
}

uint64_t getEnumTagSinglePayload for ScrollableHStack(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v13 = ((((((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 9) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)((v8 + v13) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((v8 + ((v7 + 49) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1874EAC10 + 4 * byte_187C3937A[v11]))();
  }
}

void storeEnumTagSinglePayload for ScrollableHStack(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 49) & ~(_DWORD)v7)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 49) & ~(_DWORD)v7)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 49) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1874EADBC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1874EAE4CLL);
}

void sub_1874EADC4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1874EADCCLL);
  JUMPOUT(0x1874EAE4CLL);
}

void sub_1874EAE24()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1874EAE4CLL);
}

void sub_1874EAE2C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1874EAE4CLL);
}

uint64_t sub_1874EAE34@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    JUMPOUT(0x1874EAE4CLL);
  if (a2 < 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x1874EAE48);
    JUMPOUT(0x1874EAE40);
  }
  return (*(uint64_t (**)(unint64_t))(v4 + 56))(((((((v6 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
                                                                  + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                + v5
                                                                + 9) & a3);
}

uint64_t type metadata accessor for ScrollableHStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollableHStack);
}

void sub_1874EAE70()
{
  type metadata accessor for ScrollableHStackBase();
}

uint64_t sub_1874EAEA4(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollableHStackBase<A, B>, a1);
}

uint64_t type metadata completion function for ScrollableHStackBase()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ScrollableHStack(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 49) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    v10 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)v11;
    *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
    *(_QWORD *)v10 = v12;
    v13 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    v16 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    v17 = *(_QWORD *)v16;
    *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
    *(_QWORD *)v15 = v17;
    v18 = (v15 + v5 + 9) & ~v5;
    v19 = (v16 + v5 + 9) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v18, v19);
    v20 = (_QWORD *)((v6 + v19) & 0xFFFFFFFFFFFFFFF8);
    v21 = v20[1];
    v22 = (_QWORD *)((v6 + v18) & 0xFFFFFFFFFFFFFFF8);
    *v22 = *v20;
    v22[1] = v21;
  }
  swift_retain();
  return v3;
}

uint64_t destroy for ScrollableHStack(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((((((a1 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 39) & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 9) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_release();
}

unint64_t initializeWithCopy for ScrollableHStack(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
  *(_QWORD *)v4 = v6;
  v7 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
  *v8 = *v7;
  v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 9 + v9) & ~v13;
  v15 = (v13 + 9 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (_QWORD *)((v16 + v14) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)((v16 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_retain();
  return a1;
}

unint64_t assignWithCopy for ScrollableHStack(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
  *(_QWORD *)v4 = v6;
  v7 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
  *v8 = *v7;
  v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 9 + v9) & ~v13;
  v15 = (v13 + 9 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (_QWORD *)((v16 + v14) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)((v16 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t initializeWithTake for ScrollableHStack(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
  *(_QWORD *)v4 = v6;
  v7 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
  *v8 = *v7;
  v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 9 + v9) & ~v13;
  v15 = (v13 + 9 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v14, v15);
  *(_OWORD *)((*(_QWORD *)(v12 + 64) + 7 + v14) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v12 + 64) + 7 + v15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

unint64_t assignWithTake for ScrollableHStack(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
  *(_QWORD *)v4 = v6;
  v7 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
  *v8 = *v7;
  v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 9 + v9) & ~v13;
  v15 = (v13 + 9 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v14, v15);
  *(_OWORD *)((*(_QWORD *)(v12 + 64) + 7 + v14) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v12 + 64)
                                                                                       + 7
                                                                                       + v15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableHStackBase(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v13 = ((((((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 9) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)((v8 + v13) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((v8 + ((v7 + 49) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1874EB524 + 4 * byte_187C39389[v11]))();
  }
}

void storeEnumTagSinglePayload for ScrollableHStackBase(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 49) & ~(_DWORD)v7)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 49) & ~(_DWORD)v7)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 49) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1874EB6D0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1874EB760);
}

void sub_1874EB6D8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1874EB6E0);
  JUMPOUT(0x1874EB760);
}

void sub_1874EB738()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1874EB760);
}

void sub_1874EB740()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1874EB760);
}

uint64_t sub_1874EB748@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    JUMPOUT(0x1874EB760);
  if (a2 < 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x1874EB75CLL);
    JUMPOUT(0x1874EB754);
  }
  return (*(uint64_t (**)(unint64_t))(v4 + 56))(((((((v6 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
                                                                  + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                + v5
                                                                + 9) & a3);
}

uint64_t associated type witness table accessor for View.Body : View in ScrollableHStackBase<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ScrollableHStackBase.body.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[2];
  _QWORD v84[2];
  _QWORD v85[2];
  char v86;
  _QWORD v87[2];
  _QWORD v88[2];
  _QWORD v89[2];
  _QWORD v90[2];
  _QWORD v91[2];
  _QWORD v92[2];
  _QWORD v93[2];

  v81 = a3;
  v5 = a1[4];
  v74 = a1[2];
  v75 = v5;
  v6 = type metadata accessor for LazyFixedSizeHStack(255, v74, v5, a2);
  v8 = type metadata accessor for ScrollView(0, v6, (uint64_t)&protocol witness table for LazyFixedSizeHStack<A>, v7);
  v70 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v8);
  v10 = (char *)&v67 - v9;
  v80 = v11;
  v12 = type metadata accessor for ModifiedContent();
  v72 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v73 = (char *)&v67 - v18;
  v20 = type metadata accessor for PagingScrollView(0, v6, (uint64_t)&protocol witness table for LazyFixedSizeHStack<A>, v19);
  v67 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v20);
  v22 = (char *)&v67 - v21;
  v79 = v23;
  v24 = type metadata accessor for ModifiedContent();
  v68 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v24);
  v26 = (char *)&v67 - v25;
  v76 = v27;
  v28 = type metadata accessor for ModifiedContent();
  v69 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v67 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v71 = (char *)&v67 - v34;
  v78 = type metadata accessor for _ConditionalContent();
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78, v35);
  v82 = (uint64_t)&v67 - v38;
  if (*v3 == 3)
  {
    MEMORY[0x1E0C80A78](v36, v37);
    v39 = a1[3];
    *(&v67 - 6) = v74;
    *(&v67 - 5) = v39;
    v40 = a1[5];
    *(&v67 - 4) = v75;
    *(&v67 - 3) = v40;
    *(&v67 - 2) = (uint64_t)v3;
    ScrollView.init(_:content:)(1, (uint64_t (*)(uint64_t))partial apply for closure #2 in ScrollableHStackBase.body.getter, (uint64_t)(&v67 - 8), v6, (uint64_t)&protocol witness table for LazyFixedSizeHStack<A>, (uint64_t)v10);
    v41 = static Edge.Set.horizontal.getter();
    v42 = ScrollableHStackBase.actualPadding.getter();
    v43 = v80;
    v44 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollView<A>, v80);
    View.scrollContentPadding(_:_:)(v41, v43, v44, v42);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v10, v43);
    v93[0] = v44;
    v93[1] = &protocol witness table for ContentMarginModifier;
    v45 = MEMORY[0x1E0CE2E70];
    v46 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v93);
    v47 = (uint64_t)v73;
    static ViewBuilder.buildExpression<A>(_:)(v15, v12, v46);
    v48 = *(void (**)(char *, uint64_t))(v72 + 8);
    v48(v15, v12);
    static ViewBuilder.buildBlock<A>(_:)(v47, v12, (uint64_t)v15);
    v49 = v79;
    v92[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PagingScrollView<A>, v79);
    v92[1] = &protocol witness table for ContentMarginModifier;
    v50 = v76;
    v91[0] = MEMORY[0x18D75FFDC](v45, v76, v92);
    v91[1] = &protocol witness table for TransformScrollIndicators;
    MEMORY[0x18D75FFDC](v45, v28, v91);
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)v15, v28, v12);
    v48(v15, v12);
    v48((char *)v47, v12);
  }
  else
  {
    v86 = *v3;
    MEMORY[0x1E0C80A78](v36, v37);
    v51 = a1[3];
    *(&v67 - 6) = v74;
    *(&v67 - 5) = v51;
    v52 = a1[5];
    *(&v67 - 4) = v75;
    *(&v67 - 3) = v52;
    *(&v67 - 2) = (uint64_t)v3;
    PagingScrollView.init(behavior:axis:content:)(&v86, 0, (uint64_t (*)(void))partial apply for closure #2 in ScrollableHStackBase.body.getter, (uint64_t)(&v67 - 8), v6, (uint64_t)&protocol witness table for LazyFixedSizeHStack<A>, v22);
    v53 = static Edge.Set.horizontal.getter();
    v54 = ScrollableHStackBase.actualPadding.getter();
    v49 = v79;
    v55 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PagingScrollView<A>, v79);
    View.scrollContentPadding(_:_:)(v53, v49, v55, v54);
    (*(void (**)(_BYTE *, uint64_t))(v67 + 8))(v22, v49);
    v86 = 3;
    v85[0] = v55;
    v85[1] = &protocol witness table for ContentMarginModifier;
    v56 = MEMORY[0x1E0CE2E70];
    v50 = v76;
    v57 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v76, v85);
    View.scrollIndicators(_:axes:)(&v86, 3, v50);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v26, v50);
    v84[0] = v57;
    v84[1] = &protocol witness table for TransformScrollIndicators;
    v58 = MEMORY[0x18D75FFDC](v56, v28, v84);
    v59 = (uint64_t)v71;
    static ViewBuilder.buildExpression<A>(_:)(v31, v28, v58);
    v60 = *(void (**)(char *, uint64_t))(v69 + 8);
    v60(v31, v28);
    static ViewBuilder.buildBlock<A>(_:)(v59, v28, (uint64_t)v31);
    v43 = v80;
    v83[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollView<A>, v80);
    v83[1] = &protocol witness table for ContentMarginModifier;
    MEMORY[0x18D75FFDC](v56, v12, v83);
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v31, v28);
    v60(v31, v28);
    v60((char *)v59, v28);
  }
  v90[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PagingScrollView<A>, v49);
  v90[1] = &protocol witness table for ContentMarginModifier;
  v61 = MEMORY[0x1E0CE2E70];
  v89[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v50, v90);
  v89[1] = &protocol witness table for TransformScrollIndicators;
  v62 = MEMORY[0x18D75FFDC](v61, v28, v89);
  v88[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollView<A>, v43);
  v88[1] = &protocol witness table for ContentMarginModifier;
  v63 = MEMORY[0x18D75FFDC](v61, v12, v88);
  v87[0] = v62;
  v87[1] = v63;
  v64 = v78;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v78, v87);
  v65 = v82;
  static ViewBuilder.buildBlock<A>(_:)(v82, v64, v81);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 8))(v65, v64);
}

uint64_t ScrollableHStackBase.scrollContent.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v2 = a1;
  v3 = *(_QWORD *)(v1 + 32);
  if ((*(_BYTE *)(v1 + 48) & 1) != 0)
    a1 = defaultSpacingValue.getter();
  else
    v4 = *(_QWORD *)(v1 + 40);
  MEMORY[0x1E0C80A78](a1, v4);
  v5 = *(_OWORD *)(v2 + 32);
  v9 = *(_OWORD *)(v2 + 16);
  v10 = v5;
  v11 = v1;
  return LazyFixedSizeHStack.init(width:alignment:spacing:content:)(v3, v6, 0, (uint64_t)partial apply for closure #1 in ScrollableHStackBase.scrollContent.getter, (uint64_t)&v8, v9, v5);
}

double ScrollableHStackBase.actualPadding.getter()
{
  uint64_t v0;
  double v1;
  double v2;

  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
    return *(double *)(v0 + 16);
  EnvironmentValues.init()();
  EnvironmentValues.defaultPadding.getter();
  v2 = v1;
  swift_release();
  swift_release();
  return v2;
}

void closure #1 in ScrollableHStackBase.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for LazyFixedSizeHStack(0, a2, a4, a4);
  MEMORY[0x1E0C80A78](v4, v5);
  MEMORY[0x1E0C80A78](v6, v7);
  type metadata accessor for ScrollableHStackBase();
}

uint64_t sub_1874EC0B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  ScrollableHStackBase.scrollContent.getter(a1);
  static ViewBuilder.buildExpression<A>(_:)(v3, v2, &protocol witness table for LazyFixedSizeHStack<A>);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v2);
  static ViewBuilder.buildBlock<A>(_:)(v4, v2, v1);
  return v6(v4, v2);
}

void closure #1 in ScrollableHStackBase.scrollContent.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for ScrollableHStackBase();
}

uint64_t sub_1874EC190(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 68), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

void partial apply for closure #2 in ScrollableHStackBase.body.getter()
{
  uint64_t *v0;

  closure #1 in ScrollableHStackBase.body.getter(v0[6], v0[2], v0[3], v0[4]);
}

void partial apply for closure #1 in ScrollableHStackBase.scrollContent.getter()
{
  uint64_t v0;

  closure #1 in ScrollableHStackBase.scrollContent.getter(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16));
}

uint64_t sub_1874EC21C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];

  v4 = type metadata accessor for LazyFixedSizeHStack(255, *a1, a1[2], a4);
  v6 = type metadata accessor for PagingScrollView(255, v4, (uint64_t)&protocol witness table for LazyFixedSizeHStack<A>, v5);
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for ScrollView(255, v4, (uint64_t)&protocol witness table for LazyFixedSizeHStack<A>, v9);
  v11 = type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for _ConditionalContent();
  v19[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PagingScrollView<A>, v6);
  v19[1] = &protocol witness table for ContentMarginModifier;
  v13 = MEMORY[0x1E0CE2E70];
  v18[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v19);
  v18[1] = &protocol witness table for TransformScrollIndicators;
  v14 = MEMORY[0x18D75FFDC](v13, v8, v18);
  v17[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollView<A>, v10);
  v17[1] = &protocol witness table for ContentMarginModifier;
  v16[0] = v14;
  v16[1] = MEMORY[0x18D75FFDC](v13, v11, v17);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v12, v16);
}

uint64_t ShapeStyle.opacity(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1, v4);
  return _OpacityShapeStyle.init(style:opacity:)();
}

uint64_t View.repeatingOpacity(from:to:animation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v6[2];

  Animation.repeatForever(autoreverses:)();
  v4 = type metadata accessor for ModifiedContent();
  v6[0] = a3;
  v6[1] = MEMORY[0x1E0CE2BA8];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v6);
  View.appearanceAnimation<A>(animation:modifier:)();
  return swift_release();
}

uint64_t VisualEffect.opacity(_:)()
{
  return VisualEffect.rendererEffect<A>(_:)();
}

void HoverEffectContent.opacity(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t partial apply for closure #1 in View.repeatingOpacity(from:to:animation:)()
{
  return View.opacity(_:)();
}

uint64_t ShapeStyle.opacities(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a2, v4);
  swift_bridgeObjectRetain();
  return _OpacitiesShapeStyle.init(style:opacities:)();
}

uint64_t sub_1874EC61C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = MEMORY[0x1E0CE2BA8];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v5);
  v3 = type metadata accessor for AppearanceAnimationView();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5940], v3);
}

uint64_t sub_1874EC6A4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1874EC6EC(_QWORD *a1)
{
  get_witness_table_7SwiftUI32TimelineProgressViewExtendedBaseRzlAA0cdE0V05FinalcdE033_E25B5CE50FE780022155187DDAA79ACALLVyx_GAA0E0HPyHCTm(a1, MEMORY[0x1E0CE4650]);
}

void sub_1874EC700(_QWORD *a1)
{
  get_witness_table_7SwiftUI32TimelineProgressViewExtendedBaseRzlAA0cdE0V05FinalcdE033_E25B5CE50FE780022155187DDAA79ACALLVyx_GAA0E0HPyHCTm(a1, MEMORY[0x1E0CE4F68]);
}

uint64_t PreferenceList.configuration(toolbarPlacement:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[40];
  _BYTE v8[24];
  uint64_t v9;

  v5 = *v2;
  outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)v8);
  switch(v9)
  {
    case 0:
      memset(v7, 0, sizeof(v7));
      specialized PreferenceList.configurationValue<A>(key:placement:)((uint64_t)v7, v5, a2);
      goto LABEL_11;
    case 1:
      memset(v7, 0, 24);
      *(_OWORD *)&v7[24] = xmmword_187BFE310;
      specialized PreferenceList.configurationValue<A>(key:placement:)((uint64_t)v7, v5, a2);
      goto LABEL_11;
    case 2:
      memset(v7, 0, 24);
      *(_OWORD *)&v7[24] = xmmword_187C39070;
      specialized PreferenceList.configurationValue<A>(key:placement:)((uint64_t)v7, v5, a2);
      goto LABEL_11;
    case 3:
      memset(v7, 0, 24);
      *(_OWORD *)&v7[24] = xmmword_187C304D0;
      specialized PreferenceList.configurationValue<A>(key:placement:)((uint64_t)v7, v5, a2);
      goto LABEL_11;
    case 4:
      *(_BYTE *)a2 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 1;
      *(_QWORD *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 56) = 1;
      *(_WORD *)(a2 + 57) = 2;
      *(_QWORD *)(a2 + 64) = 0;
      *(_BYTE *)(a2 + 72) = 0;
      *(_DWORD *)(a2 + 76) = -1;
      goto LABEL_8;
    case 5:
      memset(v7, 0, 24);
      *(_OWORD *)&v7[24] = xmmword_187C0CDF0;
      specialized PreferenceList.configurationValue<A>(key:placement:)((uint64_t)v7, v5, a2);
      goto LABEL_11;
    case 6:
      memset(v7, 0, 24);
      *(_OWORD *)&v7[24] = xmmword_187C304C0;
      specialized PreferenceList.configurationValue<A>(key:placement:)((uint64_t)v7, v5, a2);
LABEL_11:
      result = outlined destroy of ToolbarPlacement.Role?((uint64_t)v7);
      break;
    default:
      outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)v7);
      specialized PreferenceList.configurationValue<A>(key:placement:)((uint64_t)v7, v5, a2);
      outlined destroy of ToolbarPlacement.Role?((uint64_t)v7);
LABEL_8:
      result = outlined destroy of ToolbarPlacement.Role((uint64_t)v8);
      break;
  }
  return result;
}

BOOL static ToolbarLegibility.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static ToolbarLegibility.standard.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ToolbarLegibility.fullscreen.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void ToolbarLegibility.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ToolbarLegibility.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ToolbarLegibility and conformance ToolbarLegibility()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarLegibility and conformance ToolbarLegibility;
  if (!lazy protocol witness table cache variable for type ToolbarLegibility and conformance ToolbarLegibility)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarLegibility, &type metadata for ToolbarLegibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarLegibility and conformance ToolbarLegibility);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ToolbarLegibility(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1874ECA00 + 4 * byte_187C3949C[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1874ECA34 + 4 * byte_187C39497[v4]))();
}

uint64_t sub_1874ECA34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874ECA3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1874ECA44);
  return result;
}

uint64_t sub_1874ECA50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1874ECA58);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1874ECA5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874ECA64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t initializeWithCopy for ToolbarAppearanceConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ToolbarAppearanceConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for ToolbarAppearanceConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarAppearanceConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarAppearanceConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t destroy for ToolbarAppearanceModifier(uint64_t a1, uint64_t a2)
{
  return destroy for ToolbarAppearanceConfiguration(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t destroy for ToolbarAppearanceConfiguration(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  swift_release();
  swift_release();
  return a3(*(_QWORD *)(a1 + 64));
}

uint64_t initializeWithCopy for ToolbarAppearanceModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ToolbarAppearanceModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for ToolbarAppearanceModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarAppearanceModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarAppearanceModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in ToolbarAppearanceModifier()
{
  return &protocol witness table for ToolbarAppearanceModifier;
}

unint64_t lazy protocol witness table accessor for type ToolbarLegibility.Role and conformance ToolbarLegibility.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarLegibility.Role and conformance ToolbarLegibility.Role;
  if (!lazy protocol witness table cache variable for type ToolbarLegibility.Role and conformance ToolbarLegibility.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarLegibility.Role, &type metadata for ToolbarLegibility.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarLegibility.Role and conformance ToolbarLegibility.Role);
  }
  return result;
}

uint64_t ToolbarAppearanceModifier.init(visibility:foregroundStyle:background:backgroundVisibility:backgroundVisibilityOnScrollDistance:backgroundOpacity:colorScheme:toolbarLegibility:fullScreenVisibility:bars:context:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char *a10, char *a11, char *a12, uint64_t a13, char a14)
{
  char v14;
  uint64_t v15;
  char v16;
  char v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  char v33;
  char v34;
  char v35;
  char v36;
  _BYTE v39[24];
  uint64_t v40;
  _BYTE v41[40];
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v14 = a8;
  v15 = a7;
  v16 = a6;
  v20 = a14;
  v35 = *a11;
  v36 = *a10;
  v33 = *a4;
  v34 = *a12;
  v21 = *(_QWORD *)(a13 + 16);
  if (v21)
  {
    v45 = MEMORY[0x1E0DEE9D8];
    swift_retain();
    swift_retain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    v22 = a13 + 32;
    do
    {
      outlined init with copy of ToolbarPlacement(v22, (uint64_t)v41);
      outlined init with copy of ToolbarPlacement.Storage((uint64_t)v41, (uint64_t)v39);
      if (v40 == 7)
      {
        v44 = 0;
        v42 = 0u;
        v43 = 0u;
      }
      else
      {
        outlined destroy of ToolbarPlacement.Storage((uint64_t)v39);
        outlined init with copy of ToolbarPlacement((uint64_t)v41, (uint64_t)&v42);
      }
      outlined destroy of ToolbarPlacement((uint64_t)v41);
      v23 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v23 = v45;
      }
      v25 = *(_QWORD *)(v23 + 16);
      v24 = *(_QWORD *)(v23 + 24);
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1);
        v23 = v45;
      }
      *(_QWORD *)(v23 + 16) = v25 + 1;
      v26 = v23 + 40 * v25;
      v27 = v42;
      v28 = v43;
      *(_QWORD *)(v26 + 64) = v44;
      *(_OWORD *)(v26 + 32) = v27;
      *(_OWORD *)(v26 + 48) = v28;
      v22 += 40;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    v14 = a8;
    v15 = a7;
    v16 = a6;
    v20 = a14;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    v23 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  *(_BYTE *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = v33;
  *(_QWORD *)(a9 + 32) = a5;
  *(_BYTE *)(a9 + 40) = v16 & 1;
  *(_QWORD *)(a9 + 48) = v15;
  *(_BYTE *)(a9 + 56) = v14 & 1;
  *(_BYTE *)(a9 + 57) = v36;
  *(_BYTE *)(a9 + 58) = v35;
  *(_BYTE *)(a9 + 59) = v34;
  *(_QWORD *)(a9 + 64) = v23;
  *(_BYTE *)(a9 + 72) = v20;
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

double static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  __int128 v5;
  __int128 v6;
  int v7;
  double result;
  uint64_t v9;
  double v10;
  __int128 v11[5];
  int v12;

  v5 = *(_OWORD *)(a2 + 48);
  v11[2] = *(_OWORD *)(a2 + 32);
  v11[3] = v5;
  v11[4] = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v6;
  v7 = *a1;
  v12 = *(_DWORD *)(a2 + 80);
  a3(&v9);
  specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(v7, v11);
  specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(v7, v11);
  specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(v7, v11);
  specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(v7, v11);
  specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(v7, v11);
  specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(v7, v11);
  specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(v7, v11);
  swift_beginAccess();
  *(_QWORD *)a4 = v9;
  result = v10;
  a4[1] = v10;
  return result;
}

uint64_t specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(int a1, __int128 *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  LODWORD(v11) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarAppearanceModifier>, (uint64_t)&type metadata for ToolbarAppearanceModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v3 = _GraphValue.value.getter();
  v4 = a2[3];
  v13 = a2[2];
  v14 = v4;
  v15 = a2[4];
  v16 = *((_DWORD *)a2 + 20);
  v5 = a2[1];
  v11 = *a2;
  v12 = v5;
  LODWORD(v11) = v3;
  DWORD1(v11) = _ViewInputs.transaction.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<NavigationBarAppearanceKey>, (uint64_t)&type metadata for NavigationBarAppearanceKey, (uint64_t)&protocol witness table for NavigationBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarAppearanceModifier.PreferenceValue);
  lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<NavigationBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>();
  v6 = Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v8 = *((_QWORD *)a2 + 6);
  v9 = *((_DWORD *)a2 + 14);
  v10 = v6;
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  int v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  LODWORD(v11) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarAppearanceModifier>, (uint64_t)&type metadata for ToolbarAppearanceModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v3 = _GraphValue.value.getter();
  v4 = a2[3];
  v13 = a2[2];
  v14 = v4;
  v15 = a2[4];
  v16 = *((_DWORD *)a2 + 20);
  v5 = a2[1];
  v11 = *a2;
  v12 = v5;
  LODWORD(v11) = v3;
  DWORD1(v11) = _ViewInputs.transaction.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<TabBarAppearanceKey>, (uint64_t)&type metadata for TabBarAppearanceKey, (uint64_t)&protocol witness table for TabBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarAppearanceModifier.PreferenceValue);
  lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<TabBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>();
  v6 = Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v8 = *((_QWORD *)a2 + 6);
  v9 = *((_DWORD *)a2 + 14);
  v10 = v6;
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  int v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  LODWORD(v11) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarAppearanceModifier>, (uint64_t)&type metadata for ToolbarAppearanceModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v3 = _GraphValue.value.getter();
  v4 = a2[3];
  v13 = a2[2];
  v14 = v4;
  v15 = a2[4];
  v16 = *((_DWORD *)a2 + 20);
  v5 = a2[1];
  v11 = *a2;
  v12 = v5;
  LODWORD(v11) = v3;
  DWORD1(v11) = _ViewInputs.transaction.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<BottomBarAppearanceKey>, (uint64_t)&type metadata for BottomBarAppearanceKey, (uint64_t)&protocol witness table for BottomBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarAppearanceModifier.PreferenceValue);
  lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<BottomBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>();
  v6 = Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v8 = *((_QWORD *)a2 + 6);
  v9 = *((_DWORD *)a2 + 14);
  v10 = v6;
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  int v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  LODWORD(v11) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarAppearanceModifier>, (uint64_t)&type metadata for ToolbarAppearanceModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v3 = _GraphValue.value.getter();
  v4 = a2[3];
  v13 = a2[2];
  v14 = v4;
  v15 = a2[4];
  v16 = *((_DWORD *)a2 + 20);
  v5 = a2[1];
  v11 = *a2;
  v12 = v5;
  LODWORD(v11) = v3;
  DWORD1(v11) = _ViewInputs.transaction.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<WindowToolbarAppearanceKey>, (uint64_t)&type metadata for WindowToolbarAppearanceKey, (uint64_t)&protocol witness table for WindowToolbarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarAppearanceModifier.PreferenceValue);
  lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<WindowToolbarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>();
  v6 = Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v8 = *((_QWORD *)a2 + 6);
  v9 = *((_DWORD *)a2 + 14);
  v10 = v6;
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  int v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  LODWORD(v11) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarAppearanceModifier>, (uint64_t)&type metadata for ToolbarAppearanceModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v3 = _GraphValue.value.getter();
  v4 = a2[3];
  v13 = a2[2];
  v14 = v4;
  v15 = a2[4];
  v16 = *((_DWORD *)a2 + 20);
  v5 = a2[1];
  v11 = *a2;
  v12 = v5;
  LODWORD(v11) = v3;
  DWORD1(v11) = _ViewInputs.transaction.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<WindowToolbarItemsAppearanceKey>, (uint64_t)&type metadata for WindowToolbarItemsAppearanceKey, (uint64_t)&protocol witness table for WindowToolbarItemsAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarAppearanceModifier.PreferenceValue);
  lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<WindowToolbarItemsAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>();
  v6 = Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v8 = *((_QWORD *)a2 + 6);
  v9 = *((_DWORD *)a2 + 14);
  v10 = v6;
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  int v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  LODWORD(v11) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarAppearanceModifier>, (uint64_t)&type metadata for ToolbarAppearanceModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v3 = _GraphValue.value.getter();
  v4 = a2[3];
  v13 = a2[2];
  v14 = v4;
  v15 = a2[4];
  v16 = *((_DWORD *)a2 + 20);
  v5 = a2[1];
  v11 = *a2;
  v12 = v5;
  LODWORD(v11) = v3;
  DWORD1(v11) = _ViewInputs.transaction.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<AccessoryBarAppearanceKey>, (uint64_t)&type metadata for AccessoryBarAppearanceKey, (uint64_t)&protocol witness table for AccessoryBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarAppearanceModifier.PreferenceValue);
  lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<AccessoryBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>();
  v6 = Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v8 = *((_QWORD *)a2 + 6);
  v9 = *((_DWORD *)a2 + 14);
  v10 = v6;
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  int v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  LODWORD(v11) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarAppearanceModifier>, (uint64_t)&type metadata for ToolbarAppearanceModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v3 = _GraphValue.value.getter();
  v4 = a2[3];
  v13 = a2[2];
  v14 = v4;
  v15 = a2[4];
  v16 = *((_DWORD *)a2 + 20);
  v5 = a2[1];
  v11 = *a2;
  v12 = v5;
  LODWORD(v11) = v3;
  DWORD1(v11) = _ViewInputs.transaction.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey>, (uint64_t)&type metadata for BottomOrnamentAppearanceKey, (uint64_t)&protocol witness table for BottomOrnamentAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarAppearanceModifier.PreferenceValue);
  lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>();
  v6 = Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v8 = *((_QWORD *)a2 + 6);
  v9 = *((_DWORD *)a2 + 14);
  v10 = v6;
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t ToolbarAppearanceModifier.PreferenceValue.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  char v11;
  uint64_t v12;
  char v13;

  Value = AGGraphGetValue();
  v4 = *(_QWORD *)(Value + 8);
  v3 = *(_QWORD *)(Value + 16);
  v5 = *(_BYTE *)(Value + 24);
  v6 = *(_QWORD *)(Value + 32);
  v7 = *(_BYTE *)(Value + 40);
  v8 = *(_QWORD *)(Value + 48);
  v9 = *(_BYTE *)(Value + 56);
  v10 = *(_WORD *)(Value + 57);
  v11 = *(_BYTE *)(Value + 59);
  v12 = *(_QWORD *)(Value + 64);
  v13 = *(_BYTE *)(Value + 72);
  *(_BYTE *)a1 = *(_BYTE *)Value;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  *(_WORD *)(a1 + 57) = v10;
  *(_BYTE *)(a1 + 59) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 72) = v13;
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t (*ToolbarAppearanceModifier.PreferenceValue.value.getter(uint64_t a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  char *v6;
  uint64_t (*result)(_QWORD *);
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22[3];
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;

  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3) & 1) != 0)
    goto LABEL_4;
  v6 = ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
  result = (uint64_t (*)(_QWORD *))(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(v22, a2, a3);
  if (v23 == 7)
  {
    __break(1u);
  }
  else
  {
    v8 = specialized Sequence<>.contains(_:)((uint64_t)v22, (uint64_t)v6);
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v22);
    if ((v8 & 1) != 0)
    {
LABEL_4:
      AGGraphClearUpdate();
      closure #2 in ToolbarAppearanceModifier.PreferenceValue.value.getter(v22);
      AGGraphSetUpdate();
      v21 = v22[0];
      ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v22);
      v20 = v22[0];
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v22);
      v19 = v22[2];
      swift_bridgeObjectRelease();
      swift_release();
      ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v22);
      v18 = v23;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v22);
      v17 = v24;
      v16 = v25;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v22);
      v15 = v26;
      v9 = v27;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v22);
      v10 = v28;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v22);
      v11 = v29;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v22);
      v12 = v22[1];
      swift_bridgeObjectRelease();
      swift_release();
      ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v22);
      v13 = v30;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = a2;
      *(_QWORD *)(v14 + 24) = a3;
      *(_QWORD *)(v14 + 32) = a1;
      *(_BYTE *)(v14 + 40) = v20;
      *(_QWORD *)(v14 + 48) = v19;
      *(_BYTE *)(v14 + 56) = v18;
      *(_QWORD *)(v14 + 64) = v17;
      *(_BYTE *)(v14 + 72) = v16;
      *(_QWORD *)(v14 + 80) = v15;
      *(_BYTE *)(v14 + 88) = v9;
      *(_BYTE *)(v14 + 89) = v10;
      *(_BYTE *)(v14 + 90) = v11;
      *(_QWORD *)(v14 + 96) = v12;
      *(_QWORD *)(v14 + 104) = v21;
      result = partial apply for closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
      *(_BYTE *)(v14 + 112) = v13;
      return result;
    }
    return (uint64_t (*)(_QWORD *))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  return result;
}

char *ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter()
{
  char *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE v12[24];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21[8];
  char *v22;

  ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v21);
  v0 = v22;
  swift_release();
  swift_release();
  v1 = *((_QWORD *)v0 + 2);
  if (v1)
    goto LABEL_10;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = xmmword_187C304E0;
  ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v21);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined init with copy of ToolbarPlacement.Storage((uint64_t)&v14, (uint64_t)v12);
  if (v13 == 7)
  {
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
  }
  else
  {
    outlined destroy of ToolbarPlacement.Storage((uint64_t)v12);
    outlined init with copy of ToolbarPlacement((uint64_t)&v14, (uint64_t)&v18);
  }
  outlined destroy of ToolbarPlacement((uint64_t)&v14);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v0 + 2) + 1, 1, v0);
  v3 = *((_QWORD *)v0 + 2);
  v2 = *((_QWORD *)v0 + 3);
  if (v3 >= v2 >> 1)
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v0);
  *((_QWORD *)v0 + 2) = v3 + 1;
  v4 = &v0[40 * v3];
  v5 = v18;
  v6 = v19;
  *((_QWORD *)v4 + 8) = v20;
  *((_OWORD *)v4 + 2) = v5;
  *((_OWORD *)v4 + 3) = v6;
  v1 = v3 + 1;
  if (v3 == -1)
  {
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
LABEL_10:
    v7 = (uint64_t)(v0 + 32);
    swift_bridgeObjectRetain();
    v8 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      outlined init with copy of ToolbarPlacement(v7, (uint64_t)v21);
      outlined init with copy of ToolbarPlacement.Storage((uint64_t)v21, (uint64_t)v12);
      if (v13 == 7)
      {
        outlined destroy of ToolbarPlacement.Storage((uint64_t)v12);
        v15 = 0;
        v16 = 0;
        v14 = 0;
        v17 = xmmword_187C304E0;
      }
      else
      {
        outlined init with take of ToolbarPlacement.Role((uint64_t)v12, (uint64_t)&v18);
        outlined init with take of ToolbarPlacement.Role((uint64_t)&v18, (uint64_t)&v14);
      }
      outlined destroy of ToolbarPlacement((uint64_t)v21);
      if ((_QWORD)v17 == 7)
      {
        outlined destroy of ToolbarPlacement.Role?((uint64_t)&v14);
      }
      else
      {
        outlined init with take of ToolbarPlacement.Role((uint64_t)&v14, (uint64_t)&v18);
        outlined init with take of ToolbarPlacement.Role((uint64_t)&v18, (uint64_t)&v14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
        v10 = *((_QWORD *)v8 + 2);
        v9 = *((_QWORD *)v8 + 3);
        if (v10 >= v9 >> 1)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v8);
        *((_QWORD *)v8 + 2) = v10 + 1;
        outlined init with take of ToolbarPlacement.Role((uint64_t)&v14, (uint64_t)&v8[40 * v10 + 32]);
      }
      v7 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease_n();
  }
  return v8;
}

uint64_t closure #2 in ToolbarAppearanceModifier.PreferenceValue.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  AGGraphGetValue();
  swift_retain();
  v2 = Transaction.animation.getter();
  result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, char a9, char a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t result;
  char v67;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  _QWORD *v84;
  _QWORD v86[5];
  _BYTE v87[24];
  uint64_t v88;
  _QWORD v89[6];

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a16 + 16))(v89, a15, a16);
  outlined init with copy of ToolbarPlacement.Role?((uint64_t)v89, (uint64_t)v87);
  if (v88 == 7)
  {
    outlined destroy of ToolbarPlacement.Role?((uint64_t)v89);
    v18 = (uint64_t)ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  outlined init with take of ToolbarPlacement.Role((uint64_t)v87, (uint64_t)v86);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_187BF9830;
  outlined init with take of ToolbarPlacement.Role((uint64_t)v86, v18 + 32);
  outlined destroy of ToolbarPlacement.Role?((uint64_t)v89);
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
    return swift_bridgeObjectRelease();
LABEL_3:
  v20 = v18 + 32;
  v84 = a1;
  v67 = a7;
  while (1)
  {
    v72 = v20;
    v73 = v19;
    outlined init with copy of ToolbarPlacement.Role(v20, (uint64_t)v89);
    v22 = *a1;
    if (*(_QWORD *)(*a1 + 16) && (v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v89), (v24 & 1) != 0))
    {
      v25 = *(_QWORD *)(v22 + 56) + 80 * v23;
      v26 = *(_BYTE *)v25;
      v27 = *(_QWORD *)(v25 + 8);
      v28 = *(_QWORD *)(v25 + 16);
      v78 = *(_QWORD *)(v25 + 32);
      v80 = *(_BYTE *)(v25 + 24);
      v82 = *(_BYTE *)(v25 + 40);
      v29 = *(_QWORD *)(v25 + 48);
      v83 = *(_BYTE *)(v25 + 56);
      v30 = *(_BYTE *)(v25 + 57);
      v31 = *(_BYTE *)(v25 + 58);
      v32 = *(_BYTE *)(v25 + 72);
      v33 = *(_QWORD *)(v25 + 64);
      swift_retain();
      v34 = v27;
      v35 = v78;
      swift_retain();
      swift_retain();
      v36 = v80;
    }
    else
    {
      v29 = 0;
      v31 = 0;
      v35 = 0;
      v36 = 0;
      v32 = 0;
      v26 = 0;
      v33 = 0;
      v34 = 0;
      v28 = 0;
      v30 = 2;
      v82 = 1;
      v83 = 1;
    }
    if (a3 == 3)
      v37 = v26;
    else
      v37 = a3;
    v81 = v37;
    if (a4)
    {
      v38 = v36;
      swift_retain();
      swift_release();
      v36 = v38;
      v28 = a4;
    }
    if (a5 == 4)
      v39 = v36;
    else
      v39 = a5;
    v75 = v39;
    v40 = a6;
    if ((a7 & 1) != 0)
      v40 = v35;
    v74 = v40;
    v41 = a8;
    if ((a9 & 1) != 0)
      v41 = v29;
    v76 = v41;
    if (a10 == 2)
      v42 = v30;
    else
      v42 = a10;
    if (a11 == 3)
      v43 = v31;
    else
      v43 = a11;
    v77 = v43;
    v79 = v42;
    if (a12)
    {
      swift_retain();
      swift_release();
      v34 = a12;
    }
    v44 = v33;
    if (a13)
    {
      swift_retain();
      swift_release();
      v44 = a13;
    }
    v45 = a14 == 3 ? v32 : a14;
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v89, (uint64_t)v87);
    v46 = v28;
    swift_retain();
    v47 = v44;
    swift_retain();
    v48 = v34;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v86[0] = *v84;
    v50 = v86[0];
    *v84 = 0x8000000000000000;
    v52 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v87);
    v53 = *(_QWORD *)(v50 + 16);
    v54 = (v51 & 1) == 0;
    v55 = v53 + v54;
    if (__OFADD__(v53, v54))
      break;
    v56 = v51;
    if (*(_QWORD *)(v50 + 24) >= v55)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, isUniquelyReferenced_nonNull_native);
      v57 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v87);
      if ((v56 & 1) != (v58 & 1))
        goto LABEL_49;
      v52 = v57;
    }
    v59 = a7 & v82;
    v60 = a9 & v83;
    v61 = (_QWORD *)v86[0];
    if ((v56 & 1) != 0)
    {
      v21 = *(_QWORD *)(v86[0] + 56) + 80 * v52;
      swift_release();
      swift_release();
      swift_release();
      *(_BYTE *)v21 = v81;
      *(_QWORD *)(v21 + 8) = v48;
      *(_QWORD *)(v21 + 16) = v46;
      *(_BYTE *)(v21 + 24) = v75;
      *(_QWORD *)(v21 + 32) = v74;
      *(_BYTE *)(v21 + 40) = v59;
      *(_QWORD *)(v21 + 48) = v76;
      *(_BYTE *)(v21 + 56) = v60;
      *(_BYTE *)(v21 + 57) = v79;
      *(_BYTE *)(v21 + 58) = v77;
      *(_QWORD *)(v21 + 64) = v47;
      *(_BYTE *)(v21 + 72) = v45;
    }
    else
    {
      *(_QWORD *)(v86[0] + 8 * (v52 >> 6) + 64) |= 1 << v52;
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v87, v61[6] + 40 * v52);
      v62 = v61[7] + 80 * v52;
      *(_BYTE *)v62 = v81;
      *(_QWORD *)(v62 + 8) = v48;
      *(_QWORD *)(v62 + 16) = v46;
      *(_BYTE *)(v62 + 24) = v75;
      *(_QWORD *)(v62 + 32) = v74;
      *(_BYTE *)(v62 + 40) = v59;
      *(_QWORD *)(v62 + 48) = v76;
      *(_BYTE *)(v62 + 56) = v60;
      *(_BYTE *)(v62 + 57) = v79;
      *(_BYTE *)(v62 + 58) = v77;
      *(_QWORD *)(v62 + 64) = v47;
      *(_BYTE *)(v62 + 72) = v45;
      v63 = v61[2];
      v64 = __OFADD__(v63, 1);
      v65 = v63 + 1;
      if (v64)
        goto LABEL_48;
      v61[2] = v65;
    }
    a1 = v84;
    *v84 = v61;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v87);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v89);
    swift_release();
    swift_release();
    swift_release();
    v20 = v72 + 40;
    v19 = v73 - 1;
    a7 = v67;
    if (v73 == 1)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarAppearanceModifier.PreferenceValue<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t *v2;
  uint64_t (*v4)(_QWORD *);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = ToolbarAppearanceModifier.PreferenceValue.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v6 = v5;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance ToolbarAppearanceModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance NavigationBarAppearanceKey(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  return specialized static ToolbarAppearanceKey.reduce(value:nextValue:)(a1, a2);
}

double protocol witness for static ToolbarAppearanceKey.toolbarPlacement.getter in conformance TabBarAppearanceKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 5;
  *(_OWORD *)(a1 + 24) = xmmword_187C0CDF0;
  return result;
}

unint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance TabBarAppearanceKey@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *a1 = result;
  return result;
}

double protocol witness for static ToolbarAppearanceKey.toolbarPlacement.getter in conformance BottomBarAppearanceKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 3;
  *(_OWORD *)(a1 + 24) = xmmword_187C304D0;
  return result;
}

double protocol witness for static ToolbarAppearanceKey.toolbarPlacement.getter in conformance WindowToolbarAppearanceKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 2;
  *(_OWORD *)(a1 + 24) = xmmword_187C39070;
  return result;
}

double protocol witness for static ToolbarAppearanceKey.toolbarPlacement.getter in conformance AccessoryBarAppearanceKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 7;
  *(_OWORD *)(a1 + 24) = xmmword_187C304E0;
  return result;
}

double protocol witness for static ToolbarAppearanceKey.toolbarPlacement.getter in conformance BottomOrnamentAppearanceKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 6;
  *(_OWORD *)(a1 + 24) = xmmword_187C304C0;
  return result;
}

uint64_t specialized PreferenceList.configurationValue<A>(key:placement:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a2;
  PreferenceList.subscript.getter();
  v5 = v32;
  v6 = v33;
  outlined init with copy of ToolbarPlacement.Role?(a1, (uint64_t)&v32);
  if (v34 == 7)
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v31 = v6;
    if (*(_QWORD *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(v5 + 56) + 80 * v7;
        v11 = *(_QWORD *)(v9 + 8);
        v10 = *(_QWORD *)(v9 + 16);
        LOBYTE(v26) = *(_BYTE *)v9;
        BYTE4(v26) = *(_BYTE *)(v9 + 24);
        v30 = *(_QWORD *)(v9 + 48);
        v21 = *(_BYTE *)(v9 + 40);
        v22 = *(_BYTE *)(v9 + 56);
        v23 = *(_BYTE *)(v9 + 57);
        LOBYTE(v29) = *(_BYTE *)(v9 + 72);
        BYTE4(v29) = *(_BYTE *)(v9 + 58);
        v27 = *(_QWORD *)(v9 + 32);
        v28 = *(_QWORD *)(v9 + 64);
        swift_retain();
        v24 = v11;
        swift_retain();
        v25 = v10;
        swift_retain();
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v27 = 0;
        v28 = 0;
        v25 = 0;
        v26 = 0;
        v24 = 0;
        v22 = 1;
        v23 = 2;
        v21 = 1;
      }
      swift_bridgeObjectRelease();
      v12 = v27;
      v16 = v26;
      v13 = BYTE4(v26);
      v15 = v24;
      v14 = v25;
      v18 = v22;
      v17 = v23;
      v19 = v21;
    }
    else
    {
      v29 = 0;
      v30 = 0;
      v12 = 0;
      v28 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 2;
      v18 = 1;
      v19 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v32);
    result = swift_bridgeObjectRelease();
    *(_BYTE *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v15;
    *(_QWORD *)(a3 + 16) = v14;
    *(_BYTE *)(a3 + 24) = v13;
    *(_QWORD *)(a3 + 32) = v12;
    *(_BYTE *)(a3 + 40) = v19;
    *(_QWORD *)(a3 + 48) = v30;
    *(_BYTE *)(a3 + 56) = v18;
    *(_BYTE *)(a3 + 57) = v17;
    *(_BYTE *)(a3 + 58) = BYTE4(v29);
    *(_QWORD *)(a3 + 64) = v28;
    *(_BYTE *)(a3 + 72) = v29;
    *(_DWORD *)(a3 + 76) = v31;
  }
  return result;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a2;
  PreferenceList.subscript.getter();
  v5 = v32;
  v6 = v33;
  outlined init with copy of ToolbarPlacement.Role?(a1, (uint64_t)&v32);
  if (v34 == 7)
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v31 = v6;
    if (*(_QWORD *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(v5 + 56) + 80 * v7;
        v11 = *(_QWORD *)(v9 + 8);
        v10 = *(_QWORD *)(v9 + 16);
        LOBYTE(v26) = *(_BYTE *)v9;
        BYTE4(v26) = *(_BYTE *)(v9 + 24);
        v30 = *(_QWORD *)(v9 + 48);
        v21 = *(_BYTE *)(v9 + 40);
        v22 = *(_BYTE *)(v9 + 56);
        v23 = *(_BYTE *)(v9 + 57);
        LOBYTE(v29) = *(_BYTE *)(v9 + 72);
        BYTE4(v29) = *(_BYTE *)(v9 + 58);
        v27 = *(_QWORD *)(v9 + 32);
        v28 = *(_QWORD *)(v9 + 64);
        swift_retain();
        v24 = v11;
        swift_retain();
        v25 = v10;
        swift_retain();
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v27 = 0;
        v28 = 0;
        v25 = 0;
        v26 = 0;
        v24 = 0;
        v22 = 1;
        v23 = 2;
        v21 = 1;
      }
      swift_bridgeObjectRelease();
      v12 = v27;
      v16 = v26;
      v13 = BYTE4(v26);
      v15 = v24;
      v14 = v25;
      v18 = v22;
      v17 = v23;
      v19 = v21;
    }
    else
    {
      v29 = 0;
      v30 = 0;
      v12 = 0;
      v28 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 2;
      v18 = 1;
      v19 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v32);
    result = swift_bridgeObjectRelease();
    *(_BYTE *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v15;
    *(_QWORD *)(a3 + 16) = v14;
    *(_BYTE *)(a3 + 24) = v13;
    *(_QWORD *)(a3 + 32) = v12;
    *(_BYTE *)(a3 + 40) = v19;
    *(_QWORD *)(a3 + 48) = v30;
    *(_BYTE *)(a3 + 56) = v18;
    *(_BYTE *)(a3 + 57) = v17;
    *(_BYTE *)(a3 + 58) = BYTE4(v29);
    *(_QWORD *)(a3 + 64) = v28;
    *(_BYTE *)(a3 + 72) = v29;
    *(_DWORD *)(a3 + 76) = v31;
  }
  return result;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a2;
  PreferenceList.subscript.getter();
  v5 = v32;
  v6 = v33;
  outlined init with copy of ToolbarPlacement.Role?(a1, (uint64_t)&v32);
  if (v34 == 7)
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v31 = v6;
    if (*(_QWORD *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(v5 + 56) + 80 * v7;
        v11 = *(_QWORD *)(v9 + 8);
        v10 = *(_QWORD *)(v9 + 16);
        LOBYTE(v26) = *(_BYTE *)v9;
        BYTE4(v26) = *(_BYTE *)(v9 + 24);
        v30 = *(_QWORD *)(v9 + 48);
        v21 = *(_BYTE *)(v9 + 40);
        v22 = *(_BYTE *)(v9 + 56);
        v23 = *(_BYTE *)(v9 + 57);
        LOBYTE(v29) = *(_BYTE *)(v9 + 72);
        BYTE4(v29) = *(_BYTE *)(v9 + 58);
        v27 = *(_QWORD *)(v9 + 32);
        v28 = *(_QWORD *)(v9 + 64);
        swift_retain();
        v24 = v11;
        swift_retain();
        v25 = v10;
        swift_retain();
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v27 = 0;
        v28 = 0;
        v25 = 0;
        v26 = 0;
        v24 = 0;
        v22 = 1;
        v23 = 2;
        v21 = 1;
      }
      swift_bridgeObjectRelease();
      v12 = v27;
      v16 = v26;
      v13 = BYTE4(v26);
      v15 = v24;
      v14 = v25;
      v18 = v22;
      v17 = v23;
      v19 = v21;
    }
    else
    {
      v29 = 0;
      v30 = 0;
      v12 = 0;
      v28 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 2;
      v18 = 1;
      v19 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v32);
    result = swift_bridgeObjectRelease();
    *(_BYTE *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v15;
    *(_QWORD *)(a3 + 16) = v14;
    *(_BYTE *)(a3 + 24) = v13;
    *(_QWORD *)(a3 + 32) = v12;
    *(_BYTE *)(a3 + 40) = v19;
    *(_QWORD *)(a3 + 48) = v30;
    *(_BYTE *)(a3 + 56) = v18;
    *(_BYTE *)(a3 + 57) = v17;
    *(_BYTE *)(a3 + 58) = BYTE4(v29);
    *(_QWORD *)(a3 + 64) = v28;
    *(_BYTE *)(a3 + 72) = v29;
    *(_DWORD *)(a3 + 76) = v31;
  }
  return result;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a2;
  PreferenceList.subscript.getter();
  v5 = v32;
  v6 = v33;
  outlined init with copy of ToolbarPlacement.Role?(a1, (uint64_t)&v32);
  if (v34 == 7)
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v31 = v6;
    if (*(_QWORD *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(v5 + 56) + 80 * v7;
        v11 = *(_QWORD *)(v9 + 8);
        v10 = *(_QWORD *)(v9 + 16);
        LOBYTE(v26) = *(_BYTE *)v9;
        BYTE4(v26) = *(_BYTE *)(v9 + 24);
        v30 = *(_QWORD *)(v9 + 48);
        v21 = *(_BYTE *)(v9 + 40);
        v22 = *(_BYTE *)(v9 + 56);
        v23 = *(_BYTE *)(v9 + 57);
        LOBYTE(v29) = *(_BYTE *)(v9 + 72);
        BYTE4(v29) = *(_BYTE *)(v9 + 58);
        v27 = *(_QWORD *)(v9 + 32);
        v28 = *(_QWORD *)(v9 + 64);
        swift_retain();
        v24 = v11;
        swift_retain();
        v25 = v10;
        swift_retain();
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v27 = 0;
        v28 = 0;
        v25 = 0;
        v26 = 0;
        v24 = 0;
        v22 = 1;
        v23 = 2;
        v21 = 1;
      }
      swift_bridgeObjectRelease();
      v12 = v27;
      v16 = v26;
      v13 = BYTE4(v26);
      v15 = v24;
      v14 = v25;
      v18 = v22;
      v17 = v23;
      v19 = v21;
    }
    else
    {
      v29 = 0;
      v30 = 0;
      v12 = 0;
      v28 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 2;
      v18 = 1;
      v19 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v32);
    result = swift_bridgeObjectRelease();
    *(_BYTE *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v15;
    *(_QWORD *)(a3 + 16) = v14;
    *(_BYTE *)(a3 + 24) = v13;
    *(_QWORD *)(a3 + 32) = v12;
    *(_BYTE *)(a3 + 40) = v19;
    *(_QWORD *)(a3 + 48) = v30;
    *(_BYTE *)(a3 + 56) = v18;
    *(_BYTE *)(a3 + 57) = v17;
    *(_BYTE *)(a3 + 58) = BYTE4(v29);
    *(_QWORD *)(a3 + 64) = v28;
    *(_BYTE *)(a3 + 72) = v29;
    *(_DWORD *)(a3 + 76) = v31;
  }
  return result;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a2;
  PreferenceList.subscript.getter();
  v5 = v32;
  v6 = v33;
  outlined init with copy of ToolbarPlacement.Role?(a1, (uint64_t)&v32);
  if (v34 == 7)
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v31 = v6;
    if (*(_QWORD *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(v5 + 56) + 80 * v7;
        v11 = *(_QWORD *)(v9 + 8);
        v10 = *(_QWORD *)(v9 + 16);
        LOBYTE(v26) = *(_BYTE *)v9;
        BYTE4(v26) = *(_BYTE *)(v9 + 24);
        v30 = *(_QWORD *)(v9 + 48);
        v21 = *(_BYTE *)(v9 + 40);
        v22 = *(_BYTE *)(v9 + 56);
        v23 = *(_BYTE *)(v9 + 57);
        LOBYTE(v29) = *(_BYTE *)(v9 + 72);
        BYTE4(v29) = *(_BYTE *)(v9 + 58);
        v27 = *(_QWORD *)(v9 + 32);
        v28 = *(_QWORD *)(v9 + 64);
        swift_retain();
        v24 = v11;
        swift_retain();
        v25 = v10;
        swift_retain();
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v27 = 0;
        v28 = 0;
        v25 = 0;
        v26 = 0;
        v24 = 0;
        v22 = 1;
        v23 = 2;
        v21 = 1;
      }
      swift_bridgeObjectRelease();
      v12 = v27;
      v16 = v26;
      v13 = BYTE4(v26);
      v15 = v24;
      v14 = v25;
      v18 = v22;
      v17 = v23;
      v19 = v21;
    }
    else
    {
      v29 = 0;
      v30 = 0;
      v12 = 0;
      v28 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 2;
      v18 = 1;
      v19 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v32);
    result = swift_bridgeObjectRelease();
    *(_BYTE *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v15;
    *(_QWORD *)(a3 + 16) = v14;
    *(_BYTE *)(a3 + 24) = v13;
    *(_QWORD *)(a3 + 32) = v12;
    *(_BYTE *)(a3 + 40) = v19;
    *(_QWORD *)(a3 + 48) = v30;
    *(_BYTE *)(a3 + 56) = v18;
    *(_BYTE *)(a3 + 57) = v17;
    *(_BYTE *)(a3 + 58) = BYTE4(v29);
    *(_QWORD *)(a3 + 64) = v28;
    *(_BYTE *)(a3 + 72) = v29;
    *(_DWORD *)(a3 + 76) = v31;
  }
  return result;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a2;
  PreferenceList.subscript.getter();
  v5 = v32;
  v6 = v33;
  outlined init with copy of ToolbarPlacement.Role?(a1, (uint64_t)&v32);
  if (v34 == 7)
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v31 = v6;
    if (*(_QWORD *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(v5 + 56) + 80 * v7;
        v11 = *(_QWORD *)(v9 + 8);
        v10 = *(_QWORD *)(v9 + 16);
        LOBYTE(v26) = *(_BYTE *)v9;
        BYTE4(v26) = *(_BYTE *)(v9 + 24);
        v30 = *(_QWORD *)(v9 + 48);
        v21 = *(_BYTE *)(v9 + 40);
        v22 = *(_BYTE *)(v9 + 56);
        v23 = *(_BYTE *)(v9 + 57);
        LOBYTE(v29) = *(_BYTE *)(v9 + 72);
        BYTE4(v29) = *(_BYTE *)(v9 + 58);
        v27 = *(_QWORD *)(v9 + 32);
        v28 = *(_QWORD *)(v9 + 64);
        swift_retain();
        v24 = v11;
        swift_retain();
        v25 = v10;
        swift_retain();
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v27 = 0;
        v28 = 0;
        v25 = 0;
        v26 = 0;
        v24 = 0;
        v22 = 1;
        v23 = 2;
        v21 = 1;
      }
      swift_bridgeObjectRelease();
      v12 = v27;
      v16 = v26;
      v13 = BYTE4(v26);
      v15 = v24;
      v14 = v25;
      v18 = v22;
      v17 = v23;
      v19 = v21;
    }
    else
    {
      v29 = 0;
      v30 = 0;
      v12 = 0;
      v28 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 2;
      v18 = 1;
      v19 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v32);
    result = swift_bridgeObjectRelease();
    *(_BYTE *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v15;
    *(_QWORD *)(a3 + 16) = v14;
    *(_BYTE *)(a3 + 24) = v13;
    *(_QWORD *)(a3 + 32) = v12;
    *(_BYTE *)(a3 + 40) = v19;
    *(_QWORD *)(a3 + 48) = v30;
    *(_BYTE *)(a3 + 56) = v18;
    *(_BYTE *)(a3 + 57) = v17;
    *(_BYTE *)(a3 + 58) = BYTE4(v29);
    *(_QWORD *)(a3 + 64) = v28;
    *(_BYTE *)(a3 + 72) = v29;
    *(_DWORD *)(a3 + 76) = v31;
  }
  return result;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a2;
  PreferenceList.subscript.getter();
  v5 = v32;
  v6 = v33;
  outlined init with copy of ToolbarPlacement.Role?(a1, (uint64_t)&v32);
  if (v34 == 7)
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v31 = v6;
    if (*(_QWORD *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(v5 + 56) + 80 * v7;
        v11 = *(_QWORD *)(v9 + 8);
        v10 = *(_QWORD *)(v9 + 16);
        LOBYTE(v26) = *(_BYTE *)v9;
        BYTE4(v26) = *(_BYTE *)(v9 + 24);
        v30 = *(_QWORD *)(v9 + 48);
        v21 = *(_BYTE *)(v9 + 40);
        v22 = *(_BYTE *)(v9 + 56);
        v23 = *(_BYTE *)(v9 + 57);
        LOBYTE(v29) = *(_BYTE *)(v9 + 72);
        BYTE4(v29) = *(_BYTE *)(v9 + 58);
        v27 = *(_QWORD *)(v9 + 32);
        v28 = *(_QWORD *)(v9 + 64);
        swift_retain();
        v24 = v11;
        swift_retain();
        v25 = v10;
        swift_retain();
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v27 = 0;
        v28 = 0;
        v25 = 0;
        v26 = 0;
        v24 = 0;
        v22 = 1;
        v23 = 2;
        v21 = 1;
      }
      swift_bridgeObjectRelease();
      v12 = v27;
      v16 = v26;
      v13 = BYTE4(v26);
      v15 = v24;
      v14 = v25;
      v18 = v22;
      v17 = v23;
      v19 = v21;
    }
    else
    {
      v29 = 0;
      v30 = 0;
      v12 = 0;
      v28 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 2;
      v18 = 1;
      v19 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v32);
    result = swift_bridgeObjectRelease();
    *(_BYTE *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v15;
    *(_QWORD *)(a3 + 16) = v14;
    *(_BYTE *)(a3 + 24) = v13;
    *(_QWORD *)(a3 + 32) = v12;
    *(_BYTE *)(a3 + 40) = v19;
    *(_QWORD *)(a3 + 48) = v30;
    *(_BYTE *)(a3 + 56) = v18;
    *(_BYTE *)(a3 + 57) = v17;
    *(_BYTE *)(a3 + 58) = BYTE4(v29);
    *(_QWORD *)(a3 + 64) = v28;
    *(_BYTE *)(a3 + 72) = v29;
    *(_DWORD *)(a3 + 76) = v31;
  }
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ManagedBarAppearancesKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = specialized static EnvironmentValues.ManagedBarAppearancesKey.defaultValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.ManagedBarAppearancesKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static Set.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.HostingControllerManagedBarsKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static EnvironmentValues.HostingControllerManagedBarsKey.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for ToolbarAppearanceModifier.PreferenceValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarAppearanceModifier.PreferenceValue);
}

unint64_t lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>;
  if (!lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey>, (uint64_t)&type metadata for BottomOrnamentAppearanceKey, (uint64_t)&protocol witness table for BottomOrnamentAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarAppearanceModifier.PreferenceValue);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarAppearanceModifier.PreferenceValue<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>);
  }
  return result;
}

uint64_t sub_1874EFCB4()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(_QWORD *a1)
{
  uint64_t v1;

  return closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_BYTE *)(v1 + 88), *(_WORD *)(v1 + 89), HIBYTE(*(_WORD *)(v1 + 89)), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_BYTE *)(v1 + 112), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t specialized static ToolbarAppearanceConfiguration.== infix(_:_:)(double *a1, double *a2)
{
  int v2;
  double v3;
  double v4;
  unsigned __int8 v5;
  int v6;
  int v7;
  int v8;
  int v9;
  double v10;
  unsigned int v11;
  double v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  char v43;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v2 = *((unsigned __int8 *)a1 + 24);
  v3 = a1[4];
  v43 = *((_BYTE *)a1 + 40);
  v4 = a1[6];
  v5 = *((_BYTE *)a1 + 56);
  v6 = *((unsigned __int8 *)a1 + 57);
  v7 = *((unsigned __int8 *)a1 + 58);
  v8 = *((unsigned __int8 *)a1 + 72);
  v9 = *((unsigned __int8 *)a2 + 24);
  v10 = a2[4];
  v11 = *((unsigned __int8 *)a2 + 40);
  v12 = a2[6];
  v13 = *((unsigned __int8 *)a2 + 56);
  v14 = *((unsigned __int8 *)a2 + 57);
  v15 = *((unsigned __int8 *)a2 + 58);
  v16 = *((unsigned __int8 *)a2 + 72);
  v17 = *((_QWORD *)a2 + 1);
  v18 = *((_QWORD *)a2 + 2);
  v19 = *((_QWORD *)a1 + 1);
  v20 = *((_QWORD *)a1 + 2);
  if (v20)
  {
    if (!v18)
      return 0;
    if (v20 != v18)
    {
      v33 = *((unsigned __int8 *)a1 + 58);
      v34 = *((_QWORD *)a1 + 1);
      v35 = *((_QWORD *)a2 + 1);
      v37 = *((unsigned __int8 *)a2 + 72);
      v39 = *((unsigned __int8 *)a1 + 72);
      v41 = *((unsigned __int8 *)a2 + 40);
      swift_retain();
      swift_retain();
      v21 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      swift_release();
      result = 0;
      if ((v21 & 1) == 0)
        return result;
      v8 = v39;
      v11 = v41;
      v16 = v37;
      v19 = v34;
      v17 = v35;
      v7 = v33;
      if (v2 != v9)
        return result;
      goto LABEL_11;
    }
  }
  else
  {
    if (v18)
      return 0;
    v40 = *((unsigned __int8 *)a1 + 72);
    v42 = *((unsigned __int8 *)a2 + 40);
    v38 = *((unsigned __int8 *)a2 + 72);
    v23 = *((_QWORD *)a2 + 1);
    v24 = *((_QWORD *)a1 + 1);
    v36 = *((unsigned __int8 *)a2 + 58);
    v25 = *((unsigned __int8 *)a1 + 58);
    swift_retain();
    swift_retain();
    v7 = v25;
    v15 = v36;
    v19 = v24;
    v17 = v23;
    v16 = v38;
    v8 = v40;
    v11 = v42;
  }
  if (v2 != v9)
    return 0;
LABEL_11:
  if ((v5 & 1) != 0)
  {
    if (!v13)
      return 0;
  }
  else
  {
    if (v4 == v12)
      v26 = v13;
    else
      v26 = 1;
    if ((v26 & 1) != 0)
      return 0;
  }
  if (v6 == 2)
  {
    result = 0;
    if (v14 != 2)
      return result;
  }
  else
  {
    result = 0;
    if (v14 == 2 || ((v14 ^ v6) & 1) != 0)
      return result;
  }
  if (v7 != v15)
    return result;
  if (!v19)
  {
    if (!v17)
    {
      v30 = v11;
      v31 = v8;
      swift_retain();
      swift_retain();
      v8 = v31;
      v11 = v30;
      goto LABEL_33;
    }
    return 0;
  }
  if (!v17)
    return 0;
  if (v19 != v17)
  {
    v27 = v11;
    v28 = v8;
    swift_retain();
    swift_retain();
    v29 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
    swift_release();
    swift_release();
    v11 = v27;
    if ((v29 ^ 1) & 1 | (v28 != v16) | v43 & 1)
      return v27 & ~(v29 ^ 1 | (v28 != v16));
    return (v3 == v10) & ~v11;
  }
LABEL_33:
  v32 = v43;
  if (v8 == v16)
  {
    result = v11;
  }
  else
  {
    v32 = 1;
    result = 0;
  }
  if ((v32 & 1) == 0)
    return (v3 == v10) & ~v11;
  return result;
}

uint64_t specialized static ToolbarAppearanceKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  a2(&v6);
  v3 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v6);
  *a1 = v6;
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of ToolbarPlacement(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ToolbarPlacement(a2, a1);
  return a2;
}

uint64_t outlined init with copy of ToolbarPlacement.Storage(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ToolbarPlacement.Storage(a2, a1);
  return a2;
}

uint64_t outlined destroy of ToolbarPlacement.Storage(uint64_t a1)
{
  destroy for ToolbarPlacement.Storage();
  return a1;
}

uint64_t outlined destroy of ToolbarPlacement(uint64_t a1)
{
  destroy for ToolbarPlacement(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<AccessoryBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<AccessoryBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>;
  if (!lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<AccessoryBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<AccessoryBarAppearanceKey>, (uint64_t)&type metadata for AccessoryBarAppearanceKey, (uint64_t)&protocol witness table for AccessoryBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarAppearanceModifier.PreferenceValue);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarAppearanceModifier.PreferenceValue<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<AccessoryBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<WindowToolbarItemsAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<WindowToolbarItemsAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>;
  if (!lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<WindowToolbarItemsAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<WindowToolbarItemsAppearanceKey>, (uint64_t)&type metadata for WindowToolbarItemsAppearanceKey, (uint64_t)&protocol witness table for WindowToolbarItemsAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarAppearanceModifier.PreferenceValue);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarAppearanceModifier.PreferenceValue<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<WindowToolbarItemsAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<WindowToolbarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<WindowToolbarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>;
  if (!lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<WindowToolbarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<WindowToolbarAppearanceKey>, (uint64_t)&type metadata for WindowToolbarAppearanceKey, (uint64_t)&protocol witness table for WindowToolbarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarAppearanceModifier.PreferenceValue);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarAppearanceModifier.PreferenceValue<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<WindowToolbarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<BottomBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<BottomBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>;
  if (!lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<BottomBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<BottomBarAppearanceKey>, (uint64_t)&type metadata for BottomBarAppearanceKey, (uint64_t)&protocol witness table for BottomBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarAppearanceModifier.PreferenceValue);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarAppearanceModifier.PreferenceValue<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<BottomBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<TabBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<TabBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>;
  if (!lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<TabBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<TabBarAppearanceKey>, (uint64_t)&type metadata for TabBarAppearanceKey, (uint64_t)&protocol witness table for TabBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarAppearanceModifier.PreferenceValue);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarAppearanceModifier.PreferenceValue<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<TabBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<NavigationBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<NavigationBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>;
  if (!lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<NavigationBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<NavigationBarAppearanceKey>, (uint64_t)&type metadata for NavigationBarAppearanceKey, (uint64_t)&protocol witness table for NavigationBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarAppearanceModifier.PreferenceValue);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarAppearanceModifier.PreferenceValue<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<NavigationBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<BottomOrnamentAppearanceKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<BottomOrnamentAppearanceKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<BottomOrnamentAppearanceKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<BottomOrnamentAppearanceKey>, (uint64_t)&type metadata for BottomOrnamentAppearanceKey, (uint64_t)&protocol witness table for BottomOrnamentAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<BottomOrnamentAppearanceKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<AccessoryBarAppearanceKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessoryBarAppearanceKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessoryBarAppearanceKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<AccessoryBarAppearanceKey>, (uint64_t)&type metadata for AccessoryBarAppearanceKey, (uint64_t)&protocol witness table for AccessoryBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessoryBarAppearanceKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<WindowToolbarItemsAppearanceKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<WindowToolbarItemsAppearanceKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<WindowToolbarItemsAppearanceKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<WindowToolbarItemsAppearanceKey>, (uint64_t)&type metadata for WindowToolbarItemsAppearanceKey, (uint64_t)&protocol witness table for WindowToolbarItemsAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<WindowToolbarItemsAppearanceKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<WindowToolbarAppearanceKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<WindowToolbarAppearanceKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<WindowToolbarAppearanceKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<WindowToolbarAppearanceKey>, (uint64_t)&type metadata for WindowToolbarAppearanceKey, (uint64_t)&protocol witness table for WindowToolbarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<WindowToolbarAppearanceKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<BottomBarAppearanceKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<BottomBarAppearanceKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<BottomBarAppearanceKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<BottomBarAppearanceKey>, (uint64_t)&type metadata for BottomBarAppearanceKey, (uint64_t)&protocol witness table for BottomBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<BottomBarAppearanceKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<TabBarAppearanceKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<TabBarAppearanceKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<TabBarAppearanceKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<TabBarAppearanceKey>, (uint64_t)&type metadata for TabBarAppearanceKey, (uint64_t)&protocol witness table for TabBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<TabBarAppearanceKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<NavigationBarAppearanceKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<NavigationBarAppearanceKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<NavigationBarAppearanceKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<NavigationBarAppearanceKey>, (uint64_t)&type metadata for NavigationBarAppearanceKey, (uint64_t)&protocol witness table for NavigationBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<NavigationBarAppearanceKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ManagedBarAppearancesKey()
{
  return &type metadata for EnvironmentValues.ManagedBarAppearancesKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.HostingControllerManagedBarsKey()
{
  return &type metadata for EnvironmentValues.HostingControllerManagedBarsKey;
}

ValueMetadata *type metadata accessor for NavigationBarAppearanceKey()
{
  return &type metadata for NavigationBarAppearanceKey;
}

ValueMetadata *type metadata accessor for TabBarAppearanceKey()
{
  return &type metadata for TabBarAppearanceKey;
}

ValueMetadata *type metadata accessor for BottomBarAppearanceKey()
{
  return &type metadata for BottomBarAppearanceKey;
}

ValueMetadata *type metadata accessor for WindowToolbarAppearanceKey()
{
  return &type metadata for WindowToolbarAppearanceKey;
}

ValueMetadata *type metadata accessor for WindowToolbarItemsAppearanceKey()
{
  return &type metadata for WindowToolbarItemsAppearanceKey;
}

ValueMetadata *type metadata accessor for AccessoryBarAppearanceKey()
{
  return &type metadata for AccessoryBarAppearanceKey;
}

ValueMetadata *type metadata accessor for BottomOrnamentAppearanceKey()
{
  return &type metadata for BottomOrnamentAppearanceKey;
}

uint64_t storeEnumTagSinglePayload for ToolbarAppearanceModificationContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1874F0BE8 + 4 * byte_187C394A6[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1874F0C1C + 4 * byte_187C394A1[v4]))();
}

uint64_t sub_1874F0C1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874F0C24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1874F0C2CLL);
  return result;
}

uint64_t sub_1874F0C38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1874F0C40);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1874F0C44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874F0C4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarAppearanceModificationContext()
{
  return &type metadata for ToolbarAppearanceModificationContext;
}

unint64_t lazy protocol witness table accessor for type ToolbarAppearanceModificationContext and conformance ToolbarAppearanceModificationContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarAppearanceModificationContext and conformance ToolbarAppearanceModificationContext;
  if (!lazy protocol witness table cache variable for type ToolbarAppearanceModificationContext and conformance ToolbarAppearanceModificationContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarAppearanceModificationContext, &type metadata for ToolbarAppearanceModificationContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarAppearanceModificationContext and conformance ToolbarAppearanceModificationContext);
  }
  return result;
}

void base witness table accessor for _AttributeBody in ToolbarAppearanceModifier.PreferenceValue<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized static EnvironmentValues.ManagedBarAppearancesKey.defaultValue.getter()
{
  uint64_t inited;
  uint64_t v1;
  _QWORD v3[3];
  __int128 v4;
  _BYTE v5[40];
  uint64_t v6;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  *(_OWORD *)(inited + 48) = 0u;
  *(_QWORD *)(inited + 64) = 0;
  *(_OWORD *)(inited + 32) = 0u;
  v1 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  v6 = v1;
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    memset(v3, 0, sizeof(v3));
    v4 = xmmword_187C304D0;
    specialized Set._Variant.insert(_:)((uint64_t)v5, (uint64_t)v3);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v5);
    return v6;
  }
  return v1;
}

uint64_t sub_1874F0DAC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t AnimatedValueKeyframe.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AnimatedValueKeyframe.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*AnimatedValueKeyframe.value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AnimatedValueKeyframe.interpolation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = v4 + *(int *)(a1 + 28);
  v7 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters(0, *(_QWORD *)(a1 + 16), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6, v7);
}

uint64_t type metadata accessor for AnimatedValueKeyframe.InterpolationParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueKeyframe.InterpolationParameters);
}

uint64_t AnimatedValueKeyframe.interpolation.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = v4 + *(int *)(a2 + 28);
  v7 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters(0, *(_QWORD *)(a2 + 16), a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v6, a1, v7);
}

uint64_t (*AnimatedValueKeyframe.interpolation.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

__n128 AnimatedValueKeyframe.timingCurve.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  __n128 result;
  __int128 v6;

  v3 = v2 + *(int *)(a1 + 32);
  v4 = *(_BYTE *)(v3 + 32);
  result = *(__n128 *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 32) = v4;
  return result;
}

__n128 AnimatedValueKeyframe.timingCurve.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v3 = *(_BYTE *)(a1 + 32);
  v4 = v2 + *(int *)(a2 + 32);
  result = *(__n128 *)a1;
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 16) = v6;
  *(_BYTE *)(v4 + 32) = v3;
  return result;
}

uint64_t (*AnimatedValueKeyframe.timingCurve.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters.automatic.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static AnimatedValueKeyframe.InterpolationParameters.automatic.getter(a1, a2, a3, a4);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v6 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode(0, a1, a2, a3);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v16 - v12;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  return AnimatedValueKeyframe.InterpolationParameters.init(incoming:outgoing:)((uint64_t)v13, (uint64_t)v9, a1, v14, a4);
}

uint64_t type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueKeyframe.InterpolationParameters.Mode);
}

uint64_t AnimatedValueKeyframe.init(value:interpolation:incomingTimingCurve:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;

  v20 = *a3;
  v8 = *((_QWORD *)a3 + 2);
  v9 = *((_QWORD *)a3 + 3);
  v10 = *((_BYTE *)a3 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a5, a1, a4);
  v13 = type metadata accessor for AnimatedValueKeyframe(0, a4, v11, v12);
  v14 = a5 + *(int *)(v13 + 32);
  *(_OWORD *)v14 = v20;
  *(_QWORD *)(v14 + 16) = v8;
  *(_QWORD *)(v14 + 24) = v9;
  *(_BYTE *)(v14 + 32) = v10;
  v15 = a5 + *(int *)(v13 + 28);
  v18 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters(0, a4, v16, v17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, a2, v18);
}

uint64_t AnimatedValueKeyframe.InterpolationParameters.init(incoming:outgoing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v9 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode(0, a3, a3, a4);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v14(a5, a1, v9);
  v12 = a5 + *(int *)(type metadata accessor for AnimatedValueKeyframe.InterpolationParameters(0, a3, v10, v11) + 28);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v12, a2, v9);
}

uint64_t type metadata accessor for AnimatedValueKeyframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueKeyframe);
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters.kochanekBartels(tension:continuity:bias:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  uint64_t v27;

  v12 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode(0, a1, a2, a3);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v27 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (double *)((char *)&v27 - v23);
  *v24 = a5;
  v24[1] = a6;
  v24[2] = a7;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, double *, uint64_t))(v13 + 16))(v20, v24, v12);
  (*(void (**)(char *, double *, uint64_t))(v13 + 32))(v16, v24, v12);
  return AnimatedValueKeyframe.InterpolationParameters.init(incoming:outgoing:)((uint64_t)v20, (uint64_t)v16, a1, v25, a4);
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters.catmullRom.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;

  v6 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode(0, a1, a2, a3);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (uint64_t *)((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (uint64_t *)((char *)&v16 - v12);
  *v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  swift_storeEnumTagMultiPayload();
  *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  swift_storeEnumTagMultiPayload();
  return AnimatedValueKeyframe.InterpolationParameters.init(incoming:outgoing:)((uint64_t)v13, (uint64_t)v9, a1, v14, a4);
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters.linear.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static AnimatedValueKeyframe.InterpolationParameters.automatic.getter(a1, a2, a3, a4);
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters.asymmetric(incomingControlPoint:outgoingControlPoint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static AnimatedValueKeyframe.InterpolationParameters.asymmetric(incomingControlPoint:outgoingControlPoint:)(a1, a2, a3, 1, a4);
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters.asymmetric(incomingTangent:outgoingTangent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static AnimatedValueKeyframe.InterpolationParameters.asymmetric(incomingControlPoint:outgoingControlPoint:)(a1, a2, a3, 2, a4);
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters.asymmetric(incomingControlPoint:outgoingControlPoint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t, double);
  uint64_t v19;
  uint64_t v21;

  v9 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode(0, a3, a3, a4);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v21 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a3 - 8) + 16);
  v18((char *)&v21 - v16, a1, a3, v15);
  swift_storeEnumTagMultiPayload();
  ((void (*)(char *, uint64_t, uint64_t))v18)(v12, a2, a3);
  swift_storeEnumTagMultiPayload();
  return AnimatedValueKeyframe.InterpolationParameters.init(incoming:outgoing:)((uint64_t)v17, (uint64_t)v12, a3, v19, a5);
}

void static AnimatedValueKeyframe.InterpolationParameters.Mode<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t, double);
  char *v25;
  _QWORD v26[6];
  uint64_t v27;
  uint64_t v28;

  v27 = a1;
  v28 = a2;
  v4 = *(_QWORD *)(a3 - 8);
  v26[3] = a4;
  v26[4] = v4;
  MEMORY[0x1E0C80A78](a1, a2);
  v26[2] = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v26[1] = (char *)v26 - v8;
  v11 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode(0, v9, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  MEMORY[0x1E0C80A78](v14, v15);
  MEMORY[0x1E0C80A78](v16, v17);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v20 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v19);
  v23 = (char *)v26 + *(int *)(v22 + 48) - v21;
  v26[5] = v12;
  v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v24((char *)v26 - v21, v27, v11, v20);
  ((void (*)(char *, uint64_t, uint64_t))v24)(v23, v28, v11);
  v25 = (char *)sub_1874F15D0 + 4 * byte_187C39A80[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_1874F15D0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(double *, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  BOOL v10;

  v2(v5, v1, v0);
  v9 = v5[1];
  v8 = v5[2];
  if (swift_getEnumCaseMultiPayload())
  {
    v10 = 0;
  }
  else
  {
    v10 = *v5 == *v6 && v9 == v6[1] && v8 == v6[2];
    v4 = *(_QWORD *)(v7 - 120);
    v3 = v0;
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  return v10;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <A> AnimatedValueKeyframe<A>.InterpolationParameters.Mode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static AnimatedValueKeyframe.InterpolationParameters.Mode<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

void static AnimatedValueKeyframe.InterpolationParameters<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  static AnimatedValueKeyframe.InterpolationParameters.Mode<A>.== infix(_:_:)(a1, a2, a3, a4);
  if ((v10 & 1) != 0)
  {
    v11 = *(int *)(type metadata accessor for AnimatedValueKeyframe.InterpolationParameters(0, a3, v8, v9) + 28);
    static AnimatedValueKeyframe.InterpolationParameters.Mode<A>.== infix(_:_:)(a1 + v11, a2 + v11, a3, a4);
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <A> AnimatedValueKeyframe<A>.InterpolationParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static AnimatedValueKeyframe.InterpolationParameters<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t static AnimatedValueKeyframe<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (v10 = type metadata accessor for AnimatedValueKeyframe(0, a3, v8, v9),
        static AnimatedValueKeyframe.InterpolationParameters<A>.== infix(_:_:)(a1 + *(int *)(v10 + 28), a2 + *(int *)(v10 + 28), a3, a4), (v11 & 1) != 0))
  {
    v12 = static UnitCurve.== infix(_:_:)();
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> AnimatedValueKeyframe<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static AnimatedValueKeyframe<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t type metadata completion function for AnimatedValueKeyframe()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v0 = swift_checkMetadataState();
  v3 = v0;
  if (v4 <= 0x3F)
  {
    v3 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters(319, v0, v1, v2);
    if (v5 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v3;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatedValueKeyframe(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  void (*v17)(_QWORD);
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  unsigned int v24;
  char v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  _OWORD *v36;
  uint64_t v37;
  __int128 v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v8 & 0xF8 | 7;
  v10 = ~v9;
  if (v7 <= 0x18)
    v11 = 24;
  else
    v11 = *(_QWORD *)(v6 + 64);
  v12 = 1;
  if (v11 > 3)
  {
    v13 = 1;
    goto LABEL_13;
  }
  v14 = ((1 << (8 * v11)) + 1) >> (8 * v11);
  if (v14 > 0xFFFC)
  {
    v12 = 4;
  }
  else
  {
    if (v14 < 0xFD)
    {
      v12 = 1;
      v13 = 1;
      goto LABEL_13;
    }
    v12 = 2;
  }
  v15 = v14 > 0xFFFC;
  v13 = 2;
  if (v15)
    v13 = 4;
LABEL_13:
  v15 = (v8 & 0x1000F8) != 0
     || ((v11 + ((v7 + v9) & ~v9) + ((v11 + v12 + v9) & v10) + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 33 > 0x18;
  if (!v15)
  {
    v17 = *(void (**)(_QWORD))(v6 + 16);
    ((void (*)(uint64_t *, uint64_t *, _QWORD))v17)(a1, a2, *(_QWORD *)(a3 + 16));
    v18 = ((unint64_t)a2 + v7 + 7) & v10;
    if (v11 > 3)
      goto LABEL_22;
    v19 = ((1 << (8 * v11)) + 1) >> (8 * v11);
    if (v19 > 0xFFFC)
    {
      v20 = *(_DWORD *)(v18 + v11);
    }
    else
    {
      if (v19 <= 0xFC)
      {
LABEL_22:
        v20 = *(unsigned __int8 *)(v18 + v11);
        goto LABEL_25;
      }
      v20 = *(unsigned __int16 *)(v18 + v11);
    }
LABEL_25:
    v21 = ((unint64_t)v4 + v7 + 7) & v10;
    if (v20 >= 3)
    {
      if (v11 <= 3)
        v22 = v11;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v20 != 2)
    {
      if (v20 != 1)
      {
        v23 = *(_OWORD *)v18;
        *(_QWORD *)(v21 + 16) = *(_QWORD *)(v18 + 16);
        *(_OWORD *)v21 = v23;
        if (v11 > 3)
          goto LABEL_33;
        v24 = ((1 << (8 * v11)) + 1) >> (8 * v11);
        if (v24 > 0xFFFC)
        {
          *(_DWORD *)(v21 + v11) = 0;
        }
        else
        {
          if (v24 <= 0xFC)
          {
LABEL_33:
            *(_BYTE *)(v21 + v11) = 0;
            if (v11 > 3)
              goto LABEL_47;
LABEL_44:
            v27 = ((1 << (8 * v11)) + 1) >> (8 * v11);
            v28 = 2;
            if (v27 > 0xFFFC)
              v28 = 4;
            if (v27 <= 0xFC)
              goto LABEL_47;
LABEL_58:
            v29 = v28 + v11;
            v30 = v21 | 7;
            v31 = v30 + v29;
            v32 = v18 | 7;
            v33 = ((v18 | 7) + v29) & v10;
            if (v11 <= 3)
            {
              v34 = ((1 << (8 * v11)) + 1) >> (8 * v11);
              if (v34 > 0xFFFC)
              {
                v35 = *(_DWORD *)(v33 + v11);
              }
              else
              {
                if (v34 <= 0xFC)
                  goto LABEL_61;
                v35 = *(unsigned __int16 *)(v33 + v11);
              }
LABEL_64:
              v36 = (_OWORD *)(v31 & v10);
              if (v35 >= 3)
              {
                if (v11 <= 3)
                  v37 = v11;
                else
                  v37 = 4;
                __asm { BR              X12 }
              }
              if (v35 != 2)
              {
                if (v35 != 1)
                {
                  v38 = *(_OWORD *)v33;
                  *(_QWORD *)((v31 & v10) + 0x10) = *(_QWORD *)(v33 + 16);
                  *v36 = v38;
                  if (v11 <= 3)
                  {
                    v39 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                    if (v39 > 0xFFFC)
                    {
                      *(_DWORD *)((char *)v36 + v11) = 0;
                      v42 = 11;
                      goto LABEL_96;
                    }
                    if (v39 > 0xFC)
                    {
                      *(_WORD *)((char *)v36 + v11) = 0;
LABEL_95:
                      v42 = 9;
LABEL_96:
                      v15 = v39 > 0xFFFC;
                      v41 = 2;
                      if (v15)
                        v41 = 4;
                      goto LABEL_98;
                    }
                  }
                  *((_BYTE *)v36 + v11) = 0;
LABEL_81:
                  v41 = 1;
                  if (v11 > 3)
                  {
                    v42 = 8;
LABEL_98:
                    v43 = ((v11 + v42) & v10) + v11 + v41;
                    v44 = v30 + v43;
                    v45 = (v32 + v43) & 0xFFFFFFFFFFFFFFF8;
                    v46 = *(_OWORD *)v45;
                    v47 = *(_OWORD *)(v45 + 16);
                    v44 &= 0xFFFFFFFFFFFFFFF8;
                    *(_BYTE *)(v44 + 32) = *(_BYTE *)(v45 + 32);
                    *(_OWORD *)v44 = v46;
                    *(_OWORD *)(v44 + 16) = v47;
                    return v4;
                  }
                  v39 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                  if (v39 > 0xFFFC)
                  {
                    v42 = 11;
                    goto LABEL_96;
                  }
                  if (v39 < 0xFD)
                  {
                    v41 = 1;
                    v42 = 8;
                    goto LABEL_98;
                  }
                  goto LABEL_95;
                }
                v17(v36);
                if (v11 > 3)
                {
LABEL_80:
                  *((_BYTE *)v36 + v11) = 1;
                  goto LABEL_81;
                }
                v40 = 1;
                v39 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                if (v39 <= 0xFFFC)
                {
                  if (v39 <= 0xFC)
                    goto LABEL_80;
LABEL_94:
                  *(_WORD *)((char *)v36 + v11) = v40;
                  goto LABEL_95;
                }
LABEL_91:
                *(_DWORD *)((char *)v36 + v11) = v40;
                v42 = 11;
                goto LABEL_96;
              }
              v17(v36);
              if (v11 <= 3)
              {
                v39 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                if (v39 > 0xFFFC)
                {
                  v40 = 2;
                  goto LABEL_91;
                }
                if (v39 > 0xFC)
                {
                  LOWORD(v40) = 2;
                  goto LABEL_94;
                }
              }
              *((_BYTE *)v36 + v11) = 2;
              goto LABEL_81;
            }
LABEL_61:
            v35 = *(unsigned __int8 *)(v33 + v11);
            goto LABEL_64;
          }
          *(_WORD *)(v21 + v11) = 0;
        }
LABEL_56:
        v15 = v24 > 0xFFFC;
        v28 = 2;
        if (v15)
          v28 = 4;
        goto LABEL_58;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t))v17)(v21, v18, v5);
      if (v11 > 3)
        goto LABEL_42;
      v26 = 1;
      v24 = ((1 << (8 * v11)) + 1) >> (8 * v11);
      if (v24 <= 0xFFFC)
      {
        if (v24 <= 0xFC)
        {
LABEL_42:
          v25 = 1;
LABEL_43:
          *(_BYTE *)(v21 + v11) = v25;
          if (v11 > 3)
          {
LABEL_47:
            v28 = 1;
            goto LABEL_58;
          }
          goto LABEL_44;
        }
LABEL_55:
        *(_WORD *)(v21 + v11) = v26;
        goto LABEL_56;
      }
LABEL_52:
      *(_DWORD *)(v21 + v11) = v26;
      goto LABEL_56;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t))v17)(v21, v18, v5);
    if (v11 <= 3)
    {
      v24 = ((1 << (8 * v11)) + 1) >> (8 * v11);
      if (v24 > 0xFFFC)
      {
        v26 = 2;
        goto LABEL_52;
      }
      if (v24 > 0xFC)
      {
        LOWORD(v26) = 2;
        goto LABEL_55;
      }
    }
    v25 = 2;
    goto LABEL_43;
  }
  v16 = *a2;
  *v4 = *a2;
  v4 = (uint64_t *)(v16 + ((v9 + 16) & v10));
  swift_retain();
  return v4;
}

uint64_t destroy for AnimatedValueKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v19 = *(uint64_t (**)(void))(v4 + 8);
  ((void (*)(uint64_t, uint64_t))v19)(a1, v3);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  v7 = (v5 + a1 + v6) & ~v6;
  if (v5 <= 0x18)
    v8 = 24;
  else
    v8 = *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 > 3)
    goto LABEL_5;
  v11 = ((1 << v9) + 1) >> v9;
  if (v11 > 0xFFFC)
  {
    v10 = *(_DWORD *)(v7 + v8);
  }
  else
  {
    if (v11 <= 0xFC)
    {
LABEL_5:
      v10 = *(unsigned __int8 *)(v7 + v8);
      goto LABEL_10;
    }
    v10 = *(unsigned __int16 *)(v7 + v8);
  }
LABEL_10:
  if (v10 >= 3)
  {
    if (v8 <= 3)
      v12 = v8;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  if (v10 - 1 <= 1)
    ((void (*)(unint64_t, uint64_t))v19)(v7, v3);
  v13 = ~v6;
  if (v8 > 3)
  {
    v14 = v8 + v6;
LABEL_19:
    result = (v14 + v7 + 1) & v13;
    v16 = *(unsigned __int8 *)(result + v8);
    goto LABEL_24;
  }
  v17 = ((1 << v9) + 1) >> v9;
  if (v17 > 0xFFFC)
  {
    result = (v8 + v6 + v7 + 4) & v13;
    v16 = *(_DWORD *)(result + v8);
  }
  else
  {
    v14 = v8 + v6;
    if (v17 < 0xFD)
      goto LABEL_19;
    result = (v14 + v7 + 2) & v13;
    v16 = *(unsigned __int16 *)(result + v8);
  }
LABEL_24:
  if (v16 >= 3)
  {
    if (v8 <= 3)
      v18 = v8;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  if (v16 - 1 <= 1)
    return v19();
  return result;
}

__n128 initializeWithCopy for AnimatedValueKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unsigned int v21;
  char v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _OWORD *v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __n128 result;
  __int128 v47;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v10 = v8 + v9 + a1;
  v11 = v8 + v9 + a2;
  v12 = v11 & ~v9;
  if (v8 <= 0x18)
    v13 = 24;
  else
    v13 = v8;
  v14 = 8 * v13;
  if (v13 > 3)
    goto LABEL_7;
  v15 = ((1 << v14) + 1) >> v14;
  if (v15 > 0xFFFC)
  {
    v16 = *(_DWORD *)(v12 + v13);
  }
  else
  {
    if (v15 <= 0xFC)
    {
LABEL_7:
      v16 = *(unsigned __int8 *)(v12 + v13);
      goto LABEL_10;
    }
    v16 = *(unsigned __int16 *)(v12 + v13);
  }
LABEL_10:
  v17 = v10 & ~v9;
  if (v16 >= 3)
  {
    if (v13 <= 3)
      v18 = v13;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  v19 = ~v9;
  if (v16 == 2)
  {
    v7(v10 & ~v9, v11 & ~v9, v5);
    if (v13 <= 3)
    {
      v21 = ((1 << v14) + 1) >> v14;
      if (v21 > 0xFFFC)
      {
        v23 = 2;
        goto LABEL_37;
      }
      if (v21 > 0xFC)
      {
        LOWORD(v23) = 2;
        goto LABEL_40;
      }
    }
    v22 = 2;
    goto LABEL_28;
  }
  if (v16 == 1)
  {
    v7(v10 & ~v9, v11 & ~v9, v5);
    if (v13 > 3)
    {
LABEL_27:
      v22 = 1;
LABEL_28:
      *(_BYTE *)(v17 + v13) = v22;
      if (v13 > 3)
      {
LABEL_32:
        v25 = 1;
        goto LABEL_43;
      }
      goto LABEL_29;
    }
    v23 = 1;
    v21 = ((1 << v14) + 1) >> v14;
    if (v21 <= 0xFFFC)
    {
      if (v21 <= 0xFC)
        goto LABEL_27;
LABEL_40:
      *(_WORD *)(v17 + v13) = v23;
LABEL_41:
      v26 = v21 > 0xFFFC;
      v25 = 2;
      if (v26)
        v25 = 4;
      goto LABEL_43;
    }
LABEL_37:
    *(_DWORD *)(v17 + v13) = v23;
    goto LABEL_41;
  }
  v20 = *(_OWORD *)v12;
  *(_QWORD *)((v10 & ~v9) + 0x10) = *(_QWORD *)((v11 & ~v9) + 0x10);
  *(_OWORD *)v17 = v20;
  if (v13 > 3)
    goto LABEL_18;
  v21 = ((1 << v14) + 1) >> v14;
  if (v21 > 0xFFFC)
  {
    *(_DWORD *)(v17 + v13) = 0;
    goto LABEL_41;
  }
  if (v21 > 0xFC)
  {
    *(_WORD *)(v17 + v13) = 0;
    goto LABEL_41;
  }
LABEL_18:
  *(_BYTE *)(v17 + v13) = 0;
  if (v13 > 3)
    goto LABEL_32;
LABEL_29:
  v24 = ((1 << v14) + 1) >> v14;
  v25 = 2;
  if (v24 > 0xFFFC)
    v25 = 4;
  if (v24 <= 0xFC)
    goto LABEL_32;
LABEL_43:
  v27 = v25 + v13;
  v28 = (v10 | v9) + v27;
  v29 = ((v11 | v9) + v27) & v19;
  if (v13 > 3)
  {
LABEL_46:
    v31 = *(unsigned __int8 *)(v29 + v13);
    goto LABEL_49;
  }
  v30 = ((1 << v14) + 1) >> v14;
  if (v30 > 0xFFFC)
  {
    v31 = *(_DWORD *)(v29 + v13);
  }
  else
  {
    if (v30 <= 0xFC)
      goto LABEL_46;
    v31 = *(unsigned __int16 *)(v29 + v13);
  }
LABEL_49:
  v32 = (_OWORD *)(v28 & v19);
  if (v31 >= 3)
  {
    if (v13 <= 3)
      v33 = v13;
    else
      v33 = 4;
    __asm { BR              X12 }
  }
  if (v31 == 2)
  {
    ((void (*)(_OWORD *))v7)(v32);
    if (v13 <= 3)
    {
      v35 = ((1 << v14) + 1) >> v14;
      if (v35 > 0xFFFC)
      {
        v36 = 2;
        goto LABEL_76;
      }
      if (v35 > 0xFC)
      {
        LOWORD(v36) = 2;
        goto LABEL_79;
      }
    }
    *((_BYTE *)v32 + v13) = 2;
    goto LABEL_66;
  }
  if (v31 == 1)
  {
    ((void (*)(_OWORD *))v7)(v32);
    if (v13 > 3)
    {
LABEL_65:
      *((_BYTE *)v32 + v13) = 1;
      goto LABEL_66;
    }
    v36 = 1;
    v35 = ((1 << v14) + 1) >> v14;
    if (v35 <= 0xFFFC)
    {
      if (v35 <= 0xFC)
        goto LABEL_65;
LABEL_79:
      *(_WORD *)((char *)v32 + v13) = v36;
      goto LABEL_80;
    }
LABEL_76:
    *(_DWORD *)((char *)v32 + v13) = v36;
    goto LABEL_80;
  }
  v34 = *(_OWORD *)v29;
  *(_QWORD *)((v28 & v19) + 0x10) = *(_QWORD *)(v29 + 16);
  *v32 = v34;
  if (v13 <= 3)
  {
    v35 = ((1 << v14) + 1) >> v14;
    if (v35 > 0xFFFC)
    {
      *(_DWORD *)((char *)v32 + v13) = 0;
    }
    else
    {
      if (v35 <= 0xFC)
        goto LABEL_57;
      *(_WORD *)((char *)v32 + v13) = 0;
    }
LABEL_80:
    v37 = v35 + 3;
    v26 = v35 > 0xFFFC;
    v39 = 2;
    if (v26)
      v39 = 4;
    goto LABEL_82;
  }
LABEL_57:
  *((_BYTE *)v32 + v13) = 0;
LABEL_66:
  if (v13 > 3)
  {
    v37 = 4;
LABEL_71:
    v39 = 1;
    goto LABEL_82;
  }
  v38 = ((1 << v14) + 1) >> v14;
  v37 = v38 + 3;
  v39 = 2;
  if (v38 > 0xFFFC)
    v39 = 4;
  if (v38 <= 0xFC)
    goto LABEL_71;
LABEL_82:
  v40 = (v13 + v9 + v39) & v19;
  v41 = 4;
  if (v37 < 0x10000)
    v41 = 2;
  if (v37 < 0x100)
    v42 = 1;
  else
    v42 = v41;
  v43 = v42 + v13 + v40;
  v44 = (v17 | 7) + v43;
  v45 = ((v12 | 7) + v43) & 0xFFFFFFFFFFFFFFF8;
  result = *(__n128 *)v45;
  v47 = *(_OWORD *)(v45 + 16);
  v44 &= 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v44 + 32) = *(_BYTE *)(v45 + 32);
  *(__n128 *)v44 = result;
  *(_OWORD *)(v44 + 16) = v47;
  return result;
}

__n128 assignWithCopy for AnimatedValueKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  __int128 v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __n128 result;
  __int128 v55;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, a2, v5);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v9 = v7 + v8 + a1;
  v10 = ~v8;
  v11 = v9 & ~v8;
  v12 = v7 + v8 + a2;
  v13 = v12 & ~v8;
  if (v7 <= 0x18)
    v14 = 24;
  else
    v14 = *(_QWORD *)(v6 + 64);
  if (v11 == v13)
  {
LABEL_45:
    if (v14 <= 3)
      goto LABEL_55;
    goto LABEL_46;
  }
  v15 = 8 * v14;
  if (v14 > 3)
    goto LABEL_8;
  v16 = ((1 << v15) + 1) >> v15;
  if (v16 <= 0xFFFC)
  {
    if (v16 > 0xFC)
    {
      v17 = *(unsigned __int16 *)(v11 + v14);
      if (v17 < 3)
        goto LABEL_17;
      goto LABEL_13;
    }
LABEL_8:
    v17 = *(unsigned __int8 *)(v11 + v14);
    if (v17 < 3)
      goto LABEL_17;
LABEL_13:
    if (v14 <= 3)
      v18 = v14;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  v17 = *(_DWORD *)(v11 + v14);
  if (v17 >= 3)
    goto LABEL_13;
LABEL_17:
  if (v17 - 1 <= 1)
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9 & ~v8, v5);
  if (v14 > 3)
    goto LABEL_22;
  v19 = ((1 << v15) + 1) >> v15;
  if (v19 <= 0xFFFC)
  {
    if (v19 > 0xFC)
    {
      v20 = *(unsigned __int16 *)(v13 + v14);
      if (v20 < 3)
        goto LABEL_31;
      goto LABEL_27;
    }
LABEL_22:
    v20 = *(unsigned __int8 *)(v13 + v14);
    if (v20 < 3)
      goto LABEL_31;
LABEL_27:
    if (v14 <= 3)
      v21 = v14;
    else
      v21 = 4;
    __asm { BR              X12 }
  }
  v20 = *(_DWORD *)(v13 + v14);
  if (v20 >= 3)
    goto LABEL_27;
LABEL_31:
  if (v20 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9 & ~v8, v12 & ~v8, v5);
    if (v14 <= 3)
    {
      v23 = ((1 << v15) + 1) >> v15;
      if (v23 > 0xFFFC)
      {
        v24 = 2;
        goto LABEL_51;
      }
      if (v23 > 0xFC)
      {
        LOWORD(v24) = 2;
        goto LABEL_54;
      }
    }
    *(_BYTE *)(v11 + v14) = 2;
    if (v14 <= 3)
      goto LABEL_55;
LABEL_46:
    v26 = 1;
LABEL_58:
    v29 = 1;
    goto LABEL_59;
  }
  if (v20 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9 & ~v8, v12 & ~v8, v5);
    if (v14 > 3)
    {
LABEL_44:
      *(_BYTE *)(v11 + v14) = 1;
      goto LABEL_45;
    }
    v24 = 1;
    v25 = ((1 << v15) + 1) >> v15;
    if (v25 <= 0xFFFC)
    {
      if (v25 <= 0xFC)
        goto LABEL_44;
LABEL_54:
      *(_WORD *)(v11 + v14) = v24;
      goto LABEL_55;
    }
LABEL_51:
    *(_DWORD *)(v11 + v14) = v24;
    goto LABEL_55;
  }
  v22 = *(_OWORD *)v13;
  *(_QWORD *)((v9 & ~v8) + 0x10) = *(_QWORD *)((v12 & ~v8) + 0x10);
  *(_OWORD *)v11 = v22;
  if (v14 <= 3)
  {
    v27 = ((1 << v15) + 1) >> v15;
    if (v27 > 0xFFFC)
    {
      *(_DWORD *)(v11 + v14) = 0;
      goto LABEL_55;
    }
    if (v27 > 0xFC)
    {
      *(_WORD *)(v11 + v14) = 0;
      goto LABEL_55;
    }
  }
  *(_BYTE *)(v11 + v14) = 0;
  if (v14 > 3)
    goto LABEL_46;
LABEL_55:
  v26 = 0;
  v28 = ((1 << (8 * v14)) + 1) >> (8 * v14);
  v29 = 2;
  if (v28 > 0xFFFC)
    v29 = 4;
  if (v28 <= 0xFC)
    goto LABEL_58;
LABEL_59:
  v30 = v29 + v14;
  v31 = ((v9 | v8) + v30) & v10;
  v32 = ((v12 | v8) + v30) & v10;
  v33 = 8 * v14;
  if (v31 == v32)
    goto LABEL_100;
  if ((v26 & 1) != 0)
    goto LABEL_63;
  v34 = ((1 << v33) + 1) >> v33;
  if (v34 <= 0xFFFC)
  {
    if (v34 > 0xFC)
    {
      v35 = *(unsigned __int16 *)(v31 + v14);
      if (v35 < 3)
        goto LABEL_72;
      goto LABEL_68;
    }
LABEL_63:
    v35 = *(unsigned __int8 *)(v31 + v14);
    if (v35 < 3)
      goto LABEL_72;
LABEL_68:
    if (v26)
      v36 = 4;
    else
      v36 = v14;
    __asm { BR              X12 }
  }
  v35 = *(_DWORD *)(v31 + v14);
  if (v35 >= 3)
    goto LABEL_68;
LABEL_72:
  if (v35 - 1 <= 1)
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v31, v5);
  if ((v26 & 1) != 0)
    goto LABEL_77;
  v37 = ((1 << v33) + 1) >> v33;
  if (v37 <= 0xFFFC)
  {
    if (v37 > 0xFC)
    {
      v38 = *(unsigned __int16 *)(v32 + v14);
      if (v38 < 3)
        goto LABEL_86;
      goto LABEL_82;
    }
LABEL_77:
    v38 = *(unsigned __int8 *)(v32 + v14);
    if (v38 < 3)
      goto LABEL_86;
LABEL_82:
    if (v26)
      v39 = 4;
    else
      v39 = v14;
    __asm { BR              X12 }
  }
  v38 = *(_DWORD *)(v32 + v14);
  if (v38 >= 3)
    goto LABEL_82;
LABEL_86:
  if (v38 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v31, v32, v5);
    if ((v26 & 1) == 0)
    {
      v41 = ((1 << v33) + 1) >> v33;
      if (v41 > 0xFFFC)
      {
        v42 = 2;
        goto LABEL_111;
      }
      if (v41 > 0xFC)
      {
        LOWORD(v42) = 2;
        goto LABEL_114;
      }
    }
    *(_BYTE *)(v31 + v14) = 2;
    if ((v26 & 1) == 0)
    {
LABEL_102:
      v44 = ((1 << v33) + 1) >> v33;
      v43 = v44 + 3;
      v45 = 2;
      if (v44 > 0xFFFC)
        v45 = 4;
      if (v44 > 0xFC)
      {
        v46 = ~v8;
        goto LABEL_117;
      }
      goto LABEL_106;
    }
LABEL_101:
    v43 = 4;
LABEL_106:
    v46 = ~v8;
    v45 = 1;
    goto LABEL_117;
  }
  if (v38 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v31, v32, v5);
    if ((v26 & 1) != 0)
    {
LABEL_99:
      *(_BYTE *)(v31 + v14) = 1;
LABEL_100:
      if ((v26 & 1) == 0)
        goto LABEL_102;
      goto LABEL_101;
    }
    v42 = 1;
    v41 = ((1 << v33) + 1) >> v33;
    if (v41 <= 0xFFFC)
    {
      if (v41 <= 0xFC)
        goto LABEL_99;
LABEL_114:
      *(_WORD *)(v31 + v14) = v42;
      goto LABEL_115;
    }
LABEL_111:
    *(_DWORD *)(v31 + v14) = v42;
    goto LABEL_115;
  }
  v40 = *(_OWORD *)v32;
  *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
  *(_OWORD *)v31 = v40;
  if ((v26 & 1) != 0)
    goto LABEL_89;
  v41 = ((1 << v33) + 1) >> v33;
  if (v41 > 0xFFFC)
  {
    *(_DWORD *)(v31 + v14) = 0;
  }
  else
  {
    if (v41 <= 0xFC)
    {
LABEL_89:
      *(_BYTE *)(v31 + v14) = 0;
      if ((v26 & 1) == 0)
        goto LABEL_102;
      goto LABEL_101;
    }
    *(_WORD *)(v31 + v14) = 0;
  }
LABEL_115:
  v46 = ~v8;
  v43 = v41 + 3;
  v47 = v41 > 0xFFFC;
  v45 = 2;
  if (v47)
    v45 = 4;
LABEL_117:
  v48 = (v14 + v8 + v45) & v46;
  v49 = 4;
  if (v43 < 0x10000)
    v49 = 2;
  if (v43 < 0x100)
    v50 = 1;
  else
    v50 = v49;
  v51 = v50 + v14 + v48;
  v52 = (v11 | 7) + v51;
  v53 = ((v13 | 7) + v51) & 0xFFFFFFFFFFFFFFF8;
  result = *(__n128 *)v53;
  v55 = *(_OWORD *)(v53 + 16);
  v52 &= 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v52 + 32) = *(_BYTE *)(v53 + 32);
  *(__n128 *)v52 = result;
  *(_OWORD *)(v52 + 16) = v55;
  return result;
}

__n128 initializeWithTake for AnimatedValueKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unsigned int v21;
  char v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _OWORD *v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __n128 result;
  __int128 v47;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v10 = v8 + v9 + a1;
  v11 = v8 + v9 + a2;
  v12 = v11 & ~v9;
  if (v8 <= 0x18)
    v13 = 24;
  else
    v13 = v8;
  v14 = 8 * v13;
  if (v13 > 3)
    goto LABEL_7;
  v15 = ((1 << v14) + 1) >> v14;
  if (v15 > 0xFFFC)
  {
    v16 = *(_DWORD *)(v12 + v13);
  }
  else
  {
    if (v15 <= 0xFC)
    {
LABEL_7:
      v16 = *(unsigned __int8 *)(v12 + v13);
      goto LABEL_10;
    }
    v16 = *(unsigned __int16 *)(v12 + v13);
  }
LABEL_10:
  v17 = v10 & ~v9;
  if (v16 >= 3)
  {
    if (v13 <= 3)
      v18 = v13;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  v19 = ~v9;
  if (v16 == 2)
  {
    v7(v10 & ~v9, v11 & ~v9, v5);
    if (v13 <= 3)
    {
      v21 = ((1 << v14) + 1) >> v14;
      if (v21 > 0xFFFC)
      {
        v23 = 2;
        goto LABEL_37;
      }
      if (v21 > 0xFC)
      {
        LOWORD(v23) = 2;
        goto LABEL_40;
      }
    }
    v22 = 2;
    goto LABEL_28;
  }
  if (v16 == 1)
  {
    v7(v10 & ~v9, v11 & ~v9, v5);
    if (v13 > 3)
    {
LABEL_27:
      v22 = 1;
LABEL_28:
      *(_BYTE *)(v17 + v13) = v22;
      if (v13 > 3)
      {
LABEL_32:
        v25 = 1;
        goto LABEL_43;
      }
      goto LABEL_29;
    }
    v23 = 1;
    v21 = ((1 << v14) + 1) >> v14;
    if (v21 <= 0xFFFC)
    {
      if (v21 <= 0xFC)
        goto LABEL_27;
LABEL_40:
      *(_WORD *)(v17 + v13) = v23;
LABEL_41:
      v26 = v21 > 0xFFFC;
      v25 = 2;
      if (v26)
        v25 = 4;
      goto LABEL_43;
    }
LABEL_37:
    *(_DWORD *)(v17 + v13) = v23;
    goto LABEL_41;
  }
  v20 = *(_OWORD *)v12;
  *(_QWORD *)((v10 & ~v9) + 0x10) = *(_QWORD *)((v11 & ~v9) + 0x10);
  *(_OWORD *)v17 = v20;
  if (v13 > 3)
    goto LABEL_18;
  v21 = ((1 << v14) + 1) >> v14;
  if (v21 > 0xFFFC)
  {
    *(_DWORD *)(v17 + v13) = 0;
    goto LABEL_41;
  }
  if (v21 > 0xFC)
  {
    *(_WORD *)(v17 + v13) = 0;
    goto LABEL_41;
  }
LABEL_18:
  *(_BYTE *)(v17 + v13) = 0;
  if (v13 > 3)
    goto LABEL_32;
LABEL_29:
  v24 = ((1 << v14) + 1) >> v14;
  v25 = 2;
  if (v24 > 0xFFFC)
    v25 = 4;
  if (v24 <= 0xFC)
    goto LABEL_32;
LABEL_43:
  v27 = v25 + v13;
  v28 = (v10 | v9) + v27;
  v29 = ((v11 | v9) + v27) & v19;
  if (v13 > 3)
  {
LABEL_46:
    v31 = *(unsigned __int8 *)(v29 + v13);
    goto LABEL_49;
  }
  v30 = ((1 << v14) + 1) >> v14;
  if (v30 > 0xFFFC)
  {
    v31 = *(_DWORD *)(v29 + v13);
  }
  else
  {
    if (v30 <= 0xFC)
      goto LABEL_46;
    v31 = *(unsigned __int16 *)(v29 + v13);
  }
LABEL_49:
  v32 = (_OWORD *)(v28 & v19);
  if (v31 >= 3)
  {
    if (v13 <= 3)
      v33 = v13;
    else
      v33 = 4;
    __asm { BR              X12 }
  }
  if (v31 == 2)
  {
    ((void (*)(_OWORD *))v7)(v32);
    if (v13 <= 3)
    {
      v35 = ((1 << v14) + 1) >> v14;
      if (v35 > 0xFFFC)
      {
        v36 = 2;
        goto LABEL_76;
      }
      if (v35 > 0xFC)
      {
        LOWORD(v36) = 2;
        goto LABEL_79;
      }
    }
    *((_BYTE *)v32 + v13) = 2;
    goto LABEL_66;
  }
  if (v31 == 1)
  {
    ((void (*)(_OWORD *))v7)(v32);
    if (v13 > 3)
    {
LABEL_65:
      *((_BYTE *)v32 + v13) = 1;
      goto LABEL_66;
    }
    v36 = 1;
    v35 = ((1 << v14) + 1) >> v14;
    if (v35 <= 0xFFFC)
    {
      if (v35 <= 0xFC)
        goto LABEL_65;
LABEL_79:
      *(_WORD *)((char *)v32 + v13) = v36;
      goto LABEL_80;
    }
LABEL_76:
    *(_DWORD *)((char *)v32 + v13) = v36;
    goto LABEL_80;
  }
  v34 = *(_OWORD *)v29;
  *(_QWORD *)((v28 & v19) + 0x10) = *(_QWORD *)(v29 + 16);
  *v32 = v34;
  if (v13 <= 3)
  {
    v35 = ((1 << v14) + 1) >> v14;
    if (v35 > 0xFFFC)
    {
      *(_DWORD *)((char *)v32 + v13) = 0;
    }
    else
    {
      if (v35 <= 0xFC)
        goto LABEL_57;
      *(_WORD *)((char *)v32 + v13) = 0;
    }
LABEL_80:
    v37 = v35 + 3;
    v26 = v35 > 0xFFFC;
    v39 = 2;
    if (v26)
      v39 = 4;
    goto LABEL_82;
  }
LABEL_57:
  *((_BYTE *)v32 + v13) = 0;
LABEL_66:
  if (v13 > 3)
  {
    v37 = 4;
LABEL_71:
    v39 = 1;
    goto LABEL_82;
  }
  v38 = ((1 << v14) + 1) >> v14;
  v37 = v38 + 3;
  v39 = 2;
  if (v38 > 0xFFFC)
    v39 = 4;
  if (v38 <= 0xFC)
    goto LABEL_71;
LABEL_82:
  v40 = (v13 + v9 + v39) & v19;
  v41 = 4;
  if (v37 < 0x10000)
    v41 = 2;
  if (v37 < 0x100)
    v42 = 1;
  else
    v42 = v41;
  v43 = v42 + v13 + v40;
  v44 = (v17 | 7) + v43;
  v45 = ((v12 | 7) + v43) & 0xFFFFFFFFFFFFFFF8;
  result = *(__n128 *)v45;
  v47 = *(_OWORD *)(v45 + 16);
  v44 &= 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v44 + 32) = *(_BYTE *)(v45 + 32);
  *(__n128 *)v44 = result;
  *(_OWORD *)(v44 + 16) = v47;
  return result;
}

__n128 assignWithTake for AnimatedValueKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  __int128 v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __n128 result;
  __int128 v55;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(a1, a2, v5);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v9 = v7 + v8 + a1;
  v10 = ~v8;
  v11 = v9 & ~v8;
  v12 = v7 + v8 + a2;
  v13 = v12 & ~v8;
  if (v7 <= 0x18)
    v14 = 24;
  else
    v14 = *(_QWORD *)(v6 + 64);
  if (v11 == v13)
  {
LABEL_45:
    if (v14 <= 3)
      goto LABEL_55;
    goto LABEL_46;
  }
  v15 = 8 * v14;
  if (v14 > 3)
    goto LABEL_8;
  v16 = ((1 << v15) + 1) >> v15;
  if (v16 <= 0xFFFC)
  {
    if (v16 > 0xFC)
    {
      v17 = *(unsigned __int16 *)(v11 + v14);
      if (v17 < 3)
        goto LABEL_17;
      goto LABEL_13;
    }
LABEL_8:
    v17 = *(unsigned __int8 *)(v11 + v14);
    if (v17 < 3)
      goto LABEL_17;
LABEL_13:
    if (v14 <= 3)
      v18 = v14;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  v17 = *(_DWORD *)(v11 + v14);
  if (v17 >= 3)
    goto LABEL_13;
LABEL_17:
  if (v17 - 1 <= 1)
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9 & ~v8, v5);
  if (v14 > 3)
    goto LABEL_22;
  v19 = ((1 << v15) + 1) >> v15;
  if (v19 <= 0xFFFC)
  {
    if (v19 > 0xFC)
    {
      v20 = *(unsigned __int16 *)(v13 + v14);
      if (v20 < 3)
        goto LABEL_31;
      goto LABEL_27;
    }
LABEL_22:
    v20 = *(unsigned __int8 *)(v13 + v14);
    if (v20 < 3)
      goto LABEL_31;
LABEL_27:
    if (v14 <= 3)
      v21 = v14;
    else
      v21 = 4;
    __asm { BR              X12 }
  }
  v20 = *(_DWORD *)(v13 + v14);
  if (v20 >= 3)
    goto LABEL_27;
LABEL_31:
  if (v20 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9 & ~v8, v12 & ~v8, v5);
    if (v14 <= 3)
    {
      v23 = ((1 << v15) + 1) >> v15;
      if (v23 > 0xFFFC)
      {
        v24 = 2;
        goto LABEL_51;
      }
      if (v23 > 0xFC)
      {
        LOWORD(v24) = 2;
        goto LABEL_54;
      }
    }
    *(_BYTE *)(v11 + v14) = 2;
    if (v14 <= 3)
      goto LABEL_55;
LABEL_46:
    v26 = 1;
LABEL_58:
    v29 = 1;
    goto LABEL_59;
  }
  if (v20 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9 & ~v8, v12 & ~v8, v5);
    if (v14 > 3)
    {
LABEL_44:
      *(_BYTE *)(v11 + v14) = 1;
      goto LABEL_45;
    }
    v24 = 1;
    v25 = ((1 << v15) + 1) >> v15;
    if (v25 <= 0xFFFC)
    {
      if (v25 <= 0xFC)
        goto LABEL_44;
LABEL_54:
      *(_WORD *)(v11 + v14) = v24;
      goto LABEL_55;
    }
LABEL_51:
    *(_DWORD *)(v11 + v14) = v24;
    goto LABEL_55;
  }
  v22 = *(_OWORD *)v13;
  *(_QWORD *)((v9 & ~v8) + 0x10) = *(_QWORD *)((v12 & ~v8) + 0x10);
  *(_OWORD *)v11 = v22;
  if (v14 <= 3)
  {
    v27 = ((1 << v15) + 1) >> v15;
    if (v27 > 0xFFFC)
    {
      *(_DWORD *)(v11 + v14) = 0;
      goto LABEL_55;
    }
    if (v27 > 0xFC)
    {
      *(_WORD *)(v11 + v14) = 0;
      goto LABEL_55;
    }
  }
  *(_BYTE *)(v11 + v14) = 0;
  if (v14 > 3)
    goto LABEL_46;
LABEL_55:
  v26 = 0;
  v28 = ((1 << (8 * v14)) + 1) >> (8 * v14);
  v29 = 2;
  if (v28 > 0xFFFC)
    v29 = 4;
  if (v28 <= 0xFC)
    goto LABEL_58;
LABEL_59:
  v30 = v29 + v14;
  v31 = ((v9 | v8) + v30) & v10;
  v32 = ((v12 | v8) + v30) & v10;
  v33 = 8 * v14;
  if (v31 == v32)
    goto LABEL_100;
  if ((v26 & 1) != 0)
    goto LABEL_63;
  v34 = ((1 << v33) + 1) >> v33;
  if (v34 <= 0xFFFC)
  {
    if (v34 > 0xFC)
    {
      v35 = *(unsigned __int16 *)(v31 + v14);
      if (v35 < 3)
        goto LABEL_72;
      goto LABEL_68;
    }
LABEL_63:
    v35 = *(unsigned __int8 *)(v31 + v14);
    if (v35 < 3)
      goto LABEL_72;
LABEL_68:
    if (v26)
      v36 = 4;
    else
      v36 = v14;
    __asm { BR              X12 }
  }
  v35 = *(_DWORD *)(v31 + v14);
  if (v35 >= 3)
    goto LABEL_68;
LABEL_72:
  if (v35 - 1 <= 1)
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v31, v5);
  if ((v26 & 1) != 0)
    goto LABEL_77;
  v37 = ((1 << v33) + 1) >> v33;
  if (v37 <= 0xFFFC)
  {
    if (v37 > 0xFC)
    {
      v38 = *(unsigned __int16 *)(v32 + v14);
      if (v38 < 3)
        goto LABEL_86;
      goto LABEL_82;
    }
LABEL_77:
    v38 = *(unsigned __int8 *)(v32 + v14);
    if (v38 < 3)
      goto LABEL_86;
LABEL_82:
    if (v26)
      v39 = 4;
    else
      v39 = v14;
    __asm { BR              X12 }
  }
  v38 = *(_DWORD *)(v32 + v14);
  if (v38 >= 3)
    goto LABEL_82;
LABEL_86:
  if (v38 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v31, v32, v5);
    if ((v26 & 1) == 0)
    {
      v41 = ((1 << v33) + 1) >> v33;
      if (v41 > 0xFFFC)
      {
        v42 = 2;
        goto LABEL_111;
      }
      if (v41 > 0xFC)
      {
        LOWORD(v42) = 2;
        goto LABEL_114;
      }
    }
    *(_BYTE *)(v31 + v14) = 2;
    if ((v26 & 1) == 0)
    {
LABEL_102:
      v44 = ((1 << v33) + 1) >> v33;
      v43 = v44 + 3;
      v45 = 2;
      if (v44 > 0xFFFC)
        v45 = 4;
      if (v44 > 0xFC)
      {
        v46 = ~v8;
        goto LABEL_117;
      }
      goto LABEL_106;
    }
LABEL_101:
    v43 = 4;
LABEL_106:
    v46 = ~v8;
    v45 = 1;
    goto LABEL_117;
  }
  if (v38 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v31, v32, v5);
    if ((v26 & 1) != 0)
    {
LABEL_99:
      *(_BYTE *)(v31 + v14) = 1;
LABEL_100:
      if ((v26 & 1) == 0)
        goto LABEL_102;
      goto LABEL_101;
    }
    v42 = 1;
    v41 = ((1 << v33) + 1) >> v33;
    if (v41 <= 0xFFFC)
    {
      if (v41 <= 0xFC)
        goto LABEL_99;
LABEL_114:
      *(_WORD *)(v31 + v14) = v42;
      goto LABEL_115;
    }
LABEL_111:
    *(_DWORD *)(v31 + v14) = v42;
    goto LABEL_115;
  }
  v40 = *(_OWORD *)v32;
  *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
  *(_OWORD *)v31 = v40;
  if ((v26 & 1) != 0)
    goto LABEL_89;
  v41 = ((1 << v33) + 1) >> v33;
  if (v41 > 0xFFFC)
  {
    *(_DWORD *)(v31 + v14) = 0;
  }
  else
  {
    if (v41 <= 0xFC)
    {
LABEL_89:
      *(_BYTE *)(v31 + v14) = 0;
      if ((v26 & 1) == 0)
        goto LABEL_102;
      goto LABEL_101;
    }
    *(_WORD *)(v31 + v14) = 0;
  }
LABEL_115:
  v46 = ~v8;
  v43 = v41 + 3;
  v47 = v41 > 0xFFFC;
  v45 = 2;
  if (v47)
    v45 = 4;
LABEL_117:
  v48 = (v14 + v8 + v45) & v46;
  v49 = 4;
  if (v43 < 0x10000)
    v49 = 2;
  if (v43 < 0x100)
    v50 = 1;
  else
    v50 = v49;
  v51 = v50 + v14 + v48;
  v52 = (v11 | 7) + v51;
  v53 = ((v13 | 7) + v51) & 0xFFFFFFFFFFFFFFF8;
  result = *(__n128 *)v53;
  v55 = *(_OWORD *)(v53 + 16);
  v52 &= 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v52 + 32) = *(_BYTE *)(v53 + 32);
  *(__n128 *)v52 = result;
  *(_OWORD *)(v52 + 16) = v55;
  return result;
}

uint64_t getEnumTagSinglePayload for AnimatedValueKeyframe(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  unsigned int v11;
  int v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v29;
  char v30;
  unsigned int v31;
  int v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  char v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  char v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  char v60;
  unsigned int v61;
  int v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  char v68;
  int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  char v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  BOOL v78;
  unsigned int v79;
  uint64_t v80;
  char v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  char v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  char v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = 24;
  if (v6 > 0x18)
    v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 > 3)
  {
    v9 = 4;
LABEL_5:
    v10 = 8;
    goto LABEL_6;
  }
  v15 = ((1 << v8) + 1) >> v8;
  if (v15 > 0xFFFC)
  {
LABEL_15:
    v11 = 0x7FFFFFFF;
    if (v7 > 3)
      goto LABEL_8;
    goto LABEL_16;
  }
  v9 = v15 + 3;
  if (v15 <= 0xFC)
    goto LABEL_5;
  v10 = 16;
LABEL_6:
  v11 = (1 << v10) - v9;
  if ((v11 & 0x80000000) != 0)
    goto LABEL_15;
  if (v7 > 3)
  {
LABEL_8:
    v12 = 4;
    goto LABEL_9;
  }
LABEL_16:
  v16 = ((1 << v8) + 1) >> v8;
  if (v16 <= 0xFFFC)
  {
    v12 = v16 + 3;
    if (v16 > 0xFC)
    {
      v13 = 16;
LABEL_10:
      v14 = (1 << v13) - v12;
      if ((v14 & 0x80000000) == 0)
        goto LABEL_20;
      goto LABEL_19;
    }
LABEL_9:
    v13 = 8;
    goto LABEL_10;
  }
LABEL_19:
  v14 = 0x7FFFFFFF;
LABEL_20:
  if (v14 > v11)
    v11 = v14;
  if (v11 <= v5)
    v17 = *(_DWORD *)(v4 + 84);
  else
    v17 = v11;
  v18 = 1;
  if (v7 <= 3)
  {
    v20 = ((1 << v8) + 1) >> v8;
    if (v20 > 0xFFFC)
    {
      v18 = 4;
    }
    else
    {
      if (v20 < 0xFD)
      {
        v18 = 1;
        v19 = 1;
        if (!a2)
          return 0;
        goto LABEL_37;
      }
      v18 = 2;
    }
    v19 = 4;
    if (v20 <= 0xFFFC)
      v19 = 2;
    if (!a2)
      return 0;
    goto LABEL_37;
  }
  v19 = 1;
  if (!a2)
    return 0;
LABEL_37:
  v21 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  v22 = ~v21;
  if (v17 < a2)
  {
    v23 = ((v7 + ((v6 + v21) & ~(_DWORD)v21) + ((v7 + v18 + v21) & v22) + v19 + 7) & 0xFFFFFFF8) + 33;
    v24 = (a2 - v17 + 255) >> (8 * v23);
    if (v23 < 4)
      v25 = v24 + 1;
    else
      v25 = 2;
    if (v25 >= 0x10000)
      v26 = 4;
    else
      v26 = 2;
    if (v25 < 0x100)
      v26 = 1;
    if (v25 >= 2)
      v27 = v26;
    else
      v27 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1874F3EFC + 4 * word_187C39AD6[v27]))();
  }
  if (!v17)
    return 0;
  if (v7 > 3)
  {
    v29 = 4;
LABEL_53:
    v30 = 8;
    goto LABEL_54;
  }
  v35 = ((1 << v8) + 1) >> v8;
  if (v35 > 0xFFFC)
  {
LABEL_63:
    v31 = 0x7FFFFFFF;
    if (v7 > 3)
      goto LABEL_56;
    goto LABEL_64;
  }
  v29 = v35 + 3;
  if (v35 <= 0xFC)
    goto LABEL_53;
  v30 = 16;
LABEL_54:
  v31 = (1 << v30) - v29;
  if ((v31 & 0x80000000) != 0)
    goto LABEL_63;
  if (v7 > 3)
  {
LABEL_56:
    v32 = 4;
    goto LABEL_57;
  }
LABEL_64:
  v36 = ((1 << v8) + 1) >> v8;
  if (v36 <= 0xFFFC)
  {
    v32 = v36 + 3;
    if (v36 > 0xFC)
    {
      v33 = 16;
LABEL_58:
      v34 = (1 << v33) - v32;
      if ((v34 & 0x80000000) == 0)
        goto LABEL_68;
      goto LABEL_67;
    }
LABEL_57:
    v33 = 8;
    goto LABEL_58;
  }
LABEL_67:
  v34 = 0x7FFFFFFF;
LABEL_68:
  if (v34 > v31)
    v31 = v34;
  if (v31 <= v5)
    v37 = *(_DWORD *)(v4 + 84);
  else
    v37 = v31;
  if (v5 >= v31)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v38 = v6 + a1;
  if (v7 > 3)
  {
    v39 = 4;
    goto LABEL_76;
  }
  v42 = ((1 << v8) + 1) >> v8;
  if (v42 <= 0xFFFC)
  {
    v39 = v42 + 3;
    if (v42 > 0xFC)
    {
      v40 = 16;
LABEL_77:
      v41 = (1 << v40) - v39;
      if ((v41 & 0x80000000) == 0)
        goto LABEL_84;
      goto LABEL_83;
    }
LABEL_76:
    v40 = 8;
    goto LABEL_77;
  }
LABEL_83:
  v41 = 0x7FFFFFFF;
LABEL_84:
  v43 = v38 + v21;
  if (v7 > 3)
  {
    v44 = 4;
    goto LABEL_86;
  }
  v47 = ((1 << v8) + 1) >> v8;
  if (v47 <= 0xFFFC)
  {
    v44 = v47 + 3;
    if (v47 > 0xFC)
    {
      v45 = 16;
LABEL_87:
      v46 = (1 << v45) - v44;
      if ((v46 & 0x80000000) == 0)
        goto LABEL_93;
      goto LABEL_92;
    }
LABEL_86:
    v45 = 8;
    goto LABEL_87;
  }
LABEL_92:
  v46 = 0x7FFFFFFF;
LABEL_93:
  v48 = v43 & v22;
  if (v46 > v41)
    v41 = v46;
  v49 = 1;
  if (v7 > 3)
  {
    v50 = 1;
    goto LABEL_104;
  }
  v51 = ((1 << v8) + 1) >> v8;
  if (v51 > 0xFFFC)
  {
    v49 = 4;
  }
  else
  {
    if (v51 < 0xFD)
    {
      v49 = 1;
      v50 = 1;
      goto LABEL_104;
    }
    v49 = 2;
  }
  v50 = 4;
  if (v51 <= 0xFFFC)
    v50 = 2;
LABEL_104:
  v52 = v37 - v41;
  if (v37 <= v41)
    goto LABEL_121;
  v53 = ((v7 + v49 + v21) & v22) + v7 + v50;
  v54 = 8 * v53;
  if (v53 > 3)
  {
LABEL_106:
    v55 = *(unsigned __int8 *)(v48 + v53);
    goto LABEL_113;
  }
  v56 = ((v52 + ~(-1 << v54)) >> v54) + 1;
  if (HIWORD(v56))
  {
    v55 = *(_DWORD *)(v48 + v53);
  }
  else
  {
    if (v56 <= 0xFF)
    {
      if (v56 < 2)
      {
LABEL_121:
        if (!v41)
          return 0;
        if (v7 <= 3)
        {
          v65 = ((1 << v8) + 1) >> v8;
          if (v65 > 0xFFFC)
            goto LABEL_134;
          v59 = v65 + 3;
          if (v65 > 0xFC)
          {
            v60 = 16;
LABEL_125:
            v61 = (1 << v60) - v59;
            if ((v61 & 0x80000000) == 0)
            {
              if (v7 > 3)
              {
LABEL_127:
                v62 = 4;
                goto LABEL_128;
              }
LABEL_135:
              v66 = ((1 << v8) + 1) >> v8;
              if (v66 > 0xFFFC)
              {
LABEL_138:
                v64 = 0x7FFFFFFF;
LABEL_139:
                if (v64 > v61)
                  v61 = v64;
                if (v7 <= 3)
                {
                  v71 = ((1 << v8) + 1) >> v8;
                  if (v71 > 0xFFFC)
                    goto LABEL_151;
                  v67 = v71 + 3;
                  if (v71 > 0xFC)
                  {
                    v68 = 16;
LABEL_144:
                    v69 = (1 << v68) - v67;
                    if ((v69 & 0x80000000) == 0)
                    {
                      if (v69 == v61)
                        goto LABEL_146;
                      goto LABEL_152;
                    }
LABEL_151:
                    if (v61 == 0x7FFFFFFF)
                    {
LABEL_146:
                      if (v7 <= 3)
                      {
                        v73 = ((1 << v8) + 1) >> v8;
                        if (v73 > 0xFFFC)
                          goto LABEL_158;
                        v70 = v73 + 3;
                        if (v73 > 0xFC)
                        {
                          v74 = 16;
LABEL_157:
                          v75 = (1 << v74) - v70;
                          if ((v75 & 0x80000000) == 0)
                          {
LABEL_159:
                            if (v7 > 3)
                              goto LABEL_163;
                            v76 = ((1 << v8) + 1) >> v8;
                            v77 = 2;
                            if (v76 > 0xFFFC)
                              v77 = 4;
                            if (v76 <= 0xFC)
LABEL_163:
                              v77 = 1;
                            if (!v61)
                              return 0;
                            v78 = v61 >= v75;
                            v79 = v61 - v75;
                            if (v79 == 0 || !v78)
                            {
LABEL_222:
                              if (v75)
                              {
                                if (v7 <= 3)
                                {
                                  v104 = ((1 << v8) + 1) >> v8;
                                  if (v104 > 0xFFFC)
                                  {
                                    v100 = *(_DWORD *)(v48 + v7);
                                    v101 = ~v100;
LABEL_233:
                                    v107 = 0x7FFFFFFF;
LABEL_234:
                                    if (v107 > v101)
                                      return -v100;
                                    else
                                      return 0;
                                  }
                                  v103 = v104 + 3;
                                  if (v104 > 0xFC)
                                  {
                                    v106 = *(unsigned __int16 *)(v48 + v7);
                                    v100 = v106 | 0xFFFF0000;
                                    v101 = v106 ^ 0xFFFF;
                                    v102 = 16;
                                  }
                                  else
                                  {
                                    v105 = *(unsigned __int8 *)(v48 + v7);
                                    v100 = v105 | 0xFFFFFF00;
                                    v101 = v105 ^ 0xFF;
                                    v102 = 8;
                                  }
                                }
                                else
                                {
                                  v99 = *(unsigned __int8 *)(v48 + v7);
                                  v100 = v99 | 0xFFFFFF00;
                                  v101 = v99 ^ 0xFF;
                                  v102 = 8;
                                  v103 = 4;
                                }
                                v107 = (1 << v102) - v103;
                                if ((v107 & 0x80000000) == 0)
                                  goto LABEL_234;
                                goto LABEL_233;
                              }
                              return 0;
                            }
                            v80 = v77 + v7;
                            v81 = 8 * v80;
                            if (v80 <= 3)
                            {
                              v85 = ((v79 + ~(-1 << v81)) >> v81) + 1;
                              if (HIWORD(v85))
                              {
                                v82 = *(_DWORD *)(v48 + v80);
                                goto LABEL_205;
                              }
                              if (v85 > 0xFF)
                              {
                                v82 = *(unsigned __int16 *)(v48 + v80);
                                goto LABEL_205;
                              }
                              if (v85 < 2)
                                goto LABEL_222;
                            }
                            v82 = *(unsigned __int8 *)(v48 + v80);
LABEL_205:
                            if (!v82)
                              goto LABEL_222;
                            v96 = (v82 - 1) << v81;
                            if (v80 > 3)
                              v96 = 0;
                            if ((_DWORD)v80)
                            {
                              if (v80 <= 3)
                                v97 = v80;
                              else
                                v97 = 4;
                              return ((uint64_t (*)(void))((char *)&loc_1874F4668 + 4 * byte_187C39AE8[v97 - 1]))();
                            }
                            return v75 + v96 + 1;
                          }
LABEL_158:
                          v75 = 0x7FFFFFFF;
                          goto LABEL_159;
                        }
                      }
                      else
                      {
                        v70 = 4;
                      }
                      v74 = 8;
                      goto LABEL_157;
                    }
LABEL_152:
                    if (v7 <= 3)
                    {
                      v83 = ((1 << v8) + 1) >> v8;
                      v84 = v7 + (v43 | v21);
                      if (v83 > 0xFFFC)
                      {
                        v72 = v84 + 4;
                      }
                      else if (v83 > 0xFC)
                      {
                        v72 = v84 + 2;
                      }
                      else
                      {
                        v72 = v84 + 1;
                      }
                    }
                    else
                    {
                      v72 = v7 + v21 + v48 + 1;
                    }
                    v48 = v72 & v22;
                    if (v7 <= 3)
                    {
                      v87 = ((1 << v8) + 1) >> v8;
                      if (v87 > 0xFFFC)
                        goto LABEL_186;
                      v86 = v87 + 3;
                      if (v87 > 0xFC)
                      {
                        v88 = 16;
LABEL_185:
                        v75 = (1 << v88) - v86;
                        if ((v75 & 0x80000000) == 0)
                        {
LABEL_187:
                          if (v7 > 3)
                            goto LABEL_191;
                          v89 = ((1 << v8) + 1) >> v8;
                          v90 = 2;
                          if (v89 > 0xFFFC)
                            v90 = 4;
                          if (v89 <= 0xFC)
LABEL_191:
                            v90 = 1;
                          if (!v61)
                            return 0;
                          v78 = v61 >= v75;
                          v91 = v61 - v75;
                          if (v91 == 0 || !v78)
                            goto LABEL_222;
                          v92 = v90 + v7;
                          v93 = 8 * v92;
                          if (v92 <= 3)
                          {
                            v95 = ((v91 + ~(-1 << v93)) >> v93) + 1;
                            if (HIWORD(v95))
                            {
                              v94 = *(_DWORD *)(v48 + v92);
                              goto LABEL_214;
                            }
                            if (v95 > 0xFF)
                            {
                              v94 = *(unsigned __int16 *)(v48 + v92);
                              goto LABEL_214;
                            }
                            if (v95 < 2)
                              goto LABEL_222;
                          }
                          v94 = *(unsigned __int8 *)(v48 + v92);
LABEL_214:
                          if (!v94)
                            goto LABEL_222;
                          v96 = (v94 - 1) << v93;
                          if (v92 > 3)
                            v96 = 0;
                          if ((_DWORD)v92)
                          {
                            if (v92 <= 3)
                              v98 = v92;
                            else
                              v98 = 4;
                            return ((uint64_t (*)(void))((char *)&loc_1874F4668 + 4 * byte_187C39AE4[v98 - 1]))();
                          }
                          return v75 + v96 + 1;
                        }
LABEL_186:
                        v75 = 0x7FFFFFFF;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      v86 = 4;
                    }
                    v88 = 8;
                    goto LABEL_185;
                  }
                }
                else
                {
                  v67 = 4;
                }
                v68 = 8;
                goto LABEL_144;
              }
              v62 = v66 + 3;
              if (v66 > 0xFC)
              {
                v63 = 16;
LABEL_129:
                v64 = (1 << v63) - v62;
                if ((v64 & 0x80000000) == 0)
                  goto LABEL_139;
                goto LABEL_138;
              }
LABEL_128:
              v63 = 8;
              goto LABEL_129;
            }
LABEL_134:
            v61 = 0x7FFFFFFF;
            if (v7 > 3)
              goto LABEL_127;
            goto LABEL_135;
          }
        }
        else
        {
          v59 = 4;
        }
        v60 = 8;
        goto LABEL_125;
      }
      goto LABEL_106;
    }
    v55 = *(unsigned __int16 *)(v48 + v53);
  }
LABEL_113:
  if (!v55)
    goto LABEL_121;
  v57 = (v55 - 1) << v54;
  if (v53 > 3)
    v57 = 0;
  if (!(_DWORD)v53)
    return v41 + v57 + 1;
  if (v53 <= 3)
    v58 = v53;
  else
    v58 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874F4244 + 4 * byte_187C39AE0[v58 - 1]))();
}

void storeEnumTagSinglePayload for AnimatedValueKeyframe(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  unsigned int v10;
  int v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  size_t v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = 24;
  if (v6 > 0x18)
    v7 = *(_QWORD *)(v5 + 64);
  if (v7 <= 3)
  {
    v14 = ((1 << (8 * v7)) + 1) >> (8 * v7);
    if (v14 > 0xFFFC)
      goto LABEL_15;
    v8 = v14 + 3;
    if (v14 > 0xFC)
    {
      v9 = 16;
LABEL_6:
      v10 = (1 << v9) - v8;
      if ((v10 & 0x80000000) == 0)
      {
        if (v7 > 3)
        {
LABEL_8:
          v11 = 4;
          goto LABEL_9;
        }
LABEL_16:
        v15 = ((1 << (8 * v7)) + 1) >> (8 * v7);
        if (v15 > 0xFFFC)
        {
LABEL_19:
          v13 = 0x7FFFFFFF;
LABEL_20:
          if (v13 > v10)
            v10 = v13;
          if (v10 <= *(_DWORD *)(v5 + 84))
            v16 = *(_DWORD *)(v5 + 84);
          else
            v16 = v10;
          v18 = 1;
          if (v7 > 3)
          {
            v19 = 1;
            goto LABEL_34;
          }
          v20 = ((1 << (8 * v7)) + 1) >> (8 * v7);
          if (v20 > 0xFFFC)
          {
            v18 = 4;
          }
          else
          {
            if (v20 < 0xFD)
            {
              v18 = 1;
              v19 = 1;
              goto LABEL_34;
            }
            v18 = 2;
          }
          v21 = v20 > 0xFFFC;
          v19 = 2;
          if (v21)
            v19 = 4;
LABEL_34:
          v17 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
          v22 = ((v7 + ((v6 + v17) & ~v17) + ((v7 + v18 + v17) & ~v17) + v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 33;
          if (v16 >= a3)
          {
            v25 = 0;
            if (v16 >= a2)
              goto LABEL_47;
          }
          else
          {
            if (v22 <= 3)
              v23 = ((a3 - v16 + 255) >> (8 * v22)) + 1;
            else
              v23 = 2;
            if (v23 >= 0x10000)
              v24 = 4;
            else
              v24 = 2;
            if (v23 < 0x100)
              v24 = 1;
            if (v23 >= 2)
              v25 = v24;
            else
              v25 = 0;
            if (v16 >= a2)
LABEL_47:
              __asm { BR              X15 }
          }
          if (v22 >= 4)
            v26 = ~v16 + a2;
          else
            v26 = (~(_BYTE)v16 + a2);
          bzero(a1, v22);
          if ((_DWORD)v22 == 1)
            *a1 = v26;
          else
            *(_DWORD *)a1 = v26;
          __asm { BR              X10 }
        }
        v11 = v15 + 3;
        if (v15 > 0xFC)
        {
          v12 = 16;
LABEL_10:
          v13 = (1 << v12) - v11;
          if ((v13 & 0x80000000) == 0)
            goto LABEL_20;
          goto LABEL_19;
        }
LABEL_9:
        v12 = 8;
        goto LABEL_10;
      }
LABEL_15:
      v10 = 0x7FFFFFFF;
      if (v7 > 3)
        goto LABEL_8;
      goto LABEL_16;
    }
  }
  else
  {
    v8 = 4;
  }
  v9 = 8;
  goto LABEL_6;
}

void sub_1874F49C8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1874F49D0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1874F49D8);
}

uint64_t sub_1874F4B44(uint64_t a1, int a2, unsigned int a3)
{
  int v3;
  char v4;
  unsigned int v5;
  int v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)(v14 + v15) = 0;
  if (!a2)
    return result;
  if (v12 > 3)
  {
    v3 = 4;
LABEL_4:
    v4 = 8;
    goto LABEL_5;
  }
  v9 = ((1 << (8 * v12)) + 1) >> (8 * v12);
  if (v9 > 0xFFFC)
  {
LABEL_14:
    v5 = 0x7FFFFFFF;
    if (v12 > 3)
      goto LABEL_7;
    goto LABEL_15;
  }
  v3 = v9 + 3;
  if (v9 <= 0xFC)
    goto LABEL_4;
  v4 = 16;
LABEL_5:
  v5 = (1 << v4) - v3;
  if ((v5 & 0x80000000) != 0)
    goto LABEL_14;
  if (v12 > 3)
  {
LABEL_7:
    v6 = 4;
LABEL_8:
    v7 = 8;
    goto LABEL_9;
  }
LABEL_15:
  v10 = ((1 << (8 * v12)) + 1) >> (8 * v12);
  if (v10 > 0xFFFC)
  {
LABEL_18:
    v8 = 0x7FFFFFFF;
    goto LABEL_19;
  }
  v6 = v10 + 3;
  if (v10 <= 0xFC)
    goto LABEL_8;
  v7 = 16;
LABEL_9:
  v8 = (1 << v7) - v6;
  if ((v8 & 0x80000000) != 0)
    goto LABEL_18;
LABEL_19:
  if (v8 > v5)
    v5 = v8;
  if (a3 < v5)
  {
    if (v12 > 3)
      JUMPOUT(0x1874F4B88);
    JUMPOUT(0x1874F4B50);
  }
  return (*(uint64_t (**)(uint64_t))(v13 + 56))(v14);
}

uint64_t sub_1874F4CD4@<X0>(unsigned int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  char v16;
  int v17;
  int v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  size_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v32;
  int v33;
  _BYTE *v34;
  int v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  size_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;

  v5[v6] = 0;
  if (v2 > 3)
  {
    v7 = 4;
LABEL_3:
    v8 = 8;
    goto LABEL_4;
  }
  v13 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v13 > 0xFFFC)
  {
LABEL_13:
    v9 = 0x7FFFFFFF;
    if (v2 > 3)
      goto LABEL_6;
    goto LABEL_14;
  }
  v7 = v13 + 3;
  if (v13 <= 0xFC)
    goto LABEL_3;
  v8 = 16;
LABEL_4:
  v9 = (1 << v8) - v7;
  if ((v9 & 0x80000000) != 0)
    goto LABEL_13;
  if (v2 > 3)
  {
LABEL_6:
    v10 = 4;
    goto LABEL_7;
  }
LABEL_14:
  v14 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v14 <= 0xFFFC)
  {
    v10 = v14 + 3;
    if (v14 > 0xFC)
    {
      v11 = 16;
LABEL_8:
      v12 = (1 << v11) - v10;
      if ((v12 & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_7:
    v11 = 8;
    goto LABEL_8;
  }
LABEL_17:
  v12 = 0x7FFFFFFF;
LABEL_18:
  if (v12 > v9)
    v9 = v12;
  if (v2 > 3)
  {
    v15 = 4;
LABEL_22:
    v16 = 8;
    goto LABEL_23;
  }
  v21 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v21 > 0xFFFC)
    goto LABEL_33;
  v15 = v21 + 3;
  if (v21 <= 0xFC)
    goto LABEL_22;
  v16 = 16;
LABEL_23:
  v17 = (1 << v16) - v15;
  if ((v17 & 0x80000000) == 0)
  {
    if (v17 == v9)
      goto LABEL_25;
    goto LABEL_34;
  }
LABEL_33:
  if (v9 == 0x7FFFFFFF)
  {
LABEL_25:
    if (v2 <= 3)
    {
      v23 = ((1 << (8 * v2)) + 1) >> (8 * v2);
      if (v23 > 0xFFFC)
      {
LABEL_39:
        v20 = 0x7FFFFFFF;
LABEL_40:
        if (v2 > 3)
          goto LABEL_44;
        v24 = ((1 << (8 * v2)) + 1) >> (8 * v2);
        v25 = 2;
        if (v24 > 0xFFFC)
          v25 = 4;
        if (v24 <= 0xFC)
LABEL_44:
          v25 = 1;
        v26 = v25 + v2;
        if (v9 <= v20)
        {
          v27 = 0u;
        }
        else if (v26 <= 3)
        {
          v32 = ((v9 - v20 + ~(-1 << (8 * v26))) >> (8 * v26)) + 1;
          if (HIWORD(v32))
          {
            v27 = 4u;
          }
          else if (v32 >= 0x100)
          {
            v27 = 2;
          }
          else
          {
            v27 = v32 > 1;
          }
        }
        else
        {
          v27 = 1u;
        }
        if (v20 >= a1)
          return ((uint64_t (*)(void))((char *)&loc_1874F51B4 + 4 * byte_187C39B10[v27]))();
        v30 = ~v20 + a1;
        if (v26 < 4)
        {
          if ((_DWORD)v26)
          {
            v33 = v30 & ~(-1 << (8 * v26));
            bzero(v5, v26);
            if ((_DWORD)v26 == 3)
            {
              *(_WORD *)v5 = v33;
              v5[2] = BYTE2(v33);
            }
            else if ((_DWORD)v26 == 2)
            {
              *(_WORD *)v5 = v33;
            }
            else
            {
              *v5 = v33;
            }
          }
        }
        else
        {
          bzero(v5, v26);
          *(_DWORD *)v5 = v30;
        }
        return ((uint64_t (*)(void))((char *)sub_1874F49C8 + 4 * word_187C39B16[v27]))();
      }
      v18 = v23 + 3;
      if (v23 > 0xFC)
      {
        v19 = 16;
LABEL_28:
        v20 = (1 << v19) - v18;
        if ((v20 & 0x80000000) == 0)
          goto LABEL_40;
        goto LABEL_39;
      }
    }
    else
    {
      v18 = 4;
    }
    v19 = 8;
    goto LABEL_28;
  }
LABEL_34:
  if (v2 <= 3)
  {
    v28 = ((1 << (8 * v2)) + 1) >> (8 * v2);
    v29 = v2 + (a2 | v4);
    if (v28 > 0xFFFC)
    {
      v22 = v29 + 4;
    }
    else if (v28 > 0xFC)
    {
      v22 = v29 + 2;
    }
    else
    {
      v22 = v29 + 1;
    }
  }
  else
  {
    v22 = (uint64_t)&v5[v2 + 1 + v4];
  }
  v34 = (_BYTE *)(v22 & v3);
  if (v2 > 3)
  {
    v35 = 4;
    goto LABEL_68;
  }
  v38 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v38 <= 0xFFFC)
  {
    v35 = v38 + 3;
    if (v38 > 0xFC)
    {
      v36 = 16;
LABEL_69:
      v37 = (1 << v36) - v35;
      if ((v37 & 0x80000000) == 0)
        goto LABEL_75;
      goto LABEL_74;
    }
LABEL_68:
    v36 = 8;
    goto LABEL_69;
  }
LABEL_74:
  v37 = 0x7FFFFFFF;
LABEL_75:
  if (v2 > 3)
    goto LABEL_79;
  v39 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  v40 = 2;
  if (v39 > 0xFFFC)
    v40 = 4;
  if (v39 <= 0xFC)
LABEL_79:
    v40 = 1;
  v41 = v40 + v2;
  if (v9 <= v37)
  {
    v42 = 0u;
  }
  else if (v41 <= 3)
  {
    v44 = ((v9 - v37 + ~(-1 << (8 * v41))) >> (8 * v41)) + 1;
    if (HIWORD(v44))
    {
      v42 = 4u;
    }
    else if (v44 >= 0x100)
    {
      v42 = 2;
    }
    else
    {
      v42 = v44 > 1;
    }
  }
  else
  {
    v42 = 1u;
  }
  if (v37 >= a1)
    return ((uint64_t (*)(void))((char *)&loc_1874F51B4 + 4 * byte_187C39B00[v42]))();
  v43 = ~v37 + a1;
  if (v41 < 4)
  {
    if ((_DWORD)v41)
    {
      v45 = v43 & ~(-1 << (8 * v41));
      bzero(v34, v41);
      if ((_DWORD)v41 == 3)
      {
        *(_WORD *)v34 = v45;
        v34[2] = BYTE2(v45);
      }
      else if ((_DWORD)v41 == 2)
      {
        *(_WORD *)v34 = v45;
      }
      else
      {
        *v34 = v45;
      }
    }
  }
  else
  {
    bzero(v34, v41);
    *(_DWORD *)v34 = v43;
  }
  return ((uint64_t (*)(void))((char *)sub_1874F49C8 + 4 * word_187C39B06[v42]))();
}

uint64_t sub_1874F4D58(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _WORD *v3;
  uint64_t v4;
  int v5;
  char v6;
  unsigned int v7;
  int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  char v14;
  int v15;
  int v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  size_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v28;
  int v29;

  *(_DWORD *)((char *)v3 + v4) = 0;
  if (v2 > 3)
  {
    v5 = 4;
LABEL_3:
    v6 = 8;
    goto LABEL_4;
  }
  v11 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v11 > 0xFFFC)
  {
LABEL_13:
    v7 = 0x7FFFFFFF;
    if (v2 > 3)
      goto LABEL_6;
    goto LABEL_14;
  }
  v5 = v11 + 3;
  if (v11 <= 0xFC)
    goto LABEL_3;
  v6 = 16;
LABEL_4:
  v7 = (1 << v6) - v5;
  if ((v7 & 0x80000000) != 0)
    goto LABEL_13;
  if (v2 > 3)
  {
LABEL_6:
    v8 = 4;
    goto LABEL_7;
  }
LABEL_14:
  v12 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v12 <= 0xFFFC)
  {
    v8 = v12 + 3;
    if (v12 > 0xFC)
    {
      v9 = 16;
LABEL_8:
      v10 = (1 << v9) - v8;
      if ((v10 & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_7:
    v9 = 8;
    goto LABEL_8;
  }
LABEL_17:
  v10 = 0x7FFFFFFF;
LABEL_18:
  if (v10 > v7)
    v7 = v10;
  if (v2 > 3)
  {
    v13 = 4;
LABEL_22:
    v14 = 8;
    goto LABEL_23;
  }
  v19 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v19 > 0xFFFC)
    goto LABEL_33;
  v13 = v19 + 3;
  if (v19 <= 0xFC)
    goto LABEL_22;
  v14 = 16;
LABEL_23:
  v15 = (1 << v14) - v13;
  if ((v15 & 0x80000000) == 0)
  {
    if (v15 == v7)
      goto LABEL_25;
LABEL_34:
    if (v2 > 3 || (v25 = ((1 << (8 * v2)) + 1) >> (8 * v2), v25 > 0xFFFC) || v25 <= 0xFC)
      JUMPOUT(0x1874F50ACLL);
    JUMPOUT(0x1874F50A8);
  }
LABEL_33:
  if (v7 != 0x7FFFFFFF)
    goto LABEL_34;
LABEL_25:
  if (v2 > 3)
  {
    v16 = 4;
LABEL_27:
    v17 = 8;
    goto LABEL_28;
  }
  v20 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v20 > 0xFFFC)
  {
LABEL_39:
    v18 = 0x7FFFFFFF;
    goto LABEL_40;
  }
  v16 = v20 + 3;
  if (v20 <= 0xFC)
    goto LABEL_27;
  v17 = 16;
LABEL_28:
  v18 = (1 << v17) - v16;
  if ((v18 & 0x80000000) != 0)
    goto LABEL_39;
LABEL_40:
  if (v2 > 3)
    goto LABEL_44;
  v21 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  v22 = 2;
  if (v21 > 0xFFFC)
    v22 = 4;
  if (v21 <= 0xFC)
LABEL_44:
    v22 = 1;
  v23 = v22 + v2;
  if (v7 <= v18)
  {
    v24 = 0u;
  }
  else if (v23 <= 3)
  {
    v28 = ((v7 - v18 + ~(-1 << (8 * v23))) >> (8 * v23)) + 1;
    if (HIWORD(v28))
      JUMPOUT(0x1874F5288);
    if (v28 >= 0x100)
      v24 = 2;
    else
      v24 = v28 > 1;
  }
  else
  {
    v24 = 1u;
  }
  if (v18 < a2)
  {
    v26 = ~v18 + a2;
    if (v23 < 4)
    {
      if ((_DWORD)v23)
      {
        v29 = v26 & ~(-1 << (8 * v23));
        bzero(v3, v23);
        if ((_DWORD)v23 == 3)
          JUMPOUT(0x1874F52A0);
        if ((_DWORD)v23 != 2)
          JUMPOUT(0x1874F52B0);
        *v3 = v29;
      }
    }
    else
    {
      bzero(v3, v23);
      *(_DWORD *)v3 = v26;
    }
    JUMPOUT(0x1874F52B4);
  }
  return ((uint64_t (*)(void))((char *)&loc_1874F51B4 + 4 * byte_187C39B10[v24]))();
}

void sub_1874F50A0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1874F5238(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  *(_WORD *)(v3 + v4) = 0;
  v5 = -a2;
  if (v2 > 3)
    goto LABEL_4;
  v6 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v6 > 0xFFFC)
  {
    *(_DWORD *)(v3 + v2) = v5;
  }
  else
  {
    if (v6 <= 0xFC)
    {
LABEL_4:
      *(_BYTE *)(v3 + v2) = v5;
      goto LABEL_7;
    }
    *(_WORD *)(v3 + v2) = v5;
  }
LABEL_7:
  JUMPOUT(0x1874F5304);
}

uint64_t type metadata completion function for AnimatedValueKeyframe.InterpolationParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatedValueKeyframe.InterpolationParameters(uint64_t *__dst, uint64_t *__src, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  char v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int16 *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;

  v4 = __dst;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x18uLL)
    v6 = 24;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = 8 * v6;
  if (v6 > 3)
    goto LABEL_8;
  v8 = ((1 << v7) + 1) >> v7;
  v9 = 2;
  if (v8 > 0xFFFC)
    v9 = 4;
  if (v8 <= 0xFC)
LABEL_8:
    v9 = 1;
  v10 = *(_DWORD *)(v5 + 80);
  v11 = v10 & 0xF8 | 7;
  v12 = ~v11;
  v13 = (v9 + v6 + v11) & ~v11;
  if (v6 > 3)
  {
    if ((v10 & 0x1000F8) != 0)
      goto LABEL_29;
LABEL_15:
    if ((unint64_t)(v6 + v13 + 1) < 0x19)
    {
      v16 = *((unsigned __int8 *)__src + v6);
      if (v16 < 3)
        goto LABEL_31;
LABEL_25:
      if (v6 <= 3)
        v17 = v6;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
LABEL_29:
    v18 = *__src;
    *v4 = *__src;
    v4 = (uint64_t *)(v18 + ((v11 + 16) & v12));
    swift_retain();
    return v4;
  }
  v14 = ((1 << v7) + 1) >> v7;
  if (v14 > 0xFFFC)
  {
    if ((v10 & 0x1000F8) != 0 || (unint64_t)(v6 + v13 + 4) >= 0x19)
      goto LABEL_29;
    v16 = *(_DWORD *)((char *)__src + v6);
    if (v16 >= 3)
      goto LABEL_25;
  }
  else
  {
    v15 = v10 & 0x1000F8;
    if (v14 <= 0xFC)
    {
      if (v15)
        goto LABEL_29;
      goto LABEL_15;
    }
    if (v15 || (unint64_t)(v6 + v13 + 2) >= 0x19)
      goto LABEL_29;
    v16 = *(unsigned __int16 *)((char *)__src + v6);
    if (v16 >= 3)
      goto LABEL_25;
  }
LABEL_31:
  if (v16 == 2)
  {
    (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v5 + 16))(__dst, __src, *(_QWORD *)(a3 + 16));
    if (v6 <= 3)
    {
      v20 = ((1 << v7) + 1) >> v7;
      if (v20 > 0xFFFC)
      {
        v22 = 2;
        goto LABEL_53;
      }
      if (v20 > 0xFC)
      {
        LOWORD(v22) = 2;
        goto LABEL_57;
      }
    }
    v21 = 2;
    goto LABEL_46;
  }
  if (v16 != 1)
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    __dst[2] = __src[2];
    if (v6 > 3)
      goto LABEL_36;
    v20 = ((1 << v7) + 1) >> v7;
    if (v20 > 0xFFFC)
    {
      *(_DWORD *)((char *)__dst + v6) = 0;
    }
    else
    {
      if (v20 <= 0xFC)
      {
LABEL_36:
        *((_BYTE *)__dst + v6) = 0;
        if (v6 >= 4)
          goto LABEL_47;
        goto LABEL_48;
      }
      *(_WORD *)((char *)__dst + v6) = 0;
    }
LABEL_58:
    v29 = v20 > 0xFFFC;
    v27 = 2;
    if (v29)
      v27 = 4;
    goto LABEL_60;
  }
  (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v5 + 16))(__dst, __src, *(_QWORD *)(a3 + 16));
  if (v6 > 3)
    goto LABEL_45;
  v22 = 1;
  v20 = ((1 << v7) + 1) >> v7;
  if (v20 > 0xFFFC)
  {
LABEL_53:
    *(_DWORD *)((char *)v4 + v6) = v22;
    goto LABEL_58;
  }
  if (v20 > 0xFC)
  {
LABEL_57:
    *(_WORD *)((char *)v4 + v6) = v22;
    goto LABEL_58;
  }
LABEL_45:
  v21 = 1;
LABEL_46:
  *((_BYTE *)v4 + v6) = v21;
  if (v6 >= 4)
  {
LABEL_47:
    v23 = ((unint64_t)v4 + v6 + 8) & v12;
    v24 = ((unint64_t)__src + v6 + 8) & v12;
    v25 = (unsigned __int16 *)(v24 + v6);
    goto LABEL_63;
  }
LABEL_48:
  v26 = ((1 << v7) + 1) >> v7;
  v27 = 2;
  if (v26 > 0xFFFC)
    v27 = 4;
  if (v26 < 0xFD)
  {
    v28 = v6 + 8;
    goto LABEL_61;
  }
LABEL_60:
  v28 = v27 + v6 + 7;
LABEL_61:
  v23 = ((unint64_t)v4 + v28) & v12;
  v24 = ((unint64_t)__src + v28) & v12;
  v25 = (unsigned __int16 *)(v24 + v6);
  v30 = ((1 << v7) + 1) >> v7;
  if (v30 <= 0xFFFC)
  {
    if (v30 > 0xFC)
    {
      v31 = *v25;
      if (v31 < 3)
        goto LABEL_72;
      goto LABEL_68;
    }
LABEL_63:
    v31 = *(unsigned __int8 *)v25;
    if (v31 < 3)
      goto LABEL_72;
LABEL_68:
    if (v6 <= 3)
      v32 = v6;
    else
      v32 = 4;
    __asm { BR              X12 }
  }
  v31 = *(_DWORD *)v25;
  if (v31 >= 3)
    goto LABEL_68;
LABEL_72:
  if (v31 == 2)
  {
    (*(void (**)(uint64_t))(v5 + 16))(v23);
    if (v6 <= 3)
    {
      v35 = ((1 << v7) + 1) >> v7;
      if (v35 > 0xFFFC)
      {
        v36 = 2;
        goto LABEL_87;
      }
      if (v35 > 0xFC)
      {
        LOWORD(v36) = 2;
        goto LABEL_91;
      }
    }
    *(_BYTE *)(v23 + v6) = 2;
    return v4;
  }
  if (v31 == 1)
  {
    (*(void (**)(uint64_t))(v5 + 16))(v23);
    if (v6 > 3)
    {
LABEL_85:
      *(_BYTE *)(v23 + v6) = 1;
      return v4;
    }
    v36 = 1;
    v37 = ((1 << v7) + 1) >> v7;
    if (v37 <= 0xFFFC)
    {
      if (v37 <= 0xFC)
        goto LABEL_85;
LABEL_91:
      *(_WORD *)(v23 + v6) = v36;
      return v4;
    }
LABEL_87:
    *(_DWORD *)(v23 + v6) = v36;
    return v4;
  }
  v33 = *(_OWORD *)v24;
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
  *(_OWORD *)v23 = v33;
  if (v6 <= 3)
  {
    v34 = ((1 << v7) + 1) >> v7;
    if (v34 > 0xFFFC)
    {
      *(_DWORD *)(v23 + v6) = 0;
      return v4;
    }
    if (v34 > 0xFC)
    {
      *(_WORD *)(v23 + v6) = 0;
      return v4;
    }
  }
  *(_BYTE *)(v23 + v6) = 0;
  return v4;
}

uint64_t destroy for AnimatedValueKeyframe.InterpolationParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  if (*(_QWORD *)(v3 + 64) <= 0x18uLL)
    v4 = 24;
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = 8 * v4;
  if (v4 > 3)
    goto LABEL_5;
  v7 = ((1 << v5) + 1) >> v5;
  if (v7 > 0xFFFC)
  {
    v6 = *(_DWORD *)(a1 + v4);
  }
  else
  {
    if (v7 <= 0xFC)
    {
LABEL_5:
      v6 = *(unsigned __int8 *)(a1 + v4);
      goto LABEL_10;
    }
    v6 = *(unsigned __int16 *)(a1 + v4);
  }
LABEL_10:
  if (v6 >= 3)
  {
    if (v4 <= 3)
      v8 = v4;
    else
      v8 = 4;
    __asm { BR              X12 }
  }
  if (v6 - 1 <= 1)
    (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  if (v4 > 3)
    goto LABEL_21;
  v9 = ((1 << v5) + 1) >> v5;
  v10 = 2;
  if (v9 > 0xFFFC)
    v10 = 4;
  if (v9 <= 0xFC)
LABEL_21:
    v10 = 1;
  v11 = *(_DWORD *)(v3 + 80) & 0xF8 | 7;
  result = (v4 + a1 + v10 + v11) & ~v11;
  if (v4 > 3)
    goto LABEL_23;
  v14 = ((1 << v5) + 1) >> v5;
  if (v14 > 0xFFFC)
  {
    v13 = *(_DWORD *)(result + v4);
  }
  else
  {
    if (v14 <= 0xFC)
    {
LABEL_23:
      v13 = *(unsigned __int8 *)(result + v4);
      goto LABEL_28;
    }
    v13 = *(unsigned __int16 *)(result + v4);
  }
LABEL_28:
  if (v13 >= 3)
  {
    if (v4 <= 3)
      v15 = v4;
    else
      v15 = 4;
    __asm { BR              X12 }
  }
  if (v13 - 1 <= 1)
    return (*(uint64_t (**)(void))(v3 + 8))();
  return result;
}

_BYTE *initializeWithCopy for AnimatedValueKeyframe.InterpolationParameters(_BYTE *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x18uLL)
    v6 = 24;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = 8 * v6;
  if (v6 > 3)
    goto LABEL_7;
  v8 = ((1 << v7) + 1) >> v7;
  if (v8 <= 0xFFFC)
  {
    if (v8 > 0xFC)
    {
      v9 = *(unsigned __int16 *)((char *)__src + v6);
      if (v9 < 3)
        goto LABEL_16;
      goto LABEL_12;
    }
LABEL_7:
    v9 = *((unsigned __int8 *)__src + v6);
    if (v9 < 3)
      goto LABEL_16;
LABEL_12:
    if (v6 <= 3)
      v10 = v6;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  v9 = *(_DWORD *)((char *)__src + v6);
  if (v9 >= 3)
    goto LABEL_12;
LABEL_16:
  if (v9 == 2)
  {
    (*(void (**)(_BYTE *, _QWORD *, _QWORD))(v5 + 16))(__dst, __src, *(_QWORD *)(a3 + 16));
    if (v6 <= 3)
    {
      v11 = ((1 << v7) + 1) >> v7;
      if (v11 > 0xFFFC)
      {
        v13 = 2;
        goto LABEL_38;
      }
      if (v11 > 0xFC)
      {
        LOWORD(v13) = 2;
        goto LABEL_41;
      }
    }
    v12 = 2;
    goto LABEL_29;
  }
  if (v9 == 1)
  {
    (*(void (**)(_BYTE *, _QWORD *, _QWORD))(v5 + 16))(__dst, __src, *(_QWORD *)(a3 + 16));
    if (v6 > 3)
    {
LABEL_28:
      v12 = 1;
LABEL_29:
      __dst[v6] = v12;
      if (v6 > 3)
      {
LABEL_33:
        v15 = 1;
        goto LABEL_44;
      }
      goto LABEL_30;
    }
    v13 = 1;
    v11 = ((1 << v7) + 1) >> v7;
    if (v11 <= 0xFFFC)
    {
      if (v11 <= 0xFC)
        goto LABEL_28;
LABEL_41:
      *(_WORD *)&__dst[v6] = v13;
LABEL_42:
      v16 = v11 > 0xFFFC;
      v15 = 2;
      if (v16)
        v15 = 4;
      goto LABEL_44;
    }
LABEL_38:
    *(_DWORD *)&__dst[v6] = v13;
    goto LABEL_42;
  }
  *(_OWORD *)__dst = *(_OWORD *)__src;
  *((_QWORD *)__dst + 2) = __src[2];
  if (v6 > 3)
    goto LABEL_19;
  v11 = ((1 << v7) + 1) >> v7;
  if (v11 > 0xFFFC)
  {
    *(_DWORD *)&__dst[v6] = 0;
    goto LABEL_42;
  }
  if (v11 > 0xFC)
  {
    *(_WORD *)&__dst[v6] = 0;
    goto LABEL_42;
  }
LABEL_19:
  __dst[v6] = 0;
  if (v6 > 3)
    goto LABEL_33;
LABEL_30:
  v14 = ((1 << v7) + 1) >> v7;
  v15 = 2;
  if (v14 > 0xFFFC)
    v15 = 4;
  if (v14 <= 0xFC)
    goto LABEL_33;
LABEL_44:
  v17 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v18 = v15 + v6 + v17;
  v19 = (unint64_t)&__dst[v18];
  v20 = ((unint64_t)__src + v18) & ~v17;
  if (v6 > 3)
  {
LABEL_47:
    v22 = *(unsigned __int8 *)(v20 + v6);
    goto LABEL_50;
  }
  v21 = ((1 << v7) + 1) >> v7;
  if (v21 > 0xFFFC)
  {
    v22 = *(_DWORD *)(v20 + v6);
  }
  else
  {
    if (v21 <= 0xFC)
      goto LABEL_47;
    v22 = *(unsigned __int16 *)(v20 + v6);
  }
LABEL_50:
  v23 = (_OWORD *)(v19 & ~v17);
  if (v22 >= 3)
  {
    if (v6 <= 3)
      v24 = v6;
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  if (v22 == 2)
  {
    (*(void (**)(_OWORD *))(v5 + 16))(v23);
    if (v6 <= 3)
    {
      v26 = ((1 << v7) + 1) >> v7;
      if (v26 > 0xFFFC)
      {
        v27 = 2;
        goto LABEL_71;
      }
      if (v26 > 0xFC)
      {
        LOWORD(v27) = 2;
        goto LABEL_74;
      }
    }
    *((_BYTE *)v23 + v6) = 2;
    return __dst;
  }
  if (v22 == 1)
  {
    (*(void (**)(_OWORD *))(v5 + 16))(v23);
    if (v6 > 3)
    {
LABEL_66:
      *((_BYTE *)v23 + v6) = 1;
      return __dst;
    }
    v27 = 1;
    v28 = ((1 << v7) + 1) >> v7;
    if (v28 <= 0xFFFC)
    {
      if (v28 <= 0xFC)
        goto LABEL_66;
LABEL_74:
      *(_WORD *)((char *)v23 + v6) = v27;
      return __dst;
    }
LABEL_71:
    *(_DWORD *)((char *)v23 + v6) = v27;
    return __dst;
  }
  v25 = *(_OWORD *)v20;
  *(_QWORD *)((v19 & ~v17) + 0x10) = *(_QWORD *)(v20 + 16);
  *v23 = v25;
  if (v6 > 3)
    goto LABEL_58;
  v29 = ((1 << v7) + 1) >> v7;
  if (v29 > 0xFFFC)
  {
    *(_DWORD *)((char *)v23 + v6) = 0;
    return __dst;
  }
  if (v29 <= 0xFC)
LABEL_58:
    *((_BYTE *)v23 + v6) = 0;
  else
    *(_WORD *)((char *)v23 + v6) = 0;
  return __dst;
}

_BYTE *assignWithCopy for AnimatedValueKeyframe.InterpolationParameters(_BYTE *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x18uLL)
    v7 = 24;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if (__dst == (_BYTE *)__src)
  {
LABEL_45:
    if (v7 <= 3)
      goto LABEL_55;
    goto LABEL_46;
  }
  v8 = 8 * v7;
  if (v7 > 3)
    goto LABEL_8;
  v9 = ((1 << v8) + 1) >> v8;
  if (v9 <= 0xFFFC)
  {
    if (v9 > 0xFC)
    {
      v10 = *(unsigned __int16 *)&__dst[v7];
      if (v10 < 3)
        goto LABEL_17;
      goto LABEL_13;
    }
LABEL_8:
    v10 = __dst[v7];
    if (v10 < 3)
      goto LABEL_17;
LABEL_13:
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  v10 = *(_DWORD *)&__dst[v7];
  if (v10 >= 3)
    goto LABEL_13;
LABEL_17:
  if (v10 - 1 <= 1)
    (*(void (**)(_BYTE *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
  if (v7 > 3)
    goto LABEL_22;
  v12 = ((1 << v8) + 1) >> v8;
  if (v12 <= 0xFFFC)
  {
    if (v12 > 0xFC)
    {
      v13 = *(unsigned __int16 *)((char *)__src + v7);
      if (v13 < 3)
        goto LABEL_31;
      goto LABEL_27;
    }
LABEL_22:
    v13 = *((unsigned __int8 *)__src + v7);
    if (v13 < 3)
      goto LABEL_31;
LABEL_27:
    if (v7 <= 3)
      v14 = v7;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  v13 = *(_DWORD *)((char *)__src + v7);
  if (v13 >= 3)
    goto LABEL_27;
LABEL_31:
  if (v13 == 2)
  {
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 16))(__dst, __src, v5);
    if (v7 <= 3)
    {
      v16 = ((1 << v8) + 1) >> v8;
      if (v16 > 0xFFFC)
      {
        v17 = 2;
        goto LABEL_51;
      }
      if (v16 > 0xFC)
      {
        LOWORD(v17) = 2;
        goto LABEL_54;
      }
    }
    __dst[v7] = 2;
    if (v7 <= 3)
      goto LABEL_55;
LABEL_46:
    v19 = 1;
LABEL_58:
    v22 = 1;
    goto LABEL_59;
  }
  if (v13 == 1)
  {
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 16))(__dst, __src, v5);
    if (v7 > 3)
    {
LABEL_44:
      __dst[v7] = 1;
      goto LABEL_45;
    }
    v17 = 1;
    v18 = ((1 << v8) + 1) >> v8;
    if (v18 <= 0xFFFC)
    {
      if (v18 <= 0xFC)
        goto LABEL_44;
LABEL_54:
      *(_WORD *)&__dst[v7] = v17;
      goto LABEL_55;
    }
LABEL_51:
    *(_DWORD *)&__dst[v7] = v17;
    goto LABEL_55;
  }
  v15 = *(_OWORD *)__src;
  *((_QWORD *)__dst + 2) = __src[2];
  *(_OWORD *)__dst = v15;
  if (v7 <= 3)
  {
    v20 = ((1 << v8) + 1) >> v8;
    if (v20 > 0xFFFC)
    {
      *(_DWORD *)&__dst[v7] = 0;
      goto LABEL_55;
    }
    if (v20 > 0xFC)
    {
      *(_WORD *)&__dst[v7] = 0;
      goto LABEL_55;
    }
  }
  __dst[v7] = 0;
  if (v7 > 3)
    goto LABEL_46;
LABEL_55:
  v19 = 0;
  v21 = ((1 << (8 * v7)) + 1) >> (8 * v7);
  v22 = 2;
  if (v21 > 0xFFFC)
    v22 = 4;
  if (v21 <= 0xFC)
    goto LABEL_58;
LABEL_59:
  v23 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v24 = v22 + v7 + v23;
  v25 = (unint64_t)&__dst[v24] & ~v23;
  v26 = ((unint64_t)__src + v24) & ~v23;
  if (v25 == v26)
    return __dst;
  v27 = 8 * v7;
  if ((v19 & 1) != 0)
    goto LABEL_63;
  v28 = ((1 << v27) + 1) >> v27;
  if (v28 <= 0xFFFC)
  {
    if (v28 > 0xFC)
    {
      v29 = *(unsigned __int16 *)(v25 + v7);
      if (v29 < 3)
        goto LABEL_72;
      goto LABEL_68;
    }
LABEL_63:
    v29 = *(unsigned __int8 *)(v25 + v7);
    if (v29 < 3)
      goto LABEL_72;
LABEL_68:
    if (v19)
      v30 = 4;
    else
      v30 = v7;
    __asm { BR              X12 }
  }
  v29 = *(_DWORD *)(v25 + v7);
  if (v29 >= 3)
    goto LABEL_68;
LABEL_72:
  if (v29 - 1 <= 1)
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v25, v5);
  if ((v19 & 1) != 0)
    goto LABEL_77;
  v31 = ((1 << v27) + 1) >> v27;
  if (v31 <= 0xFFFC)
  {
    if (v31 > 0xFC)
    {
      v32 = *(unsigned __int16 *)(v26 + v7);
      if (v32 < 3)
        goto LABEL_86;
      goto LABEL_82;
    }
LABEL_77:
    v32 = *(unsigned __int8 *)(v26 + v7);
    if (v32 < 3)
      goto LABEL_86;
LABEL_82:
    if (v19)
      v33 = 4;
    else
      v33 = v7;
    __asm { BR              X12 }
  }
  v32 = *(_DWORD *)(v26 + v7);
  if (v32 >= 3)
    goto LABEL_82;
LABEL_86:
  if (v32 == 2)
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v25, v26, v5);
    if ((v19 & 1) == 0)
    {
      v35 = ((1 << v27) + 1) >> v27;
      if (v35 > 0xFFFC)
      {
        v36 = 2;
        goto LABEL_102;
      }
      if (v35 > 0xFC)
      {
        LOWORD(v36) = 2;
        goto LABEL_105;
      }
    }
    *(_BYTE *)(v25 + v7) = 2;
    return __dst;
  }
  if (v32 == 1)
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v25, v26, v5);
    if ((v19 & 1) != 0)
    {
LABEL_97:
      *(_BYTE *)(v25 + v7) = 1;
      return __dst;
    }
    v36 = 1;
    v37 = ((1 << v27) + 1) >> v27;
    if (v37 <= 0xFFFC)
    {
      if (v37 <= 0xFC)
        goto LABEL_97;
LABEL_105:
      *(_WORD *)(v25 + v7) = v36;
      return __dst;
    }
LABEL_102:
    *(_DWORD *)(v25 + v7) = v36;
    return __dst;
  }
  v34 = *(_OWORD *)v26;
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
  *(_OWORD *)v25 = v34;
  if ((v19 & 1) != 0)
    goto LABEL_89;
  v38 = ((1 << v27) + 1) >> v27;
  if (v38 > 0xFFFC)
  {
    *(_DWORD *)(v25 + v7) = 0;
    return __dst;
  }
  if (v38 <= 0xFC)
LABEL_89:
    *(_BYTE *)(v25 + v7) = 0;
  else
    *(_WORD *)(v25 + v7) = 0;
  return __dst;
}

_BYTE *initializeWithTake for AnimatedValueKeyframe.InterpolationParameters(_BYTE *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x18uLL)
    v6 = 24;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = 8 * v6;
  if (v6 > 3)
    goto LABEL_7;
  v8 = ((1 << v7) + 1) >> v7;
  if (v8 <= 0xFFFC)
  {
    if (v8 > 0xFC)
    {
      v9 = *(unsigned __int16 *)((char *)__src + v6);
      if (v9 < 3)
        goto LABEL_16;
      goto LABEL_12;
    }
LABEL_7:
    v9 = *((unsigned __int8 *)__src + v6);
    if (v9 < 3)
      goto LABEL_16;
LABEL_12:
    if (v6 <= 3)
      v10 = v6;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  v9 = *(_DWORD *)((char *)__src + v6);
  if (v9 >= 3)
    goto LABEL_12;
LABEL_16:
  if (v9 == 2)
  {
    (*(void (**)(_BYTE *, _QWORD *, _QWORD))(v5 + 32))(__dst, __src, *(_QWORD *)(a3 + 16));
    if (v6 <= 3)
    {
      v11 = ((1 << v7) + 1) >> v7;
      if (v11 > 0xFFFC)
      {
        v13 = 2;
        goto LABEL_38;
      }
      if (v11 > 0xFC)
      {
        LOWORD(v13) = 2;
        goto LABEL_41;
      }
    }
    v12 = 2;
    goto LABEL_29;
  }
  if (v9 == 1)
  {
    (*(void (**)(_BYTE *, _QWORD *, _QWORD))(v5 + 32))(__dst, __src, *(_QWORD *)(a3 + 16));
    if (v6 > 3)
    {
LABEL_28:
      v12 = 1;
LABEL_29:
      __dst[v6] = v12;
      if (v6 > 3)
      {
LABEL_33:
        v15 = 1;
        goto LABEL_44;
      }
      goto LABEL_30;
    }
    v13 = 1;
    v11 = ((1 << v7) + 1) >> v7;
    if (v11 <= 0xFFFC)
    {
      if (v11 <= 0xFC)
        goto LABEL_28;
LABEL_41:
      *(_WORD *)&__dst[v6] = v13;
LABEL_42:
      v16 = v11 > 0xFFFC;
      v15 = 2;
      if (v16)
        v15 = 4;
      goto LABEL_44;
    }
LABEL_38:
    *(_DWORD *)&__dst[v6] = v13;
    goto LABEL_42;
  }
  *(_OWORD *)__dst = *(_OWORD *)__src;
  *((_QWORD *)__dst + 2) = __src[2];
  if (v6 > 3)
    goto LABEL_19;
  v11 = ((1 << v7) + 1) >> v7;
  if (v11 > 0xFFFC)
  {
    *(_DWORD *)&__dst[v6] = 0;
    goto LABEL_42;
  }
  if (v11 > 0xFC)
  {
    *(_WORD *)&__dst[v6] = 0;
    goto LABEL_42;
  }
LABEL_19:
  __dst[v6] = 0;
  if (v6 > 3)
    goto LABEL_33;
LABEL_30:
  v14 = ((1 << v7) + 1) >> v7;
  v15 = 2;
  if (v14 > 0xFFFC)
    v15 = 4;
  if (v14 <= 0xFC)
    goto LABEL_33;
LABEL_44:
  v17 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v18 = v15 + v6 + v17;
  v19 = (unint64_t)&__dst[v18];
  v20 = ((unint64_t)__src + v18) & ~v17;
  if (v6 > 3)
  {
LABEL_47:
    v22 = *(unsigned __int8 *)(v20 + v6);
    goto LABEL_50;
  }
  v21 = ((1 << v7) + 1) >> v7;
  if (v21 > 0xFFFC)
  {
    v22 = *(_DWORD *)(v20 + v6);
  }
  else
  {
    if (v21 <= 0xFC)
      goto LABEL_47;
    v22 = *(unsigned __int16 *)(v20 + v6);
  }
LABEL_50:
  v23 = (_OWORD *)(v19 & ~v17);
  if (v22 >= 3)
  {
    if (v6 <= 3)
      v24 = v6;
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  if (v22 == 2)
  {
    (*(void (**)(_OWORD *))(v5 + 32))(v23);
    if (v6 <= 3)
    {
      v26 = ((1 << v7) + 1) >> v7;
      if (v26 > 0xFFFC)
      {
        v27 = 2;
        goto LABEL_71;
      }
      if (v26 > 0xFC)
      {
        LOWORD(v27) = 2;
        goto LABEL_74;
      }
    }
    *((_BYTE *)v23 + v6) = 2;
    return __dst;
  }
  if (v22 == 1)
  {
    (*(void (**)(_OWORD *))(v5 + 32))(v23);
    if (v6 > 3)
    {
LABEL_66:
      *((_BYTE *)v23 + v6) = 1;
      return __dst;
    }
    v27 = 1;
    v28 = ((1 << v7) + 1) >> v7;
    if (v28 <= 0xFFFC)
    {
      if (v28 <= 0xFC)
        goto LABEL_66;
LABEL_74:
      *(_WORD *)((char *)v23 + v6) = v27;
      return __dst;
    }
LABEL_71:
    *(_DWORD *)((char *)v23 + v6) = v27;
    return __dst;
  }
  v25 = *(_OWORD *)v20;
  *(_QWORD *)((v19 & ~v17) + 0x10) = *(_QWORD *)(v20 + 16);
  *v23 = v25;
  if (v6 > 3)
    goto LABEL_58;
  v29 = ((1 << v7) + 1) >> v7;
  if (v29 > 0xFFFC)
  {
    *(_DWORD *)((char *)v23 + v6) = 0;
    return __dst;
  }
  if (v29 <= 0xFC)
LABEL_58:
    *((_BYTE *)v23 + v6) = 0;
  else
    *(_WORD *)((char *)v23 + v6) = 0;
  return __dst;
}

_BYTE *assignWithTake for AnimatedValueKeyframe.InterpolationParameters(_BYTE *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x18uLL)
    v7 = 24;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if (__dst == (_BYTE *)__src)
  {
LABEL_45:
    if (v7 <= 3)
      goto LABEL_55;
    goto LABEL_46;
  }
  v8 = 8 * v7;
  if (v7 > 3)
    goto LABEL_8;
  v9 = ((1 << v8) + 1) >> v8;
  if (v9 <= 0xFFFC)
  {
    if (v9 > 0xFC)
    {
      v10 = *(unsigned __int16 *)&__dst[v7];
      if (v10 < 3)
        goto LABEL_17;
      goto LABEL_13;
    }
LABEL_8:
    v10 = __dst[v7];
    if (v10 < 3)
      goto LABEL_17;
LABEL_13:
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  v10 = *(_DWORD *)&__dst[v7];
  if (v10 >= 3)
    goto LABEL_13;
LABEL_17:
  if (v10 - 1 <= 1)
    (*(void (**)(_BYTE *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
  if (v7 > 3)
    goto LABEL_22;
  v12 = ((1 << v8) + 1) >> v8;
  if (v12 <= 0xFFFC)
  {
    if (v12 > 0xFC)
    {
      v13 = *(unsigned __int16 *)((char *)__src + v7);
      if (v13 < 3)
        goto LABEL_31;
      goto LABEL_27;
    }
LABEL_22:
    v13 = *((unsigned __int8 *)__src + v7);
    if (v13 < 3)
      goto LABEL_31;
LABEL_27:
    if (v7 <= 3)
      v14 = v7;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  v13 = *(_DWORD *)((char *)__src + v7);
  if (v13 >= 3)
    goto LABEL_27;
LABEL_31:
  if (v13 == 2)
  {
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(__dst, __src, v5);
    if (v7 <= 3)
    {
      v15 = ((1 << v8) + 1) >> v8;
      if (v15 > 0xFFFC)
      {
        v16 = 2;
        goto LABEL_51;
      }
      if (v15 > 0xFC)
      {
        LOWORD(v16) = 2;
        goto LABEL_54;
      }
    }
    __dst[v7] = 2;
    if (v7 <= 3)
      goto LABEL_55;
LABEL_46:
    v18 = 1;
LABEL_58:
    v21 = 1;
    goto LABEL_59;
  }
  if (v13 == 1)
  {
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(__dst, __src, v5);
    if (v7 > 3)
    {
LABEL_44:
      __dst[v7] = 1;
      goto LABEL_45;
    }
    v16 = 1;
    v17 = ((1 << v8) + 1) >> v8;
    if (v17 <= 0xFFFC)
    {
      if (v17 <= 0xFC)
        goto LABEL_44;
LABEL_54:
      *(_WORD *)&__dst[v7] = v16;
      goto LABEL_55;
    }
LABEL_51:
    *(_DWORD *)&__dst[v7] = v16;
    goto LABEL_55;
  }
  *(_OWORD *)__dst = *(_OWORD *)__src;
  *((_QWORD *)__dst + 2) = __src[2];
  if (v7 <= 3)
  {
    v19 = ((1 << v8) + 1) >> v8;
    if (v19 > 0xFFFC)
    {
      *(_DWORD *)&__dst[v7] = 0;
      goto LABEL_55;
    }
    if (v19 > 0xFC)
    {
      *(_WORD *)&__dst[v7] = 0;
      goto LABEL_55;
    }
  }
  __dst[v7] = 0;
  if (v7 > 3)
    goto LABEL_46;
LABEL_55:
  v18 = 0;
  v20 = ((1 << (8 * v7)) + 1) >> (8 * v7);
  v21 = 2;
  if (v20 > 0xFFFC)
    v21 = 4;
  if (v20 <= 0xFC)
    goto LABEL_58;
LABEL_59:
  v22 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v23 = v21 + v7 + v22;
  v24 = (unint64_t)&__dst[v23] & ~v22;
  v25 = ((unint64_t)__src + v23) & ~v22;
  if (v24 == v25)
    return __dst;
  v26 = 8 * v7;
  if ((v18 & 1) != 0)
    goto LABEL_63;
  v27 = ((1 << v26) + 1) >> v26;
  if (v27 <= 0xFFFC)
  {
    if (v27 > 0xFC)
    {
      v28 = *(unsigned __int16 *)(v24 + v7);
      if (v28 < 3)
        goto LABEL_72;
      goto LABEL_68;
    }
LABEL_63:
    v28 = *(unsigned __int8 *)(v24 + v7);
    if (v28 < 3)
      goto LABEL_72;
LABEL_68:
    if (v18)
      v29 = 4;
    else
      v29 = v7;
    __asm { BR              X12 }
  }
  v28 = *(_DWORD *)(v24 + v7);
  if (v28 >= 3)
    goto LABEL_68;
LABEL_72:
  if (v28 - 1 <= 1)
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v24, v5);
  if ((v18 & 1) != 0)
    goto LABEL_77;
  v30 = ((1 << v26) + 1) >> v26;
  if (v30 <= 0xFFFC)
  {
    if (v30 > 0xFC)
    {
      v31 = *(unsigned __int16 *)(v25 + v7);
      if (v31 < 3)
        goto LABEL_86;
      goto LABEL_82;
    }
LABEL_77:
    v31 = *(unsigned __int8 *)(v25 + v7);
    if (v31 < 3)
      goto LABEL_86;
LABEL_82:
    if (v18)
      v32 = 4;
    else
      v32 = v7;
    __asm { BR              X12 }
  }
  v31 = *(_DWORD *)(v25 + v7);
  if (v31 >= 3)
    goto LABEL_82;
LABEL_86:
  if (v31 == 2)
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(v24, v25, v5);
    if ((v18 & 1) == 0)
    {
      v34 = ((1 << v26) + 1) >> v26;
      if (v34 > 0xFFFC)
      {
        v35 = 2;
        goto LABEL_102;
      }
      if (v34 > 0xFC)
      {
        LOWORD(v35) = 2;
        goto LABEL_105;
      }
    }
    *(_BYTE *)(v24 + v7) = 2;
    return __dst;
  }
  if (v31 == 1)
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(v24, v25, v5);
    if ((v18 & 1) != 0)
    {
LABEL_97:
      *(_BYTE *)(v24 + v7) = 1;
      return __dst;
    }
    v35 = 1;
    v36 = ((1 << v26) + 1) >> v26;
    if (v36 <= 0xFFFC)
    {
      if (v36 <= 0xFC)
        goto LABEL_97;
LABEL_105:
      *(_WORD *)(v24 + v7) = v35;
      return __dst;
    }
LABEL_102:
    *(_DWORD *)(v24 + v7) = v35;
    return __dst;
  }
  v33 = *(_OWORD *)v25;
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
  *(_OWORD *)v24 = v33;
  if ((v18 & 1) != 0)
    goto LABEL_89;
  v37 = ((1 << v26) + 1) >> v26;
  if (v37 > 0xFFFC)
  {
    *(_DWORD *)(v24 + v7) = 0;
    return __dst;
  }
  if (v37 <= 0xFC)
LABEL_89:
    *(_BYTE *)(v24 + v7) = 0;
  else
    *(_WORD *)(v24 + v7) = 0;
  return __dst;
}

uint64_t getEnumTagSinglePayload for AnimatedValueKeyframe.InterpolationParameters(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v7;
  char v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  char v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  char v76;
  unsigned int v77;
  int v78;
  unsigned int v79;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= 0x18)
    v4 = 24;
  v5 = 8 * v4;
  if (v4 > 3)
  {
    v6 = 4;
LABEL_7:
    v8 = 8;
    goto LABEL_8;
  }
  v7 = ((1 << v5) + 1) >> v5;
  if (v7 > 0xFFFC)
    goto LABEL_11;
  v6 = v7 + 3;
  if (v7 <= 0xFC)
    goto LABEL_7;
  v8 = 16;
LABEL_8:
  v9 = (1 << v8) - v6;
  if ((v9 & 0x80000000) != 0)
  {
LABEL_11:
    v9 = 0x7FFFFFFF;
    if (v4 > 3)
      goto LABEL_10;
    goto LABEL_12;
  }
  if (v4 > 3)
  {
LABEL_10:
    v10 = 4;
LABEL_14:
    v12 = 8;
    goto LABEL_15;
  }
LABEL_12:
  v11 = ((1 << v5) + 1) >> v5;
  if (v11 > 0xFFFC)
  {
LABEL_16:
    v13 = 0x7FFFFFFF;
    goto LABEL_17;
  }
  v10 = v11 + 3;
  if (v11 <= 0xFC)
    goto LABEL_14;
  v12 = 16;
LABEL_15:
  v13 = (1 << v12) - v10;
  if ((v13 & 0x80000000) != 0)
    goto LABEL_16;
LABEL_17:
  if (v13 > v9)
    v9 = v13;
  if (v4 > 3)
    goto LABEL_23;
  v14 = ((1 << v5) + 1) >> v5;
  v15 = 2;
  if (v14 > 0xFFFC)
    v15 = 4;
  if (v14 <= 0xFC)
LABEL_23:
    v15 = 1;
  v16 = *(_DWORD *)(v3 + 80);
  if (v4 > 3)
    goto LABEL_28;
  v17 = ((1 << v5) + 1) >> v5;
  v18 = 2;
  if (v17 > 0xFFFC)
    v18 = 4;
  if (v17 <= 0xFC)
LABEL_28:
    v18 = 1;
  if (!a2)
    return 0;
  v19 = v16 & 0xF8 | 7;
  if (a2 <= v9)
    goto LABEL_50;
  v20 = ((v4 + v19 + v15) & ~v19) + v4 + v18;
  v21 = 8 * v20;
  if (v20 <= 3)
  {
    v23 = ((a2 - v9 + ~(-1 << v21)) >> v21) + 1;
    if (HIWORD(v23))
    {
      v22 = *(_DWORD *)(a1 + v20);
      if (!v22)
        goto LABEL_50;
      goto LABEL_41;
    }
    if (v23 > 0xFF)
    {
      v22 = *(unsigned __int16 *)(a1 + v20);
      if (!*(_WORD *)(a1 + v20))
        goto LABEL_50;
      goto LABEL_41;
    }
    if (v23 < 2)
    {
LABEL_50:
      if (!v9)
        return 0;
      if (v4 <= 3)
      {
        v28 = ((1 << v5) + 1) >> v5;
        if (v28 > 0xFFFC)
          goto LABEL_59;
        v27 = v28 + 3;
        if (v28 > 0xFC)
        {
          v29 = 16;
LABEL_56:
          v30 = (1 << v29) - v27;
          if ((v30 & 0x80000000) == 0)
          {
            if (v4 > 3)
            {
LABEL_58:
              v31 = 4;
              goto LABEL_62;
            }
LABEL_60:
            v32 = ((1 << v5) + 1) >> v5;
            if (v32 > 0xFFFC)
            {
LABEL_64:
              v34 = 0x7FFFFFFF;
LABEL_65:
              if (v34 > v30)
                v30 = v34;
              if (v4 <= 3)
              {
                v36 = ((1 << v5) + 1) >> v5;
                if (v36 > 0xFFFC)
                  goto LABEL_76;
                v35 = v36 + 3;
                if (v36 > 0xFC)
                {
                  v37 = 16;
LABEL_72:
                  v38 = (1 << v37) - v35;
                  if ((v38 & 0x80000000) == 0)
                  {
                    if (v38 == v30)
                      goto LABEL_74;
LABEL_77:
                    v40 = ~v19;
                    if (v4 > 3)
                      goto LABEL_80;
                    v41 = ((1 << v5) + 1) >> v5;
                    if (v41 > 0xFFFC)
                    {
                      v43 = a1 + v4 + v19 + 4;
LABEL_101:
                      v53 = v43 & v40;
                      if (v4 <= 3)
                      {
                        v55 = ((1 << v5) + 1) >> v5;
                        if (v55 > 0xFFFC)
                          goto LABEL_109;
                        v54 = v55 + 3;
                        if (v55 > 0xFC)
                        {
                          v56 = 16;
LABEL_106:
                          v57 = (1 << v56) - v54;
                          if ((v57 & 0x80000000) == 0)
                          {
                            if (v4 > 3)
                              goto LABEL_113;
LABEL_110:
                            v58 = ((1 << v5) + 1) >> v5;
                            v59 = 2;
                            if (v58 > 0xFFFC)
                              v59 = 4;
                            if (v58 > 0xFC)
                            {
LABEL_114:
                              if (!v30)
                                return 0;
                              v60 = v30 - v57;
                              if (v30 <= v57)
                                goto LABEL_157;
                              v61 = v59 + v4;
                              v62 = 8 * (v59 + v4);
                              if (v61 > 3)
                              {
LABEL_117:
                                v63 = *(unsigned __int8 *)(v53 + v61);
                                goto LABEL_149;
                              }
                              v65 = ((v60 + ~(-1 << v62)) >> v62) + 1;
                              if (HIWORD(v65))
                              {
                                v63 = *(_DWORD *)(v53 + v61);
                              }
                              else
                              {
                                if (v65 <= 0xFF)
                                {
                                  if (v65 < 2)
                                    goto LABEL_157;
                                  goto LABEL_117;
                                }
                                v63 = *(unsigned __int16 *)(v53 + v61);
                              }
LABEL_149:
                              if (v63)
                              {
                                v73 = (v63 - 1) << v62;
                                if (v61 > 3)
                                  v73 = 0;
                                if (!(_DWORD)v61)
                                  return v57 + v73 + 1;
                                if (v61 <= 3)
                                  v74 = v61;
                                else
                                  v74 = 4;
                                return ((uint64_t (*)(void))((char *)&loc_1874F79D8 + 4 * byte_187C39B88[v74 - 1]))();
                              }
LABEL_157:
                              if (v57)
                              {
                                if (v4 > 3)
                                {
                                  v68 = *(unsigned __int8 *)(v53 + v4);
                                  goto LABEL_160;
                                }
                                v77 = ((1 << v5) + 1) >> v5;
                                if (v77 <= 0xFFFC)
                                {
                                  v70 = v77 + 3;
                                  if (v77 <= 0xFC)
                                  {
                                    v71 = *(unsigned __int8 *)(v53 + v4);
                                    goto LABEL_165;
                                  }
                                  v78 = *(unsigned __int16 *)(v53 + v4);
LABEL_171:
                                  v72 = v78 | 0xFFFF0000;
                                  v75 = v78 ^ 0xFFFF;
                                  v76 = 16;
LABEL_172:
                                  v79 = (1 << v76) - v70;
                                  if ((v79 & 0x80000000) == 0)
                                    goto LABEL_174;
                                  goto LABEL_173;
                                }
                                v72 = *(_DWORD *)(v53 + v4);
LABEL_168:
                                v75 = ~v72;
LABEL_173:
                                v79 = 0x7FFFFFFF;
LABEL_174:
                                if (v79 > v75)
                                  return -v72;
                                else
                                  return 0;
                              }
                              return 0;
                            }
LABEL_113:
                            v59 = 1;
                            goto LABEL_114;
                          }
LABEL_109:
                          v57 = 0x7FFFFFFF;
                          if (v4 > 3)
                            goto LABEL_113;
                          goto LABEL_110;
                        }
                      }
                      else
                      {
                        v54 = 4;
                      }
                      v56 = 8;
                      goto LABEL_106;
                    }
                    if (v41 > 0xFC)
                      v42 = a1 + 2;
                    else
LABEL_80:
                      v42 = a1 + 1;
                    v43 = v42 + v4 + v19;
                    goto LABEL_101;
                  }
LABEL_76:
                  if (v30 == 0x7FFFFFFF)
                  {
LABEL_74:
                    if (v4 <= 3)
                    {
                      v44 = ((1 << v5) + 1) >> v5;
                      if (v44 > 0xFFFC)
                        goto LABEL_88;
                      v39 = v44 + 3;
                      if (v44 > 0xFC)
                      {
                        v45 = 16;
LABEL_85:
                        v46 = (1 << v45) - v39;
                        if ((v46 & 0x80000000) == 0)
                        {
                          if (v4 > 3)
                            goto LABEL_92;
LABEL_89:
                          v47 = ((1 << v5) + 1) >> v5;
                          v48 = 2;
                          if (v47 > 0xFFFC)
                            v48 = 4;
                          if (v47 > 0xFC)
                          {
LABEL_93:
                            if (!v30)
                              return 0;
                            v49 = v30 - v46;
                            if (v30 <= v46)
                              goto LABEL_140;
                            v50 = v48 + v4;
                            v51 = 8 * (v48 + v4);
                            if (v50 > 3)
                            {
LABEL_96:
                              v52 = *(unsigned __int8 *)(a1 + v50);
                              goto LABEL_132;
                            }
                            v64 = ((v49 + ~(-1 << v51)) >> v51) + 1;
                            if (HIWORD(v64))
                            {
                              v52 = *(_DWORD *)(a1 + v50);
                            }
                            else
                            {
                              if (v64 <= 0xFF)
                              {
                                if (v64 < 2)
                                  goto LABEL_140;
                                goto LABEL_96;
                              }
                              v52 = *(unsigned __int16 *)(a1 + v50);
                            }
LABEL_132:
                            if (v52)
                            {
                              v66 = (v52 - 1) << v51;
                              if (v50 > 3)
                                v66 = 0;
                              if (!(_DWORD)v50)
                                return v46 + v66 + 1;
                              if (v50 <= 3)
                                v67 = v50;
                              else
                                v67 = 4;
                              return ((uint64_t (*)(void))((char *)&loc_1874F7938 + 4 * byte_187C39B8C[v67 - 1]))();
                            }
LABEL_140:
                            if (v46)
                            {
                              if (v4 > 3)
                              {
                                v68 = *(unsigned __int8 *)(a1 + v4);
LABEL_160:
                                v72 = v68 | 0xFFFFFF00;
                                v75 = v68 ^ 0xFF;
                                v76 = 8;
                                v70 = 4;
                                goto LABEL_172;
                              }
                              v69 = ((1 << v5) + 1) >> v5;
                              if (v69 <= 0xFFFC)
                              {
                                v70 = v69 + 3;
                                if (v69 <= 0xFC)
                                {
                                  v71 = *(unsigned __int8 *)(a1 + v4);
LABEL_165:
                                  v72 = v71 | 0xFFFFFF00;
                                  v75 = v71 ^ 0xFF;
                                  v76 = 8;
                                  goto LABEL_172;
                                }
                                v78 = *(unsigned __int16 *)(a1 + v4);
                                goto LABEL_171;
                              }
                              v72 = *(_DWORD *)(a1 + v4);
                              goto LABEL_168;
                            }
                            return 0;
                          }
LABEL_92:
                          v48 = 1;
                          goto LABEL_93;
                        }
LABEL_88:
                        v46 = 0x7FFFFFFF;
                        if (v4 > 3)
                          goto LABEL_92;
                        goto LABEL_89;
                      }
                    }
                    else
                    {
                      v39 = 4;
                    }
                    v45 = 8;
                    goto LABEL_85;
                  }
                  goto LABEL_77;
                }
              }
              else
              {
                v35 = 4;
              }
              v37 = 8;
              goto LABEL_72;
            }
            v31 = v32 + 3;
            if (v32 > 0xFC)
            {
              v33 = 16;
LABEL_63:
              v34 = (1 << v33) - v31;
              if ((v34 & 0x80000000) == 0)
                goto LABEL_65;
              goto LABEL_64;
            }
LABEL_62:
            v33 = 8;
            goto LABEL_63;
          }
LABEL_59:
          v30 = 0x7FFFFFFF;
          if (v4 > 3)
            goto LABEL_58;
          goto LABEL_60;
        }
      }
      else
      {
        v27 = 4;
      }
      v29 = 8;
      goto LABEL_56;
    }
  }
  v22 = *(unsigned __int8 *)(a1 + v20);
  if (!*(_BYTE *)(a1 + v20))
    goto LABEL_50;
LABEL_41:
  v24 = (v22 - 1) << v21;
  if (v20 > 3)
    v24 = 0;
  if (!(_DWORD)v20)
    return v9 + v24 + 1;
  if (v20 <= 3)
    v25 = v20;
  else
    v25 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874F7534 + 4 * byte_187C39B84[v25 - 1]))();
}

void storeEnumTagSinglePayload for AnimatedValueKeyframe.InterpolationParameters(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  char v7;
  int v8;
  char v9;
  unsigned int v10;
  int v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  size_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= 0x18)
    v6 = 24;
  v7 = 8 * v6;
  if (v6 <= 3)
  {
    v14 = ((1 << v7) + 1) >> v7;
    if (v14 > 0xFFFC)
      goto LABEL_15;
    v8 = v14 + 3;
    if (v14 > 0xFC)
    {
      v9 = 16;
LABEL_6:
      v10 = (1 << v9) - v8;
      if ((v10 & 0x80000000) == 0)
      {
        if (v6 > 3)
        {
LABEL_8:
          v11 = 4;
          goto LABEL_9;
        }
LABEL_16:
        v15 = ((1 << v7) + 1) >> v7;
        if (v15 > 0xFFFC)
        {
LABEL_19:
          v13 = 0x7FFFFFFF;
LABEL_20:
          if (v13 > v10)
            v10 = v13;
          if (v6 > 3)
            goto LABEL_26;
          v16 = ((1 << v7) + 1) >> v7;
          v17 = 2;
          if (v16 > 0xFFFC)
            v17 = 4;
          if (v16 <= 0xFC)
LABEL_26:
            v17 = 1;
          v18 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
          v19 = (v6 + v18 + v17) & ~v18;
          if (v6 > 3)
            goto LABEL_31;
          v20 = ((1 << v7) + 1) >> v7;
          v21 = 2;
          if (v20 > 0xFFFC)
            v21 = 4;
          if (v20 <= 0xFC)
LABEL_31:
            v21 = 1;
          v22 = v19 + v6 + v21;
          if (a3 <= v10)
          {
            v23 = 0u;
          }
          else if (v22 <= 3)
          {
            v25 = ((a3 - v10 + ~(-1 << (8 * v22))) >> (8 * v22)) + 1;
            if (HIWORD(v25))
            {
              v23 = 4u;
            }
            else if (v25 >= 0x100)
            {
              v23 = 2;
            }
            else
            {
              v23 = v25 > 1;
            }
          }
          else
          {
            v23 = 1u;
          }
          if (v10 < a2)
          {
            v24 = ~v10 + a2;
            if (v22 < 4)
            {
              if ((_DWORD)v22)
              {
                v26 = v24 & ~(-1 << (8 * v22));
                bzero(a1, v22);
                if ((_DWORD)v22 == 3)
                {
                  *a1 = v26;
                  *((_BYTE *)a1 + 2) = BYTE2(v26);
                }
                else if ((_DWORD)v22 == 2)
                {
                  *a1 = v26;
                }
                else
                {
                  *(_BYTE *)a1 = v26;
                }
              }
            }
            else
            {
              bzero(a1, v22);
              *(_DWORD *)a1 = v24;
            }
            __asm { BR              X10 }
          }
          __asm { BR              X14 }
        }
        v11 = v15 + 3;
        if (v15 > 0xFC)
        {
          v12 = 16;
LABEL_10:
          v13 = (1 << v12) - v11;
          if ((v13 & 0x80000000) == 0)
            goto LABEL_20;
          goto LABEL_19;
        }
LABEL_9:
        v12 = 8;
        goto LABEL_10;
      }
LABEL_15:
      v10 = 0x7FFFFFFF;
      if (v6 > 3)
        goto LABEL_8;
      goto LABEL_16;
    }
  }
  else
  {
    v8 = 4;
  }
  v9 = 8;
  goto LABEL_6;
}

void sub_1874F801C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1874F8238(unsigned int a1@<W8>)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  *(_WORD *)(v2 + v3) = 0;
  if (a1 <= 3)
  {
    v4 = ((1 << v1) + 1) >> v1;
    if (v4 > 0xFFFC)
      JUMPOUT(0x1874F82C4);
    if (v4 > 0xFC)
      JUMPOUT(0x1874F82D4);
  }
  JUMPOUT(0x1874F82BCLL);
}

void sub_1874F8280(int a1@<W1>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  *(_WORD *)(v3 + v4) = 0;
  v5 = -a1;
  if (a2 > 3)
    goto LABEL_4;
  v6 = ((1 << v2) + 1) >> v2;
  if (v6 > 0xFFFC)
  {
    *(_DWORD *)(v3 + a2) = v5;
  }
  else
  {
    if (v6 <= 0xFC)
    {
LABEL_4:
      *(_BYTE *)(v3 + a2) = v5;
      goto LABEL_7;
    }
    *(_WORD *)(v3 + a2) = v5;
  }
LABEL_7:
  JUMPOUT(0x1874F8348);
}

void sub_1874F833C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata completion function for AnimatedValueKeyframe.InterpolationParameters.Mode()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatedValueKeyframe.InterpolationParameters.Mode(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v11;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;

  v3 = __dst;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x18uLL)
    v5 = 24;
  else
    v5 = *(_QWORD *)(v4 + 64);
  if (v5 > 3)
  {
    v6 = v5 + 1;
    v7 = *(_DWORD *)(v4 + 80);
    v8 = v7 & 0x1000F8;
    goto LABEL_9;
  }
  v9 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  v7 = *(_DWORD *)(v4 + 80);
  if (v9 > 0xFFFC)
  {
    if ((unint64_t)(v5 + 4) > 0x18 || (v7 & 0x1000F8) != 0)
      goto LABEL_27;
    v11 = *(_DWORD *)((char *)a2 + v5);
    if (v11 < 3)
      goto LABEL_34;
    goto LABEL_30;
  }
  v8 = v7 & 0x1000F8;
  if (v9 > 0xFC)
  {
    if ((unint64_t)(v5 + 2) > 0x18 || v8 != 0)
      goto LABEL_27;
    v11 = *(unsigned __int16 *)((char *)a2 + v5);
    if (v11 < 3)
      goto LABEL_34;
LABEL_30:
    if (v5 <= 3)
      v16 = v5;
    else
      v16 = 4;
    __asm { BR              X13 }
  }
  v6 = v5 + 1;
LABEL_9:
  if (v6 > 0x18 || v8 != 0)
  {
LABEL_27:
    v14 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v14 + (((v7 & 0xF8 | 7u) + 16) & ~(unint64_t)(v7 & 0xF8 | 7u)));
    swift_retain();
    return v3;
  }
  v11 = *((unsigned __int8 *)a2 + v5);
  if (v11 >= 3)
    goto LABEL_30;
LABEL_34:
  if (v11 == 2)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(__dst);
    if (v5 <= 3)
    {
      v17 = ((1 << (8 * v5)) + 1) >> (8 * v5);
      if (v17 > 0xFFFC)
      {
        v18 = 2;
        goto LABEL_50;
      }
      if (v17 > 0xFC)
      {
        LOWORD(v18) = 2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)v3 + v5) = 2;
    return v3;
  }
  if (v11 == 1)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(__dst);
    if (v5 > 3)
    {
LABEL_45:
      *((_BYTE *)v3 + v5) = 1;
      return v3;
    }
    v18 = 1;
    v19 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v19 <= 0xFFFC)
    {
      if (v19 <= 0xFC)
        goto LABEL_45;
LABEL_53:
      *(_WORD *)((char *)v3 + v5) = v18;
      return v3;
    }
LABEL_50:
    *(_DWORD *)((char *)v3 + v5) = v18;
    return v3;
  }
  *(_OWORD *)__dst = *(_OWORD *)a2;
  __dst[2] = a2[2];
  if (v5 > 3)
    goto LABEL_37;
  v20 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v20 > 0xFFFC)
  {
    *(_DWORD *)((char *)__dst + v5) = 0;
    return v3;
  }
  if (v20 <= 0xFC)
LABEL_37:
    *((_BYTE *)__dst + v5) = 0;
  else
    *(_WORD *)((char *)__dst + v5) = 0;
  return v3;
}

uint64_t destroy for AnimatedValueKeyframe.InterpolationParameters.Mode(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x18)
    v3 = 24;
  if (v3 > 3)
    goto LABEL_4;
  v5 = ((1 << (8 * v3)) + 1) >> (8 * v3);
  if (v5 > 0xFFFC)
  {
    v4 = *(_DWORD *)(result + v3);
  }
  else
  {
    if (v5 <= 0xFC)
    {
LABEL_4:
      v4 = *(unsigned __int8 *)(result + v3);
      goto LABEL_9;
    }
    v4 = *(unsigned __int16 *)(result + v3);
  }
LABEL_9:
  if (v4 < 3)
  {
    if (v4 - 1 <= 1)
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v6 = v3;
    else
      v6 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1874F8728 + 4 * byte_187C39BB8[v6]))();
  }
  return result;
}

_BYTE *initializeWithCopy for AnimatedValueKeyframe.InterpolationParameters.Mode(_BYTE *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x18uLL)
    v5 = 24;
  else
    v5 = *(_QWORD *)(v4 + 64);
  if (v5 > 3)
    goto LABEL_7;
  v6 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v6 <= 0xFFFC)
  {
    if (v6 > 0xFC)
    {
      v7 = *(unsigned __int16 *)(a2 + v5);
      if (v7 < 3)
        goto LABEL_16;
      goto LABEL_12;
    }
LABEL_7:
    v7 = *(unsigned __int8 *)(a2 + v5);
    if (v7 < 3)
      goto LABEL_16;
LABEL_12:
    if (v5 <= 3)
      v8 = v5;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  v7 = *(_DWORD *)(a2 + v5);
  if (v7 >= 3)
    goto LABEL_12;
LABEL_16:
  if (v7 == 2)
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    if (v5 <= 3)
    {
      v9 = ((1 << (8 * v5)) + 1) >> (8 * v5);
      if (v9 > 0xFFFC)
      {
        v10 = 2;
        goto LABEL_32;
      }
      if (v9 > 0xFC)
      {
        LOWORD(v10) = 2;
        goto LABEL_35;
      }
    }
    __dst[v5] = 2;
    return __dst;
  }
  if (v7 == 1)
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    if (v5 > 3)
    {
LABEL_27:
      __dst[v5] = 1;
      return __dst;
    }
    v10 = 1;
    v11 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v11 <= 0xFFFC)
    {
      if (v11 <= 0xFC)
        goto LABEL_27;
LABEL_35:
      *(_WORD *)&__dst[v5] = v10;
      return __dst;
    }
LABEL_32:
    *(_DWORD *)&__dst[v5] = v10;
    return __dst;
  }
  *(_OWORD *)__dst = *(_OWORD *)a2;
  *((_QWORD *)__dst + 2) = *(_QWORD *)(a2 + 16);
  if (v5 > 3)
    goto LABEL_19;
  v12 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v12 > 0xFFFC)
  {
    *(_DWORD *)&__dst[v5] = 0;
    return __dst;
  }
  if (v12 <= 0xFC)
LABEL_19:
    __dst[v5] = 0;
  else
    *(_WORD *)&__dst[v5] = 0;
  return __dst;
}

_BYTE *assignWithCopy for AnimatedValueKeyframe.InterpolationParameters.Mode(_BYTE *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;

  if (__dst == (_BYTE *)__src)
    return __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x18uLL)
    v7 = 24;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = 8 * v7;
  if (v7 > 3)
    goto LABEL_8;
  v9 = ((1 << v8) + 1) >> v8;
  if (v9 <= 0xFFFC)
  {
    if (v9 > 0xFC)
    {
      v10 = *(unsigned __int16 *)&__dst[v7];
      if (v10 < 3)
        goto LABEL_17;
      goto LABEL_13;
    }
LABEL_8:
    v10 = __dst[v7];
    if (v10 < 3)
      goto LABEL_17;
LABEL_13:
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  v10 = *(_DWORD *)&__dst[v7];
  if (v10 >= 3)
    goto LABEL_13;
LABEL_17:
  if (v10 - 1 <= 1)
    (*(void (**)(_BYTE *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
  if (v7 > 3)
    goto LABEL_22;
  v12 = ((1 << v8) + 1) >> v8;
  if (v12 <= 0xFFFC)
  {
    if (v12 > 0xFC)
    {
      v13 = *(unsigned __int16 *)((char *)__src + v7);
      if (v13 < 3)
        goto LABEL_31;
      goto LABEL_27;
    }
LABEL_22:
    v13 = *((unsigned __int8 *)__src + v7);
    if (v13 < 3)
      goto LABEL_31;
LABEL_27:
    if (v7 <= 3)
      v14 = v7;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  v13 = *(_DWORD *)((char *)__src + v7);
  if (v13 >= 3)
    goto LABEL_27;
LABEL_31:
  if (v13 == 2)
  {
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 16))(__dst, __src, v5);
    if (v7 <= 3)
    {
      v16 = ((1 << v8) + 1) >> v8;
      if (v16 > 0xFFFC)
      {
        v17 = 2;
        goto LABEL_47;
      }
      if (v16 > 0xFC)
      {
        LOWORD(v17) = 2;
        goto LABEL_50;
      }
    }
    __dst[v7] = 2;
    return __dst;
  }
  if (v13 == 1)
  {
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 16))(__dst, __src, v5);
    if (v7 > 3)
    {
LABEL_42:
      __dst[v7] = 1;
      return __dst;
    }
    v17 = 1;
    v18 = ((1 << v8) + 1) >> v8;
    if (v18 <= 0xFFFC)
    {
      if (v18 <= 0xFC)
        goto LABEL_42;
LABEL_50:
      *(_WORD *)&__dst[v7] = v17;
      return __dst;
    }
LABEL_47:
    *(_DWORD *)&__dst[v7] = v17;
    return __dst;
  }
  v15 = *(_OWORD *)__src;
  *((_QWORD *)__dst + 2) = __src[2];
  *(_OWORD *)__dst = v15;
  if (v7 > 3)
    goto LABEL_34;
  v19 = ((1 << v8) + 1) >> v8;
  if (v19 > 0xFFFC)
  {
    *(_DWORD *)&__dst[v7] = 0;
    return __dst;
  }
  if (v19 <= 0xFC)
LABEL_34:
    __dst[v7] = 0;
  else
    *(_WORD *)&__dst[v7] = 0;
  return __dst;
}

_BYTE *initializeWithTake for AnimatedValueKeyframe.InterpolationParameters.Mode(_BYTE *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x18uLL)
    v5 = 24;
  else
    v5 = *(_QWORD *)(v4 + 64);
  if (v5 > 3)
    goto LABEL_7;
  v6 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v6 <= 0xFFFC)
  {
    if (v6 > 0xFC)
    {
      v7 = *(unsigned __int16 *)(a2 + v5);
      if (v7 < 3)
        goto LABEL_16;
      goto LABEL_12;
    }
LABEL_7:
    v7 = *(unsigned __int8 *)(a2 + v5);
    if (v7 < 3)
      goto LABEL_16;
LABEL_12:
    if (v5 <= 3)
      v8 = v5;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  v7 = *(_DWORD *)(a2 + v5);
  if (v7 >= 3)
    goto LABEL_12;
LABEL_16:
  if (v7 == 2)
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    if (v5 <= 3)
    {
      v9 = ((1 << (8 * v5)) + 1) >> (8 * v5);
      if (v9 > 0xFFFC)
      {
        v10 = 2;
        goto LABEL_32;
      }
      if (v9 > 0xFC)
      {
        LOWORD(v10) = 2;
        goto LABEL_35;
      }
    }
    __dst[v5] = 2;
    return __dst;
  }
  if (v7 == 1)
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    if (v5 > 3)
    {
LABEL_27:
      __dst[v5] = 1;
      return __dst;
    }
    v10 = 1;
    v11 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v11 <= 0xFFFC)
    {
      if (v11 <= 0xFC)
        goto LABEL_27;
LABEL_35:
      *(_WORD *)&__dst[v5] = v10;
      return __dst;
    }
LABEL_32:
    *(_DWORD *)&__dst[v5] = v10;
    return __dst;
  }
  *(_OWORD *)__dst = *(_OWORD *)a2;
  *((_QWORD *)__dst + 2) = *(_QWORD *)(a2 + 16);
  if (v5 > 3)
    goto LABEL_19;
  v12 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v12 > 0xFFFC)
  {
    *(_DWORD *)&__dst[v5] = 0;
    return __dst;
  }
  if (v12 <= 0xFC)
LABEL_19:
    __dst[v5] = 0;
  else
    *(_WORD *)&__dst[v5] = 0;
  return __dst;
}

_BYTE *assignWithTake for AnimatedValueKeyframe.InterpolationParameters.Mode(_BYTE *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;

  if (__dst == (_BYTE *)__src)
    return __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x18uLL)
    v7 = 24;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = 8 * v7;
  if (v7 > 3)
    goto LABEL_8;
  v9 = ((1 << v8) + 1) >> v8;
  if (v9 <= 0xFFFC)
  {
    if (v9 > 0xFC)
    {
      v10 = *(unsigned __int16 *)&__dst[v7];
      if (v10 < 3)
        goto LABEL_17;
      goto LABEL_13;
    }
LABEL_8:
    v10 = __dst[v7];
    if (v10 < 3)
      goto LABEL_17;
LABEL_13:
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  v10 = *(_DWORD *)&__dst[v7];
  if (v10 >= 3)
    goto LABEL_13;
LABEL_17:
  if (v10 - 1 <= 1)
    (*(void (**)(_BYTE *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
  if (v7 > 3)
    goto LABEL_22;
  v12 = ((1 << v8) + 1) >> v8;
  if (v12 <= 0xFFFC)
  {
    if (v12 > 0xFC)
    {
      v13 = *(unsigned __int16 *)((char *)__src + v7);
      if (v13 < 3)
        goto LABEL_31;
      goto LABEL_27;
    }
LABEL_22:
    v13 = *((unsigned __int8 *)__src + v7);
    if (v13 < 3)
      goto LABEL_31;
LABEL_27:
    if (v7 <= 3)
      v14 = v7;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  v13 = *(_DWORD *)((char *)__src + v7);
  if (v13 >= 3)
    goto LABEL_27;
LABEL_31:
  if (v13 == 2)
  {
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(__dst, __src, v5);
    if (v7 <= 3)
    {
      v15 = ((1 << v8) + 1) >> v8;
      if (v15 > 0xFFFC)
      {
        v16 = 2;
        goto LABEL_47;
      }
      if (v15 > 0xFC)
      {
        LOWORD(v16) = 2;
        goto LABEL_50;
      }
    }
    __dst[v7] = 2;
    return __dst;
  }
  if (v13 == 1)
  {
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(__dst, __src, v5);
    if (v7 > 3)
    {
LABEL_42:
      __dst[v7] = 1;
      return __dst;
    }
    v16 = 1;
    v17 = ((1 << v8) + 1) >> v8;
    if (v17 <= 0xFFFC)
    {
      if (v17 <= 0xFC)
        goto LABEL_42;
LABEL_50:
      *(_WORD *)&__dst[v7] = v16;
      return __dst;
    }
LABEL_47:
    *(_DWORD *)&__dst[v7] = v16;
    return __dst;
  }
  *(_OWORD *)__dst = *(_OWORD *)__src;
  *((_QWORD *)__dst + 2) = __src[2];
  if (v7 > 3)
    goto LABEL_34;
  v18 = ((1 << v8) + 1) >> v8;
  if (v18 > 0xFFFC)
  {
    *(_DWORD *)&__dst[v7] = 0;
    return __dst;
  }
  if (v18 <= 0xFC)
LABEL_34:
    __dst[v7] = 0;
  else
    *(_WORD *)&__dst[v7] = 0;
  return __dst;
}

uint64_t getEnumTagSinglePayload for AnimatedValueKeyframe.InterpolationParameters.Mode(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v12;
  unsigned int v13;
  int v14;
  int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v3 <= 0x18)
    v3 = 24;
  if (v3 > 3)
  {
    v4 = 4;
LABEL_7:
    v6 = 8;
    goto LABEL_8;
  }
  v5 = ((1 << (8 * v3)) + 1) >> (8 * v3);
  if (v5 > 0xFFFC)
    goto LABEL_11;
  v4 = v5 + 3;
  if (v5 <= 0xFC)
    goto LABEL_7;
  v6 = 16;
LABEL_8:
  v7 = (1 << v6) - v4;
  if ((v7 & 0x80000000) == 0)
  {
    if (v3 > 3)
      goto LABEL_15;
LABEL_12:
    v8 = ((1 << (8 * v3)) + 1) >> (8 * v3);
    v9 = 2;
    if (v8 > 0xFFFC)
      v9 = 4;
    if (v8 > 0xFC)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_11:
  v7 = 0x7FFFFFFF;
  if (v3 <= 3)
    goto LABEL_12;
LABEL_15:
  v9 = 1;
LABEL_16:
  if (!a2)
    return 0;
  if (a2 <= v7)
    goto LABEL_34;
  v10 = v9 + v3;
  v11 = 8 * v10;
  if (v10 <= 3)
  {
    v13 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_34;
      goto LABEL_27;
    }
    if (v13 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_34;
      goto LABEL_27;
    }
    if (v13 < 2)
    {
LABEL_34:
      if (v7)
      {
        if (v3 <= 3)
        {
          v21 = ((1 << (8 * v3)) + 1) >> (8 * v3);
          if (v21 > 0xFFFC)
          {
            v17 = *(_DWORD *)(a1 + v3);
            v18 = ~v17;
LABEL_44:
            v24 = 0x7FFFFFFF;
LABEL_45:
            if (v24 > v18)
              return -v17;
            else
              return 0;
          }
          v20 = v21 + 3;
          if (v21 > 0xFC)
          {
            v23 = *(unsigned __int16 *)(a1 + v3);
            v17 = v23 | 0xFFFF0000;
            v18 = v23 ^ 0xFFFF;
            v19 = 16;
          }
          else
          {
            v22 = *(unsigned __int8 *)(a1 + v3);
            v17 = v22 | 0xFFFFFF00;
            v18 = v22 ^ 0xFF;
            v19 = 8;
          }
        }
        else
        {
          v16 = *(unsigned __int8 *)(a1 + v3);
          v17 = v16 | 0xFFFFFF00;
          v18 = v16 ^ 0xFF;
          v19 = 8;
          v20 = 4;
        }
        v24 = (1 << v19) - v20;
        if ((v24 & 0x80000000) == 0)
          goto LABEL_45;
        goto LABEL_44;
      }
      return 0;
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_34;
LABEL_27:
  v14 = (v12 - 1) << v11;
  if (v10 > 3)
    v14 = 0;
  if (!(_DWORD)v10)
    return v7 + v14 + 1;
  if (v10 > 3)
    LODWORD(v10) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874F940C + 4 * byte_187C39BDB[(v10 - 1)]))();
}

void storeEnumTagSinglePayload for AnimatedValueKeyframe.InterpolationParameters.Mode(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  char v6;
  int v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x18)
    v5 = 24;
  v6 = 8 * v5;
  if (v5 <= 3)
  {
    v10 = ((1 << v6) + 1) >> v6;
    if (v10 > 0xFFFC)
      goto LABEL_12;
    v7 = v10 + 3;
    if (v10 > 0xFC)
    {
      v8 = 16;
LABEL_6:
      v9 = (1 << v8) - v7;
      if ((v9 & 0x80000000) == 0)
      {
        if (v5 > 3)
          goto LABEL_16;
LABEL_13:
        v11 = ((1 << v6) + 1) >> v6;
        v12 = 2;
        if (v11 > 0xFFFC)
          v12 = 4;
        if (v11 > 0xFC)
        {
LABEL_17:
          v13 = v12 + v5;
          if (a3 <= v9)
          {
            v14 = 0u;
          }
          else if (v13 <= 3)
          {
            v16 = ((a3 - v9 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
            if (HIWORD(v16))
            {
              v14 = 4u;
            }
            else if (v16 >= 0x100)
            {
              v14 = 2;
            }
            else
            {
              v14 = v16 > 1;
            }
          }
          else
          {
            v14 = 1u;
          }
          if (v9 < a2)
          {
            v15 = ~v9 + a2;
            if (v13 < 4)
            {
              if ((_DWORD)v13)
              {
                v17 = v15 & ~(-1 << (8 * v13));
                bzero(a1, v13);
                if ((_DWORD)v13 == 3)
                {
                  *a1 = v17;
                  *((_BYTE *)a1 + 2) = BYTE2(v17);
                }
                else if ((_DWORD)v13 == 2)
                {
                  *a1 = v17;
                }
                else
                {
                  *(_BYTE *)a1 = v17;
                }
              }
            }
            else
            {
              bzero(a1, v13);
              *(_DWORD *)a1 = v15;
            }
            __asm { BR              X10 }
          }
          __asm { BR              X12 }
        }
LABEL_16:
        v12 = 1;
        goto LABEL_17;
      }
LABEL_12:
      v9 = 0x7FFFFFFF;
      if (v5 > 3)
        goto LABEL_16;
      goto LABEL_13;
    }
  }
  else
  {
    v7 = 4;
  }
  v8 = 8;
  goto LABEL_6;
}

uint64_t getEnumTag for AnimatedValueKeyframe.InterpolationParameters.Mode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = 24;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 0x18uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (v2 > 3)
    goto LABEL_4;
  v4 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v4 > 0xFFFC)
  {
    v3 = *(unsigned int *)(a1 + v2);
  }
  else
  {
    if (v4 <= 0xFC)
    {
LABEL_4:
      v3 = *(unsigned __int8 *)(a1 + v2);
      goto LABEL_9;
    }
    v3 = *(unsigned __int16 *)(a1 + v2);
  }
LABEL_9:
  if (v3 < 3)
    return v3;
  if (v2 <= 3)
    v5 = v2;
  else
    v5 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874F97F8 + 4 * byte_187C39BE9[v5]))();
}

_BYTE *destructiveInjectEnumTag for AnimatedValueKeyframe.InterpolationParameters.Mode(_BYTE *result, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 0x18uLL)
    v4 = 24;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 2)
  {
    if (v4 < 4)
    {
      v6 = ((a2 - 3) >> (8 * v4)) + 3;
      v7 = (unsigned int *)&result[v4];
      v8 = ((1 << (8 * v4)) + 1) >> (8 * v4);
      if (v8 > 0xFFFC)
      {
        *v7 = v6;
      }
      else if (v8 > 0xFC)
      {
        *(_WORD *)v7 = v6;
      }
      else
      {
        *(_BYTE *)v7 = v6;
      }
    }
    else
    {
      result[v4] = 3;
    }
    if (v4 <= 3)
      v9 = v4;
    else
      v9 = 4;
    bzero(result, v4);
    __asm { BR              X10 }
  }
  if (v4 > 3)
    goto LABEL_6;
  v5 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v5 > 0xFFFC)
  {
    *(_DWORD *)&result[v4] = a2;
  }
  else
  {
    if (v5 <= 0xFC)
    {
LABEL_6:
      result[v4] = a2;
      return result;
    }
    *(_WORD *)&result[v4] = a2;
  }
  return result;
}

void static SliderStyle<>.capsule.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void CapsuleSliderStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for SliderStyle.Body : View in CapsuleSliderStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for CapsuleSliderStyle()
{
  return &type metadata for CapsuleSliderStyle;
}

uint64_t sub_1874F99D4()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CapsuleSlider<ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance CapsuleSlider<A>, (uint64_t (*)(uint64_t))type metadata accessor for CapsuleSlider<ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, (uint64_t)&protocol conformance descriptor for CapsuleSlider<A>);
}

void type metadata accessor for CapsuleSlider<ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for CapsuleSlider<ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>>)
  {
    type metadata accessor for ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for CapsuleSlider(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for CapsuleSlider<ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>>);
  }
}

void type metadata accessor for ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>)
  {
    type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>);
  }
}

void type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>)
  {
    v2 = lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle();
    v4 = type metadata accessor for LabelStyleWritingModifier(a1, (uint64_t)&type metadata for IconOnlyLabelStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>();
    v2 = v1;
    v3[0] = &protocol witness table for SliderStyleConfiguration.Label;
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t)&protocol conformance descriptor for LabelStyleWritingModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void static ToolbarBackgroundVisibility.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ToolbarBackgroundVisibility.visible.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ToolbarBackgroundVisibility.visibleOnScroll.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static ToolbarBackgroundVisibility.hidden.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

BOOL static ToolbarBackgroundVisibility.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

SwiftUI::ToolbarBackgroundVisibility __swiftcall ToolbarBackgroundVisibility.init(_:)(SwiftUI::ToolbarBackgroundVisibility result)
{
  _BYTE *v1;

  *v1 = 0x30100u >> (8 * result.role);
  return result;
}

uint64_t View.toolbarBackground<A>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13[8];
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28[8];
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  char v39;

  v8 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v10 + 16))(&v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
  v11 = AnyShapeStyle.init<A>(_:)();
  v13[0] = 4;
  v27 = 2;
  v26 = 3;
  v25 = 3;
  swift_bridgeObjectRetain();
  ToolbarAppearanceModifier.init(visibility:foregroundStyle:background:backgroundVisibility:backgroundVisibilityOnScrollDistance:backgroundOpacity:colorScheme:toolbarLegibility:fullScreenVisibility:bars:context:)(3, 0, v11, v13, 0, 1, 0, 1, (uint64_t)v28, &v27, &v26, &v25, a2, 2);
  v13[0] = v28[0];
  v14 = v29;
  v15 = v30;
  v16 = v31;
  v17 = v32;
  v18 = v33;
  v19 = v34;
  v20 = v35;
  v21 = v36;
  v22 = v37;
  v23 = v38;
  v24 = v39;
  MEMORY[0x18D75B4AC](v13, a3, &type metadata for ToolbarAppearanceModifier, a5);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t View.toolbarBackground(_:for:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8[8];
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  __int16 v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23[8];
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  __int16 v31;
  char v32;
  uint64_t v33;
  char v34;

  v8[0] = 0x30100u >> (8 * a1);
  v22 = 2;
  v21 = 3;
  v20 = 3;
  swift_bridgeObjectRetain();
  ToolbarAppearanceModifier.init(visibility:foregroundStyle:background:backgroundVisibility:backgroundVisibilityOnScrollDistance:backgroundOpacity:colorScheme:toolbarLegibility:fullScreenVisibility:bars:context:)(3, 0, 0, v8, 0, 1, 0, 1, (uint64_t)v23, &v22, &v21, &v20, a2, 1);
  v8[0] = v23[0];
  v9 = v24;
  v10 = v25;
  v11 = v26;
  v12 = v27;
  v13 = v28;
  v14 = v29;
  v15 = v30;
  v16 = v31;
  v17 = v32;
  v18 = v33;
  v19 = v34;
  MEMORY[0x18D75B4AC](v8, a3, &type metadata for ToolbarAppearanceModifier, a4);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t View.toolbarColorScheme(_:for:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7;
  char v9[8];
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24[8];
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  __int16 v32;
  char v33;
  uint64_t v34;
  char v35;

  v7 = *a1;
  v9[0] = 4;
  v23 = v7;
  v22 = 3;
  v21 = 3;
  swift_bridgeObjectRetain();
  ToolbarAppearanceModifier.init(visibility:foregroundStyle:background:backgroundVisibility:backgroundVisibilityOnScrollDistance:backgroundOpacity:colorScheme:toolbarLegibility:fullScreenVisibility:bars:context:)(3, 0, 0, v9, 0, 1, 0, 1, (uint64_t)v24, &v23, &v22, &v21, a2, 2);
  v9[0] = v24[0];
  v10 = v25;
  v11 = v26;
  v12 = v27;
  v13 = v28;
  v14 = v29;
  v15 = v30;
  v16 = v31;
  v17 = v32;
  v18 = v33;
  v19 = v34;
  v20 = v35;
  MEMORY[0x18D75B4AC](v9, a3, &type metadata for ToolbarAppearanceModifier, a4);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void View.toolbarLegibility(_:for:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View.toolbar(_:for:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v9[8];
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24[8];
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  __int16 v32;
  char v33;
  uint64_t v34;
  char v35;

  v9[0] = 4;
  v23 = 2;
  v22 = 3;
  v21 = 3;
  swift_bridgeObjectRetain();
  ToolbarAppearanceModifier.init(visibility:foregroundStyle:background:backgroundVisibility:backgroundVisibilityOnScrollDistance:backgroundOpacity:colorScheme:toolbarLegibility:fullScreenVisibility:bars:context:)(a1, 0, 0, v9, 0, 1, 0, 1, (uint64_t)v24, &v23, &v22, &v21, a2, 0);
  v9[0] = v24[0];
  v10 = v25;
  v11 = v26;
  v12 = v27;
  v13 = v28;
  v14 = v29;
  v15 = v30;
  v16 = v31;
  v17 = v32;
  v18 = v33;
  v19 = v34;
  v20 = v35;
  MEMORY[0x18D75B4AC](v9, a3, &type metadata for ToolbarAppearanceModifier, a4);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t View.toolbarForegroundStyle<A>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13[8];
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28[8];
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  char v39;

  v8 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v10 + 16))(&v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
  v11 = AnyShapeStyle.init<A>(_:)();
  v13[0] = 4;
  v27 = 2;
  v26 = 3;
  v25 = 3;
  swift_bridgeObjectRetain();
  ToolbarAppearanceModifier.init(visibility:foregroundStyle:background:backgroundVisibility:backgroundVisibilityOnScrollDistance:backgroundOpacity:colorScheme:toolbarLegibility:fullScreenVisibility:bars:context:)(3, v11, 0, v13, 0, 1, 0, 1, (uint64_t)v28, &v27, &v26, &v25, a2, 2);
  v13[0] = v28[0];
  v14 = v29;
  v15 = v30;
  v16 = v31;
  v17 = v32;
  v18 = v33;
  v19 = v34;
  v20 = v35;
  v21 = v36;
  v22 = v37;
  v23 = v38;
  v24 = v39;
  MEMORY[0x18D75B4AC](v13, a3, &type metadata for ToolbarAppearanceModifier, a5);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t View.avoidNavigationBarToToolbarConversion()()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.allowsNavigationBarToToolbarConversion.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey>, (uint64_t)&type metadata for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey>, (uint64_t)&type metadata for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t sub_1874FA4A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsNavigationBarToToolbarConversion.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1874FA4E4()
{
  return EnvironmentValues.allowsNavigationBarToToolbarConversion.setter();
}

ValueMetadata *type metadata accessor for ToolbarBackgroundVisibility()
{
  return &type metadata for ToolbarBackgroundVisibility;
}

uint64_t sub_1874FA51C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ToolbarAppearanceModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_1874FA574(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ToolbarAppearanceModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t storeEnumTagSinglePayload for ToolbarBackgroundVisibility(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1874FA614 + 4 * byte_187C39D95[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1874FA648 + 4 * asc_187C39D90[v4]))();
}

uint64_t sub_1874FA648(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874FA650(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1874FA658);
  return result;
}

uint64_t sub_1874FA664(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1874FA66CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1874FA670(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874FA678(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarBackgroundVisibility.Role()
{
  return &type metadata for ToolbarBackgroundVisibility.Role;
}

unint64_t lazy protocol witness table accessor for type ToolbarBackgroundVisibility.Role and conformance ToolbarBackgroundVisibility.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarBackgroundVisibility.Role and conformance ToolbarBackgroundVisibility.Role;
  if (!lazy protocol witness table cache variable for type ToolbarBackgroundVisibility.Role and conformance ToolbarBackgroundVisibility.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarBackgroundVisibility.Role, &type metadata for ToolbarBackgroundVisibility.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarBackgroundVisibility.Role and conformance ToolbarBackgroundVisibility.Role);
  }
  return result;
}

uint64_t EnvironmentValues.allowsNavigationBarToToolbarConversion.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey>, (uint64_t)&type metadata for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t FocusedValues.toolbarVisibility.getter()
{
  uint64_t v0;

  swift_retain();
  v0 = specialized FocusedValues.subscript.getter();
  swift_release();
  return v0;
}

uint64_t FocusedValues.toolbarVisibility.setter(uint64_t result)
{
  uint64_t v1;

  if (result != 3)
  {
    if ((*(_BYTE *)(v1 + 8) & 2) != 0)
    {
      if (one-time initialization token for scene == -1)
      {
LABEL_6:
        swift_bridgeObjectRetain();
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility>, (uint64_t)&type metadata for FocusedValues.__Key_toolbarVisibility, (uint64_t)&protocol witness table for FocusedValues.__Key_toolbarVisibility, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FocusedValuePropertyKey);
        lazy protocol witness table accessor for type FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility> and conformance FocusedValuePropertyKey<A>();
        return PropertyList.subscript.setter();
      }
    }
    else if (one-time initialization token for view == -1)
    {
      goto LABEL_6;
    }
    swift_once();
    goto LABEL_6;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility> and conformance FocusedValuePropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility> and conformance FocusedValuePropertyKey<A>;
  if (!lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility> and conformance FocusedValuePropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility>, (uint64_t)&type metadata for FocusedValues.__Key_toolbarVisibility, (uint64_t)&protocol witness table for FocusedValues.__Key_toolbarVisibility, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FocusedValuePropertyKey);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValuePropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility> and conformance FocusedValuePropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey>, (uint64_t)&type metadata for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.AllowsToolbarConversionKey()
{
  return &type metadata for EnvironmentValues.AllowsToolbarConversionKey;
}

ValueMetadata *type metadata accessor for FocusedValues.__Key_toolbarVisibility()
{
  return &type metadata for FocusedValues.__Key_toolbarVisibility;
}

uint64_t specialized PlatformListViewBase<>.backgroundHost.getter(void (*a1)(double))
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  uint64_t v10;

  type metadata accessor for UIBackgroundConfiguration?();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v4);
  v7 = type metadata accessor for UIBackgroundConfiguration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v6);
    return 0;
  }
  v9 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v6);
  if (!v9)
    return 0;
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
  result = swift_dynamicCastClass();
  if (!result)
  {

    return 0;
  }
  return result;
}

uint64_t protocol witness for PlatformListViewBase.backgroundHost.getter in conformance ListTableViewHeaderFooter()
{
  return specialized PlatformListViewBase<>.backgroundHost.getter((void (*)(double))MEMORY[0x1E0DC2A78]);
}

uint64_t protocol witness for PlatformListViewBase.backgroundHost.getter in conformance ListTableViewCell()
{
  return specialized PlatformListViewBase<>.backgroundHost.getter((void (*)(double))MEMORY[0x1E0DC2B28]);
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedMultiDatePicker(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *__dst;

  v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = v4;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = *(int *)(v4 + 24);
    __dst = (char *)a1 + v9;
    v10 = (char *)a2 + v9;
    v11 = type metadata accessor for Date();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    v15 = *(int *)(v7 + 28);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    if (v13(v17, 1, v11))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v17, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t type metadata accessor for MultiDatePickerStyleConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for MultiDatePickerStyleConfiguration);
}

uint64_t destroy for ResolvedMultiDatePicker(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t result;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v2 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v3 = a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v7 = a1 + *(int *)(v2 + 28);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  return result;
}

_QWORD *initializeWithCopy for ResolvedMultiDatePicker(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *__dst;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v6 = *(int *)(v5 + 24);
  __dst = (char *)a1 + v6;
  v7 = (char *)a2 + v6;
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(__dst, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v8);
  }
  v12 = *(int *)(v5 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  if (v10(v14, 1, v8))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v14, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  return a1;
}

char *assignWithCopy for ResolvedMultiDatePicker(char *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;

  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *((_QWORD *)a1 + 1) = a2[1];
  swift_retain();
  swift_release();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v5 = *(int *)(v4 + 24);
  v6 = &a1[v5];
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(v6, v7, v8);
LABEL_7:
  v14 = *(int *)(v4 + 28);
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = v10(&a1[v14], 1, v8);
  v18 = v10(v16, 1, v8);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(v15, v16, v8);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v15, v16, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v15, 0, 1, v8);
  return a1;
}

uint64_t initializeWithTake for ResolvedMultiDatePicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(const void *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v5 = *(int *)(v4 + 24);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  v12 = *(int *)(v4 + 28);
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  if (v10(v14, 1, v8))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v13, v14, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  return a1;
}

char *assignWithTake for ResolvedMultiDatePicker(char *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;

  *(_QWORD *)a1 = *a2;
  swift_release();
  *((_QWORD *)a1 + 1) = a2[1];
  swift_release();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v5 = *(int *)(v4 + 24);
  v6 = &a1[v5];
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(v6, v7, v8);
LABEL_7:
  v14 = *(int *)(v4 + 28);
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = v10(&a1[v14], 1, v8);
  v18 = v10(v16, 1, v8);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(v15, v16, v8);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v15, v16, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v15, 0, 1, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedMultiDatePicker()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874FB530(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvedMultiDatePicker()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874FB578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ResolvedMultiDatePicker(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedMultiDatePicker);
}

uint64_t type metadata completion function for ResolvedMultiDatePicker()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MultiDatePickerStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MultiDatePickerStyleConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *__dst;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = *(int *)(a3 + 24);
    __dst = (char *)a1 + v9;
    v10 = (char *)a2 + v9;
    v11 = type metadata accessor for Date();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    v15 = *(int *)(a3 + 28);
    v16 = (char *)v7 + v15;
    v17 = (char *)a2 + v15;
    if (v13(v17, 1, v11))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v17, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
    }
  }
  return v7;
}

uint64_t destroy for MultiDatePickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t result;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + *(int *)(a2 + 28);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  return result;
}

_QWORD *initializeWithCopy for MultiDatePickerStyleConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 24);
  __dst = (char *)a1 + v7;
  v8 = (char *)a2 + v7;
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  v13 = *(int *)(a3 + 28);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  if (v11(v15, 1, v9))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  return a1;
}

char *assignWithCopy for MultiDatePickerStyleConfiguration(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;

  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *((_QWORD *)a1 + 1) = a2[1];
  swift_retain();
  swift_release();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = *(int *)(a3 + 28);
  v16 = &a1[v15];
  v17 = (char *)a2 + v15;
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v16, v17, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for MultiDatePickerStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = *(int *)(a3 + 28);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11(v15, 1, v9))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  return a1;
}

char *assignWithTake for MultiDatePickerStyleConfiguration(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;

  *(_QWORD *)a1 = *a2;
  swift_release();
  *((_QWORD *)a1 + 1) = a2[1];
  swift_release();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = *(int *)(a3 + 28);
  v16 = &a1[v15];
  v17 = (char *)a2 + v15;
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v16, v17, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiDatePickerStyleConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874FC020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MultiDatePickerStyleConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874FC0C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void type metadata completion function for MultiDatePickerStyleConfiguration()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_UNKNOWN **base witness table accessor for View in ResolvedMultiDatePicker()
{
  return &protocol witness table for ResolvedMultiDatePicker;
}

uint64_t MultiDatePickerValue.Init.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;

  type metadata accessor for ResolvedMultiDatePicker(0);
  Value = AGGraphGetValue();
  return outlined init with copy of ResolvedMultiDatePicker(Value, a1);
}

uint64_t MultiDatePickerValue.Init.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v5 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ResolvedMultiDatePicker(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v19, v2 + *(int *)(a1 + 36), v13, v17);
  MultiDatePickerValue.Init.base.getter((uint64_t)v12);
  outlined init with take of MultiDatePickerStyleConfiguration((uint64_t)v12, (uint64_t)v8);
  v20 = *(_QWORD *)(a1 + 24);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a2, v19, v13);
  v22 = type metadata accessor for MultiDatePickerValue(0, v13, v20, v21);
  return outlined init with take of MultiDatePickerStyleConfiguration((uint64_t)v8, a2 + *(int *)(v22 + 36));
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance MultiDatePickerValue<A>.Init@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for MultiDatePickerValue(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t specialized static ResolvedMultiDatePicker.makeView<A>(view:style:inputs:)()
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedMultiDatePicker>, type metadata accessor for ResolvedMultiDatePicker, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>(0, (unint64_t *)&lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for MultiDatePickerValue);
  type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>(0, &lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>.Init, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for MultiDatePickerValue.Init);
  lazy protocol witness table accessor for type MultiDatePickerValue<AutomaticMultiDatePickerStyle>.Init and conformance MultiDatePickerValue<A>.Init();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  type metadata accessor for UIKitCalendarView(0);
  type metadata accessor for _GraphValue<MultiDatePickerValue<AutomaticMultiDatePickerStyle>>();
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type AutomaticMultiDatePickerStyle.Body and conformance AutomaticMultiDatePickerStyle.Body();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type UIKitCalendarView and conformance UIKitCalendarView();
  return static View.makeView(view:inputs:)();
}

uint64_t specialized static ResolvedMultiDatePicker.makeViewList<A>(view:style:inputs:)()
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedMultiDatePicker>, type metadata accessor for ResolvedMultiDatePicker, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>(0, (unint64_t *)&lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for MultiDatePickerValue);
  type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>(0, &lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>.Init, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for MultiDatePickerValue.Init);
  lazy protocol witness table accessor for type MultiDatePickerValue<AutomaticMultiDatePickerStyle>.Init and conformance MultiDatePickerValue<A>.Init();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  type metadata accessor for UIKitCalendarView(0);
  type metadata accessor for _GraphValue<MultiDatePickerValue<AutomaticMultiDatePickerStyle>>();
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type AutomaticMultiDatePickerStyle.Body and conformance AutomaticMultiDatePickerStyle.Body();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type UIKitCalendarView and conformance UIKitCalendarView();
  return static View.makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedMultiDatePicker()
{
  return specialized static ResolvedMultiDatePicker.makeView<A>(view:style:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedMultiDatePicker()
{
  return specialized static ResolvedMultiDatePicker.makeViewList<A>(view:style:inputs:)();
}

void protocol witness for View.body.getter in conformance ResolvedMultiDatePicker()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for MultiDatePickerValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MultiDatePickerValue);
}

void type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *, _UNKNOWN **))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for AutomaticMultiDatePickerStyle, &protocol witness table for AutomaticMultiDatePickerStyle);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t type metadata accessor for MultiDatePickerValue.Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MultiDatePickerValue.Init);
}

unint64_t lazy protocol witness table accessor for type MultiDatePickerValue<AutomaticMultiDatePickerStyle>.Init and conformance MultiDatePickerValue<A>.Init()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MultiDatePickerValue<AutomaticMultiDatePickerStyle>.Init and conformance MultiDatePickerValue<A>.Init;
  if (!lazy protocol witness table cache variable for type MultiDatePickerValue<AutomaticMultiDatePickerStyle>.Init and conformance MultiDatePickerValue<A>.Init)
  {
    type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>(255, &lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>.Init, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for MultiDatePickerValue.Init);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultiDatePickerValue<A>.Init, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiDatePickerValue<AutomaticMultiDatePickerStyle>.Init and conformance MultiDatePickerValue<A>.Init);
  }
  return result;
}

void type metadata accessor for _GraphValue<MultiDatePickerValue<AutomaticMultiDatePickerStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<MultiDatePickerValue<AutomaticMultiDatePickerStyle>>)
  {
    type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>(255, (unint64_t *)&lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for MultiDatePickerValue);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<MultiDatePickerValue<AutomaticMultiDatePickerStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type UIKitCalendarView and conformance UIKitCalendarView()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UIKitCalendarView and conformance UIKitCalendarView;
  if (!lazy protocol witness table cache variable for type UIKitCalendarView and conformance UIKitCalendarView)
  {
    v1 = type metadata accessor for UIKitCalendarView(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitCalendarView, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitCalendarView and conformance UIKitCalendarView);
  }
  return result;
}

uint64_t type metadata completion function for MultiDatePickerValue.Init()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MultiDatePickerValue.Init(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 4) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 4) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874FCAB4 + 4 * byte_187C39F50[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for MultiDatePickerValue.Init(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata completion function for MultiDatePickerValue()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MultiDatePickerStyleConfiguration(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MultiDatePickerValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  const void *v28;
  unsigned int (*v29)(const void *, uint64_t, uint64_t);
  size_t v31;
  void *v32;
  const void *v33;
  size_t __n;
  uint64_t v36;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 | 7;
  v12 = (v10 | 7) + v7;
  v13 = v10 + 24;
  if (*(_DWORD *)(v9 + 84))
    v14 = *(_QWORD *)(v9 + 64);
  else
    v14 = *(_QWORD *)(v9 + 64) + 1;
  v15 = v11 | *(_DWORD *)(v6 + 80);
  if (v15 != 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v12 & ~(v10 | 7)) + v14 + ((v14 + v10 + ((v10 + 24) & ~v10)) & (unint64_t)~v10) > 0x18)
  {
    v18 = *a2;
    *a1 = *a2;
    v19 = (uint64_t *)(v18 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  else
  {
    __n = v14;
    v36 = v14 + v10;
    v20 = v8;
    v21 = ~v11;
    v22 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v23 = (_QWORD *)(((unint64_t)a1 + v12) & v21);
    v24 = (_QWORD *)(((unint64_t)a2 + v12) & v21);
    *v23 = *v24;
    v23[1] = v24[1];
    v23[2] = v24[2];
    v25 = (void *)(((unint64_t)v23 + v13) & v22);
    v26 = (unint64_t)v24 + v13;
    v27 = v22;
    v28 = (const void *)(v26 & v22);
    v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v29(v28, 1, v20))
    {
      v31 = __n;
      memcpy(v25, v28, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v25, v28, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v25, 0, 1, v20);
      v31 = __n;
    }
    v32 = (void *)(((unint64_t)v25 + v36) & v27);
    v33 = (const void *)(((unint64_t)v28 + v36) & v27);
    v19 = a1;
    if (v29(v33, 1, v20))
    {
      memcpy(v32, v33, v31);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v32, v33, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v32, 0, 1, v20);
    }
  }
  return v19;
}

uint64_t destroy for MultiDatePickerValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v4 + a1 + (v7 | 7);
  v9 = ~v7;
  v10 = v8 & ~v7 & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v11 = v7 + v10 + 24;
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11 & ~v7, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v11 & ~v7, v5);
  v13 = (v11 | v7) + *(_QWORD *)(v6 + 64);
  if (!*(_DWORD *)(v6 + 84))
    ++v13;
  v14 = v13 & v9;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v13 & v9, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  return result;
}

uint64_t initializeWithCopy for MultiDatePickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int (*v15)(unint64_t, uint64_t, uint64_t);
  int v16;
  size_t v17;
  size_t v18;
  size_t v19;
  void *v20;
  const void *v21;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v24 = a1;
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  *v11 = *v12;
  v11[1] = v12[1];
  v11[2] = v12[2];
  v13 = (unint64_t)v11 + v9 + 24;
  v23 = ~v9;
  v14 = (unint64_t)v12 + v9 + 24;
  v15 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v15(v14 & ~v9, 1, v7))
  {
    v16 = *(_DWORD *)(v8 + 84);
    v17 = *(_QWORD *)(v8 + 64);
    if (v16)
      v18 = *(_QWORD *)(v8 + 64);
    else
      v18 = v17 + 1;
    memcpy((void *)(v13 & ~v9), (const void *)(v14 & ~v9), v18);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v13 & ~v9, v14 & ~v9, v7);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13 & ~v9, 0, 1, v7);
    v16 = *(_DWORD *)(v8 + 84);
    v17 = *(_QWORD *)(v8 + 64);
  }
  if (v16)
    v19 = v17;
  else
    v19 = v17 + 1;
  v20 = (void *)(((v13 | v9) + v19) & v23);
  v21 = (const void *)(((v14 | v9) + v19) & v23);
  if (v15((unint64_t)v21, 1, v7))
  {
    memcpy(v20, v21, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v20, v21, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v20, 0, 1, v7);
  }
  return v24;
}

uint64_t assignWithCopy for MultiDatePickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(unint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  size_t v19;
  size_t v20;
  void *v21;
  const void *v22;
  int v23;
  int v24;
  uint64_t v26;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v26 = a1;
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  *v11 = *v12;
  swift_retain();
  swift_release();
  v11[1] = v12[1];
  swift_retain();
  swift_release();
  v11[2] = v12[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = (unint64_t)v11 + v9 + 24;
  v14 = ~v9;
  v15 = (unint64_t)v12 + v9 + 24;
  v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
  v17 = v16(v13 & ~v9, 1, v7);
  v18 = v16(v15 & ~v9, 1, v7);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v13 & ~v9, v15 & ~v9, v7);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13 & ~v9, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(v13 & ~v9, v15 & ~v9, v7);
      goto LABEL_10;
    }
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v13 & ~v9, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v19 = *(_QWORD *)(v8 + 64);
  else
    v19 = *(_QWORD *)(v8 + 64) + 1;
  memcpy((void *)(v13 & ~v9), (const void *)(v15 & ~v9), v19);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v20 = *(_QWORD *)(v8 + 64);
  else
    v20 = *(_QWORD *)(v8 + 64) + 1;
  v21 = (void *)(((v13 | v9) + v20) & v14);
  v22 = (const void *)(((v15 | v9) + v20) & v14);
  v23 = v16((unint64_t)v21, 1, v7);
  v24 = v16((unint64_t)v22, 1, v7);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(v21, v22, v7);
      return v26;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v21, v7);
    goto LABEL_18;
  }
  if (v24)
  {
LABEL_18:
    memcpy(v21, v22, v20);
    return v26;
  }
  (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v21, v22, v7);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  return v26;
}

uint64_t initializeWithTake for MultiDatePickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  size_t v18;
  size_t v19;
  size_t v20;
  void *v21;
  const void *v22;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v25 = a1;
  v11 = (v10 + a1) & ~(v9 | 7);
  v12 = (v10 + a2) & ~(v9 | 7);
  v13 = *(_QWORD *)(v12 + 0x10);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_QWORD *)(v11 + 16) = v13;
  v14 = v9 + 24 + v11;
  v15 = ~v9;
  v16 = v9 + 24 + v12;
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v24(v16 & ~v9, 1, v7))
  {
    v17 = *(_DWORD *)(v8 + 84);
    v18 = *(_QWORD *)(v8 + 64);
    if (v17)
      v19 = *(_QWORD *)(v8 + 64);
    else
      v19 = v18 + 1;
    memcpy((void *)(v14 & ~v9), (const void *)(v16 & ~v9), v19);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v14 & ~v9, v16 & ~v9, v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v14 & ~v9, 0, 1, v7);
    v17 = *(_DWORD *)(v8 + 84);
    v18 = *(_QWORD *)(v8 + 64);
  }
  if (v17)
    v20 = v18;
  else
    v20 = v18 + 1;
  v21 = (void *)(((v14 | v9) + v20) & v15);
  v22 = (const void *)(((v16 | v9) + v20) & v15);
  if (v24((uint64_t)v22, 1, v7))
  {
    memcpy(v21, v22, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v21, v22, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  }
  return v25;
}

uint64_t assignWithTake for MultiDatePickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(unint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  size_t v19;
  size_t v20;
  void *v21;
  const void *v22;
  int v23;
  int v24;
  uint64_t v26;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v26 = a1;
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  *v11 = *v12;
  swift_release();
  v11[1] = v12[1];
  swift_release();
  v11[2] = v12[2];
  swift_bridgeObjectRelease();
  v13 = (unint64_t)v11 + v9 + 24;
  v14 = ~v9;
  v15 = (unint64_t)v12 + v9 + 24;
  v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
  v17 = v16(v13 & ~v9, 1, v7);
  v18 = v16(v15 & ~v9, 1, v7);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(v13 & ~v9, v15 & ~v9, v7);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13 & ~v9, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(v13 & ~v9, v15 & ~v9, v7);
      goto LABEL_10;
    }
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v13 & ~v9, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v19 = *(_QWORD *)(v8 + 64);
  else
    v19 = *(_QWORD *)(v8 + 64) + 1;
  memcpy((void *)(v13 & ~v9), (const void *)(v15 & ~v9), v19);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v20 = *(_QWORD *)(v8 + 64);
  else
    v20 = *(_QWORD *)(v8 + 64) + 1;
  v21 = (void *)(((v13 | v9) + v20) & v14);
  v22 = (const void *)(((v15 | v9) + v20) & v14);
  v23 = v16((unint64_t)v21, 1, v7);
  v24 = v16((unint64_t)v22, 1, v7);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(v21, v22, v7);
      return v26;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v21, v7);
    goto LABEL_18;
  }
  if (v24)
  {
LABEL_18:
    memcpy(v21, v22, v20);
    return v26;
  }
  (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v21, v22, v7);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  return v26;
}

uint64_t getEnumTagSinglePayload for MultiDatePickerValue(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v22;
  int v23;
  int v24;
  unint64_t v25;
  unsigned int v26;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  if (v11 <= v7)
    v12 = v7;
  else
    v12 = v11;
  if (v9)
    v13 = *(_QWORD *)(v8 + 64);
  else
    v13 = *(_QWORD *)(v8 + 64) + 1;
  if (!a2)
    return 0;
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = v14 | 7;
  v16 = (v14 | 7) + *(_QWORD *)(v6 + 64);
  v17 = v14 + 24;
  if (a2 <= v12)
    goto LABEL_33;
  v18 = (v16 & ~v15) + v13 + ((v13 + v14 + (v17 & ~v14)) & ~v14);
  v19 = 8 * v18;
  if (v18 <= 3)
  {
    v22 = ((a2 - v12 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      v20 = *(_DWORD *)(a1 + v18);
      if (!v20)
        goto LABEL_33;
      goto LABEL_24;
    }
    if (v22 > 0xFF)
    {
      v20 = *(unsigned __int16 *)(a1 + v18);
      if (!*(_WORD *)(a1 + v18))
        goto LABEL_33;
      goto LABEL_24;
    }
    if (v22 < 2)
    {
LABEL_33:
      if (v7 >= v11)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
      if ((v10 & 0x80000000) != 0)
      {
        v26 = (*(uint64_t (**)(uint64_t))(v8 + 48))((v17 + ((v16 + a1) & ~v15)) & ~v14);
        if (v26 >= 2)
          return v26 - 1;
        else
          return 0;
      }
      else
      {
        v25 = *(_QWORD *)(((v16 + a1) & ~v15) + 8);
        if (v25 >= 0xFFFFFFFF)
          LODWORD(v25) = -1;
        return (v25 + 1);
      }
    }
  }
  v20 = *(unsigned __int8 *)(a1 + v18);
  if (!*(_BYTE *)(a1 + v18))
    goto LABEL_33;
LABEL_24:
  v23 = (v20 - 1) << v19;
  if (v18 > 3)
    v23 = 0;
  if ((_DWORD)v18)
  {
    if (v18 <= 3)
      v24 = v18;
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  return v12 + v23 + 1;
}

void storeEnumTagSinglePayload for MultiDatePickerValue(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = 0u;
  v10 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12;
  if (v13 <= v8)
    v14 = v8;
  else
    v14 = v13;
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = v15 | 7;
  if (v11)
    v17 = *(_QWORD *)(v10 + 64);
  else
    v17 = *(_QWORD *)(v10 + 64) + 1;
  v18 = ((v17 + v15 + ((v15 + 24) & ~v15)) & ~v15) + v17 + (((v15 | 7) + *(_QWORD *)(v7 + 64)) & ~v16);
  if (a3 > v14)
  {
    if (v18 > 3)
    {
      v9 = 1u;
      if (v14 >= a2)
        goto LABEL_16;
LABEL_22:
      v20 = ~v14 + a2;
      if (v18 < 4)
      {
        if ((_DWORD)v18)
        {
          v21 = v20 & ~(-1 << (8 * v18));
          bzero(a1, ((v17 + v15 + ((v15 + 24) & ~v15)) & ~v15) + v17 + (((v15 | 7) + *(_QWORD *)(v7 + 64)) & ~v16));
          if ((_DWORD)v18 == 3)
          {
            *(_WORD *)a1 = v21;
            a1[2] = BYTE2(v21);
          }
          else if ((_DWORD)v18 == 2)
          {
            *(_WORD *)a1 = v21;
          }
          else
          {
            *a1 = v21;
          }
        }
      }
      else
      {
        bzero(a1, ((v17 + v15 + ((v15 + 24) & ~v15)) & ~v15) + v17 + (((v15 | 7) + *(_QWORD *)(v7 + 64)) & ~v16));
        *(_DWORD *)a1 = v20;
      }
      __asm { BR              X10 }
    }
    v19 = ((a3 - v14 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
    if (HIWORD(v19))
    {
      v9 = 4u;
      if (v14 < a2)
        goto LABEL_22;
LABEL_16:
      __asm { BR              X0 }
    }
    if (v19 >= 0x100)
      v9 = 2;
    else
      v9 = v19 > 1;
  }
  if (v14 < a2)
    goto LABEL_22;
  goto LABEL_16;
}

void sub_1874FDDF8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1874FDD54);
}

void sub_1874FDE08()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1874FDD54);
}

ValueMetadata *type metadata accessor for MultiDatePickerStyleConfiguration.Label()
{
  return &type metadata for MultiDatePickerStyleConfiguration.Label;
}

_UNKNOWN **base witness table accessor for View in MultiDatePickerStyleConfiguration.Label()
{
  return &protocol witness table for MultiDatePickerStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for MultiDatePickerStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultiDatePickerStyleConfiguration.Label, &type metadata for MultiDatePickerStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultiDatePickerStyleConfiguration.Label, &type metadata for MultiDatePickerStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label);
  }
  return result;
}

void base witness table accessor for _AttributeBody in MultiDatePickerValue<A>.Init()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined init with copy of ResolvedMultiDatePicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ResolvedMultiDatePicker(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static ItemProviderTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t View.itemProvider(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)@<X0>(uint64_t *@<X8>);

  if (a1)
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = a1;
    *(_QWORD *)(v4 + 24) = a2;
    v5 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  }
  else
  {
    v5 = 0;
  }
  outlined copy of AppIntentExecutor?(a1);
  View._trait<A>(_:_:)();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v5);
}

uint64_t sub_1874FDFBC()
{
  swift_release();
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ItemProviderTraitKey()
{
  return &type metadata for ItemProviderTraitKey;
}

uint64_t sub_1874FDFF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<ItemProviderTraitKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<ItemProviderTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _TraitWritingModifier<ItemProviderTraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<ItemProviderTraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ItemProviderTraitKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ItemProviderTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<ItemProviderTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ItemProviderTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<ItemProviderTraitKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ItemProviderTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

void View.activeColorScheme(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1874FE100(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ActiveControlLabelWrapper(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for ActiveControlLabelWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActiveControlLabelWrapper);
}

uint64_t type metadata completion function for ActiveControlLabelWrapper()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ActiveControlLabelWrapper(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
    v10 = ((unint64_t)v4 + v6) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(_BYTE *)(v11 + 16);
    outlined copy of Environment<Bool>.Content(v12, v13);
    *(_QWORD *)(v10 + 8) = v12;
    *(_BYTE *)(v10 + 16) = v13;
  }
  return v4;
}

uint64_t destroy for ActiveControlLabelWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(((*(_QWORD *)(v3 + 64) + a1) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((*(_QWORD *)(v3 + 64) + a1) & 0xFFFFFFFFFFFFFFF8) + 16));
}

uint64_t initializeWithCopy for ActiveControlLabelWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(v8 + 8);
  LOBYTE(v5) = *(_BYTE *)(v8 + 16);
  outlined copy of Environment<Bool>.Content(v10, v5);
  *(_QWORD *)(v9 + 8) = v10;
  *(_BYTE *)(v9 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ActiveControlLabelWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(v8 + 8);
  LOBYTE(v5) = *(_BYTE *)(v8 + 16);
  outlined copy of Environment<Bool>.Content(v10, v5);
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  *(_QWORD *)(v9 + 8) = v10;
  *(_BYTE *)(v9 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v11, v12);
  return a1;
}

uint64_t initializeWithTake for ActiveControlLabelWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_BYTE *)(v7 + 16) = v9;
  return a1;
}

uint64_t assignWithTake for ActiveControlLabelWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 8);
  LOBYTE(v8) = *(_BYTE *)(v8 + 16);
  v10 = *(_QWORD *)(v7 + 8);
  v11 = *(_BYTE *)(v7 + 16);
  *(_QWORD *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 16) = v8;
  outlined consume of Environment<Bool>.Content(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActiveControlLabelWrapper(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xFE)
    {
      v14 = *(unsigned __int8 *)(v7 + a1);
      if (v14 >= 2)
        return v14 - 1;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = (v7 & 0xFFFFFFF8) + 17;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1874FE508 + 4 * byte_187C3A190[v12]))();
  }
}

void storeEnumTagSinglePayload for ActiveControlLabelWrapper(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = (*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFFFF8) + 17;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_1874FE6A0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1874FE6A8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1874FE6B0);
}

void sub_1874FE6E0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1874FE6E8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_1874FE6F0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
LABEL_2:
    JUMPOUT(0x1874FE6F8);
  if (a3 < 0xFE)
  {
    *(_BYTE *)(v5 + v6) = a2 + 1;
    goto LABEL_2;
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t associated type witness table accessor for View.Body : View in ActiveControlLabelWrapper<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1874FE744(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyTransformModifier<ColorScheme>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ColorScheme> and conformance _EnvironmentKeyTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyTransformModifier<ColorScheme>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ColorScheme>)
  {
    v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ColorScheme>);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ColorScheme> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ColorScheme> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ColorScheme> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<ColorScheme>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ColorScheme> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarLabeledContentStyle()
{
  return &type metadata for ToolbarLabeledContentStyle;
}

uint64_t associated type witness table accessor for LabeledContentStyle.Body : View in ToolbarLabeledContentStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance PlatformItemLabelView<A, B, C>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance PlatformItemLabelView<A, B, C>;
  if (!lazy protocol witness table cache variable for type PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance PlatformItemLabelView<A, B, C>)
  {
    v1 = type metadata accessor for PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemLabelView<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance PlatformItemLabelView<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>;
  if (!lazy cache variable for type metadata for PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>)
    type metadata accessor for PlatformItemLabelView();
  return result;
}

uint64_t View.sidebarDimmingIgnoresSafeArea(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t sub_1874FE970(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for SidebarDimmingIgnoresSafeAreaTraitKey()
{
  return &type metadata for SidebarDimmingIgnoresSafeAreaTraitKey;
}

void static InsetGroupedListStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _ListValue();
}

void sub_1874FEB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _OWORD *v13;
  uint64_t v14;
  int v15;
  va_list va;

  va_start(va, a13);
  type metadata accessor for _GraphValue();
  v15 = _GraphValue.value.getter();
  *v13 = 0u;
  v13[1] = 0u;
  *(_WORD *)(v14 - 144) = 1;
  lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
  InsettableGroupedListBodyRule.init(base:insetMode:context:)(v15, v14 - 176, va);
}

void sub_1874FEB78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>();
  v3 = type metadata accessor for SelectionManagerBox(255, v1, v0, v2);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v3);
  type metadata accessor for InsettableGroupedListBody();
}

void sub_1874FEBE0()
{
  type metadata accessor for InsettableGroupedListBodyRule();
}

uint64_t sub_1874FEC30(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBodyRule<A, B, C>, a1);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBody<A, B>, v1);
  return static View._makeView(view:inputs:)();
}

ValueMetadata *type metadata accessor for InsetGroupedListStyleContext()
{
  return &type metadata for InsetGroupedListStyleContext;
}

unint64_t instantiation function for generic protocol witness table for InsetGroupedListStyleContext(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t UIKitCalendarView.fontDesign.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;

  v3 = v1 + *(int *)(type metadata accessor for UIKitCalendarView(0) + 36);
  v4 = *(_QWORD *)v3;
  v5 = *(_BYTE *)(v3 + 8);
  outlined copy of ResolvedTableRowIDs.Storage(*(_QWORD *)v3, v5);
  v6 = specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of ResolvedTableRowIDs.Storage(v4, v5);
  if (v6 >> 62)
    goto LABEL_23;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
  {
LABEL_11:
    v10 = 0;
    goto LABEL_13;
  }
  while (1)
  {
    while (__OFSUB__(v7--, 1))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v7)
        goto LABEL_11;
    }
    if ((v6 & 0xC000000000000001) != 0)
    {
      MEMORY[0x18D75E3BC](v7, v6);
      goto LABEL_9;
    }
    if ((v7 & 0x8000000000000000) != 0)
      goto LABEL_21;
    if (v7 >= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_22;
    swift_retain();
LABEL_9:
    type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>();
    v9 = swift_dynamicCastClass();
    swift_release();
    if (v9)
      break;
    if (!v7)
      goto LABEL_11;
  }
  v10 = specialized closure #1 in BidirectionalCollection.last(where:)(v7, v6);
LABEL_13:
  result = swift_bridgeObjectRelease();
  if (v10)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>();
    v12 = swift_dynamicCastClass();
    if (v12)
      v13 = *(_BYTE *)(v12 + 16);
    else
      v13 = 0;
    result = swift_release();
  }
  else
  {
    v13 = 0;
  }
  *a1 = v13;
  return result;
}

uint64_t UIKitCalendarView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  char v18;

  type metadata accessor for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int *)(v7 + 40);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v6, type metadata accessor for MultiDatePickerStyleConfiguration);
  v9 = type metadata accessor for UIKitCalendarView(0);
  v10 = (int *)type metadata accessor for UIKitCalendarViewRepresentable(0);
  specialized Environment.wrappedValue.getter((uint64_t)&v6[v10[5]]);
  specialized Environment.wrappedValue.getter((uint64_t)&v6[v10[6]]);
  specialized Environment.wrappedValue.getter((uint64_t)&v6[v10[7]]);
  v11 = (uint64_t *)(v1 + *(int *)(v9 + 32));
  v12 = *v11;
  v13 = *((unsigned __int8 *)v11 + 8);
  outlined copy of Environment<Color?>.Content(*v11, v13);
  v14 = specialized Environment.wrappedValue.getter(v12, v13);
  outlined consume of Environment<Color?>.Content(v12, v13);
  UIKitCalendarView.fontDesign.getter(&v18);
  v15 = v18;
  *(_QWORD *)&v6[v10[8]] = v14;
  v6[v10[9]] = v15;
  v6[v8] = 2;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v6, a1, (uint64_t (*)(_QWORD))type metadata accessor for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance UIKitCalendarView()
{
  type metadata accessor for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>(0);
  lazy protocol witness table accessor for type LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable> and conformance <> LabeledContent<A, B>();
  lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t @objc UIKitCalendarViewRepresentable.Coordinator.multiDateSelection(_:didSelectDate:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v16;

  v8 = type metadata accessor for DateComponents();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = a3;
  v14 = a1;
  a5(v12);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t UIKitCalendarViewRepresentable.Coordinator.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0+ OBJC_IVAR____TtCV7SwiftUIP33_1CD2D554D5FF79B0EC2610FA354BC03430UIKitCalendarViewRepresentable11Coordinator_configuration, type metadata accessor for MultiDatePickerStyleConfiguration);
}

uint64_t ObjC metadata update function for UIKitCalendarViewRepresentable.Coordinator()
{
  return type metadata accessor for UIKitCalendarViewRepresentable.Coordinator(0);
}

uint64_t type metadata accessor for UIKitCalendarViewRepresentable.Coordinator(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitCalendarViewRepresentable.Coordinator);
}

uint64_t type metadata completion function for UIKitCalendarViewRepresentable.Coordinator()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MultiDatePickerStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void UIKitCalendarViewRepresentable.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  Class isa;
  Class v32;
  Class v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  id v44;
  Class v45;
  char *v46;
  uint64_t v47;
  char *v48;
  id v49;
  char *v50;
  Class v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  Class v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;

  v3 = v2;
  v6 = type metadata accessor for DateInterval();
  v7 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  v65 = v7;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v63 = (uint64_t)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v58 - v16;
  v18 = type metadata accessor for Date();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v61 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v58 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v58 - v28;
  v66 = *(_QWORD *)(a2 + 40);
  v30 = type metadata accessor for UIKitCalendarViewRepresentable(0);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setLocale_, isa);

  v32 = Calendar._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setCalendar_, v32);

  v67 = v30;
  v33 = TimeZone._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setTimeZone_, v33);

  v34 = v19;
  v35 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  outlined init with copy of Date?((uint64_t)v3 + *(int *)(v35 + 24), (uint64_t)v17);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v37 = v36(v17, 1, v18);
  v62 = v10;
  v60 = v25;
  if (v37 == 1)
  {
    v38 = v34;
    outlined destroy of Binding<AttributedString>((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v39 = v66;
    v40 = v64;
  }
  else
  {
    v41 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    v59 = v3;
    v42 = v29;
    v41(v29, v17, v18);
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v25, v29, v18);
    v43 = v34;
    v44 = objc_msgSend(a1, sel_availableDateRange);
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    DateInterval.start.setter();
    v45 = DateInterval._bridgeToObjectiveC()().super.isa;
    v40 = v64;
    (*(void (**)(char *, uint64_t))(v65 + 8))(v10, v64);
    objc_msgSend(a1, sel_setAvailableDateRange_, v45);

    v38 = v43;
    v46 = v42;
    v3 = v59;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v46, v18);
    v39 = v66;
  }
  v47 = v63;
  outlined init with copy of Date?((uint64_t)v3 + *(int *)(v35 + 28), v63);
  if (v36((char *)v47, 1, v18) == 1)
  {
    outlined destroy of Binding<AttributedString>(v47, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  }
  else
  {
    v48 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v61, v47, v18);
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v60, v48, v18);
    v49 = objc_msgSend(a1, sel_availableDateRange);
    v50 = v62;
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    DateInterval.end.setter();
    v51 = DateInterval._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v65 + 8))(v50, v40);
    objc_msgSend(a1, sel_setAvailableDateRange_, v51);

    (*(void (**)(char *, uint64_t))(v38 + 8))(v48, v18);
  }
  v52 = v67;
  v53 = *(int *)(v67 + 32);
  if (*(uint64_t *)((char *)v3 + v53))
    v54 = *(uint64_t *)((char *)v3 + v53);
  else
    v54 = static Color.blue.getter();
  type metadata accessor for UIColor();
  swift_retain();
  v55 = UIColor.init(_:)(v54);
  objc_msgSend(a1, sel_setTintColor_, v55);

  v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3528]), sel_initWithDelegate_, v39);
  v68 = *v3;
  v69 = *(_OWORD *)(v3 + 1);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Set<DateComponents>>, (uint64_t (*)(uint64_t))type metadata accessor for Set<DateComponents>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v70);
  specialized _copyCollectionToContiguousArray<A>(_:)(v70);
  swift_bridgeObjectRelease();
  type metadata accessor for DateComponents();
  v57 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  objc_msgSend(v56, sel_setSelectedDates_, v57);

  objc_msgSend(a1, sel_setSelectionBehavior_, v56);
  objc_msgSend(a1, sel_setFontDesign_, **((_QWORD **)&unk_1E1B35AC0 + *((char *)v3 + *(int *)(v52 + 36))));

}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitCalendarViewRepresentable()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3530]), sel_init);
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitCalendarViewRepresentable@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  objc_class *v7;
  id v8;
  id v9;
  uint64_t result;
  objc_super v11;

  v3 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v6, type metadata accessor for MultiDatePickerStyleConfiguration);
  v7 = (objc_class *)type metadata accessor for UIKitCalendarViewRepresentable.Coordinator(0);
  v8 = objc_allocWithZone(v7);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v6, (uint64_t)v8+ OBJC_IVAR____TtCV7SwiftUIP33_1CD2D554D5FF79B0EC2610FA354BC03430UIKitCalendarViewRepresentable11Coordinator_configuration, type metadata accessor for MultiDatePickerStyleConfiguration);
  v11.receiver = v8;
  v11.super_class = v7;
  v9 = objc_msgSendSuper2(&v11, sel_init);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, type metadata accessor for MultiDatePickerStyleConfiguration);
  *a1 = v9;
  return result;
}

unint64_t specialized closure #1 in BidirectionalCollection.last(where:)(unint64_t result, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
    return MEMORY[0x18D75E3BC]();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
  {
    return swift_retain();
  }
  __break(1u);
  return result;
}

uint64_t specialized UIKitCalendarViewRepresentable.Coordinator.multiDateSelection(_:didSelectDate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[3];
  uint64_t v20;

  v3 = type metadata accessor for DateComponents();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)v19 - v11;
  v13 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV7SwiftUIP33_1CD2D554D5FF79B0EC2610FA354BC03430UIKitCalendarViewRepresentable11Coordinator_configuration);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, a1, v3, v10);
  v14 = v13[1];
  v15 = v13[2];
  v19[0] = *v13;
  v19[1] = v14;
  v19[2] = v15;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Set<DateComponents>>, (uint64_t (*)(uint64_t))type metadata accessor for Set<DateComponents>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v17 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75B9C8](&v20, v17);
  specialized Set._Variant.insert(_:)((uint64_t)v12, v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
  v19[0] = v20;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized UIKitCalendarViewRepresentable.Coordinator.multiDateSelection(_:didDeselectDate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;

  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DateComponents?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v14 - v7;
  v9 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtCV7SwiftUIP33_1CD2D554D5FF79B0EC2610FA354BC03430UIKitCalendarViewRepresentable11Coordinator_configuration
                 + 8);
  v10 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtCV7SwiftUIP33_1CD2D554D5FF79B0EC2610FA354BC03430UIKitCalendarViewRepresentable11Coordinator_configuration
                  + 16);
  v14[0] = *(_QWORD *)(v1
                     + OBJC_IVAR____TtCV7SwiftUIP33_1CD2D554D5FF79B0EC2610FA354BC03430UIKitCalendarViewRepresentable11Coordinator_configuration);
  v14[1] = v9;
  v14[2] = v10;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Set<DateComponents>>, (uint64_t (*)(uint64_t))type metadata accessor for Set<DateComponents>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v12 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75B9C8](&v15, v12);
  specialized Set._Variant.remove(_:)(a1, (uint64_t)v8);
  outlined destroy of Binding<AttributedString>((uint64_t)v8, &lazy cache variable for type metadata for DateComponents?, v3, v4);
  v14[0] = v15;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void type metadata accessor for Set<DateComponents>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Set<DateComponents>)
  {
    type metadata accessor for DateComponents();
    lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
    v0 = type metadata accessor for Set();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Set<DateComponents>);
  }
}

unint64_t lazy protocol witness table accessor for type DateComponents and conformance DateComponents()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    v1 = type metadata accessor for DateComponents();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAEAD8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitCalendarView(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v6 = a1;
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    v8 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
    v9 = *(int *)(v8 + 24);
    v10 = (char *)v6 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v16 = *(int *)(v8 + 28);
    v17 = (char *)v6 + v16;
    v18 = (char *)a2 + v16;
    if (v14((char *)a2 + v16, 1, v12))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v18, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
    }
    v20 = a3[5];
    v21 = (uint64_t *)((char *)v6 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v23 = type metadata accessor for Locale();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    }
    else
    {
      *v21 = *v22;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v24 = a3[6];
    v25 = (uint64_t *)((char *)v6 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v27 = type metadata accessor for Calendar();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    }
    else
    {
      *v25 = *v26;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v28 = a3[7];
    v29 = (uint64_t *)((char *)v6 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v31 = type metadata accessor for TimeZone();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    }
    else
    {
      *v29 = *v30;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v32 = a3[8];
    v33 = (char *)v6 + v32;
    v34 = (char *)a2 + v32;
    v35 = *(_QWORD *)v34;
    v36 = v34[8];
    outlined copy of Environment<Color?>.Content(*(_QWORD *)v34, v36);
    *(_QWORD *)v33 = v35;
    v33[8] = v36;
    v37 = a3[9];
    v38 = (char *)v6 + v37;
    v39 = (char *)a2 + v37;
    v40 = *(_QWORD *)v39;
    LOBYTE(v33) = v39[8];
    outlined copy of ResolvedTableRowIDs.Storage(*(_QWORD *)v39, (char)v33);
    *(_QWORD *)v38 = v40;
    v38[8] = (char)v33;
  }
  return v6;
}

uint64_t destroy for UIKitCalendarView(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v5 = a1 + *(int *)(v4 + 24);
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + *(int *)(v4 + 28);
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  v10 = a1 + a2[5];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  v12 = a1 + a2[6];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  v14 = a1 + a2[7];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<Color?>.Content(*(_QWORD *)(a1 + a2[8]), *(unsigned __int8 *)(a1 + a2[8] + 8));
  return outlined consume of ResolvedTableRowIDs.Storage(*(_QWORD *)(a1 + a2[9]), *(_BYTE *)(a1 + a2[9] + 8));
}

_QWORD *initializeWithCopy for UIKitCalendarView(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;
  char *v42;

  v5 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  a1[2] = *((_QWORD *)a2 + 2);
  v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v7 = *(int *)(v6 + 24);
  v8 = (char *)a1 + v7;
  v42 = a2;
  v9 = &a2[v7];
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = *(int *)(v6 + 28);
  v15 = (char *)a1 + v14;
  v16 = &v42[v14];
  if (v12(&v42[v14], 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v16, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  v18 = a3[5];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = &v42[v18];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21 = type metadata accessor for Locale();
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  }
  else
  {
    *v19 = *(_QWORD *)v20;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v22 = a3[6];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = &v42[v22];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v25 = type metadata accessor for Calendar();
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
  }
  else
  {
    *v23 = *(_QWORD *)v24;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v26 = a3[7];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = &v42[v26];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v29 = type metadata accessor for TimeZone();
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  }
  else
  {
    *v27 = *(_QWORD *)v28;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v30 = a3[8];
  v31 = (char *)a1 + v30;
  v32 = &v42[v30];
  v33 = *(_QWORD *)v32;
  v34 = v32[8];
  outlined copy of Environment<Color?>.Content(*(_QWORD *)v32, v34);
  *(_QWORD *)v31 = v33;
  v31[8] = v34;
  v35 = a3[9];
  v36 = (char *)a1 + v35;
  v37 = &v42[v35];
  v38 = *(_QWORD *)v37;
  v39 = v37[8];
  outlined copy of ResolvedTableRowIDs.Storage(*(_QWORD *)v37, v39);
  *(_QWORD *)v36 = v38;
  v36[8] = v39;
  return a1;
}

char *assignWithCopy for UIKitCalendarView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t (*v25)(uint64_t);
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_retain();
  swift_release();
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v7 = *(int *)(v6 + 24);
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = *(int *)(v6 + 28);
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v12(&a1[v16], 1, v10);
  v20 = v12(v18, 1, v10);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v17, v18, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
      if (a1 == a2)
        goto LABEL_24;
      goto LABEL_14;
    }
LABEL_13:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    if (a1 == a2)
      goto LABEL_24;
    goto LABEL_14;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v17, v18, v10);
  if (a1 == a2)
    goto LABEL_24;
LABEL_14:
  v22 = a3[5];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38];
  v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
  outlined destroy of Binding<AttributedString>((uint64_t)&a1[v22], (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v25, v26);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v27 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v23, v24, v27);
  }
  else
  {
    *(_QWORD *)v23 = *(_QWORD *)v24;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v28 = a3[6];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0];
  outlined destroy of Binding<AttributedString>((uint64_t)&a1[v28], (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v26);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v31, v26);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v32 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
  }
  else
  {
    *(_QWORD *)v29 = *(_QWORD *)v30;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v33 = a3[7];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470];
  outlined destroy of Binding<AttributedString>((uint64_t)&a1[v33], (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], v26);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v36, v26);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v37 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
  }
  else
  {
    *(_QWORD *)v34 = *(_QWORD *)v35;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_24:
  v38 = a3[8];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = *(_QWORD *)v40;
  v42 = v40[8];
  outlined copy of Environment<Color?>.Content(*(_QWORD *)v40, v42);
  v43 = *(_QWORD *)v39;
  v44 = v39[8];
  *(_QWORD *)v39 = v41;
  v39[8] = v42;
  outlined consume of Environment<Color?>.Content(v43, v44);
  v45 = a3[9];
  v46 = &a1[v45];
  v47 = &a2[v45];
  v48 = *(_QWORD *)v47;
  v49 = v47[8];
  outlined copy of ResolvedTableRowIDs.Storage(*(_QWORD *)v47, v49);
  v50 = *(_QWORD *)v46;
  v51 = v46[8];
  *(_QWORD *)v46 = v48;
  v46[8] = v49;
  outlined consume of ResolvedTableRowIDs.Storage(v50, v51);
  return a1;
}

uint64_t initializeWithTake for UIKitCalendarView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v7 = *(int *)(v6 + 24);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = *(int *)(v6 + 28);
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  v18 = a3[5];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v22 = v21;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v23 = type metadata accessor for Locale();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v19, v20, v23);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  v24 = a3[6];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v28 = v27;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v29 = type metadata accessor for Calendar();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v25, v26, v29);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  v30 = a3[7];
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v34 = v33;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v35 = type metadata accessor for TimeZone();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v31, v32, v35);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  v36 = a3[8];
  v37 = a3[9];
  v38 = a1 + v36;
  v39 = a2 + v36;
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  v40 = a1 + v37;
  v41 = a2 + v37;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
  return a1;
}

char *assignWithTake for UIKitCalendarView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t (*v25)(uint64_t);
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_release();
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v7 = *(int *)(v6 + 24);
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = *(int *)(v6 + 28);
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v12(&a1[v16], 1, v10);
  v20 = v12(v18, 1, v10);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v18, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
      if (a1 == a2)
        goto LABEL_23;
      goto LABEL_14;
    }
LABEL_13:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    if (a1 == a2)
      goto LABEL_23;
    goto LABEL_14;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v17, v18, v10);
  if (a1 == a2)
    goto LABEL_23;
LABEL_14:
  v22 = a3[5];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38];
  v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
  outlined destroy of Binding<AttributedString>((uint64_t)&a1[v22], (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v25, v26);
  v28 = v27;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v29 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v23, v24, v29);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  v30 = a3[6];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0];
  outlined destroy of Binding<AttributedString>((uint64_t)&a1[v30], (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v26);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v33, v26);
  v35 = v34;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v36 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v31, v32, v36);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  v37 = a3[7];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v40 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470];
  outlined destroy of Binding<AttributedString>((uint64_t)&a1[v37], (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], v26);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v40, v26);
  v42 = v41;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v43 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v38, v39, v43);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
LABEL_23:
  v44 = a3[8];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = *(_QWORD *)v46;
  LOBYTE(v46) = v46[8];
  v48 = *(_QWORD *)v45;
  v49 = v45[8];
  *(_QWORD *)v45 = v47;
  v45[8] = (char)v46;
  outlined consume of Environment<Color?>.Content(v48, v49);
  v50 = a3[9];
  v51 = &a1[v50];
  v52 = &a2[v50];
  v53 = *(_QWORD *)v52;
  LOBYTE(v52) = v52[8];
  v54 = *(_QWORD *)v51;
  v55 = v51[8];
  *(_QWORD *)v51 = v53;
  v51[8] = (char)v52;
  outlined consume of ResolvedTableRowIDs.Storage(v54, v55);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitCalendarView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1875012E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;

  v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Locale>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CE1160]);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Calendar>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], MEMORY[0x1E0CE1160]);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], MEMORY[0x1E0CE1160]);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_9;
  }
  v17 = *(unsigned __int8 *)(a1 + a3[8] + 8);
  if (v17 > 1)
    return (v17 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for UIKitCalendarView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_18750142C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
LABEL_10:
    v11(v12, a2, a2, v10);
    return;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Locale>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CE1160]);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Calendar>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], MEMORY[0x1E0CE1160]);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], MEMORY[0x1E0CE1160]);
  v14 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v17;
    v15 = a4[7];
    goto LABEL_9;
  }
  *(_BYTE *)(a1 + a4[8] + 8) = -(char)a2;
}

uint64_t type metadata accessor for UIKitCalendarView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitCalendarView);
}

void type metadata completion function for UIKitCalendarView()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for MultiDatePickerStyleConfiguration(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in UIKitCalendarView()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>)
  {
    v2 = type metadata accessor for UIKitCalendarViewRepresentable(255);
    v4 = type metadata accessor for LabeledContent(a1, (uint64_t)&type metadata for MultiDatePickerStyleConfiguration.Label, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>);
  }
}

uint64_t type metadata accessor for UIKitCalendarViewRepresentable(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for UIKitCalendarViewRepresentable);
}

void type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnyDynamicFontModifier<Font.DesignModifier>)
  {
    lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier();
    v0 = type metadata accessor for AnyDynamicFontModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyDynamicFontModifier<Font.DesignModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier;
  if (!lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE69A8], MEMORY[0x1E0CE69B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable> and conformance <> LabeledContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>(255);
    v2[0] = &protocol witness table for MultiDatePickerStyleConfiguration.Label;
    v2[1] = &protocol witness table for UIKitCalendarViewRepresentable;
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for UIKitCalendarViewRepresentable(_QWORD *a1, char *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *__dst;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *(_QWORD *)a2;
  *a1 = *(_QWORD *)a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v7 = a1;
    v8 = *((_QWORD *)a2 + 2);
    a1[1] = *((_QWORD *)a2 + 1);
    a1[2] = v8;
    v9 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
    v10 = *(int *)(v9 + 24);
    __dst = (char *)v7 + v10;
    v11 = &a2[v10];
    v12 = type metadata accessor for Date();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v16 = v13;
    v17 = *(int *)(v9 + 28);
    v18 = (char *)v7 + v17;
    v19 = &a2[v17];
    if (v14(&a2[v17], 1, v12))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v19, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v12);
    }
    v21 = a3[5];
    v22 = (char *)v7 + v21;
    v23 = &a2[v21];
    v24 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    v25 = a3[6];
    v26 = (char *)v7 + v25;
    v27 = &a2[v25];
    v28 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    v29 = a3[7];
    v30 = (char *)v7 + v29;
    v31 = &a2[v29];
    v32 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    v33 = a3[9];
    *(_QWORD *)((char *)v7 + a3[8]) = *(_QWORD *)&a2[a3[8]];
    *((_BYTE *)v7 + v33) = a2[v33];
  }
  swift_retain();
  return v7;
}

uint64_t destroy for UIKitCalendarViewRepresentable(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v5 = a1 + *(int *)(v4 + 24);
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + *(int *)(v4 + 28);
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  v10 = a1 + a2[5];
  v11 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = a1 + a2[6];
  v13 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = a1 + a2[7];
  v15 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  return swift_release();
}

_QWORD *initializeWithCopy for UIKitCalendarViewRepresentable(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  a1[2] = *((_QWORD *)a2 + 2);
  v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v7 = *(int *)(v6 + 24);
  v8 = (char *)a1 + v7;
  v9 = &a2[v7];
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = *(int *)(v6 + 28);
  v15 = (char *)a1 + v14;
  v16 = &a2[v14];
  if (v12(&a2[v14], 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v16, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  v18 = a3[5];
  v19 = (char *)a1 + v18;
  v20 = &a2[v18];
  v21 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  v22 = a3[6];
  v23 = (char *)a1 + v22;
  v24 = &a2[v22];
  v25 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
  v26 = a3[7];
  v27 = (char *)a1 + v26;
  v28 = &a2[v26];
  v29 = type metadata accessor for TimeZone();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  v30 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)&a2[a3[8]];
  *((_BYTE *)a1 + v30) = a2[v30];
  swift_retain();
  return a1;
}

char *assignWithCopy for UIKitCalendarViewRepresentable(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *((_QWORD *)a1 + 1) = a2[1];
  swift_retain();
  swift_release();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v7 = *(int *)(v6 + 24);
  v8 = &a1[v7];
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = *(int *)(v6 + 28);
  v17 = &a1[v16];
  v18 = (char *)a2 + v16;
  v19 = v12(&a1[v16], 1, v10);
  v20 = v12(v18, 1, v10);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v17, v18, v10);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v17, v18, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
LABEL_13:
  v22 = a3[5];
  v23 = &a1[v22];
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  v26 = a3[6];
  v27 = &a1[v26];
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  v30 = a3[7];
  v31 = &a1[v30];
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for TimeZone();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v31, v32, v33);
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  a1[a3[9]] = *((_BYTE *)a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for UIKitCalendarViewRepresentable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v7 = *(int *)(v6 + 24);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = *(int *)(v6 + 28);
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  v18 = a3[5];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  v22 = a3[6];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
  v26 = a3[7];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
  v30 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  return a1;
}

char *assignWithTake for UIKitCalendarViewRepresentable(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  *(_QWORD *)a1 = *a2;
  swift_release();
  *((_QWORD *)a1 + 1) = a2[1];
  swift_release();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v7 = *(int *)(v6 + 24);
  v8 = &a1[v7];
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = *(int *)(v6 + 28);
  v17 = &a1[v16];
  v18 = (char *)a2 + v16;
  v19 = v12(&a1[v16], 1, v10);
  v20 = v12(v18, 1, v10);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v17, v18, v10);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v18, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
LABEL_13:
  v22 = a3[5];
  v23 = &a1[v22];
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  v26 = a3[6];
  v27 = &a1[v26];
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 40))(v27, v28, v29);
  v30 = a3[7];
  v31 = &a1[v30];
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for TimeZone();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 40))(v31, v32, v33);
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)((char *)a2 + a3[8]);
  swift_release();
  a1[a3[9]] = *((_BYTE *)a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitCalendarViewRepresentable()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1875025D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;

  v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Locale();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for Calendar();
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  v15 = type metadata accessor for TimeZone();
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[8]);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitCalendarViewRepresentable()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1875026D8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = type metadata accessor for Locale();
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = type metadata accessor for Calendar();
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  result = type metadata accessor for TimeZone();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[8]) = a2;
  return result;
}

uint64_t type metadata completion function for UIKitCalendarViewRepresentable()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = type metadata accessor for MultiDatePickerStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Locale();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Calendar();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for TimeZone();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable> and conformance <> LabeledContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier>)
  {
    type metadata accessor for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier>);
  }
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t View.layoutScale(_:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4;

  v4 = a3;
  return MEMORY[0x18D75B4AC](&v4, a1, &type metadata for _LayoutScaleModifier, a2);
}

void _LayoutScaleModifier.scale.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*_LayoutScaleModifier.scale.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void _LayoutScaleModifier.animatableData.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double (*_LayoutScaleModifier.animatableData.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance ScrollTransitionProgress;
}

double static _LayoutScaleModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X1>, void (*a2)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, double *a3@<X8>)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  char v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  double result;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  double v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a1;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v32 = *(_QWORD *)(a1 + 48);
  v33 = *(_DWORD *)(a1 + 56);
  v34 = *(_DWORD *)(a1 + 36);
  v29 = *(_DWORD *)(a1 + 60);
  v31 = *(_DWORD *)(a1 + 64);
  v28 = *(_DWORD *)(a1 + 68);
  v10 = *(_DWORD *)(a1 + 76);
  v30 = *(_DWORD *)(a1 + 72);
  v11 = *(_DWORD *)(a1 + 80);
  lazy protocol witness table accessor for type _LayoutScaleModifier and conformance _LayoutScaleModifier();
  v27 = static Animatable.makeAnimatable(value:inputs:)();
  v46 = v3;
  v47 = v4;
  v48 = v5;
  *(_QWORD *)&v49 = __PAIR64__(v6, v7);
  *((_QWORD *)&v49 + 1) = __PAIR64__(v34, v8);
  v50 = v9;
  v51 = v32;
  *(_QWORD *)&v52 = __PAIR64__(v29, v33);
  *((_QWORD *)&v52 + 1) = __PAIR64__(v28, v31);
  v53 = __PAIR64__(v10, v30);
  v54 = v11;
  LODWORD(v38) = v4;
  v39 = v5;
  *(_QWORD *)&v40 = __PAIR64__(v6, v7);
  *((_QWORD *)&v40 + 1) = __PAIR64__(v34, v8);
  v41 = v9;
  v42 = v32;
  *(_QWORD *)&v43 = __PAIR64__(v29, v33);
  *((_QWORD *)&v43 + 1) = __PAIR64__(v28, v31);
  v44 = __PAIR64__(v10, v30);
  v26 = v10;
  v45 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LODWORD(v37) = v27;
  HIDWORD(v37) = _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScaledEnvironment and conformance ScaledEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  if ((v34 & 0x20) != 0)
  {
    _ViewInputs.position.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScaledOrigin and conformance ScaledOrigin();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.position.setter();
    _ViewInputs.animatedPosition()();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.containerPosition.setter();
    _ViewInputs.size.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScaledSize and conformance ScaledSize();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.size.setter();
    v39 = v5;
    *(_QWORD *)&v40 = __PAIR64__(v6, v7);
    *((_QWORD *)&v40 + 1) = __PAIR64__(v34, v8);
    v41 = v9;
    v42 = v32;
    *(_QWORD *)&v43 = __PAIR64__(v29, v33);
    *((_QWORD *)&v43 + 1) = __PAIR64__(v28, v31);
    v44 = __PAIR64__(v10, v30);
    v45 = v11;
    LODWORD(v37) = v27;
    HIDWORD(v37) = _ViewInputs.position.getter();
    LODWORD(v38) = _ViewInputs.transform.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScaledTransform and conformance ScaledTransform();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.transform.setter();
  }
  v37 = v46;
  LODWORD(v38) = v47;
  v39 = v48;
  v40 = v49;
  v41 = v50;
  v42 = v51;
  v43 = v52;
  v44 = v53;
  v45 = v54;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  a2(&v35, v12, &v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v37 = v32;
  LODWORD(v38) = v33;
  v13 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v14 = (unsigned int *)MEMORY[0x1E0CFED28];
  if ((v13 & 1) != 0)
  {
    _DisplayList_Identity.init()();
    v23 = v37;
    v37 = v3;
    LODWORD(v38) = v4;
    v39 = v5;
    *(_QWORD *)&v40 = __PAIR64__(v6, v7);
    *((_QWORD *)&v40 + 1) = __PAIR64__(v34, v8);
    v41 = v9;
    v42 = v32;
    *(_QWORD *)&v43 = __PAIR64__(v29, v33);
    *((_QWORD *)&v43 + 1) = __PAIR64__(v28, v31);
    v44 = __PAIR64__(v26, v30);
    v45 = v11;
    _ViewInputs.pushIdentity(_:)();
    v37 = v3;
    LODWORD(v38) = v4;
    v39 = v5;
    *(_QWORD *)&v40 = __PAIR64__(v6, v7);
    *((_QWORD *)&v40 + 1) = __PAIR64__(v34, v8);
    v41 = v9;
    v42 = v32;
    *(_QWORD *)&v43 = __PAIR64__(v29, v33);
    *((_QWORD *)&v43 + 1) = __PAIR64__(v28, v31);
    v44 = __PAIR64__(v26, v30);
    v45 = v11;
    v22 = _ViewInputs.animatedPosition()();
    v37 = v3;
    LODWORD(v38) = v4;
    v39 = v5;
    *(_QWORD *)&v40 = __PAIR64__(v6, v7);
    *((_QWORD *)&v40 + 1) = __PAIR64__(v34, v8);
    v41 = v9;
    v42 = v32;
    *(_QWORD *)&v43 = __PAIR64__(v29, v33);
    *((_QWORD *)&v43 + 1) = __PAIR64__(v28, v31);
    v44 = __PAIR64__(v26, v30);
    v45 = v11;
    v21 = _ViewInputs.animatedCGSize()();
    v37 = v3;
    LODWORD(v38) = v4;
    v39 = v5;
    *(_QWORD *)&v40 = __PAIR64__(v6, v7);
    *((_QWORD *)&v40 + 1) = __PAIR64__(v34, v8);
    v41 = v9;
    v14 = (unsigned int *)MEMORY[0x1E0CFED28];
    v42 = v32;
    *(_QWORD *)&v43 = __PAIR64__(v29, v33);
    *((_QWORD *)&v43 + 1) = __PAIR64__(v28, v31);
    v44 = __PAIR64__(v26, v30);
    v45 = v11;
    v15 = _ViewInputs.containerPosition.getter();
    v37 = v35;
    v38 = *(_QWORD *)&v36;
    v16 = _ViewOutputs.subscript.getter();
    v17 = *v14;
    if ((v16 & 0x100000000) == 0)
      v17 = v16;
    v37 = __PAIR64__(v27, v23);
    v38 = __PAIR64__(v21, v22);
    v39 = __PAIR64__(v17, v15);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScaledDisplayList and conformance ScaledDisplayList();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v37) = 0;
    _ViewOutputs.subscript.setter();
  }
  if ((v34 & 2) != 0)
  {
    v37 = v35;
    v38 = *(_QWORD *)&v36;
    v18 = _ViewOutputs.layoutComputer.getter();
    v19 = *v14;
    if ((v18 & 0x100000000) == 0)
      v19 = v18;
    v37 = __PAIR64__(v19, v27);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScaledLayoutComputer and conformance ScaledLayoutComputer();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v37) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a3 = v35;
  result = v36;
  a3[1] = v36;
  return result;
}

unint64_t lazy protocol witness table accessor for type _LayoutScaleModifier and conformance _LayoutScaleModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _LayoutScaleModifier and conformance _LayoutScaleModifier;
  if (!lazy protocol witness table cache variable for type _LayoutScaleModifier and conformance _LayoutScaleModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _LayoutScaleModifier, &type metadata for _LayoutScaleModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutScaleModifier and conformance _LayoutScaleModifier);
  }
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _LayoutScaleModifier(_QWORD *a1))()
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance _LayoutScaleModifier;
}

void protocol witness for ViewModifier.body(content:) in conformance _LayoutScaleModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t protocol witness for Rule.value.getter in conformance ScaledEnvironment@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  EnvironmentValues.pixelLength.getter();
  AGGraphGetValue();
  return EnvironmentValues.defaultPixelLength.setter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScaledEnvironment()
{
  lazy protocol witness table accessor for type ScaledEnvironment and conformance ScaledEnvironment();
  return static AsyncAttribute.flags.getter();
}

double protocol witness for Rule.value.getter in conformance ScaledOrigin@<D0>(_OWORD *a1@<X8>)
{
  void (*v2)(_BYTE *, _QWORD);
  float64x2_t *v3;
  double result;
  double v5;
  _BYTE v6[32];
  __int128 v7;

  v7 = *(_OWORD *)AGGraphGetValue();
  v5 = 1.0 / *(double *)AGGraphGetValue();
  v2 = (void (*)(_BYTE *, _QWORD))ViewOrigin.value.modify();
  *v3 = vmulq_n_f64(*v3, v5);
  v2(v6, 0);
  result = *(double *)&v7;
  *a1 = v7;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScaledOrigin()
{
  lazy protocol witness table accessor for type ScaledOrigin and conformance ScaledOrigin();
  return static AsyncAttribute.flags.getter();
}

double ScaledSize.value.getter@<D0>(_OWORD *a1@<X8>)
{
  __int128 *Value;
  __int128 v3;
  void (*v4)(_OWORD *, _QWORD);
  float64x2_t *v5;
  double result;
  __int128 v7;
  double v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;

  Value = (__int128 *)AGGraphGetValue();
  v3 = Value[1];
  v10 = *Value;
  v11 = v3;
  v8 = 1.0 / *(double *)AGGraphGetValue();
  v4 = (void (*)(_OWORD *, _QWORD))ViewSize.value.modify();
  *v5 = vmulq_n_f64(*v5, v8);
  v4(v9, 0);
  v9[0] = v10;
  v9[1] = v11;
  ViewSize.proposal.getter();
  _ProposedSize.scaled(by:)();
  ViewSize.proposal.setter();
  result = *(double *)&v10;
  v7 = v11;
  *a1 = v10;
  a1[1] = v7;
  return result;
}

double protocol witness for Rule.value.getter in conformance ScaledSize@<D0>(_OWORD *a1@<X8>)
{
  return ScaledSize.value.getter(a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScaledSize()
{
  lazy protocol witness table accessor for type ScaledSize and conformance ScaledSize();
  return static AsyncAttribute.flags.getter();
}

void protocol witness for Rule.value.getter in conformance ScaledTransform(uint64_t a1@<X8>)
{
  uint64_t Value;
  CGFloat v3;
  uint64_t v4;
  CGAffineTransform v5;

  Value = AGGraphGetValue();
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
  v3 = 1.0 / *(double *)AGGraphGetValue();
  *(_OWORD *)&v5.a = *(_OWORD *)AGGraphGetValue();
  v4 = swift_retain();
  MEMORY[0x18D755E9C](v4);
  ViewTransform.appendPosition(_:scale:)();
  CGAffineTransformMakeScale(&v5, v3, v3);
  ViewTransform.appendAffineTransform(_:inverse:)(&v5, 0);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScaledTransform()
{
  lazy protocol witness table accessor for type ScaledTransform and conformance ScaledTransform();
  return static AsyncAttribute.flags.getter();
}

uint64_t ScaledLayoutComputer.updateValue()()
{
  uint64_t v0;

  AGGraphGetValue();
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x1E0CFED28])
  {
    static LayoutComputer.defaultValue.getter();
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
  }
  lazy protocol witness table accessor for type ScaledLayoutComputer and conformance ScaledLayoutComputer();
  lazy protocol witness table accessor for type ScaledLayoutComputer.Engine and conformance ScaledLayoutComputer.Engine();
  StatefulRule<>.update<A>(to:)();
  return swift_release();
}

uint64_t ScaledLayoutComputer.Engine.sizeThatFits(_:)()
{
  swift_retain();
  _ProposedSize.scaled(by:)();
  LayoutComputer.sizeThatFits(_:)();
  return swift_release();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScaledLayoutComputer()
{
  lazy protocol witness table accessor for type ScaledLayoutComputer and conformance ScaledLayoutComputer();
  return static AsyncAttribute.flags.getter();
}

uint64_t ScaledDisplayList.value.getter()
{
  uint64_t v0;
  CGFloat a;
  __int16 b_low;
  char v3;
  uint64_t Value;
  CGFloat *v6;
  CGFloat tx;
  CGFloat ty;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  CGAffineTransform v12;

  if (*(_DWORD *)(v0 + 20) == *MEMORY[0x1E0CFED28])
  {
    DisplayList.init()();
    a = v12.a;
    b_low = LOWORD(v12.b);
    v3 = BYTE2(v12.b);
  }
  else
  {
    Value = AGGraphGetValue();
    a = *(double *)Value;
    b_low = *(_WORD *)(Value + 8);
    v3 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
  }
  v12.a = a;
  LOWORD(v12.b) = b_low;
  BYTE2(v12.b) = v3;
  if ((DisplayList.isEmpty.getter() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return DisplayList.init()();
  }
  else
  {
    *(_OWORD *)&v12.a = *(_OWORD *)AGGraphGetValue();
    MEMORY[0x18D755E9C]();
    *(_OWORD *)&v12.a = *(_OWORD *)AGGraphGetValue();
    MEMORY[0x18D755E9C]();
    v6 = (CGFloat *)AGGraphGetValue();
    CGAffineTransformMakeScale(&v12, *v6, *v6);
    v10 = *(_OWORD *)&v12.c;
    v11 = *(_OWORD *)&v12.a;
    tx = v12.tx;
    ty = v12.ty;
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = v11;
    *(_OWORD *)(v9 + 32) = v10;
    *(CGFloat *)(v9 + 48) = tx;
    *(CGFloat *)(v9 + 56) = ty;
    *(_QWORD *)(v9 + 72) = 0;
    *(_QWORD *)(v9 + 80) = 0;
    *(_QWORD *)(v9 + 64) = 0;
    *(_BYTE *)(v9 + 88) = 0;
    type metadata accessor for CGSize(0);
    AGGraphGetValue();
    DisplayList.Version.init(forUpdate:)();
    DisplayList.Item.init(_:frame:identity:version:)();
    DisplayList.Item.canonicalize(options:)();
    return DisplayList.init(_:)();
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScaledDisplayList()
{
  lazy protocol witness table accessor for type ScaledDisplayList and conformance ScaledDisplayList();
  return static AsyncAttribute.flags.getter();
}

unint64_t lazy protocol witness table accessor for type ScaledEnvironment and conformance ScaledEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaledEnvironment and conformance ScaledEnvironment;
  if (!lazy protocol witness table cache variable for type ScaledEnvironment and conformance ScaledEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScaledEnvironment, &unk_1E1AC65D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledEnvironment and conformance ScaledEnvironment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaledEnvironment and conformance ScaledEnvironment;
  if (!lazy protocol witness table cache variable for type ScaledEnvironment and conformance ScaledEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScaledEnvironment, &unk_1E1AC65D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledEnvironment and conformance ScaledEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScaledLayoutComputer and conformance ScaledLayoutComputer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScaledLayoutComputer, &unk_1E1AD4330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScaledLayoutComputer, &unk_1E1AD4330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScaledLayoutComputer, &unk_1E1AD4330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScaledDisplayList and conformance ScaledDisplayList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaledDisplayList and conformance ScaledDisplayList;
  if (!lazy protocol witness table cache variable for type ScaledDisplayList and conformance ScaledDisplayList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScaledDisplayList, &unk_1E1B1A138);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledDisplayList and conformance ScaledDisplayList);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaledDisplayList and conformance ScaledDisplayList;
  if (!lazy protocol witness table cache variable for type ScaledDisplayList and conformance ScaledDisplayList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScaledDisplayList, &unk_1E1B1A138);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledDisplayList and conformance ScaledDisplayList);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScaledOrigin and conformance ScaledOrigin()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaledOrigin and conformance ScaledOrigin;
  if (!lazy protocol witness table cache variable for type ScaledOrigin and conformance ScaledOrigin)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScaledOrigin, &unk_1E1AB33F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledOrigin and conformance ScaledOrigin);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaledOrigin and conformance ScaledOrigin;
  if (!lazy protocol witness table cache variable for type ScaledOrigin and conformance ScaledOrigin)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScaledOrigin, &unk_1E1AB33F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledOrigin and conformance ScaledOrigin);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScaledSize and conformance ScaledSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaledSize and conformance ScaledSize;
  if (!lazy protocol witness table cache variable for type ScaledSize and conformance ScaledSize)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScaledSize, &unk_1E1AADF08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledSize and conformance ScaledSize);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaledSize and conformance ScaledSize;
  if (!lazy protocol witness table cache variable for type ScaledSize and conformance ScaledSize)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScaledSize, &unk_1E1AADF08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledSize and conformance ScaledSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScaledTransform and conformance ScaledTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaledTransform and conformance ScaledTransform;
  if (!lazy protocol witness table cache variable for type ScaledTransform and conformance ScaledTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScaledTransform, &unk_1E1ABCA20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledTransform and conformance ScaledTransform);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaledTransform and conformance ScaledTransform;
  if (!lazy protocol witness table cache variable for type ScaledTransform and conformance ScaledTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScaledTransform, &unk_1E1ABCA20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledTransform and conformance ScaledTransform);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in _LayoutScaleModifier()
{
  return &protocol witness table for _LayoutScaleModifier;
}

double sub_187503D84@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_187503D90(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

ValueMetadata *type metadata accessor for _LayoutScaleModifier()
{
  return &type metadata for _LayoutScaleModifier;
}

uint64_t sub_187503DAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _LayoutScaleModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void *type metadata accessor for ScaledTransform()
{
  return &unk_1E1ABCA20;
}

void *type metadata accessor for ScaledSize()
{
  return &unk_1E1AADF08;
}

void *type metadata accessor for ScaledOrigin()
{
  return &unk_1E1AB33F0;
}

void *type metadata accessor for ScaledDisplayList()
{
  return &unk_1E1B1A138;
}

void *type metadata accessor for ScaledLayoutComputer()
{
  return &unk_1E1AD4330;
}

void *type metadata accessor for ScaledEnvironment()
{
  return &unk_1E1AC65D0;
}

uint64_t sub_187504010()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ScaledLayoutComputer.Engine and conformance ScaledLayoutComputer.Engine()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaledLayoutComputer.Engine and conformance ScaledLayoutComputer.Engine;
  if (!lazy protocol witness table cache variable for type ScaledLayoutComputer.Engine and conformance ScaledLayoutComputer.Engine)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScaledLayoutComputer.Engine, &unk_1E1B1A170);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledLayoutComputer.Engine and conformance ScaledLayoutComputer.Engine);
  }
  return result;
}

_QWORD *assignWithCopy for ScaledLayoutComputer.Engine(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for ScaledLayoutComputer.Engine(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  return a1;
}

void *type metadata accessor for ScaledLayoutComputer.Engine()
{
  return &unk_1E1B1A170;
}

uint64_t *initializeBufferWithCopyOfBuffer for CollapsibleWheelDatePickerStyle(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Locale();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = a3[5];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = type metadata accessor for Calendar();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v13 = a3[6];
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v16 = type metadata accessor for TimeZone();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      *v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v17 = a3[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    *v18 = *v19;
    *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for CollapsibleWheelDatePickerStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  v5 = a1 + *(int *)(a2 + 20);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  v7 = a1 + *(int *)(a2 + 24);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  return swift_release();
}

_QWORD *initializeWithCopy for CollapsibleWheelDatePickerStyle(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Locale();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = a3[5];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = type metadata accessor for Calendar();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = type metadata accessor for TimeZone();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  else
  {
    *v12 = *v13;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v15 = a3[7];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *v16 = *v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for CollapsibleWheelDatePickerStyle(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  if (a1 != a2)
  {
    v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38];
    v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
    outlined destroy of Binding<AttributedString>((uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v6, v7);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = type metadata accessor for Locale();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = a3[5];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0];
    v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
    outlined destroy of Binding<AttributedString>((uint64_t)a1 + v9, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v12, v13);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v14 = type metadata accessor for Calendar();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v10, v11, v14);
    }
    else
    {
      *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v15 = a3[6];
    v16 = (_QWORD *)((char *)a1 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470];
    outlined destroy of Binding<AttributedString>((uint64_t)a1 + v15, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], v13);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v18, v13);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v19 = type metadata accessor for TimeZone();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
    }
    else
    {
      *v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v20 = a3[7];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  *v21 = *v22;
  *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for CollapsibleWheelDatePickerStyle(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v13 = v12;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v10, v11, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v19 = v18;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v16, v17, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for CollapsibleWheelDatePickerStyle(char *a1, char *a2, int *a3)
{
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;

  if (a1 != a2)
  {
    v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38];
    v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
    outlined destroy of Binding<AttributedString>((uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v6, v7);
    v9 = v8;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    v11 = a3[5];
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0];
    v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
    outlined destroy of Binding<AttributedString>((uint64_t)&a1[v11], (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v14, v15);
    v17 = v16;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v18 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v12, v13, v18);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    v19 = a3[6];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v22 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470];
    outlined destroy of Binding<AttributedString>((uint64_t)&a1[v19], (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], v15);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v22, v15);
    v24 = v23;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v25 = type metadata accessor for TimeZone();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v20, v21, v25);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
  }
  v26 = a3[7];
  v27 = &a1[v26];
  v28 = &a2[v26];
  *v27 = *v28;
  *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CollapsibleWheelDatePickerStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187504D80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  int v17;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Locale>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CE1160]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Calendar>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], MEMORY[0x1E0CE1160]);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], MEMORY[0x1E0CE1160]);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[7] + 8);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  v17 = v16 - 1;
  if (v17 < 0)
    v17 = -1;
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for CollapsibleWheelDatePickerStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_187504EB0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Locale>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CE1160]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
LABEL_8:
    v11(v12, a2, a2, v10);
    return;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Calendar>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], MEMORY[0x1E0CE1160]);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], MEMORY[0x1E0CE1160]);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[7] + 8) = a2;
}

uint64_t type metadata accessor for CollapsibleWheelDatePickerStyle()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CollapsibleWheelDatePickerStyle;
  if (!type metadata singleton initialization cache for CollapsibleWheelDatePickerStyle)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for CollapsibleWheelDatePickerStyle()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t associated type witness table accessor for DatePickerStyle.Body : View in CollapsibleWheelDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

id one-time initialization function for dateFormatter()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  objc_msgSend(v0, sel_setDateStyle_, 2);
  result = objc_msgSend(v0, sel_setTimeStyle_, 1);
  static CollapsibleWheelDatePickerStyle.dateFormatter = (uint64_t)v0;
  return result;
}

uint64_t CollapsibleWheelDatePickerStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _WORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t (**v66)();
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;

  v3 = v2;
  v99 = a1;
  v104 = a2;
  v98 = type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v98, v4);
  v97 = (uint64_t)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, v6, v7, v8);
  v94 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v89 = (uint64_t)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v96 = (uint64_t)&v89 - v14;
  type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>(0, v15, v16, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v95 = (uint64_t)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>(0, v21, v22, v23);
  MEMORY[0x1E0C80A78](v24, v25);
  v93 = (uint64_t)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>(0, v27, v28, v29);
  v91 = v30;
  MEMORY[0x1E0C80A78](v30, v31);
  v92 = (uint64_t)&v89 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>(0, v33, v34, v35);
  v101 = *(_QWORD *)(v36 - 8);
  v102 = v36;
  MEMORY[0x1E0C80A78](v36, v37);
  v90 = (uint64_t)&v89 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?, v39, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v40, v41);
  v103 = (uint64_t)&v89 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43, v44);
  v46 = (char *)&v89 - v45;
  v47 = type metadata accessor for CollapsibleWheelDatePickerStyle();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(_QWORD *)(v48 + 64);
  MEMORY[0x1E0C80A78](v47, v50);
  v51 = (char *)&v89 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>(0);
  v53 = v52;
  MEMORY[0x1E0C80A78](v52, v54);
  v100 = (uint64_t)&v89 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v56, v57);
  v59 = (_WORD *)((char *)&v89 - v58);
  MEMORY[0x1E0C80A78](v60, v61);
  v63 = (char *)&v89 - v62;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for CollapsibleWheelDatePickerStyle);
  v64 = (*(unsigned __int8 *)(v48 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  v65 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v51, v65 + v64, (uint64_t (*)(_QWORD))type metadata accessor for CollapsibleWheelDatePickerStyle);
  *v59 = 256;
  v66 = (uint64_t (**)())((char *)v59 + *(int *)(v53 + 36));
  *v66 = partial apply for closure #1 in CollapsibleWheelDatePickerStyle.makeBody(configuration:);
  v66[1] = (uint64_t (*)())v65;
  v67 = v99;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  closure #2 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)(v3, v67, (uint64_t)v59 + *(int *)(v53 + 40));
  outlined init with take of TableCellFormula((uint64_t)v59, (uint64_t)v63, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>);
  v68 = v3 + *(int *)(v47 + 28);
  v69 = *(_BYTE *)v68;
  v70 = *(_QWORD *)(v68 + 8);
  v105 = v69;
  v106 = v70;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  if (v107 == 1)
  {
    v71 = v97;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v67, v97, type metadata accessor for DatePickerStyleConfiguration);
    v72 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
    v73 = v89;
    outlined init with copy of SearchFieldConfiguration.Data?(v71, v89, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v74 = v98;
    v75 = v94;
    v76 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    outlined init with copy of SearchFieldConfiguration.Data?(v71 + *(int *)(v98 + 24), v73 + *(int *)(v94 + 36), (unint64_t *)&lazy cache variable for type metadata for Date?, v72, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    outlined init with copy of SearchFieldConfiguration.Data?(v71 + *(int *)(v74 + 28), v73 + *(int *)(v75 + 40), (unint64_t *)&lazy cache variable for type metadata for Date?, v72, v76);
    *(_QWORD *)(v73 + *(int *)(v75 + 44)) = *(_QWORD *)(v71 + *(int *)(v74 + 32));
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v71, type metadata accessor for DatePickerStyleConfiguration);
    v77 = v96;
    outlined init with take of TableCellFormula(v73, v96, (uint64_t (*)(_QWORD))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
    v78 = v95;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v77, v95, (uint64_t (*)(_QWORD))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v77, (uint64_t (*)(_QWORD))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
    v79 = v93;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v78, v93, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v78, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>);
    v80 = v92;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v79, v92, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>);
    *(_WORD *)(v80 + *(int *)(v91 + 36)) = 769;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v79, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>);
    v81 = v90;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v80, v90, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v80, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>);
    outlined init with take of TableCellFormula(v81, (uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>);
    v82 = 0;
  }
  else
  {
    v82 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56))(v46, v82, 1, v102);
  v83 = v100;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v63, v100, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>);
  v84 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  v85 = v103;
  outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v46, v103, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v86 = v104;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v83, v104, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>);
  type metadata accessor for (Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?)();
  outlined init with copy of SearchFieldConfiguration.Data?(v85, v86 + *(int *)(v87 + 48), &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, v84);
  outlined destroy of Binding<AttributedString>((uint64_t)v46, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, v84);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v63, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>);
  outlined destroy of Binding<AttributedString>(v85, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, v84);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v83, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>);
}

uint64_t closure #1 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)()
{
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in closure #1 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for CollapsibleWheelDatePickerStyle() + 28) + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  swift_retain();
  result = State.wrappedValue.getter();
  if (v2)
  {
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

__n128 closure #2 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __n128 v11;
  uint64_t v12;

  CollapsibleWheelDatePickerStyle.formattedDate(_:)(a2);
  v5 = a1 + *(int *)(type metadata accessor for CollapsibleWheelDatePickerStyle() + 28);
  LOBYTE(v8) = *(_BYTE *)v5;
  v9 = *(_QWORD *)(v5 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  if (v7 == 1)
    static Color.accentColor.getter();
  else
    static Color.secondary.getter();
  View.defaultForegroundColor(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  View.defaultForegroundColor(_:)();
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v9;
  *(_BYTE *)(a3 + 32) = v10;
  result = v11;
  *(__n128 *)(a3 + 40) = v11;
  *(_QWORD *)(a3 + 56) = v12;
  *(_BYTE *)(a3 + 64) = 2;
  return result;
}

uint64_t CollapsibleWheelDatePickerStyle.formattedDate(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  Class isa;
  Class v20;
  Class v21;
  char *v22;
  Class v23;
  id v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v31 = a1;
  v1 = type metadata accessor for Date();
  v32 = *(_QWORD *)(v1 - 8);
  v33 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v30 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TimeZone();
  v28 = *(_QWORD *)(v4 - 8);
  v29 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Calendar();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for dateFormatter != -1)
    swift_once();
  v18 = (void *)static CollapsibleWheelDatePickerStyle.dateFormatter;
  specialized Environment.wrappedValue.getter((uint64_t)v17);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  objc_msgSend(v18, sel_setLocale_, isa);

  type metadata accessor for CollapsibleWheelDatePickerStyle();
  specialized Environment.wrappedValue.getter((uint64_t)v12);
  v20 = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  objc_msgSend(v18, sel_setCalendar_, v20);

  specialized Environment.wrappedValue.getter((uint64_t)v7);
  v21 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v29);
  objc_msgSend(v18, sel_setTimeZone_, v21);

  v34 = *(_QWORD *)(v31 + *(int *)(type metadata accessor for DatePickerStyleConfiguration(0) + 32));
  NSDateFormatter.configure(with:)(&v34);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v22 = v30;
  MEMORY[0x18D75B9C8]();
  v23 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v33);
  v24 = objc_msgSend(v18, sel_stringFromDate_, v23);

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v25;
}

id NSDateFormatter.configure(with:)(uint64_t *a1)
{
  void *v1;
  uint64_t v2;

  v2 = *a1;
  if (one-time initialization token for hourAndMinute != -1)
    swift_once();
  objc_msgSend(v1, sel_setTimeStyle_, (static DatePickerComponents.hourAndMinute & ~v2) == 0);
  if (one-time initialization token for date != -1)
    swift_once();
  return objc_msgSend(v1, sel_setDateStyle_, (static DatePickerComponents.date & ~v2) == 0);
}

void type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for DatePicker<DatePickerStyleConfiguration.Label>)
  {
    v4 = type metadata accessor for DatePicker(0, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t)&protocol witness table for DatePickerStyleConfiguration.Label, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for DatePicker<DatePickerStyleConfiguration.Label>);
  }
}

void type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>)
  {
    type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(255, a2, a3, a4);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for DatePickerStyleModifier<WheelDatePickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WheelDatePickerStyle and conformance WheelDatePickerStyle, (uint64_t)&type metadata for WheelDatePickerStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DatePickerStyleModifier);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type WheelDatePickerStyle and conformance WheelDatePickerStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WheelDatePickerStyle and conformance WheelDatePickerStyle;
  if (!lazy protocol witness table cache variable for type WheelDatePickerStyle and conformance WheelDatePickerStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WheelDatePickerStyle, &type metadata for WheelDatePickerStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WheelDatePickerStyle and conformance WheelDatePickerStyle);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>)
  {
    type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>(255, a2, a3, a4);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<HiddenLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type HiddenLabeledContentStyle and conformance HiddenLabeledContentStyle, (uint64_t)&type metadata for HiddenLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type HiddenLabeledContentStyle and conformance HiddenLabeledContentStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HiddenLabeledContentStyle and conformance HiddenLabeledContentStyle;
  if (!lazy protocol witness table cache variable for type HiddenLabeledContentStyle and conformance HiddenLabeledContentStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HiddenLabeledContentStyle, &type metadata for HiddenLabeledContentStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HiddenLabeledContentStyle and conformance HiddenLabeledContentStyle);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>(255, a2, a3, a4);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>(255, a2, a3, a4);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>);
  }
}

void type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for Button(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>);
  }
}

void type metadata accessor for ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>)
  {
    type metadata accessor for LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>);
  }
}

void type metadata accessor for LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>)
  {
    type metadata accessor for ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>(255, &lazy cache variable for type metadata for ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
    v3 = v2;
    type metadata accessor for ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>(255, &lazy cache variable for type metadata for ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>);
    v6 = type metadata accessor for LabeledContent(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>);
  }
}

void type metadata accessor for ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>();
    v3 = type metadata accessor for ModifiedContent();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>> and conformance <> LabeledContent<A, B>();
    v3[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>> and conformance <> LabeledContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t)&protocol witness table for DatePickerStyleConfiguration.Label);
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58]);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>(255, a2);
    v8 = v7;
    v9[0] = a4;
    v9[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1875063EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for CollapsibleWheelDatePickerStyle();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v0 + v3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    swift_release();
  }
  v6 = v4 + *(int *)(v1 + 20);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  v8 = v4 + *(int *)(v1 + 24);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)()
{
  type metadata accessor for CollapsibleWheelDatePickerStyle();
  return closure #1 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)();
}

void type metadata accessor for (Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?))
  {
    type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>(255);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?));
  }
}

uint64_t partial apply for closure #1 in closure #1 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)(*(_QWORD *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type TupleView<(Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t FocusBridge.focusDidChange_PhoneWatch(rootResponder:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  void *v16;
  _QWORD v17[8];
  _BYTE v18[32];
  _BYTE v19[24];
  int v20;
  _BYTE v21[64];
  _OWORD v22[3];
  uint64_t v23;
  int v24;

  result = FocusBridge.canAcceptFocus.getter();
  if ((result & 1) != 0)
  {
    memset(v22, 0, sizeof(v22));
    v23 = 1;
    v24 = 0;
    if (a1)
    {
      MEMORY[0x1E0C80A78](result, v3);
      MEMORY[0x1E0C80A78](v4, v5);
      dispatch thunk of ResponderNode.visit(applying:)();
    }
    FocusBridge.focusedItem.getter((uint64_t)v21);
    outlined init with copy of FocusItem?((uint64_t)v22, (uint64_t)v17);
    if (v17[5] || v17[6] != 1)
    {
      outlined init with take of FocusItem((uint64_t)v17, (uint64_t)v18);
    }
    else
    {
      *(_OWORD *)v19 = 0u;
      memset(v18, 0, sizeof(v18));
      *(_QWORD *)&v19[16] = 1;
      v20 = 0;
      outlined destroy of FocusItem?((uint64_t)v17);
    }
    FocusBridge.focusedItem.setter((uint64_t)v18);
    FocusBridge.focusedItem.getter((uint64_t)v18);
    v7 = *(_QWORD *)&v19[8];
    v6 = *(_QWORD *)&v19[16];
    outlined destroy of FocusItem?((uint64_t)v18);
    if (v7 || v6 != 1)
    {
      FocusBridge.focusedItem.getter((uint64_t)v18);
      v9 = (void *)FocusBridge.host.getter();
      v11 = v10;
      v13 = v12;
      outlined init with copy of FocusItem?((uint64_t)v18, (uint64_t)v17);
      v14 = (_QWORD *)swift_allocObject();
      outlined init with take of FocusItem?((uint64_t)v17, (uint64_t)(v14 + 2));
      v14[10] = v9;
      v14[11] = v11;
      v14[12] = v13;
      v15 = v9;
      onNextMainRunLoop(do:)();

      swift_release();
    }
    else
    {
      outlined init with copy of FocusItem?((uint64_t)v21, (uint64_t)v18);
      if (*(_OWORD *)&v19[8] != __PAIR128__(1, 0))
      {
        v8 = (void *)FocusItem.platformResponder.getter();
        outlined destroy of FocusItem((uint64_t)v18);
        if (v8)
        {

          outlined init with copy of FocusItem?((uint64_t)v21, (uint64_t)v18);
          if (*(_QWORD *)&v19[8] || *(_QWORD *)&v19[16] != 1)
          {
            v16 = (void *)FocusItem.platformResponder.getter();
            outlined destroy of FocusItem((uint64_t)v18);
            if (v16)
            {
LABEL_21:
              objc_msgSend(v16, sel_resignFirstResponder);

              goto LABEL_17;
            }
          }
          else
          {
            outlined destroy of FocusItem?((uint64_t)v18);
          }
          v16 = (void *)FocusBridge.host.getter();
          if (v16)
            goto LABEL_21;
        }
LABEL_17:
        outlined destroy of FocusItem?((uint64_t)v21);
        return outlined destroy of FocusItem?((uint64_t)v22);
      }
    }
    outlined destroy of FocusItem?((uint64_t)v18);
    goto LABEL_17;
  }
  return result;
}

uint64_t closure #1 in FocusBridge.focusDidChange_PhoneWatch(rootResponder:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  BOOL v6;
  void *v7;
  unsigned int v8;
  uint64_t result;
  _QWORD v10[8];
  _BYTE v11[64];

  (*(void (**)(_QWORD *__return_ptr, _QWORD))(a2 + 16))(v10, *a1);
  if (v10[5])
    v6 = 0;
  else
    v6 = v10[6] == 1;
  if (v6)
  {
    result = outlined destroy of FocusItem?((uint64_t)v10);
  }
  else
  {
    outlined init with take of FocusItem((uint64_t)v10, (uint64_t)v11);
    if ((FocusItem.isFocusable.getter() & 1) != 0)
    {
      v7 = (void *)FocusItem.platformResponder.getter();
      if (v7 || (v7 = (void *)FocusBridge.host.getter()) != 0)
      {
        v8 = objc_msgSend(v7, sel_isFirstResponder);

        if (v8)
        {
          outlined destroy of FocusItem?(a3);
          result = outlined init with take of FocusItem((uint64_t)v11, a3);
          *a4 = 2;
          return result;
        }
      }
    }
    result = outlined destroy of FocusItem((uint64_t)v11);
  }
  *a4 = 0;
  return result;
}

void closure #2 in FocusBridge.focusDidChange_PhoneWatch(rootResponder:)(uint64_t a1, void *a2)
{
  BOOL v3;
  id v4;
  _QWORD v5[8];

  outlined init with copy of FocusItem?(a1, (uint64_t)v5);
  if (v5[5])
    v3 = 0;
  else
    v3 = v5[6] == 1;
  if (v3)
  {
    outlined destroy of FocusItem?((uint64_t)v5);
    if (!a2)
      return;
    goto LABEL_9;
  }
  v4 = (id)FocusItem.platformResponder.getter();
  outlined destroy of FocusItem((uint64_t)v5);
  if (v4)
  {
LABEL_10:
    objc_msgSend(v4, sel_becomeFirstResponder);

    return;
  }
  if (a2)
  {
LABEL_9:
    v4 = a2;
    goto LABEL_10;
  }
}

uint64_t sub_187506AB0()
{
  uint64_t v0;
  BOOL v1;
  int v2;

  if (*(_QWORD *)(v0 + 56))
    v1 = 0;
  else
    v1 = *(_QWORD *)(v0 + 64) == 1;
  if (!v1)
  {
    v2 = *(unsigned __int8 *)(v0 + 48);
    if (v2 == 2 || v2 == 1)
    {
      swift_unknownObjectWeakDestroy();
    }
    else if (!*(_BYTE *)(v0 + 48))
    {
      swift_release();
    }
    swift_weakDestroy();
  }

  return swift_deallocObject();
}

void partial apply for closure #2 in FocusBridge.focusDidChange_PhoneWatch(rootResponder:)()
{
  uint64_t v0;

  closure #2 in FocusBridge.focusDidChange_PhoneWatch(rootResponder:)(v0 + 16, *(void **)(v0 + 80));
}

uint64_t partial apply for closure #1 in FocusBridge.focusDidChange_PhoneWatch(rootResponder:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in FocusBridge.focusDidChange_PhoneWatch(rootResponder:)(a1, a2, *(_QWORD *)(v3 + 24), a3);
}

uint64_t partial apply for closure #1 in ResponderNode.visitFocusResponders(applying:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in ResponderNode.visitFocusResponders(applying:)(a1, *(void (**)(uint64_t, uint64_t))(v2 + 16), a2);
}

uint64_t _PlatformViewRepresentableLayoutOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::_PlatformViewRepresentableLayoutOptions __swiftcall _PlatformViewRepresentableLayoutOptions.init(rawValue:)(SwiftUI::_PlatformViewRepresentableLayoutOptions rawValue)
{
  SwiftUI::_PlatformViewRepresentableLayoutOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static _PlatformViewRepresentableLayoutOptions.propagatesSafeArea.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

ValueMetadata *type metadata accessor for _PlatformViewRepresentableLayoutOptions()
{
  return &type metadata for _PlatformViewRepresentableLayoutOptions;
}

ValueMetadata *type metadata accessor for EndChildGeometries()
{
  return &type metadata for EndChildGeometries;
}

ValueMetadata *type metadata accessor for BeginChildGeometries()
{
  return &type metadata for BeginChildGeometries;
}

uint64_t BeginChildGeometries.encode(to:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  char v3;

  MEMORY[0x18D75BE3C]();
  type metadata accessor for CGSize(0);
  result = ProtobufEncoder.messageField<A>(_:_:)();
  if (!v0)
  {
    type metadata accessor for CGPoint(0);
    ProtobufEncoder.messageField<A>(_:_:)();
    ViewSize.proposal.getter();
    _ProposedSize.width.getter();
    if ((v2 & 1) == 0)
      ProtobufEncoder.cgFloatField(_:_:defaultValue:)();
    ViewSize.proposal.getter();
    result = _ProposedSize.height.getter();
    if ((v3 & 1) == 0)
      return ProtobufEncoder.cgFloatField(_:_:defaultValue:)();
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance BeginChildGeometries()
{
  return BeginChildGeometries.encode(to:)();
}

uint64_t EndChildGeometries.CodableViewGeometry.encode(to:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  char v3;

  type metadata accessor for CGSize(0);
  result = ProtobufEncoder.messageField<A>(_:_:)();
  if (!v0)
  {
    type metadata accessor for CGPoint(0);
    ProtobufEncoder.messageField<A>(_:_:)();
    _ProposedSize.width.getter();
    if ((v2 & 1) == 0)
      ProtobufEncoder.cgFloatField(_:_:defaultValue:)();
    result = _ProposedSize.height.getter();
    if ((v3 & 1) == 0)
      return ProtobufEncoder.cgFloatField(_:_:defaultValue:)();
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance EndChildGeometries.CodableViewGeometry()
{
  return EndChildGeometries.CodableViewGeometry.encode(to:)();
}

uint64_t EndChildGeometries.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    lazy protocol witness table accessor for type EndChildGeometries.CodableViewGeometry and conformance EndChildGeometries.CodableViewGeometry();
    swift_bridgeObjectRetain();
    v5 = a2 + 80;
    do
    {
      ProtobufEncoder.messageField<A>(_:_:)();
      if (v2)
        break;
      v5 += 64;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance EndChildGeometries(uint64_t a1)
{
  uint64_t *v1;

  return EndChildGeometries.encode(to:)(a1, *v1);
}

unint64_t lazy protocol witness table accessor for type EndChildGeometries.CodableViewGeometry and conformance EndChildGeometries.CodableViewGeometry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EndChildGeometries.CodableViewGeometry and conformance EndChildGeometries.CodableViewGeometry;
  if (!lazy protocol witness table cache variable for type EndChildGeometries.CodableViewGeometry and conformance EndChildGeometries.CodableViewGeometry)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EndChildGeometries.CodableViewGeometry, &type metadata for EndChildGeometries.CodableViewGeometry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EndChildGeometries.CodableViewGeometry and conformance EndChildGeometries.CodableViewGeometry);
  }
  return result;
}

uint64_t specialized EndChildGeometries.init(_:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v21 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v21;
    v4 = a1 + 88;
    do
    {
      v5 = swift_retain();
      v6 = MEMORY[0x18D755E9C](v5);
      v8 = v7;
      ViewSize.proposal.getter();
      v9 = swift_release();
      v10 = MEMORY[0x18D75BE3C](v9);
      v12 = v11;
      v14 = *(_QWORD *)(v21 + 16);
      v13 = *(_QWORD *)(v21 + 24);
      if (v14 >= v13 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
      *(_QWORD *)(v21 + 16) = v14 + 1;
      v15 = v21 + (v14 << 6);
      *(double *)(v15 + 32) = v6;
      *(_QWORD *)(v15 + 40) = v8;
      *(_QWORD *)(v15 + 48) = v17;
      *(_BYTE *)(v15 + 56) = v18;
      *(_QWORD *)(v15 + 64) = v19;
      *(_BYTE *)(v15 + 72) = v20;
      v4 += 64;
      *(double *)(v15 + 80) = v10;
      *(_QWORD *)(v15 + 88) = v12;
      --v1;
    }
    while (v1);
  }
  return v2;
}

ValueMetadata *type metadata accessor for EndChildGeometries.CodableViewGeometry()
{
  return &type metadata for EndChildGeometries.CodableViewGeometry;
}

void static OrnamentAttachmentAnchor.scene(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static OrnamentAttachmentAnchor.scene(alignment:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.ornament<A>(visibility:attachmentAnchor:contentAlignment:ornament:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.ornament<A>(visibility:attachmentAnchor:contentAlignment:zOffset:isInternal:ornament:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.ornament<A>(isPresented:sceneAnchor:offset:ornament:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for OrnamentAttachmentAnchor()
{
  return &type metadata for OrnamentAttachmentAnchor;
}

uint64_t sub_18750716C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for OrnamentModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for OrnamentModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t type metadata accessor for OrnamentModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrnamentModifier);
}

uint64_t sub_1875071D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = type metadata accessor for OrnamentModifierLegacy(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OrnamentModifierLegacy<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

uint64_t type metadata accessor for OrnamentModifierLegacy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrnamentModifierLegacy);
}

uint64_t type metadata completion function for OrnamentModifierLegacy()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for OrnamentModifierLegacy(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v6 > 7
    || v8 != 0
    || ((((((v7 + ((v6 + 17) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v12 = (a1 + v6 + 17) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 17) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v14(v12, v13, v4);
    v15 = (_OWORD *)((v7 + v12) & 0xFFFFFFFFFFFFFFF8);
    v16 = (_OWORD *)((v7 + v13) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v16;
    v17 = (_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
    v18 = (_OWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v17 = *v18;
    *(_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for OrnamentModifierLegacy(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for OrnamentModifierLegacy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  swift_retain();
  v10(v8, v9, v5);
  v11 = *(_QWORD *)(v6 + 64) + 7;
  v12 = (_OWORD *)((v11 + v8) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  *(_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for OrnamentModifierLegacy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v11[1] = v12[1];
  v13 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v13[1] = v14[1];
  *(_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for OrnamentModifierLegacy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 17 + a1) & ~v5;
  v7 = (v5 + 17 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_OWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = (_OWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for OrnamentModifierLegacy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v11[1] = v12[1];
  v13 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v13[1] = v14[1];
  *(_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for OrnamentModifierLegacy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 17) & ~v7);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((((((*(_QWORD *)(v4 + 64) + ((v7 + 17) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187507854 + 4 * byte_187C3ACD0[v10]))();
  }
}

void storeEnumTagSinglePayload for OrnamentModifierLegacy(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 17) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 17) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + ((v7 + 17) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1875079EC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187507A5CLL);
}

void sub_1875079F4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1875079FCLL);
  JUMPOUT(0x187507A5CLL);
}

void sub_187507A10()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187507A5CLL);
}

void sub_187507A18()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187507A5CLL);
}

void sub_187507A20(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x187507A2CLL);
    if (a2 < 0)
      JUMPOUT(0x187507A50);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0x187507A5CLL);
}

uint64_t type metadata completion function for OrnamentModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for OrnamentModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 50) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    v9 = (_OWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
    v10 = (_OWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
    *v9 = *v10;
    v11 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8;
    v12 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_QWORD *)v12;
    *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
    *(_QWORD *)v11 = v13;
    *(_BYTE *)(v11 + 9) = *(_BYTE *)(v12 + 9);
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))((v11 + v5 + 10) & ~v5, (v12 + v5 + 10) & ~v5);
  }
  return v3;
}

uint64_t destroy for OrnamentModifier(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((((((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 10) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

unint64_t initializeWithCopy for OrnamentModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = (_OWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = ((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = ((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)v7;
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(v7 + 8);
  *(_QWORD *)v6 = v8;
  *(_BYTE *)(v6 + 9) = *(_BYTE *)(v7 + 9);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 16))((*(unsigned __int8 *)(v9 + 80) + 10 + v6) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 10 + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

unint64_t assignWithCopy for OrnamentModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v5 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v5[1] = v6[1];
  v7 = ((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  *(_BYTE *)(v7 + 9) = *(_BYTE *)(v8 + 9);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))((*(unsigned __int8 *)(v10 + 80) + 10 + v7) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 10 + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

unint64_t initializeWithTake for OrnamentModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = (_OWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = ((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = ((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)v7;
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(v7 + 8);
  *(_QWORD *)v6 = v8;
  *(_BYTE *)(v6 + 9) = *(_BYTE *)(v7 + 9);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 32))((*(unsigned __int8 *)(v9 + 80) + 10 + v6) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 10 + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

unint64_t assignWithTake for OrnamentModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v5 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v5[1] = v6[1];
  v7 = ((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  *(_BYTE *)(v7 + 9) = *(_BYTE *)(v8 + 9);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(unsigned __int8 *)(v10 + 80) + 10 + v7) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 10 + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for OrnamentModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unint64_t v15;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = ((v7 + 50) & ~v7) + *(_QWORD *)(v4 + 64);
    v10 = 8 * v9;
    if (v9 > 3)
      goto LABEL_7;
    v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v12 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v12 >= 2)
    {
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if (!(_DWORD)v9)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_187507F88 + 4 * byte_187C3ACDF[(v9 - 1)]))();
    }
  }
LABEL_21:
  v15 = ((((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  if (v5 > 0xFE)
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((v15 + v7 + 10) & ~v7);
  v16 = *(unsigned __int8 *)(v15 + 9);
  if (v16 < 2)
    return 0;
  return ((v16 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for OrnamentModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 50) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for OrnamentAttachmentAnchor.Storage()
{
  return &type metadata for OrnamentAttachmentAnchor.Storage;
}

_UNKNOWN **base witness table accessor for ViewModifier in OrnamentModifier<A>()
{
  return &protocol witness table for OrnamentModifier<A>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OrnamentModifierLegacy<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t OrnamentModifierLegacy.isPresented.getter()
{
  uint64_t v1;

  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v1);
  return v1;
}

uint64_t OrnamentModifierLegacy.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2, v8);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(a2 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OrnamentModifierLegacy<A>, a2);
  v11 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for _PreferenceTransformModifier<OrnamentPresentation.Key>();
  v12 = type metadata accessor for ModifiedContent();
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v11);
  v14 = lazy protocol witness table accessor for type _PreferenceTransformModifier<OrnamentPresentation.Key> and conformance _PreferenceTransformModifier<A>();
  v19[0] = v13;
  v19[1] = v14;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v19);
  EnvironmentReader.init(_:)();
  v18[0] = v20;
  v18[1] = v21;
  v15 = type metadata accessor for EnvironmentReader();
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE38A8], v15);
  static ViewBuilder.buildExpression<A>(_:)(v18, v15, v16);
  swift_release();
  v20 = v22;
  v21 = v23;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v20, v15, a3);
  return swift_release();
}

uint64_t closure #1 in OrnamentModifierLegacy.body(content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v28 = a5;
  v9 = type metadata accessor for OrnamentModifierLegacy(0, a3, a4, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = MEMORY[0x1E0C80A78](v9, v12);
  v15 = (char *)&v27 - v14;
  v17 = *a1;
  v16 = a1[1];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v27 - v14, a2, v9, v13);
  v18 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v19 + v18, v15, v9);
  v20 = (_QWORD *)(v19 + ((v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v20 = v17;
  v20[1] = v16;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OrnamentModifierLegacy<A>, v9);
  v21 = type metadata accessor for _ViewModifier_Content();
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v21);
  View.transformPreference<A>(_:_:)();
  swift_release();
  v30[0] = v31;
  v30[1] = v32;
  type metadata accessor for _PreferenceTransformModifier<OrnamentPresentation.Key>();
  v23 = type metadata accessor for ModifiedContent();
  v24 = lazy protocol witness table accessor for type _PreferenceTransformModifier<OrnamentPresentation.Key> and conformance _PreferenceTransformModifier<A>();
  v29[0] = v22;
  v29[1] = v24;
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v23, v29);
  static ViewBuilder.buildExpression<A>(_:)(v30, v23, v25);
  swift_release();
  v31 = v33;
  v32 = v34;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v31, v23, v28);
  return swift_release();
}

uint64_t closure #1 in closure #1 in OrnamentModifierLegacy.body(content:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;

  v12 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)type metadata accessor for OrnamentModifierLegacy(0, v16, v17, v15);
  result = OrnamentModifierLegacy.isPresented.getter();
  if ((result & 1) != 0)
  {
    v32 = Namespace.wrappedValue.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2 + v18[9], a5);
    v31 = AnyView.init<A>(_:)();
    v30 = Namespace.wrappedValue.getter();
    v20 = v18[11];
    v21 = (uint64_t *)(a2 + v18[10]);
    v22 = *v21;
    v23 = v21[1];
    v24 = *(_QWORD *)(a2 + v20);
    v25 = *(_QWORD *)(a2 + v20 + 8);
    v27 = implicit closure #1 in closure #1 in closure #1 in OrnamentModifierLegacy.body(content:)(a2, a5, a6, v26);
    v34[0] = v31;
    v34[1] = v30;
    v35 = 1;
    v36 = v22;
    v37 = v23;
    v38 = v24;
    v39 = v25;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = a3;
    v44 = a4;
    v45 = v27;
    v46 = v28;
    v47 = 0;
    swift_retain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v33 = *a1;
    *a1 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v34, v32, isUniquelyReferenced_nonNull_native);
    *a1 = v33;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*implicit closure #1 in closure #1 in closure #1 in OrnamentModifierLegacy.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = type metadata accessor for OrnamentModifierLegacy(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v16 - v11, a1, v7, v10);
  v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, v12, v7);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in OrnamentModifierLegacy.body(content:);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance OrnamentModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OrnamentModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance OrnamentPresentation.Key@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static OrnamentPresentation.Key.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v2 = *a1;
  v3 = a1[2];
  v4 = *((_BYTE *)a1 + 24);
  v5 = *((_BYTE *)a1 + 64);
  v6 = a1[9];
  v7 = *((_BYTE *)a1 + 80);
  v8 = *((_BYTE *)a1 + 81);
  v9 = a1[11];
  v10 = a1[12];
  v11 = a1[13];
  v12 = a1[14];
  v13 = a1[15];
  *(_QWORD *)(a2 + 8) = a1[1];
  *(_QWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 24) = v4;
  v14 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(a2 + 32) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(a2 + 48) = v14;
  *(_BYTE *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = v6;
  *(_BYTE *)(a2 + 80) = v7;
  *(_BYTE *)(a2 + 81) = v8;
  *(_QWORD *)(a2 + 88) = v9;
  *(_QWORD *)(a2 + 96) = v10;
  *(_QWORD *)(a2 + 104) = v11;
  *(_QWORD *)(a2 + 112) = v12;
  *(_QWORD *)(a2 + 120) = v13;
  *(_QWORD *)a2 = v2;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t partial apply for closure #1 in OrnamentModifierLegacy.body(content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OrnamentModifierLegacy(0, v6, v7, a2) - 8) + 80);
  return closure #1 in OrnamentModifierLegacy.body(content:)(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

void type metadata accessor for _PreferenceTransformModifier<OrnamentPresentation.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceTransformModifier<OrnamentPresentation.Key>)
  {
    v0 = type metadata accessor for _PreferenceTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<OrnamentPresentation.Key>);
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<OrnamentPresentation.Key> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<OrnamentPresentation.Key> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<OrnamentPresentation.Key> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<OrnamentPresentation.Key>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<OrnamentPresentation.Key> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t sub_187508ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for OrnamentModifierLegacy(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + *(int *)(v6 + 36), v5);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in OrnamentModifierLegacy.body(content:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(type metadata accessor for OrnamentModifierLegacy(0, v6, v7, a4) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (uint64_t *)(v4 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in closure #1 in OrnamentModifierLegacy.body(content:)(a1, v4 + v9, *v10, v10[1], v6, v7);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in OrnamentModifierLegacy.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for OrnamentModifierLegacy(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return SheetPresentationModifier.isPresented.setter();
}

uint64_t destroy for OrnamentPresentation()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for OrnamentPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OrnamentPresentation(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for OrnamentPresentation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for OrnamentPresentation()
{
  return &type metadata for OrnamentPresentation;
}

ValueMetadata *type metadata accessor for OrnamentPresentation.Key()
{
  return &type metadata for OrnamentPresentation.Key;
}

uint64_t sub_1875092E4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v4 = type metadata accessor for OrnamentModifierLegacy(255, *a1, a1[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OrnamentModifierLegacy<A>, v4);
  v5 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for _PreferenceTransformModifier<OrnamentPresentation.Key>();
  v6 = type metadata accessor for ModifiedContent();
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v5);
  v9[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<OrnamentPresentation.Key> and conformance _PreferenceTransformModifier<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v9);
  v7 = type metadata accessor for EnvironmentReader();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE38A8], v7);
}

uint64_t specialized static OrnamentPresentation.Key.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  a2(&v6);
  v3 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with take of (Namespace.ID, OrnamentPresentation)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (Namespace.ID, OrnamentPresentation)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for OrnamentPosition(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 127);
  v3 = (*(_BYTE *)(a1 + 32) & 0x7E | (*(unsigned __int8 *)(a1 + 32) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for OrnamentPosition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 127;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 32) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for OrnamentPosition(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 1 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for OrnamentPosition()
{
  return &type metadata for OrnamentPosition;
}

ValueMetadata *type metadata accessor for NavigationAuthority.SeedInputs()
{
  return &type metadata for NavigationAuthority.SeedInputs;
}

ValueMetadata *type metadata accessor for StackDepthModifier()
{
  return &type metadata for StackDepthModifier;
}

uint64_t key path getter for EnvironmentValues.navigationSelectionSeed : EnvironmentValues@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;
  int v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<NavigationStateSelectionSeed>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationStateSelectionSeed> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<NavigationStateSelectionSeed>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<NavigationStateSelectionSeed>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationStateSelectionSeed> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<NavigationStateSelectionSeed>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.navigationSelectionSeed : EnvironmentValues()
{
  return EnvironmentValues.navigationSelectionSeed.setter();
}

uint64_t View.clearNavigationContext()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  _QWORD v19[2];
  int v20;
  _QWORD v21[2];

  v18 = a2;
  v3 = type metadata accessor for ModifiedContent();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v19[-1] - v6;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v8 = type metadata accessor for ModifiedContent();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v19[-1] - v12;
  MEMORY[0x18D75B4AC](v11);
  swift_getKeyPath();
  LOBYTE(v20) = 0;
  v21[0] = a1;
  v21[1] = &protocol witness table for ClearNavigationContextModifier;
  v14 = MEMORY[0x1E0CE2E70];
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v21);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  swift_getKeyPath();
  v20 = -1;
  v16 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>();
  v19[0] = v15;
  v19[1] = v16;
  MEMORY[0x18D75FFDC](v14, v8, v19);
  View.environment<A>(_:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance NavigationAuthority.ViewInputKey()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return static WeakAttribute.== infix(_:_:)();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance NavigationAuthority.StackKeyViewInputKey()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return static WeakAttribute.== infix(_:_:)();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance NavigationAuthority.ListKeyViewInputKey()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return static WeakAttribute.== infix(_:_:)();
}

uint64_t protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance NavigationAuthority.DepthKey()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  return Attribute.makeReusable(indirectMap:)();
}

uint64_t protocol witness for static GraphInput.tryToReuse(_:by:indirectMap:testOnly:) in conformance NavigationAuthority.DepthKey()
{
  return Attribute.tryToReuse(by:indirectMap:testOnly:)();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance NavigationAuthority.DepthKey@<X0>(_DWORD *a1@<X8>)
{
  uint64_t (*v2)(void);
  uint64_t result;

  v2 = MEMORY[0x1E0CFECF8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<Int> and conformance External<A>(&lazy protocol witness table cache variable for type External<Int> and conformance External<A>, &lazy cache variable for type metadata for External<Int>, (uint64_t (*)(_QWORD, uint64_t))v2, MEMORY[0x1E0CFED00]);
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance NavigationAuthority.SeedInputs()
{
  return static WeakAttribute.== infix(_:_:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance StackDepthModifier()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<StackDepthModifier>, (uint64_t)&type metadata for StackDepthModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey();
  lazy protocol witness table accessor for type External<Int> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type Attribute<Int> and conformance Attribute<A>, &lazy cache variable for type metadata for Attribute<Int>, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78], MEMORY[0x1E0CE0998]);
  return _GraphInputs.subscript.setter();
}

_UNKNOWN **base witness table accessor for ViewModifier in StackDepthModifier()
{
  return &protocol witness table for StackDepthModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance StackDepthModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance StackDepthModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance StackDepthModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ClearNavigationContextModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = a2[5];
  v7 = a2[6];
  v8 = *((_DWORD *)a2 + 20);
  v20 = *a2;
  v21 = v4;
  v22 = v5;
  v23 = *(_OWORD *)(a2 + 3);
  v24 = v6;
  v25 = v7;
  v26 = *(_OWORD *)(a2 + 7);
  v27 = a2[9];
  v28 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static ClearNavigationContextModifier._makeInputs(modifier:inputs:)();
  v11 = v20;
  v12 = v21;
  v13 = v5;
  v14 = v23;
  v15 = v6;
  v16 = v7;
  v17 = v26;
  v18 = v27;
  v19 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  a3(v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ClearNavigationContextModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  char v29;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = a2[5];
  v7 = *((_DWORD *)a2 + 16);
  v8 = a2[9];
  v9 = *((_BYTE *)a2 + 80);
  v21 = *a2;
  v22 = v4;
  v23 = v5;
  v24 = *(_OWORD *)(a2 + 3);
  v25 = v6;
  v26 = *((_OWORD *)a2 + 3);
  v27 = v7;
  v28 = v8;
  v29 = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized static ClearNavigationContextModifier._makeInputs(modifier:inputs:)();
  v12 = v21;
  v13 = v22;
  v14 = v5;
  v15 = v24;
  v16 = v6;
  v17 = v26;
  v18 = v27;
  v19 = v28;
  v20 = v29;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v10 = swift_bridgeObjectRetain();
  a3(v10, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance ClearNavigationContextModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t *closure #1 in EnsureNavigationStateSeeds.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = (uint64_t *)AGGraphGetWeakValue();
  if (result)
  {
    v3 = *result;
  }
  else
  {
    type metadata accessor for NavigationSeedHost(0);
    result = (uint64_t *)AGGraphGetWeakValue();
    if (result)
    {
      v4 = *result;
      swift_getKeyPath();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NavigationSeedHost and conformance NavigationSeedHost, type metadata accessor for NavigationSeedHost, (uint64_t)&protocol conformance descriptor for NavigationSeedHost);
      swift_retain();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      v5 = *(_QWORD *)(v4 + 16);
      result = (uint64_t *)swift_release();
      v3 = v5;
    }
    else
    {
      v3 = -1;
    }
  }
  *a1 = v3;
  return result;
}

double protocol witness for Rule.value.getter in conformance EnsureNavigationStateSeeds@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  Rule.withObservation<A>(do:)();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t *partial apply for closure #1 in EnsureNavigationStateSeeds.value.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in EnsureNavigationStateSeeds.value.getter(a1);
}

uint64_t lazy protocol witness table accessor for type External<Int> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a2, MEMORY[0x1E0DEB418], a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsureNavigationStateSeeds()
{
  return &type metadata for EnsureNavigationStateSeeds;
}

ValueMetadata *type metadata accessor for NavigationAuthority.StackKeyViewInputKey()
{
  return &type metadata for NavigationAuthority.StackKeyViewInputKey;
}

ValueMetadata *type metadata accessor for NavigationAuthority.ViewInputKey()
{
  return &type metadata for NavigationAuthority.ViewInputKey;
}

ValueMetadata *type metadata accessor for NavigationAuthority.DepthKey()
{
  return &type metadata for NavigationAuthority.DepthKey;
}

ValueMetadata *type metadata accessor for NavigationAuthority.ListKeyViewInputKey()
{
  return &type metadata for NavigationAuthority.ListKeyViewInputKey;
}

uint64_t sub_18750A310()
{
  return EnvironmentValues.navigationSelectionSeed.setter();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<NavigationStateSelectionSeed>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationStateSelectionSeed>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationStateSelectionSeed>);
  }
}

ValueMetadata *type metadata accessor for ClearNavigationContextModifier()
{
  return &type metadata for ClearNavigationContextModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ClearNavigationContextModifier()
{
  return &protocol witness table for ClearNavigationContextModifier;
}

uint64_t specialized static ClearNavigationContextModifier._makeInputs(modifier:inputs:)()
{
  lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  return PropertyList.subscript.setter();
}

uint64_t View.selectionMenu<A>(content:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

void protocol witness for TabContent.body.getter in conformance <> TabForEach<A, B, C, D>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 - 8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TabForEach<A, B, C, D>, a1, &v2);
  PrimitiveTabContent.body.getter();
}

void PrimitiveTabContent.body.getter()
{
  specialized TabContent.bodyError()();
}

uint64_t sub_18750A580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v2, v1, v0);
}

void protocol witness for TabContent.body.getter in conformance <> AuxiliaryContent<A, B>(uint64_t a1, uint64_t a2)
{
  protocol witness for TabContent.body.getter in conformance <> AuxiliaryContent<A, B>(a1, a2, (uint64_t)&protocol conformance descriptor for <> AuxiliaryContent<A, B>);
}

void protocol witness for TabContent.body.getter in conformance <> TabGroup<A, B, C, D>(uint64_t a1, uint64_t a2)
{
  protocol witness for TabContent.body.getter in conformance <> TabGroup<A, B, C, D>(a1, a2, (uint64_t)&protocol conformance descriptor for <> TabGroup<A, B, C, D>);
}

uint64_t TabContent<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = v2;
  v6 = MEMORY[0x1E0C80A78](a1, v3);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v9 + 16))(v8, v6);
  return NestedDynamicProperties.init(wrappedValue:)((uint64_t)v8, a1, a2);
}

uint64_t _TabContentBodyAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)&v27 - v7;
  v28 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v27 - v20;
  PreviewModifierViewModifier.modifier.getter(a1, v22, v23, (uint64_t)v12);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v3, v4);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v3);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, AssociatedTypeWitness);
  v24 = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v17, v14, v24);
  v25 = *(void (**)(char *, uint64_t))(v29 + 8);
  v25(v17, v14);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v21, v14, v31);
  return ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
}

uint64_t TabContentBuilder.Content.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v25 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v24 - v17;
  PickerBuilder.Content.content.getter(a1, v19, v20, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(v9 + 56))(v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v14, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v18, AssociatedTypeWitness, v25);
  return ((uint64_t (*)(char *, uint64_t))v22)(v18, AssociatedTypeWitness);
}

uint64_t sub_18750AC7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v2, v1, v0);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> _ConditionalContent<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return _ConditionalContent<>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16), a3);
}

void protocol witness for TabContent.body.getter in conformance <> _ConditionalContent<A, B>(uint64_t a1, uint64_t a2)
{
  _ConditionalContent<>.body.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <A> A?@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Optional<A>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8), a3);
}

void protocol witness for TabContent.body.getter in conformance <A> A?(uint64_t a1, uint64_t a2)
{
  Optional<A>.body.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t ForEach<>.init<A>(_:id:liftedContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ForEach<>.init<A>(_:id:liftedContent:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v16[1] = a6;
  v16[2] = a8;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14, v12);
  v16[3] = a2;
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, a5);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> ForEach<A, B, C>(_QWORD *a1, uint64_t a2)
{
  return ForEach<>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8));
}

void protocol witness for TabContent.body.getter in conformance <> ForEach<A, B, C>(uint64_t a1, uint64_t a2)
{
  ForEach<>.body.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t ForEach<>.init<A>(_:liftedContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return ForEach<>.init<A>(_:liftedContent:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

{
  uint64_t v17;
  double v18;
  uint64_t v19;
  _QWORD v21[14];

  v21[2] = a2;
  v21[3] = a3;
  v21[0] = a1;
  v21[1] = a9;
  v17 = *(_QWORD *)(a4 - 8);
  v18 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v17 + 16))((char *)v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  v21[4] = a4;
  v21[5] = a5;
  v21[6] = a6;
  v21[7] = a7;
  v21[8] = a8;
  v21[9] = a10;
  v21[10] = a11;
  v21[11] = a12;
  v21[13] = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(_QWORD, uint64_t))(v17 + 8))(v21[0], a4);
}

uint64_t ForEach<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return ForEach<>.init<A>(_:liftedContent:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

double ForEach<>.init<A>(_:liftedContent:)@<D0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  double result;

  *(_QWORD *)&result = ForEach<>.init<A>(_:liftedContent:)(a1, a2, a3, a4, a5, a6, a7).n128_u64[0];
  return result;
}

double ForEach<>.init<A>(_:content:)@<D0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  double result;

  *(_QWORD *)&result = ForEach<>.init<A>(_:liftedContent:)(a1, a2, a3, a4, a5, a6, a7).n128_u64[0];
  return result;
}

__n128 ForEach<>.init<A>(_:liftedContent:)@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  _QWORD *v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  uint64_t v19;

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = a5;
  v14[5] = a6;
  v14[6] = a1;
  v14[7] = a2;
  type metadata accessor for Range<Int>();
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  ForEach.init(_:idGenerator:content:)();
  result = v17;
  *(_OWORD *)a7 = v16;
  *(__n128 *)(a7 + 16) = v17;
  *(_OWORD *)(a7 + 32) = v18;
  *(_QWORD *)(a7 + 48) = v19;
  return result;
}

uint64_t sub_18750B6DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v2, v1, v0);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <A> Group<A>(uint64_t a1, uint64_t a2)
{
  return Group<A>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8));
}

void protocol witness for TabContent.body.getter in conformance <A> Group<A>(uint64_t a1, uint64_t a2)
{
  Group<A>.body.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t _TupleTabContent._identifiedView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for TupleView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t _TupleTabContent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TupleView();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, a3, v13);
  TupleView.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a4, v15, v10);
}

void _TupleTabContent.body.getter(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TupleTabContent<A, B>, a1);
  specialized TabContent.bodyError()();
}

uint64_t sub_18750B874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v2, v1, v0);
}

void protocol witness for TabContent.body.getter in conformance AnyTabContent<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyTabContent<A>, a1);
  PrimitiveTabContent.body.getter();
}

void protocol witness for TabContent.body.getter in conformance <> ModifiedTabContent<A, B>(uint64_t a1, uint64_t a2)
{
  protocol witness for TabContent.body.getter in conformance <> AuxiliaryContent<A, B>(a1, a2, (uint64_t)&protocol conformance descriptor for <> ModifiedTabContent<A, B>);
}

void protocol witness for TabContent.body.getter in conformance <> SwipeActionTabs<A, B>(uint64_t a1, uint64_t a2)
{
  protocol witness for TabContent.body.getter in conformance <> AuxiliaryContent<A, B>(a1, a2, (uint64_t)&protocol conformance descriptor for <> SwipeActionTabs<A, B>);
}

void protocol witness for TabContent.body.getter in conformance <> ContextMenuTabs<A, B>(uint64_t a1, uint64_t a2)
{
  protocol witness for TabContent.body.getter in conformance <> AuxiliaryContent<A, B>(a1, a2, (uint64_t)&protocol conformance descriptor for <> ContextMenuTabs<A, B>);
}

void protocol witness for TabContent.body.getter in conformance <> AuxiliaryContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v3;

  v3 = vextq_s8(*(int8x16_t *)(a2 - 16), *(int8x16_t *)(a2 - 16), 8uLL);
  MEMORY[0x18D75FFDC](a3, a1, &v3);
  PrimitiveTabContent.body.getter();
}

void protocol witness for TabContent.body.getter in conformance <> TabSection<A, B, C, D>(uint64_t a1, uint64_t a2)
{
  protocol witness for TabContent.body.getter in conformance <> TabGroup<A, B, C, D>(a1, a2, (uint64_t)&protocol conformance descriptor for <> TabSection<A, B, C, D>);
}

void protocol witness for TabContent.body.getter in conformance <> TabGroup<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 - 24);
  v4 = vextq_s8(*(int8x16_t *)(a2 - 16), *(int8x16_t *)(a2 - 16), 8uLL);
  v5 = v3;
  MEMORY[0x18D75FFDC](a3, a1, &v4);
  PrimitiveTabContent.body.getter();
}

void specialized TabContent.bodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000187BD9B70;
  v1._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for closure #1 in Optional<A>._identifiedView.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 24) + 56))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_18750BAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 56))(*(_QWORD *)(a3 + a2 - 32));
}

uint64_t sub_18750BB04()
{
  return 48;
}

__n128 sub_18750BB10(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_18750BB24()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18750BB4C()
{
  return 56;
}

__n128 sub_18750BB58(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_18750BB78()
{
  return 64;
}

__n128 sub_18750BB84(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_18750BB98()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for View.Body : View in _TabContentBodyAdaptor<A>()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for View.Body : View in TabContentBuilder<A>.Content<A1>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> _ConditionalContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v4;

  v4 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> _ConditionalContent<A, B>, a1, &v4);
}

uint64_t associated type witness table accessor for TabContent.TabValue : Hashable in <> _ConditionalContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> _ConditionalContent<A, B>(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = swift_getAssociatedConformanceWitness();
  v3[1] = swift_getAssociatedConformanceWitness();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], a1, v3);
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <A> A?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> A?, a1, &v4);
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <A> A?(uint64_t a1)
{
  uint64_t AssociatedConformanceWitness;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], a1, &AssociatedConformanceWitness);
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> ForEach<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, a1, &v4);
}

uint64_t associated type witness table accessor for TabContent.TabValue : Hashable in <> ForEach<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> ForEach<A, B, C>(uint64_t a1)
{
  uint64_t AssociatedConformanceWitness;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], a1, &AssociatedConformanceWitness);
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <A> Group<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> Group<A>, a1, &v4);
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <A> Group<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for _TupleTabContent<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TupleTabContent<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void associated type witness table accessor for TabContent.Body : TabContent in _TupleTabContent<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void default associated conformance accessor for TabContent.TabContent._IdentifiedView: View()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t dispatch thunk of TabContent._identifiedView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of TabContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t getEnumTagSinglePayload for _TabContentBodyAdaptor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18750BFEC + 4 * byte_187C3B440[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _TabContentBodyAdaptor(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for _TabContentBodyAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TabContentBodyAdaptor);
}

uint64_t type metadata accessor for TabContentBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TabContentBuilder);
}

void type metadata accessor for TabContentBuilder.Content()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t getEnumTagSinglePayload for TabContentBuilder.Content(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18750C2C8 + 4 * byte_187C3B44E[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TabContentBuilder.Content(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for _TupleTabContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TupleTabContent);
}

uint64_t sub_18750C4D4()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

void static DocumentUtils.contentType(of:)(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char v46;
  uint64_t inited;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for URLResourceValues?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF3D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v62 = (uint64_t)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v57 - v10;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], v4);
  MEMORY[0x1E0C80A78](v12, v13);
  v63 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v57 - v17;
  v19 = type metadata accessor for UTType();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v59 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v57 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v64 = (char *)&v57 - v29;
  v30 = URL.pathExtension.getter();
  v32 = v31;
  swift_bridgeObjectRelease();
  v33 = HIBYTE(v32) & 0xF;
  if ((v32 & 0x2000000000000000) == 0)
    v33 = v30 & 0xFFFFFFFFFFFFLL;
  if (!v33)
  {
LABEL_15:
    if (!URL.startAccessingSecurityScopedResource()())
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(a2, 1, 1, v19);
      return;
    }
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v48 = (void *)*MEMORY[0x1E0C998E0];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C998E0];
    v49 = v48;
    specialized Set.init(_nonEmptyArrayLiteral:)(inited);
    swift_setDeallocating();
    type metadata accessor for NSURLResourceKey(0);
    swift_arrayDestroy();
    URL.resourceValues(forKeys:)();
    swift_bridgeObjectRelease();
    v51 = type metadata accessor for URLResourceValues();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v11, 0, 1, v51);
    v52 = v62;
    v53 = (uint64_t)v63;
    outlined init with copy of URLResourceValues?((uint64_t)v11, v62);
    type metadata accessor for URLResourceValues();
    v54 = *(_QWORD *)(v51 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v51) == 1)
    {
      outlined destroy of TaskPriority?(v52, &lazy cache variable for type metadata for URLResourceValues?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF3D8]);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v53, 1, 1, v19);
    }
    else
    {
      URLResourceValues.contentType.getter();
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v51);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v53, 1, v19) != 1)
      {
        outlined destroy of TaskPriority?((uint64_t)v11, &lazy cache variable for type metadata for URLResourceValues?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF3D8]);
        v55 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 32);
        v56 = v59;
        v55(v59, v53, v19);
        v55(a2, (uint64_t)v56, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(a2, 0, 1, v19);
        goto LABEL_25;
      }
    }
    outlined destroy of TaskPriority?(v53, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
    outlined destroy of TaskPriority?((uint64_t)v11, &lazy cache variable for type metadata for URLResourceValues?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF3D8]);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(a2, 1, 1, v19);
LABEL_25:
    URL.stopAccessingSecurityScopedResource()();
    return;
  }
  v58 = v11;
  v67 = v19;
  v68 = a1;
  v61 = a2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v34 = *(_QWORD *)(v20 + 72);
  v65 = v20;
  v35 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_187BF9820;
  static UTType.data.getter();
  v66 = v36 + v35;
  v37 = v36 + v35 + v34;
  static UTType.package.getter();
  if (*(_QWORD *)(v36 + 16))
  {
    v60 = v37;
    URL.pathExtension.getter();
    v20 = v65;
    v38 = *(void (**)(char *, unint64_t, uint64_t))(v65 + 16);
    v39 = v67;
    v38(v26, v66, v67);
    UTType.init(filenameExtension:conformingTo:)();
    v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    if (v40(v18, 1, v39) == 1)
    {
      outlined destroy of TaskPriority?((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
    }
    else
    {
      v41 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
      v42 = v64;
      v41(v64, v18, v39);
      if ((UTType.isDynamic.getter() & 1) == 0)
      {
        a2 = v61;
        v45 = v42;
        goto LABEL_19;
      }
      (*(void (**)(char *, uint64_t))(v20 + 8))(v42, v39);
    }
    v43 = v60;
    if (*(_QWORD *)(v36 + 16) >= 2uLL)
    {
      URL.pathExtension.getter();
      v44 = v43;
      v19 = v67;
      v38(v26, v44, v67);
      UTType.init(filenameExtension:conformingTo:)();
      if (v40(v18, 1, v19) == 1)
      {
        outlined destroy of TaskPriority?((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
        a2 = v61;
        v20 = v65;
LABEL_14:
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        v11 = v58;
        goto LABEL_15;
      }
      v45 = v64;
      v20 = v65;
      v41 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
      v41(v64, v18, v19);
      v46 = UTType.isDynamic.getter();
      a2 = v61;
      if ((v46 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v45, v19);
        goto LABEL_14;
      }
LABEL_19:
      swift_setDeallocating();
      v50 = v67;
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v41(a2, v45, v50);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(a2, 0, 1, v50);
      return;
    }
  }
  __break(1u);
}

id specialized static DocumentUtils.serializationFailed.getter()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t inited;
  uint64_t v7;
  id v8;
  void *v9;
  Class isa;
  id v11;
  Swift::String v13;

  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v13._countAndFlagsBits = 0xD00000000000007DLL;
  v13._object = (void *)0x8000000187BE2130;
  v2._object = (void *)0x8000000187BE2100;
  v2._countAndFlagsBits = 0xD00000000000002ALL;
  v3.value._countAndFlagsBits = 0x746E656D75636F44;
  v3.value._object = (void *)0xE900000000000073;
  v4._countAndFlagsBits = 0xD00000000000002ALL;
  v4._object = (void *)0x8000000187BE2100;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v13);

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v7;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(Swift::String *)(inited + 48) = v5;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  v8 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
  v9 = (void *)MEMORY[0x18D75CC88](0xD00000000000001ALL, 0x8000000187BE21B0);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v8, sel_initWithDomain_code_userInfo_, v9, 101, isa);

  return v11;
}

id specialized static DocumentUtils.contentTypeNotRegisteredError()()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  id v14;
  void *v15;
  Class isa;
  id v17;
  Swift::String v19;

  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v19._countAndFlagsBits = 0xD000000000000068;
  v19._object = (void *)0x8000000187BE2210;
  v2._object = (void *)0x8000000187BE21D0;
  v2._countAndFlagsBits = 0xD000000000000030;
  v3.value._countAndFlagsBits = 0x746E656D75636F44;
  v3.value._object = (void *)0xE900000000000073;
  v4._countAndFlagsBits = 0xD000000000000030;
  v4._object = (void *)0x8000000187BE21D0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v19);

  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187BF9830;
  v7 = currentAppName()();
  v8 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(Swift::String *)(v6 + 32) = v7;
  v9 = String.init(format:_:)();
  v11 = v10;
  swift_bridgeObjectRelease();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, Any), v5);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v13;
  *(_QWORD *)(inited + 72) = v8;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = v11;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  v14 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
  v15 = (void *)MEMORY[0x18D75CC88](0xD00000000000001ALL, 0x8000000187BE21B0);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v14, sel_initWithDomain_code_userInfo_, v15, 100, isa);

  return v17;
}

uint64_t outlined init with copy of URLResourceValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for URLResourceValues?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF3D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata completion function for ItemNavigationLinkModifier()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Optional();
  result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ItemNavigationLinkModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  int v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  const void *v21;
  unsigned int (*v22)(const void *, uint64_t, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v27;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = v6 + 8;
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = *(_QWORD *)(v5 + 64) + 1;
  v11 = ((v6 + 16) & ~(unint64_t)v6) + v10 + 7;
  v12 = v6 & 0x100000;
  if (v7 > 7 || v12 != 0 || ((v11 + (v8 & (v7 + 8))) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v15 + (v8 & (v7 + 16)));
  }
  else
  {
    *a1 = *a2;
    v16 = ~v7;
    v17 = (_QWORD *)(v8 & ((unint64_t)a1 + 15));
    v27 = (_QWORD *)(v8 & ((unint64_t)a2 + 15));
    *v17 = *v27;
    v18 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = (void *)(((unint64_t)v18 + v9) & v16);
    v21 = (const void *)(((unint64_t)v19 + v9) & v16);
    v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_retain();
    if (v22(v21, 1, v4))
    {
      memcpy(v20, v21, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v20, v21, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v20, 0, 1, v4);
    }
    v23 = (_QWORD *)(((unint64_t)v27 + v11) & 0xFFFFFFFFFFFFFFF8);
    v24 = v23[1];
    v25 = (_QWORD *)(((unint64_t)v17 + v11) & 0xFFFFFFFFFFFFFFF8);
    *v25 = *v23;
    v25[1] = v24;
  }
  swift_retain();
  return v3;
}

uint64_t destroy for ItemNavigationLinkModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (a1 + (v4 | 7) + 8) & ~(v4 | 7);
  swift_release();
  swift_release();
  v6 = (v4 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v4;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v2))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v6, v2);
  return swift_release();
}

_QWORD *initializeWithCopy for ItemNavigationLinkModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  const void *v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 8;
  v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = (_QWORD *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (void *)(((unint64_t)v10 + v6 + 8) & ~v6);
  v13 = (const void *)(((unint64_t)v11 + v6 + 8) & ~v6);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_retain();
  swift_retain();
  if (v14(v13, 1, v4))
  {
    v15 = *(_DWORD *)(v5 + 84);
    v16 = *(_QWORD *)(v5 + 64);
    if (v15)
      v17 = *(_QWORD *)(v5 + 64);
    else
      v17 = v16 + 1;
    memcpy(v12, v13, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v12, v13, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
    v15 = *(_DWORD *)(v5 + 84);
    v16 = *(_QWORD *)(v5 + 64);
  }
  v18 = v16 + ((v6 + 16) & ~v6);
  if (!v15)
    ++v18;
  v19 = (v8 | 7) + v18;
  v20 = (uint64_t *)(((v9 | 7) + v18) & 0xFFFFFFFFFFFFFFF8);
  v22 = *v20;
  v21 = v20[1];
  v23 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
  *v23 = v22;
  v23[1] = v21;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ItemNavigationLinkModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  size_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 8;
  v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  swift_retain();
  swift_release();
  v10 = (_QWORD *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  swift_retain();
  swift_release();
  v12 = (void *)(((unint64_t)v10 + v6 + 8) & ~v6);
  v13 = (void *)(((unint64_t)v11 + v6 + 8) & ~v6);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v10) = v14(v12, 1, v4);
  v15 = v14(v13, 1, v4);
  if ((_DWORD)v10)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v12, v13, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
      goto LABEL_10;
    }
LABEL_6:
    if (*(_DWORD *)(v5 + 84))
      v16 = *(_QWORD *)(v5 + 64);
    else
      v16 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v12, v13, v16);
    goto LABEL_10;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v5 + 8))(v12, v4);
    goto LABEL_6;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v12, v13, v4);
LABEL_10:
  v17 = *(_QWORD *)(v5 + 64) + ((v6 + 16) & ~v6);
  if (!*(_DWORD *)(v5 + 84))
    ++v17;
  v18 = (_QWORD *)(((v8 | 7) + v17) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((v9 | 7) + v17) & 0xFFFFFFFFFFFFFFF8);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for ItemNavigationLinkModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 8;
  v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = (_QWORD *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (void *)(((unint64_t)v10 + v6 + 8) & ~v6);
  v13 = (const void *)(((unint64_t)v11 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4))
  {
    v14 = *(_DWORD *)(v5 + 84);
    v15 = *(_QWORD *)(v5 + 64);
    if (v14)
      v16 = v15;
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v12, v13, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
    v14 = *(_DWORD *)(v5 + 84);
    v15 = *(_QWORD *)(v5 + 64);
  }
  v17 = v15 + ((v6 + 16) & ~v6);
  if (!v14)
    ++v17;
  *(_OWORD *)(((v8 | 7) + v17) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((v9 | 7) + v17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for ItemNavigationLinkModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  size_t v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 8;
  v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  swift_release();
  v10 = (_QWORD *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  swift_release();
  v12 = (void *)(((unint64_t)v10 + v6 + 8) & ~v6);
  v13 = (void *)(((unint64_t)v11 + v6 + 8) & ~v6);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v11) = v14(v12, 1, v4);
  v15 = v14(v13, 1, v4);
  if ((_DWORD)v11)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v12, v13, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
      goto LABEL_10;
    }
LABEL_6:
    if (*(_DWORD *)(v5 + 84))
      v16 = *(_QWORD *)(v5 + 64);
    else
      v16 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v12, v13, v16);
    goto LABEL_10;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v5 + 8))(v12, v4);
    goto LABEL_6;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v12, v13, v4);
LABEL_10:
  v17 = *(_QWORD *)(v5 + 64) + ((v6 + 16) & ~v6);
  if (!*(_DWORD *)(v5 + 84))
    ++v17;
  *(_OWORD *)(((v8 | 7) + v17) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((v9 | 7) + v17) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ItemNavigationLinkModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = 7;
  else
    v8 = 8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v9 | 7;
  v11 = v9 + 8;
  if (v7 < a2)
  {
    if (((((v8 + *(_QWORD *)(v4 + 64) + ((v9 + 16) & ~v9) + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v12 = 2;
    else
      v12 = a2 - v7 + 1;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    __asm { BR              X3 }
  }
  v16 = (unint64_t *)((((a1 + v10 + 8) & ~v10) + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0x80000000) != 0)
  {
    v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v11) & ~v9);
    if (v18 >= 2)
      return v18 - 1;
    else
      return 0;
  }
  else
  {
    v17 = *v16;
    if (v17 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    return (v17 + 1);
  }
}

void storeEnumTagSinglePayload for ItemNavigationLinkModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((_DWORD)v11
         + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80))
         + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(*(unsigned __int8 *)(v7 + 80) | 7))
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((_DWORD)v11
         + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80))
         + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(*(unsigned __int8 *)(v7 + 80) | 7))
         + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((v11+ ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(*(unsigned __int8 *)(v7 + 80) | 7))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 16);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

uint64_t sub_18750DBC0@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t result;

  *(_BYTE *)(v16 + v17) = 0;
  if (a1)
  {
    v18 = (_QWORD *)((((v16 + v14 + 8) & v15) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v11 & 0x80000000) != 0)
    {
      if (v11 >= a1)
      {
        return (*(uint64_t (**)(unint64_t, _QWORD))(v12 + 56))(((unint64_t)v18 + v13) & v10, a1 + 1);
      }
      else if ((_DWORD)a2)
      {
        if (a2 <= 3)
          v20 = a2;
        else
          v20 = 4;
        bzero((void *)(((unint64_t)v18 + v13) & v10), a2);
        __asm { BR              X10 }
      }
    }
    else
    {
      if ((a1 & 0x80000000) != 0)
        v19 = a1 ^ 0x80000000;
      else
        v19 = a1 - 1;
      *v18 = v19;
    }
  }
  return result;
}

void sub_18750DCC0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_18750DCC8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_18750DCD8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void type metadata accessor for ItemNavigationLinkModifier()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for NavigationLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for NavigationLinkModifier.Payload(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for NavigationLinkModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;

  v4 = *(unsigned __int8 *)(a1 + 17);
  if (v4 >= 2)
    v4 = *(_DWORD *)a1 + 2;
  if (v4 == 1)
    swift_release();
  swift_release();
  v5 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v5 + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
  }
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v5
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 22) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_release();
}

uint64_t initializeWithCopy for NavigationLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v6 = *(unsigned __int8 *)(a2 + 17);
  if (v6 >= 2)
    v6 = *(_DWORD *)a2 + 2;
  if (v6 == 1)
  {
    v7 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    swift_retain();
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  }
  swift_retain();
  *(_BYTE *)(a1 + 17) = v8;
  v9 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  v10 = (a2 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v10 + 8) < 0xFFFFFFFFuLL)
  {
    v11 = *(_OWORD *)v10;
    *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 + 16);
    *(_OWORD *)v9 = v11;
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
    *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 + 16);
    swift_retain();
    swift_retain();
  }
  *(_BYTE *)(v9 + 20) = *(_BYTE *)(v10 + 20);
  *(_BYTE *)(v9 + 21) = *(_BYTE *)(v10 + 21);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v9 + v13 + 22) & ~v13;
  v15 = (v10 + v13 + 22) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_BYTE *)(v17 + 9) = *(_BYTE *)(v18 + 9);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  if (a1 != a2)
  {
    v6 = *(unsigned __int8 *)(a1 + 17);
    if (v6 >= 2)
      v6 = *(_DWORD *)a1 + 2;
    if (v6 == 1)
      swift_release();
    swift_release();
    v7 = *(unsigned __int8 *)(a2 + 17);
    if (v7 >= 2)
      v7 = *(_DWORD *)a2 + 2;
    if (v7 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_BYTE *)(a1 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 17) = 0;
    }
    swift_retain();
  }
  v8 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  v9 = (a2 + 25) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(v9 + 8);
  if (*(_QWORD *)(v8 + 8) < 0xFFFFFFFFuLL)
  {
    if (v10 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
      swift_retain();
      swift_retain();
      goto LABEL_19;
    }
LABEL_18:
    v11 = *(_OWORD *)v9;
    *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
    *(_OWORD *)v8 = v11;
    goto LABEL_19;
  }
  if (v10 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_18;
  }
  *(_QWORD *)v8 = *(_QWORD *)v9;
  swift_retain();
  swift_release();
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
LABEL_19:
  *(_BYTE *)(v8 + 20) = *(_BYTE *)(v9 + 20);
  *(_BYTE *)(v8 + 21) = *(_BYTE *)(v9 + 21);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v8 + v13 + 22) & ~v13;
  v15 = (v9 + v13 + 22) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  swift_retain();
  swift_release();
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_BYTE *)(v17 + 9) = *(_BYTE *)(v18 + 9);
  return a1;
}

uint64_t initializeWithTake for NavigationLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(unsigned __int8 *)(a2 + 17);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_BYTE *)(a1 + 17) = v5;
  v6 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  v7 = (a2 + 25) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_OWORD *)v7;
  *(_DWORD *)(v6 + 16) = *(_DWORD *)(v7 + 16);
  *(_OWORD *)v6 = v8;
  *(_BYTE *)(v6 + 20) = *(_BYTE *)(v7 + 20);
  *(_BYTE *)(v6 + 21) = *(_BYTE *)(v7 + 21);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v6 + v10 + 22) & ~v10;
  v12 = (v7 + v10 + 22) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_BYTE *)(v14 + 9) = *(_BYTE *)(v15 + 9);
  return a1;
}

uint64_t assignWithTake for NavigationLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  if (a1 != a2)
  {
    v6 = *(unsigned __int8 *)(a1 + 17);
    if (v6 >= 2)
      v6 = *(_DWORD *)a1 + 2;
    if (v6 == 1)
      swift_release();
    swift_release();
    v7 = *(unsigned __int8 *)(a2 + 17);
    if (v7 >= 2)
      v7 = *(_DWORD *)a2 + 2;
    if (v7 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(_BYTE *)(a1 + 17) = v8;
  }
  v9 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  v10 = (a2 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v9 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_16;
  if (*(_QWORD *)(v10 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
LABEL_16:
    v11 = *(_OWORD *)v10;
    *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 + 16);
    *(_OWORD *)v9 = v11;
    goto LABEL_17;
  }
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_release();
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  swift_release();
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 + 16);
LABEL_17:
  *(_BYTE *)(v9 + 20) = *(_BYTE *)(v10 + 20);
  *(_BYTE *)(v9 + 21) = *(_BYTE *)(v10 + 21);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v9 + v13 + 22) & ~v13;
  v15 = (v10 + v13 + 22) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  swift_release();
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_BYTE *)(v17 + 9) = *(_BYTE *)(v18 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationLinkModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    v14 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
    if (v5 > 0x7FFFFFFE)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((v14 + v7 + 22) & ~v7);
    }
    else
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      if ((v15 + 1) >= 2)
        return v15;
      else
        return 0;
    }
  }
  else
  {
    v8 = ((*(_QWORD *)(v4 + 64) + ((v7 + 46) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
    v9 = (a2 - v6 + 0xFFFF) >> (8 * v8);
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18750E4C4 + 4 * byte_187C3B733[v12]))();
  }
}

void storeEnumTagSinglePayload for NavigationLinkModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ((*(_QWORD *)(v5 + 64) + ((v7 + 46) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
  if (v6 >= a3)
  {
    v11 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v6 + 0xFFFF) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  v12 = ~v6 + a2;
  bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 46) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 10);
  if (v8 > 3)
    *a1 = v12;
  else
    *(_WORD *)a1 = v12;
  __asm { BR              X11 }
}

void sub_18750E690(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x18750E71CLL);
}

void sub_18750E698(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18750E6A0);
  JUMPOUT(0x18750E71CLL);
}

void sub_18750E6EC(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x18750E71CLL);
}

void sub_18750E6F4(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x18750E71CLL);
}

uint64_t sub_18750E6FC@<X0>(unsigned int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (!a1)
    goto LABEL_6;
  v3 = (v7 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (a2 <= 0x7FFFFFFE)
  {
    if (a1 > 0x7FFFFFFE)
      JUMPOUT(0x18750E708);
    *(_QWORD *)(v3 + 8) = a1;
LABEL_6:
    JUMPOUT(0x18750E71CLL);
  }
  return (*(uint64_t (**)(unint64_t))(v5 + 56))((v3 + v6 + 22) & a3);
}

uint64_t type metadata accessor for NavigationLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationLinkModifier);
}

uint64_t type metadata accessor for NavigationLinkModifier.Payload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationLinkModifier.Payload);
}

uint64_t type metadata completion function for NavigationLinkModifier.Payload()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NavigationLinkModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v8 + ((v7 + 46) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 10 > 0x18)
  {
    v11 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
  }
  else
  {
    v12 = *((unsigned __int8 *)a2 + 17);
    if (v12 >= 2)
      v12 = *(_DWORD *)a2 + 2;
    if (v12 == 1)
    {
      v13 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v13;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      swift_retain();
      v14 = 1;
    }
    else
    {
      v14 = 0;
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = a2[1];
    }
    v15 = ~v7;
    swift_retain();
    *(_BYTE *)(v4 + 17) = v14;
    v16 = (v4 + 25) & 0xFFFFFFFFFFFFFFF8;
    v17 = ((unint64_t)a2 + 25) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v17 + 8) < 0xFFFFFFFFuLL)
    {
      v18 = *(_OWORD *)v17;
      *(_DWORD *)(v16 + 16) = *(_DWORD *)(v17 + 16);
      *(_OWORD *)v16 = v18;
    }
    else
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
      *(_DWORD *)(v16 + 16) = *(_DWORD *)(v17 + 16);
      swift_retain();
      swift_retain();
    }
    *(_BYTE *)(v16 + 20) = *(_BYTE *)(v17 + 20);
    *(_BYTE *)(v16 + 21) = *(_BYTE *)(v17 + 21);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))((v16 + v7 + 22) & v15, (v17 + v7 + 22) & v15, v5);
    v19 = (v8 + ((v16 + v7 + 22) & v15)) & 0xFFFFFFFFFFFFFFF8;
    v20 = (v8 + ((v17 + v7 + 22) & v15)) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
    *(_BYTE *)(v19 + 9) = *(_BYTE *)(v20 + 9);
  }
  swift_retain();
  return v4;
}

uint64_t getEnumTagSinglePayload for NavigationLinkModifier.Payload(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    v14 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
    if (v5 > 0x7FFFFFFE)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((v14 + v7 + 22) & ~v7);
    }
    else
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      if ((v15 + 1) >= 2)
        return v15;
      else
        return 0;
    }
  }
  else
  {
    v8 = ((*(_QWORD *)(v4 + 64) + ((v7 + 46) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
    v9 = (a2 - v6 + 0xFFFF) >> (8 * v8);
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18750EA40 + 4 * byte_187C3B742[v12]))();
  }
}

void storeEnumTagSinglePayload for NavigationLinkModifier.Payload(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ((*(_QWORD *)(v5 + 64) + ((v7 + 46) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
  if (v6 >= a3)
  {
    v11 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v6 + 0xFFFF) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  v12 = ~v6 + a2;
  bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 46) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 10);
  if (v8 > 3)
    *a1 = v12;
  else
    *(_WORD *)a1 = v12;
  __asm { BR              X11 }
}

void sub_18750EC0C(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x18750EC98);
}

void sub_18750EC14(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18750EC1CLL);
  JUMPOUT(0x18750EC98);
}

void sub_18750EC68(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x18750EC98);
}

void sub_18750EC70(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x18750EC98);
}

uint64_t sub_18750EC78@<X0>(unsigned int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (!a1)
    goto LABEL_6;
  v3 = (v7 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (a2 <= 0x7FFFFFFE)
  {
    if (a1 > 0x7FFFFFFE)
      JUMPOUT(0x18750EC84);
    *(_QWORD *)(v3 + 8) = a1;
LABEL_6:
    JUMPOUT(0x18750EC98);
  }
  return (*(uint64_t (**)(unint64_t))(v5 + 56))((v3 + v6 + 22) & a3);
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationLinkModifier<A>()
{
  return &protocol witness table for NavigationLinkModifier<A>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ItemNavigationLinkModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t NavigationLinkModifier.init(isActive:updateSeed:isDetail:alwaysDisable:destination:presentedValue:isAdHocPresentationLink:wasTriggeredBySelection:needsButtonStyle:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13)
{
  char v13;
  char v14;
  __int128 v16;
  char v17;
  char v18;

  v13 = *((_BYTE *)a1 + 16);
  v14 = *((_BYTE *)a1 + 17);
  v16 = *a1;
  v17 = v13;
  v18 = v14;
  return NavigationLinkModifier.Payload.init(isActive:updateSeed:isDetail:alwaysDisable:destination:presentedValue:isAdHocPresentationLink:wasTriggeredBySelection:)((uint64_t)&v16, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t NavigationLinkModifier.Payload.init(isActive:updateSeed:isDetail:alwaysDisable:destination:presentedValue:isAdHocPresentationLink:wasTriggeredBySelection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13)
{
  char v16;
  char v17;
  int *v18;
  uint64_t result;

  v16 = *(_BYTE *)(a1 + 16);
  v17 = *(_BYTE *)(a1 + 17);
  *(_OWORD *)a9 = *(_OWORD *)a1;
  *(_BYTE *)(a9 + 16) = v16;
  *(_BYTE *)(a9 + 17) = v17;
  *(_QWORD *)(a9 + 24) = a2;
  *(_QWORD *)(a9 + 32) = a3;
  *(_DWORD *)(a9 + 40) = a4;
  *(_BYTE *)(a9 + 44) = a5;
  *(_BYTE *)(a9 + 45) = a6;
  v18 = (int *)type metadata accessor for NavigationLinkModifier.Payload(0, a12, a13, a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a12 - 8) + 32))(a9 + v18[12], a7, a12);
  *(_QWORD *)(a9 + v18[13]) = a8;
  *(_BYTE *)(a9 + v18[14]) = a10;
  *(_BYTE *)(a9 + v18[15]) = a11;
  return result;
}

uint64_t static NavigationLinkModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for NavigationLinkModifier(255, a5, a6, a4);
  type metadata accessor for _GraphValue();
  type metadata accessor for NavigationLinkModifier.Payload(0, a5, a6, v8);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v10 = type metadata accessor for InternalNavigationLinkModifier(0, a5, a6, v9);
  v12 = type metadata accessor for InternalModifier(0, a5, a6, v11);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InternalModifier<A>, v12);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InternalNavigationLinkModifier<A>, v10);
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t static NavigationLinkModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for NavigationLinkModifier(255, a5, a6, a4);
  type metadata accessor for _GraphValue();
  type metadata accessor for NavigationLinkModifier.Payload(0, a5, a6, v8);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v10 = type metadata accessor for InternalNavigationLinkModifier(0, a5, a6, v9);
  v12 = type metadata accessor for InternalModifier(0, a5, a6, v11);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InternalModifier<A>, v12);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InternalNavigationLinkModifier<A>, v10);
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t closure #1 in static NavigationLinkModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v12[2] = type metadata accessor for NavigationLinkModifier(0, a2, a3, a4);
  v13 = type metadata accessor for NavigationLinkModifier.Payload(0, a2, a3, v8);
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a4, (uint64_t)v12, v13, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v14;
}

__int128 *InternalModifier.navigationListKey.getter@<X0>(_OWORD *a1@<X8>)
{
  __int128 *result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = (__int128 *)AGGraphGetWeakValue();
  if (result)
  {
    v3 = *result;
    v4 = result[1];
    v5 = result[2];
  }
  else
  {
    v5 = xmmword_187BF9F90;
    v3 = 0uLL;
    v4 = 0uLL;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationLinkModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static NavigationLinkModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationLinkModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static NavigationLinkModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t InternalModifier.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Value;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29[40];
  uint64_t v30;
  _QWORD v31[6];

  v6 = type metadata accessor for NavigationLinkModifier.Payload(0, a1, a2, a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v24 - v9;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, Value, v6);
  InternalModifier.navigationListKey.getter(&v24);
  v12 = v24;
  v13 = v25;
  v14 = v26;
  v15 = v27;
  v16 = v28;
  outlined init with take of NavigationState.ListKey??((uint64_t)&v24, (uint64_t)v29);
  if (v30 == 2)
    v17 = 0;
  else
    v17 = v12;
  if (v30 == 2)
    v18 = 0;
  else
    v18 = *((_QWORD *)&v12 + 1);
  if (v30 == 2)
    v19 = 0;
  else
    v19 = v13;
  if (v30 == 2)
    v20 = 0;
  else
    v20 = v14;
  v31[0] = v17;
  v31[1] = v18;
  if (v30 == 2)
    v21 = 0;
  else
    v21 = v15;
  if (v30 == 2)
    v22 = 1;
  else
    v22 = v16;
  v31[2] = v19;
  v31[3] = v20;
  v31[4] = v21;
  v31[5] = v22;
  return InternalNavigationLinkModifier.init(payload:navigationListKey:)((uint64_t)v10, (uint64_t)v31, a1, a2, a3);
}

uint64_t InternalNavigationLinkModifier.init(payload:navigationListKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int *v20;
  void (*v21)(uint64_t, int *);
  uint64_t result;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 45) = 0;
  *(_QWORD *)(a5 + 56) = swift_getKeyPath();
  *(_BYTE *)(a5 + 64) = 0;
  v10 = (int *)type metadata accessor for InternalNavigationLinkModifier(0, a3, a4, v9);
  v12 = v10;
  *(_BYTE *)(a5 + v10[18]) = 1;
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_BYTE *)(a1 + 17);
  v24 = v15;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a1;
  *(_QWORD *)(a5 + 16) = v14;
  v16 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a5 + 24) = v16;
  *(_BYTE *)(a5 + 25) = v15;
  v17 = *(_QWORD *)(a1 + 24);
  v25 = *(_QWORD *)(a1 + 32);
  if (v25)
    v18 = *(_QWORD *)(a1 + 24);
  else
    v18 = 0;
  v26 = v18;
  if (v25)
    v19 = *(_DWORD *)(a1 + 40);
  else
    v19 = 0;
  v27 = v19;
  v23 = v10[14];
  *(_BYTE *)(a5 + 65) = *(_BYTE *)(a1 + 44);
  *(_BYTE *)(a5 + v10[15]) = *(_BYTE *)(a1 + 45);
  v20 = (int *)type metadata accessor for NavigationLinkModifier.Payload(0, a3, a4, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5 + v12[13], a1 + v20[12], a3);
  *(_QWORD *)(a5 + v23) = *(_QWORD *)(a1 + v20[13]);
  LOBYTE(v23) = *(_BYTE *)(a1 + v20[14]);
  outlined copy of StateOrBinding<Bool>(v13, v14, v16, v24);
  outlined copy of Binding<NavigationSplitViewColumn>?(v17, v25);
  v21 = *(void (**)(uint64_t, int *))(*((_QWORD *)v20 - 1) + 8);
  swift_retain();
  v21(a1, v20);
  *(_BYTE *)(a5 + v12[16]) = v23;
  outlined init with take of Image.Resolved?(a2, a5 + v12[17], &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey);
  result = outlined consume of StateOrBinding<Bool>(*(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(unsigned int *)(a5 + 48), *(_BYTE *)(a5 + 52));
  *(_QWORD *)(a5 + 32) = v26;
  *(_QWORD *)(a5 + 40) = v25;
  *(_DWORD *)(a5 + 48) = v27;
  *(_BYTE *)(a5 + 52) = v25 != 0;
  return result;
}

uint64_t InternalNavigationLinkModifier.$isActive.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 8);
  if ((*(_BYTE *)(v0 + 25) & 1) != 0)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.projectedValue.getter();
    return v3;
  }
  return v1;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance InternalModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance InternalModifier<A>(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for InternalNavigationLinkModifier, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance InternalModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return InternalModifier.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t InternalNavigationLinkModifier.isNavigationEnabledInternal.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(unsigned __int8 *)(v0 + 64);
  outlined copy of Environment<Bool>.Content(v1, v2);
  v3 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<ControlSize>.Content(v1, v2);
  return v3;
}

BOOL InternalNavigationLinkModifier.isContextuallyDisabled.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = v1 + *(int *)(a1 + 68);
  v3 = *(_QWORD *)(v2 + 40);
  if (v3 != 1
    && (v4 = *(_QWORD *)(v1 + *(int *)(a1 + 56))) != 0
    && (*(_BYTE *)(v2 + 32) & 1) != 0
    && ((v5 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 80))(), v3) ? (v6 = v5 == v3) : (v6 = 0), v6))
  {
    return 0;
  }
  else
  {
    return InternalNavigationLinkModifier.isNavigationEnabledInternal.getter() != 1;
  }
}

void InternalNavigationLinkModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ShouldUseNavigationLinkV4Modifier;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InternalNavigationLinkModifier<A>);
  type metadata accessor for _ViewModifier_Content();
  v3 = *(_QWORD *)(a2 + 16);
  ShouldUseNavigationLinkV4Modifier = type metadata accessor for ShouldUseNavigationLinkV4Modifier(255, v3, v4, v5);
  v7 = *(_QWORD *)(a2 + 24);
  type metadata accessor for BaseModifier(255, v3, v7, v8);
  type metadata accessor for LegacyBaseModifier(255, v3, v7, v9);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldUseNavigationLinkV4Modifier<A>, ShouldUseNavigationLinkV4Modifier);
  type metadata accessor for StaticIf();
}

void sub_18750F8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  type metadata accessor for ModifiedContent();
  v11 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v10 - 200) = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&a9 - v13;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for RelationshipModifier<String>, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RelationshipModifier);
  v15 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v15, v16);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_OWORD *)(v10 - 112) = xmmword_187BFE310;
  *(_BYTE *)(v10 - 116) = 1;
  InternalNavigationLinkModifier.base(_:environment:updateSeed:)(0x100000000, v9, (uint64_t)v14);
}

uint64_t sub_18750F9E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);

  strcpy((char *)(v8 - 112), "navigationLink");
  *(_BYTE *)(v8 - 97) = -18;
  v9 = Namespace.wrappedValue.getter();
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], *(_QWORD *)(v8 - 208));
  *(_QWORD *)(v8 - 136) = &protocol witness table for BaseModifier<A>;
  *(_QWORD *)(v8 - 128) = &protocol witness table for LegacyBaseModifier<A>;
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v0, v8 - 136);
  *(_QWORD *)(v8 - 152) = v10;
  *(_QWORD *)(v8 - 144) = v11;
  v12 = MEMORY[0x1E0CE2E70];
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v8 - 152);
  v14 = lazy protocol witness table accessor for type NavigationLinkTraitValueModifier and conformance NavigationLinkTraitValueModifier();
  *(_QWORD *)(v8 - 168) = v13;
  *(_QWORD *)(v8 - 160) = v14;
  v15 = MEMORY[0x18D75FFDC](v12, v2, v8 - 168);
  View.accessibilityLinkedGroup<A>(id:in:)(v8 - 112, v9, v2, MEMORY[0x1E0DEA968], v15);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 200) + 8))(v4, v2);
  *(_QWORD *)(v8 - 184) = v15;
  *(_QWORD *)(v8 - 176) = &protocol witness table for RelationshipModifier<A>;
  v16 = MEMORY[0x18D75FFDC](v12, v1, v8 - 184);
  static ViewBuilder.buildExpression<A>(_:)(v6, v1, v16);
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  v17(v6, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v1, *(_QWORD *)(v8 - 192));
  return v17(v5, v1);
}

void InternalNavigationLinkModifier.base(_:environment:updateSeed:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ShouldUseNavigationLinkV4Modifier;
  uint64_t v27;
  _QWORD v28[39];

  v28[21] = a1;
  v28[24] = a3;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v6 = type metadata accessor for LegacyBaseModifier(0, v5, v4, a2);
  MEMORY[0x1E0C80A78](v6, v7);
  v28[22] = (char *)v28 - v8;
  v28[7] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v28[14] = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v28[6] = (char *)v28 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v28[26] = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v28[27] = v4;
  v21 = type metadata accessor for BaseModifier(0, v5, v4, v20);
  MEMORY[0x1E0C80A78](v21, v22);
  v28[25] = (char *)v28 - v23;
  ShouldUseNavigationLinkV4Modifier = type metadata accessor for ShouldUseNavigationLinkV4Modifier(255, v5, v24, v25);
  v27 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldUseNavigationLinkV4Modifier<A>, ShouldUseNavigationLinkV4Modifier);
  v28[12] = ShouldUseNavigationLinkV4Modifier;
  v28[35] = ShouldUseNavigationLinkV4Modifier;
  v28[36] = v21;
  v28[16] = v21;
  v28[23] = v6;
  v28[37] = v6;
  v28[38] = v27;
  v28[11] = v27;
  type metadata accessor for StaticIf();
}

void sub_18750FD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, double);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, int *);
  uint64_t v38;
  char v39;
  BOOL v40;
  void (*v41)(uint64_t, int *);
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  v16 = a1;
  *(_QWORD *)(v15 - 280) = *(_QWORD *)(a1 - 8);
  v17 = MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v15 - 296) = (char *)&a9 - v18;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InternalNavigationLinkModifier<A>, v13, v17);
  *(_QWORD *)(v15 - 320) = type metadata accessor for _ViewModifier_Content();
  *(_QWORD *)(v15 - 248) = v16;
  v19 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v15 - 240) = v19;
  *(_QWORD *)(v15 - 256) = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)(v15 - 264) = (char *)&a9 - v22;
  *(_QWORD *)(v15 - 360) = *v14;
  *(_QWORD *)(v15 - 368) = v14[1];
  v23 = v10 + v13[13];
  v24 = *(void (**)(uint64_t, double))(v9 + 16);
  *(_QWORD *)(v15 - 336) = v12;
  *(_QWORD *)(v15 - 376) = v23;
  *(_QWORD *)(v15 - 384) = v24;
  v24(v12, v21);
  v25 = v13[14];
  *(_QWORD *)(v15 - 328) = v25;
  v26 = *(_QWORD *)(v10 + v25);
  v28 = *(_QWORD *)(v10 + 8);
  v27 = *(_QWORD *)(v10 + 16);
  v29 = *(_BYTE *)(v10 + 25);
  v30 = *(unsigned __int8 *)(v10 + 24);
  *(_QWORD *)(v15 - 120) = v28;
  *(_QWORD *)(v15 - 112) = v27;
  *(_BYTE *)(v15 - 104) = v30;
  *(_BYTE *)(v15 - 103) = v29;
  swift_retain();
  v31 = v30;
  v32 = *(_QWORD *)(v15 - 352);
  v33 = v29;
  v34 = *(_QWORD *)(v15 - 344);
  outlined copy of StateOrBinding<Bool>(v28, v27, v31, v33);
  *(_QWORD *)(v15 - 392) = Namespace.wrappedValue.getter();
  v35 = *(_BYTE *)(v10 + 65);
  v36 = v13[15];
  LOBYTE(v16) = *(_BYTE *)(v10 + v36);
  v37 = *(void (**)(uint64_t, uint64_t, int *))(v34 + 16);
  v37(v32, v10, v13);
  if ((v16 & 1) != 0)
  {
    v38 = v32;
    v39 = 1;
  }
  else
  {
    v40 = InternalNavigationLinkModifier.isContextuallyDisabled.getter((uint64_t)v13);
    v38 = v32;
    v39 = v40;
  }
  v41 = *(void (**)(uint64_t, int *))(v34 + 8);
  v41(v38, v13);
  BaseModifier.init(destination:presentedValue:isActive:id:isDetail:alwaysDisable:)(*(_QWORD *)(v15 - 336), v26, (uint64_t *)(v15 - 120), *(_QWORD *)(v15 - 392), v35, v39 & 1, v11, *(_QWORD *)(v15 - 184), *(_QWORD *)(v15 - 200));
  *(_QWORD *)(v15 - 336) = Namespace.wrappedValue.getter();
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v15 - 384))(*(_QWORD *)(v15 - 192), *(_QWORD *)(v15 - 376), v11);
  v42 = *(_QWORD *)(v15 - 360);
  v43 = *(_QWORD *)(v15 - 368);
  *(_QWORD *)(v15 - 136) = v42;
  *(_QWORD *)(v15 - 128) = v43;
  *(_DWORD *)(v15 - 344) = *(unsigned __int8 *)(v10 + 65);
  v44 = *(_BYTE *)(v10 + v36);
  v45 = *(_QWORD *)(v15 - 288);
  v37(v45, v10, v13);
  outlined copy of EnvironmentValues?(v42);
  v46 = (v44 & 1) != 0 || InternalNavigationLinkModifier.isContextuallyDisabled.getter((uint64_t)v13);
  v41(v45, v13);
  v47 = InternalNavigationLinkModifier.$isActive.getter();
  LegacyBaseModifier.init(namespaceID:destination:environment:updateSeed:isDetail:alwaysDisable:isPresented:presentedValue:isAdHocPresentationLink:needsButtonStyle:)(*(_QWORD *)(v15 - 336), *(_QWORD *)(v15 - 192), (uint64_t *)(v15 - 136), *(_QWORD *)(v15 - 232) | ((HIDWORD(*(_QWORD *)(v15 - 232)) & 1) << 32), *(_DWORD *)(v15 - 344), v46, v47, v49, *(char **)(v15 - 224), v48 & 1, *(_QWORD *)(v10 + *(_QWORD *)(v15 - 328)), *(_BYTE *)(v10 + v13[16]), *(_BYTE *)(v10 + v13[18]), v11, *(_QWORD *)(v15 - 184));
  StaticIf<>.init(_:then:else:)(*(_QWORD *)(v15 - 200), *(_QWORD *)(v15 - 272), *(_QWORD *)(v15 - 296));
}

uint64_t sub_18751005C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_retain();
  v6 = *(_QWORD *)(v5 - 320);
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v6);
  v8 = *(_QWORD *)(v5 - 264);
  v9 = *(_QWORD *)(v5 - 248);
  MEMORY[0x18D75B4AC](v3, v6, v9, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 280) + 8))(v3, v9);
  v10 = *(_QWORD *)(v1 + v4);
  swift_retain();
  v11 = Namespace.wrappedValue.getter();
  *(_QWORD *)(v5 - 120) = v10;
  *(_QWORD *)(v5 - 112) = v11;
  *(_QWORD *)(v5 - 160) = v0;
  *(_QWORD *)(v5 - 152) = v2;
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v9, v5 - 160);
  *(_QWORD *)(v5 - 176) = v7;
  *(_QWORD *)(v5 - 168) = v12;
  v13 = *(_QWORD *)(v5 - 240);
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v5 - 176);
  MEMORY[0x18D75B4AC](v5 - 120, v13, &type metadata for NavigationLinkTraitValueModifier, v14);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 256) + 8))(v8, v13);
}

int *BaseModifier.init(destination:presentedValue:isActive:id:isDetail:alwaysDisable:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  int *result;
  uint64_t v21;

  v15 = *a3;
  v16 = a3[1];
  v17 = *((_BYTE *)a3 + 16);
  v18 = *((_BYTE *)a3 + 17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(a9, a1, a7);
  result = (int *)type metadata accessor for BaseModifier(0, a7, a8, v19);
  *(_QWORD *)(a9 + result[9]) = a2;
  v21 = a9 + result[10];
  *(_QWORD *)v21 = v15;
  *(_QWORD *)(v21 + 8) = v16;
  *(_BYTE *)(v21 + 16) = v17;
  *(_BYTE *)(v21 + 17) = v18;
  *(_QWORD *)(a9 + result[11]) = a4;
  *(_BYTE *)(a9 + result[12]) = a5;
  *(_BYTE *)(a9 + result[13]) = a6;
  return result;
}

uint64_t LegacyBaseModifier.init(namespaceID:destination:environment:updateSeed:isDetail:alwaysDisable:isPresented:presentedValue:isAdHocPresentationLink:needsButtonStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, char a10, uint64_t a11, char a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t result;
  char *v23;
  char *v24;
  char *v25;

  v19 = *a3;
  v20 = a3[1];
  *(_QWORD *)a9 = a1;
  v21 = (int *)type metadata accessor for LegacyBaseModifier(0, a14, a15, a4);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a14 - 8) + 32))(&a9[v21[9]], a2, a14);
  v23 = &a9[v21[10]];
  *(_QWORD *)v23 = v19;
  *((_QWORD *)v23 + 1) = v20;
  v24 = &a9[v21[11]];
  *(_DWORD *)v24 = a4;
  v24[4] = BYTE4(a4) & 1;
  a9[v21[12]] = a5;
  a9[v21[13]] = a6;
  v25 = &a9[v21[14]];
  *(_QWORD *)v25 = a7;
  *((_QWORD *)v25 + 1) = a8;
  v25[16] = a10;
  *(_QWORD *)&a9[v21[15]] = a11;
  a9[v21[16]] = a12;
  a9[v21[17]] = a13;
  return result;
}

BOOL static ShouldUseNavigationLinkV4Modifier.evaluate(inputs:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  char v5;

  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = 1;
  if ((v5 & 1) == 0 && a2 != MEMORY[0x1E0DEDCE8])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Never?, MEMORY[0x1E0DEDCE8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    return v4 == a2;
  }
  return result;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ShouldUseNavigationLinkV4Modifier<A>(uint64_t a1, uint64_t a2)
{
  return static ShouldUseNavigationLinkV4Modifier.evaluate(inputs:)(a1, *(_QWORD *)(a2 + 16));
}

uint64_t static BaseModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  type metadata accessor for BaseModifier(255, a5, a6, v8);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v9 = MEMORY[0x1E0CFECF8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<Bool> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, (uint64_t (*)(_QWORD, uint64_t))v9, MEMORY[0x1E0CFED00]);
  Attribute.init<A>(body:value:flags:update:)();
  v11 = type metadata accessor for BaseModifier.Transform(0, a5, a6, v10);
  v13 = type metadata accessor for BaseModifier.Child(0, a5, a6, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseModifier<A>.Child, v13);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseModifier<A>.Transform, v11);
  return static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
}

uint64_t static BaseModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for BaseModifier(255, a5, a6, v6);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  _ViewInputs.init(withoutGeometry:)();
  _ViewInputs.withoutGeometryDependencies.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v7 = MEMORY[0x1E0CFECF8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<Bool> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, (uint64_t (*)(_QWORD, uint64_t))v7, MEMORY[0x1E0CFED00]);
  Attribute.init<A>(body:value:flags:update:)();
  v9 = type metadata accessor for BaseModifier.Transform(0, a5, a6, v8);
  v11 = type metadata accessor for BaseModifier.Child(0, a5, a6, v10);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseModifier<A>.Child, v11);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseModifier<A>.Transform, v9);
  return static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)();
}

uint64_t BaseModifier.Child.value.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Value;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36[8];
  uint64_t v37;
  _BYTE v38[24];
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46[40];
  uint64_t v47;
  _QWORD v48[6];

  v34 = a4;
  v7 = type metadata accessor for BaseModifier(0, a2, a3, a1);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v28 - v10;
  Value = AGGraphGetValue();
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v33 = v11;
  v13(v11, Value, v7);
  v31 = BaseModifier.Child.stackKey.getter();
  v30 = v14;
  v29 = v15;
  v32 = a1;
  v35 = a2;
  BaseModifier.Child.listKey.getter(&v41);
  v16 = *((_QWORD *)&v41 + 1);
  v17 = v41;
  v18 = v42;
  v19 = v43;
  v21 = v44;
  v20 = v45;
  outlined init with take of NavigationState.ListKey??((uint64_t)&v41, (uint64_t)v46);
  if (v47 == 2)
  {
    v17 = 0;
    v16 = 0;
    v18 = 0;
    v19 = 0;
    v21 = 0;
    v20 = 1;
  }
  v48[0] = v17;
  v48[1] = v16;
  v48[2] = v18;
  v48[3] = v19;
  v48[4] = v21;
  v48[5] = v20;
  v22 = v35;
  BaseModifier.Child.authority.getter((uint64_t)v38);
  outlined init with copy of NavigationAuthority??((uint64_t)v38, (uint64_t)v36);
  if (v37 == 2)
  {
    v39 = xmmword_187BF9840;
    v40 = 0;
  }
  else
  {
    outlined init with take of Image.Resolved?((uint64_t)v36, (uint64_t)&v39, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  }
  if (v30 == 7)
    v23 = 0;
  else
    v23 = v29;
  if (v30 == 7)
    v24 = 6;
  else
    v24 = v30;
  if (v30 == 7)
    v25 = 0;
  else
    v25 = v31;
  outlined destroy of NavigationAuthority??((uint64_t)v38);
  v26 = (char *)AGGraphGetValue();
  return BaseModifier.Transform.init(modifier:stackKey:listKey:navigationAuthority:isExtracting:)((uint64_t)v33, v25, v24, v23, (uint64_t)v48, (uint64_t)&v39, *v26, v22, v34, a3);
}

uint64_t BaseModifier.Transform.init(modifier:stackKey:listKey:navigationAuthority:isExtracting:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v19;
  uint64_t v20;
  int *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  v19 = type metadata accessor for BaseModifier(0, a8, a10, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a9, a1, v19);
  v21 = (int *)type metadata accessor for BaseModifier.Transform(0, a8, a10, v20);
  v22 = (_QWORD *)(a9 + v21[9]);
  *v22 = a2;
  v22[1] = a3;
  v22[2] = a4;
  outlined init with take of Image.Resolved?(a5, a9 + v21[10], &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey);
  outlined init with take of Image.Resolved?(a6, a9 + v21[11], &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  *(_BYTE *)(a9 + v21[12]) = a7;
  v23 = a9 + v21[13];
  *(_BYTE *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  v24 = a9 + v21[14];
  result = swift_getKeyPath();
  *(_QWORD *)v24 = result;
  *(_QWORD *)(v24 + 8) = 0;
  *(_WORD *)(v24 + 16) = 0;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance BaseModifier<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance InternalModifier<A>(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for BaseModifier.Transform, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance BaseModifier<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return BaseModifier.Child.value.getter(*(_QWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

BOOL BaseModifier.Transform.isKeyless.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x1E0C80A78](a1, v1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned __int8 *)(v7 + *(int *)(v4 + 36) + 8);
  (*(void (**)(char *))(v3 + 16))(v6);
  v9 = v8 == 6 && *(_QWORD *)&v6[*(int *)(a1 + 40) + 40] == 1;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, a1);
  return v9;
}

uint64_t BaseModifier.Transform.isDisabled.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v3 = v2;
  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v30 - v10;
  v13 = *(_QWORD *)(v12 + 16);
  v15 = *(unsigned __int8 *)(v3
                           + *(int *)(type metadata accessor for BaseModifier(0, v13, *(_QWORD *)(v12 + 24), v14) + 52));
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v16(v11, v3, a1);
  if (v15 == 1)
  {
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v11, a1);
    v16(v7, v3, a1);
    v17(v7, a1);
    return 1;
  }
  outlined init with copy of NavigationAuthority?((uint64_t)&v11[*(int *)(a1 + 44)], (uint64_t)&v33);
  v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v11, a1);
  v19 = v34;
  outlined destroy of NavigationAuthority?((uint64_t)&v33);
  v16(v7, v3, a1);
  if (v19 == 1)
  {
    v18(v7, a1);
    return 1;
  }
  v21 = BaseModifier.Transform.isKeyless.getter(a1);
  v18(v7, a1);
  if (v21)
    return 1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Never?, MEMORY[0x1E0DEDCE8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (v13 != v22)
  {
    v23 = v3 + *(int *)(a1 + 56);
    v24 = *(_QWORD *)v23;
    v25 = *(_QWORD *)(v23 + 8);
    v26 = *(unsigned __int8 *)(v23 + 16);
    v27 = *(unsigned __int8 *)(v23 + 17);
    outlined copy of Environment<Binding<Visibility>?>.Content(*(_QWORD *)v23, v25, v26, *(_BYTE *)(v23 + 17));
    specialized Environment.wrappedValue.getter(v24, v25, v26 | (v27 << 8), (uint64_t)&v33);
    outlined consume of Environment<DismissWindowAction>.Content(v24, v25, v26, v27);
    v28 = v34;
    if (v34)
    {
      v29 = v33;
      v30[0] = v33;
      v30[1] = v34;
      v31 = v35;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      MEMORY[0x18D75B9C8](&v32);
      outlined consume of Binding<NavigationSplitViewColumn>?(v29, v28);
      if (v32)
        return 1;
    }
  }
  return 0;
}

uint64_t BaseModifier.Transform.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v24;
  int v25;
  uint64_t v26;
  _BYTE v27[24];
  _BYTE v28[48];

  v4 = v3;
  v26 = a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 24);
  v13 = (int *)type metadata accessor for BaseModifier(0, v6, v11, v12);
  v14 = v4 + v13[10];
  if (*(_BYTE *)(v14 + 17) == 1)
  {
    v16 = *(_QWORD *)v14;
    v15 = *(_QWORD *)(v14 + 8);
    v25 = *(_BYTE *)(v14 + 16) & 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    v16 = 0;
    v15 = 0;
    v25 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v4, v6);
  v17 = *(_QWORD *)(v4 + v13[9]);
  v18 = v13[12];
  v19 = *(_QWORD *)(v4 + v13[11]);
  v20 = *(_BYTE *)(v4 + v18);
  outlined init with copy of NavigationAuthority?(v4 + *(int *)(a1 + 44), (uint64_t)v27);
  outlined init with take of Image.Resolved?(v4 + *(int *)(a1 + 40), (uint64_t)v28, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey);
  v21 = (__int128 *)(v4 + *(int *)(a1 + 36));
  v24 = *v21;
  v22 = *((_QWORD *)v21 + 2);
  swift_retain();
  return NavigationLinkButtonStyle.init(destination:presentedValue:modifierID:shouldTargetSourceColumn:deprecated_isActive:authority:listKey:stackKey:)((uint64_t)v9, v17, v19, (v20 & 1) == 0, v16, v15, v25, (uint64_t)v27, v26, (uint64_t)v28, v24, *((unint64_t *)&v24 + 1), v22, v6, v11);
}

uint64_t BaseModifier.Transform.body(content:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (**v70)(char *, uint64_t);
  uint64_t v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (**v93)(char *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[2];
  _QWORD v111[2];
  _QWORD v112[2];
  _QWORD v113[2];
  char v114;
  uint64_t v115;
  _QWORD v116[2];
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;

  v109 = a3;
  v108 = *((_QWORD *)a2 - 1);
  MEMORY[0x1E0C80A78](a1, a2);
  v106 = v4;
  v107 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v5 + 16);
  v6 = *(_QWORD *)(v5 + 24);
  v9 = type metadata accessor for NavigationLinkButtonStyle(0, v7, v6, v8);
  v93 = *(void (***)(char *, uint64_t))(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v87 - v12;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseModifier<A>.Transform, a2, v11);
  v88 = type metadata accessor for _ViewModifier_Content();
  v89 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationLinkButtonStyle<A>, v9);
  v90 = type metadata accessor for PrimitiveButtonStyleContainerModifier(255, v9, v89, v14);
  v15 = type metadata accessor for ModifiedContent();
  v91 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v87 - v17;
  v19 = MEMORY[0x1E0DEAFA0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v20 = type metadata accessor for ModifiedContent();
  v95 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (void (**)(char *, uint64_t))((char *)&v87 - v22);
  v105 = v6;
  type metadata accessor for UpdateViewDestinationViewModifier(255, v7, v6, v24);
  v94 = v7;
  v25 = v7;
  v26 = v19;
  type metadata accessor for UpdateViewDestinationRequestProcessor(255, v25, v19, MEMORY[0x1E0DEAFB0]);
  v27 = type metadata accessor for ModifiedContent();
  v96 = v20;
  v97 = v27;
  v28 = type metadata accessor for ModifiedContent();
  v102 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v101 = (uint64_t)&v87 - v30;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  v103 = v28;
  v104 = type metadata accessor for ModifiedContent();
  v100 = *(_QWORD *)(v104 - 8);
  MEMORY[0x1E0C80A78](v104, v31);
  v98 = (char *)&v87 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v99 = (char *)&v87 - v35;
  v36 = v92;
  BaseModifier.Transform.style.getter((uint64_t)a2, v37, (uint64_t)v13);
  v38 = v88;
  v39 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v88);
  View.buttonStyle<A>(_:)((uint64_t)v13, v38, v9, v39);
  v93[1](v13, v9);
  BaseModifier.Transform.isDisabled.getter((uint64_t)a2, v40);
  v41 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v90);
  v116[0] = v39;
  v116[1] = v41;
  v42 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v15, v116);
  v93 = v23;
  v43 = v42;
  View.disabled(_:)();
  (*(void (**)(char *, uint64_t))(v91 + 8))(v18, v15);
  v44 = v36 + a2[13];
  v45 = *(_BYTE *)v44;
  v46 = *(_QWORD *)(v44 + 8);
  v114 = v45;
  v115 = v46;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, v26, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  v48 = v36;
  v49 = v36 + a2[10];
  v50 = *(_QWORD *)(v49 + 40);
  v91 = v117;
  v90 = v118;
  LODWORD(v89) = v119;
  if (v50 == 1)
  {
    v51 = v36 + a2[9];
    v52 = *(unsigned __int8 *)(v51 + 8);
    v53 = v43;
    if (v52 == 6)
    {
      v54 = 0;
      v52 = 0;
      v50 = 0;
      v55 = 0uLL;
      v56 = 0x1FFFFFFFELL;
    }
    else
    {
      v56 = 0;
      v50 = 0;
      v54 = *(_QWORD *)v51;
      v55 = *(unint64_t *)(v51 + 16);
    }
  }
  else
  {
    v57 = *(_QWORD *)(v49 + 32);
    v55 = *(_OWORD *)(v49 + 16);
    v58 = v49;
    v54 = *(_QWORD *)v49;
    v52 = *(_QWORD *)(v58 + 8);
    v56 = v57 & 1 | 0x4000000000000000;
    v53 = v43;
  }
  v117 = v54;
  v118 = v52;
  v119 = v55;
  v120 = v56;
  v121 = v50;
  v59 = v94;
  v60 = v105;
  v61 = type metadata accessor for BaseModifier(0, v94, v105, v47);
  v62 = *(int *)(v61 + 48);
  v88 = *(_QWORD *)(v36 + *(int *)(v61 + 44));
  v63 = *(_BYTE *)(v36 + v62);
  v64 = v36 + a2[11];
  v65 = *(_BYTE *)(v48 + a2[12]);
  v66 = lazy protocol witness table accessor for type External<Bool> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0], MEMORY[0x1E0CE66D8]);
  v113[0] = v53;
  v113[1] = v66;
  v67 = v96;
  v68 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v96, v113);
  v86 = v65;
  v85 = v64;
  v69 = v101;
  v70 = v93;
  View.updateViewDestinations<A>(isPresented:destination:key:kind:id:shouldTargetSourceColumn:navigationAuthority:isExtractingDestinations:transaction:)(v91, v90, v89, v48, (uint64_t)&v117, 0, 1, v88, v101, (v63 & 1) == 0, v85, v86, 1, v67, v59, v68, v60);
  swift_release();
  swift_release();
  (*(void (**)(_QWORD, uint64_t))(v95 + 8))(v70, v67);
  v72 = v107;
  v71 = v108;
  (*(void (**)(char *, uint64_t, int *))(v108 + 16))(v107, v48, a2);
  v73 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
  v74 = swift_allocObject();
  *(_QWORD *)(v74 + 16) = v59;
  *(_QWORD *)(v74 + 24) = v60;
  (*(void (**)(unint64_t, char *, int *))(v71 + 32))(v74 + v73, v72, a2);
  v112[0] = &protocol witness table for UpdateViewDestinationViewModifier<A>;
  v112[1] = &protocol witness table for UpdateViewDestinationRequestProcessor<A, B>;
  v75 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], v97, v112);
  v111[0] = v68;
  v111[1] = v75;
  v76 = MEMORY[0x1E0CE2E70];
  v77 = v103;
  v78 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v103, v111);
  v79 = v98;
  View.transformPlatformItemSelectionBehavior(_:)((uint64_t)partial apply for closure #1 in BaseModifier.Transform.body(content:), v74, v77, v78);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v69, v77);
  v110[0] = v78;
  v110[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
  v80 = v104;
  v81 = MEMORY[0x18D75FFDC](v76, v104, v110);
  v82 = (uint64_t)v99;
  static ViewBuilder.buildExpression<A>(_:)(v79, v80, v81);
  v83 = *(void (**)(char *, uint64_t))(v100 + 8);
  v83(v79, v80);
  static ViewBuilder.buildBlock<A>(_:)(v82, v80, v109);
  return ((uint64_t (*)(uint64_t, uint64_t))v83)(v82, v80);
}

uint64_t closure #1 in BaseModifier.Transform.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v6;
  char v7;

  type metadata accessor for BaseModifier.Transform(0, a3, a4, a4);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  result = State.wrappedValue.getter();
  if (v7)
    v6 = 2;
  else
    v6 = 0;
  *(_BYTE *)(a1 + 4) = v6;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance BaseModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static BaseModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BaseModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static BaseModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t LegacyBaseModifier.isPresented.getter()
{
  uint64_t v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v1);
  return v1;
}

uint64_t LegacyBaseModifier.isPresented.setter()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

double static LegacyBaseModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, double *a4@<X8>)
{
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v14;
  double v15;

  type metadata accessor for LegacyBaseModifier(255, a2, a3, a1);
  type metadata accessor for _GraphValue();
  v6 = MEMORY[0x1E0CE1470];
  v7 = MEMORY[0x1E0DEAFA0];
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<Bool>, v7, (uint64_t (*)(_QWORD, uint64_t))v6);
  _GraphValue.value.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationLinkPresentedValue?>, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _GraphValue.subscript.getter();
  _GraphValue.value.getter();
  _GraphValue.value.getter();
  v9 = type metadata accessor for LegacyBaseModifier.Transform(0, a2, a3, v8);
  v11 = type metadata accessor for LegacyBaseModifier.Wrapper(0, a2, a3, v10);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LegacyBaseModifier<A>.Wrapper, v11);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LegacyBaseModifier<A>.Transform, v9);
  static ViewModifier._makeView(modifier:inputs:body:)();
  result = v15;
  *(_QWORD *)a4 = v14;
  a4[1] = v15;
  return result;
}

uint64_t static LegacyBaseModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for LegacyBaseModifier(255, a5, a6, a4);
  type metadata accessor for _GraphValue();
  v8 = MEMORY[0x1E0CE1470];
  v9 = MEMORY[0x1E0DEAFA0];
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<Bool>, v9, (uint64_t (*)(_QWORD, uint64_t))v8);
  _GraphValue.value.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationLinkPresentedValue?>, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, (uint64_t (*)(uint64_t, uint64_t))v8);
  _GraphValue.value.getter();
  _GraphValue.subscript.getter();
  _GraphValue.value.getter();
  _GraphValue.value.getter();
  v11 = type metadata accessor for LegacyBaseModifier.Transform(0, a5, a6, v10);
  v13 = type metadata accessor for LegacyBaseModifier.Wrapper(0, a5, a6, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LegacyBaseModifier<A>.Wrapper, v13);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LegacyBaseModifier<A>.Transform, v11);
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t closure #1 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v6 = type metadata accessor for LegacyBaseModifier(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 52);
  v12[2] = v6;
  v8 = MEMORY[0x1E0DEAFA0];
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, a4, (uint64_t)v12, v8, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v12[5];
}

uint64_t closure #2 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];

  v6 = type metadata accessor for LegacyBaseModifier(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 60);
  v13[2] = v6;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v9 = v8;
  v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, a4, (uint64_t)v13, v9, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  return v13[5];
}

uint64_t closure #3 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v6 = type metadata accessor for LegacyBaseModifier(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 64);
  v12[2] = v6;
  v8 = MEMORY[0x1E0DEAFA0];
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, a4, (uint64_t)v12, v8, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v12[5];
}

uint64_t LegacyBaseModifier.Wrapper.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t Value;
  uint64_t v15;

  v6 = type metadata accessor for LegacyBaseModifier(0, a1, a2, a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v15 - v9;
  if ((*(_BYTE *)AGGraphGetValue() & 1) != 0
    || (type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]), !*(_QWORD *)AGGraphGetValue()))
  {
    Value = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, Value, v6);
    v12 = *(_BYTE *)AGGraphGetValue();
  }
  else
  {
    MEMORY[0x18D75AC90](0xD00000000000008BLL, 0x8000000187BE2280);
    v11 = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
    v12 = 1;
  }
  return LegacyBaseModifier.Transform.init(modifier:shouldDisable:)((uint64_t)v10, v12, a1, a2, a3);
}

uint64_t LegacyBaseModifier.Transform.init(modifier:shouldDisable:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v10 = type metadata accessor for LegacyBaseModifier(0, a3, a4, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  result = type metadata accessor for LegacyBaseModifier.Transform(0, a3, a4, v11);
  *(_BYTE *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LegacyBaseModifier<A>.Wrapper@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance InternalModifier<A>(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for LegacyBaseModifier.Transform, a2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance InternalModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = a2(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t protocol witness for Rule.value.getter in conformance LegacyBaseModifier<A>.Wrapper@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LegacyBaseModifier.Wrapper.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t LegacyBaseModifier.Transform.maybeStyledContent(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];

  v4 = v3;
  v50 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v47 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 24);
  v41 = v10;
  v12 = type metadata accessor for NavigationLinkButtonStyle(0, v6, v10, v11);
  v49 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v46 = (uint64_t)&v41 - v15;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LegacyBaseModifier<A>.Transform, a2, v14);
  v42 = type metadata accessor for _ViewModifier_Content();
  v43 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationLinkButtonStyle<A>, v12);
  v45 = type metadata accessor for PrimitiveButtonStyleContainerModifier(255, v12, v43, v16);
  v17 = type metadata accessor for ModifiedContent();
  v48 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v44 = (char *)&v41 - v23;
  v25 = type metadata accessor for LegacyBaseModifier(0, v6, v10, v24);
  v26 = v4 + *(int *)(v25 + 56);
  v27 = *(_QWORD *)v26;
  v28 = *(_QWORD *)(v26 + 8);
  v29 = *(_BYTE *)(v26 + 16);
  v30 = v4 + *(int *)(v25 + 36);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  swift_retain();
  swift_retain();
  v32 = (uint64_t)v47;
  v31(v47, v30, v6);
  v33 = v46;
  NavigationLinkButtonStyle.init(deprecated_isActive:destination:)(v27, v28, v29, v32, v6, v41, v46);
  v34 = v42;
  v35 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v42);
  View.buttonStyle<A>(_:)(v33, v34, v12, v35);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v33, v12);
  v36 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v45);
  v51[0] = v35;
  v51[1] = v36;
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v51);
  v38 = (uint64_t)v44;
  static ViewBuilder.buildExpression<A>(_:)(v20, v17, v37);
  v39 = *(void (**)(char *, uint64_t))(v48 + 8);
  v39(v20, v17);
  static ViewBuilder.buildBlock<A>(_:)(v38, v17, v50);
  return ((uint64_t (*)(uint64_t, uint64_t))v39)(v38, v17);
}

uint64_t LegacyBaseModifier.Transform.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[2];

  v58 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64);
  v56 = *(_QWORD *)(a2 - 8);
  v57 = v5;
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v55 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LegacyBaseModifier<A>.Transform, v6);
  v8 = type metadata accessor for _ViewModifier_Content();
  v9 = *(_QWORD *)(a2 + 16);
  v53 = *(_QWORD *)(a2 + 24);
  v54 = v9;
  v11 = type metadata accessor for NavigationLinkButtonStyle(255, v9, v53, v10);
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationLinkButtonStyle<A>, v11);
  v47 = type metadata accessor for PrimitiveButtonStyleContainerModifier(255, v11, v12, v13);
  v14 = type metadata accessor for ModifiedContent();
  v49 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v47 - v16;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v18 = type metadata accessor for ModifiedContent();
  v52 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v47 - v20;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>, (uint64_t)&type metadata for NavigationDestinationsKey, (uint64_t)&protocol witness table for NavigationDestinationsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v22 = type metadata accessor for ModifiedContent();
  v51 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v48 = (char *)&v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v50 = (char *)&v47 - v27;
  LegacyBaseModifier.Transform.maybeStyledContent(_:)(v28, a2, (uint64_t)v17);
  v29 = v3;
  v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v8);
  v31 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v47);
  v61[0] = v30;
  v61[1] = v31;
  v32 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v14, v61);
  View.disabled(_:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v17, v14);
  v33 = v55;
  v34 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v29, a2);
  v35 = v34;
  v36 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v37 = swift_allocObject();
  v38 = v53;
  *(_QWORD *)(v37 + 16) = v54;
  *(_QWORD *)(v37 + 24) = v38;
  (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v37 + v36, v33, a2);
  v39 = lazy protocol witness table accessor for type External<Bool> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0], MEMORY[0x1E0CE66D8]);
  v60[0] = v32;
  v60[1] = v39;
  v40 = MEMORY[0x1E0CE2E70];
  v41 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v18, v60);
  v42 = v48;
  View.transactionalPreferenceTransform<A>(key:transform:)((uint64_t)&type metadata for NavigationDestinationsKey, (uint64_t)partial apply for closure #1 in LegacyBaseModifier.Transform.body(content:), v37, v18, (uint64_t)&type metadata for NavigationDestinationsKey, v41, (uint64_t)&protocol witness table for NavigationDestinationsKey);
  swift_release();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v21, v18);
  v59[0] = v41;
  v59[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v43 = MEMORY[0x18D75FFDC](v40, v22, v59);
  v44 = (uint64_t)v50;
  static ViewBuilder.buildExpression<A>(_:)(v42, v22, v43);
  v45 = *(void (**)(char *, uint64_t))(v51 + 8);
  v45(v42, v22);
  static ViewBuilder.buildBlock<A>(_:)(v44, v22, v58);
  return ((uint64_t (*)(uint64_t, uint64_t))v45)(v44, v22);
}

uint64_t closure #1 in LegacyBaseModifier.Transform.body(content:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, _QWORD *, uint64_t, double);
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[2];
  _QWORD v58[11];
  char v59;

  v56 = a2;
  v53 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v54 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = v8;
  v10 = type metadata accessor for LegacyBaseModifier.Transform(0, v9, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v50 - v17;
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v50 - v22;
  v25 = *((_BYTE *)a3 + *(int *)(v24 + 36));
  v26 = *(void (**)(char *, _QWORD *, uint64_t, double))(v11 + 16);
  v26((char *)&v50 - v22, a3, v10, v21);
  if ((v25 & 1) != 0)
  {
    v28 = *(void (**)(char *, uint64_t))(v11 + 8);
    v28(v23, v10);
    ((void (*)(char *, _QWORD *, uint64_t))v26)(v14, a3, v10);
LABEL_5:
    v28(v14, v10);
LABEL_9:
    v58[0] = *a3;
    v48 = v58[0];
    v58[1] = v56;
    v59 = 1;
    swift_retain();
    v47 = v48;
    return specialized Dictionary.subscript.setter((uint64_t)v58, v47);
  }
  v52 = a1;
  v29 = type metadata accessor for LegacyBaseModifier(0, *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), v27);
  v30 = *(_QWORD *)&v23[*(int *)(v29 + 60)];
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v23, v10);
  if (v30)
  {
    v31 = v18[*(int *)(v29 + 64)];
    v28 = *(void (**)(char *, uint64_t))(v11 + 8);
    v28(v18, v10);
    ((void (*)(char *, _QWORD *, uint64_t))v26)(v14, a3, v10);
    if ((v31 & 1) == 0)
      goto LABEL_5;
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t))(v11 + 8);
    v28(v18, v10);
    ((void (*)(char *, _QWORD *, uint64_t))v26)(v14, a3, v10);
  }
  v33 = v55;
  v34 = (int *)type metadata accessor for LegacyBaseModifier(0, a4, v55, v32);
  v35 = LegacyBaseModifier.isPresented.getter();
  v28(v14, v10);
  if ((v35 & 1) == 0)
    goto LABEL_9;
  v52 = *a3;
  v36 = (uint64_t)v54;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v54, (char *)a3 + v34[9], a4);
  v37 = v34[11];
  LODWORD(v53) = *((unsigned __int8 *)a3 + v34[12]);
  v38 = (_QWORD *)((char *)a3 + v34[10]);
  v40 = v38[1];
  v57[0] = *v38;
  v39 = v57[0];
  v57[1] = v40;
  v41 = *((_BYTE *)a3 + v37 + 4);
  v51 = implicit closure #4 in closure #1 in LegacyBaseModifier.Transform.body(content:)((uint64_t)a3, a4, v33, v42);
  v44 = v43;
  v45 = v56;
  swift_retain();
  outlined copy of EnvironmentValues?(v39);
  LOBYTE(v58[0]) = v41;
  v46 = v52;
  NavigationDestinationContent.init<A>(id:content:isDetail:transaction:environment:updateSeed:onDismiss:)(v52, v36, v53, v45, v57, (uint64_t)v51, v44, (uint64_t)v58, a4, v33);
  v59 = 0;
  v47 = v46;
  return specialized Dictionary.subscript.setter((uint64_t)v58, v47);
}

uint64_t (*implicit closure #4 in closure #1 in LegacyBaseModifier.Transform.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = type metadata accessor for LegacyBaseModifier.Transform(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v16 - v11, a1, v7, v10);
  v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, v12, v7);
  return partial apply for implicit closure #5 in implicit closure #4 in closure #1 in LegacyBaseModifier.Transform.body(content:);
}

uint64_t implicit closure #5 in implicit closure #4 in closure #1 in LegacyBaseModifier.Transform.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for LegacyBaseModifier.Transform(0, a2, a3, a4);
  return static Update.dispatchImmediately<A>(_:)();
}

uint64_t ItemNavigationLinkModifier.item.getter()
{
  uint64_t v0;

  type metadata accessor for Optional();
  v0 = type metadata accessor for Binding();
  return MEMORY[0x18D75B9C8](v0);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LegacyBaseModifier<A>@<D0>(uint64_t a1@<X3>, uint64_t a2@<X4>, double *a3@<X8>)
{
  return static LegacyBaseModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LegacyBaseModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static LegacyBaseModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t ItemNavigationLinkModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD v16[2];
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22[16];
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  ItemNavigationLinkModifier.base(_:)(a1, a2);
  strcpy(v22, "navigationLink");
  v22[15] = -18;
  v5 = Namespace.wrappedValue.getter();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemNavigationLinkModifier<A, B>, a2);
  v6 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>, (uint64_t)&type metadata for NavigationDestinationsKey, (uint64_t)&protocol witness table for NavigationDestinationsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v7 = type metadata accessor for ModifiedContent();
  v21[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v6);
  v21[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v8 = MEMORY[0x1E0CE2E70];
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v21);
  v10 = MEMORY[0x1E0DEA968];
  v11 = MEMORY[0x1E0DEA978];
  View.accessibilityLinkedGroup<A>(id:in:)((uint64_t)v22, v5, v7, MEMORY[0x1E0DEA968], v9);
  swift_release();
  v16[0] = v23;
  v16[1] = v24;
  v17 = v25;
  v18 = v26;
  v19 = v27;
  v20 = v28;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for RelationshipModifier<String>, v10, v11, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RelationshipModifier);
  v12 = type metadata accessor for ModifiedContent();
  v15[0] = v9;
  v15[1] = &protocol witness table for RelationshipModifier<A>;
  v13 = MEMORY[0x18D75FFDC](v8, v12, v15);
  static ViewBuilder.buildExpression<A>(_:)(v16, v12, v13);
  swift_bridgeObjectRelease();
  swift_release();
  v23 = v29;
  v24 = v30;
  v25 = v31;
  v26 = v32;
  v27 = v33;
  v28 = v34;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v23, v12, a3);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t ItemNavigationLinkModifier.base(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a2, v6);
  v7 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = swift_allocObject();
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 32) = v9;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemNavigationLinkModifier<A, B>, a2);
  v10 = type metadata accessor for _ViewModifier_Content();
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v10);
  View.transactionalPreferenceTransform<A>(key:transform:)((uint64_t)&type metadata for NavigationDestinationsKey, (uint64_t)partial apply for closure #1 in ItemNavigationLinkModifier.base(_:), v8, v10, (uint64_t)&type metadata for NavigationDestinationsKey, v11, (uint64_t)&protocol witness table for NavigationDestinationsKey);
  return swift_release();
}

void closure #1 in ItemNavigationLinkModifier.base(_:)()
{
  type metadata accessor for ItemNavigationLinkModifier();
}

uint64_t sub_1875138B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  void (*v23)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[80];

  *(_QWORD *)(v5 - 264) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v5 - 272) = &v32[-v7];
  *(_QWORD *)(v5 - 248) = v2;
  MEMORY[0x1E0C80A78](v8, v9);
  *(_QWORD *)(v5 - 232) = &v32[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = &v32[-v14];
  v16 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = &v32[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  ItemNavigationLinkModifier.item.getter();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v3) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v15, v11);
    v21 = Namespace.wrappedValue.getter();
    *(_QWORD *)(v5 - 184) = Namespace.wrappedValue.getter();
    *(_QWORD *)(v5 - 176) = *(_QWORD *)(v5 - 224);
    *(_BYTE *)(v5 - 96) = 1;
    swift_retain();
    return specialized Dictionary.subscript.setter(v5 - 184, v21);
  }
  else
  {
    v23 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 32);
    *(_QWORD *)(v5 - 288) = v20;
    v23(v20, v15, v3);
    *(_QWORD *)(v5 - 280) = Namespace.wrappedValue.getter();
    *(_QWORD *)(v5 - 296) = Namespace.wrappedValue.getter();
    (*(void (**)(_BYTE *))(v4 + *(int *)(a1 + 56)))(v20);
    *(_OWORD *)(v5 - 208) = xmmword_187BFE310;
    v24 = *(_QWORD *)(v5 - 264);
    v25 = *(_QWORD *)(v5 - 272);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v25, v4, a1);
    v26 = (*(unsigned __int8 *)(v24 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    v27 = (char *)swift_allocObject();
    v28 = *(_QWORD *)(v5 - 256);
    v29 = *(_QWORD *)(v5 - 248);
    *((_QWORD *)v27 + 2) = v3;
    *((_QWORD *)v27 + 3) = v29;
    v30 = *(_QWORD *)(v5 - 240);
    *((_QWORD *)v27 + 4) = v28;
    *((_QWORD *)v27 + 5) = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(&v27[v26], v25, a1);
    v31 = *(_QWORD *)(v5 - 224);
    swift_retain();
    *(_BYTE *)(v5 - 184) = 1;
    NavigationDestinationContent.init<A>(id:content:isDetail:transaction:environment:updateSeed:onDismiss:)(*(_QWORD *)(v5 - 296), *(_QWORD *)(v5 - 232), 1, v31, (uint64_t *)(v5 - 208), (uint64_t)partial apply for closure #1 in closure #1 in ItemNavigationLinkModifier.base(_:), (uint64_t)v27, v5 - 184, v29, v30);
    *(_BYTE *)(v5 - 96) = 0;
    specialized Dictionary.subscript.setter(v5 - 184, *(_QWORD *)(v5 - 280));
    return (*(uint64_t (**)(_QWORD, uint64_t))(v16 + 8))(*(_QWORD *)(v5 - 288), v3);
  }
}

void closure #1 in closure #1 in ItemNavigationLinkModifier.base(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _QWORD v13[4];

  v9 = type metadata accessor for Optional();
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 56))((char *)v13 - v12, 1, 1, a2, v11);
  v13[0] = a2;
  v13[1] = a3;
  v13[2] = a4;
  v13[3] = a5;
  type metadata accessor for ItemNavigationLinkModifier();
}

uint64_t sub_187513C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  specialized ItemNavigationLinkModifier.item.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t partial apply for closure #1 in static NavigationLinkModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static NavigationLinkModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t type metadata accessor for InternalNavigationLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InternalNavigationLinkModifier);
}

uint64_t type metadata accessor for InternalModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InternalModifier);
}

uint64_t partial apply for closure #1 in static NavigationLinkModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static NavigationLinkModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

void partial apply for closure #1 in ItemNavigationLinkModifier.base(_:)()
{
  type metadata accessor for ItemNavigationLinkModifier();
}

void sub_187513CF0()
{
  closure #1 in ItemNavigationLinkModifier.base(_:)();
}

void partial apply for closure #1 in closure #1 in ItemNavigationLinkModifier.base(_:)()
{
  type metadata accessor for ItemNavigationLinkModifier();
}

void sub_187513D70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  closure #1 in closure #1 in ItemNavigationLinkModifier.base(_:)(v2 + ((v6 + 48) & ~v6), v1, v3, v4, v5);
}

uint64_t specialized ItemNavigationLinkModifier.item.setter()
{
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  return specialized Binding.wrappedValue.setter();
}

uint64_t type metadata completion function for InternalNavigationLinkModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for InternalNavigationLinkModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  char v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v31;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((((v7 + ((v6 + 66) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 49 > 0x18)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    *a1 = *a2;
    v11 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
    v12 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
    v13 = *(unsigned __int8 *)(v12 + 17);
    if (v13 >= 2)
      v13 = *(_DWORD *)v12 + 2;
    v31 = v4;
    if (v13 == 1)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
      *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
      swift_retain();
      v14 = 1;
    }
    else
    {
      v14 = 0;
      *(_BYTE *)v11 = *(_BYTE *)v12;
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
    }
    swift_retain();
    *(_BYTE *)(v11 + 17) = v14;
    v15 = (v12 + 25) & 0xFFFFFFFFFFFFFFF8;
    v16 = *(unsigned __int8 *)(v15 + 20);
    if (v16 >= 2)
      v16 = *(_DWORD *)v15 + 2;
    v17 = ~v6;
    v18 = (v11 + 25) & 0xFFFFFFFFFFFFFFF8;
    if (v16 == 1)
    {
      *(_QWORD *)v18 = *(_QWORD *)v15;
      *(_QWORD *)(v18 + 8) = *(_QWORD *)(v15 + 8);
      *(_DWORD *)(v18 + 16) = *(_DWORD *)(v15 + 16);
      swift_retain();
      v19 = 1;
    }
    else
    {
      v19 = 0;
      *(_DWORD *)v18 = *(_DWORD *)v15;
      *(_QWORD *)(v18 + 8) = *(_QWORD *)(v15 + 8);
    }
    swift_retain();
    *(_BYTE *)(v18 + 20) = v19;
    v20 = (v11 + 53) & 0xFFFFFFFFFFFFFFF8;
    v21 = (v12 + 53) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_QWORD *)v21;
    v23 = *(_BYTE *)(v21 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v21, v23);
    *(_QWORD *)v20 = v22;
    *(_BYTE *)(v20 + 8) = v23;
    *(_BYTE *)(v20 + 9) = *(_BYTE *)(v21 + 9);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((v20 + v6 + 10) & v17, (v21 + v6 + 10) & v17, v31);
    v24 = (v7 + ((v20 + v6 + 10) & v17)) & 0xFFFFFFFFFFFFFFF8;
    v25 = (v7 + ((v21 + v6 + 10) & v17)) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
    *(_BYTE *)(v24 + 9) = *(_BYTE *)(v25 + 9);
    v26 = (v24 + 17) & 0xFFFFFFFFFFFFFFF8;
    v27 = (v25 + 17) & 0xFFFFFFFFFFFFFFF8;
    v28 = *(_OWORD *)v27;
    v29 = *(_OWORD *)(v27 + 32);
    *(_OWORD *)(v26 + 16) = *(_OWORD *)(v27 + 16);
    *(_OWORD *)(v26 + 32) = v29;
    *(_OWORD *)v26 = v28;
    *(_BYTE *)(v26 + 48) = *(_BYTE *)(v27 + 48);
  }
  swift_retain();
  return v3;
}

uint64_t destroy for InternalNavigationLinkModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;

  v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(unsigned __int8 *)(v3 + 17);
  if (v4 >= 2)
    v4 = *(_DWORD *)v3 + 2;
  if (v4 == 1)
    swift_release();
  swift_release();
  v5 = (v3 + 25) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(unsigned __int8 *)(v5 + 20);
  if (v6 >= 2)
    v6 = *(_DWORD *)v5 + 2;
  if (v6 == 1)
    swift_release();
  swift_release();
  v7 = (v3 + 53) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)v7, *(unsigned __int8 *)(v7 + 8));
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v7
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 10) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_release();
}

_QWORD *initializeWithCopy for InternalNavigationLinkModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;

  *a1 = *a2;
  v5 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(unsigned __int8 *)(v6 + 17);
  if (v7 >= 2)
    v7 = *(_DWORD *)v6 + 2;
  if (v7 == 1)
  {
    *(_QWORD *)v5 = *(_QWORD *)v6;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v6 + 8);
    *(_BYTE *)(v5 + 16) = *(_BYTE *)(v6 + 16);
    swift_retain();
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)v5 = *(_BYTE *)v6;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v6 + 8);
  }
  swift_retain();
  *(_BYTE *)(v5 + 17) = v8;
  v9 = (v6 + 25) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(unsigned __int8 *)(v9 + 20);
  if (v10 >= 2)
    v10 = *(_DWORD *)v9 + 2;
  v11 = (v5 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (v10 == 1)
  {
    *(_QWORD *)v11 = *(_QWORD *)v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
    *(_DWORD *)(v11 + 16) = *(_DWORD *)(v9 + 16);
    swift_retain();
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_DWORD *)v11 = *(_DWORD *)v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
  }
  swift_retain();
  *(_BYTE *)(v11 + 20) = v12;
  v13 = (v5 + 53) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v6 + 53) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  v16 = *(_BYTE *)(v14 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v14, v16);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 8) = v16;
  *(_BYTE *)(v13 + 9) = *(_BYTE *)(v14 + 9);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 + 10 + v13) & ~v18;
  v20 = (v18 + 10 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v19, v20);
  v21 = *(_QWORD *)(v17 + 64) + 7;
  v22 = (v21 + v19) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v21 + v20) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_BYTE *)(v22 + 9) = *(_BYTE *)(v23 + 9);
  v24 = (v22 + 17) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v23 + 17) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_OWORD *)(v25 + 32);
  v27 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = *(_OWORD *)(v25 + 16);
  *(_OWORD *)(v24 + 32) = v26;
  *(_OWORD *)v24 = v27;
  *(_BYTE *)(v24 + 48) = *(_BYTE *)(v25 + 48);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for InternalNavigationLinkModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;

  *a1 = *a2;
  v5 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v5 != v6)
  {
    v7 = *(unsigned __int8 *)(v5 + 17);
    if (v7 >= 2)
      v7 = *(_DWORD *)v5 + 2;
    if (v7 == 1)
      swift_release();
    swift_release();
    v8 = *(unsigned __int8 *)(v6 + 17);
    if (v8 >= 2)
      v8 = *(_DWORD *)v6 + 2;
    if (v8 == 1)
    {
      *(_QWORD *)v5 = *(_QWORD *)v6;
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(v6 + 8);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(v6 + 16);
      *(_BYTE *)(v5 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)v5 = *(_BYTE *)v6;
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(v6 + 8);
      *(_BYTE *)(v5 + 17) = 0;
    }
    swift_retain();
  }
  v9 = (v5 + 25) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v6 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != v10)
  {
    v11 = *(unsigned __int8 *)(v9 + 20);
    if (v11 >= 2)
      v11 = *(_DWORD *)v9 + 2;
    if (v11 == 1)
      swift_release();
    swift_release();
    v12 = *(unsigned __int8 *)(v10 + 20);
    if (v12 >= 2)
      v12 = *(_DWORD *)v10 + 2;
    if (v12 == 1)
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
      *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 + 16);
      *(_BYTE *)(v9 + 20) = 1;
      swift_retain();
    }
    else
    {
      *(_DWORD *)v9 = *(_DWORD *)v10;
      *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
      *(_BYTE *)(v9 + 20) = 0;
    }
    swift_retain();
  }
  v13 = (v5 + 53) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v6 + 53) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  v16 = *(_BYTE *)(v14 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = *(unsigned __int8 *)(v13 + 8);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 8) = v16;
  outlined consume of Environment<ControlSize>.Content(v17, v18);
  *(_BYTE *)(v13 + 9) = *(_BYTE *)(v14 + 9);
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 + 10 + v13) & ~v20;
  v22 = (v20 + 10 + v14) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v21, v22);
  v23 = *(_QWORD *)(v19 + 64) + 7;
  v24 = (v23 + v21) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v23 + v22) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  swift_retain();
  swift_release();
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_BYTE *)(v24 + 9) = *(_BYTE *)(v25 + 9);
  v26 = (v24 + 17) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v25 + 17) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_OWORD *)v27;
  v29 = *(_OWORD *)(v27 + 32);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)(v27 + 16);
  *(_OWORD *)(v26 + 32) = v29;
  *(_OWORD *)v26 = v28;
  *(_BYTE *)(v26 + 48) = *(_BYTE *)(v27 + 48);
  return a1;
}

_QWORD *initializeWithTake for InternalNavigationLinkModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  __int128 v7;
  char v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;

  *a1 = *a2;
  v4 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(unsigned __int8 *)(v5 + 17);
  if (v6 >= 2)
    v6 = *(_DWORD *)v5 + 2;
  if (v6 == 1)
  {
    v7 = *(_OWORD *)v5;
    *(_BYTE *)(v4 + 16) = *(_BYTE *)(v5 + 16);
    *(_OWORD *)v4 = v7;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_OWORD *)v4 = *(_OWORD *)v5;
  }
  *(_BYTE *)(v4 + 17) = v8;
  v9 = (v5 + 25) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(unsigned __int8 *)(v9 + 20);
  if (v10 >= 2)
    v10 = *(_DWORD *)v9 + 2;
  v11 = (v4 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (v10 == 1)
  {
    v12 = *(_OWORD *)v9;
    *(_DWORD *)(v11 + 16) = *(_DWORD *)(v9 + 16);
  }
  else
  {
    LOBYTE(v10) = 0;
    v12 = *(_OWORD *)v9;
  }
  *(_OWORD *)v11 = v12;
  *(_BYTE *)(v11 + 20) = v10;
  v13 = (v4 + 53) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v5 + 53) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 9) = *(_BYTE *)(v14 + 9);
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v17 + 10 + v13) & ~v17;
  v19 = (v17 + 10 + v14) & ~v17;
  (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v18, v19);
  v20 = *(_QWORD *)(v16 + 64) + 7;
  v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  *(_BYTE *)(v21 + 9) = *(_BYTE *)(v22 + 9);
  v23 = (v21 + 17) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v22 + 17) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_OWORD *)(v24 + 32);
  v26 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = *(_OWORD *)(v24 + 16);
  *(_OWORD *)(v23 + 32) = v25;
  *(_OWORD *)v23 = v26;
  *(_BYTE *)(v23 + 48) = *(_BYTE *)(v24 + 48);
  return a1;
}

_QWORD *assignWithTake for InternalNavigationLinkModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  __int128 v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  __int128 v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;

  *a1 = *a2;
  v5 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v5 != v6)
  {
    v7 = *(unsigned __int8 *)(v5 + 17);
    if (v7 >= 2)
      v7 = *(_DWORD *)v5 + 2;
    if (v7 == 1)
      swift_release();
    swift_release();
    v8 = *(unsigned __int8 *)(v6 + 17);
    if (v8 >= 2)
      v8 = *(_DWORD *)v6 + 2;
    if (v8 == 1)
    {
      v9 = *(_OWORD *)v6;
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(v6 + 16);
      *(_OWORD *)v5 = v9;
      v10 = 1;
    }
    else
    {
      v10 = 0;
      *(_OWORD *)v5 = *(_OWORD *)v6;
    }
    *(_BYTE *)(v5 + 17) = v10;
  }
  v11 = (v5 + 25) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v6 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (v11 != v12)
  {
    v13 = *(unsigned __int8 *)(v11 + 20);
    if (v13 >= 2)
      v13 = *(_DWORD *)v11 + 2;
    if (v13 == 1)
      swift_release();
    swift_release();
    v14 = *(unsigned __int8 *)(v12 + 20);
    if (v14 >= 2)
      v14 = *(_DWORD *)v12 + 2;
    if (v14 == 1)
    {
      v15 = *(_OWORD *)v12;
      *(_DWORD *)(v11 + 16) = *(_DWORD *)(v12 + 16);
      *(_OWORD *)v11 = v15;
      v16 = 1;
    }
    else
    {
      v16 = 0;
      *(_OWORD *)v11 = *(_OWORD *)v12;
    }
    *(_BYTE *)(v11 + 20) = v16;
  }
  v17 = (v5 + 53) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v6 + 53) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_BYTE *)(v18 + 8);
  v20 = *(_QWORD *)v17;
  v21 = *(unsigned __int8 *)(v17 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = v19;
  outlined consume of Environment<ControlSize>.Content(v20, v21);
  *(_BYTE *)(v17 + 9) = *(_BYTE *)(v18 + 9);
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (v23 + 10 + v17) & ~v23;
  v25 = (v23 + 10 + v18) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v22 + 40))(v24, v25);
  v26 = *(_QWORD *)(v22 + 64) + 7;
  v27 = (v26 + v24) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v26 + v25) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  swift_release();
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  *(_BYTE *)(v27 + 9) = *(_BYTE *)(v28 + 9);
  v29 = (v27 + 17) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v28 + 17) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(_OWORD *)v30;
  v32 = *(_OWORD *)(v30 + 32);
  *(_OWORD *)(v29 + 16) = *(_OWORD *)(v30 + 16);
  *(_OWORD *)(v29 + 32) = v32;
  *(_OWORD *)v29 = v31;
  *(_BYTE *)(v29 + 48) = *(_BYTE *)(v30 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalNavigationLinkModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v15 = (((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 53) & 0xFFFFFFFFFFFFFFF8) + v7 + 10) & ~v7;
    if (v5 < 0x7FFFFFFE)
    {
      v16 = *(_QWORD *)((v8 + v15) & 0xFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      if ((v16 + 1) >= 2)
        return v16;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(v15);
    }
  }
  else
  {
    v9 = ((((v8 + ((v7 + 66) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 17) & 0xFFFFFFF8) + 49;
    v10 = (a2 - v6 + 255) >> (8 * v9);
    if (v9 < 4)
      v11 = v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187514A80 + 4 * byte_187C3B751[v13]))();
  }
}

void storeEnumTagSinglePayload for InternalNavigationLinkModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64)
         + 7
         + ((*(unsigned __int8 *)(v5 + 80) + 66) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & 0xFFFFFFFFFFFFFFF8)
       + 17) & 0xFFFFFFFFFFFFFFF8)
     + 49;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X14 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_187514C70()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187514D08);
}

void sub_187514C78(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187514C80);
  JUMPOUT(0x187514D08);
}

void sub_187514CDC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187514D08);
}

void sub_187514CE4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187514D08);
}

uint64_t sub_187514CEC@<X0>(unsigned int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a1)
    goto LABEL_6;
  v3 = (((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 53) & 0xFFFFFFFFFFFFFFF8) + v7 + 10) & a3;
  if (a2 < 0x7FFFFFFE)
  {
    if (a1 > 0x7FFFFFFE)
      JUMPOUT(0x187514CF8);
    *(_QWORD *)((v6 + v3) & 0xFFFFFFFFFFFFFFF8) = a1;
LABEL_6:
    JUMPOUT(0x187514D08);
  }
  return (*(uint64_t (**)(unint64_t))(v5 + 56))(v3);
}

uint64_t type metadata accessor for ShouldUseNavigationLinkV4Modifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShouldUseNavigationLinkV4Modifier);
}

void sub_187514D2C()
{
  type metadata accessor for ItemNavigationLinkModifier();
}

uint64_t sub_187514D54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[12];

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemNavigationLinkModifier<A, B>, a1);
  v1 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>, (uint64_t)&type metadata for NavigationDestinationsKey, (uint64_t)&protocol witness table for NavigationDestinationsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for RelationshipModifier<String>, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RelationshipModifier);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
  v7[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = &protocol witness table for RelationshipModifier<A>;
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in InternalNavigationLinkModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in InternalModifier<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined copy of StateOrBinding<Bool>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    swift_retain();
  return swift_retain();
}

uint64_t type metadata accessor for BaseModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BaseModifier);
}

{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BaseModifier);
}

uint64_t type metadata accessor for LegacyBaseModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LegacyBaseModifier);
}

unint64_t lazy protocol witness table accessor for type NavigationLinkTraitValueModifier and conformance NavigationLinkTraitValueModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationLinkTraitValueModifier and conformance NavigationLinkTraitValueModifier;
  if (!lazy protocol witness table cache variable for type NavigationLinkTraitValueModifier and conformance NavigationLinkTraitValueModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationLinkTraitValueModifier, &type metadata for NavigationLinkTraitValueModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationLinkTraitValueModifier and conformance NavigationLinkTraitValueModifier);
  }
  return result;
}

uint64_t type metadata completion function for LegacyBaseModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LegacyBaseModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((((v6 + ((v5 + 8) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 10 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    *a1 = *a2;
    v10 = ((unint64_t)a1 + v5 + 8) & ~v5;
    v11 = ((unint64_t)a2 + v5 + 8) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    v12 = (_QWORD *)((v6 + v10) & 0xFFFFFFFFFFFFFFF8);
    v13 = (uint64_t *)((v6 + v11) & 0xFFFFFFFFFFFFFFF8);
    LODWORD(v14) = -1;
    if ((unint64_t)*v13 < 0xFFFFFFFF)
      v14 = *v13;
    if ((int)v14 - 1 < 0)
    {
      *v12 = *v13;
      v12[1] = v13[1];
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
    }
    v15 = ((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8;
    v16 = ((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8;
    v17 = *(_DWORD *)v16;
    *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
    *(_DWORD *)v15 = v17;
    *(_BYTE *)(v15 + 5) = *(_BYTE *)(v16 + 5);
    *(_BYTE *)(v15 + 6) = *(_BYTE *)(v16 + 6);
    v18 = ((unint64_t)v12 + 19) | 7;
    v19 = ((unint64_t)v13 + 19) | 7;
    v20 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    v21 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
    *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
    v22 = (v18 + 31) & 0xFFFFFFFFFFFFFFF8;
    v23 = (v19 + 31) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
    *(_BYTE *)(v22 + 9) = *(_BYTE *)(v23 + 9);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v3;
}

_QWORD *initializeWithCopy for LegacyBaseModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  v10 = *(_QWORD *)(v4 + 64) + 7;
  v8 = (_QWORD *)((v10 + v6) & 0xFFFFFFFFFFFFFFF8);
  v9 = (uint64_t *)((v10 + v7) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v10) = -1;
  if ((unint64_t)*v9 < 0xFFFFFFFF)
    v10 = *v9;
  if ((int)v10 - 1 < 0)
  {
    *v8 = *v9;
    v8[1] = v9[1];
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  v11 = ((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v9 + 19) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  *(_DWORD *)v11 = v13;
  *(_BYTE *)(v11 + 5) = *(_BYTE *)(v12 + 5);
  *(_BYTE *)(v11 + 6) = *(_BYTE *)(v12 + 6);
  v14 = ((unint64_t)v8 + 19) | 7;
  v15 = ((unint64_t)v9 + 19) | 7;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v18 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_BYTE *)(v18 + 9) = *(_BYTE *)(v19 + 9);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for LegacyBaseModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v10 = *(_QWORD *)(v4 + 64) + 7;
  v8 = (uint64_t *)((v10 + v6) & 0xFFFFFFFFFFFFFFF8);
  v9 = (uint64_t *)((v10 + v7) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v10) = -1;
  if ((unint64_t)*v8 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  else
    v11 = *v8;
  v12 = v11 - 1;
  v13 = *v9;
  if ((unint64_t)*v9 < 0xFFFFFFFF)
    v10 = *v9;
  v14 = v10 - 1;
  if (v12 < 0)
  {
    if (v14 < 0)
    {
      *v8 = v13;
      swift_retain();
      swift_release();
      v8[1] = v9[1];
      swift_retain();
      swift_release();
      goto LABEL_12;
    }
    swift_release();
    swift_release();
    goto LABEL_11;
  }
  if ((v14 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_12;
  }
  *v8 = v13;
  v8[1] = v9[1];
  swift_retain();
  swift_retain();
LABEL_12:
  v15 = ((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFFFF8;
  v16 = (unint64_t)v9 + 19;
  v17 = ((unint64_t)v9 + 19) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_DWORD *)v17;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v15 = v18;
  *(_BYTE *)(v15 + 5) = *(_BYTE *)(v17 + 5);
  *(_BYTE *)(v15 + 6) = *(_BYTE *)(v17 + 6);
  v19 = ((unint64_t)v8 + 19) | 7;
  v20 = v16 | 7;
  v21 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((v16 | 7) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  swift_retain();
  swift_release();
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  v23 = (v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  swift_retain();
  swift_release();
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_BYTE *)(v23 + 9) = *(_BYTE *)(v24 + 9);
  return a1;
}

_QWORD *initializeWithTake for LegacyBaseModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_OWORD *)v10;
  v10 += 19;
  *(_OWORD *)v9 = v11;
  v9 += 19;
  v12 = v9 & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_DWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v12 + 4) = *(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)v12 = v13;
  *(_BYTE *)(v12 + 5) = *(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFF8) + 5);
  *(_BYTE *)(v12 + 6) = *(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFF8) + 6);
  v9 |= 7uLL;
  v10 |= 7uLL;
  v14 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_OWORD *)v15;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  *(_OWORD *)v14 = v16;
  v17 = (v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_BYTE *)(v17 + 9) = *(_BYTE *)(v18 + 9);
  return a1;
}

_QWORD *assignWithTake for LegacyBaseModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  v10 = *(_QWORD *)(v4 + 64) + 7;
  v8 = (uint64_t *)((v10 + v6) & 0xFFFFFFFFFFFFFFF8);
  v9 = (uint64_t *)((v10 + v7) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v10) = -1;
  if ((unint64_t)*v8 < 0xFFFFFFFF)
    v10 = *v8;
  if ((int)v10 - 1 < 0)
  {
    LODWORD(v11) = -1;
    if ((unint64_t)*v9 < 0xFFFFFFFF)
      v11 = *v9;
    if ((int)v11 - 1 < 0)
    {
      *v8 = *v9;
      swift_release();
      v8[1] = v9[1];
      swift_release();
      goto LABEL_9;
    }
    swift_release();
    swift_release();
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
LABEL_9:
  v12 = ((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)v9 + 19) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = v14;
  *(_BYTE *)(v12 + 5) = *(_BYTE *)(v13 + 5);
  *(_BYTE *)(v12 + 6) = *(_BYTE *)(v13 + 6);
  v15 = ((unint64_t)v8 + 19) | 7;
  v16 = ((unint64_t)v9 + 19) | 7;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  swift_release();
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
  swift_release();
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  v19 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  swift_release();
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_BYTE *)(v19 + 9) = *(_BYTE *)(v20 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyBaseModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v15 = (a1 + v7 + 8) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v16 = *(_QWORD *)(((((((v8 + v15) & 0xFFFFFFFFFFFFF8) + 19) | 7) + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v15);
    }
  }
  else
  {
    v9 = ((((((v8 + ((v7 + 8) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFF8) + 10;
    v10 = (a2 - v6 + 0xFFFF) >> (8 * v9);
    if (v9 <= 3)
      v11 = v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1875157D8 + 4 * byte_187C3B760[v13]))();
  }
}

void storeEnumTagSinglePayload for LegacyBaseModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ((((((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8)
     + 10;
  if (v6 >= a3)
  {
    v11 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v6 + 0xFFFF) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X14 }
  }
  v12 = ~v6 + a2;
  bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8)+ 10);
  if (v8 > 3)
    *a1 = v12;
  else
    *(_WORD *)a1 = v12;
  __asm { BR              X11 }
}

void sub_1875159BC(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x187515A4CLL);
}

void sub_1875159C4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1875159CCLL);
  JUMPOUT(0x187515A4CLL);
}

void sub_187515A24(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x187515A4CLL);
}

void sub_187515A2C(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x187515A4CLL);
}

uint64_t sub_187515A34@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a1)
    goto LABEL_6;
  v3 = (v8 + v7 + 8) & a3;
  if (a2 < 0x7FFFFFFF)
  {
    if (a1 < 0)
      JUMPOUT(0x187515A40);
    *(_QWORD *)(((((((v6 + v3) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a1 - 1);
LABEL_6:
    JUMPOUT(0x187515A4CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v3);
}

uint64_t type metadata completion function for BaseModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BaseModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  char v15;
  unint64_t v16;
  unint64_t v17;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 10 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v11 = *v10;
    v12 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    v13 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    v14 = *(unsigned __int8 *)(v13 + 17);
    swift_retain();
    if (v14 >= 2)
      v14 = *(_DWORD *)v13 + 2;
    if (v14 == 1)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
      *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
      swift_retain();
      v15 = 1;
    }
    else
    {
      v15 = 0;
      *(_BYTE *)v12 = *(_BYTE *)v13;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
    }
    swift_retain();
    *(_BYTE *)(v12 + 17) = v15;
    v16 = (v12 + 25) & 0xFFFFFFFFFFFFFFF8;
    v17 = (v13 + 25) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
    *(_BYTE *)(v16 + 9) = *(_BYTE *)(v17 + 9);
  }
  return v4;
}

uint64_t destroy for BaseModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = ((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(unsigned __int8 *)(v5 + 17);
  if (v6 >= 2)
    v6 = *(_DWORD *)v5 + 2;
  if (v6 == 1)
    swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for BaseModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unint64_t v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *v8;
  v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(unsigned __int8 *)(v10 + 17);
  swift_retain();
  if (v11 >= 2)
    v11 = *(_DWORD *)v10 + 2;
  if (v11 == 1)
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
    *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
    swift_retain();
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)v9 = *(_BYTE *)v10;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  }
  swift_retain();
  *(_BYTE *)(v9 + 17) = v12;
  v13 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_BYTE *)(v13 + 9) = *(_BYTE *)(v14 + 9);
  return a1;
}

uint64_t assignWithCopy for BaseModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v10 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (v10 != (v9 & 0xFFFFFFFFFFFFFFF8))
  {
    v12 = *(unsigned __int8 *)(v10 + 17);
    if (v12 >= 2)
      v12 = *(_DWORD *)v10 + 2;
    if (v12 == 1)
      swift_release();
    swift_release();
    v13 = *(unsigned __int8 *)(v11 + 17);
    if (v13 >= 2)
      v13 = *(_DWORD *)v11 + 2;
    if (v13 == 1)
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
      *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
      *(_BYTE *)(v10 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)v10 = *(_BYTE *)v11;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
      *(_BYTE *)(v10 + 17) = 0;
    }
    swift_retain();
  }
  v14 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v11 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_BYTE *)(v14 + 9) = *(_BYTE *)(v15 + 9);
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_retain();
  swift_release();
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)((v7 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for BaseModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  __int128 v12;
  char v13;
  unint64_t v14;
  unint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(unsigned __int8 *)(v10 + 17);
  if (v11 >= 2)
    v11 = *(_DWORD *)v10 + 2;
  if (v11 == 1)
  {
    v12 = *(_OWORD *)v10;
    *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
    *(_OWORD *)v9 = v12;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    *(_OWORD *)v9 = *(_OWORD *)v10;
  }
  *(_BYTE *)(v9 + 17) = v13;
  v14 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_BYTE *)(v14 + 9) = *(_BYTE *)(v15 + 9);
  return a1;
}

uint64_t assignWithTake for BaseModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  char v14;
  unint64_t v15;
  unint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != v10)
  {
    v11 = *(unsigned __int8 *)(v9 + 17);
    if (v11 >= 2)
      v11 = *(_DWORD *)v9 + 2;
    if (v11 == 1)
      swift_release();
    swift_release();
    v12 = *(unsigned __int8 *)(v10 + 17);
    if (v12 >= 2)
      v12 = *(_DWORD *)v10 + 2;
    if (v12 == 1)
    {
      v13 = *(_OWORD *)v10;
      *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
      *(_OWORD *)v9 = v13;
      v14 = 1;
    }
    else
    {
      v14 = 0;
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    *(_BYTE *)(v9 + 17) = v14;
  }
  v15 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(v15 + 9) = *(_BYTE *)(v16 + 9);
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_release();
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  swift_release();
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)((v7 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BaseModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v14 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((v14 + 1) >= 2)
        return v14;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((((((v7 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 25) & 0xFFFFFFF8) + 10;
    v9 = (a2 - v6 + 0xFFFF) >> (8 * v8);
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187516190 + 4 * byte_187C3B76F[v12]))();
  }
}

{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187B63D54 + 4 * byte_187C9521F[v10]))();
  }
}

void storeEnumTagSinglePayload for BaseModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8)
     + 10;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 0xFFFF) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  v11 = ~v6 + a2;
  bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8)+ 10);
  if (v7 > 3)
    *a1 = v11;
  else
    *(_WORD *)a1 = v11;
  __asm { BR              X11 }
}

{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 31) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 31) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 31) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18751634C(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x1875163D0);
}

void sub_187516354(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18751635CLL);
  JUMPOUT(0x1875163D0);
}

void sub_1875163A4(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x1875163D0);
}

void sub_1875163AC(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x1875163D0);
}

uint64_t sub_1875163B4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x1875163C0);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x1875163D0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

void sub_1875163E8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ShouldUseNavigationLinkV4Modifier;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for InternalNavigationLinkModifier(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InternalNavigationLinkModifier<A>, v6);
  type metadata accessor for _ViewModifier_Content();
  ShouldUseNavigationLinkV4Modifier = type metadata accessor for ShouldUseNavigationLinkV4Modifier(255, v4, v7, v8);
  type metadata accessor for BaseModifier(255, v4, v5, v9);
  type metadata accessor for LegacyBaseModifier(255, v4, v5, v10);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldUseNavigationLinkV4Modifier<A>, ShouldUseNavigationLinkV4Modifier);
  type metadata accessor for StaticIf();
}

uint64_t sub_187516498(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[14];

  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for RelationshipModifier<String>, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RelationshipModifier);
  v5 = type metadata accessor for ModifiedContent();
  v11[0] = &protocol witness table for BaseModifier<A>;
  v11[1] = &protocol witness table for LegacyBaseModifier<A>;
  v10[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
  v10[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v11);
  v6 = MEMORY[0x1E0CE2E70];
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v10);
  v9[1] = lazy protocol witness table accessor for type NavigationLinkTraitValueModifier and conformance NavigationLinkTraitValueModifier();
  v8[0] = MEMORY[0x18D75FFDC](v6, v4, v9);
  v8[1] = &protocol witness table for RelationshipModifier<A>;
  return MEMORY[0x18D75FFDC](v6, v5, v8);
}

_UNKNOWN **base witness table accessor for ViewModifier in BaseModifier<A>()
{
  return &protocol witness table for BaseModifier<A>;
}

{
  return &protocol witness table for BaseModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in LegacyBaseModifier<A>()
{
  return &protocol witness table for LegacyBaseModifier<A>;
}

uint64_t type metadata accessor for BaseModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BaseModifier.Transform);
}

{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BaseModifier.Transform);
}

uint64_t type metadata accessor for BaseModifier.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BaseModifier.Child);
}

{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BaseModifier.Child);
}

uint64_t partial apply for closure #1 in static LegacyBaseModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t partial apply for closure #2 in static LegacyBaseModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t partial apply for closure #3 in static LegacyBaseModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t type metadata accessor for LegacyBaseModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LegacyBaseModifier.Transform);
}

uint64_t type metadata accessor for LegacyBaseModifier.Wrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LegacyBaseModifier.Wrapper);
}

uint64_t partial apply for closure #2 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t partial apply for closure #3 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:));
}

uint64_t type metadata completion function for LegacyBaseModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for LegacyBaseModifier(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for LegacyBaseModifier.Transform(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = (((((v7 + ((v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8;
  if (v6 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v8 + 11 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    v12 = v8 + 10;
    *a1 = *a2;
    v13 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v14 = ((unint64_t)a2 + v6 + 8) & ~v6;
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v13, v14);
    v15 = (_QWORD *)((v7 + v13) & 0xFFFFFFFFFFFFFFF8);
    v16 = (uint64_t *)((v7 + v14) & 0xFFFFFFFFFFFFFFF8);
    LODWORD(v17) = -1;
    if ((unint64_t)*v16 < 0xFFFFFFFF)
      v17 = *v16;
    if ((int)v17 - 1 < 0)
    {
      *v15 = *v16;
      v15[1] = v16[1];
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
    }
    v18 = ((unint64_t)v15 + 19) & 0xFFFFFFFFFFFFFFF8;
    v19 = ((unint64_t)v16 + 19) & 0xFFFFFFFFFFFFFFF8;
    v20 = *(_DWORD *)v19;
    *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
    *(_DWORD *)v18 = v20;
    *(_BYTE *)(v18 + 5) = *(_BYTE *)(v19 + 5);
    *(_BYTE *)(v18 + 6) = *(_BYTE *)(v19 + 6);
    v21 = ((unint64_t)v15 + 19) | 7;
    v22 = ((unint64_t)v16 + 19) | 7;
    v23 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
    *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
    v25 = (v21 + 31) & 0xFFFFFFFFFFFFFFF8;
    v26 = (v22 + 31) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
    *(_BYTE *)(v25 + 9) = *(_BYTE *)(v26 + 9);
    *((_BYTE *)v4 + v12) = *((_BYTE *)a2 + v12);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for LegacyBaseModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = (a1 + *(unsigned __int8 *)(v2 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v3);
  v4 = (uint64_t *)((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v5) = -1;
  if ((unint64_t)*v4 < 0xFFFFFFFF)
    v5 = *v4;
  if ((int)v5 - 1 < 0)
  {
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for LegacyBaseModifier.Transform(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = v6 + 8;
  v8 = ~v6;
  v9 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v10 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v9, v10);
  v11 = *(_QWORD *)(v5 + 64) + 7;
  v12 = (_QWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (uint64_t *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v14) = -1;
  if ((unint64_t)*v13 < 0xFFFFFFFF)
    v14 = *v13;
  if ((int)v14 - 1 < 0)
  {
    *v12 = *v13;
    v12[1] = v13[1];
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
  }
  v15 = ((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  *(_DWORD *)v15 = v17;
  *(_BYTE *)(v15 + 5) = *(_BYTE *)(v16 + 5);
  *(_BYTE *)(v15 + 6) = *(_BYTE *)(v16 + 6);
  v18 = ((unint64_t)v12 + 19) | 7;
  v19 = ((unint64_t)v13 + 19) | 7;
  v20 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
  v22 = (v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_BYTE *)(v22 + 9) = *(_BYTE *)(v23 + 9);
  v24 = ((((((v11 + (v7 & v8)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 10;
  *((_BYTE *)a1 + v24) = *((_BYTE *)a2 + v24);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for LegacyBaseModifier.Transform(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = v6 + 8;
  v8 = ~v6;
  v9 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v10 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v9, v10);
  v11 = *(_QWORD *)(v5 + 64) + 7;
  v12 = (uint64_t *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (uint64_t *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v14) = -1;
  if ((unint64_t)*v12 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  else
    v15 = *v12;
  v16 = v15 - 1;
  v17 = *v13;
  if ((unint64_t)*v13 < 0xFFFFFFFF)
    v14 = *v13;
  v18 = v14 - 1;
  if (v16 < 0)
  {
    if (v18 < 0)
    {
      *v12 = v17;
      swift_retain();
      swift_release();
      v12[1] = v13[1];
      swift_retain();
      swift_release();
      goto LABEL_12;
    }
    swift_release();
    swift_release();
    goto LABEL_11;
  }
  if ((v18 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    goto LABEL_12;
  }
  *v12 = v17;
  v12[1] = v13[1];
  swift_retain();
  swift_retain();
LABEL_12:
  v19 = ((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8;
  v20 = (unint64_t)v13 + 19;
  v21 = ((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_DWORD *)v21;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v19 = v22;
  *(_BYTE *)(v19 + 5) = *(_BYTE *)(v21 + 5);
  *(_BYTE *)(v19 + 6) = *(_BYTE *)(v21 + 6);
  v23 = ((unint64_t)v12 + 19) | 7;
  v24 = v20 | 7;
  v25 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((v20 | 7) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  swift_retain();
  swift_release();
  *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v25 + 16) = *(_BYTE *)(v26 + 16);
  v27 = (v23 + 31) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v24 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  swift_retain();
  swift_release();
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  *(_BYTE *)(v27 + 9) = *(_BYTE *)(v28 + 9);
  v29 = ((((((v11 + (v7 & v8)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 10;
  *((_BYTE *)a1 + v29) = *((_BYTE *)a2 + v29);
  return a1;
}

_QWORD *initializeWithTake for LegacyBaseModifier.Transform(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64) + 7;
  v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)v11;
  v11 += 19;
  *(_OWORD *)v10 = v12;
  v10 += 19;
  v13 = v10 & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_DWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v13 + 4) = *(_BYTE *)((v11 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)v13 = v14;
  *(_BYTE *)(v13 + 5) = *(_BYTE *)((v11 & 0xFFFFFFFFFFFFFFF8) + 5);
  *(_BYTE *)(v13 + 6) = *(_BYTE *)((v11 & 0xFFFFFFFFFFFFFFF8) + 6);
  v10 |= 7uLL;
  v11 |= 7uLL;
  v15 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  *(_OWORD *)v15 = v17;
  v18 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_BYTE *)(v18 + 9) = *(_BYTE *)(v19 + 9);
  v20 = ((((((v9 + ((v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 10;
  *((_BYTE *)a1 + v20) = *((_BYTE *)a2 + v20);
  return a1;
}

_QWORD *assignWithTake for LegacyBaseModifier.Transform(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = v6 + 8;
  v8 = ~v6;
  v9 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v10 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v9, v10);
  v11 = *(_QWORD *)(v5 + 64) + 7;
  v12 = (uint64_t *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (uint64_t *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v14) = -1;
  if ((unint64_t)*v12 < 0xFFFFFFFF)
    v14 = *v12;
  if ((int)v14 - 1 < 0)
  {
    LODWORD(v15) = -1;
    if ((unint64_t)*v13 < 0xFFFFFFFF)
      v15 = *v13;
    if ((int)v15 - 1 < 0)
    {
      *v12 = *v13;
      swift_release();
      v12[1] = v13[1];
      swift_release();
      goto LABEL_9;
    }
    swift_release();
    swift_release();
  }
  *(_OWORD *)v12 = *(_OWORD *)v13;
LABEL_9:
  v16 = ((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = v18;
  *(_BYTE *)(v16 + 5) = *(_BYTE *)(v17 + 5);
  *(_BYTE *)(v16 + 6) = *(_BYTE *)(v17 + 6);
  v19 = ((unint64_t)v12 + 19) | 7;
  v20 = ((unint64_t)v13 + 19) | 7;
  v21 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  swift_release();
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
  swift_release();
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  v23 = (v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  swift_release();
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_BYTE *)(v23 + 9) = *(_BYTE *)(v24 + 9);
  v25 = ((((((v11 + (v7 & v8)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 10;
  *((_BYTE *)a1 + v25) = *((_BYTE *)a2 + v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyBaseModifier.Transform(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v14 = (a1 + v7 + 8) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v15 = *(_QWORD *)(((((((v8 + v14) & 0xFFFFFFFFFFFFF8) + 19) | 7) + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v14);
    }
  }
  else
  {
    v9 = (a2 - v6 + 0xFFFFFF) >> (8 * (((((((v8 + ((v7 + 8) & ~(_BYTE)v7)) & 0xF8) + 19) | 7) + 31) & 0xF8) + 11));
    if ((((((((_DWORD)v8 + (((_DWORD)v7 + 8) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1875170B0 + 4 * byte_187C3B77E[v12]))();
  }
}

void storeEnumTagSinglePayload for LegacyBaseModifier.Transform(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ((((((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8)
     + 11;
  if (v6 >= a3)
  {
    v11 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 8) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = ((a3 - v6 + 0xFFFFFF) >> 24) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X14 }
  }
  v12 = ~v6 + a2;
  bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8)+ 11);
  if ((_DWORD)v8 == 3)
  {
    *a1 = v12;
    *((_BYTE *)a1 + 2) = BYTE2(v12);
  }
  else
  {
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X11 }
}

void sub_1875172A4(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x187517334);
}

void sub_1875172AC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1875172B4);
  JUMPOUT(0x187517334);
}

void sub_18751730C(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x187517334);
}

void sub_187517314(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x187517334);
}

uint64_t sub_18751731C@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a1)
    goto LABEL_6;
  v3 = (v8 + v7 + 8) & a3;
  if (a2 < 0x7FFFFFFF)
  {
    if (a1 < 0)
      JUMPOUT(0x187517328);
    *(_QWORD *)(((((((v6 + v3) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a1 - 1);
LABEL_6:
    JUMPOUT(0x187517334);
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v3);
}

uint64_t type metadata completion function for BaseModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for BaseModifier(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for BaseModifier.Transform(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  swift_release();
  v5 = (((a1 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(unsigned __int8 *)(v5 + 17);
  if (v6 >= 2)
    v6 = *(_DWORD *)v5 + 2;
  if (v6 == 1)
    swift_release();
  swift_release();
  v7 = (((a1 + ((((((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)
      + 31) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(((v7 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  if ((int)v8 - 1 < 0)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined consume of Environment<DismissWindowAction>.Content(*(_QWORD *)((((v7 + 87) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v7 + 87) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(((((v7 + 87) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16), *(_BYTE *)(((((v7 + 87) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 17));
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64) + a1;
  swift_release();
  result = swift_release();
  v6 = *(_QWORD *)(((((((((((v4 + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 31) & 0xFFFFFFFFFFFFFFF8)
                   + 55) & 0xFFFFFFFFFFFFFFF8)
                 + 8);
  if (v6 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  if ((int)v6 - 1 < 0)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for BaseModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  _OWORD *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v7;
  v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(unsigned __int8 *)(v10 + 17);
  swift_retain();
  if (v11 >= 2)
    v11 = *(_DWORD *)v10 + 2;
  if (v11 == 1)
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
    *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
    swift_retain();
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)v9 = *(_BYTE *)v10;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  }
  swift_retain();
  *(_BYTE *)(v9 + 17) = v12;
  v13 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_BYTE *)(v13 + 9) = *(_BYTE *)(v14 + 9);
  v15 = (((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 10;
  v16 = (a1 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_OWORD *)v17;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  *(_OWORD *)v16 = v18;
  v19 = (_OWORD *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  v20 = (__int128 *)((v17 + 31) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  v22 = v20[2];
  v19[1] = v20[1];
  v19[2] = v22;
  *v19 = v21;
  v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v20 + 55) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v24 + 8);
  if (v25 >= 0xFFFFFFFF)
    LODWORD(v25) = -1;
  if ((int)v25 - 1 < 0)
  {
    swift_weakCopyInit();
    *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v26 = *(_OWORD *)v24;
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
    *(_OWORD *)v23 = v26;
  }
  *(_BYTE *)(v23 + 24) = *(_BYTE *)(v24 + 24);
  v27 = ((unint64_t)v19 + 87) & 0xFFFFFFFFFFFFFFF8;
  v28 = ((unint64_t)v20 + 87) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v27 = *(_BYTE *)v28;
  *(_QWORD *)(v27 + 8) = *(_QWORD *)(v28 + 8);
  v29 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(_QWORD *)v30;
  v32 = *(_QWORD *)(v30 + 8);
  v33 = *(_BYTE *)(v30 + 17);
  v34 = *(unsigned __int8 *)(v30 + 16);
  swift_retain();
  outlined copy of Environment<Binding<Visibility>?>.Content(v31, v32, v34, v33);
  *(_QWORD *)v29 = v31;
  *(_QWORD *)(v29 + 8) = v32;
  *(_BYTE *)(v29 + 16) = v34;
  *(_BYTE *)(v29 + 17) = v33;
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = (_QWORD *)((v7 + 31) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)(v16 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_QWORD *)(v15 + 16) = v17;
  v18 = (_OWORD *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  v19 = (__int128 *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  v20 = v19[2];
  v21 = *v19;
  v18[1] = v19[1];
  v18[2] = v20;
  *v18 = v21;
  v22 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)(v23 + 8);
  if (v24 >= 0xFFFFFFFF)
    LODWORD(v24) = -1;
  v25 = v24 - 1;
  swift_retain();
  swift_retain();
  if (v25 < 0)
  {
    swift_weakCopyInit();
    *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v26 = *(_OWORD *)v23;
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
    *(_OWORD *)v22 = v26;
  }
  v27 = (v22 + 27) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  return a1;
}

uint64_t assignWithCopy for BaseModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  _OWORD *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_retain();
  swift_release();
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != v10)
  {
    v11 = *(unsigned __int8 *)(v9 + 17);
    if (v11 >= 2)
      v11 = *(_DWORD *)v9 + 2;
    if (v11 == 1)
      swift_release();
    swift_release();
    v12 = *(unsigned __int8 *)(v10 + 17);
    if (v12 >= 2)
      v12 = *(_DWORD *)v10 + 2;
    if (v12 == 1)
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
      *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
      *(_BYTE *)(v9 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)v9 = *(_BYTE *)v10;
      *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
      *(_BYTE *)(v9 + 17) = 0;
    }
    swift_retain();
  }
  v13 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_BYTE *)(v13 + 9) = *(_BYTE *)(v14 + 9);
  v15 = (((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 10;
  v16 = (a1 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_OWORD *)v17;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  *(_OWORD *)v16 = v18;
  v19 = (_OWORD *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  v20 = (__int128 *)((v17 + 31) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  v22 = v20[2];
  v19[1] = v20[1];
  v19[2] = v22;
  *v19 = v21;
  v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v20 + 55) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v23 + 8);
  if (v25 >= 0xFFFFFFFF)
    LODWORD(v25) = -1;
  v26 = v25 - 1;
  v27 = *(_QWORD *)(v24 + 8);
  if (v27 >= 0xFFFFFFFF)
    LODWORD(v27) = -1;
  v28 = v27 - 1;
  if (v26 < 0)
  {
    if (v28 < 0)
    {
      swift_weakCopyAssign();
      *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
      swift_retain();
      swift_release();
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_21;
  }
  if ((v28 & 0x80000000) == 0)
  {
LABEL_21:
    v29 = *(_OWORD *)v24;
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
    *(_OWORD *)v23 = v29;
    goto LABEL_22;
  }
  swift_weakCopyInit();
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
  swift_retain();
  swift_retain();
LABEL_22:
  *(_BYTE *)(v23 + 24) = *(_BYTE *)(v24 + 24);
  v30 = ((unint64_t)v19 + 87) & 0xFFFFFFFFFFFFFFF8;
  v31 = ((unint64_t)v20 + 87) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v30 = *(_BYTE *)v31;
  *(_QWORD *)(v30 + 8) = *(_QWORD *)(v31 + 8);
  swift_retain();
  swift_release();
  v32 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(_QWORD *)v33;
  v35 = *(_QWORD *)(v33 + 8);
  LOBYTE(v31) = *(_BYTE *)(v33 + 17);
  v36 = *(_BYTE *)(v33 + 16);
  outlined copy of Environment<Binding<Visibility>?>.Content(*(_QWORD *)v33, v35, v36, v31);
  v37 = *(_QWORD *)v32;
  v38 = *(_QWORD *)(v32 + 8);
  v39 = *(_BYTE *)(v32 + 17);
  *(_QWORD *)v32 = v34;
  *(_QWORD *)(v32 + 8) = v35;
  v40 = *(unsigned __int8 *)(v32 + 16);
  *(_BYTE *)(v32 + 16) = v36;
  *(_BYTE *)(v32 + 17) = v31;
  outlined consume of Environment<DismissWindowAction>.Content(v37, v38, v40, v39);
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_retain();
  swift_release();
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = (_QWORD *)((v7 + 31) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_OWORD *)v16;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
  *(_OWORD *)v15 = v17;
  v18 = (_OWORD *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  v19 = (__int128 *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  v21 = v19[2];
  v18[1] = v19[1];
  v18[2] = v21;
  *v18 = v20;
  v22 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)(v22 + 8);
  if (v24 >= 0xFFFFFFFF)
    LODWORD(v24) = -1;
  v25 = v24 - 1;
  v26 = *(_QWORD *)(v23 + 8);
  if (v26 >= 0xFFFFFFFF)
    LODWORD(v26) = -1;
  v27 = v26 - 1;
  if (v25 < 0)
  {
    if (v27 < 0)
    {
      swift_weakCopyAssign();
      *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
      swift_retain();
      swift_release();
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
      swift_retain();
      swift_release();
      goto LABEL_11;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  if ((v27 & 0x80000000) == 0)
  {
LABEL_10:
    v28 = *(_OWORD *)v23;
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
    *(_OWORD *)v22 = v28;
    goto LABEL_11;
  }
  swift_weakCopyInit();
  *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
  swift_retain();
  swift_retain();
LABEL_11:
  v29 = (v22 + 27) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v29 = *(_DWORD *)v30;
  *(_DWORD *)(v29 + 4) = *(_DWORD *)(v30 + 4);
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  return a1;
}

uint64_t initializeWithTake for BaseModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  __int128 v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  _OWORD *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  __int128 v27;
  _OWORD *v28;
  _OWORD *v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(unsigned __int8 *)(v10 + 17);
  if (v11 >= 2)
    v11 = *(_DWORD *)v10 + 2;
  if (v11 == 1)
  {
    v12 = *(_OWORD *)v10;
    *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
    *(_OWORD *)v9 = v12;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    *(_OWORD *)v9 = *(_OWORD *)v10;
  }
  *(_BYTE *)(v9 + 17) = v13;
  v14 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_BYTE *)(v14 + 9) = *(_BYTE *)(v15 + 9);
  v16 = (((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 10;
  v17 = (a1 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (a2 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_OWORD *)v18;
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
  *(_OWORD *)v17 = v19;
  v20 = (_OWORD *)((v17 + 31) & 0xFFFFFFFFFFFFFFF8);
  v21 = (__int128 *)((v18 + 31) & 0xFFFFFFFFFFFFFFF8);
  v22 = *v21;
  v23 = v21[2];
  v20[1] = v21[1];
  v20[2] = v23;
  *v20 = v22;
  v24 = ((unint64_t)v20 + 55) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)v21 + 55) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_QWORD *)(v25 + 8);
  if (*(_QWORD *)(v25 + 8) >= 0xFFFFFFFFuLL)
    v26 = -1;
  if (v26 - 1 < 0)
  {
    v24 = swift_weakTakeInit();
    *(_OWORD *)(v24 + 8) = *(_OWORD *)(v25 + 8);
  }
  else
  {
    v27 = *(_OWORD *)v25;
    *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
    *(_OWORD *)v24 = v27;
  }
  *(_BYTE *)(v24 + 24) = *(_BYTE *)(v25 + 24);
  v28 = (_OWORD *)(((unint64_t)v20 + 87) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_OWORD *)(((unint64_t)v21 + 87) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  v30 = ((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  v31 = ((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8;
  v32 = *(_OWORD *)v31;
  *(_WORD *)(v30 + 16) = *(_WORD *)(v31 + 16);
  *(_OWORD *)v30 = v32;
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = v11;
  v12 = (_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v7 + 31) & 0xFFFFFFFFFFFFF8);
  *v13 = *v12;
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  *v15 = *v14;
  v16 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)(v17 + 16);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_QWORD *)(v16 + 16) = v18;
  v19 = (_OWORD *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  v20 = (__int128 *)((v17 + 31) & 0xFFFFFFFFFFFFFFF8);
  v21 = v20[2];
  v22 = *v20;
  v19[1] = v20[1];
  v19[2] = v21;
  *v19 = v22;
  v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v20 + 55) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v24 + 8);
  if (*(_QWORD *)(v24 + 8) >= 0xFFFFFFFFuLL)
    v25 = -1;
  if (v25 - 1 < 0)
  {
    v23 = swift_weakTakeInit();
    *(_OWORD *)(v23 + 8) = *(_OWORD *)(v24 + 8);
  }
  else
  {
    v26 = *(_OWORD *)v24;
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
    *(_OWORD *)v23 = v26;
  }
  v27 = (v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v24 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  return a1;
}

uint64_t assignWithTake for BaseModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  _OWORD *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != v10)
  {
    v11 = *(unsigned __int8 *)(v9 + 17);
    if (v11 >= 2)
      v11 = *(_DWORD *)v9 + 2;
    if (v11 == 1)
      swift_release();
    swift_release();
    v12 = *(unsigned __int8 *)(v10 + 17);
    if (v12 >= 2)
      v12 = *(_DWORD *)v10 + 2;
    if (v12 == 1)
    {
      v13 = *(_OWORD *)v10;
      *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
      *(_OWORD *)v9 = v13;
      v14 = 1;
    }
    else
    {
      v14 = 0;
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    *(_BYTE *)(v9 + 17) = v14;
  }
  v15 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(v15 + 9) = *(_BYTE *)(v16 + 9);
  v17 = (((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 10;
  v18 = (a1 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (a2 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_OWORD *)v19;
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
  *(_OWORD *)v18 = v20;
  v21 = (_OWORD *)((v18 + 31) & 0xFFFFFFFFFFFFFFF8);
  v22 = (__int128 *)((v19 + 31) & 0xFFFFFFFFFFFFFFF8);
  v23 = *v22;
  v24 = v22[2];
  v21[1] = v22[1];
  v21[2] = v24;
  *v21 = v23;
  v25 = ((unint64_t)v21 + 55) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_QWORD *)(v25 + 8);
  if (*(_QWORD *)(v25 + 8) >= 0xFFFFFFFFuLL)
    v27 = -1;
  v28 = v27 - 1;
  v29 = *(_QWORD *)(v26 + 8);
  if (v29 >= 0xFFFFFFFF)
    LODWORD(v29) = -1;
  v30 = v29 - 1;
  if (v28 < 0)
  {
    if (v30 < 0)
    {
      swift_weakTakeAssign();
      *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
      swift_release();
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
      swift_release();
      goto LABEL_22;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_21;
  }
  if ((v30 & 0x80000000) == 0)
  {
LABEL_21:
    v31 = *(_OWORD *)v26;
    *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
    *(_OWORD *)v25 = v31;
    goto LABEL_22;
  }
  swift_weakTakeInit();
  *(_OWORD *)(v25 + 8) = *(_OWORD *)(v26 + 8);
LABEL_22:
  *(_BYTE *)(v25 + 24) = *(_BYTE *)(v26 + 24);
  v32 = ((unint64_t)v21 + 87) & 0xFFFFFFFFFFFFFFF8;
  v33 = ((unint64_t)v22 + 87) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v32 = *(_BYTE *)v33;
  *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
  swift_release();
  v34 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  v35 = (v33 + 23) & 0xFFFFFFFFFFFFFFF8;
  v36 = *(_BYTE *)(v35 + 16);
  v37 = *(_BYTE *)(v35 + 17);
  v38 = *(_QWORD *)v34;
  v39 = *(_QWORD *)(v34 + 8);
  v40 = *(_BYTE *)(v34 + 17);
  *(_OWORD *)v34 = *(_OWORD *)v35;
  v41 = *(unsigned __int8 *)(v34 + 16);
  *(_BYTE *)(v34 + 16) = v36;
  *(_BYTE *)(v34 + 17) = v37;
  outlined consume of Environment<DismissWindowAction>.Content(v38, v39, v41, v40);
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_release();
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  swift_release();
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = (_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v7 + 31) & 0xFFFFFFFFFFFFF8);
  *v12 = *v11;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  *v14 = *v13;
  v15 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_OWORD *)v16;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
  *(_OWORD *)v15 = v17;
  v18 = (_OWORD *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  v19 = (__int128 *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  v21 = v19[2];
  v18[1] = v19[1];
  v18[2] = v21;
  *v18 = v20;
  v22 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)(v22 + 8);
  if (*(_QWORD *)(v22 + 8) >= 0xFFFFFFFFuLL)
    v24 = -1;
  v25 = v24 - 1;
  v26 = *(_QWORD *)(v23 + 8);
  if (v26 >= 0xFFFFFFFF)
    LODWORD(v26) = -1;
  v27 = v26 - 1;
  if (v25 < 0)
  {
    if (v27 < 0)
    {
      swift_weakTakeAssign();
      *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
      swift_release();
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
      swift_release();
      goto LABEL_11;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  if ((v27 & 0x80000000) == 0)
  {
LABEL_10:
    v28 = *(_OWORD *)v23;
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
    *(_OWORD *)v22 = v28;
    goto LABEL_11;
  }
  swift_weakTakeInit();
  *(_OWORD *)(v22 + 8) = *(_OWORD *)(v23 + 8);
LABEL_11:
  v29 = (v22 + 27) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v29 = *(_DWORD *)v30;
  *(_DWORD *)(v29 + 4) = *(_DWORD *)(v30 + 4);
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BaseModifier.Transform(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v14 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((v14 + 1) >= 2)
        return v14;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((((((((((((((v7 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 25) & 0xFFFFFFF8) + 17) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8)
           + 87) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 18;
    v9 = (a2 - v6 + 0xFFFF) >> (8 * v8);
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187517F3C + 4 * byte_187C3B78D[v12]))();
  }
}

{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((((((((((((v7 + 31) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8)
         + 27) & 0xFFFFFFF8)
       + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187B65B64 + 4 * byte_187C9522E[v12]))();
  }
}

void storeEnumTagSinglePayload for BaseModifier.Transform(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((((((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8)
             + 17) & 0xFFFFFFFFFFFFFFF8)
           + 31) & 0xFFFFFFFFFFFFFFF8)
         + 87) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 18;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 0xFFFF) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  v11 = ~v6 + a2;
  bzero(a1, ((((((((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8)+ 17) & 0xFFFFFFFFFFFFFFF8)+ 31) & 0xFFFFFFFFFFFFFFF8)+ 87) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 18);
  if (v7 > 3)
    *a1 = v11;
  else
    *(_WORD *)a1 = v11;
  __asm { BR              X11 }
}

void sub_187518118(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x18751819CLL);
}

void sub_187518120(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187518128);
  JUMPOUT(0x18751819CLL);
}

void sub_187518170(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x18751819CLL);
}

void sub_187518178(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x18751819CLL);
}

uint64_t sub_187518180(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x18751818CLL);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x18751819CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in LegacyBaseModifier<A>.Transform()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in LegacyBaseModifier<A>.Wrapper()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in BaseModifier<A>.Transform()
{
  return swift_getOpaqueTypeConformance2();
}

{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in BaseModifier<A>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined init with copy of NavigationAuthority??(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for NavigationAuthority??, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type External<Bool> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a2, MEMORY[0x1E0DEAFA0], a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1875182F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = type metadata accessor for BaseModifier.Transform(0, v5, v6, a4);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
  v9 = v4 + ((v8 + 32) & ~v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v9, v5);
  v11 = type metadata accessor for BaseModifier(0, v5, v6, v10);
  swift_release();
  outlined consume of StateOrBinding<Bool>(*(_QWORD *)(v9 + *(int *)(v11 + 40)), *(_QWORD *)(v9 + *(int *)(v11 + 40) + 8), *(unsigned __int8 *)(v9 + *(int *)(v11 + 40) + 16), *(_BYTE *)(v9 + *(int *)(v11 + 40) + 17));
  if (*(_QWORD *)(v9 + *(int *)(v7 + 44) + 8) != 1)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of Environment<DismissWindowAction>.Content(*(_QWORD *)(v9 + *(int *)(v7 + 56)), *(_QWORD *)(v9 + *(int *)(v7 + 56) + 8), *(unsigned __int8 *)(v9 + *(int *)(v7 + 56) + 16), *(_BYTE *)(v9 + *(int *)(v7 + 56) + 17));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BaseModifier.Transform.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BaseModifier.Transform(0, v6, v7, a4) - 8) + 80);
  return closure #1 in BaseModifier.Transform.body(content:)(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t partial apply for closure #1 in LegacyBaseModifier.Transform.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LegacyBaseModifier.Transform(0, v7, *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  return closure #1 in LegacyBaseModifier.Transform.body(content:)(a1, a2, (_QWORD *)(v4 + ((v8 + 32) & ~v8)), v7);
}

uint64_t objectdestroy_21Tm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(v4 + 16);
  v5 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for LegacyBaseModifier.Transform(0, v6, v5, a4) - 8);
  v8 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v10 = type metadata accessor for LegacyBaseModifier(0, v6, v5, v9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v8 + *(int *)(v10 + 36), v6);
  if (*(_QWORD *)(v8 + *(int *)(v10 + 40)) != 1)
  {
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in implicit closure #4 in closure #1 in LegacyBaseModifier.Transform.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LegacyBaseModifier.Transform(0, v5, v6, a4) - 8)
                          + 80);
  return implicit closure #5 in implicit closure #4 in closure #1 in LegacyBaseModifier.Transform.body(content:)(v4 + ((v7 + 32) & ~v7), v5, v6, v8);
}

uint64_t partial apply for closure #1 in LegacyBaseModifier.Transform.dismiss()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for LegacyBaseModifier(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return LegacyBaseModifier.isPresented.setter();
}

uint64_t sub_187518634(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for BaseModifier.Transform(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseModifier<A>.Transform, v6);
  v7 = type metadata accessor for _ViewModifier_Content();
  v9 = type metadata accessor for NavigationLinkButtonStyle(255, v4, v5, v8);
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationLinkButtonStyle<A>, v9);
  v12 = type metadata accessor for PrimitiveButtonStyleContainerModifier(255, v9, v10, v11);
  v13 = type metadata accessor for ModifiedContent();
  v14 = MEMORY[0x1E0DEAFA0];
  v15 = MEMORY[0x1E0CE66C0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v16 = type metadata accessor for ModifiedContent();
  type metadata accessor for UpdateViewDestinationViewModifier(255, v4, v5, v17);
  type metadata accessor for UpdateViewDestinationRequestProcessor(255, v4, v14, MEMORY[0x1E0DEAFB0]);
  v18 = type metadata accessor for ModifiedContent();
  v19 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  v20 = type metadata accessor for ModifiedContent();
  v27[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v7);
  v27[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v12);
  v21 = MEMORY[0x1E0CE2E70];
  v26[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v27);
  v26[1] = lazy protocol witness table accessor for type External<Bool> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, (uint64_t (*)(_QWORD, uint64_t))v15, MEMORY[0x1E0CE66D8]);
  v25[0] = &protocol witness table for UpdateViewDestinationViewModifier<A>;
  v25[1] = &protocol witness table for UpdateViewDestinationRequestProcessor<A, B>;
  v24[0] = MEMORY[0x18D75FFDC](v21, v16, v26);
  v24[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], v18, v25);
  v23[0] = MEMORY[0x18D75FFDC](v21, v19, v24);
  v23[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
  return MEMORY[0x18D75FFDC](v21, v20, v23);
}

uint64_t sub_18751889C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for LegacyBaseModifier.Transform(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LegacyBaseModifier<A>.Transform, v6);
  v7 = type metadata accessor for _ViewModifier_Content();
  v9 = type metadata accessor for NavigationLinkButtonStyle(255, v4, v5, v8);
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationLinkButtonStyle<A>, v9);
  v12 = type metadata accessor for PrimitiveButtonStyleContainerModifier(255, v9, v10, v11);
  v13 = type metadata accessor for ModifiedContent();
  v14 = MEMORY[0x1E0CE66C0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v15 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>, (uint64_t)&type metadata for NavigationDestinationsKey, (uint64_t)&protocol witness table for NavigationDestinationsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v16 = type metadata accessor for ModifiedContent();
  v21[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v7);
  v21[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v12);
  v17 = MEMORY[0x1E0CE2E70];
  v20[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v21);
  v20[1] = lazy protocol witness table accessor for type External<Bool> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, (uint64_t (*)(_QWORD, uint64_t))v14, MEMORY[0x1E0CE66D8]);
  v19[0] = MEMORY[0x18D75FFDC](v17, v15, v20);
  v19[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  return MEMORY[0x18D75FFDC](v17, v16, v19);
}

_QWORD *initializeBufferWithCopyOfBuffer for BridgedListState.ScrollTarget(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for IndexPath();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_OWORD *)v10 = *(_OWORD *)v11;
    v10[16] = v11[16];
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
  }
  return a1;
}

uint64_t destroy for BridgedListState.ScrollTarget(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for IndexPath();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for BridgedListState.ScrollTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t assignWithCopy for BridgedListState.ScrollTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;

  v6 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (__int128 *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 16) = *((_BYTE *)v9 + 16);
  *(_OWORD *)v8 = v10;
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for BridgedListState.ScrollTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for BridgedListState.ScrollTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_187518D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for IndexPath();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_187518DAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for IndexPath();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BridgedListState(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for BridgedListState.ScrollTarget(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v14 = type metadata accessor for IndexPath();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v8, v9, v14);
      v15 = *(int *)(v10 + 20);
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_OWORD *)v16 = *(_OWORD *)v17;
      v16[16] = v17[16];
      v8[*(int *)(v10 + 24)] = v9[*(int *)(v10 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v18 = a3[6];
    v19 = a3[7];
    v20 = (char *)v4 + v18;
    v21 = (char *)a2 + v18;
    v20[112] = v21[112];
    v22 = *((_OWORD *)v21 + 6);
    v23 = *((_OWORD *)v21 + 4);
    *((_OWORD *)v20 + 5) = *((_OWORD *)v21 + 5);
    *((_OWORD *)v20 + 6) = v22;
    v24 = *((_OWORD *)v21 + 1);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v24;
    v25 = *((_OWORD *)v21 + 3);
    *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
    *((_OWORD *)v20 + 3) = v25;
    *((_OWORD *)v20 + 4) = v23;
    *(_DWORD *)((char *)v4 + v19) = *(_DWORD *)((char *)a2 + v19);
  }
  return v4;
}

_QWORD *initializeWithTake for BridgedListState(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for BridgedListState.ScrollTarget(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for IndexPath();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
    v13 = *(int *)(v9 + 20);
    v14 = &v7[v13];
    v15 = &v8[v13];
    *(_OWORD *)v14 = *(_OWORD *)v15;
    v14[16] = v15[16];
    v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v16 = a3[6];
  v17 = a3[7];
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  v18[112] = v19[112];
  v20 = *((_OWORD *)v19 + 6);
  v21 = *((_OWORD *)v19 + 4);
  *((_OWORD *)v18 + 5) = *((_OWORD *)v19 + 5);
  *((_OWORD *)v18 + 6) = v20;
  v22 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v22;
  v23 = *((_OWORD *)v19 + 3);
  *((_OWORD *)v18 + 2) = *((_OWORD *)v19 + 2);
  *((_OWORD *)v18 + 3) = v23;
  *((_OWORD *)v18 + 4) = v21;
  *(_DWORD *)((char *)a1 + v17) = *(_DWORD *)((char *)a2 + v17);
  return a1;
}

uint64_t sub_1875190E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_187519130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

ValueMetadata *type metadata accessor for ListCoreOptions()
{
  return &type metadata for ListCoreOptions;
}

uint64_t ListScrollable.init(state:dataSourceProvider:scrollView:children:lastUpdateSeed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  int *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  *a8 = a1;
  v15 = (int *)type metadata accessor for ListScrollable(0, a6, a7, a4);
  v16 = (char *)a8 + v15[9];
  v18 = type metadata accessor for ListScrollable.DataSourceProvider(0, a6, a7, v17);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, a2, v18);
  *(_QWORD *)((char *)a8 + v15[10]) = a3;
  *(_QWORD *)((char *)a8 + v15[11]) = a4;
  *(_QWORD *)((char *)a8 + v15[12]) = a5;
  return result;
}

unint64_t lazy protocol witness table accessor for type ListCoreOptions and conformance ListCoreOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions;
  if (!lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListCoreOptions, &type metadata for ListCoreOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions;
  if (!lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListCoreOptions, &type metadata for ListCoreOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions;
  if (!lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListCoreOptions, &type metadata for ListCoreOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions;
  if (!lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListCoreOptions, &type metadata for ListCoreOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ListScrollViewProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = MEMORY[0x18D760234](v1);
  *a1 = result;
  return result;
}

uint64_t ListScrollable.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t WeakValue;
  uint64_t v4;

  v2 = type metadata accessor for BridgedListState(0);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of BridgedListState(WeakValue, a1);
    v4 = 0;
  }
  else
  {
    v4 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, v4, 1, v2);
}

uint64_t ListScrollable.scrollView.getter()
{
  id *WeakValue;
  id v1;
  id v2;

  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?(0, (unint64_t *)&lazy cache variable for type metadata for UIScrollView?, (uint64_t)&lazy cache variable for type metadata for UIScrollView, 0x1E0DC3C28, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NSObject);
  WeakValue = (id *)AGGraphGetWeakValue();
  if (!WeakValue)
    return 1;
  v1 = *WeakValue;
  v2 = *WeakValue;
  return (uint64_t)v1;
}

uint64_t ListScrollable.children.getter()
{
  uint64_t result;

  type metadata accessor for [Scrollable]();
  result = AGGraphGetWeakValue();
  if (result)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t ListScrollable.dataSource.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WeakValue;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for ListScrollable.DataSourceProvider(0, v6, *(_QWORD *)(a1 + 24), a2);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v17 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v17 - v10, v3 + *(int *)(a1 + 36), v7, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = type metadata accessor for Optional();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a3, v11, v13);
  }
  else
  {
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      v16 = *(_QWORD *)(v6 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(a3, WeakValue, v6);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a3, 0, 1, v6);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a3, 1, 1, v6);
    }
  }
}

BOOL ListScrollable.scrollToIndex(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  uint64_t v31;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v31 - v7;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState?, (void (*)(uint64_t))type metadata accessor for BridgedListState);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v31 - v11;
  v13 = type metadata accessor for BridgedListState(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  ListScrollable.state.getter((uint64_t)v12);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v18 == 1)
  {
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for BridgedListState?, (uint64_t)type metadata accessor for BridgedListState, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v12, (uint64_t)v17, type metadata accessor for BridgedListState);
    static Transaction.current.getter();
    v19 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v8, a1, v19);
    v20 = Transaction.scrollTargetAnchor.getter();
    v22 = v21;
    v31 = a2;
    v24 = v23;
    v25 = Transaction.isAnimated.getter();
    v26 = type metadata accessor for BridgedListState.ScrollTarget(0);
    v27 = &v8[*(int *)(v26 + 20)];
    *(_QWORD *)v27 = v20;
    *((_QWORD *)v27 + 1) = v22;
    v27[16] = v24 & 1;
    v8[*(int *)(v26 + 24)] = v25 & 1;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v8, 0, 1, v26);
    outlined assign with take of AnyHashable?((uint64_t)v8, (uint64_t)&v17[*(int *)(v13 + 20)], (uint64_t)&lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (uint64_t)type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: TableSections.Item)?);
    v28 = *(uint64_t *)((char *)v2 + *(int *)(v31 + 48));
    swift_beginAccess();
    v29 = *(_DWORD *)(v28 + 16) + 1;
    *(_DWORD *)(v28 + 16) = v29;
    *(_DWORD *)&v17[*(int *)(v13 + 28)] = v29;
    BridgedListState.commit(to:)(*v2);
    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, type metadata accessor for BridgedListState);
  }
  return v18 != 1;
}

BOOL ListScrollable.scroll<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;

  v9 = *(_QWORD *)(a2 + 16);
  v10 = type metadata accessor for Optional();
  v37 = *(_QWORD *)(v10 - 8);
  v38 = (char *)v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v36 - v12;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for IndexPath?, (void (*)(uint64_t))MEMORY[0x1E0CB1658]);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v36 - v16;
  v18 = type metadata accessor for IndexPath();
  v39 = *(_QWORD *)(v18 - 8);
  v40 = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a2;
  v41 = v4;
  ListScrollable.dataSource.getter(a2, v23, (uint64_t)v13);
  v24 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v13, 1, v9) == 1)
  {
    (*(void (**)(char *, char *))(v37 + 8))(v13, v38);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v17, 1, 1, v40);
    v25 = v22;
  }
  else
  {
    v38 = v21;
    v26 = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 + 24) + 120))(a1, a3, a4, v9);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v9);
    v27 = v39;
    v28 = v40;
    v25 = v26;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v17, 1, v40) != 1)
    {
      v34 = (uint64_t)v38;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v38, v17, v28);
      v33 = ListScrollable.scrollToIndex(_:)(v34, v25);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v34, v28);
      return v33;
    }
  }
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for IndexPath?, (uint64_t)MEMORY[0x1E0CB1658], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  v29 = ListScrollable.children.getter();
  if (!v29)
    return 0;
  v42 = 0;
  v30 = *(_QWORD *)(v29 + 16);
  if (!v30)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v31 = v29 + 32;
  v32 = *(_QWORD *)(v25 + 24);
  do
  {
    closure #1 in ListScrollable.scroll<A>(to:)(&v42, v31, a1, v9, a3, v32, a4);
    v31 += 40;
    --v30;
  }
  while (v30);
  swift_bridgeObjectRelease();
  return v42;
}

uint64_t closure #1 in ListScrollable.scroll<A>(to:)(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v22[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v14;
  outlined init with copy of TableColumnList(v16, (uint64_t)v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a5);
  if ((v15 & 1) != 0)
  {
    v17 = 1;
  }
  else
  {
    v18 = v23;
    v19 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 8))(v13, a5, a7, v18, v19);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  *a1 = v17 & 1;
  return result;
}

uint64_t ListScrollable.runScrollTest(_:scrollMode:)(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  void *v4;
  char v5;
  void *v6;
  unint64_t v8[2];

  v2 = *a2;
  v3 = a2[1];
  v4 = (void *)ListScrollable.scrollView.getter();
  if ((unint64_t)v4 >= 2)
  {
    v6 = v4;
    v8[0] = v2;
    v8[1] = v3;
    v5 = PPTTestCase.runScrollTest(_:scrollMode:onComplete:)(v4, v8, 0, 0);
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v6);
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t ListScrollable.runScrollTest(_:scrollMode:onComplete:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  void *v8;
  char v9;
  void *v10;
  unint64_t v12[2];

  v6 = *a2;
  v7 = a2[1];
  v8 = (void *)ListScrollable.scrollView.getter();
  if ((unint64_t)v8 >= 2)
  {
    v10 = v8;
    v12[0] = v6;
    v12[1] = v7;
    v9 = PPTTestCase.runScrollTest(_:scrollMode:onComplete:)(v8, v12, a3, a4);
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v10);
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t ListScrollable.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  void *v14;
  _QWORD *v15;
  __n128 v17[3];
  unint64_t v18[2];

  v9 = *a2;
  v8 = a2[1];
  v10 = *a3;
  v11 = a3[1];
  v12 = ListScrollable.scrollView.getter();
  if (v12 >= 2)
  {
    v14 = (void *)v12;
    v18[0] = v10;
    v18[1] = v11;
    outlined init with copy of PPTTestCase(a1, (uint64_t)v17);
    v15 = (_QWORD *)swift_allocObject();
    outlined init with take of PPTTestCase(v17, (uint64_t)(v15 + 2));
    v15[8] = v9;
    v15[9] = v8;
    v15[10] = a4;
    v15[11] = a5;
    swift_bridgeObjectRetain();
    outlined copy of AppIntentExecutor?(a4);
    v13 = PPTTestCase.runScrollTest(_:scrollMode:onComplete:)(v14, v18, (uint64_t)partial apply for closure #1 in PPTTestCase.runScrollSubTest(_:subTestName:scrollMode:onComplete:), (uint64_t)v15);
    swift_release();
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v14);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t ListScrollable.mapFirstChild<A, B>(ofType:body:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[16];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v7 = v6;
  v35 = a1;
  v36 = a2;
  v37 = a6;
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v32 - v14;
  v16 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Optional();
  v33 = *(_QWORD *)(v21 - 8);
  v34 = v21;
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v32 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v7, a3, v23);
  v26 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v15, v26 ^ 1u, 1, a4);
  v27 = *(_QWORD *)(a3 + 24);
  v39 = *(_QWORD *)(a3 + 16);
  v40 = a4;
  v41 = a5;
  v42 = v27;
  v43 = v35;
  v44 = v36;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in _IncrementalLayoutViewCache.withMutableState<A, B>(type:_:), (uint64_t)v38, MEMORY[0x1E0DEDCE8], a5, v28, (uint64_t)v25);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v29 = *(_QWORD *)(a5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v25, 1, a5) == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v37, 1, 1, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v25, v34);
  }
  else
  {
    v31 = v37;
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v37, v25, a5);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, a5);
  }
}

BOOL protocol witness for Scrollable.scroll<A>(to:) in conformance ListScrollable<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ListScrollable.scroll<A>(to:)(a1, a4, a2, a3);
}

uint64_t protocol witness for Scrollable.mapFirstChild<A, B>(ofType:body:) in conformance ListScrollable<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return ListScrollable.mapFirstChild<A, B>(ofType:body:)(a1, a2, a5, a3, a4, a6);
}

unint64_t ListScrollable.visibleHeaderFooterIDs.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  unint64_t result;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(char *, unint64_t, uint64_t);
  char *v52;
  id v53;
  Class isa;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  void (*v67)(char *, unint64_t, uint64_t);
  char *v68;
  id v69;
  Class v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  _QWORD v79[2];
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, unint64_t, uint64_t);
  id v84;
  char *v85;
  void *v86;
  void (*v87)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v0 = type metadata accessor for IndexPath();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v81 = (char *)v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v79 - v6;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for IndexPath?, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  v85 = (char *)v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v79 - v14;
  v16 = ListScrollable.scrollView.getter();
  if (v16 < 2)
    goto LABEL_27;
  v17 = (void *)v16;
  type metadata accessor for UpdateCoalescingTableView();
  v18 = (void *)swift_dynamicCastClass();
  if (!v18)
  {
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v17);
LABEL_27:
    v43 = ListScrollable.scrollView.getter();
    if (v43 < 2)
      return MEMORY[0x1E0DEE9D8];
    v44 = (void *)v43;
    type metadata accessor for UpdateCoalescingCollectionView(0);
    v45 = (void *)swift_dynamicCastClass();
    if (!v45)
    {
      v61 = v44;
LABEL_47:
      outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v61);
      return MEMORY[0x1E0DEE9D8];
    }
    v46 = v45;
    v79[0] = v44;
    v84 = (id)*MEMORY[0x1E0DC48A8];
    v47 = objc_msgSend(v45, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
    v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v49 = *(_QWORD *)(v48 + 16);
    v86 = v46;
    v79[1] = v48;
    if (v49)
    {
      v50 = v48 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
      v51 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
      v82 = *(_QWORD *)(v1 + 72);
      v83 = v51;
      v23 = (char *)MEMORY[0x1E0DEE9D8];
      v51(v15, v50, v0);
      while (1)
      {
        v87 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
        v87(v15, 0, 1, v0);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v15, 1, v0) == 1)
          goto LABEL_51;
        (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v7, v15, v0);
        v53 = v84;
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        v55 = objc_msgSend(v46, sel_supplementaryViewForElementKind_atIndexPath_, v53, isa);

        if (!v55)
          goto LABEL_33;
        type metadata accessor for ListCollectionViewCell();
        v56 = swift_dynamicCastClass();
        if (!v56)
          goto LABEL_32;
        v57 = *(_QWORD *)(v56 + direct field offset for ListCollectionViewCellBase.viewListID + 8);
        if (v57)
          break;
        (*(void (**)(char *, uint64_t))(v1 + 8))(v7, v0);

LABEL_34:
        v50 += v82;
        --v49;
        v46 = v86;
        if (!v49)
          goto LABEL_50;
        v83(v15, v50, v0);
      }
      v88 = *(_QWORD *)(v56 + direct field offset for ListCollectionViewCellBase.viewListID);
      v89 = v57;
      _ViewList_ID.canonicalID.getter();
      v58 = v90;
      v80 = v91;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
      v60 = *((_QWORD *)v23 + 2);
      v59 = *((_QWORD *)v23 + 3);
      if (v60 >= v59 >> 1)
        v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v60 + 1, 1, v23);
      *((_QWORD *)v23 + 2) = v60 + 1;
      v52 = &v23[16 * v60];
      *((_QWORD *)v52 + 4) = v58;
      *((_QWORD *)v52 + 5) = v80;
LABEL_32:

LABEL_33:
      (*(void (**)(char *, uint64_t))(v1 + 8))(v7, v0);
      goto LABEL_34;
    }
    v87 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
    v23 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_50:
    v87(v15, 1, 1, v0);
LABEL_51:
    swift_bridgeObjectRelease();
    v84 = (id)*MEMORY[0x1E0DC48A0];
    v62 = objc_msgSend(v46, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
    v63 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v64 = *(_QWORD *)(v63 + 16);
    v65 = v81;
    v82 = v63;
    if (!v64)
    {
      v68 = v85;
LABEL_68:
      v87(v68, 1, 1, v0);
LABEL_69:
      swift_bridgeObjectRelease();
      v42 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v79[0];
      goto LABEL_70;
    }
    v66 = v63 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v83 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 72);
    v67 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    v68 = v85;
    v67(v85, v66, v0);
    while (1)
    {
      v87(v68, 0, 1, v0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v68, 1, v0) == 1)
        goto LABEL_69;
      (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v65, v68, v0);
      v69 = v84;
      v70 = IndexPath._bridgeToObjectiveC()().super.isa;
      v71 = objc_msgSend(v46, sel_supplementaryViewForElementKind_atIndexPath_, v69, v70);

      if (!v71)
        goto LABEL_54;
      type metadata accessor for ListCollectionViewCell();
      v72 = swift_dynamicCastClass();
      if (!v72)
        break;
      v73 = *(_QWORD *)(v72 + direct field offset for ListCollectionViewCellBase.viewListID + 8);
      if (v73)
      {
        v88 = *(_QWORD *)(v72 + direct field offset for ListCollectionViewCellBase.viewListID);
        v89 = v73;
        _ViewList_ID.canonicalID.getter();
        v74 = v90;
        v75 = v91;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
        v77 = *((_QWORD *)v23 + 2);
        v76 = *((_QWORD *)v23 + 3);
        if (v77 >= v76 >> 1)
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, v23);
        *((_QWORD *)v23 + 2) = v77 + 1;
        v78 = &v23[16 * v77];
        *((_QWORD *)v78 + 4) = v74;
        *((_QWORD *)v78 + 5) = v75;

        v65 = v81;
        (*(void (**)(char *, uint64_t))(v1 + 8))(v81, v0);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v1 + 8))(v65, v0);

      }
LABEL_55:
      v66 += (unint64_t)v83;
      --v64;
      v68 = v85;
      v46 = v86;
      if (!v64)
        goto LABEL_68;
      v67(v85, v66, v0);
    }

LABEL_54:
    (*(void (**)(char *, uint64_t))(v1 + 8))(v65, v0);
    goto LABEL_55;
  }
  v19 = v18;
  result = (unint64_t)objc_msgSend(v18, sel_numberOfSections);
  if ((result & 0x8000000000000000) == 0)
  {
    v21 = (char *)result;
    if (result)
    {
      v87 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v17;
      v22 = 0;
      v23 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v25 = objc_msgSend(v19, sel_headerViewForSection_, v22);
        if (v25)
        {
          v26 = v25;
          type metadata accessor for ListTableViewHeaderFooter();
          v27 = swift_dynamicCastClass();
          if (v27)
          {
            v28 = *(_QWORD *)(v27 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID + 8);
            if (v28)
            {
              v88 = *(_QWORD *)(v27 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID);
              v89 = v28;
              _ViewList_ID.canonicalID.getter();
              v29 = v90;
              v30 = v91;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
              v32 = *((_QWORD *)v23 + 2);
              v31 = *((_QWORD *)v23 + 3);
              if (v32 >= v31 >> 1)
                v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v23);
              *((_QWORD *)v23 + 2) = v32 + 1;
              v33 = &v23[16 * v32];
              *((_QWORD *)v33 + 4) = v29;
              *((_QWORD *)v33 + 5) = v30;
            }
          }

        }
        v34 = objc_msgSend(v19, sel_footerViewForSection_, v22);
        if (v34)
        {
          v35 = v34;
          type metadata accessor for ListTableViewHeaderFooter();
          v36 = swift_dynamicCastClass();
          if (v36)
          {
            v37 = *(_QWORD *)(v36 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID + 8);
            if (v37)
            {
              v88 = *(_QWORD *)(v36 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID);
              v89 = v37;
              _ViewList_ID.canonicalID.getter();
              v38 = v90;
              v39 = v91;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
              v41 = *((_QWORD *)v23 + 2);
              v40 = *((_QWORD *)v23 + 3);
              if (v41 >= v40 >> 1)
                v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v23);
              *((_QWORD *)v23 + 2) = v41 + 1;
              v24 = &v23[16 * v41];
              *((_QWORD *)v24 + 4) = v38;
              *((_QWORD *)v24 + 5) = v39;
            }
          }

        }
        ++v22;
      }
      while (v21 != v22);
      v42 = v87;
LABEL_70:
      outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v42);
      return (unint64_t)v23;
    }
    v61 = v17;
    goto LABEL_47;
  }
  __break(1u);
  return result;
}

void ListScrollable.indexPathForHeaderFooterID(_:)(unsigned int *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28;
  id v29;
  unint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  char *v41;
  void *v42;
  char v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  id v53;
  char *v54;
  unint64_t v55;
  void *v56;
  char *v57;
  char *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  id v67;
  Class isa;
  char *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  void (*v83)(char *, char *, uint64_t);
  id v84;
  Class v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93[2];
  id v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, unint64_t, uint64_t);
  char *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  void (*v104)(char *, uint64_t, uint64_t, uint64_t);
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;

  v4 = type metadata accessor for IndexPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v99 = (char *)v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v105 = (char *)v93 - v10;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for IndexPath?, v11);
  MEMORY[0x1E0C80A78](v12, v13);
  v103 = (char *)v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v93 - v17;
  v102 = *a1;
  v101 = a1[1];
  v19 = *((_QWORD *)a1 + 1);
  v20 = ListScrollable.scrollView.getter();
  v106 = v5;
  if (v20 < 2)
  {
LABEL_31:
    v55 = ListScrollable.scrollView.getter();
    if (v55 >= 2)
    {
      v56 = (void *)v55;
      type metadata accessor for UpdateCoalescingCollectionView(0);
      v57 = (char *)swift_dynamicCastClass();
      if (v57)
      {
        v58 = v57;
        v94 = v56;
        v95 = a2;
        v96 = v19;
        v100 = (id)*MEMORY[0x1E0DC48A8];
        v59 = objc_msgSend(v57, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
        v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v61 = *(_QWORD *)(v60 + 16);
        v93[1] = v60;
        if (v61)
        {
          v62 = v60 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
          v63 = *(char **)(v5 + 16);
          v97 = *(_QWORD *)(v5 + 72);
          v98 = (void (*)(char *, unint64_t, uint64_t))v63;
          v93[0] = v102 | (v101 << 32);
          v64 = v99;
          ((void (*)(char *, unint64_t, uint64_t))v63)(v18, v62, v4);
          while (1)
          {
            v104 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
            v104(v18, 0, 1, v4);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v18, 1, v4) == 1)
              break;
            v65 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
            v66 = v4;
            v65(v105, v18, v4);
            v67 = v100;
            isa = IndexPath._bridgeToObjectiveC()().super.isa;
            v69 = v58;
            v70 = objc_msgSend(v58, sel_supplementaryViewForElementKind_atIndexPath_, v67, isa);

            if (v70)
            {
              type metadata accessor for ListCollectionViewCell();
              v71 = swift_dynamicCastClass();
              if (v71)
              {
                v72 = *(_QWORD *)(v71 + direct field offset for ListCollectionViewCellBase.viewListID + 8);
                if (v72)
                {
                  v107 = *(_QWORD *)(v71 + direct field offset for ListCollectionViewCellBase.viewListID);
                  v108 = v72;
                  _ViewList_ID.canonicalID.getter();
                  v107 = __PAIR64__(v101, v102);
                  v108 = v96;
                  swift_retain();
                  swift_retain();
                  v73 = MEMORY[0x18D756E68](&v109, &v107);
                  v64 = v99;
                  swift_release();

                  swift_release();
                  swift_release();
                  if ((v73 & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v94);
                    v91 = v95;
                    v65(v95, v105, v66);
                    v104(v91, 0, 1, v66);
                    return;
                  }
                }
                else
                {
                  v74 = v96;
                  swift_retain();

                  outlined consume of Text.LineStyle?(0, 1);
                  outlined consume of Text.LineStyle?(v93[0], v74);
                }
              }
              else
              {

              }
            }
            v5 = v106;
            (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v66);
            v62 += v97;
            --v61;
            v58 = v69;
            v4 = v66;
            if (!v61)
              goto LABEL_49;
            v98(v18, v62, v66);
          }
        }
        else
        {
          v104 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
          v64 = v99;
LABEL_49:
          v104(v18, 1, 1, v4);
        }
        swift_bridgeObjectRelease();
        v75 = (void *)*MEMORY[0x1E0DC48A0];
        v105 = v58;
        v100 = v75;
        v76 = objc_msgSend(v58, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
        v77 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v98 = (void (*)(char *, unint64_t, uint64_t))v77;
        v78 = *(_QWORD *)(v77 + 16);
        v79 = v103;
        if (v78)
        {
          v80 = (char *)v98
              + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
          v81 = *(_QWORD *)(v5 + 72);
          v82 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
          v97 = v102 | (v101 << 32);
          v82(v103, v80, v4);
          while (1)
          {
            v104(v79, 0, 1, v4);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v79, 1, v4) == 1)
              break;
            v83 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
            v83(v64, v79, v4);
            v84 = v100;
            v85 = IndexPath._bridgeToObjectiveC()().super.isa;
            v86 = objc_msgSend(v105, sel_supplementaryViewForElementKind_atIndexPath_, v84, v85);

            if (v86)
            {
              type metadata accessor for ListCollectionViewCell();
              v87 = swift_dynamicCastClass();
              if (v87)
              {
                v88 = *(_QWORD *)(v87 + direct field offset for ListCollectionViewCellBase.viewListID + 8);
                if (v88)
                {
                  v107 = *(_QWORD *)(v87 + direct field offset for ListCollectionViewCellBase.viewListID);
                  v108 = v88;
                  _ViewList_ID.canonicalID.getter();
                  v107 = __PAIR64__(v101, v102);
                  v108 = v96;
                  swift_retain();
                  swift_retain();
                  v89 = MEMORY[0x18D756E68](&v109, &v107);
                  v64 = v99;
                  swift_release();

                  swift_release();
                  swift_release();
                  if ((v89 & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v94);
                    v92 = v95;
                    v83(v95, v64, v4);
                    v104(v92, 0, 1, v4);
                    return;
                  }
                }
                else
                {
                  v90 = v96;
                  swift_retain();

                  outlined consume of Text.LineStyle?(0, 1);
                  outlined consume of Text.LineStyle?(v97, v90);
                }
              }
              else
              {

              }
            }
            v5 = v106;
            (*(void (**)(char *, uint64_t))(v106 + 8))(v64, v4);
            v80 += v81;
            --v78;
            v79 = v103;
            if (!v78)
              goto LABEL_62;
            v82(v103, v80, v4);
          }
        }
        else
        {
LABEL_62:
          v104(v79, 1, 1, v4);
        }
        swift_bridgeObjectRelease();
        outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v94);
        a2 = v95;
      }
      else
      {
        outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v56);
      }
    }
LABEL_64:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
    return;
  }
  v21 = (void *)v20;
  type metadata accessor for UpdateCoalescingTableView();
  v22 = (void *)swift_dynamicCastClass();
  if (!v22)
  {
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v21);
    v5 = v106;
    goto LABEL_31;
  }
  v23 = v22;
  v24 = (unint64_t)objc_msgSend(v22, sel_numberOfSections);
  if ((v24 & 0x8000000000000000) == 0)
  {
    v25 = v24;
    if (v24)
    {
      v103 = (char *)v4;
      v104 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v21;
      v95 = a2;
      v26 = 0;
      v27 = &selRef_setSensitive_;
      v28 = (char *)(v102 | (v101 << 32));
      v105 = v28;
      while (1)
      {
        if (v25 == v26)
        {
          __break(1u);
          goto LABEL_69;
        }
        v31 = objc_msgSend(v23, v27[332], v26);
        if (v31)
          break;
LABEL_22:
        v44 = objc_msgSend(v23, sel_footerViewForSection_, v26);
        if (!v44)
          goto LABEL_10;
        v45 = v44;
        type metadata accessor for ListTableViewHeaderFooter();
        v46 = swift_dynamicCastClass();
        if (v46)
        {
          v47 = *(_QWORD *)(v46 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID + 8);
          if (v47)
          {
            v107 = *(_QWORD *)(v46 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID);
            v108 = v47;
            swift_retain();
            v48 = v45;
            _ViewList_ID.canonicalID.getter();
            v49 = v109;
            v50 = HIDWORD(v109);
            v51 = v110;
            v30 = v109 | ((unint64_t)HIDWORD(v109) << 32);
            v109 = v28;
            v110 = v19;
            if (v51 == 1)
            {
              v27 = &selRef_setSensitive_;
LABEL_7:
              outlined consume of Text.LineStyle?((uint64_t)v28, v19);
              outlined consume of Text.LineStyle?(v30, 1);
            }
            else
            {
              v107 = __PAIR64__(v50, v49);
              v108 = v51;
              swift_retain();
              v52 = MEMORY[0x18D756E68](&v109, &v107);
              outlined consume of Text.LineStyle?(v30, v51);
              swift_release();
              swift_release();
              v27 = &selRef_setSensitive_;
              if ((v52 & 1) != 0)
              {
                v53 = objc_msgSend(v23, sel_numberOfRowsInSection_, v26);
                if (__OFSUB__(v53, 1))
                  goto LABEL_70;
                v54 = v95;
                MEMORY[0x18D754B94](((uint64_t)v53 - 1) & ~(((uint64_t)v53 - 1) >> 63), v26);

                goto LABEL_67;
              }
            }

            v28 = v105;
            goto LABEL_9;
          }
          swift_retain();
          v29 = v45;
          v30 = 0;
          goto LABEL_7;
        }
LABEL_9:

LABEL_10:
        if (v25 == ++v26)
        {
          outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v104);
          a2 = v95;
          v5 = v106;
          v4 = (uint64_t)v103;
          goto LABEL_64;
        }
      }
      v32 = v31;
      type metadata accessor for ListTableViewHeaderFooter();
      v33 = swift_dynamicCastClass();
      if (!v33)
      {
LABEL_21:

        goto LABEL_22;
      }
      v34 = *(_QWORD *)(v33 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID + 8);
      if (v34)
      {
        v107 = *(_QWORD *)(v33 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID);
        v108 = v34;
        v35 = v32;
        swift_retain();
        _ViewList_ID.canonicalID.getter();
        v36 = v109;
        v37 = HIDWORD(v109);
        v38 = v110;
        v39 = v109 | ((unint64_t)HIDWORD(v109) << 32);
        v109 = v28;
        v110 = v19;
        if (v38 != 1)
        {
          v41 = v28;
          v42 = v35;
          v107 = __PAIR64__(v37, v36);
          v108 = v38;
          swift_retain();
          v43 = MEMORY[0x18D756E68](&v109, &v107);
          outlined consume of Text.LineStyle?(v39, v38);
          swift_release();
          swift_release();
          v27 = &selRef_setSensitive_;
          if ((v43 & 1) != 0)
          {
            v54 = v95;
            IndexPath.init(index:)();

LABEL_67:
            outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v104);
            (*(void (**)(char *, _QWORD, uint64_t, char *))(v106 + 56))(v54, 0, 1, v103);
            return;
          }
          goto LABEL_20;
        }
        v27 = &selRef_setSensitive_;
      }
      else
      {
        v40 = v32;
        swift_retain();
        v39 = 0;
      }
      v41 = v28;
      outlined consume of Text.LineStyle?((uint64_t)v28, v19);
      outlined consume of Text.LineStyle?(v39, 1);
LABEL_20:

      v28 = v41;
      goto LABEL_21;
    }
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v21);
    v5 = v106;
    goto LABEL_64;
  }
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
}

uint64_t ListScrollable.visibleCollectionViewIDs.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;

  v3 = v2;
  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = ListScrollable.scrollView.getter();
  if (v8 < 2)
    goto LABEL_22;
  v9 = (void *)v8;
  type metadata accessor for UpdateCoalescingTableView();
  v10 = (void *)swift_dynamicCastClass();
  if (!v10)
  {
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v9);
LABEL_22:
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v3, a1);
    goto LABEL_23;
  }
  v11 = objc_msgSend(v10, sel_visibleCells);
  outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v9);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITableViewCell);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v12 >> 62))
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_5;
LABEL_44:
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v3, a1);
    v16 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_45:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a1);
    v50 = v16;
    goto LABEL_49;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v13 = result;
  if (!result)
    goto LABEL_44;
LABEL_5:
  v45 = v7;
  v46 = v5;
  v47 = v3;
  if (v13 < 1)
  {
    __break(1u);
    goto LABEL_51;
  }
  v15 = 0;
  v16 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    if ((v12 & 0xC000000000000001) != 0)
      v17 = (id)MEMORY[0x18D75E3BC](v15, v12);
    else
      v17 = *(id *)(v12 + 8 * v15 + 32);
    v18 = v17;
    type metadata accessor for ListTableViewCell();
    v19 = swift_dynamicCastClass();
    if (v19 && (v20 = *(_QWORD *)(v19 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_viewListID + 8)) != 0)
    {
      v48 = *(_QWORD *)(v19 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_viewListID);
      v49 = v20;
      _ViewList_ID.canonicalID.getter();

      v21 = v50;
      v22 = v51;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
      v24 = *((_QWORD *)v16 + 2);
      v23 = *((_QWORD *)v16 + 3);
      if (v24 >= v23 >> 1)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, v16);
      *((_QWORD *)v16 + 2) = v24 + 1;
      v25 = &v16[16 * v24];
      *((_QWORD *)v25 + 4) = v21;
      *((_QWORD *)v25 + 5) = v22;
    }
    else
    {

    }
    ++v15;
  }
  while (v13 != v15);
  swift_bridgeObjectRelease_n();
  v7 = v45;
  v5 = v46;
  v3 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v47, a1);
  if (v16)
    goto LABEL_45;
LABEL_23:
  v26 = ListScrollable.scrollView.getter();
  if (v26 < 2)
  {
LABEL_42:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a1);
    v50 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_49:
    v43 = ListScrollable.visibleHeaderFooterIDs.getter();
    specialized Array.append<A>(contentsOf:)(v43);
    return (uint64_t)v50;
  }
  v27 = (void *)v26;
  type metadata accessor for UpdateCoalescingCollectionView(0);
  v28 = (void *)swift_dynamicCastClass();
  if (!v28)
  {
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v27);
    goto LABEL_42;
  }
  v29 = objc_msgSend(v28, sel_visibleCells);
  outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v27);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewCell);
  v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v46 = v5;
  v47 = v3;
  v45 = v7;
  if (!(v30 >> 62))
  {
    v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v31)
      goto LABEL_27;
LABEL_47:
    v33 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_48:
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v45, a1);
    swift_bridgeObjectRelease();
    v50 = v33;
    goto LABEL_49;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v31 = result;
  if (!result)
    goto LABEL_47;
LABEL_27:
  if (v31 >= 1)
  {
    v32 = 0;
    v33 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v30 & 0xC000000000000001) != 0)
        v34 = (id)MEMORY[0x18D75E3BC](v32, v30);
      else
        v34 = *(id *)(v30 + 8 * v32 + 32);
      v35 = v34;
      type metadata accessor for ListCollectionViewCell();
      v36 = swift_dynamicCastClass();
      if (v36 && (v37 = *(_QWORD *)(v36 + direct field offset for ListCollectionViewCellBase.viewListID + 8)) != 0)
      {
        v48 = *(_QWORD *)(v36 + direct field offset for ListCollectionViewCellBase.viewListID);
        v49 = v37;
        _ViewList_ID.canonicalID.getter();

        v38 = v50;
        v39 = v51;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v33 + 2) + 1, 1, v33);
        v41 = *((_QWORD *)v33 + 2);
        v40 = *((_QWORD *)v33 + 3);
        if (v41 >= v40 >> 1)
          v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v33);
        *((_QWORD *)v33 + 2) = v41 + 1;
        v42 = &v33[16 * v41];
        *((_QWORD *)v42 + 4) = v38;
        *((_QWORD *)v42 + 5) = v39;
      }
      else
      {

      }
      ++v32;
    }
    while (v31 != v32);
    goto LABEL_48;
  }
LABEL_51:
  __break(1u);
  return result;
}

uint64_t ListScrollable.firstCollectionViewIndex(of:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v4 = *(_QWORD *)(a2 + 16);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v16 - v8;
  v10 = *a1;
  v11 = a1[1];
  ListScrollable.dataSource.getter(a2, v12, (uint64_t)v16 - v8);
  v13 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v4) == 1)
  {
    v14 = 0;
  }
  else
  {
    v16[0] = v10;
    v16[1] = v11;
    v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(a2 + 24) + 136))(v16, v4);
    v6 = v13;
    v5 = v4;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v14;
}

uint64_t ListScrollable.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;

  v8 = *(_QWORD *)(a4 + 16);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v18 - v12;
  ListScrollable.dataSource.getter(a4, v14, (uint64_t)&v18 - v12);
  v15 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v8) == 1)
  {
    v16 = 0;
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 24) + 144))(a1, a2, a3, v8);
    v10 = v15;
    v9 = v8;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return v16 & 1;
}

uint64_t ListScrollable.scroll(toCollectionViewID:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v56;
  uint64_t (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD v72[2];
  uint64_t v73;
  char v74[40];
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  uint64_t v80;

  v60 = a4;
  v69 = a2;
  v70 = a3;
  v63 = *(_QWORD *)(a5 + 16);
  v59 = type metadata accessor for Optional();
  v61 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59, v7);
  v62 = (uint64_t)&v56 - v8;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for IndexPath?, (void (*)(uint64_t))MEMORY[0x1E0CB1658]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v56 - v15;
  v17 = type metadata accessor for IndexPath();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v56 - v24;
  v27 = *(_DWORD *)a1;
  v26 = *(_DWORD *)(a1 + 4);
  v28 = *(_QWORD *)(a1 + 8);
  v78 = *(_DWORD *)a1;
  v79 = v26;
  v80 = v28;
  v67 = a5;
  v30 = v29;
  ListScrollable.indexPathForHeaderFooterID(_:)(&v78, v16);
  v31 = v18;
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v68 = v30;
  if (v32(v16, 1, v30) == 1)
  {
    v57 = v32;
    v56 = v21;
    v33 = v61;
    v58 = v31;
    v64 = v28;
    v65 = v26;
    v66 = v27;
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for IndexPath?, (uint64_t)MEMORY[0x1E0CB1658], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
    v34 = v62;
    v35 = v67;
    ListScrollable.dataSource.getter(v67, v36, v62);
    v37 = v63;
    v38 = *(_QWORD *)(v63 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v34, 1, v63) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v59);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v12, 1, 1, v68);
      v39 = v60;
    }
    else
    {
      v78 = v66;
      v79 = v65;
      v80 = v64;
      (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)(v35 + 24) + 128))(&v78, v37);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v34, v37);
      v44 = v57(v12, 1, v68);
      v39 = v60;
      if (v44 != 1)
      {
        v52 = v58;
        v53 = (uint64_t)v56;
        v54 = v68;
        (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v56, v12, v68);
        v43 = ListScrollable.scrollToIndex(_:)(v53, v35);
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v53, v54);
        return v43 & 1;
      }
    }
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for IndexPath?, (uint64_t)MEMORY[0x1E0CB1658], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
    v45 = ListScrollable.children.getter();
    if (v45)
    {
      v46 = *(_QWORD *)(v45 + 16);
      if (v46)
      {
        v43 = 0;
        LODWORD(v71) = v39 & 1;
        v68 = v45;
        v47 = v45 + 32;
        v48 = 1;
        while (1)
        {
          outlined init with copy of TableColumnList(v47, (uint64_t)&v78);
          if ((v43 & 1) != 0)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
            if (v46 == v48)
            {
              swift_bridgeObjectRelease();
              v43 = 1;
              return v43 & 1;
            }
            v43 = 1;
          }
          else
          {
            outlined init with copy of TableColumnList((uint64_t)&v78, (uint64_t)v74);
            type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
            type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
            if ((swift_dynamicCast() & 1) != 0)
            {
              v49 = *((_QWORD *)&v76 + 1);
              v50 = v77;
              __swift_project_boxed_opaque_existential_1(&v75, *((uint64_t *)&v76 + 1));
              v72[0] = v66;
              v72[1] = v65;
              v73 = v64;
              v43 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 72))(v72, v69, v70, v71, v49, v50);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
              if (v46 == v48)
                goto LABEL_23;
            }
            else
            {
              v77 = 0;
              v75 = 0u;
              v76 = 0u;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
              outlined destroy of ScrollableCollection?((uint64_t)&v75);
              v43 = 0;
              if (v46 == v48)
              {
LABEL_23:
                swift_bridgeObjectRelease();
                return v43 & 1;
              }
            }
          }
          v47 += 40;
          if (__OFADD__(v48++, 1))
          {
            __break(1u);
            goto LABEL_19;
          }
        }
      }
      swift_bridgeObjectRelease();
      v43 = 0;
    }
    else
    {
LABEL_19:
      v43 = 0;
    }
  }
  else
  {
    v40 = v16;
    v41 = v68;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v25, v40, v68);
    v42 = v31;
    v43 = ListScrollable.scrollToIndex(_:)((uint64_t)v25, v67);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v25, v41);
  }
  return v43 & 1;
}

double protocol witness for ScrollableCollection.nextVisibleCollectionViewID(towards:from:border:ignoring:) in conformance ListScrollable<A>@<D0>(_OWORD *a1@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance ToString<A>(a1);
}

uint64_t protocol witness for static ScrollableCollection.hasMultipleViewsInAxis(_:) in conformance ListScrollable<A>(char a1)
{
  return NavigationSelectionModifier.init(isActive:presentedValue:)(a1 & 1);
}

uint64_t protocol witness for ScrollableCollection.firstCollectionViewIndex(of:) in conformance ListScrollable<A>(uint64_t *a1, uint64_t a2)
{
  return ListScrollable.firstCollectionViewIndex(of:)(a1, a2);
}

uint64_t protocol witness for ScrollableCollection.scroll(toCollectionViewID:anchor:) in conformance ListScrollable<A>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return ListScrollable.scroll(toCollectionViewID:anchor:)(a1, a2, a3, a4 & 1, a5);
}

BOOL ExplicitIDFromViewListIDVisitor.visit(view:traits:)()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  _QWORD v4[5];
  _QWORD v5[2];
  _QWORD v6[2];

  _ViewList_ID.canonicalID.getter();
  v6[0] = v4[0];
  v6[1] = v4[1];
  v1 = v0[1];
  v5[0] = *v0;
  v5[1] = v1;
  v2 = MEMORY[0x18D756E68](v6, v5);
  swift_release();
  if ((v2 & 1) != 0)
  {
    _ViewList_View.viewID.getter();
    outlined assign with take of AnyHashable?((uint64_t)v4, (uint64_t)(v0 + 2), (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  }
  return (v2 & 1) == 0;
}

BOOL ExplicitIDOffsetVisitor.visit(view:traits:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD v6[2];
  _QWORD v7[4];

  v1 = v0;
  v2 = *v0 + 1;
  *v0 = v2;
  _ViewList_ID.canonicalID.getter();
  v7[0] = v7[2];
  v7[1] = v7[3];
  v3 = v0[2];
  v6[0] = v0[1];
  v6[1] = v3;
  v4 = MEMORY[0x18D756E68](v7, v6);
  swift_release();
  if ((v4 & 1) != 0)
  {
    v1[3] = v2;
    *((_BYTE *)v1 + 32) = 0;
  }
  return (v4 & 1) == 0;
}

BOOL protocol witness for ViewListVisitor.visit(view:traits:) in conformance ApplyCollectionViewIDsVisitor()
{
  uint64_t v0;
  void (*v1)(_QWORD *, uint64_t);
  _QWORD v3[4];

  v1 = *(void (**)(_QWORD *, uint64_t))v0;
  swift_retain();
  _ViewList_ID.canonicalID.getter();
  v3[0] = v3[2];
  v3[1] = v3[3];
  v1(v3, v0 + 16);
  swift_release();
  swift_release();
  return (*(_BYTE *)(v0 + 16) & 1) == 0;
}

BOOL protocol witness for TableRowVisitor.visit<A, B>(rowValue:view:children:traits:) in conformance ApplyCollectionViewIDsVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized ApplyCollectionViewIDsVisitor.visit<A, B>(rowValue:view:children:traits:)(a1, a3, a4, a5);
}

void base witness table accessor for Scrollable in ListScrollable<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined assign with take of AnyHashable?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(a2, a1, v7);
  return a2;
}

unint64_t lazy protocol witness table accessor for type BridgedListState.CommitMutation and conformance BridgedListState.CommitMutation()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type BridgedListState.CommitMutation and conformance BridgedListState.CommitMutation;
  if (!lazy protocol witness table cache variable for type BridgedListState.CommitMutation and conformance BridgedListState.CommitMutation)
  {
    v1 = type metadata accessor for BridgedListState.CommitMutation(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedListState.CommitMutation, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BridgedListState.CommitMutation and conformance BridgedListState.CommitMutation);
  }
  return result;
}

void type metadata accessor for [Scrollable]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [Scrollable])
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable]);
  }
}

uint64_t type metadata accessor for ListScrollable.DataSourceProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListScrollable.DataSourceProvider);
}

uint64_t specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a1;
  v4 = a2[3];
  v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8))(a3, &v7, &type metadata for ResolvedTableRowIDs.RowIDVisitor, &protocol witness table for ResolvedTableRowIDs.RowIDVisitor, v4, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a1;
  v4 = a2[3];
  v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8))(a3, &v7, &type metadata for TableSections.Accumulator, &protocol witness table for TableSections.Accumulator, v4, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a1;
  v4 = a2[3];
  v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8))(a3, &v7, &type metadata for CollectionViewTableHeaderVisitor, &protocol witness table for CollectionViewTableHeaderVisitor, v4, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v9;

  v9 = a1;
  v4 = a2[3];
  v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  v6 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TableSections.FindMatchingID<AnyHashable2>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyHashable2 and conformance AnyHashable2, MEMORY[0x1E0CE1718], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TableSections.FindMatchingID);
  return v6(a3, &v9, v7, &protocol witness table for TableSections.FindMatchingID<A>, v4, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a1;
  v4 = a2[3];
  v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8))(a3, &v7, &type metadata for ApplyCollectionViewIDsVisitor, &protocol witness table for ApplyCollectionViewIDsVisitor, v4, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v9;

  v9 = a1;
  v4 = a2[3];
  v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  v6 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TableContentVisitor<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TableContentVisitor);
  return v6(a3, &v9, v7, &protocol witness table for TableContentVisitor<A>, v4, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a1;
  v4 = a2[3];
  v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8))(a3, &v7, &type metadata for TableSections.FindMatchingRow, &protocol witness table for TableSections.FindMatchingRow, v4, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a1;
  v4 = a2[3];
  v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8))(a3, &v7, &type metadata for AccessibilityRowAccumulator, &protocol witness table for AccessibilityRowAccumulator, v4, v5);
}

BOOL specialized ApplyCollectionViewIDsVisitor.visit<A, B>(rowValue:view:children:traits:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  void (*v24)(_QWORD, _QWORD);
  char v25;
  _BYTE *v26;
  void (*v27)(_OWORD *, _BYTE *);
  uint64_t v29;
  _BYTE *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;

  v29 = a2;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v29 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v29 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, a1, v6, v18);
  v21 = *(_QWORD *)(a4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v10, 1, a4) == 1)
  {
    v22 = v30;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    outlined init with copy of CoordinateSpaceGesture<TouchEvent>(v29, (uint64_t)&v32, (uint64_t)&lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
    if (*((_QWORD *)&v33 + 1))
    {
      v35[0] = v32;
      v35[1] = v33;
      v36 = v34;
      v24 = (void (*)(_QWORD, _QWORD))*((_QWORD *)v22 + 1);
      *(_QWORD *)&v32 = *(_QWORD *)v22;
      *((_QWORD *)&v32 + 1) = v24;
      LOBYTE(v33) = 0;
      MEMORY[0x1E0C80A78](v24, v23);
      *(&v29 - 4) = 0;
      *(&v29 - 3) = (uint64_t)v35;
      *(&v29 - 2) = (uint64_t)&v32;
      swift_retain();
      static Update.ensure<A>(_:)();
      outlined destroy of TableRowList((uint64_t)v35);
      v25 = v22[16] | v33;
      swift_release();
      v22[16] = v25 & 1;
    }
    else
    {
      outlined destroy of UIBackgroundConfiguration?((uint64_t)&v32, (uint64_t)&lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityValueStorage?);
    }
  }
  else
  {
    dispatch thunk of RawRepresentable.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v10, a4);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v15, AssociatedTypeWitness);
    swift_getAssociatedConformanceWitness();
    static _ViewList_ID.explicit<A>(_:)();
    v31 = v35[0];
    _ViewList_ID.canonicalID.getter();
    swift_bridgeObjectRelease();
    v26 = v30;
    v27 = *(void (**)(_OWORD *, _BYTE *))v30;
    v35[0] = v32;
    swift_retain();
    v27(v35, v26 + 16);
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, AssociatedTypeWitness);
    swift_release();
    v22 = v26;
  }
  return (v22[16] & 1) == 0;
}

uint64_t _s7SwiftUI12TableRowListV9visitRows8applying4fromyxz_SitAA0cD7VisitorRzlFyyXEfU_AA022ApplyCollectionViewIDsJ0V_Tg5TA_0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = v0[2];
  v1 = (_QWORD *)v0[3];
  v3 = v0[4];
  v7 = v2;
  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8))(v3, &v7, &type metadata for ApplyCollectionViewIDsVisitor, &protocol witness table for ApplyCollectionViewIDsVisitor, v4, v5);
}

uint64_t type metadata accessor for ListScrollable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListScrollable);
}

ValueMetadata *type metadata accessor for ListScrollViewProvider()
{
  return &type metadata for ListScrollViewProvider;
}

ValueMetadata *type metadata accessor for UpdateBridgedState()
{
  return &type metadata for UpdateBridgedState;
}

uint64_t type metadata completion function for ListScrollable.DataSourceProvider()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ListScrollable.DataSourceProvider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = v8;
  v10 = v7 & 0xFC | 3;
  v11 = v7 & 0x100000;
  if (v10 > 7 || v11 != 0 || (unint64_t)(v9 + 1) > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    v15 = *((unsigned __int8 *)a2 + v9);
    if (v15 >= 2)
    {
      if (v9 <= 3)
        v16 = v9;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
      {
        memcpy(v4, a2, v8);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(v4, a2, v5);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      }
      *((_BYTE *)v4 + v9) = 1;
    }
    else
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v9) = 0;
    }
  }
  return v4;
}

uint64_t destroy for ListScrollable.DataSourceProvider(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  if (*(_DWORD *)(v4 + 84))
    v5 = *(_QWORD *)(v4 + 64);
  else
    v5 = *(_QWORD *)(v4 + 64) + 1;
  if (v5 <= 8)
    v5 = 8;
  v6 = *(unsigned __int8 *)(result + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(result, 1, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  return result;
}

_QWORD *initializeWithCopy for ListScrollable.DataSourceProvider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 <= 8)
    v8 = 8;
  else
    v8 = v7;
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  if (v9 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v7);
      v11 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      v11 = 1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    v11 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v11;
  return a1;
}

_QWORD *assignWithCopy for ListScrollable.DataSourceProvider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    if (v7 <= 8)
      v8 = 8;
    else
      v8 = v7;
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1
      && !(*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
    }
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
        v13 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
        v13 = 1;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
    }
    else
    {
      v13 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  return a1;
}

_QWORD *initializeWithTake for ListScrollable.DataSourceProvider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 <= 8)
    v8 = 8;
  else
    v8 = v7;
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  if (v9 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v7);
      v11 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v11 = 1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    v11 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v11;
  return a1;
}

_QWORD *assignWithTake for ListScrollable.DataSourceProvider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    if (v7 <= 8)
      v8 = 8;
    else
      v8 = v7;
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1
      && !(*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
    }
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
        v13 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
        v13 = 1;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
    }
    else
    {
      v13 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ListScrollable.DataSourceProvider(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(v3 + 64);
  if (!v4)
    ++v5;
  v6 = 8;
  if (v5 > 8)
    v6 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_23;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v11 < 2)
    {
LABEL_23:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 2)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_23;
LABEL_16:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if (!(_DWORD)v7)
    return (v12 + 255);
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18751D4D8 + 4 * byte_187C3BE78[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ListScrollable.DataSourceProvider(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  if (!v6)
    ++v7;
  if (v7 <= 8)
    v7 = 8;
  v8 = v7 + 1;
  if (a3 < 0xFF)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v10 = a2 - 255;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for ListScrollable.DataSourceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_DWORD *)(v2 + 84);
  v4 = *(_QWORD *)(v2 + 64);
  if (!v3)
    ++v4;
  v5 = 8;
  if (v4 > 8)
    v5 = v4;
  if (*(unsigned __int8 *)(a1 + v5) < 2u)
    return *(unsigned __int8 *)(a1 + v5);
  if (v5 <= 3)
    v6 = v5;
  else
    v6 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18751D72C + 4 * byte_187C3BE86[v6]))();
}

_BYTE *destructiveInjectEnumTag for ListScrollable.DataSourceProvider(_BYTE *result, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  size_t v7;
  char v8;
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v6;
  if (v6 <= 8)
    v7 = 8;
  else
    v7 = v6;
  if (a2 > 1)
  {
    if (v7 <= 3)
      v8 = ((a2 - 2) >> (8 * v7)) + 2;
    else
      v8 = 2;
    result[v7] = v8;
    if (v7 >= 4)
      v9 = 4;
    else
      v9 = v7;
    bzero(result, v7);
    __asm { BR              X10 }
  }
  result[v7] = a2;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BridgedListState.CommitMutation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    *(uint64_t *)((char *)a1 + v5) = *(uint64_t *)((char *)a2 + v5);
    v8 = (int *)type metadata accessor for BridgedListState(0);
    v9 = v8[5];
    v10 = &v6[v9];
    v11 = &v7[v9];
    v12 = type metadata accessor for BridgedListState.ScrollTarget(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = type metadata accessor for IndexPath();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v10, v11, v16);
      v17 = *(int *)(v12 + 20);
      v18 = &v10[v17];
      v19 = &v11[v17];
      *(_OWORD *)v18 = *(_OWORD *)v19;
      v18[16] = v19[16];
      v10[*(int *)(v12 + 24)] = v11[*(int *)(v12 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v20 = v8[6];
    v21 = &v6[v20];
    v22 = &v7[v20];
    v23 = *((_OWORD *)v22 + 1);
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *((_OWORD *)v21 + 1) = v23;
    v24 = *((_OWORD *)v22 + 3);
    *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
    *((_OWORD *)v21 + 3) = v24;
    v21[112] = v22[112];
    v25 = *((_OWORD *)v22 + 6);
    v26 = *((_OWORD *)v22 + 4);
    *((_OWORD *)v21 + 5) = *((_OWORD *)v22 + 5);
    *((_OWORD *)v21 + 6) = v25;
    *((_OWORD *)v21 + 4) = v26;
    *(_DWORD *)&v6[v8[7]] = *(_DWORD *)&v7[v8[7]];
  }
  return v3;
}

_DWORD *assignWithCopy for BridgedListState.CommitMutation(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_QWORD *)((char *)a1 + v4) = *(_QWORD *)((char *)a2 + v4);
  v7 = (int *)type metadata accessor for BridgedListState(0);
  v8 = v7[5];
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = type metadata accessor for BridgedListState.ScrollTarget(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      v17 = type metadata accessor for IndexPath();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v9, v10, v17);
      v18 = *(int *)(v11 + 20);
      v19 = &v9[v18];
      v20 = &v10[v18];
      v21 = *(_OWORD *)v20;
      v19[16] = v20[16];
      *(_OWORD *)v19 = v21;
      v9[*(int *)(v11 + 24)] = v10[*(int *)(v11 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_9;
    }
  }
  else
  {
    if (!v15)
    {
      v22 = type metadata accessor for IndexPath();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v9, v10, v22);
      v23 = *(int *)(v11 + 20);
      v24 = &v9[v23];
      v25 = &v10[v23];
      v26 = *(_OWORD *)v25;
      v24[16] = v25[16];
      *(_OWORD *)v24 = v26;
      v9[*(int *)(v11 + 24)] = v10[*(int *)(v11 + 24)];
      goto LABEL_9;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for BridgedListState.ScrollTarget);
  }
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
LABEL_9:
  v27 = v7[6];
  v28 = &v5[v27];
  v29 = &v6[v27];
  v30 = *(_OWORD *)v29;
  v31 = *((_OWORD *)v29 + 1);
  v32 = *((_OWORD *)v29 + 3);
  *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
  *((_OWORD *)v28 + 3) = v32;
  *(_OWORD *)v28 = v30;
  *((_OWORD *)v28 + 1) = v31;
  v33 = *((_OWORD *)v29 + 4);
  v34 = *((_OWORD *)v29 + 5);
  v35 = *((_OWORD *)v29 + 6);
  v28[112] = v29[112];
  *((_OWORD *)v28 + 5) = v34;
  *((_OWORD *)v28 + 6) = v35;
  *((_OWORD *)v28 + 4) = v33;
  *(_DWORD *)&v5[v7[7]] = *(_DWORD *)&v6[v7[7]];
  return a1;
}

_QWORD *initializeWithTake for BridgedListState.CommitMutation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_QWORD *)((char *)a1 + v4) = *(_QWORD *)((char *)a2 + v4);
  v7 = (int *)type metadata accessor for BridgedListState(0);
  v8 = v7[5];
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = type metadata accessor for BridgedListState.ScrollTarget(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = type metadata accessor for IndexPath();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v9, v10, v14);
    v15 = *(int *)(v11 + 20);
    v16 = &v9[v15];
    v17 = &v10[v15];
    *(_OWORD *)v16 = *(_OWORD *)v17;
    v16[16] = v17[16];
    v9[*(int *)(v11 + 24)] = v10[*(int *)(v11 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v18 = v7[6];
  v19 = &v5[v18];
  v20 = &v6[v18];
  v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v21;
  v22 = *((_OWORD *)v20 + 3);
  *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
  *((_OWORD *)v19 + 3) = v22;
  v19[112] = v20[112];
  v23 = *((_OWORD *)v20 + 6);
  v24 = *((_OWORD *)v20 + 4);
  *((_OWORD *)v19 + 5) = *((_OWORD *)v20 + 5);
  *((_OWORD *)v19 + 6) = v23;
  *((_OWORD *)v19 + 4) = v24;
  *(_DWORD *)&v5[v7[7]] = *(_DWORD *)&v6[v7[7]];
  return a1;
}

_QWORD *assignWithTake for BridgedListState.CommitMutation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_QWORD *)((char *)a1 + v4) = *(_QWORD *)((char *)a2 + v4);
  v7 = (int *)type metadata accessor for BridgedListState(0);
  v8 = v7[5];
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = type metadata accessor for BridgedListState.ScrollTarget(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      v17 = type metadata accessor for IndexPath();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v9, v10, v17);
      v18 = *(int *)(v11 + 20);
      v19 = &v9[v18];
      v20 = &v10[v18];
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v19[16] = v20[16];
      v9[*(int *)(v11 + 24)] = v10[*(int *)(v11 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_9;
    }
  }
  else
  {
    if (!v15)
    {
      v21 = type metadata accessor for IndexPath();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v9, v10, v21);
      v22 = *(int *)(v11 + 20);
      v23 = &v9[v22];
      v24 = &v10[v22];
      *(_OWORD *)v23 = *(_OWORD *)v24;
      v23[16] = v24[16];
      v9[*(int *)(v11 + 24)] = v10[*(int *)(v11 + 24)];
      goto LABEL_9;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for BridgedListState.ScrollTarget);
  }
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
LABEL_9:
  v25 = v7[6];
  v26 = &v5[v25];
  v27 = &v6[v25];
  v28 = *((_OWORD *)v27 + 1);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *((_OWORD *)v26 + 1) = v28;
  v29 = *((_OWORD *)v27 + 3);
  *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
  *((_OWORD *)v26 + 3) = v29;
  v26[112] = v27[112];
  v30 = *((_OWORD *)v27 + 6);
  v31 = *((_OWORD *)v27 + 4);
  *((_OWORD *)v26 + 5) = *((_OWORD *)v27 + 5);
  *((_OWORD *)v26 + 6) = v30;
  *((_OWORD *)v26 + 4) = v31;
  *(_DWORD *)&v5[v7[7]] = *(_DWORD *)&v6[v7[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for BridgedListState.CommitMutation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18751DF54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for BridgedListState(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_18751DF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for BridgedListState(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for ListScrollable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for ListScrollable.DataSourceProvider(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ListScrollable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6 & 0xFC | 3;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = v8;
  v10 = ((((((v9 + (((v6 & 0xFC) + 11) & ~v7) + 4) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v11 = v6 & 0x100000;
  if (v7 > 7 || v11 != 0 || v10 > 0x18)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v14 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    *a1 = *a2;
    v15 = ((unint64_t)a1 + v7 + 8) & ~v7;
    v16 = ((unint64_t)a2 + v7 + 8) & ~v7;
    v17 = *(unsigned __int8 *)(v16 + v9);
    if (v17 >= 2)
    {
      if (v9 <= 3)
        v18 = v9;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    v19 = v9 + 1;
    if (v17 == 1)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4))
      {
        memcpy((void *)v15, (const void *)v16, v8);
        v20 = 1;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v15, v16, v4);
        v20 = 1;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
      }
    }
    else
    {
      v20 = 0;
      *(_QWORD *)v15 = *(_QWORD *)v16;
    }
    *(_BYTE *)(v15 + v9) = v20;
    v21 = (_QWORD *)(((v15 | 3) + v19) & 0xFFFFFFFFFFFFFFFCLL);
    v22 = (_QWORD *)(((v16 | 3) + v19) & 0xFFFFFFFFFFFFFFFCLL);
    *v21 = *v22;
    v23 = (_QWORD *)(((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFCLL);
    v24 = (_QWORD *)(((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    *v23 = *v24;
    *(_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v3;
}

uint64_t destroy for ListScrollable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_DWORD *)(v3 + 80) & 0xFCLL | 3;
  v5 = (a1 + v4 + 8) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  if (!*(_DWORD *)(v3 + 84))
    ++v6;
  if (v6 <= 8)
    v7 = 8;
  else
    v7 = v6;
  v8 = *(unsigned __int8 *)(v5 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  if (v8 == 1 && !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
  return swift_release();
}

_QWORD *initializeWithCopy for ListScrollable(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xFCLL;
  v7 = v6 + 11;
  v8 = (unint64_t)a1 + v6 + 11;
  v9 = ~v6 & 0xFFFFFFFFFFFFFFFCLL;
  v10 = v8 & v9;
  v11 = ((unint64_t)a2 + v7) & v9;
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  if (v12 <= 8)
    v13 = 8;
  else
    v13 = v12;
  v14 = *(unsigned __int8 *)(v11 + v13);
  if (v14 >= 2)
  {
    if (v13 <= 3)
      v15 = v13;
    else
      v15 = 4;
    __asm { BR              X12 }
  }
  if (v14 == 1)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, _QWORD))(v5 + 48))(v11, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy((void *)v10, (const void *)v11, v12);
      v16 = 1;
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v10, v11, v4);
      v16 = 1;
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    }
  }
  else
  {
    v16 = 0;
    *(_QWORD *)v10 = *(_QWORD *)v11;
  }
  *(_BYTE *)(v10 + v13) = v16;
  v17 = (_QWORD *)(((v10 | 3) + v13 + 1) & 0xFFFFFFFFFFFFFFFCLL);
  v18 = (_QWORD *)(((v11 | 3) + v13 + 1) & 0xFFFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (_QWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFCLL);
  v20 = (_QWORD *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v19 = *v20;
  *(_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for ListScrollable(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_DWORD *)(v5 + 80) & 0xFCLL;
  v8 = v7 + 11;
  v9 = ~v7 & 0xFFFFFFFFFFFFFFFCLL;
  v10 = ((unint64_t)a1 + v8) & v9;
  v11 = ((unint64_t)a2 + v8) & v9;
  v12 = *(_QWORD *)(v5 + 64);
  if (v10 != v11)
  {
    if (v6)
      v13 = *(_QWORD *)(v5 + 64);
    else
      v13 = v12 + 1;
    if (v13 <= 8)
      v14 = 8;
    else
      v14 = v13;
    v15 = *(unsigned __int8 *)(v10 + v14);
    if (v15 >= 2)
    {
      if (v14 <= 3)
        v16 = v14;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1
      && !(*(unsigned int (**)(unint64_t, uint64_t, _QWORD))(v5 + 48))(v10, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v10, v4);
    }
    v17 = *(unsigned __int8 *)(v11 + v14);
    if (v17 >= 2)
    {
      if (v14 <= 3)
        v18 = v14;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4))
      {
        memcpy((void *)v10, (const void *)v11, v13);
        v19 = 1;
      }
      else
      {
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v10, v11, v4);
        v19 = 1;
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
      }
    }
    else
    {
      v19 = 0;
      *(_QWORD *)v10 = *(_QWORD *)v11;
    }
    *(_BYTE *)(v10 + v14) = v19;
  }
  if (v6)
    v20 = v12;
  else
    v20 = v12 + 1;
  if (v20 <= 8)
    v20 = 8;
  v21 = v20 + 1;
  v22 = (_DWORD *)(((v10 | 3) + v21) & 0xFFFFFFFFFFFFFFFCLL);
  v23 = (_DWORD *)(((v11 | 3) + v21) & 0xFFFFFFFFFFFFFFFCLL);
  *v22 = *v23;
  v22[1] = v23[1];
  v24 = (_DWORD *)(((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  v25 = (_DWORD *)(((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v24 = *v25;
  v24[1] = v25[1];
  *(_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for ListScrollable(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xFCLL;
  v7 = v6 + 11;
  v8 = (unint64_t)a1 + v6 + 11;
  v9 = ~v6 & 0xFFFFFFFFFFFFFFFCLL;
  v10 = v8 & v9;
  v11 = ((unint64_t)a2 + v7) & v9;
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  if (v12 <= 8)
    v13 = 8;
  else
    v13 = v12;
  v14 = *(unsigned __int8 *)(v11 + v13);
  if (v14 >= 2)
  {
    if (v13 <= 3)
      v15 = v13;
    else
      v15 = 4;
    __asm { BR              X12 }
  }
  if (v14 == 1)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, _QWORD))(v5 + 48))(v11, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy((void *)v10, (const void *)v11, v12);
      v16 = 1;
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(v10, v11, v4);
      v16 = 1;
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    }
  }
  else
  {
    v16 = 0;
    *(_QWORD *)v10 = *(_QWORD *)v11;
  }
  *(_BYTE *)(v10 + v13) = v16;
  v17 = (_QWORD *)(((v10 | 3) + v13 + 1) & 0xFFFFFFFFFFFFFFFCLL);
  v18 = (_QWORD *)(((v11 | 3) + v13 + 1) & 0xFFFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (_QWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFCLL);
  v20 = (_QWORD *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v19 = *v20;
  *(_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for ListScrollable(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_DWORD *)(v5 + 80) & 0xFCLL;
  v8 = v7 + 11;
  v9 = ~v7 & 0xFFFFFFFFFFFFFFFCLL;
  v10 = ((unint64_t)a1 + v8) & v9;
  v11 = ((unint64_t)a2 + v8) & v9;
  v12 = *(_QWORD *)(v5 + 64);
  if (v10 != v11)
  {
    if (v6)
      v13 = *(_QWORD *)(v5 + 64);
    else
      v13 = v12 + 1;
    if (v13 <= 8)
      v14 = 8;
    else
      v14 = v13;
    v15 = *(unsigned __int8 *)(v10 + v14);
    if (v15 >= 2)
    {
      if (v14 <= 3)
        v16 = v14;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1
      && !(*(unsigned int (**)(unint64_t, uint64_t, _QWORD))(v5 + 48))(v10, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v10, v4);
    }
    v17 = *(unsigned __int8 *)(v11 + v14);
    if (v17 >= 2)
    {
      if (v14 <= 3)
        v18 = v14;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4))
      {
        memcpy((void *)v10, (const void *)v11, v13);
        v19 = 1;
      }
      else
      {
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(v10, v11, v4);
        v19 = 1;
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
      }
    }
    else
    {
      v19 = 0;
      *(_QWORD *)v10 = *(_QWORD *)v11;
    }
    *(_BYTE *)(v10 + v14) = v19;
  }
  if (v6)
    v20 = v12;
  else
    v20 = v12 + 1;
  if (v20 <= 8)
    v20 = 8;
  v21 = v20 + 1;
  v22 = (_DWORD *)(((v10 | 3) + v21) & 0xFFFFFFFFFFFFFFFCLL);
  v23 = (_DWORD *)(((v11 | 3) + v21) & 0xFFFFFFFFFFFFFFFCLL);
  *v22 = *v23;
  v22[1] = v23[1];
  v24 = (_DWORD *)(((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  v25 = (_DWORD *)(((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v24 = *v25;
  v24[1] = v25[1];
  *(_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListScrollable(int *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_DWORD *)(v3 + 84))
    v4 = *(_QWORD *)(v3 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64) + 1;
  v5 = 8;
  if (v4 > 8)
    v5 = v4;
  if (!a2)
    return 0;
  v6 = *(_DWORD *)(v3 + 80) & 0xFC;
  v7 = v6 | 3;
  v8 = v5 + 4;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_8;
  v11 = ((((((v8 + ((v6 + 11) & ~v7)) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v12 = v11 & 0xFFFFFFF8;
  v13 = a2 - 2147483646;
  if ((v11 & 0xFFFFFFF8) != 0)
    v13 = 2;
  if (v13 >= 0x10000)
    v14 = 4;
  else
    v14 = 2;
  if (v13 < 0x100)
    v15 = 1;
  else
    v15 = v14;
  if (v15 == 4)
  {
    v16 = *(int *)((char *)a1 + v11);
    if (!v16)
      goto LABEL_8;
  }
  else if (v15 == 2)
  {
    v16 = *(unsigned __int16 *)((char *)a1 + v11);
    if (!v16)
      goto LABEL_8;
  }
  else
  {
    v16 = *((unsigned __int8 *)a1 + v11);
    if (!v16)
    {
LABEL_8:
      v9 = *(_QWORD *)((((((v8 + (((unint64_t)a1 + v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFCLL)
                      + 15) & 0xFFFFFFFFFFFFF8);
      if (v9 >= 0xFFFFFFFF)
        LODWORD(v9) = -1;
      return (v9 + 1);
    }
  }
  v17 = v16 - 1;
  if (v12)
  {
    v17 = 0;
    v18 = *a1;
  }
  else
  {
    v18 = 0;
  }
  return (v18 | v17) ^ 0x80000000;
}

void storeEnumTagSinglePayload for ListScrollable(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (!*(_DWORD *)(v5 + 84))
    ++v6;
  if (v6 <= 8)
    v6 = 8;
  if (a3 < 0)
  {
    v8 = a3 - 2147483646;
    if ((((((((_DWORD)v6 + 4 + (((*(_DWORD *)(v5 + 80) & 0xFC) + 11) & ~(*(_DWORD *)(v5 + 80) & 0xFC | 3))) & 0xFFFFFFFC)
           + 11) & 0xFFFFFFFC)
         + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v7 = 1;
    else
      v7 = v9;
    if ((a2 & 0x80000000) == 0)
LABEL_7:
      __asm { BR              X13 }
  }
  else
  {
    v7 = 0u;
    if ((a2 & 0x80000000) == 0)
      goto LABEL_7;
  }
  if ((((((((_DWORD)v6 + 4 + (((*(_DWORD *)(v5 + 80) & 0xFC) + 11) & ~(*(_DWORD *)(v5 + 80) & 0xFC | 3))) & 0xFFFFFFFC)
         + 11) & 0xFFFFFFFC)
       + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = a2 ^ 0x80000000;
    bzero(a1, ((((((v6 + 4 + (((*(_DWORD *)(v5 + 80) & 0xFCLL) + 11) & ~(*(_DWORD *)(v5 + 80) & 0xFCLL | 3))) & 0xFFFFFFFFFFFFFFFCLL)+ 11) & 0xFFFFFFFFFFFFFFFCLL)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18751EEE0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (!a2)
    JUMPOUT(0x18751EECCLL);
  JUMPOUT(0x18751EEA0);
}

void sub_18751EEEC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18751EECCLL);
}

void sub_18751EEF4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18751EECCLL);
}

uint64_t initializeBufferWithCopyOfBuffer for ApplyCollectionViewIDsVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ApplyCollectionViewIDsVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ApplyCollectionViewIDsVisitor(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApplyCollectionViewIDsVisitor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApplyCollectionViewIDsVisitor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ApplyCollectionViewIDsVisitor()
{
  return &type metadata for ApplyCollectionViewIDsVisitor;
}

unint64_t lazy protocol witness table accessor for type AnyHashable2 and conformance AnyHashable2()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2;
  if (!lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1720], MEMORY[0x1E0CE1718]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2);
  }
  return result;
}

uint64_t sub_18751F0A4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 80))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PPTTestCase.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PPTTestCase.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(a1, (_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(uint64_t (**)(_QWORD *, uint64_t *))(v1 + 80));
}

uint64_t destroy for ExplicitIDFromViewListIDVisitor(uint64_t a1)
{
  uint64_t result;

  result = swift_release();
  if (*(_QWORD *)(a1 + 40))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  return result;
}

uint64_t initializeWithCopy for ExplicitIDFromViewListIDVisitor(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  v4 = (_OWORD *)(a1 + 16);
  v5 = a2 + 2;
  v6 = a2[5];
  swift_retain();
  if (v6)
  {
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v7;
    (**(void (***)(uint64_t, _QWORD *, uint64_t))(v6 - 8))(a1 + 16, v5, v6);
  }
  else
  {
    v8 = *((_OWORD *)v5 + 1);
    *v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 48) = v5[4];
  }
  return a1;
}

uint64_t assignWithCopy for ExplicitIDFromViewListIDVisitor(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 16);
      v7 = *(_QWORD *)(a2 + 48);
      v8 = *(_OWORD *)(a2 + 32);
      *v4 = *v5;
      *(_OWORD *)(a1 + 32) = v8;
      *(_QWORD *)(a1 + 48) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 16, a2 + 16);
  }
  else
  {
    v9 = *v5;
    v10 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *v4 = v9;
    *(_OWORD *)(a1 + 32) = v10;
  }
  return a1;
}

uint64_t assignWithTake for ExplicitIDFromViewListIDVisitor(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  if (*(_QWORD *)(a1 + 40))
  {
    if (*(_QWORD *)(a2 + 40))
      __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    else
      outlined destroy of AnyHashable(a1 + 16);
  }
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplicitIDFromViewListIDVisitor(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplicitIDFromViewListIDVisitor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplicitIDFromViewListIDVisitor()
{
  return &type metadata for ExplicitIDFromViewListIDVisitor;
}

uint64_t initializeWithCopy for ExplicitIDOffsetVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ExplicitIDOffsetVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithTake for ExplicitIDOffsetVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplicitIDOffsetVisitor(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplicitIDOffsetVisitor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplicitIDOffsetVisitor()
{
  return &type metadata for ExplicitIDOffsetVisitor;
}

uint64_t Transaction.scrollContentOffsetAdjustmentBehavior.getter()
{
  return Transaction.subscript.getter();
}

uint64_t (*Transaction.disablesPageScrollAnimations.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = Transaction._disablesPageScrollAnimations.getter() & 1;
  return Transaction.disablesPageScrollAnimations.modify;
}

uint64_t Transaction.disablesPageScrollAnimations.modify()
{
  return Transaction._disablesPageScrollAnimations.setter();
}

void static ScrollContentOffsetAdjustmentBehavior.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ScrollContentOffsetAdjustmentBehavior.disabled.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t Transaction.scrollContentOffsetAdjustmentBehavior.setter()
{
  return Transaction.subscript.setter();
}

uint64_t (*Transaction.scrollContentOffsetAdjustmentBehavior.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;

  *a1 = v1;
  Transaction.subscript.getter();
  return Transaction.scrollContentOffsetAdjustmentBehavior.modify;
}

uint64_t Transaction.scrollContentOffsetAdjustmentBehavior.modify(uint64_t a1)
{
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a1 + 8);
  return Transaction.subscript.setter();
}

uint64_t sub_18751F700@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = Transaction._disablesPageScrollAnimations.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18751F72C()
{
  return Transaction._disablesPageScrollAnimations.setter();
}

uint64_t sub_18751F750@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = Transaction.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_18751F79C()
{
  return Transaction.subscript.setter();
}

ValueMetadata *type metadata accessor for ScrollContentOffsetAdjustmentBehavior()
{
  return &type metadata for ScrollContentOffsetAdjustmentBehavior;
}

uint64_t storeEnumTagSinglePayload for ScrollContentOffsetAdjustmentBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18751F844 + 4 * byte_187C3C485[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18751F878 + 4 * byte_187C3C480[v4]))();
}

uint64_t sub_18751F878(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18751F880(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18751F888);
  return result;
}

uint64_t sub_18751F894(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18751F89CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18751F8A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18751F8A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollContentOffsetAdjustmentBehavior.Role()
{
  return &type metadata for ScrollContentOffsetAdjustmentBehavior.Role;
}

ValueMetadata *type metadata accessor for Transaction.ScrollContentAdjustmentBehaviorKey()
{
  return &type metadata for Transaction.ScrollContentAdjustmentBehaviorKey;
}

unint64_t lazy protocol witness table accessor for type ScrollContentOffsetAdjustmentBehavior.Role and conformance ScrollContentOffsetAdjustmentBehavior.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollContentOffsetAdjustmentBehavior.Role and conformance ScrollContentOffsetAdjustmentBehavior.Role;
  if (!lazy protocol witness table cache variable for type ScrollContentOffsetAdjustmentBehavior.Role and conformance ScrollContentOffsetAdjustmentBehavior.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollContentOffsetAdjustmentBehavior.Role, &type metadata for ScrollContentOffsetAdjustmentBehavior.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollContentOffsetAdjustmentBehavior.Role and conformance ScrollContentOffsetAdjustmentBehavior.Role);
  }
  return result;
}

uint64_t EnvironmentValues.pageIndexDisplayMode.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PageIndexDisplayMode.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PageIndexDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PageIndexDisplayMode.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PageIndexDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.pageIndexDisplayMode.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<PageIndexDisplayMode.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PageIndexDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

_BYTE *PageTabViewStyle.init(indexDisplayMode:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void static PageTabViewStyle.IndexDisplayMode.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static PageTabViewStyle.IndexDisplayMode.always.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static PageTabViewStyle.IndexDisplayMode.never.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static PageTabViewStyle._makeView<A>(value:inputs:)()
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  type metadata accessor for _TabViewValue();
}

uint64_t sub_18751FBAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v3 = type metadata accessor for PageTabView(255, v1, v0, v2);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v1, v0, v4);
  type metadata accessor for _VariadicView.Tree();
  v6 = type metadata accessor for PageTabViewStyle.Body(0, v1, v0, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PageTabViewStyle.Body<A>, v6);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PageTabView<A>, v3);
  static _VariadicView.Tree<>._makeView(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for PageTabView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PageTabView);
}

uint64_t type metadata accessor for PageTabViewStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PageTabViewStyle.Body);
}

void static PageTabViewStyle._makeViewList<A>(value:inputs:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  type metadata accessor for _TabViewValue();
}

uint64_t sub_18751FDF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v3 = type metadata accessor for PageTabView(255, v1, v0, v2);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v1, v0, v4);
  type metadata accessor for _VariadicView.Tree();
  v6 = type metadata accessor for PageTabViewStyle.Body(0, v1, v0, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PageTabViewStyle.Body<A>, v6);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PageTabView<A>, v3);
  static _VariadicView.Tree<>._makeViewList(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void PageTabViewStyle.Body.base.getter()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_18751FF88(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void PageTabViewStyle.Body.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Binding();
  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for _TabViewValue();
}

void sub_18752005C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = type metadata accessor for PageTabView(0, v3, v2, v7);
  *(_QWORD *)(v4 - 192) = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  PageTabViewStyle.Body.base.getter();
}

void sub_1875200F8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v4 = *v0;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v0, v2);
  *(_BYTE *)(v3 - 112) = v4;
  PageTabViewStyle.Body.base.getter();
}

uint64_t sub_187520124()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8 - 184) + 16))(v3, v7 + *(int *)(v5 + 52), *(_QWORD *)(v8 - 176));
  v2(v7, v5);
  PageTabView.init(displayMode:selection:)((_BYTE *)(v8 - 112), v3, v1, v0, v6);
  *(_QWORD *)(v8 - 144) = v1;
  *(_QWORD *)(v8 - 136) = v0;
  *(_DWORD *)(v8 - 128) = v4;
  type metadata accessor for TabViewStyleConfiguration.Content(0, v1, v0, v9);
  return _VariadicView.Tree.init(_:content:)();
}

uint64_t PageTabView.init(displayMode:selection:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  _BYTE *v6;
  uint64_t v7;

  *a5 = *a1;
  v6 = &a5[*(int *)(type metadata accessor for PageTabView(0, a3, a4, a4) + 36)];
  type metadata accessor for Binding();
  v7 = type metadata accessor for Optional();
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a2, v7);
}

void closure #1 in PageTabViewStyle.Body.value.getter()
{
  type metadata accessor for _TabViewValue();
}

void sub_187520288(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  PageTabViewStyle.Body.base.getter();
}

uint64_t sub_1875202C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  v7 = type metadata accessor for TabViewStyleConfiguration.Content(0, v1, v0, v6);
  v8 = static ViewBuilder.buildExpression<A>(_:)(v7, v7, &protocol witness table for TabViewStyleConfiguration<A>.Content);
  return static ViewBuilder.buildBlock<A>(_:)(v8, v7, v2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PageTabViewStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  type metadata accessor for PageTabView(255, v4, v5, a2);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v4, v5, v6);
  v7 = type metadata accessor for _VariadicView.Tree();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

void protocol witness for Rule.value.getter in conformance PageTabViewStyle.Body<A>()
{
  PageTabViewStyle.Body.value.getter();
}

uint64_t View.indexViewPlacement(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = *a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &type metadata for IndexViewPlacementModifier, a3);
}

void static _IndexViewPlacement.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static _IndexViewPlacement.toolbar.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

ValueMetadata *type metadata accessor for _IndexViewPlacement()
{
  return &type metadata for _IndexViewPlacement;
}

uint64_t sub_187520420(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for IndexViewPlacementModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

ValueMetadata *type metadata accessor for _IndexViewPlacement.Role()
{
  return &type metadata for _IndexViewPlacement.Role;
}

uint64_t storeEnumTagSinglePayload for PageTabViewStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1875204D0 + 4 * byte_187C3C565[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187520504 + 4 * byte_187C3C560[v4]))();
}

uint64_t sub_187520504(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18752050C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187520514);
  return result;
}

uint64_t sub_187520520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187520528);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18752052C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187520534(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for _IndexViewPlacement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18752058C + 4 * byte_187C3C56F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1875205C0 + 4 * byte_187C3C56A[v4]))();
}

uint64_t sub_1875205C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1875205C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1875205D0);
  return result;
}

uint64_t sub_1875205DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1875205E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1875205E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1875205F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IndexViewPlacementModifier()
{
  return &type metadata for IndexViewPlacementModifier;
}

uint64_t type metadata completion function for PageTabView()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PageTabView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(uint64_t, unint64_t, uint64_t);

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ~(v6 | 7);
  v8 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
  if (v6 <= 7 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0 && (((v6 | 7) + 1) & ~(v6 | 7)) + v8 <= 0x18)
  {
    v12 = *(unsigned int *)(v5 + 84);
    v13 = ~v6;
    *a1 = *a2;
    v14 = (_QWORD *)((unint64_t)(a1 + 8) & v7);
    v15 = (_QWORD *)((unint64_t)(a2 + 8) & v7);
    v16 = (uint64_t *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v16 + v6 + 8) & v13, v12, v4))
      {
LABEL_14:
        memcpy(v14, v15, v8);
        return v3;
      }
    }
    else
    {
      v17 = *v16;
      if ((unint64_t)*v16 >= 0xFFFFFFFF)
        LODWORD(v17) = -1;
      if ((_DWORD)v17 != -1)
        goto LABEL_14;
    }
    *v14 = *v15;
    v18 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v16;
    v19 = ((unint64_t)v18 + v6 + 8) & v13;
    v20 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v20(v19, ((unint64_t)v16 + v6 + 8) & v13, v4);
    return v3;
  }
  v11 = *(_QWORD *)a2;
  *v3 = *(_QWORD *)a2;
  v3 = (_QWORD *)(v11 + ((v6 + 16) & v7));
  swift_retain();
  return v3;
}

uint64_t destroy for PageTabView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = ~v4;
  v6 = (uint64_t *)((((a1 + (v4 | 7) + 1) & ~(v4 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v6 + v4 + 8) & v5);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(((unint64_t)v6 + v4 + 8) & v5, v2);
  }
  v7 = *v6;
  if ((unint64_t)*v6 >= 0xFFFFFFFF)
    LODWORD(v7) = -1;
  result = (v7 + 1);
  if ((_DWORD)v7 == -1)
    goto LABEL_7;
  return result;
}

_BYTE *initializeWithCopy for PageTabView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(uint64_t, unint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 1;
  v8 = (_QWORD *)((unint64_t)&a1[v7] & ~(v6 | 7));
  v9 = (_QWORD *)((unint64_t)&a2[v7] & ~(v6 | 7));
  v10 = ~v6;
  v11 = *(_QWORD *)(v5 + 64);
  v12 = (uint64_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) == 0)
  {
    v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    if ((_DWORD)v13 != -1)
      goto LABEL_5;
LABEL_7:
    *v8 = *v9;
    v14 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v12;
    v15 = ((unint64_t)v14 + v6 + 8) & v10;
    v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v16(v15, ((unint64_t)v12 + v6 + 8) & v10, v4);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)v12 + v6 + 8) & v10))
    goto LABEL_7;
LABEL_5:
  memcpy(v8, v9, ((v6 + 16) & ~v6) + v11);
  return a1;
}

_BYTE *assignWithCopy for PageTabView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t (*v17)(unint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t (*v19)(unint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  int v25;
  uint64_t v26;

  *a1 = *a2;
  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 | 7) + 1;
  v7 = (_QWORD *)((unint64_t)&a1[v6] & ~(v5 | 7));
  v8 = (_QWORD *)((unint64_t)&a2[v6] & ~(v5 | 7));
  v9 = *(unsigned int *)(v4 + 84);
  v10 = ~v5;
  v11 = ((v5 + 16) & ~v5) + *(_QWORD *)(v4 + 64);
  v12 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 0x80000000) != 0)
  {
    v26 = ((v5 + 16) & ~v5) + *(_QWORD *)(v4 + 64);
    v16 = (unint64_t)&a2[v6] & ~(v5 | 7);
    v17 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
    v18 = v17(((unint64_t)v12 + v5 + 8) & ~v5, v9, v3);
    v19 = v17;
    v25 = v18;
    v13 = (_QWORD *)((v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    v10 = ~v5;
    v8 = (_QWORD *)v16;
    v11 = v26;
    v15 = v19(((unint64_t)v13 + v5 + 8) & ~v5, v9, v3);
    if (!v25)
    {
LABEL_5:
      if (!v15)
      {
        *v7 = *v8;
        swift_retain();
        swift_release();
        *v12 = *v13;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 24))(((unint64_t)v12 + v5 + 8) & v10, ((unint64_t)v13 + v5 + 8) & v10, v3);
        return a1;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v4 + 8))(((unint64_t)v12 + v5 + 8) & v10, v3);
      goto LABEL_9;
    }
  }
  else
  {
    v13 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = *v13;
    if (*v13 >= 0xFFFFFFFFuLL)
      LODWORD(v14) = -1;
    v15 = v14 + 1;
    if (*v12 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v15)
  {
    *v7 = *v8;
    *v12 = *v13;
    v20 = ((unint64_t)v12 + v5 + 8) & v10;
    v21 = ((unint64_t)v13 + v5 + 8) & v10;
    v22 = v3;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    swift_retain();
    swift_retain();
    v23(v20, v21, v22);
    return a1;
  }
LABEL_9:
  memcpy(v7, v8, v11);
  return a1;
}

_BYTE *initializeWithTake for PageTabView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 1;
  v8 = (char *)((unint64_t)&a1[v7] & ~(v6 | 7));
  v9 = (_QWORD *)((unint64_t)&a2[v7] & ~(v6 | 7));
  v10 = ~v6;
  v11 = *(_QWORD *)(v5 + 64);
  v12 = (uint64_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) == 0)
  {
    v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    if ((_DWORD)v13 != -1)
      goto LABEL_5;
LABEL_7:
    *(_QWORD *)v8 = *v9;
    v14 = (unint64_t)(v8 + 15);
    *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8) = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))((v6 + 8 + (v14 & 0xFFFFFFFFFFFFFFF8)) & v10, ((unint64_t)v12 + v6 + 8) & v10, v4);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)v12 + v6 + 8) & v10))
    goto LABEL_7;
LABEL_5:
  memcpy(v8, v9, ((v6 + 16) & ~v6) + v11);
  return a1;
}

_BYTE *assignWithTake for PageTabView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t (*v16)(unint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v20;
  uint64_t v21;

  v3 = a1;
  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 1;
  v8 = (_QWORD *)((unint64_t)&a1[v7] & ~(v6 | 7));
  v9 = (_QWORD *)((unint64_t)&a2[v7] & ~(v6 | 7));
  v10 = *(unsigned int *)(v5 + 84);
  v11 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
  v12 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = ~v6;
  if ((v10 & 0x80000000) != 0)
  {
    v20 = (unint64_t)&a2[v7] & ~(v6 | 7);
    v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    v18 = v16(((unint64_t)v12 + v6 + 8) & ~v6, v10, v4);
    v13 = (_QWORD *)((v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    v3 = a1;
    v15 = v16(((unint64_t)v13 + v6 + 8) & ~v6, v10, v4);
    v9 = (_QWORD *)v20;
    if (!v18)
    {
LABEL_5:
      if (!v15)
      {
        *v8 = *v9;
        swift_release();
        *v12 = *v13;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))(((unint64_t)v12 + v6 + 8) & v21, ((unint64_t)v13 + v6 + 8) & v21, v4);
        return v3;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v12 + v6 + 8) & v21, v4);
      goto LABEL_9;
    }
  }
  else
  {
    v13 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = *v13;
    if (*v13 >= 0xFFFFFFFFuLL)
      LODWORD(v14) = -1;
    v15 = v14 + 1;
    if (*v12 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v15)
  {
    *v8 = *v9;
    *v12 = *v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)v12 + v6 + 8) & v21, ((unint64_t)v13 + v6 + 8) & v21, v4);
    return v3;
  }
LABEL_9:
  memcpy(v8, v9, v11);
  return v3;
}

uint64_t getEnumTagSinglePayload for PageTabView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v7 | 7;
  if (v6 - 1 >= a2)
    goto LABEL_24;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64) + ((v8 + 1) & ~v8);
  v10 = 8 * v9;
  if (v9 > 3)
    goto LABEL_7;
  v13 = (((1 << v10) + a2 - v6) >> v10) + 1;
  if (HIWORD(v13))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_15;
LABEL_24:
    v16 = (unint64_t *)((((a1 + v8 + 1) & ~v8) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v7 + 8) & ~v7);
    }
    else
    {
      v17 = *v16;
      if (v17 >= 0xFFFFFFFF)
        LODWORD(v17) = -1;
      v18 = v17 + 1;
    }
    if (v18 >= 2)
      return v18 - 1;
    else
      return 0;
  }
  if (v13 > 0xFF)
  {
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_15;
    goto LABEL_24;
  }
  if (v13 < 2)
    goto LABEL_24;
LABEL_7:
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_24;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v9)
  {
    if (v9 <= 3)
      v15 = ((v7 + 16) & ~(_DWORD)v7) + *(_DWORD *)(v4 + 64) + ((v8 + 1) & ~(_DWORD)v8);
    else
      v15 = 4;
    __asm { BR              X12 }
  }
  return (v14 + v6);
}

